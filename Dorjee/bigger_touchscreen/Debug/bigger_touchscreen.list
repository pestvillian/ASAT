
bigger_touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000515c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013c8  0800530c  0800530c  0000630c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d4  080066d4  000080e8  2**0
                  CONTENTS
  4 .ARM          00000008  080066d4  080066d4  000076d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066dc  080066dc  000080e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066dc  080066dc  000076dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  080066e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000080e8  2**0
                  CONTENTS
 10 .bss          00000370  200000e8  200000e8  000080e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000458  20000458  000080e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000080e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef6e  00000000  00000000  00008118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002686  00000000  00000000  00017086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00019710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c5a  00000000  00000000  0001a738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d90  00000000  00000000  0001b392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011924  00000000  00000000  00040122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e17d0  00000000  00000000  00051a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133216  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bc4  00000000  00000000  0013325c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00137e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080052f4 	.word	0x080052f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ec 	.word	0x200000ec
 80001ec:	080052f4 	.word	0x080052f4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <XPT2046_TouchSelect>:
}

#endif /* SOFTWARE_SPI */

static void XPT2046_TouchSelect()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2110      	movs	r1, #16
 8000588:	4802      	ldr	r0, [pc, #8]	@ (8000594 <XPT2046_TouchSelect+0x14>)
 800058a:	f001 ff6f 	bl	800246c <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2110      	movs	r1, #16
 80005a0:	4802      	ldr	r0, [pc, #8]	@ (80005ac <XPT2046_TouchUnselect+0x14>)
 80005a2:	f001 ff63 	bl	800246c <HAL_GPIO_WritePin>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000

080005b0 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 80005b4:	2120      	movs	r1, #32
 80005b6:	4805      	ldr	r0, [pc, #20]	@ (80005cc <XPT2046_TouchPressed+0x1c>)
 80005b8:	f001 ff40 	bl	800243c <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	bf0c      	ite	eq
 80005c2:	2301      	moveq	r3, #1
 80005c4:	2300      	movne	r3, #0
 80005c6:	b2db      	uxtb	r3, r3
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40020400 	.word	0x40020400

080005d0 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	@ 0x30
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

#endif /* SOFTWARE_SPI */

    XPT2046_TouchSelect();
 80005da:	f7ff ffd1 	bl	8000580 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	77bb      	strb	r3, [r7, #30]
 80005ee:	e03f      	b.n	8000670 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 80005f0:	f7ff ffde 	bl	80005b0 <XPT2046_TouchPressed>
 80005f4:	4603      	mov	r3, r0
 80005f6:	f083 0301 	eor.w	r3, r3, #1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d13b      	bne.n	8000678 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8000600:	7ffb      	ldrb	r3, [r7, #31]
 8000602:	3301      	adds	r3, #1
 8000604:	77fb      	strb	r3, [r7, #31]
	   x_raw[0] = spi_read_byte();
	   x_raw[1] = spi_read_byte();

#else

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	2201      	movs	r2, #1
 800060c:	4944      	ldr	r1, [pc, #272]	@ (8000720 <XPT2046_TouchGetCoordinates+0x150>)
 800060e:	4845      	ldr	r0, [pc, #276]	@ (8000724 <XPT2046_TouchGetCoordinates+0x154>)
 8000610:	f002 fc49 	bl	8002ea6 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8000614:	f107 0210 	add.w	r2, r7, #16
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2302      	movs	r3, #2
 8000620:	4941      	ldr	r1, [pc, #260]	@ (8000728 <XPT2046_TouchGetCoordinates+0x158>)
 8000622:	4840      	ldr	r0, [pc, #256]	@ (8000724 <XPT2046_TouchGetCoordinates+0x154>)
 8000624:	f002 fd83 	bl	800312e <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	2201      	movs	r2, #1
 800062e:	493f      	ldr	r1, [pc, #252]	@ (800072c <XPT2046_TouchGetCoordinates+0x15c>)
 8000630:	483c      	ldr	r0, [pc, #240]	@ (8000724 <XPT2046_TouchGetCoordinates+0x154>)
 8000632:	f002 fc38 	bl	8002ea6 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8000636:	f107 020c 	add.w	r2, r7, #12
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2302      	movs	r3, #2
 8000642:	4939      	ldr	r1, [pc, #228]	@ (8000728 <XPT2046_TouchGetCoordinates+0x158>)
 8000644:	4837      	ldr	r0, [pc, #220]	@ (8000724 <XPT2046_TouchGetCoordinates+0x154>)
 8000646:	f002 fd72 	bl	800312e <HAL_SPI_TransmitReceive>

#endif /* SOFTWARE_SPI */

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800064a:	7b3b      	ldrb	r3, [r7, #12]
 800064c:	021b      	lsls	r3, r3, #8
 800064e:	7b7a      	ldrb	r2, [r7, #13]
 8000650:	4313      	orrs	r3, r2
 8000652:	461a      	mov	r2, r3
 8000654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000656:	4413      	add	r3, r2
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 800065a:	7c3b      	ldrb	r3, [r7, #16]
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	7c7a      	ldrb	r2, [r7, #17]
 8000660:	4313      	orrs	r3, r2
 8000662:	461a      	mov	r2, r3
 8000664:	6a3b      	ldr	r3, [r7, #32]
 8000666:	4413      	add	r3, r2
 8000668:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 800066a:	7fbb      	ldrb	r3, [r7, #30]
 800066c:	3301      	adds	r3, #1
 800066e:	77bb      	strb	r3, [r7, #30]
 8000670:	7fbb      	ldrb	r3, [r7, #30]
 8000672:	2b0f      	cmp	r3, #15
 8000674:	d9bc      	bls.n	80005f0 <XPT2046_TouchGetCoordinates+0x20>
 8000676:	e000      	b.n	800067a <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8000678:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800067a:	f7ff ff8d 	bl	8000598 <XPT2046_TouchUnselect>

    if(nsamples < 16)
 800067e:	7ffb      	ldrb	r3, [r7, #31]
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d801      	bhi.n	8000688 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8000684:	2300      	movs	r3, #0
 8000686:	e046      	b.n	8000716 <XPT2046_TouchGetCoordinates+0x146>

    uint32_t raw_x = (avg_x / 16);
 8000688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800068a:	091b      	lsrs	r3, r3, #4
 800068c:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	f640 5247 	movw	r2, #3399	@ 0xd47
 8000694:	4293      	cmp	r3, r2
 8000696:	d802      	bhi.n	800069e <XPT2046_TouchGetCoordinates+0xce>
 8000698:	f640 5348 	movw	r3, #3400	@ 0xd48
 800069c:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	f247 1248 	movw	r2, #29000	@ 0x7148
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d902      	bls.n	80006ae <XPT2046_TouchGetCoordinates+0xde>
 80006a8:	f247 1348 	movw	r3, #29000	@ 0x7148
 80006ac:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 80006ae:	6a3b      	ldr	r3, [r7, #32]
 80006b0:	091b      	lsrs	r3, r3, #4
 80006b2:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	f640 42e3 	movw	r2, #3299	@ 0xce3
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d802      	bhi.n	80006c4 <XPT2046_TouchGetCoordinates+0xf4>
 80006be:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80006c2:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d902      	bls.n	80006d4 <XPT2046_TouchGetCoordinates+0x104>
 80006ce:	f247 5330 	movw	r3, #30000	@ 0x7530
 80006d2:	617b      	str	r3, [r7, #20]
    // Uncomment this line to calibrate touchscreen:
//    printf("raw_x = %6d, raw_y = %6d\r\n", (int) raw_x, (int) raw_y);
//    printf("\x1b[1F");

#if (ORIENTATION == 0)
	*x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80006d4:	69ba      	ldr	r2, [r7, #24]
 80006d6:	4613      	mov	r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	019b      	lsls	r3, r3, #6
 80006de:	f5a3 1384 	sub.w	r3, r3, #1081344	@ 0x108000
 80006e2:	f5a3 53d0 	sub.w	r3, r3, #6656	@ 0x1a00
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <XPT2046_TouchGetCoordinates+0x160>)
 80006e8:	fba2 2303 	umull	r2, r3, r2, r3
 80006ec:	0b5b      	lsrs	r3, r3, #13
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	4613      	mov	r3, r2
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	1a9b      	subs	r3, r3, r2
 80006fc:	011b      	lsls	r3, r3, #4
 80006fe:	f5a3 2341 	sub.w	r3, r3, #790528	@ 0xc1000
 8000702:	f5a3 63b8 	sub.w	r3, r3, #1472	@ 0x5c0
 8000706:	4a0b      	ldr	r2, [pc, #44]	@ (8000734 <XPT2046_TouchGetCoordinates+0x164>)
 8000708:	fba2 2303 	umull	r2, r3, r2, r3
 800070c:	0b5b      	lsrs	r3, r3, #13
 800070e:	b29a      	uxth	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	3728      	adds	r7, #40	@ 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	08005338 	.word	0x08005338
 8000724:	2000020c 	.word	0x2000020c
 8000728:	0800533c 	.word	0x0800533c
 800072c:	08005340 	.word	0x08005340
 8000730:	51eb851f 	.word	0x51eb851f
 8000734:	4e8b8659 	.word	0x4e8b8659

08000738 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800073e:	2300      	movs	r3, #0
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	2301      	movs	r3, #1
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2300      	movs	r3, #0
 8000748:	2200      	movs	r2, #0
 800074a:	2101      	movs	r1, #1
 800074c:	2000      	movs	r0, #0
 800074e:	f000 fceb 	bl	8001128 <lcdBuildMemoryAccessControlConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	461a      	mov	r2, r3
 8000756:	4bae      	ldr	r3, [pc, #696]	@ (8000a10 <lcdInit+0x2d8>)
 8000758:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800075a:	2300      	movs	r3, #0
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	2301      	movs	r3, #1
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2300      	movs	r3, #0
 8000764:	2201      	movs	r2, #1
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f000 fcdd 	bl	8001128 <lcdBuildMemoryAccessControlConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	4ba8      	ldr	r3, [pc, #672]	@ (8000a14 <lcdInit+0x2dc>)
 8000774:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000776:	2300      	movs	r3, #0
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	2301      	movs	r3, #1
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2300      	movs	r3, #0
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	2001      	movs	r0, #1
 8000786:	f000 fccf 	bl	8001128 <lcdBuildMemoryAccessControlConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	461a      	mov	r2, r3
 800078e:	4ba2      	ldr	r3, [pc, #648]	@ (8000a18 <lcdInit+0x2e0>)
 8000790:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000792:	2300      	movs	r3, #0
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2300      	movs	r3, #0
 800079c:	2201      	movs	r2, #1
 800079e:	2101      	movs	r1, #1
 80007a0:	2001      	movs	r0, #1
 80007a2:	f000 fcc1 	bl	8001128 <lcdBuildMemoryAccessControlConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b9c      	ldr	r3, [pc, #624]	@ (8000a1c <lcdInit+0x2e4>)
 80007ac:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80007ae:	f000 fc91 	bl	80010d4 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80007b2:	2028      	movs	r0, #40	@ 0x28
 80007b4:	f000 fc98 	bl	80010e8 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80007b8:	20cf      	movs	r0, #207	@ 0xcf
 80007ba:	f000 fc95 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 fca2 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x83);
 80007c4:	2083      	movs	r0, #131	@ 0x83
 80007c6:	f000 fc9f 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x30);
 80007ca:	2030      	movs	r0, #48	@ 0x30
 80007cc:	f000 fc9c 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(0xED);
 80007d0:	20ed      	movs	r0, #237	@ 0xed
 80007d2:	f000 fc89 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x64);
 80007d6:	2064      	movs	r0, #100	@ 0x64
 80007d8:	f000 fc96 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x03);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 fc93 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x12);
 80007e2:	2012      	movs	r0, #18
 80007e4:	f000 fc90 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x81);
 80007e8:	2081      	movs	r0, #129	@ 0x81
 80007ea:	f000 fc8d 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(0xE8);
 80007ee:	20e8      	movs	r0, #232	@ 0xe8
 80007f0:	f000 fc7a 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x85);
 80007f4:	2085      	movs	r0, #133	@ 0x85
 80007f6:	f000 fc87 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x01);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 fc84 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x79);
 8000800:	2079      	movs	r0, #121	@ 0x79
 8000802:	f000 fc81 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(0xCB);
 8000806:	20cb      	movs	r0, #203	@ 0xcb
 8000808:	f000 fc6e 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x39);
 800080c:	2039      	movs	r0, #57	@ 0x39
 800080e:	f000 fc7b 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x2C);
 8000812:	202c      	movs	r0, #44	@ 0x2c
 8000814:	f000 fc78 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x00);
 8000818:	2000      	movs	r0, #0
 800081a:	f000 fc75 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x34);
 800081e:	2034      	movs	r0, #52	@ 0x34
 8000820:	f000 fc72 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x02);
 8000824:	2002      	movs	r0, #2
 8000826:	f000 fc6f 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(0xF7);
 800082a:	20f7      	movs	r0, #247	@ 0xf7
 800082c:	f000 fc5c 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x20);
 8000830:	2020      	movs	r0, #32
 8000832:	f000 fc69 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(0xEA);
 8000836:	20ea      	movs	r0, #234	@ 0xea
 8000838:	f000 fc56 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800083c:	2000      	movs	r0, #0
 800083e:	f000 fc63 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x00);
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fc60 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8000848:	20c0      	movs	r0, #192	@ 0xc0
 800084a:	f000 fc4d 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x26);
 800084e:	2026      	movs	r0, #38	@ 0x26
 8000850:	f000 fc5a 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8000854:	20c1      	movs	r0, #193	@ 0xc1
 8000856:	f000 fc47 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x11);
 800085a:	2011      	movs	r0, #17
 800085c:	f000 fc54 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8000860:	20c5      	movs	r0, #197	@ 0xc5
 8000862:	f000 fc41 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x35);
 8000866:	2035      	movs	r0, #53	@ 0x35
 8000868:	f000 fc4e 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x3E);
 800086c:	203e      	movs	r0, #62	@ 0x3e
 800086e:	f000 fc4b 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8000872:	20c7      	movs	r0, #199	@ 0xc7
 8000874:	f000 fc38 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0xBE);
 8000878:	20be      	movs	r0, #190	@ 0xbe
 800087a:	f000 fc45 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 800087e:	2036      	movs	r0, #54	@ 0x36
 8000880:	f000 fc32 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8000884:	4b62      	ldr	r3, [pc, #392]	@ (8000a10 <lcdInit+0x2d8>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fc3d 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 800088e:	203a      	movs	r0, #58	@ 0x3a
 8000890:	f000 fc2a 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x55);
 8000894:	2055      	movs	r0, #85	@ 0x55
 8000896:	f000 fc37 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 800089a:	20b1      	movs	r0, #177	@ 0xb1
 800089c:	f000 fc24 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 fc31 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x1B);
 80008a6:	201b      	movs	r0, #27
 80008a8:	f000 fc2e 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(0xF2);
 80008ac:	20f2      	movs	r0, #242	@ 0xf2
 80008ae:	f000 fc1b 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x08);
 80008b2:	2008      	movs	r0, #8
 80008b4:	f000 fc28 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80008b8:	2026      	movs	r0, #38	@ 0x26
 80008ba:	f000 fc15 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x01);
 80008be:	2001      	movs	r0, #1
 80008c0:	f000 fc22 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80008c4:	20e0      	movs	r0, #224	@ 0xe0
 80008c6:	f000 fc0f 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x1F);
 80008ca:	201f      	movs	r0, #31
 80008cc:	f000 fc1c 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x1A);
 80008d0:	201a      	movs	r0, #26
 80008d2:	f000 fc19 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x18);
 80008d6:	2018      	movs	r0, #24
 80008d8:	f000 fc16 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x0A);
 80008dc:	200a      	movs	r0, #10
 80008de:	f000 fc13 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x0F);
 80008e2:	200f      	movs	r0, #15
 80008e4:	f000 fc10 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x06);
 80008e8:	2006      	movs	r0, #6
 80008ea:	f000 fc0d 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x45);
 80008ee:	2045      	movs	r0, #69	@ 0x45
 80008f0:	f000 fc0a 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x87);
 80008f4:	2087      	movs	r0, #135	@ 0x87
 80008f6:	f000 fc07 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x32);
 80008fa:	2032      	movs	r0, #50	@ 0x32
 80008fc:	f000 fc04 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x0A);
 8000900:	200a      	movs	r0, #10
 8000902:	f000 fc01 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x07);
 8000906:	2007      	movs	r0, #7
 8000908:	f000 fbfe 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x02);
 800090c:	2002      	movs	r0, #2
 800090e:	f000 fbfb 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x07);
 8000912:	2007      	movs	r0, #7
 8000914:	f000 fbf8 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x05);
 8000918:	2005      	movs	r0, #5
 800091a:	f000 fbf5 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x00);
 800091e:	2000      	movs	r0, #0
 8000920:	f000 fbf2 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8000924:	20e1      	movs	r0, #225	@ 0xe1
 8000926:	f000 fbdf 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 fbec 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x25);
 8000930:	2025      	movs	r0, #37	@ 0x25
 8000932:	f000 fbe9 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x27);
 8000936:	2027      	movs	r0, #39	@ 0x27
 8000938:	f000 fbe6 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x05);
 800093c:	2005      	movs	r0, #5
 800093e:	f000 fbe3 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x10);
 8000942:	2010      	movs	r0, #16
 8000944:	f000 fbe0 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x09);
 8000948:	2009      	movs	r0, #9
 800094a:	f000 fbdd 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x3A);
 800094e:	203a      	movs	r0, #58	@ 0x3a
 8000950:	f000 fbda 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x78);
 8000954:	2078      	movs	r0, #120	@ 0x78
 8000956:	f000 fbd7 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x4D);
 800095a:	204d      	movs	r0, #77	@ 0x4d
 800095c:	f000 fbd4 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x05);
 8000960:	2005      	movs	r0, #5
 8000962:	f000 fbd1 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x18);
 8000966:	2018      	movs	r0, #24
 8000968:	f000 fbce 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x0D);
 800096c:	200d      	movs	r0, #13
 800096e:	f000 fbcb 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x38);
 8000972:	2038      	movs	r0, #56	@ 0x38
 8000974:	f000 fbc8 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x3A);
 8000978:	203a      	movs	r0, #58	@ 0x3a
 800097a:	f000 fbc5 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x1F);
 800097e:	201f      	movs	r0, #31
 8000980:	f000 fbc2 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8000984:	202a      	movs	r0, #42	@ 0x2a
 8000986:	f000 fbaf 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800098a:	2000      	movs	r0, #0
 800098c:	f000 fbbc 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x00);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fbb9 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x00);
 8000996:	2000      	movs	r0, #0
 8000998:	f000 fbb6 	bl	8001108 <lcdWriteData>
  lcdWriteData(0xEF);
 800099c:	20ef      	movs	r0, #239	@ 0xef
 800099e:	f000 fbb3 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80009a2:	202b      	movs	r0, #43	@ 0x2b
 80009a4:	f000 fba0 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f000 fbad 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x00);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 fbaa 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x01);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f000 fba7 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x3F);
 80009ba:	203f      	movs	r0, #63	@ 0x3f
 80009bc:	f000 fba4 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80009c0:	20b7      	movs	r0, #183	@ 0xb7
 80009c2:	f000 fb91 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x07);
 80009c6:	2007      	movs	r0, #7
 80009c8:	f000 fb9e 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80009cc:	20b6      	movs	r0, #182	@ 0xb6
 80009ce:	f000 fb8b 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData(0x0A);
 80009d2:	200a      	movs	r0, #10
 80009d4:	f000 fb98 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x82);
 80009d8:	2082      	movs	r0, #130	@ 0x82
 80009da:	f000 fb95 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x27);
 80009de:	2027      	movs	r0, #39	@ 0x27
 80009e0:	f000 fb92 	bl	8001108 <lcdWriteData>
  lcdWriteData(0x00);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 fb8f 	bl	8001108 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 80009ea:	2011      	movs	r0, #17
 80009ec:	f000 fb7c 	bl	80010e8 <lcdWriteCommand>
  HAL_Delay(100);
 80009f0:	2064      	movs	r0, #100	@ 0x64
 80009f2:	f001 fa41 	bl	8001e78 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 80009f6:	2029      	movs	r0, #41	@ 0x29
 80009f8:	f000 fb76 	bl	80010e8 <lcdWriteCommand>
  HAL_Delay(100);
 80009fc:	2064      	movs	r0, #100	@ 0x64
 80009fe:	f001 fa3b 	bl	8001e78 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8000a02:	202c      	movs	r0, #44	@ 0x2c
 8000a04:	f000 fb70 	bl	80010e8 <lcdWriteCommand>
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000108 	.word	0x20000108
 8000a14:	20000109 	.word	0x20000109
 8000a18:	2000010a 	.word	0x2000010a
 8000a1c:	2000010b 	.word	0x2000010b

08000a20 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <lcdFillRGB+0x50>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <lcdFillRGB+0x50>)
 8000a34:	885b      	ldrh	r3, [r3, #2]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f000 fafd 	bl	800103c <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <lcdFillRGB+0x50>)
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <lcdFillRGB+0x50>)
 8000a4a:	885b      	ldrh	r3, [r3, #2]
 8000a4c:	fb02 f303 	mul.w	r3, r2, r3
 8000a50:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8000a52:	e003      	b.n	8000a5c <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fb56 	bl	8001108 <lcdWriteData>
  while(dimensions--)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	60fa      	str	r2, [r7, #12]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1f6      	bne.n	8000a54 <lcdFillRGB+0x34>
  }
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000010 	.word	0x20000010

08000a74 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	80fb      	strh	r3, [r7, #6]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	80bb      	strh	r3, [r7, #4]
 8000a82:	4613      	mov	r3, r2
 8000a84:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <lcdDrawPixel+0x44>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	88fa      	ldrh	r2, [r7, #6]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d20f      	bcs.n	8000ab0 <lcdDrawPixel+0x3c>
 8000a90:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <lcdDrawPixel+0x44>)
 8000a92:	885b      	ldrh	r3, [r3, #2]
 8000a94:	88ba      	ldrh	r2, [r7, #4]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d20a      	bcs.n	8000ab0 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8000a9a:	88bb      	ldrh	r3, [r7, #4]
 8000a9c:	88fa      	ldrh	r2, [r7, #6]
 8000a9e:	88b9      	ldrh	r1, [r7, #4]
 8000aa0:	88f8      	ldrh	r0, [r7, #6]
 8000aa2:	f000 facb 	bl	800103c <lcdSetWindow>
    lcdWriteData(color);
 8000aa6:	887b      	ldrh	r3, [r7, #2]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fb2d 	bl	8001108 <lcdWriteData>
 8000aae:	e000      	b.n	8000ab2 <lcdDrawPixel+0x3e>
        return;
 8000ab0:	bf00      	nop
}
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000010 	.word	0x20000010

08000abc <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4623      	mov	r3, r4
 8000acc:	80fb      	strh	r3, [r7, #6]
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80bb      	strh	r3, [r7, #4]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	807b      	strh	r3, [r7, #2]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8000ada:	88ba      	ldrh	r2, [r7, #4]
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d205      	bcs.n	8000aee <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	817b      	strh	r3, [r7, #10]
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	80fb      	strh	r3, [r7, #6]
 8000aea:	897b      	ldrh	r3, [r7, #10]
 8000aec:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <lcdDrawHLine+0x88>)
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	88ba      	ldrh	r2, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d303      	bcc.n	8000b00 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <lcdDrawHLine+0x88>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <lcdDrawHLine+0x88>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	88fa      	ldrh	r2, [r7, #6]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d303      	bcc.n	8000b12 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <lcdDrawHLine+0x88>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8000b12:	887b      	ldrh	r3, [r7, #2]
 8000b14:	88ba      	ldrh	r2, [r7, #4]
 8000b16:	8879      	ldrh	r1, [r7, #2]
 8000b18:	88f8      	ldrh	r0, [r7, #6]
 8000b1a:	f000 fa8f 	bl	800103c <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e006      	b.n	8000b32 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8000b24:	883b      	ldrh	r3, [r7, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 faee 	bl	8001108 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	ddf4      	ble.n	8000b24 <lcdDrawHLine+0x68>
	}
}
 8000b3a:	bf00      	nop
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	20000010 	.word	0x20000010

08000b48 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4604      	mov	r4, r0
 8000b50:	4608      	mov	r0, r1
 8000b52:	4611      	mov	r1, r2
 8000b54:	461a      	mov	r2, r3
 8000b56:	4623      	mov	r3, r4
 8000b58:	80fb      	strh	r3, [r7, #6]
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80bb      	strh	r3, [r7, #4]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	807b      	strh	r3, [r7, #2]
 8000b62:	4613      	mov	r3, r2
 8000b64:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8000b66:	887a      	ldrh	r2, [r7, #2]
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d205      	bcs.n	8000b7a <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8000b6e:	88bb      	ldrh	r3, [r7, #4]
 8000b70:	817b      	strh	r3, [r7, #10]
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	80bb      	strh	r3, [r7, #4]
 8000b76:	897b      	ldrh	r3, [r7, #10]
 8000b78:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <lcdDrawVLine+0x9c>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	88fa      	ldrh	r2, [r7, #6]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d303      	bcc.n	8000b8c <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <lcdDrawVLine+0x9c>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8000b8c:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <lcdDrawVLine+0x9c>)
 8000b8e:	885b      	ldrh	r3, [r3, #2]
 8000b90:	88ba      	ldrh	r2, [r7, #4]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d303      	bcc.n	8000b9e <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8000b96:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <lcdDrawVLine+0x9c>)
 8000b98:	885b      	ldrh	r3, [r3, #2]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <lcdDrawVLine+0x9c>)
 8000ba0:	885b      	ldrh	r3, [r3, #2]
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d303      	bcc.n	8000bb0 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <lcdDrawVLine+0x9c>)
 8000baa:	885b      	ldrh	r3, [r3, #2]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	88fa      	ldrh	r2, [r7, #6]
 8000bb4:	88b9      	ldrh	r1, [r7, #4]
 8000bb6:	88f8      	ldrh	r0, [r7, #6]
 8000bb8:	f000 fa40 	bl	800103c <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8000bbc:	88bb      	ldrh	r3, [r7, #4]
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	e006      	b.n	8000bd0 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8000bc2:	883b      	ldrh	r3, [r7, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fa9f 	bl	8001108 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	887b      	ldrh	r3, [r7, #2]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	ddf4      	ble.n	8000bc2 <lcdDrawVLine+0x7a>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd90      	pop	{r4, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000010 	.word	0x20000010

08000be8 <lcdDrawRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	80fb      	strh	r3, [r7, #6]
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80bb      	strh	r3, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	807b      	strh	r3, [r7, #2]
 8000c02:	4613      	mov	r3, r2
 8000c04:	803b      	strh	r3, [r7, #0]
	lcdDrawHLine(x, x + w - 1, y, color);
 8000c06:	88f8      	ldrh	r0, [r7, #6]
 8000c08:	88fa      	ldrh	r2, [r7, #6]
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	3b01      	subs	r3, #1
 8000c12:	b299      	uxth	r1, r3
 8000c14:	88ba      	ldrh	r2, [r7, #4]
 8000c16:	8b3b      	ldrh	r3, [r7, #24]
 8000c18:	f7ff ff50 	bl	8000abc <lcdDrawHLine>
	lcdDrawHLine(x, x + w - 1, y + h - 1, color);
 8000c1c:	88f8      	ldrh	r0, [r7, #6]
 8000c1e:	88fa      	ldrh	r2, [r7, #6]
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	4413      	add	r3, r2
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	3b01      	subs	r3, #1
 8000c28:	b299      	uxth	r1, r3
 8000c2a:	88ba      	ldrh	r2, [r7, #4]
 8000c2c:	883b      	ldrh	r3, [r7, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	3b01      	subs	r3, #1
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	8b3b      	ldrh	r3, [r7, #24]
 8000c38:	f7ff ff40 	bl	8000abc <lcdDrawHLine>
	lcdDrawVLine(x, y, y + h - 1, color);
 8000c3c:	88f8      	ldrh	r0, [r7, #6]
 8000c3e:	88b9      	ldrh	r1, [r7, #4]
 8000c40:	88ba      	ldrh	r2, [r7, #4]
 8000c42:	883b      	ldrh	r3, [r7, #0]
 8000c44:	4413      	add	r3, r2
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	8b3b      	ldrh	r3, [r7, #24]
 8000c4e:	f7ff ff7b 	bl	8000b48 <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y, y + h - 1, color);
 8000c52:	88fa      	ldrh	r2, [r7, #6]
 8000c54:	887b      	ldrh	r3, [r7, #2]
 8000c56:	4413      	add	r3, r2
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	b298      	uxth	r0, r3
 8000c5e:	88b9      	ldrh	r1, [r7, #4]
 8000c60:	88ba      	ldrh	r2, [r7, #4]
 8000c62:	883b      	ldrh	r3, [r7, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	8b3b      	ldrh	r3, [r7, #24]
 8000c6e:	f7ff ff6b 	bl	8000b48 <lcdDrawVLine>
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd90      	pop	{r4, r7, pc}
	...

08000c7c <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	4608      	mov	r0, r1
 8000c86:	4611      	mov	r1, r2
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	80fb      	strh	r3, [r7, #6]
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80bb      	strh	r3, [r7, #4]
 8000c92:	460b      	mov	r3, r1
 8000c94:	70fb      	strb	r3, [r7, #3]
 8000c96:	4613      	mov	r3, r2
 8000c98:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9e:	4a4a      	ldr	r2, [pc, #296]	@ (8000dc8 <lcdDrawChar+0x14c>)
 8000ca0:	8812      	ldrh	r2, [r2, #0]
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	f280 808c 	bge.w	8000dc0 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8000ca8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cac:	4a46      	ldr	r2, [pc, #280]	@ (8000dc8 <lcdDrawChar+0x14c>)
 8000cae:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	f280 8085 	bge.w	8000dc0 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cba:	4a44      	ldr	r2, [pc, #272]	@ (8000dcc <lcdDrawChar+0x150>)
 8000cbc:	6892      	ldr	r2, [r2, #8]
 8000cbe:	8892      	ldrh	r2, [r2, #4]
 8000cc0:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db7c      	blt.n	8000dc0 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8000cc6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cca:	4a40      	ldr	r2, [pc, #256]	@ (8000dcc <lcdDrawChar+0x150>)
 8000ccc:	6892      	ldr	r2, [r2, #8]
 8000cce:	88d2      	ldrh	r2, [r2, #6]
 8000cd0:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db74      	blt.n	8000dc0 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8000cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000dcc <lcdDrawChar+0x150>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	88db      	ldrh	r3, [r3, #6]
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73bb      	strb	r3, [r7, #14]
 8000cea:	e061      	b.n	8000db0 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	733b      	strb	r3, [r7, #12]
 8000cf0:	e055      	b.n	8000d9e <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000cf2:	4b36      	ldr	r3, [pc, #216]	@ (8000dcc <lcdDrawChar+0x150>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	78fa      	ldrb	r2, [r7, #3]
 8000cfa:	3a20      	subs	r2, #32
 8000cfc:	4933      	ldr	r1, [pc, #204]	@ (8000dcc <lcdDrawChar+0x150>)
 8000cfe:	6889      	ldr	r1, [r1, #8]
 8000d00:	88c9      	ldrh	r1, [r1, #6]
 8000d02:	fb01 f202 	mul.w	r2, r1, r2
 8000d06:	7ab9      	ldrb	r1, [r7, #10]
 8000d08:	fb02 f101 	mul.w	r1, r2, r1
 8000d0c:	7bba      	ldrb	r2, [r7, #14]
 8000d0e:	7ab8      	ldrb	r0, [r7, #10]
 8000d10:	fb00 f202 	mul.w	r2, r0, r2
 8000d14:	4411      	add	r1, r2
 8000d16:	7b3a      	ldrb	r2, [r7, #12]
 8000d18:	440a      	add	r2, r1
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	72fb      	strb	r3, [r7, #11]
 8000d24:	e032      	b.n	8000d8c <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8000d26:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	da12      	bge.n	8000d54 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8000d2e:	7afb      	ldrb	r3, [r7, #11]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	4413      	add	r3, r2
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	4413      	add	r3, r2
 8000d3e:	b298      	uxth	r0, r3
 8000d40:	7bbb      	ldrb	r3, [r7, #14]
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	88bb      	ldrh	r3, [r7, #4]
 8000d46:	4413      	add	r3, r2
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	883a      	ldrh	r2, [r7, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f7ff fe91 	bl	8000a74 <lcdDrawPixel>
 8000d52:	e015      	b.n	8000d80 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8000d54:	8c3a      	ldrh	r2, [r7, #32]
 8000d56:	883b      	ldrh	r3, [r7, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d011      	beq.n	8000d80 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8000d5c:	7afb      	ldrb	r3, [r7, #11]
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	4413      	add	r3, r2
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	4413      	add	r3, r2
 8000d6c:	b298      	uxth	r0, r3
 8000d6e:	7bbb      	ldrb	r3, [r7, #14]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	8c3a      	ldrh	r2, [r7, #32]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f7ff fe7a 	bl	8000a74 <lcdDrawPixel>
				}
				line <<= 1;
 8000d80:	7b7b      	ldrb	r3, [r7, #13]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	72fb      	strb	r3, [r7, #11]
 8000d8c:	7afb      	ldrb	r3, [r7, #11]
 8000d8e:	2b07      	cmp	r3, #7
 8000d90:	d9c9      	bls.n	8000d26 <lcdDrawChar+0xaa>
			}

			xP += 8;
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	3308      	adds	r3, #8
 8000d96:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8000d98:	7b3b      	ldrb	r3, [r7, #12]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	733b      	strb	r3, [r7, #12]
 8000d9e:	7b3a      	ldrb	r2, [r7, #12]
 8000da0:	7abb      	ldrb	r3, [r7, #10]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d3a5      	bcc.n	8000cf2 <lcdDrawChar+0x76>
		}

		xP = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000daa:	7bbb      	ldrb	r3, [r7, #14]
 8000dac:	3301      	adds	r3, #1
 8000dae:	73bb      	strb	r3, [r7, #14]
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <lcdDrawChar+0x150>)
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	88db      	ldrh	r3, [r3, #6]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d396      	bcc.n	8000cec <lcdDrawChar+0x70>
 8000dbe:	e000      	b.n	8000dc2 <lcdDrawChar+0x146>
		return;
 8000dc0:	bf00      	nop
	}
}
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	20000010 	.word	0x20000010
 8000dcc:	20000018 	.word	0x20000018

08000dd0 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8000dd0:	b40f      	push	{r0, r1, r2, r3}
 8000dd2:	b590      	push	{r4, r7, lr}
 8000dd4:	b085      	sub	sp, #20
 8000dd6:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	69b9      	ldr	r1, [r7, #24]
 8000de2:	483d      	ldr	r0, [pc, #244]	@ (8000ed8 <lcdPrintf+0x108>)
 8000de4:	f003 fbf0 	bl	80045c8 <vsiprintf>
	va_end(lst);

	p = buf;
 8000de8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed8 <lcdPrintf+0x108>)
 8000dea:	607b      	str	r3, [r7, #4]
	while (*p)
 8000dec:	e067      	b.n	8000ebe <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b0a      	cmp	r3, #10
 8000df4:	d10c      	bne.n	8000e10 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8000df6:	4b39      	ldr	r3, [pc, #228]	@ (8000edc <lcdPrintf+0x10c>)
 8000df8:	885a      	ldrh	r2, [r3, #2]
 8000dfa:	4b39      	ldr	r3, [pc, #228]	@ (8000ee0 <lcdPrintf+0x110>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	88db      	ldrh	r3, [r3, #6]
 8000e00:	4413      	add	r3, r2
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b35      	ldr	r3, [pc, #212]	@ (8000edc <lcdPrintf+0x10c>)
 8000e06:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8000e08:	4b34      	ldr	r3, [pc, #208]	@ (8000edc <lcdPrintf+0x10c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
 8000e0e:	e04a      	b.n	8000ea6 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b0d      	cmp	r3, #13
 8000e16:	d046      	beq.n	8000ea6 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b09      	cmp	r3, #9
 8000e1e:	d10b      	bne.n	8000e38 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8000e20:	4b2e      	ldr	r3, [pc, #184]	@ (8000edc <lcdPrintf+0x10c>)
 8000e22:	881a      	ldrh	r2, [r3, #0]
 8000e24:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee0 <lcdPrintf+0x110>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	889b      	ldrh	r3, [r3, #4]
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	4413      	add	r3, r2
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <lcdPrintf+0x10c>)
 8000e34:	801a      	strh	r2, [r3, #0]
 8000e36:	e036      	b.n	8000ea6 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8000e38:	4b28      	ldr	r3, [pc, #160]	@ (8000edc <lcdPrintf+0x10c>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	b218      	sxth	r0, r3
 8000e3e:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <lcdPrintf+0x10c>)
 8000e40:	885b      	ldrh	r3, [r3, #2]
 8000e42:	b219      	sxth	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781a      	ldrb	r2, [r3, #0]
 8000e48:	4b25      	ldr	r3, [pc, #148]	@ (8000ee0 <lcdPrintf+0x110>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	b29c      	uxth	r4, r3
 8000e4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <lcdPrintf+0x110>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	4623      	mov	r3, r4
 8000e58:	f7ff ff10 	bl	8000c7c <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <lcdPrintf+0x10c>)
 8000e5e:	881a      	ldrh	r2, [r3, #0]
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <lcdPrintf+0x110>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	889b      	ldrh	r3, [r3, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <lcdPrintf+0x10c>)
 8000e6c:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <lcdPrintf+0x110>)
 8000e70:	7b1b      	ldrb	r3, [r3, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d017      	beq.n	8000ea6 <lcdPrintf+0xd6>
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <lcdPrintf+0x10c>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <lcdPrintf+0x114>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <lcdPrintf+0x110>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	889b      	ldrh	r3, [r3, #4]
 8000e88:	1acb      	subs	r3, r1, r3
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dd0b      	ble.n	8000ea6 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <lcdPrintf+0x10c>)
 8000e90:	885a      	ldrh	r2, [r3, #2]
 8000e92:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <lcdPrintf+0x110>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	88db      	ldrh	r3, [r3, #6]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <lcdPrintf+0x10c>)
 8000e9e:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <lcdPrintf+0x10c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8000eac:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <lcdPrintf+0x10c>)
 8000eae:	885a      	ldrh	r2, [r3, #2]
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <lcdPrintf+0x114>)
 8000eb2:	885b      	ldrh	r3, [r3, #2]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d302      	bcc.n	8000ebe <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <lcdPrintf+0x10c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	805a      	strh	r2, [r3, #2]
	while (*p)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d193      	bne.n	8000dee <lcdPrintf+0x1e>
		}
	}
}
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ed2:	b004      	add	sp, #16
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000010c 	.word	0x2000010c
 8000edc:	20000104 	.word	0x20000104
 8000ee0:	20000018 	.word	0x20000018
 8000ee4:	20000010 	.word	0x20000010

08000ee8 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8000ef0:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <lcdSetTextFont+0x1c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6093      	str	r3, [r2, #8]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000018 	.word	0x20000018

08000f08 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460a      	mov	r2, r1
 8000f12:	80fb      	strh	r3, [r7, #6]
 8000f14:	4613      	mov	r3, r2
 8000f16:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <lcdSetTextColor+0x28>)
 8000f1c:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8000f1e:	88bb      	ldrh	r3, [r7, #4]
 8000f20:	4a03      	ldr	r2, [pc, #12]	@ (8000f30 <lcdSetTextColor+0x28>)
 8000f22:	6053      	str	r3, [r2, #4]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	20000018 	.word	0x20000018

08000f34 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8000f3e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ff4 <lcdSetOrientation+0xc0>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8000f44:	2036      	movs	r0, #54	@ 0x36
 8000f46:	f000 f8cf 	bl	80010e8 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff4 <lcdSetOrientation+0xc0>)
 8000f4c:	791b      	ldrb	r3, [r3, #4]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d83e      	bhi.n	8000fd0 <lcdSetOrientation+0x9c>
 8000f52:	a201      	add	r2, pc, #4	@ (adr r2, 8000f58 <lcdSetOrientation+0x24>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	08000f69 	.word	0x08000f69
 8000f5c:	08000f9d 	.word	0x08000f9d
 8000f60:	08000f83 	.word	0x08000f83
 8000f64:	08000fb7 	.word	0x08000fb7
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8000f68:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <lcdSetOrientation+0xc4>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f8cb 	bl	8001108 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f72:	4b20      	ldr	r3, [pc, #128]	@ (8000ff4 <lcdSetOrientation+0xc0>)
 8000f74:	22f0      	movs	r2, #240	@ 0xf0
 8000f76:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000f78:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <lcdSetOrientation+0xc0>)
 8000f7a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f7e:	805a      	strh	r2, [r3, #2]
			break;
 8000f80:	e027      	b.n	8000fd2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8000f82:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <lcdSetOrientation+0xc8>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f8be 	bl	8001108 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <lcdSetOrientation+0xc0>)
 8000f8e:	22f0      	movs	r2, #240	@ 0xf0
 8000f90:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000f92:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <lcdSetOrientation+0xc0>)
 8000f94:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f98:	805a      	strh	r2, [r3, #2]
			break;
 8000f9a:	e01a      	b.n	8000fd2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8000f9c:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <lcdSetOrientation+0xcc>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f8b1 	bl	8001108 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <lcdSetOrientation+0xc0>)
 8000fa8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fac:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <lcdSetOrientation+0xc0>)
 8000fb0:	22f0      	movs	r2, #240	@ 0xf0
 8000fb2:	805a      	strh	r2, [r3, #2]
			break;
 8000fb4:	e00d      	b.n	8000fd2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <lcdSetOrientation+0xd0>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f8a4 	bl	8001108 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <lcdSetOrientation+0xc0>)
 8000fc2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fc6:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <lcdSetOrientation+0xc0>)
 8000fca:	22f0      	movs	r2, #240	@ 0xf0
 8000fcc:	805a      	strh	r2, [r3, #2]
			break;
 8000fce:	e000      	b.n	8000fd2 <lcdSetOrientation+0x9e>
		default:
			break;
 8000fd0:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <lcdSetOrientation+0xc0>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <lcdSetOrientation+0xc0>)
 8000fdc:	885b      	ldrh	r3, [r3, #2]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f000 f829 	bl	800103c <lcdSetWindow>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	20000108 	.word	0x20000108
 8000ffc:	2000010a 	.word	0x2000010a
 8001000:	20000109 	.word	0x20000109
 8001004:	2000010b 	.word	0x2000010b

08001008 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	460a      	mov	r2, r1
 8001012:	80fb      	strh	r3, [r7, #6]
 8001014:	4613      	mov	r3, r2
 8001016:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001018:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <lcdSetCursor+0x30>)
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 800101e:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <lcdSetCursor+0x30>)
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8001024:	88bb      	ldrh	r3, [r7, #4]
 8001026:	88fa      	ldrh	r2, [r7, #6]
 8001028:	88b9      	ldrh	r1, [r7, #4]
 800102a:	88f8      	ldrh	r0, [r7, #6]
 800102c:	f000 f806 	bl	800103c <lcdSetWindow>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000104 	.word	0x20000104

0800103c <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4604      	mov	r4, r0
 8001044:	4608      	mov	r0, r1
 8001046:	4611      	mov	r1, r2
 8001048:	461a      	mov	r2, r3
 800104a:	4623      	mov	r3, r4
 800104c:	80fb      	strh	r3, [r7, #6]
 800104e:	4603      	mov	r3, r0
 8001050:	80bb      	strh	r3, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]
 8001056:	4613      	mov	r3, r2
 8001058:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 800105a:	202a      	movs	r0, #42	@ 0x2a
 800105c:	f000 f844 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	b29b      	uxth	r3, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f84e 	bl	8001108 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	b29b      	uxth	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f848 	bl	8001108 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	b29b      	uxth	r3, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f842 	bl	8001108 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	b29b      	uxth	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f83c 	bl	8001108 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8001090:	202b      	movs	r0, #43	@ 0x2b
 8001092:	f000 f829 	bl	80010e8 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 8001096:	88bb      	ldrh	r3, [r7, #4]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	b29b      	uxth	r3, r3
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f833 	bl	8001108 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 80010a2:	88bb      	ldrh	r3, [r7, #4]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f82d 	bl	8001108 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 80010ae:	883b      	ldrh	r3, [r7, #0]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f827 	bl	8001108 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 80010ba:	883b      	ldrh	r3, [r7, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f821 	bl	8001108 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80010c6:	202c      	movs	r0, #44	@ 0x2c
 80010c8:	f000 f80e 	bl	80010e8 <lcdWriteCommand>
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd90      	pop	{r4, r7, pc}

080010d4 <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 80010d8:	2001      	movs	r0, #1
 80010da:	f000 f805 	bl	80010e8 <lcdWriteCommand>
	HAL_Delay(50);
 80010de:	2032      	movs	r0, #50	@ 0x32
 80010e0:	f000 feca 	bl	8001e78 <HAL_Delay>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 80010f2:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80010f6:	79fa      	ldrb	r2, [r7, #7]
 80010f8:	b292      	uxth	r2, r2
 80010fa:	801a      	strh	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8001112:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <lcdWriteData+0x1c>)
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	8013      	strh	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	60020000 	.word	0x60020000

08001128 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8001128:	b490      	push	{r4, r7}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4604      	mov	r4, r0
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4623      	mov	r3, r4
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	4603      	mov	r3, r0
 800113c:	71bb      	strb	r3, [r7, #6]
 800113e:	460b      	mov	r3, r1
 8001140:	717b      	strb	r3, [r7, #5]
 8001142:	4613      	mov	r3, r2
 8001144:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 800114a:	7f3b      	ldrb	r3, [r7, #28]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <lcdBuildMemoryAccessControlConfig+0x30>
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8001158:	7e3b      	ldrb	r3, [r7, #24]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <lcdBuildMemoryAccessControlConfig+0x3e>
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8001166:	793b      	ldrb	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <lcdBuildMemoryAccessControlConfig+0x4c>
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	f043 0310 	orr.w	r3, r3, #16
 8001172:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8001174:	797b      	ldrb	r3, [r7, #5]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <lcdBuildMemoryAccessControlConfig+0x5a>
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	f043 0320 	orr.w	r3, r3, #32
 8001180:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <lcdBuildMemoryAccessControlConfig+0x68>
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800118e:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <lcdBuildMemoryAccessControlConfig+0x76>
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800119c:	73fb      	strb	r3, [r7, #15]
  return value;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc90      	pop	{r4, r7}
 80011a8:	4770      	bx	lr

080011aa <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011b2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011b6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d013      	beq.n	80011ea <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011c6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011ca:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011d2:	e000      	b.n	80011d6 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011d4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f9      	beq.n	80011d4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011ea:	687b      	ldr	r3, [r7, #4]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_write>:
uint8_t handleTouch();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	e009      	b.n	800121e <_write+0x26>
		ITM_SendChar((*ptr++));  // Send the character via ITM
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	60ba      	str	r2, [r7, #8]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ffc9 	bl	80011aa <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	3301      	adds	r3, #1
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	dbf1      	blt.n	800120a <_write+0x12>
	}
	return len;
 8001226:	687b      	ldr	r3, [r7, #4]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */

	printf("Hello\n");
 8001234:	481c      	ldr	r0, [pc, #112]	@ (80012a8 <main+0x78>)
 8001236:	f003 f945 	bl	80044c4 <puts>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800123a:	f000 fdab 	bl	8001d94 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800123e:	f000 f83b 	bl	80012b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001242:	f000 f993 	bl	800156c <MX_GPIO_Init>
	MX_FMC_Init();
 8001246:	f000 f92f 	bl	80014a8 <MX_FMC_Init>
	MX_TIM3_Init();
 800124a:	f000 f8d5 	bl	80013f8 <MX_TIM3_Init>
	MX_SPI4_Init();
 800124e:	f000 f89d 	bl	800138c <MX_SPI4_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	2140      	movs	r1, #64	@ 0x40
 8001256:	4815      	ldr	r0, [pc, #84]	@ (80012ac <main+0x7c>)
 8001258:	f001 f908 	bl	800246c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800125c:	2032      	movs	r0, #50	@ 0x32
 800125e:	f000 fe0b 	bl	8001e78 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2140      	movs	r1, #64	@ 0x40
 8001266:	4811      	ldr	r0, [pc, #68]	@ (80012ac <main+0x7c>)
 8001268:	f001 f900 	bl	800246c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800126c:	2032      	movs	r0, #50	@ 0x32
 800126e:	f000 fe03 	bl	8001e78 <HAL_Delay>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001272:	2100      	movs	r1, #0
 8001274:	480e      	ldr	r0, [pc, #56]	@ (80012b0 <main+0x80>)
 8001276:	f002 fa77 	bl	8003768 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR1 = 50;
 800127a:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <main+0x80>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2232      	movs	r2, #50	@ 0x32
 8001280:	635a      	str	r2, [r3, #52]	@ 0x34

	lcdInit();
 8001282:	f7ff fa59 	bl	8000738 <lcdInit>
	//lcdTest();
	lcdSetOrientation(LCD_ORIENTATION_LANDSCAPE);
 8001286:	2001      	movs	r0, #1
 8001288:	f7ff fe54 	bl	8000f34 <lcdSetOrientation>
	DrawMainPage(1);
 800128c:	2001      	movs	r0, #1
 800128e:	f000 fa27 	bl	80016e0 <DrawMainPage>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (touchFlag) {
 8001292:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <main+0x84>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0fb      	beq.n	8001292 <main+0x62>
			handleTouch();
 800129a:	f000 fab9 	bl	8001810 <handleTouch>
			touchFlag = 0;
 800129e:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <main+0x84>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
		if (touchFlag) {
 80012a4:	e7f5      	b.n	8001292 <main+0x62>
 80012a6:	bf00      	nop
 80012a8:	0800530c 	.word	0x0800530c
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	20000264 	.word	0x20000264
 80012b4:	200002fc 	.word	0x200002fc

080012b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b094      	sub	sp, #80	@ 0x50
 80012bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	2230      	movs	r2, #48	@ 0x30
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 fa1c 	bl	8004704 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	4b28      	ldr	r3, [pc, #160]	@ (8001384 <SystemClock_Config+0xcc>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	4a27      	ldr	r2, [pc, #156]	@ (8001384 <SystemClock_Config+0xcc>)
 80012e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ec:	4b25      	ldr	r3, [pc, #148]	@ (8001384 <SystemClock_Config+0xcc>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <SystemClock_Config+0xd0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a21      	ldr	r2, [pc, #132]	@ (8001388 <SystemClock_Config+0xd0>)
 8001302:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <SystemClock_Config+0xd0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001314:	2301      	movs	r3, #1
 8001316:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001318:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131e:	2302      	movs	r3, #2
 8001320:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001322:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001326:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001328:	2308      	movs	r3, #8
 800132a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800132c:	23a8      	movs	r3, #168	@ 0xa8
 800132e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001330:	2302      	movs	r3, #2
 8001332:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001334:	2307      	movs	r3, #7
 8001336:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001338:	f107 0320 	add.w	r3, r7, #32
 800133c:	4618      	mov	r0, r3
 800133e:	f001 f8c7 	bl	80024d0 <HAL_RCC_OscConfig>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0x94>
		Error_Handler();
 8001348:	f000 fb02 	bl	8001950 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800134c:	230f      	movs	r3, #15
 800134e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001350:	2302      	movs	r3, #2
 8001352:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001358:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800135c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800135e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001362:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	2105      	movs	r1, #5
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fb28 	bl	80029c0 <HAL_RCC_ClockConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0xc2>
		Error_Handler();
 8001376:	f000 faeb 	bl	8001950 <Error_Handler>
	}
}
 800137a:	bf00      	nop
 800137c:	3750      	adds	r7, #80	@ 0x50
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40007000 	.word	0x40007000

0800138c <MX_SPI4_Init>:
/**
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8001390:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <MX_SPI4_Init+0x64>)
 8001392:	4a18      	ldr	r2, [pc, #96]	@ (80013f4 <MX_SPI4_Init+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8001396:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <MX_SPI4_Init+0x64>)
 8001398:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800139c:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800139e:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <MX_SPI4_Init+0x64>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <MX_SPI4_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <MX_SPI4_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <MX_SPI4_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <MX_SPI4_Init+0x64>)
 80013b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013bc:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <MX_SPI4_Init+0x64>)
 80013c0:	2228      	movs	r2, #40	@ 0x28
 80013c2:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <MX_SPI4_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MX_SPI4_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d0:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <MX_SPI4_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi4.Init.CRCPolynomial = 10;
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <MX_SPI4_Init+0x64>)
 80013d8:	220a      	movs	r2, #10
 80013da:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 80013dc:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <MX_SPI4_Init+0x64>)
 80013de:	f001 fcd9 	bl	8002d94 <HAL_SPI_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_SPI4_Init+0x60>
		Error_Handler();
 80013e8:	f000 fab2 	bl	8001950 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000020c 	.word	0x2000020c
 80013f4:	40013400 	.word	0x40013400

080013f8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800141a:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <MX_TIM3_Init+0xa8>)
 800141c:	4a21      	ldr	r2, [pc, #132]	@ (80014a4 <MX_TIM3_Init+0xac>)
 800141e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 168 - 1;
 8001420:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MX_TIM3_Init+0xa8>)
 8001422:	22a7      	movs	r2, #167	@ 0xa7
 8001424:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b1e      	ldr	r3, [pc, #120]	@ (80014a0 <MX_TIM3_Init+0xa8>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100;
 800142c:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <MX_TIM3_Init+0xa8>)
 800142e:	2264      	movs	r2, #100	@ 0x64
 8001430:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001432:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <MX_TIM3_Init+0xa8>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <MX_TIM3_Init+0xa8>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800143e:	4818      	ldr	r0, [pc, #96]	@ (80014a0 <MX_TIM3_Init+0xa8>)
 8001440:	f002 f942 	bl	80036c8 <HAL_TIM_PWM_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x56>
		Error_Handler();
 800144a:	f000 fa81 	bl	8001950 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	4619      	mov	r1, r3
 800145c:	4810      	ldr	r0, [pc, #64]	@ (80014a0 <MX_TIM3_Init+0xa8>)
 800145e:	f002 fd8f 	bl	8003f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 8001468:	f000 fa72 	bl	8001950 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146c:	2360      	movs	r3, #96	@ 0x60
 800146e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2200      	movs	r2, #0
 8001480:	4619      	mov	r1, r3
 8001482:	4807      	ldr	r0, [pc, #28]	@ (80014a0 <MX_TIM3_Init+0xa8>)
 8001484:	f002 fa38 	bl	80038f8 <HAL_TIM_PWM_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800148e:	f000 fa5f 	bl	8001950 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001492:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <MX_TIM3_Init+0xa8>)
 8001494:	f000 faf4 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	@ 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000264 	.word	0x20000264
 80014a4:	40000400 	.word	0x40000400

080014a8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = { 0 };
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	615a      	str	r2, [r3, #20]
 80014be:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 80014c0:	4b28      	ldr	r3, [pc, #160]	@ (8001564 <MX_FMC_Init+0xbc>)
 80014c2:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80014c6:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80014c8:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <MX_FMC_Init+0xbc>)
 80014ca:	4a27      	ldr	r2, [pc, #156]	@ (8001568 <MX_FMC_Init+0xc0>)
 80014cc:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80014ce:	4b25      	ldr	r3, [pc, #148]	@ (8001564 <MX_FMC_Init+0xbc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80014d4:	4b23      	ldr	r3, [pc, #140]	@ (8001564 <MX_FMC_Init+0xbc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80014da:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <MX_FMC_Init+0xbc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80014e0:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <MX_FMC_Init+0xbc>)
 80014e2:	2210      	movs	r2, #16
 80014e4:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80014e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <MX_FMC_Init+0xbc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001564 <MX_FMC_Init+0xbc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
	hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <MX_FMC_Init+0xbc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <MX_FMC_Init+0xbc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	@ 0x24
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <MX_FMC_Init+0xbc>)
 8001500:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001504:	629a      	str	r2, [r3, #40]	@ 0x28
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001506:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <MX_FMC_Init+0xbc>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <MX_FMC_Init+0xbc>)
 800150e:	2200      	movs	r2, #0
 8001510:	631a      	str	r2, [r3, #48]	@ 0x30
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001512:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <MX_FMC_Init+0xbc>)
 8001514:	2200      	movs	r2, #0
 8001516:	635a      	str	r2, [r3, #52]	@ 0x34
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <MX_FMC_Init+0xbc>)
 800151a:	2200      	movs	r2, #0
 800151c:	639a      	str	r2, [r3, #56]	@ 0x38
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_FMC_Init+0xbc>)
 8001520:	2200      	movs	r2, #0
 8001522:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_FMC_Init+0xbc>)
 8001526:	2200      	movs	r2, #0
 8001528:	645a      	str	r2, [r3, #68]	@ 0x44
	/* Timing */
	Timing.AddressSetupTime = 3;
 800152a:	2303      	movs	r3, #3
 800152c:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 800152e:	230f      	movs	r3, #15
 8001530:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 2;
 8001532:	2302      	movs	r3, #2
 8001534:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 2;
 8001536:	2302      	movs	r3, #2
 8001538:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 800153a:	2310      	movs	r3, #16
 800153c:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 800153e:	2311      	movs	r3, #17
 8001540:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2200      	movs	r2, #0
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_FMC_Init+0xbc>)
 800154e:	f002 f873 	bl	8003638 <HAL_SRAM_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_FMC_Init+0xb4>
		Error_Handler();
 8001558:	f000 f9fa 	bl	8001950 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 800155c:	bf00      	nop
 800155e:	3720      	adds	r7, #32
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200002ac 	.word	0x200002ac
 8001568:	a0000104 	.word	0xa0000104

0800156c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	@ 0x30
 8001570:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	4b52      	ldr	r3, [pc, #328]	@ (80016d0 <MX_GPIO_Init+0x164>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a51      	ldr	r2, [pc, #324]	@ (80016d0 <MX_GPIO_Init+0x164>)
 800158c:	f043 0310 	orr.w	r3, r3, #16
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b4f      	ldr	r3, [pc, #316]	@ (80016d0 <MX_GPIO_Init+0x164>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	4b4b      	ldr	r3, [pc, #300]	@ (80016d0 <MX_GPIO_Init+0x164>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a4a      	ldr	r2, [pc, #296]	@ (80016d0 <MX_GPIO_Init+0x164>)
 80015a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b48      	ldr	r3, [pc, #288]	@ (80016d0 <MX_GPIO_Init+0x164>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b44      	ldr	r3, [pc, #272]	@ (80016d0 <MX_GPIO_Init+0x164>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a43      	ldr	r2, [pc, #268]	@ (80016d0 <MX_GPIO_Init+0x164>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b41      	ldr	r3, [pc, #260]	@ (80016d0 <MX_GPIO_Init+0x164>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b3d      	ldr	r3, [pc, #244]	@ (80016d0 <MX_GPIO_Init+0x164>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a3c      	ldr	r2, [pc, #240]	@ (80016d0 <MX_GPIO_Init+0x164>)
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b3a      	ldr	r3, [pc, #232]	@ (80016d0 <MX_GPIO_Init+0x164>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b36      	ldr	r3, [pc, #216]	@ (80016d0 <MX_GPIO_Init+0x164>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a35      	ldr	r2, [pc, #212]	@ (80016d0 <MX_GPIO_Init+0x164>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b33      	ldr	r3, [pc, #204]	@ (80016d0 <MX_GPIO_Init+0x164>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <MX_GPIO_Init+0x164>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a2e      	ldr	r2, [pc, #184]	@ (80016d0 <MX_GPIO_Init+0x164>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b2c      	ldr	r3, [pc, #176]	@ (80016d0 <MX_GPIO_Init+0x164>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001630:	4828      	ldr	r0, [pc, #160]	@ (80016d4 <MX_GPIO_Init+0x168>)
 8001632:	f000 ff1b 	bl	800246c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	2140      	movs	r1, #64	@ 0x40
 800163a:	4827      	ldr	r0, [pc, #156]	@ (80016d8 <MX_GPIO_Init+0x16c>)
 800163c:	f000 ff16 	bl	800246c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001640:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001644:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001652:	2305      	movs	r3, #5
 8001654:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	481f      	ldr	r0, [pc, #124]	@ (80016dc <MX_GPIO_Init+0x170>)
 800165e:	f000 fd41 	bl	80020e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DEBUG_LED_Pin */
	GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8001662:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001666:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	4816      	ldr	r0, [pc, #88]	@ (80016d4 <MX_GPIO_Init+0x168>)
 800167c:	f000 fd32 	bl	80020e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_NRST_Pin */
	GPIO_InitStruct.Pin = LCD_NRST_Pin;
 8001680:	2340      	movs	r3, #64	@ 0x40
 8001682:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(LCD_NRST_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	4810      	ldr	r0, [pc, #64]	@ (80016d8 <MX_GPIO_Init+0x16c>)
 8001698:	f000 fd24 	bl	80020e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : T_IRQ_Pin */
	GPIO_InitStruct.Pin = T_IRQ_Pin;
 800169c:	2320      	movs	r3, #32
 800169e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	480a      	ldr	r0, [pc, #40]	@ (80016dc <MX_GPIO_Init+0x170>)
 80016b2:	f000 fd17 	bl	80020e4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2017      	movs	r0, #23
 80016bc:	f000 fcdb 	bl	8002076 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016c0:	2017      	movs	r0, #23
 80016c2:	f000 fcf4 	bl	80020ae <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80016c6:	bf00      	nop
 80016c8:	3730      	adds	r7, #48	@ 0x30
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40020400 	.word	0x40020400

080016e0 <DrawMainPage>:
/**
 * @brief: Draw main page and handle button label and status updates
 * @param: page_num: determines which page should be drawn from 1-10
 * @retval: none
 */
void DrawMainPage(uint8_t page_num) {
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b08f      	sub	sp, #60	@ 0x3c
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
	//Draw "Protocol Title" box
	lcdFillRGB(COLOR_WHITE);
 80016ea:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80016ee:	f7ff f997 	bl	8000a20 <lcdFillRGB>
	char empty[20] = "Empty\n"; //strings from flash memory come with newline at end
 80016f2:	4a3f      	ldr	r2, [pc, #252]	@ (80017f0 <DrawMainPage+0x110>)
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016fc:	6018      	str	r0, [r3, #0]
 80016fe:	3304      	adds	r3, #4
 8001700:	8019      	strh	r1, [r3, #0]
 8001702:	3302      	adds	r3, #2
 8001704:	0c0a      	lsrs	r2, r1, #16
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	731a      	strb	r2, [r3, #12]
	char pageTitle[20] = "";
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Page %d", page_num);
 8001728:	79fa      	ldrb	r2, [r7, #7]
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4931      	ldr	r1, [pc, #196]	@ (80017f4 <DrawMainPage+0x114>)
 8001730:	4618      	mov	r0, r3
 8001732:	f002 fecf 	bl	80044d4 <siprintf>
	lcdSetCursor(10, 10);
 8001736:	210a      	movs	r1, #10
 8001738:	200a      	movs	r0, #10
 800173a:	f7ff fc65 	bl	8001008 <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 800173e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff fbe0 	bl	8000f08 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 8001748:	482b      	ldr	r0, [pc, #172]	@ (80017f8 <DrawMainPage+0x118>)
 800174a:	f7ff fbcd 	bl	8000ee8 <lcdSetTextFont>
	//BSP_LCD_SetFont(&Font20);
	lcdPrintf(pageTitle);
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fb3c 	bl	8000dd0 <lcdPrintf>
	lcdSetTextFont(&Font12);
 8001758:	4828      	ldr	r0, [pc, #160]	@ (80017fc <DrawMainPage+0x11c>)
 800175a:	f7ff fbc5 	bl	8000ee8 <lcdSetTextFont>
//				(uint8_t*) buttons[i].label, LEFT_MODE);
//		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
//	}
//
	// Draw "Next" button
	if (page_num != 10) {
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b0a      	cmp	r3, #10
 8001762:	d01e      	beq.n	80017a2 <DrawMainPage+0xc2>
		//BSP_LCD_SetTextColor(LCD_COLOR_RED);
		lcdDrawRect(nextButton.x, nextButton.y, nextButton.w, nextButton.h,
 8001764:	4b26      	ldr	r3, [pc, #152]	@ (8001800 <DrawMainPage+0x120>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b218      	sxth	r0, r3
 800176a:	4b25      	ldr	r3, [pc, #148]	@ (8001800 <DrawMainPage+0x120>)
 800176c:	885b      	ldrh	r3, [r3, #2]
 800176e:	b219      	sxth	r1, r3
 8001770:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <DrawMainPage+0x120>)
 8001772:	889b      	ldrh	r3, [r3, #4]
 8001774:	b21a      	sxth	r2, r3
 8001776:	4b22      	ldr	r3, [pc, #136]	@ (8001800 <DrawMainPage+0x120>)
 8001778:	88db      	ldrh	r3, [r3, #6]
 800177a:	b21b      	sxth	r3, r3
 800177c:	2400      	movs	r4, #0
 800177e:	9400      	str	r4, [sp, #0]
 8001780:	f7ff fa32 	bl	8000be8 <lcdDrawRect>
				COLOR_BLACK);
		lcdSetCursor(nextButton.x + 5, nextButton.y + 5);
 8001784:	4b1e      	ldr	r3, [pc, #120]	@ (8001800 <DrawMainPage+0x120>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	3305      	adds	r3, #5
 800178a:	b29a      	uxth	r2, r3
 800178c:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <DrawMainPage+0x120>)
 800178e:	885b      	ldrh	r3, [r3, #2]
 8001790:	3305      	adds	r3, #5
 8001792:	b29b      	uxth	r3, r3
 8001794:	4619      	mov	r1, r3
 8001796:	4610      	mov	r0, r2
 8001798:	f7ff fc36 	bl	8001008 <lcdSetCursor>
		lcdPrintf(nextButton.label);
 800179c:	4819      	ldr	r0, [pc, #100]	@ (8001804 <DrawMainPage+0x124>)
 800179e:	f7ff fb17 	bl	8000dd0 <lcdPrintf>
	}

	// Draw "Back" button
	if (page_num != 1) {
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d01e      	beq.n	80017e6 <DrawMainPage+0x106>
		lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 80017a8:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <DrawMainPage+0x128>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	b218      	sxth	r0, r3
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <DrawMainPage+0x128>)
 80017b0:	885b      	ldrh	r3, [r3, #2]
 80017b2:	b219      	sxth	r1, r3
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <DrawMainPage+0x128>)
 80017b6:	889b      	ldrh	r3, [r3, #4]
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <DrawMainPage+0x128>)
 80017bc:	88db      	ldrh	r3, [r3, #6]
 80017be:	b21b      	sxth	r3, r3
 80017c0:	2400      	movs	r4, #0
 80017c2:	9400      	str	r4, [sp, #0]
 80017c4:	f7ff fa10 	bl	8000be8 <lcdDrawRect>
				COLOR_BLACK);
		lcdSetCursor(backButton.x + 5, backButton.y + 5);
 80017c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <DrawMainPage+0x128>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	3305      	adds	r3, #5
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <DrawMainPage+0x128>)
 80017d2:	885b      	ldrh	r3, [r3, #2]
 80017d4:	3305      	adds	r3, #5
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4619      	mov	r1, r3
 80017da:	4610      	mov	r0, r2
 80017dc:	f7ff fc14 	bl	8001008 <lcdSetCursor>
		lcdPrintf(backButton.label);
 80017e0:	480a      	ldr	r0, [pc, #40]	@ (800180c <DrawMainPage+0x12c>)
 80017e2:	f7ff faf5 	bl	8000dd0 <lcdPrintf>
//		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
//		BSP_LCD_SetBackColor(LCD_COLOR_YELLOW);
//		BSP_LCD_DisplayStringAt(queueButton.x + 10, queueButton.y + 10,
//				(uint8_t*) queueButton.label, LEFT_MODE);
//	}
}
 80017e6:	bf00      	nop
 80017e8:	3734      	adds	r7, #52	@ 0x34
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	0800531c 	.word	0x0800531c
 80017f4:	08005314 	.word	0x08005314
 80017f8:	20000008 	.word	0x20000008
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000054 	.word	0x20000054
 8001804:	2000005c 	.word	0x2000005c
 8001808:	20000028 	.word	0x20000028
 800180c:	20000030 	.word	0x20000030

08001810 <handleTouch>:

uint8_t handleTouch() {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
	uint16_t x = 0, y = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	80fb      	strh	r3, [r7, #6]
 800181a:	2300      	movs	r3, #0
 800181c:	80bb      	strh	r3, [r7, #4]
	if (!XPT2046_TouchGetCoordinates(&x, &y)) {
 800181e:	1d3a      	adds	r2, r7, #4
 8001820:	1dbb      	adds	r3, r7, #6
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fed3 	bl	80005d0 <XPT2046_TouchGetCoordinates>
 800182a:	4603      	mov	r3, r0
 800182c:	f083 0301 	eor.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <handleTouch+0x2a>
		return 0;
 8001836:	2300      	movs	r3, #0
 8001838:	e068      	b.n	800190c <handleTouch+0xfc>
	}
	//map the x coordinate to be left is 0
	x = TS_RIGHT - x;
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001840:	b29b      	uxth	r3, r3
 8001842:	80fb      	strh	r3, [r7, #6]
	if ((x > nextButton.x) && (x < nextButton.x + nextButton.w) &&
 8001844:	4b33      	ldr	r3, [pc, #204]	@ (8001914 <handleTouch+0x104>)
 8001846:	881a      	ldrh	r2, [r3, #0]
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	429a      	cmp	r2, r3
 800184c:	d22a      	bcs.n	80018a4 <handleTouch+0x94>
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	461a      	mov	r2, r3
 8001852:	4b30      	ldr	r3, [pc, #192]	@ (8001914 <handleTouch+0x104>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	4b2e      	ldr	r3, [pc, #184]	@ (8001914 <handleTouch+0x104>)
 800185a:	889b      	ldrh	r3, [r3, #4]
 800185c:	440b      	add	r3, r1
 800185e:	429a      	cmp	r2, r3
 8001860:	da20      	bge.n	80018a4 <handleTouch+0x94>
			(y > nextButton.y) && (y < nextButton.y + nextButton.h) && (page_num != 10)) {
 8001862:	4b2c      	ldr	r3, [pc, #176]	@ (8001914 <handleTouch+0x104>)
 8001864:	885a      	ldrh	r2, [r3, #2]
 8001866:	88bb      	ldrh	r3, [r7, #4]
	if ((x > nextButton.x) && (x < nextButton.x + nextButton.w) &&
 8001868:	429a      	cmp	r2, r3
 800186a:	d21b      	bcs.n	80018a4 <handleTouch+0x94>
			(y > nextButton.y) && (y < nextButton.y + nextButton.h) && (page_num != 10)) {
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	461a      	mov	r2, r3
 8001870:	4b28      	ldr	r3, [pc, #160]	@ (8001914 <handleTouch+0x104>)
 8001872:	885b      	ldrh	r3, [r3, #2]
 8001874:	4619      	mov	r1, r3
 8001876:	4b27      	ldr	r3, [pc, #156]	@ (8001914 <handleTouch+0x104>)
 8001878:	88db      	ldrh	r3, [r3, #6]
 800187a:	440b      	add	r3, r1
 800187c:	429a      	cmp	r2, r3
 800187e:	da11      	bge.n	80018a4 <handleTouch+0x94>
 8001880:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <handleTouch+0x108>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b0a      	cmp	r3, #10
 8001886:	d00d      	beq.n	80018a4 <handleTouch+0x94>
		printf("touched\n");
 8001888:	4824      	ldr	r0, [pc, #144]	@ (800191c <handleTouch+0x10c>)
 800188a:	f002 fe1b 	bl	80044c4 <puts>
		page_num++;
 800188e:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <handleTouch+0x108>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <handleTouch+0x108>)
 8001898:	701a      	strb	r2, [r3, #0]
		DrawMainPage(page_num);
 800189a:	4b1f      	ldr	r3, [pc, #124]	@ (8001918 <handleTouch+0x108>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff1e 	bl	80016e0 <DrawMainPage>
	}
	if ((x > backButton.x) && (x < backButton.x + backButton.w) &&
 80018a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001920 <handleTouch+0x110>)
 80018a6:	881a      	ldrh	r2, [r3, #0]
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d22a      	bcs.n	8001904 <handleTouch+0xf4>
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <handleTouch+0x110>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <handleTouch+0x110>)
 80018ba:	889b      	ldrh	r3, [r3, #4]
 80018bc:	440b      	add	r3, r1
 80018be:	429a      	cmp	r2, r3
 80018c0:	da20      	bge.n	8001904 <handleTouch+0xf4>
			(y > backButton.y) && (y < backButton.y + backButton.h)  && (page_num != 1)) {
 80018c2:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <handleTouch+0x110>)
 80018c4:	885a      	ldrh	r2, [r3, #2]
 80018c6:	88bb      	ldrh	r3, [r7, #4]
	if ((x > backButton.x) && (x < backButton.x + backButton.w) &&
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d21b      	bcs.n	8001904 <handleTouch+0xf4>
			(y > backButton.y) && (y < backButton.y + backButton.h)  && (page_num != 1)) {
 80018cc:	88bb      	ldrh	r3, [r7, #4]
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <handleTouch+0x110>)
 80018d2:	885b      	ldrh	r3, [r3, #2]
 80018d4:	4619      	mov	r1, r3
 80018d6:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <handleTouch+0x110>)
 80018d8:	88db      	ldrh	r3, [r3, #6]
 80018da:	440b      	add	r3, r1
 80018dc:	429a      	cmp	r2, r3
 80018de:	da11      	bge.n	8001904 <handleTouch+0xf4>
 80018e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <handleTouch+0x108>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d00d      	beq.n	8001904 <handleTouch+0xf4>
		printf("touched\n");
 80018e8:	480c      	ldr	r0, [pc, #48]	@ (800191c <handleTouch+0x10c>)
 80018ea:	f002 fdeb 	bl	80044c4 <puts>
		page_num--;
 80018ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001918 <handleTouch+0x108>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <handleTouch+0x108>)
 80018f8:	701a      	strb	r2, [r3, #0]
		DrawMainPage(page_num);
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <handleTouch+0x108>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff feee 	bl	80016e0 <DrawMainPage>
	}

	HAL_Delay(25); //debouncing delay
 8001904:	2019      	movs	r0, #25
 8001906:	f000 fab7 	bl	8001e78 <HAL_Delay>
	return 1;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000054 	.word	0x20000054
 8001918:	2000007e 	.word	0x2000007e
 800191c:	08005330 	.word	0x08005330
 8001920:	20000028 	.word	0x20000028

08001924 <HAL_GPIO_EXTI_Callback>:

/*** Touchscreen Interrupt Handler ****/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == T_IRQ_Pin) {
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	2b20      	cmp	r3, #32
 8001932:	d107      	bne.n	8001944 <HAL_GPIO_EXTI_Callback+0x20>
		if (XPT2046_TouchPressed()) {
 8001934:	f7fe fe3c 	bl	80005b0 <XPT2046_TouchPressed>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_GPIO_EXTI_Callback+0x20>
			touchFlag = 1;
 800193e:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_GPIO_EXTI_Callback+0x28>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200002fc 	.word	0x200002fc

08001950 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <Error_Handler+0x8>

0800195c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	4a0f      	ldr	r2, [pc, #60]	@ (80019a8 <HAL_MspInit+0x4c>)
 800196c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001970:	6453      	str	r3, [r2, #68]	@ 0x44
 8001972:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	4a08      	ldr	r2, [pc, #32]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	@ 0x40
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	@ (8001a30 <HAL_SPI_MspInit+0x84>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12b      	bne.n	8001a26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <HAL_SPI_MspInit+0x88>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	4a17      	ldr	r2, [pc, #92]	@ (8001a34 <HAL_SPI_MspInit+0x88>)
 80019d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019de:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <HAL_SPI_MspInit+0x88>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <HAL_SPI_MspInit+0x88>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a10      	ldr	r2, [pc, #64]	@ (8001a34 <HAL_SPI_MspInit+0x88>)
 80019f4:	f043 0310 	orr.w	r3, r3, #16
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <HAL_SPI_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = T_SCK_Pin|T_CS_Pin|T_MISO_Pin|T_MOSI_Pin;
 8001a06:	2374      	movs	r3, #116	@ 0x74
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a16:	2305      	movs	r3, #5
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <HAL_SPI_MspInit+0x8c>)
 8001a22:	f000 fb5f 	bl	80020e4 <HAL_GPIO_Init>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	@ 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40013400 	.word	0x40013400
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40021000 	.word	0x40021000

08001a3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0b      	ldr	r2, [pc, #44]	@ (8001a78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d10d      	bne.n	8001a6a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <HAL_TIM_PWM_MspInit+0x40>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	4a09      	ldr	r2, [pc, #36]	@ (8001a7c <HAL_TIM_PWM_MspInit+0x40>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5e:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <HAL_TIM_PWM_MspInit+0x40>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40000400 	.word	0x40000400
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a12      	ldr	r2, [pc, #72]	@ (8001ae8 <HAL_TIM_MspPostInit+0x68>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d11d      	bne.n	8001ade <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <HAL_TIM_MspPostInit+0x6c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a10      	ldr	r2, [pc, #64]	@ (8001aec <HAL_TIM_MspPostInit+0x6c>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_TIM_MspPostInit+0x6c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BL_PWM_Pin;
 8001abe:	2310      	movs	r3, #16
 8001ac0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <HAL_TIM_MspPostInit+0x70>)
 8001ada:	f000 fb03 	bl	80020e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3720      	adds	r7, #32
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020400 	.word	0x40020400

08001af4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001b08:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <HAL_FMC_MspInit+0x88>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d131      	bne.n	8001b74 <HAL_FMC_MspInit+0x80>
    return;
  }
  FMC_Initialized = 1;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	@ (8001b7c <HAL_FMC_MspInit+0x88>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_FMC_MspInit+0x8c>)
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b1e:	4a18      	ldr	r2, [pc, #96]	@ (8001b80 <HAL_FMC_MspInit+0x8c>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b26:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <HAL_FMC_MspInit+0x8c>)
 8001b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001b32:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001b36:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b44:	230c      	movs	r3, #12
 8001b46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <HAL_FMC_MspInit+0x90>)
 8001b4e:	f000 fac9 	bl	80020e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b52:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 8001b56:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b64:	230c      	movs	r3, #12
 8001b66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4806      	ldr	r0, [pc, #24]	@ (8001b88 <HAL_FMC_MspInit+0x94>)
 8001b6e:	f000 fab9 	bl	80020e4 <HAL_GPIO_Init>
 8001b72:	e000      	b.n	8001b76 <HAL_FMC_MspInit+0x82>
    return;
 8001b74:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000300 	.word	0x20000300
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40020c00 	.word	0x40020c00

08001b8c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001b94:	f7ff ffae 	bl	8001af4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <NMI_Handler+0x4>

08001ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <HardFault_Handler+0x4>

08001bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <MemManage_Handler+0x4>

08001bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <BusFault_Handler+0x4>

08001bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <UsageFault_Handler+0x4>

08001bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf6:	f000 f91f 	bl	8001e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 8001c02:	2020      	movs	r0, #32
 8001c04:	f000 fc4c 	bl	80024a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e00a      	b.n	8001c34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c1e:	f3af 8000 	nop.w
 8001c22:	4601      	mov	r1, r0
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	60ba      	str	r2, [r7, #8]
 8001c2a:	b2ca      	uxtb	r2, r1
 8001c2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbf0      	blt.n	8001c1e <_read+0x12>
  }

  return len;
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c6e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_isatty>:

int _isatty(int file)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb8:	4a14      	ldr	r2, [pc, #80]	@ (8001d0c <_sbrk+0x5c>)
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <_sbrk+0x60>)
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <_sbrk+0x64>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <_sbrk+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce0:	f002 fd5e 	bl	80047a0 <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	e009      	b.n	8001d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <_sbrk+0x64>)
 8001d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20030000 	.word	0x20030000
 8001d10:	00000400 	.word	0x00000400
 8001d14:	20000304 	.word	0x20000304
 8001d18:	20000458 	.word	0x20000458

08001d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <SystemInit+0x20>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d26:	4a05      	ldr	r2, [pc, #20]	@ (8001d3c <SystemInit+0x20>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d44:	f7ff ffea 	bl	8001d1c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d48:	480c      	ldr	r0, [pc, #48]	@ (8001d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d4a:	490d      	ldr	r1, [pc, #52]	@ (8001d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d50:	e002      	b.n	8001d58 <LoopCopyDataInit>

08001d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d56:	3304      	adds	r3, #4

08001d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d5c:	d3f9      	bcc.n	8001d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d60:	4c0a      	ldr	r4, [pc, #40]	@ (8001d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d64:	e001      	b.n	8001d6a <LoopFillZerobss>

08001d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d68:	3204      	adds	r2, #4

08001d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d6c:	d3fb      	bcc.n	8001d66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f002 fd1d 	bl	80047ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d72:	f7ff fa5d 	bl	8001230 <main>
  bx  lr    
 8001d76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d78:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d80:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001d84:	080066e4 	.word	0x080066e4
  ldr r2, =_sbss
 8001d88:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001d8c:	20000458 	.word	0x20000458

08001d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC_IRQHandler>
	...

08001d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d98:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <HAL_Init+0x40>)
 8001d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da4:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <HAL_Init+0x40>)
 8001daa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a07      	ldr	r2, [pc, #28]	@ (8001dd4 <HAL_Init+0x40>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f000 f94f 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc2:	200f      	movs	r0, #15
 8001dc4:	f000 f808 	bl	8001dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc8:	f7ff fdc8 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023c00 	.word	0x40023c00

08001dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de0:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <HAL_InitTick+0x54>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <HAL_InitTick+0x58>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f967 	bl	80020ca <HAL_SYSTICK_Config>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00e      	b.n	8001e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b0f      	cmp	r3, #15
 8001e0a:	d80a      	bhi.n	8001e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f000 f92f 	bl	8002076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e18:	4a06      	ldr	r2, [pc, #24]	@ (8001e34 <HAL_InitTick+0x5c>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e000      	b.n	8001e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000080 	.word	0x20000080
 8001e30:	20000088 	.word	0x20000088
 8001e34:	20000084 	.word	0x20000084

08001e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_IncTick+0x20>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <HAL_IncTick+0x24>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	4a04      	ldr	r2, [pc, #16]	@ (8001e5c <HAL_IncTick+0x24>)
 8001e4a:	6013      	str	r3, [r2, #0]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000088 	.word	0x20000088
 8001e5c:	20000308 	.word	0x20000308

08001e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b03      	ldr	r3, [pc, #12]	@ (8001e74 <HAL_GetTick+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000308 	.word	0x20000308

08001e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff ffee 	bl	8001e60 <HAL_GetTick>
 8001e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d005      	beq.n	8001e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <HAL_Delay+0x44>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e9e:	bf00      	nop
 8001ea0:	f7ff ffde 	bl	8001e60 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d8f7      	bhi.n	8001ea0 <HAL_Delay+0x28>
  {
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000088 	.word	0x20000088

08001ec0 <__NVIC_SetPriorityGrouping>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4907      	ldr	r1, [pc, #28]	@ (8001f5c <__NVIC_EnableIRQ+0x38>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_SetPriority>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	@ (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	@ (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	@ 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <SysTick_Config>:
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800202c:	d301      	bcc.n	8002032 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800202e:	2301      	movs	r3, #1
 8002030:	e00f      	b.n	8002052 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <SysTick_Config+0x40>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203a:	210f      	movs	r1, #15
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f7ff ff8e 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <SysTick_Config+0x40>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	@ (800205c <SysTick_Config+0x40>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff29 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002088:	f7ff ff3e 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 800208c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7ff ff8e 	bl	8001fb4 <NVIC_EncodePriority>
 8002098:	4602      	mov	r2, r0
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5d 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff31 	bl	8001f24 <__NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ffa2 	bl	800201c <SysTick_Config>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	@ 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e177      	b.n	80023f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	429a      	cmp	r2, r3
 800211a:	f040 8166 	bne.w	80023ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d005      	beq.n	8002136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002132:	2b02      	cmp	r3, #2
 8002134:	d130      	bne.n	8002198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	2203      	movs	r2, #3
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 0201 	and.w	r2, r3, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d017      	beq.n	80021d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d123      	bne.n	8002228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3208      	adds	r2, #8
 80021e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	220f      	movs	r2, #15
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80c0 	beq.w	80023ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b66      	ldr	r3, [pc, #408]	@ (8002408 <HAL_GPIO_Init+0x324>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	4a65      	ldr	r2, [pc, #404]	@ (8002408 <HAL_GPIO_Init+0x324>)
 8002274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002278:	6453      	str	r3, [r2, #68]	@ 0x44
 800227a:	4b63      	ldr	r3, [pc, #396]	@ (8002408 <HAL_GPIO_Init+0x324>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002286:	4a61      	ldr	r2, [pc, #388]	@ (800240c <HAL_GPIO_Init+0x328>)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	220f      	movs	r2, #15
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a58      	ldr	r2, [pc, #352]	@ (8002410 <HAL_GPIO_Init+0x32c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d037      	beq.n	8002322 <HAL_GPIO_Init+0x23e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a57      	ldr	r2, [pc, #348]	@ (8002414 <HAL_GPIO_Init+0x330>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d031      	beq.n	800231e <HAL_GPIO_Init+0x23a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a56      	ldr	r2, [pc, #344]	@ (8002418 <HAL_GPIO_Init+0x334>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02b      	beq.n	800231a <HAL_GPIO_Init+0x236>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a55      	ldr	r2, [pc, #340]	@ (800241c <HAL_GPIO_Init+0x338>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d025      	beq.n	8002316 <HAL_GPIO_Init+0x232>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a54      	ldr	r2, [pc, #336]	@ (8002420 <HAL_GPIO_Init+0x33c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01f      	beq.n	8002312 <HAL_GPIO_Init+0x22e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a53      	ldr	r2, [pc, #332]	@ (8002424 <HAL_GPIO_Init+0x340>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d019      	beq.n	800230e <HAL_GPIO_Init+0x22a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a52      	ldr	r2, [pc, #328]	@ (8002428 <HAL_GPIO_Init+0x344>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0x226>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a51      	ldr	r2, [pc, #324]	@ (800242c <HAL_GPIO_Init+0x348>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00d      	beq.n	8002306 <HAL_GPIO_Init+0x222>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a50      	ldr	r2, [pc, #320]	@ (8002430 <HAL_GPIO_Init+0x34c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <HAL_GPIO_Init+0x21e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002434 <HAL_GPIO_Init+0x350>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_GPIO_Init+0x21a>
 80022fa:	2309      	movs	r3, #9
 80022fc:	e012      	b.n	8002324 <HAL_GPIO_Init+0x240>
 80022fe:	230a      	movs	r3, #10
 8002300:	e010      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002302:	2308      	movs	r3, #8
 8002304:	e00e      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002306:	2307      	movs	r3, #7
 8002308:	e00c      	b.n	8002324 <HAL_GPIO_Init+0x240>
 800230a:	2306      	movs	r3, #6
 800230c:	e00a      	b.n	8002324 <HAL_GPIO_Init+0x240>
 800230e:	2305      	movs	r3, #5
 8002310:	e008      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002312:	2304      	movs	r3, #4
 8002314:	e006      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002316:	2303      	movs	r3, #3
 8002318:	e004      	b.n	8002324 <HAL_GPIO_Init+0x240>
 800231a:	2302      	movs	r3, #2
 800231c:	e002      	b.n	8002324 <HAL_GPIO_Init+0x240>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_GPIO_Init+0x240>
 8002322:	2300      	movs	r3, #0
 8002324:	69fa      	ldr	r2, [r7, #28]
 8002326:	f002 0203 	and.w	r2, r2, #3
 800232a:	0092      	lsls	r2, r2, #2
 800232c:	4093      	lsls	r3, r2
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002334:	4935      	ldr	r1, [pc, #212]	@ (800240c <HAL_GPIO_Init+0x328>)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	3302      	adds	r3, #2
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002342:	4b3d      	ldr	r3, [pc, #244]	@ (8002438 <HAL_GPIO_Init+0x354>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002366:	4a34      	ldr	r2, [pc, #208]	@ (8002438 <HAL_GPIO_Init+0x354>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800236c:	4b32      	ldr	r3, [pc, #200]	@ (8002438 <HAL_GPIO_Init+0x354>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002390:	4a29      	ldr	r2, [pc, #164]	@ (8002438 <HAL_GPIO_Init+0x354>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002396:	4b28      	ldr	r3, [pc, #160]	@ (8002438 <HAL_GPIO_Init+0x354>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002438 <HAL_GPIO_Init+0x354>)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <HAL_GPIO_Init+0x354>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023e4:	4a14      	ldr	r2, [pc, #80]	@ (8002438 <HAL_GPIO_Init+0x354>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3301      	adds	r3, #1
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	2b0f      	cmp	r3, #15
 80023f4:	f67f ae84 	bls.w	8002100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3724      	adds	r7, #36	@ 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	40013800 	.word	0x40013800
 8002410:	40020000 	.word	0x40020000
 8002414:	40020400 	.word	0x40020400
 8002418:	40020800 	.word	0x40020800
 800241c:	40020c00 	.word	0x40020c00
 8002420:	40021000 	.word	0x40021000
 8002424:	40021400 	.word	0x40021400
 8002428:	40021800 	.word	0x40021800
 800242c:	40021c00 	.word	0x40021c00
 8002430:	40022000 	.word	0x40022000
 8002434:	40022400 	.word	0x40022400
 8002438:	40013c00 	.word	0x40013c00

0800243c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	887b      	ldrh	r3, [r7, #2]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	e001      	b.n	800245e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800245e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	807b      	strh	r3, [r7, #2]
 8002478:	4613      	mov	r3, r2
 800247a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800247c:	787b      	ldrb	r3, [r7, #1]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002488:	e003      	b.n	8002492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800248a:	887b      	ldrh	r3, [r7, #2]
 800248c:	041a      	lsls	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	619a      	str	r2, [r3, #24]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024aa:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d006      	beq.n	80024c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024b6:	4a05      	ldr	r2, [pc, #20]	@ (80024cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fa30 	bl	8001924 <HAL_GPIO_EXTI_Callback>
  }
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40013c00 	.word	0x40013c00

080024d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e267      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d075      	beq.n	80025da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024ee:	4b88      	ldr	r3, [pc, #544]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d00c      	beq.n	8002514 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fa:	4b85      	ldr	r3, [pc, #532]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002502:	2b08      	cmp	r3, #8
 8002504:	d112      	bne.n	800252c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4b82      	ldr	r3, [pc, #520]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002512:	d10b      	bne.n	800252c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	4b7e      	ldr	r3, [pc, #504]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d05b      	beq.n	80025d8 <HAL_RCC_OscConfig+0x108>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d157      	bne.n	80025d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e242      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x74>
 8002536:	4b76      	ldr	r3, [pc, #472]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a75      	ldr	r2, [pc, #468]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0xb0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x98>
 800254e:	4b70      	ldr	r3, [pc, #448]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a6f      	ldr	r2, [pc, #444]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b6d      	ldr	r3, [pc, #436]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6c      	ldr	r2, [pc, #432]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xb0>
 8002568:	4b69      	ldr	r3, [pc, #420]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a68      	ldr	r2, [pc, #416]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b66      	ldr	r3, [pc, #408]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a65      	ldr	r2, [pc, #404]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800257e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff fc6a 	bl	8001e60 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff fc66 	bl	8001e60 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	@ 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e207      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xc0>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff fc56 	bl	8001e60 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7ff fc52 	bl	8001e60 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	@ 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1f3      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	4b51      	ldr	r3, [pc, #324]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0xe8>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d063      	beq.n	80026ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f2:	4b47      	ldr	r3, [pc, #284]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d11c      	bne.n	8002638 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fe:	4b44      	ldr	r3, [pc, #272]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d116      	bne.n	8002638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	4b41      	ldr	r3, [pc, #260]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x152>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e1c7      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002622:	4b3b      	ldr	r3, [pc, #236]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4937      	ldr	r1, [pc, #220]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	e03a      	b.n	80026ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002640:	4b34      	ldr	r3, [pc, #208]	@ (8002714 <HAL_RCC_OscConfig+0x244>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7ff fc0b 	bl	8001e60 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264e:	f7ff fc07 	bl	8001e60 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e1a8      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002660:	4b2b      	ldr	r3, [pc, #172]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4b28      	ldr	r3, [pc, #160]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4925      	ldr	r1, [pc, #148]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002682:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <HAL_RCC_OscConfig+0x244>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7ff fbea 	bl	8001e60 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002690:	f7ff fbe6 	bl	8001e60 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e187      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d036      	beq.n	8002728 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d016      	beq.n	80026f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <HAL_RCC_OscConfig+0x248>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7ff fbca 	bl	8001e60 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d0:	f7ff fbc6 	bl	8001e60 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e167      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <HAL_RCC_OscConfig+0x240>)
 80026e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x200>
 80026ee:	e01b      	b.n	8002728 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f0:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <HAL_RCC_OscConfig+0x248>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7ff fbb3 	bl	8001e60 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	e00e      	b.n	800271c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fe:	f7ff fbaf 	bl	8001e60 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d907      	bls.n	800271c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e150      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
 8002710:	40023800 	.word	0x40023800
 8002714:	42470000 	.word	0x42470000
 8002718:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271c:	4b88      	ldr	r3, [pc, #544]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 800271e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ea      	bne.n	80026fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8097 	beq.w	8002864 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273a:	4b81      	ldr	r3, [pc, #516]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10f      	bne.n	8002766 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	4b7d      	ldr	r3, [pc, #500]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	4a7c      	ldr	r2, [pc, #496]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	@ 0x40
 8002756:	4b7a      	ldr	r3, [pc, #488]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	4b77      	ldr	r3, [pc, #476]	@ (8002944 <HAL_RCC_OscConfig+0x474>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d118      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002772:	4b74      	ldr	r3, [pc, #464]	@ (8002944 <HAL_RCC_OscConfig+0x474>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a73      	ldr	r2, [pc, #460]	@ (8002944 <HAL_RCC_OscConfig+0x474>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277e:	f7ff fb6f 	bl	8001e60 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002786:	f7ff fb6b 	bl	8001e60 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e10c      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	4b6a      	ldr	r3, [pc, #424]	@ (8002944 <HAL_RCC_OscConfig+0x474>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d106      	bne.n	80027ba <HAL_RCC_OscConfig+0x2ea>
 80027ac:	4b64      	ldr	r3, [pc, #400]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b0:	4a63      	ldr	r2, [pc, #396]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b8:	e01c      	b.n	80027f4 <HAL_RCC_OscConfig+0x324>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b05      	cmp	r3, #5
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0x30c>
 80027c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027c8:	f043 0304 	orr.w	r3, r3, #4
 80027cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027da:	e00b      	b.n	80027f4 <HAL_RCC_OscConfig+0x324>
 80027dc:	4b58      	ldr	r3, [pc, #352]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e0:	4a57      	ldr	r2, [pc, #348]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e8:	4b55      	ldr	r3, [pc, #340]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	4a54      	ldr	r2, [pc, #336]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80027ee:	f023 0304 	bic.w	r3, r3, #4
 80027f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d015      	beq.n	8002828 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fc:	f7ff fb30 	bl	8001e60 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002804:	f7ff fb2c 	bl	8001e60 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0cb      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281a:	4b49      	ldr	r3, [pc, #292]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0ee      	beq.n	8002804 <HAL_RCC_OscConfig+0x334>
 8002826:	e014      	b.n	8002852 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002828:	f7ff fb1a 	bl	8001e60 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282e:	e00a      	b.n	8002846 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f7ff fb16 	bl	8001e60 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0b5      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002846:	4b3e      	ldr	r3, [pc, #248]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1ee      	bne.n	8002830 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002852:	7dfb      	ldrb	r3, [r7, #23]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002858:	4b39      	ldr	r3, [pc, #228]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	4a38      	ldr	r2, [pc, #224]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 800285e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002862:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a1 	beq.w	80029b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800286e:	4b34      	ldr	r3, [pc, #208]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b08      	cmp	r3, #8
 8002878:	d05c      	beq.n	8002934 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d141      	bne.n	8002906 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002882:	4b31      	ldr	r3, [pc, #196]	@ (8002948 <HAL_RCC_OscConfig+0x478>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7ff faea 	bl	8001e60 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002890:	f7ff fae6 	bl	8001e60 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e087      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a2:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69da      	ldr	r2, [r3, #28]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	019b      	lsls	r3, r3, #6
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c4:	085b      	lsrs	r3, r3, #1
 80028c6:	3b01      	subs	r3, #1
 80028c8:	041b      	lsls	r3, r3, #16
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	061b      	lsls	r3, r3, #24
 80028d2:	491b      	ldr	r1, [pc, #108]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002948 <HAL_RCC_OscConfig+0x478>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7ff fabf 	bl	8001e60 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7ff fabb 	bl	8001e60 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e05c      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f8:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x416>
 8002904:	e054      	b.n	80029b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <HAL_RCC_OscConfig+0x478>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7ff faa8 	bl	8001e60 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7ff faa4 	bl	8001e60 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e045      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <HAL_RCC_OscConfig+0x470>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x444>
 8002932:	e03d      	b.n	80029b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d107      	bne.n	800294c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e038      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
 8002940:	40023800 	.word	0x40023800
 8002944:	40007000 	.word	0x40007000
 8002948:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800294c:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <HAL_RCC_OscConfig+0x4ec>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d028      	beq.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d121      	bne.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d11a      	bne.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800297c:	4013      	ands	r3, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002982:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002984:	4293      	cmp	r3, r2
 8002986:	d111      	bne.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002992:	085b      	lsrs	r3, r3, #1
 8002994:	3b01      	subs	r3, #1
 8002996:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d107      	bne.n	80029ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800

080029c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0cc      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b68      	ldr	r3, [pc, #416]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d90c      	bls.n	80029fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b65      	ldr	r3, [pc, #404]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b63      	ldr	r3, [pc, #396]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0b8      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a14:	4b59      	ldr	r3, [pc, #356]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a58      	ldr	r2, [pc, #352]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a2c:	4b53      	ldr	r3, [pc, #332]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a52      	ldr	r2, [pc, #328]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b50      	ldr	r3, [pc, #320]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	494d      	ldr	r1, [pc, #308]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d044      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b47      	ldr	r3, [pc, #284]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d119      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e07f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e067      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9e:	4b37      	ldr	r3, [pc, #220]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4934      	ldr	r1, [pc, #208]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab0:	f7ff f9d6 	bl	8001e60 <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7ff f9d2 	bl	8001e60 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e04f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	4b2b      	ldr	r3, [pc, #172]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 020c 	and.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1eb      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b25      	ldr	r3, [pc, #148]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d20c      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b22      	ldr	r3, [pc, #136]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e032      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	4b19      	ldr	r3, [pc, #100]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4916      	ldr	r1, [pc, #88]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b32:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	490e      	ldr	r1, [pc, #56]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b46:	f000 f821 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	490a      	ldr	r1, [pc, #40]	@ (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	5ccb      	ldrb	r3, [r1, r3]
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	4a09      	ldr	r2, [pc, #36]	@ (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b62:	4b09      	ldr	r3, [pc, #36]	@ (8002b88 <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff f936 	bl	8001dd8 <HAL_InitTick>

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	08006690 	.word	0x08006690
 8002b84:	20000080 	.word	0x20000080
 8002b88:	20000084 	.word	0x20000084

08002b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b90:	b094      	sub	sp, #80	@ 0x50
 8002b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba4:	4b79      	ldr	r3, [pc, #484]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d00d      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x40>
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	f200 80e1 	bhi.w	8002d78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bbe:	e0db      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4b73      	ldr	r3, [pc, #460]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bc4:	e0db      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bc6:	4b72      	ldr	r3, [pc, #456]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bca:	e0d8      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bcc:	4b6f      	ldr	r3, [pc, #444]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bd4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d063      	beq.n	8002caa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	2200      	movs	r2, #0
 8002bea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bfe:	4622      	mov	r2, r4
 8002c00:	462b      	mov	r3, r5
 8002c02:	f04f 0000 	mov.w	r0, #0
 8002c06:	f04f 0100 	mov.w	r1, #0
 8002c0a:	0159      	lsls	r1, r3, #5
 8002c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c10:	0150      	lsls	r0, r2, #5
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4621      	mov	r1, r4
 8002c18:	1a51      	subs	r1, r2, r1
 8002c1a:	6139      	str	r1, [r7, #16]
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c30:	4659      	mov	r1, fp
 8002c32:	018b      	lsls	r3, r1, #6
 8002c34:	4651      	mov	r1, sl
 8002c36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c3a:	4651      	mov	r1, sl
 8002c3c:	018a      	lsls	r2, r1, #6
 8002c3e:	4651      	mov	r1, sl
 8002c40:	ebb2 0801 	subs.w	r8, r2, r1
 8002c44:	4659      	mov	r1, fp
 8002c46:	eb63 0901 	sbc.w	r9, r3, r1
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c5e:	4690      	mov	r8, r2
 8002c60:	4699      	mov	r9, r3
 8002c62:	4623      	mov	r3, r4
 8002c64:	eb18 0303 	adds.w	r3, r8, r3
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	462b      	mov	r3, r5
 8002c6c:	eb49 0303 	adc.w	r3, r9, r3
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c7e:	4629      	mov	r1, r5
 8002c80:	028b      	lsls	r3, r1, #10
 8002c82:	4621      	mov	r1, r4
 8002c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c88:	4621      	mov	r1, r4
 8002c8a:	028a      	lsls	r2, r1, #10
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c92:	2200      	movs	r2, #0
 8002c94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c9c:	f7fd faf8 	bl	8000290 <__aeabi_uldivmod>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ca8:	e058      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002caa:	4b38      	ldr	r3, [pc, #224]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	099b      	lsrs	r3, r3, #6
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	f04f 0000 	mov.w	r0, #0
 8002ccc:	f04f 0100 	mov.w	r1, #0
 8002cd0:	0159      	lsls	r1, r3, #5
 8002cd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd6:	0150      	lsls	r0, r2, #5
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4641      	mov	r1, r8
 8002cde:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ce2:	4649      	mov	r1, r9
 8002ce4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cfc:	ebb2 040a 	subs.w	r4, r2, sl
 8002d00:	eb63 050b 	sbc.w	r5, r3, fp
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	00eb      	lsls	r3, r5, #3
 8002d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d12:	00e2      	lsls	r2, r4, #3
 8002d14:	4614      	mov	r4, r2
 8002d16:	461d      	mov	r5, r3
 8002d18:	4643      	mov	r3, r8
 8002d1a:	18e3      	adds	r3, r4, r3
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	464b      	mov	r3, r9
 8002d20:	eb45 0303 	adc.w	r3, r5, r3
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d32:	4629      	mov	r1, r5
 8002d34:	028b      	lsls	r3, r1, #10
 8002d36:	4621      	mov	r1, r4
 8002d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	028a      	lsls	r2, r1, #10
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d46:	2200      	movs	r2, #0
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	61fa      	str	r2, [r7, #28]
 8002d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d50:	f7fd fa9e 	bl	8000290 <__aeabi_uldivmod>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4613      	mov	r3, r2
 8002d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	3301      	adds	r3, #1
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d76:	e002      	b.n	8002d7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3750      	adds	r7, #80	@ 0x50
 8002d84:	46bd      	mov	sp, r7
 8002d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	00f42400 	.word	0x00f42400

08002d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e07b      	b.n	8002e9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d108      	bne.n	8002dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002db6:	d009      	beq.n	8002dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	61da      	str	r2, [r3, #28]
 8002dbe:	e005      	b.n	8002dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe fde0 	bl	80019ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e50:	ea42 0103 	orr.w	r1, r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	0c1b      	lsrs	r3, r3, #16
 8002e6a:	f003 0104 	and.w	r1, r3, #4
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	f003 0210 	and.w	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b088      	sub	sp, #32
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eb6:	f7fe ffd3 	bl	8001e60 <HAL_GetTick>
 8002eba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d001      	beq.n	8002ed0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e12a      	b.n	8003126 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_SPI_Transmit+0x36>
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e122      	b.n	8003126 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_SPI_Transmit+0x48>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e11b      	b.n	8003126 <HAL_SPI_Transmit+0x280>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2203      	movs	r2, #3
 8002efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	88fa      	ldrh	r2, [r7, #6]
 8002f0e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f3c:	d10f      	bne.n	8002f5e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	d007      	beq.n	8002f7c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f84:	d152      	bne.n	800302c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_SPI_Transmit+0xee>
 8002f8e:	8b7b      	ldrh	r3, [r7, #26]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d145      	bne.n	8003020 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f98:	881a      	ldrh	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa4:	1c9a      	adds	r2, r3, #2
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fb8:	e032      	b.n	8003020 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d112      	bne.n	8002fee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fcc:	881a      	ldrh	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	1c9a      	adds	r2, r3, #2
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002fec:	e018      	b.n	8003020 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fee:	f7fe ff37 	bl	8001e60 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d803      	bhi.n	8003006 <HAL_SPI_Transmit+0x160>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d102      	bne.n	800300c <HAL_SPI_Transmit+0x166>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e082      	b.n	8003126 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1c7      	bne.n	8002fba <HAL_SPI_Transmit+0x114>
 800302a:	e053      	b.n	80030d4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <HAL_SPI_Transmit+0x194>
 8003034:	8b7b      	ldrh	r3, [r7, #26]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d147      	bne.n	80030ca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	7812      	ldrb	r2, [r2, #0]
 8003046:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003060:	e033      	b.n	80030ca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	d113      	bne.n	8003098 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	7812      	ldrb	r2, [r2, #0]
 800307c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003096:	e018      	b.n	80030ca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003098:	f7fe fee2 	bl	8001e60 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d803      	bhi.n	80030b0 <HAL_SPI_Transmit+0x20a>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d102      	bne.n	80030b6 <HAL_SPI_Transmit+0x210>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e02d      	b.n	8003126 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1c6      	bne.n	8003062 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	6839      	ldr	r1, [r7, #0]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fa59 	bl	8003590 <SPI_EndRxTxTransaction>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003124:	2300      	movs	r3, #0
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b08a      	sub	sp, #40	@ 0x28
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800313c:	2301      	movs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003140:	f7fe fe8e 	bl	8001e60 <HAL_GetTick>
 8003144:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800314c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003158:	7ffb      	ldrb	r3, [r7, #31]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d00c      	beq.n	8003178 <HAL_SPI_TransmitReceive+0x4a>
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003164:	d106      	bne.n	8003174 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d102      	bne.n	8003174 <HAL_SPI_TransmitReceive+0x46>
 800316e:	7ffb      	ldrb	r3, [r7, #31]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d001      	beq.n	8003178 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
 8003176:	e17f      	b.n	8003478 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_SPI_TransmitReceive+0x5c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_SPI_TransmitReceive+0x5c>
 8003184:	887b      	ldrh	r3, [r7, #2]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e174      	b.n	8003478 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_SPI_TransmitReceive+0x6e>
 8003198:	2302      	movs	r3, #2
 800319a:	e16d      	b.n	8003478 <HAL_SPI_TransmitReceive+0x34a>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d003      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2205      	movs	r2, #5
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	887a      	ldrh	r2, [r7, #2]
 80031ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	887a      	ldrh	r2, [r7, #2]
 80031da:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f8:	2b40      	cmp	r3, #64	@ 0x40
 80031fa:	d007      	beq.n	800320c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800320a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003214:	d17e      	bne.n	8003314 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_SPI_TransmitReceive+0xf6>
 800321e:	8afb      	ldrh	r3, [r7, #22]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d16c      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003228:	881a      	ldrh	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003234:	1c9a      	adds	r2, r3, #2
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003248:	e059      	b.n	80032fe <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b02      	cmp	r3, #2
 8003256:	d11b      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x162>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d016      	beq.n	8003290 <HAL_SPI_TransmitReceive+0x162>
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	2b01      	cmp	r3, #1
 8003266:	d113      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	881a      	ldrh	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003278:	1c9a      	adds	r2, r3, #2
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d119      	bne.n	80032d2 <HAL_SPI_TransmitReceive+0x1a4>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d014      	beq.n	80032d2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	b292      	uxth	r2, r2
 80032b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ba:	1c9a      	adds	r2, r3, #2
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032ce:	2301      	movs	r3, #1
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032d2:	f7fe fdc5 	bl	8001e60 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032de:	429a      	cmp	r2, r3
 80032e0:	d80d      	bhi.n	80032fe <HAL_SPI_TransmitReceive+0x1d0>
 80032e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d009      	beq.n	80032fe <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0bc      	b.n	8003478 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1a0      	bne.n	800324a <HAL_SPI_TransmitReceive+0x11c>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d19b      	bne.n	800324a <HAL_SPI_TransmitReceive+0x11c>
 8003312:	e082      	b.n	800341a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_SPI_TransmitReceive+0x1f4>
 800331c:	8afb      	ldrh	r3, [r7, #22]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d171      	bne.n	8003406 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	330c      	adds	r3, #12
 800332c:	7812      	ldrb	r2, [r2, #0]
 800332e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003348:	e05d      	b.n	8003406 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b02      	cmp	r3, #2
 8003356:	d11c      	bne.n	8003392 <HAL_SPI_TransmitReceive+0x264>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d017      	beq.n	8003392 <HAL_SPI_TransmitReceive+0x264>
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	2b01      	cmp	r3, #1
 8003366:	d114      	bne.n	8003392 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	330c      	adds	r3, #12
 8003372:	7812      	ldrb	r2, [r2, #0]
 8003374:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d119      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x2a6>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d014      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033d0:	2301      	movs	r3, #1
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033d4:	f7fe fd44 	bl	8001e60 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d803      	bhi.n	80033ec <HAL_SPI_TransmitReceive+0x2be>
 80033e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ea:	d102      	bne.n	80033f2 <HAL_SPI_TransmitReceive+0x2c4>
 80033ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d109      	bne.n	8003406 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e038      	b.n	8003478 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d19c      	bne.n	800334a <HAL_SPI_TransmitReceive+0x21c>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d197      	bne.n	800334a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800341a:	6a3a      	ldr	r2, [r7, #32]
 800341c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f8b6 	bl	8003590 <SPI_EndRxTxTransaction>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e01d      	b.n	8003478 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003444:	2300      	movs	r3, #0
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003476:	2300      	movs	r3, #0
  }
}
 8003478:	4618      	mov	r0, r3
 800347a:	3728      	adds	r7, #40	@ 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003490:	f7fe fce6 	bl	8001e60 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	4413      	add	r3, r2
 800349e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034a0:	f7fe fcde 	bl	8001e60 <HAL_GetTick>
 80034a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034a6:	4b39      	ldr	r3, [pc, #228]	@ (800358c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	015b      	lsls	r3, r3, #5
 80034ac:	0d1b      	lsrs	r3, r3, #20
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	fb02 f303 	mul.w	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034b6:	e054      	b.n	8003562 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034be:	d050      	beq.n	8003562 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034c0:	f7fe fcce 	bl	8001e60 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d902      	bls.n	80034d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d13d      	bne.n	8003552 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034ee:	d111      	bne.n	8003514 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034f8:	d004      	beq.n	8003504 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003502:	d107      	bne.n	8003514 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003512:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800351c:	d10f      	bne.n	800353e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800353c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e017      	b.n	8003582 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	3b01      	subs	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4013      	ands	r3, r2
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	bf0c      	ite	eq
 8003572:	2301      	moveq	r3, #1
 8003574:	2300      	movne	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	429a      	cmp	r2, r3
 800357e:	d19b      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000080 	.word	0x20000080

08003590 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2201      	movs	r2, #1
 80035a4:	2102      	movs	r1, #2
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff6a 	bl	8003480 <SPI_WaitFlagStateUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e032      	b.n	8003628 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <SPI_EndRxTxTransaction+0xa0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003634 <SPI_EndRxTxTransaction+0xa4>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	0d5b      	lsrs	r3, r3, #21
 80035ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035e0:	d112      	bne.n	8003608 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2180      	movs	r1, #128	@ 0x80
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f7ff ff47 	bl	8003480 <SPI_WaitFlagStateUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d016      	beq.n	8003626 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e00f      	b.n	8003628 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	3b01      	subs	r3, #1
 8003612:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800361e:	2b80      	cmp	r3, #128	@ 0x80
 8003620:	d0f2      	beq.n	8003608 <SPI_EndRxTxTransaction+0x78>
 8003622:	e000      	b.n	8003626 <SPI_EndRxTxTransaction+0x96>
        break;
 8003624:	bf00      	nop
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000080 	.word	0x20000080
 8003634:	165e9f81 	.word	0x165e9f81

08003638 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e038      	b.n	80036c0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f7fe fa92 	bl	8001b8c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3308      	adds	r3, #8
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f000 fd00 	bl	8004078 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	461a      	mov	r2, r3
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	f000 fd7e 	bl	8004184 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6858      	ldr	r0, [r3, #4]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	f000 fdc5 	bl	8004224 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	6892      	ldr	r2, [r2, #8]
 80036ae:	f041 0101 	orr.w	r1, r1, #1
 80036b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e041      	b.n	800375e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fe f9a4 	bl	8001a3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f000 f9b8 	bl	8003a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d109      	bne.n	800378c <HAL_TIM_PWM_Start+0x24>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	bf14      	ite	ne
 8003784:	2301      	movne	r3, #1
 8003786:	2300      	moveq	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e022      	b.n	80037d2 <HAL_TIM_PWM_Start+0x6a>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2b04      	cmp	r3, #4
 8003790:	d109      	bne.n	80037a6 <HAL_TIM_PWM_Start+0x3e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b01      	cmp	r3, #1
 800379c:	bf14      	ite	ne
 800379e:	2301      	movne	r3, #1
 80037a0:	2300      	moveq	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	e015      	b.n	80037d2 <HAL_TIM_PWM_Start+0x6a>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d109      	bne.n	80037c0 <HAL_TIM_PWM_Start+0x58>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e008      	b.n	80037d2 <HAL_TIM_PWM_Start+0x6a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	bf14      	ite	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	2300      	moveq	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e07c      	b.n	80038d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d104      	bne.n	80037ea <HAL_TIM_PWM_Start+0x82>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037e8:	e013      	b.n	8003812 <HAL_TIM_PWM_Start+0xaa>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d104      	bne.n	80037fa <HAL_TIM_PWM_Start+0x92>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037f8:	e00b      	b.n	8003812 <HAL_TIM_PWM_Start+0xaa>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0xa2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003808:	e003      	b.n	8003812 <HAL_TIM_PWM_Start+0xaa>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2201      	movs	r2, #1
 8003818:	6839      	ldr	r1, [r7, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fb8a 	bl	8003f34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a2d      	ldr	r2, [pc, #180]	@ (80038dc <HAL_TIM_PWM_Start+0x174>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_TIM_PWM_Start+0xcc>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a2c      	ldr	r2, [pc, #176]	@ (80038e0 <HAL_TIM_PWM_Start+0x178>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_TIM_PWM_Start+0xd0>
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <HAL_TIM_PWM_Start+0xd2>
 8003838:	2300      	movs	r3, #0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d007      	beq.n	800384e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800384c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a22      	ldr	r2, [pc, #136]	@ (80038dc <HAL_TIM_PWM_Start+0x174>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d022      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003860:	d01d      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1f      	ldr	r2, [pc, #124]	@ (80038e4 <HAL_TIM_PWM_Start+0x17c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d018      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1d      	ldr	r2, [pc, #116]	@ (80038e8 <HAL_TIM_PWM_Start+0x180>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1c      	ldr	r2, [pc, #112]	@ (80038ec <HAL_TIM_PWM_Start+0x184>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00e      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a16      	ldr	r2, [pc, #88]	@ (80038e0 <HAL_TIM_PWM_Start+0x178>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d009      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a18      	ldr	r2, [pc, #96]	@ (80038f0 <HAL_TIM_PWM_Start+0x188>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d004      	beq.n	800389e <HAL_TIM_PWM_Start+0x136>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a16      	ldr	r2, [pc, #88]	@ (80038f4 <HAL_TIM_PWM_Start+0x18c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d111      	bne.n	80038c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b06      	cmp	r3, #6
 80038ae:	d010      	beq.n	80038d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c0:	e007      	b.n	80038d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40010000 	.word	0x40010000
 80038e0:	40010400 	.word	0x40010400
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40014000 	.word	0x40014000
 80038f4:	40001800 	.word	0x40001800

080038f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003912:	2302      	movs	r3, #2
 8003914:	e0ae      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b0c      	cmp	r3, #12
 8003922:	f200 809f 	bhi.w	8003a64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003926:	a201      	add	r2, pc, #4	@ (adr r2, 800392c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392c:	08003961 	.word	0x08003961
 8003930:	08003a65 	.word	0x08003a65
 8003934:	08003a65 	.word	0x08003a65
 8003938:	08003a65 	.word	0x08003a65
 800393c:	080039a1 	.word	0x080039a1
 8003940:	08003a65 	.word	0x08003a65
 8003944:	08003a65 	.word	0x08003a65
 8003948:	08003a65 	.word	0x08003a65
 800394c:	080039e3 	.word	0x080039e3
 8003950:	08003a65 	.word	0x08003a65
 8003954:	08003a65 	.word	0x08003a65
 8003958:	08003a65 	.word	0x08003a65
 800395c:	08003a23 	.word	0x08003a23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f934 	bl	8003bd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0208 	orr.w	r2, r2, #8
 800397a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0204 	bic.w	r2, r2, #4
 800398a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6999      	ldr	r1, [r3, #24]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	619a      	str	r2, [r3, #24]
      break;
 800399e:	e064      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f984 	bl	8003cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6999      	ldr	r1, [r3, #24]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	619a      	str	r2, [r3, #24]
      break;
 80039e0:	e043      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f9d9 	bl	8003da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0208 	orr.w	r2, r2, #8
 80039fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69da      	ldr	r2, [r3, #28]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0204 	bic.w	r2, r2, #4
 8003a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69d9      	ldr	r1, [r3, #28]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	61da      	str	r2, [r3, #28]
      break;
 8003a20:	e023      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fa2d 	bl	8003e88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69d9      	ldr	r1, [r3, #28]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	021a      	lsls	r2, r3, #8
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	61da      	str	r2, [r3, #28]
      break;
 8003a62:	e002      	b.n	8003a6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	75fb      	strb	r3, [r7, #23]
      break;
 8003a68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a46      	ldr	r2, [pc, #280]	@ (8003ba8 <TIM_Base_SetConfig+0x12c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9a:	d00f      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a43      	ldr	r2, [pc, #268]	@ (8003bac <TIM_Base_SetConfig+0x130>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00b      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a42      	ldr	r2, [pc, #264]	@ (8003bb0 <TIM_Base_SetConfig+0x134>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d007      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a41      	ldr	r2, [pc, #260]	@ (8003bb4 <TIM_Base_SetConfig+0x138>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a40      	ldr	r2, [pc, #256]	@ (8003bb8 <TIM_Base_SetConfig+0x13c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d108      	bne.n	8003ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a35      	ldr	r2, [pc, #212]	@ (8003ba8 <TIM_Base_SetConfig+0x12c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d02b      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003adc:	d027      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a32      	ldr	r2, [pc, #200]	@ (8003bac <TIM_Base_SetConfig+0x130>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d023      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a31      	ldr	r2, [pc, #196]	@ (8003bb0 <TIM_Base_SetConfig+0x134>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01f      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a30      	ldr	r2, [pc, #192]	@ (8003bb4 <TIM_Base_SetConfig+0x138>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01b      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2f      	ldr	r2, [pc, #188]	@ (8003bb8 <TIM_Base_SetConfig+0x13c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d017      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2e      	ldr	r2, [pc, #184]	@ (8003bbc <TIM_Base_SetConfig+0x140>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc0 <TIM_Base_SetConfig+0x144>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00f      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc4 <TIM_Base_SetConfig+0x148>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc8 <TIM_Base_SetConfig+0x14c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a2a      	ldr	r2, [pc, #168]	@ (8003bcc <TIM_Base_SetConfig+0x150>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d003      	beq.n	8003b2e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a29      	ldr	r2, [pc, #164]	@ (8003bd0 <TIM_Base_SetConfig+0x154>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d108      	bne.n	8003b40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a10      	ldr	r2, [pc, #64]	@ (8003ba8 <TIM_Base_SetConfig+0x12c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_Base_SetConfig+0xf8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a12      	ldr	r2, [pc, #72]	@ (8003bb8 <TIM_Base_SetConfig+0x13c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d103      	bne.n	8003b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d105      	bne.n	8003b9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f023 0201 	bic.w	r2, r3, #1
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	611a      	str	r2, [r3, #16]
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800
 8003bb4:	40000c00 	.word	0x40000c00
 8003bb8:	40010400 	.word	0x40010400
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800
 8003bc8:	40001800 	.word	0x40001800
 8003bcc:	40001c00 	.word	0x40001c00
 8003bd0:	40002000 	.word	0x40002000

08003bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f023 0201 	bic.w	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0303 	bic.w	r3, r3, #3
 8003c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 0302 	bic.w	r3, r3, #2
 8003c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a20      	ldr	r2, [pc, #128]	@ (8003cac <TIM_OC1_SetConfig+0xd8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <TIM_OC1_SetConfig+0x64>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb0 <TIM_OC1_SetConfig+0xdc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d10c      	bne.n	8003c52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f023 0308 	bic.w	r3, r3, #8
 8003c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 0304 	bic.w	r3, r3, #4
 8003c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a15      	ldr	r2, [pc, #84]	@ (8003cac <TIM_OC1_SetConfig+0xd8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_OC1_SetConfig+0x8e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a14      	ldr	r2, [pc, #80]	@ (8003cb0 <TIM_OC1_SetConfig+0xdc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d111      	bne.n	8003c86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	621a      	str	r2, [r3, #32]
}
 8003ca0:	bf00      	nop
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40010400 	.word	0x40010400

08003cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f023 0210 	bic.w	r2, r3, #16
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f023 0320 	bic.w	r3, r3, #32
 8003cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a22      	ldr	r2, [pc, #136]	@ (8003d98 <TIM_OC2_SetConfig+0xe4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_OC2_SetConfig+0x68>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a21      	ldr	r2, [pc, #132]	@ (8003d9c <TIM_OC2_SetConfig+0xe8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d10d      	bne.n	8003d38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a17      	ldr	r2, [pc, #92]	@ (8003d98 <TIM_OC2_SetConfig+0xe4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_OC2_SetConfig+0x94>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a16      	ldr	r2, [pc, #88]	@ (8003d9c <TIM_OC2_SetConfig+0xe8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d113      	bne.n	8003d70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40010000 	.word	0x40010000
 8003d9c:	40010400 	.word	0x40010400

08003da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0303 	bic.w	r3, r3, #3
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a21      	ldr	r2, [pc, #132]	@ (8003e80 <TIM_OC3_SetConfig+0xe0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <TIM_OC3_SetConfig+0x66>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a20      	ldr	r2, [pc, #128]	@ (8003e84 <TIM_OC3_SetConfig+0xe4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10d      	bne.n	8003e22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a16      	ldr	r2, [pc, #88]	@ (8003e80 <TIM_OC3_SetConfig+0xe0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d003      	beq.n	8003e32 <TIM_OC3_SetConfig+0x92>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a15      	ldr	r2, [pc, #84]	@ (8003e84 <TIM_OC3_SetConfig+0xe4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d113      	bne.n	8003e5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	621a      	str	r2, [r3, #32]
}
 8003e74:	bf00      	nop
 8003e76:	371c      	adds	r7, #28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	40010000 	.word	0x40010000
 8003e84:	40010400 	.word	0x40010400

08003e88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	031b      	lsls	r3, r3, #12
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a12      	ldr	r2, [pc, #72]	@ (8003f2c <TIM_OC4_SetConfig+0xa4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_OC4_SetConfig+0x68>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a11      	ldr	r2, [pc, #68]	@ (8003f30 <TIM_OC4_SetConfig+0xa8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d109      	bne.n	8003f04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ef6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	019b      	lsls	r3, r3, #6
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40010400 	.word	0x40010400

08003f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	2201      	movs	r2, #1
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1a      	ldr	r2, [r3, #32]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	401a      	ands	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	621a      	str	r2, [r3, #32]
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e05a      	b.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a21      	ldr	r2, [pc, #132]	@ (800405c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d022      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe4:	d01d      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1d      	ldr	r2, [pc, #116]	@ (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d018      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00e      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a18      	ldr	r2, [pc, #96]	@ (800406c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a17      	ldr	r2, [pc, #92]	@ (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a15      	ldr	r2, [pc, #84]	@ (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10c      	bne.n	800403c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4313      	orrs	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40010000 	.word	0x40010000
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00
 800406c:	40010400 	.word	0x40010400
 8004070:	40014000 	.word	0x40014000
 8004074:	40001800 	.word	0x40001800

08004078 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FMC_BCR1_WFDIS */
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	f023 0101 	bic.w	r1, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d102      	bne.n	80040a8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80040a2:	2340      	movs	r3, #64	@ 0x40
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	e001      	b.n	80040ac <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80040b8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80040be:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80040c4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80040ca:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80040d0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80040d6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80040dc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80040e2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80040e8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

#if defined(FMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_CCLKEN */
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8004110:	4b1b      	ldr	r3, [pc, #108]	@ (8004180 <FMC_NORSRAM_Init+0x108>)
 8004112:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

#if defined(FMC_BCR1_WRAPMOD)
  mask |= FMC_BCR1_WRAPMOD;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800411a:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  mask |= FMC_BCR1_CCLKEN;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004122:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
#endif /* FMC_BCR1_WFDIS */
  mask |= FMC_BCR1_CPSIZE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800412a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	43db      	mvns	r3, r3
 800413a:	ea02 0103 	and.w	r1, r2, r3
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4319      	orrs	r1, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004150:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004154:	d10c      	bne.n	8004170 <FMC_NORSRAM_Init+0xf8>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	601a      	str	r2, [r3, #0]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	0008fb7f 	.word	0x0008fb7f

08004184 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800419a:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	431a      	orrs	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	041b      	lsls	r3, r3, #16
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	3b01      	subs	r3, #1
 80041c0:	051b      	lsls	r3, r3, #20
 80041c2:	431a      	orrs	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	3b02      	subs	r3, #2
 80041ca:	061b      	lsls	r3, r3, #24
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	3201      	adds	r2, #1
 80041d8:	4319      	orrs	r1, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ec:	d113      	bne.n	8004216 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80041f6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	051b      	lsls	r3, r3, #20
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004238:	d11d      	bne.n	8004276 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004242:	4b13      	ldr	r3, [pc, #76]	@ (8004290 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004244:	4013      	ands	r3, r2
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	6811      	ldr	r1, [r2, #0]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	6852      	ldr	r2, [r2, #4]
 800424e:	0112      	lsls	r2, r2, #4
 8004250:	4311      	orrs	r1, r2
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	6892      	ldr	r2, [r2, #8]
 8004256:	0212      	lsls	r2, r2, #8
 8004258:	4311      	orrs	r1, r2
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	6992      	ldr	r2, [r2, #24]
 800425e:	4311      	orrs	r1, r2
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	68d2      	ldr	r2, [r2, #12]
 8004264:	0412      	lsls	r2, r2, #16
 8004266:	430a      	orrs	r2, r1
 8004268:	ea43 0102 	orr.w	r1, r3, r2
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004274:	e005      	b.n	8004282 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800427e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	cff00000 	.word	0xcff00000

08004294 <std>:
 8004294:	2300      	movs	r3, #0
 8004296:	b510      	push	{r4, lr}
 8004298:	4604      	mov	r4, r0
 800429a:	e9c0 3300 	strd	r3, r3, [r0]
 800429e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042a2:	6083      	str	r3, [r0, #8]
 80042a4:	8181      	strh	r1, [r0, #12]
 80042a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80042a8:	81c2      	strh	r2, [r0, #14]
 80042aa:	6183      	str	r3, [r0, #24]
 80042ac:	4619      	mov	r1, r3
 80042ae:	2208      	movs	r2, #8
 80042b0:	305c      	adds	r0, #92	@ 0x5c
 80042b2:	f000 fa27 	bl	8004704 <memset>
 80042b6:	4b0d      	ldr	r3, [pc, #52]	@ (80042ec <std+0x58>)
 80042b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80042ba:	4b0d      	ldr	r3, [pc, #52]	@ (80042f0 <std+0x5c>)
 80042bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042be:	4b0d      	ldr	r3, [pc, #52]	@ (80042f4 <std+0x60>)
 80042c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042c2:	4b0d      	ldr	r3, [pc, #52]	@ (80042f8 <std+0x64>)
 80042c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80042c6:	4b0d      	ldr	r3, [pc, #52]	@ (80042fc <std+0x68>)
 80042c8:	6224      	str	r4, [r4, #32]
 80042ca:	429c      	cmp	r4, r3
 80042cc:	d006      	beq.n	80042dc <std+0x48>
 80042ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042d2:	4294      	cmp	r4, r2
 80042d4:	d002      	beq.n	80042dc <std+0x48>
 80042d6:	33d0      	adds	r3, #208	@ 0xd0
 80042d8:	429c      	cmp	r4, r3
 80042da:	d105      	bne.n	80042e8 <std+0x54>
 80042dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e4:	f000 ba86 	b.w	80047f4 <__retarget_lock_init_recursive>
 80042e8:	bd10      	pop	{r4, pc}
 80042ea:	bf00      	nop
 80042ec:	08004515 	.word	0x08004515
 80042f0:	08004537 	.word	0x08004537
 80042f4:	0800456f 	.word	0x0800456f
 80042f8:	08004593 	.word	0x08004593
 80042fc:	2000030c 	.word	0x2000030c

08004300 <stdio_exit_handler>:
 8004300:	4a02      	ldr	r2, [pc, #8]	@ (800430c <stdio_exit_handler+0xc>)
 8004302:	4903      	ldr	r1, [pc, #12]	@ (8004310 <stdio_exit_handler+0x10>)
 8004304:	4803      	ldr	r0, [pc, #12]	@ (8004314 <stdio_exit_handler+0x14>)
 8004306:	f000 b869 	b.w	80043dc <_fwalk_sglue>
 800430a:	bf00      	nop
 800430c:	2000008c 	.word	0x2000008c
 8004310:	080050c1 	.word	0x080050c1
 8004314:	2000009c 	.word	0x2000009c

08004318 <cleanup_stdio>:
 8004318:	6841      	ldr	r1, [r0, #4]
 800431a:	4b0c      	ldr	r3, [pc, #48]	@ (800434c <cleanup_stdio+0x34>)
 800431c:	4299      	cmp	r1, r3
 800431e:	b510      	push	{r4, lr}
 8004320:	4604      	mov	r4, r0
 8004322:	d001      	beq.n	8004328 <cleanup_stdio+0x10>
 8004324:	f000 fecc 	bl	80050c0 <_fflush_r>
 8004328:	68a1      	ldr	r1, [r4, #8]
 800432a:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <cleanup_stdio+0x38>)
 800432c:	4299      	cmp	r1, r3
 800432e:	d002      	beq.n	8004336 <cleanup_stdio+0x1e>
 8004330:	4620      	mov	r0, r4
 8004332:	f000 fec5 	bl	80050c0 <_fflush_r>
 8004336:	68e1      	ldr	r1, [r4, #12]
 8004338:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <cleanup_stdio+0x3c>)
 800433a:	4299      	cmp	r1, r3
 800433c:	d004      	beq.n	8004348 <cleanup_stdio+0x30>
 800433e:	4620      	mov	r0, r4
 8004340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004344:	f000 bebc 	b.w	80050c0 <_fflush_r>
 8004348:	bd10      	pop	{r4, pc}
 800434a:	bf00      	nop
 800434c:	2000030c 	.word	0x2000030c
 8004350:	20000374 	.word	0x20000374
 8004354:	200003dc 	.word	0x200003dc

08004358 <global_stdio_init.part.0>:
 8004358:	b510      	push	{r4, lr}
 800435a:	4b0b      	ldr	r3, [pc, #44]	@ (8004388 <global_stdio_init.part.0+0x30>)
 800435c:	4c0b      	ldr	r4, [pc, #44]	@ (800438c <global_stdio_init.part.0+0x34>)
 800435e:	4a0c      	ldr	r2, [pc, #48]	@ (8004390 <global_stdio_init.part.0+0x38>)
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	4620      	mov	r0, r4
 8004364:	2200      	movs	r2, #0
 8004366:	2104      	movs	r1, #4
 8004368:	f7ff ff94 	bl	8004294 <std>
 800436c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004370:	2201      	movs	r2, #1
 8004372:	2109      	movs	r1, #9
 8004374:	f7ff ff8e 	bl	8004294 <std>
 8004378:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800437c:	2202      	movs	r2, #2
 800437e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004382:	2112      	movs	r1, #18
 8004384:	f7ff bf86 	b.w	8004294 <std>
 8004388:	20000444 	.word	0x20000444
 800438c:	2000030c 	.word	0x2000030c
 8004390:	08004301 	.word	0x08004301

08004394 <__sfp_lock_acquire>:
 8004394:	4801      	ldr	r0, [pc, #4]	@ (800439c <__sfp_lock_acquire+0x8>)
 8004396:	f000 ba2e 	b.w	80047f6 <__retarget_lock_acquire_recursive>
 800439a:	bf00      	nop
 800439c:	2000044d 	.word	0x2000044d

080043a0 <__sfp_lock_release>:
 80043a0:	4801      	ldr	r0, [pc, #4]	@ (80043a8 <__sfp_lock_release+0x8>)
 80043a2:	f000 ba29 	b.w	80047f8 <__retarget_lock_release_recursive>
 80043a6:	bf00      	nop
 80043a8:	2000044d 	.word	0x2000044d

080043ac <__sinit>:
 80043ac:	b510      	push	{r4, lr}
 80043ae:	4604      	mov	r4, r0
 80043b0:	f7ff fff0 	bl	8004394 <__sfp_lock_acquire>
 80043b4:	6a23      	ldr	r3, [r4, #32]
 80043b6:	b11b      	cbz	r3, 80043c0 <__sinit+0x14>
 80043b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043bc:	f7ff bff0 	b.w	80043a0 <__sfp_lock_release>
 80043c0:	4b04      	ldr	r3, [pc, #16]	@ (80043d4 <__sinit+0x28>)
 80043c2:	6223      	str	r3, [r4, #32]
 80043c4:	4b04      	ldr	r3, [pc, #16]	@ (80043d8 <__sinit+0x2c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f5      	bne.n	80043b8 <__sinit+0xc>
 80043cc:	f7ff ffc4 	bl	8004358 <global_stdio_init.part.0>
 80043d0:	e7f2      	b.n	80043b8 <__sinit+0xc>
 80043d2:	bf00      	nop
 80043d4:	08004319 	.word	0x08004319
 80043d8:	20000444 	.word	0x20000444

080043dc <_fwalk_sglue>:
 80043dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e0:	4607      	mov	r7, r0
 80043e2:	4688      	mov	r8, r1
 80043e4:	4614      	mov	r4, r2
 80043e6:	2600      	movs	r6, #0
 80043e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043ec:	f1b9 0901 	subs.w	r9, r9, #1
 80043f0:	d505      	bpl.n	80043fe <_fwalk_sglue+0x22>
 80043f2:	6824      	ldr	r4, [r4, #0]
 80043f4:	2c00      	cmp	r4, #0
 80043f6:	d1f7      	bne.n	80043e8 <_fwalk_sglue+0xc>
 80043f8:	4630      	mov	r0, r6
 80043fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043fe:	89ab      	ldrh	r3, [r5, #12]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d907      	bls.n	8004414 <_fwalk_sglue+0x38>
 8004404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004408:	3301      	adds	r3, #1
 800440a:	d003      	beq.n	8004414 <_fwalk_sglue+0x38>
 800440c:	4629      	mov	r1, r5
 800440e:	4638      	mov	r0, r7
 8004410:	47c0      	blx	r8
 8004412:	4306      	orrs	r6, r0
 8004414:	3568      	adds	r5, #104	@ 0x68
 8004416:	e7e9      	b.n	80043ec <_fwalk_sglue+0x10>

08004418 <_puts_r>:
 8004418:	6a03      	ldr	r3, [r0, #32]
 800441a:	b570      	push	{r4, r5, r6, lr}
 800441c:	6884      	ldr	r4, [r0, #8]
 800441e:	4605      	mov	r5, r0
 8004420:	460e      	mov	r6, r1
 8004422:	b90b      	cbnz	r3, 8004428 <_puts_r+0x10>
 8004424:	f7ff ffc2 	bl	80043ac <__sinit>
 8004428:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800442a:	07db      	lsls	r3, r3, #31
 800442c:	d405      	bmi.n	800443a <_puts_r+0x22>
 800442e:	89a3      	ldrh	r3, [r4, #12]
 8004430:	0598      	lsls	r0, r3, #22
 8004432:	d402      	bmi.n	800443a <_puts_r+0x22>
 8004434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004436:	f000 f9de 	bl	80047f6 <__retarget_lock_acquire_recursive>
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	0719      	lsls	r1, r3, #28
 800443e:	d502      	bpl.n	8004446 <_puts_r+0x2e>
 8004440:	6923      	ldr	r3, [r4, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d135      	bne.n	80044b2 <_puts_r+0x9a>
 8004446:	4621      	mov	r1, r4
 8004448:	4628      	mov	r0, r5
 800444a:	f000 f905 	bl	8004658 <__swsetup_r>
 800444e:	b380      	cbz	r0, 80044b2 <_puts_r+0x9a>
 8004450:	f04f 35ff 	mov.w	r5, #4294967295
 8004454:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004456:	07da      	lsls	r2, r3, #31
 8004458:	d405      	bmi.n	8004466 <_puts_r+0x4e>
 800445a:	89a3      	ldrh	r3, [r4, #12]
 800445c:	059b      	lsls	r3, r3, #22
 800445e:	d402      	bmi.n	8004466 <_puts_r+0x4e>
 8004460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004462:	f000 f9c9 	bl	80047f8 <__retarget_lock_release_recursive>
 8004466:	4628      	mov	r0, r5
 8004468:	bd70      	pop	{r4, r5, r6, pc}
 800446a:	2b00      	cmp	r3, #0
 800446c:	da04      	bge.n	8004478 <_puts_r+0x60>
 800446e:	69a2      	ldr	r2, [r4, #24]
 8004470:	429a      	cmp	r2, r3
 8004472:	dc17      	bgt.n	80044a4 <_puts_r+0x8c>
 8004474:	290a      	cmp	r1, #10
 8004476:	d015      	beq.n	80044a4 <_puts_r+0x8c>
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	6022      	str	r2, [r4, #0]
 800447e:	7019      	strb	r1, [r3, #0]
 8004480:	68a3      	ldr	r3, [r4, #8]
 8004482:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004486:	3b01      	subs	r3, #1
 8004488:	60a3      	str	r3, [r4, #8]
 800448a:	2900      	cmp	r1, #0
 800448c:	d1ed      	bne.n	800446a <_puts_r+0x52>
 800448e:	2b00      	cmp	r3, #0
 8004490:	da11      	bge.n	80044b6 <_puts_r+0x9e>
 8004492:	4622      	mov	r2, r4
 8004494:	210a      	movs	r1, #10
 8004496:	4628      	mov	r0, r5
 8004498:	f000 f8a0 	bl	80045dc <__swbuf_r>
 800449c:	3001      	adds	r0, #1
 800449e:	d0d7      	beq.n	8004450 <_puts_r+0x38>
 80044a0:	250a      	movs	r5, #10
 80044a2:	e7d7      	b.n	8004454 <_puts_r+0x3c>
 80044a4:	4622      	mov	r2, r4
 80044a6:	4628      	mov	r0, r5
 80044a8:	f000 f898 	bl	80045dc <__swbuf_r>
 80044ac:	3001      	adds	r0, #1
 80044ae:	d1e7      	bne.n	8004480 <_puts_r+0x68>
 80044b0:	e7ce      	b.n	8004450 <_puts_r+0x38>
 80044b2:	3e01      	subs	r6, #1
 80044b4:	e7e4      	b.n	8004480 <_puts_r+0x68>
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	6022      	str	r2, [r4, #0]
 80044bc:	220a      	movs	r2, #10
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	e7ee      	b.n	80044a0 <_puts_r+0x88>
	...

080044c4 <puts>:
 80044c4:	4b02      	ldr	r3, [pc, #8]	@ (80044d0 <puts+0xc>)
 80044c6:	4601      	mov	r1, r0
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f7ff bfa5 	b.w	8004418 <_puts_r>
 80044ce:	bf00      	nop
 80044d0:	20000098 	.word	0x20000098

080044d4 <siprintf>:
 80044d4:	b40e      	push	{r1, r2, r3}
 80044d6:	b500      	push	{lr}
 80044d8:	b09c      	sub	sp, #112	@ 0x70
 80044da:	ab1d      	add	r3, sp, #116	@ 0x74
 80044dc:	9002      	str	r0, [sp, #8]
 80044de:	9006      	str	r0, [sp, #24]
 80044e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80044e4:	4809      	ldr	r0, [pc, #36]	@ (800450c <siprintf+0x38>)
 80044e6:	9107      	str	r1, [sp, #28]
 80044e8:	9104      	str	r1, [sp, #16]
 80044ea:	4909      	ldr	r1, [pc, #36]	@ (8004510 <siprintf+0x3c>)
 80044ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80044f0:	9105      	str	r1, [sp, #20]
 80044f2:	6800      	ldr	r0, [r0, #0]
 80044f4:	9301      	str	r3, [sp, #4]
 80044f6:	a902      	add	r1, sp, #8
 80044f8:	f000 fad4 	bl	8004aa4 <_svfiprintf_r>
 80044fc:	9b02      	ldr	r3, [sp, #8]
 80044fe:	2200      	movs	r2, #0
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	b01c      	add	sp, #112	@ 0x70
 8004504:	f85d eb04 	ldr.w	lr, [sp], #4
 8004508:	b003      	add	sp, #12
 800450a:	4770      	bx	lr
 800450c:	20000098 	.word	0x20000098
 8004510:	ffff0208 	.word	0xffff0208

08004514 <__sread>:
 8004514:	b510      	push	{r4, lr}
 8004516:	460c      	mov	r4, r1
 8004518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451c:	f000 f91c 	bl	8004758 <_read_r>
 8004520:	2800      	cmp	r0, #0
 8004522:	bfab      	itete	ge
 8004524:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004526:	89a3      	ldrhlt	r3, [r4, #12]
 8004528:	181b      	addge	r3, r3, r0
 800452a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800452e:	bfac      	ite	ge
 8004530:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004532:	81a3      	strhlt	r3, [r4, #12]
 8004534:	bd10      	pop	{r4, pc}

08004536 <__swrite>:
 8004536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800453a:	461f      	mov	r7, r3
 800453c:	898b      	ldrh	r3, [r1, #12]
 800453e:	05db      	lsls	r3, r3, #23
 8004540:	4605      	mov	r5, r0
 8004542:	460c      	mov	r4, r1
 8004544:	4616      	mov	r6, r2
 8004546:	d505      	bpl.n	8004554 <__swrite+0x1e>
 8004548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454c:	2302      	movs	r3, #2
 800454e:	2200      	movs	r2, #0
 8004550:	f000 f8f0 	bl	8004734 <_lseek_r>
 8004554:	89a3      	ldrh	r3, [r4, #12]
 8004556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800455a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800455e:	81a3      	strh	r3, [r4, #12]
 8004560:	4632      	mov	r2, r6
 8004562:	463b      	mov	r3, r7
 8004564:	4628      	mov	r0, r5
 8004566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800456a:	f000 b907 	b.w	800477c <_write_r>

0800456e <__sseek>:
 800456e:	b510      	push	{r4, lr}
 8004570:	460c      	mov	r4, r1
 8004572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004576:	f000 f8dd 	bl	8004734 <_lseek_r>
 800457a:	1c43      	adds	r3, r0, #1
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	bf15      	itete	ne
 8004580:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004582:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004586:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800458a:	81a3      	strheq	r3, [r4, #12]
 800458c:	bf18      	it	ne
 800458e:	81a3      	strhne	r3, [r4, #12]
 8004590:	bd10      	pop	{r4, pc}

08004592 <__sclose>:
 8004592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004596:	f000 b8bd 	b.w	8004714 <_close_r>
	...

0800459c <_vsiprintf_r>:
 800459c:	b500      	push	{lr}
 800459e:	b09b      	sub	sp, #108	@ 0x6c
 80045a0:	9100      	str	r1, [sp, #0]
 80045a2:	9104      	str	r1, [sp, #16]
 80045a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80045a8:	9105      	str	r1, [sp, #20]
 80045aa:	9102      	str	r1, [sp, #8]
 80045ac:	4905      	ldr	r1, [pc, #20]	@ (80045c4 <_vsiprintf_r+0x28>)
 80045ae:	9103      	str	r1, [sp, #12]
 80045b0:	4669      	mov	r1, sp
 80045b2:	f000 fa77 	bl	8004aa4 <_svfiprintf_r>
 80045b6:	9b00      	ldr	r3, [sp, #0]
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	b01b      	add	sp, #108	@ 0x6c
 80045be:	f85d fb04 	ldr.w	pc, [sp], #4
 80045c2:	bf00      	nop
 80045c4:	ffff0208 	.word	0xffff0208

080045c8 <vsiprintf>:
 80045c8:	4613      	mov	r3, r2
 80045ca:	460a      	mov	r2, r1
 80045cc:	4601      	mov	r1, r0
 80045ce:	4802      	ldr	r0, [pc, #8]	@ (80045d8 <vsiprintf+0x10>)
 80045d0:	6800      	ldr	r0, [r0, #0]
 80045d2:	f7ff bfe3 	b.w	800459c <_vsiprintf_r>
 80045d6:	bf00      	nop
 80045d8:	20000098 	.word	0x20000098

080045dc <__swbuf_r>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	460e      	mov	r6, r1
 80045e0:	4614      	mov	r4, r2
 80045e2:	4605      	mov	r5, r0
 80045e4:	b118      	cbz	r0, 80045ee <__swbuf_r+0x12>
 80045e6:	6a03      	ldr	r3, [r0, #32]
 80045e8:	b90b      	cbnz	r3, 80045ee <__swbuf_r+0x12>
 80045ea:	f7ff fedf 	bl	80043ac <__sinit>
 80045ee:	69a3      	ldr	r3, [r4, #24]
 80045f0:	60a3      	str	r3, [r4, #8]
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	071a      	lsls	r2, r3, #28
 80045f6:	d501      	bpl.n	80045fc <__swbuf_r+0x20>
 80045f8:	6923      	ldr	r3, [r4, #16]
 80045fa:	b943      	cbnz	r3, 800460e <__swbuf_r+0x32>
 80045fc:	4621      	mov	r1, r4
 80045fe:	4628      	mov	r0, r5
 8004600:	f000 f82a 	bl	8004658 <__swsetup_r>
 8004604:	b118      	cbz	r0, 800460e <__swbuf_r+0x32>
 8004606:	f04f 37ff 	mov.w	r7, #4294967295
 800460a:	4638      	mov	r0, r7
 800460c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	6922      	ldr	r2, [r4, #16]
 8004612:	1a98      	subs	r0, r3, r2
 8004614:	6963      	ldr	r3, [r4, #20]
 8004616:	b2f6      	uxtb	r6, r6
 8004618:	4283      	cmp	r3, r0
 800461a:	4637      	mov	r7, r6
 800461c:	dc05      	bgt.n	800462a <__swbuf_r+0x4e>
 800461e:	4621      	mov	r1, r4
 8004620:	4628      	mov	r0, r5
 8004622:	f000 fd4d 	bl	80050c0 <_fflush_r>
 8004626:	2800      	cmp	r0, #0
 8004628:	d1ed      	bne.n	8004606 <__swbuf_r+0x2a>
 800462a:	68a3      	ldr	r3, [r4, #8]
 800462c:	3b01      	subs	r3, #1
 800462e:	60a3      	str	r3, [r4, #8]
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	6022      	str	r2, [r4, #0]
 8004636:	701e      	strb	r6, [r3, #0]
 8004638:	6962      	ldr	r2, [r4, #20]
 800463a:	1c43      	adds	r3, r0, #1
 800463c:	429a      	cmp	r2, r3
 800463e:	d004      	beq.n	800464a <__swbuf_r+0x6e>
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	07db      	lsls	r3, r3, #31
 8004644:	d5e1      	bpl.n	800460a <__swbuf_r+0x2e>
 8004646:	2e0a      	cmp	r6, #10
 8004648:	d1df      	bne.n	800460a <__swbuf_r+0x2e>
 800464a:	4621      	mov	r1, r4
 800464c:	4628      	mov	r0, r5
 800464e:	f000 fd37 	bl	80050c0 <_fflush_r>
 8004652:	2800      	cmp	r0, #0
 8004654:	d0d9      	beq.n	800460a <__swbuf_r+0x2e>
 8004656:	e7d6      	b.n	8004606 <__swbuf_r+0x2a>

08004658 <__swsetup_r>:
 8004658:	b538      	push	{r3, r4, r5, lr}
 800465a:	4b29      	ldr	r3, [pc, #164]	@ (8004700 <__swsetup_r+0xa8>)
 800465c:	4605      	mov	r5, r0
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	460c      	mov	r4, r1
 8004662:	b118      	cbz	r0, 800466c <__swsetup_r+0x14>
 8004664:	6a03      	ldr	r3, [r0, #32]
 8004666:	b90b      	cbnz	r3, 800466c <__swsetup_r+0x14>
 8004668:	f7ff fea0 	bl	80043ac <__sinit>
 800466c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004670:	0719      	lsls	r1, r3, #28
 8004672:	d422      	bmi.n	80046ba <__swsetup_r+0x62>
 8004674:	06da      	lsls	r2, r3, #27
 8004676:	d407      	bmi.n	8004688 <__swsetup_r+0x30>
 8004678:	2209      	movs	r2, #9
 800467a:	602a      	str	r2, [r5, #0]
 800467c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004680:	81a3      	strh	r3, [r4, #12]
 8004682:	f04f 30ff 	mov.w	r0, #4294967295
 8004686:	e033      	b.n	80046f0 <__swsetup_r+0x98>
 8004688:	0758      	lsls	r0, r3, #29
 800468a:	d512      	bpl.n	80046b2 <__swsetup_r+0x5a>
 800468c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800468e:	b141      	cbz	r1, 80046a2 <__swsetup_r+0x4a>
 8004690:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004694:	4299      	cmp	r1, r3
 8004696:	d002      	beq.n	800469e <__swsetup_r+0x46>
 8004698:	4628      	mov	r0, r5
 800469a:	f000 f8af 	bl	80047fc <_free_r>
 800469e:	2300      	movs	r3, #0
 80046a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80046a2:	89a3      	ldrh	r3, [r4, #12]
 80046a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046a8:	81a3      	strh	r3, [r4, #12]
 80046aa:	2300      	movs	r3, #0
 80046ac:	6063      	str	r3, [r4, #4]
 80046ae:	6923      	ldr	r3, [r4, #16]
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	89a3      	ldrh	r3, [r4, #12]
 80046b4:	f043 0308 	orr.w	r3, r3, #8
 80046b8:	81a3      	strh	r3, [r4, #12]
 80046ba:	6923      	ldr	r3, [r4, #16]
 80046bc:	b94b      	cbnz	r3, 80046d2 <__swsetup_r+0x7a>
 80046be:	89a3      	ldrh	r3, [r4, #12]
 80046c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046c8:	d003      	beq.n	80046d2 <__swsetup_r+0x7a>
 80046ca:	4621      	mov	r1, r4
 80046cc:	4628      	mov	r0, r5
 80046ce:	f000 fd45 	bl	800515c <__smakebuf_r>
 80046d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046d6:	f013 0201 	ands.w	r2, r3, #1
 80046da:	d00a      	beq.n	80046f2 <__swsetup_r+0x9a>
 80046dc:	2200      	movs	r2, #0
 80046de:	60a2      	str	r2, [r4, #8]
 80046e0:	6962      	ldr	r2, [r4, #20]
 80046e2:	4252      	negs	r2, r2
 80046e4:	61a2      	str	r2, [r4, #24]
 80046e6:	6922      	ldr	r2, [r4, #16]
 80046e8:	b942      	cbnz	r2, 80046fc <__swsetup_r+0xa4>
 80046ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80046ee:	d1c5      	bne.n	800467c <__swsetup_r+0x24>
 80046f0:	bd38      	pop	{r3, r4, r5, pc}
 80046f2:	0799      	lsls	r1, r3, #30
 80046f4:	bf58      	it	pl
 80046f6:	6962      	ldrpl	r2, [r4, #20]
 80046f8:	60a2      	str	r2, [r4, #8]
 80046fa:	e7f4      	b.n	80046e6 <__swsetup_r+0x8e>
 80046fc:	2000      	movs	r0, #0
 80046fe:	e7f7      	b.n	80046f0 <__swsetup_r+0x98>
 8004700:	20000098 	.word	0x20000098

08004704 <memset>:
 8004704:	4402      	add	r2, r0
 8004706:	4603      	mov	r3, r0
 8004708:	4293      	cmp	r3, r2
 800470a:	d100      	bne.n	800470e <memset+0xa>
 800470c:	4770      	bx	lr
 800470e:	f803 1b01 	strb.w	r1, [r3], #1
 8004712:	e7f9      	b.n	8004708 <memset+0x4>

08004714 <_close_r>:
 8004714:	b538      	push	{r3, r4, r5, lr}
 8004716:	4d06      	ldr	r5, [pc, #24]	@ (8004730 <_close_r+0x1c>)
 8004718:	2300      	movs	r3, #0
 800471a:	4604      	mov	r4, r0
 800471c:	4608      	mov	r0, r1
 800471e:	602b      	str	r3, [r5, #0]
 8004720:	f7fd fa91 	bl	8001c46 <_close>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	d102      	bne.n	800472e <_close_r+0x1a>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	b103      	cbz	r3, 800472e <_close_r+0x1a>
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	20000448 	.word	0x20000448

08004734 <_lseek_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4d07      	ldr	r5, [pc, #28]	@ (8004754 <_lseek_r+0x20>)
 8004738:	4604      	mov	r4, r0
 800473a:	4608      	mov	r0, r1
 800473c:	4611      	mov	r1, r2
 800473e:	2200      	movs	r2, #0
 8004740:	602a      	str	r2, [r5, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	f7fd faa6 	bl	8001c94 <_lseek>
 8004748:	1c43      	adds	r3, r0, #1
 800474a:	d102      	bne.n	8004752 <_lseek_r+0x1e>
 800474c:	682b      	ldr	r3, [r5, #0]
 800474e:	b103      	cbz	r3, 8004752 <_lseek_r+0x1e>
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	bd38      	pop	{r3, r4, r5, pc}
 8004754:	20000448 	.word	0x20000448

08004758 <_read_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4d07      	ldr	r5, [pc, #28]	@ (8004778 <_read_r+0x20>)
 800475c:	4604      	mov	r4, r0
 800475e:	4608      	mov	r0, r1
 8004760:	4611      	mov	r1, r2
 8004762:	2200      	movs	r2, #0
 8004764:	602a      	str	r2, [r5, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f7fd fa50 	bl	8001c0c <_read>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_read_r+0x1e>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	b103      	cbz	r3, 8004776 <_read_r+0x1e>
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	20000448 	.word	0x20000448

0800477c <_write_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4d07      	ldr	r5, [pc, #28]	@ (800479c <_write_r+0x20>)
 8004780:	4604      	mov	r4, r0
 8004782:	4608      	mov	r0, r1
 8004784:	4611      	mov	r1, r2
 8004786:	2200      	movs	r2, #0
 8004788:	602a      	str	r2, [r5, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	f7fc fd34 	bl	80011f8 <_write>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d102      	bne.n	800479a <_write_r+0x1e>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	b103      	cbz	r3, 800479a <_write_r+0x1e>
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	20000448 	.word	0x20000448

080047a0 <__errno>:
 80047a0:	4b01      	ldr	r3, [pc, #4]	@ (80047a8 <__errno+0x8>)
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20000098 	.word	0x20000098

080047ac <__libc_init_array>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	4d0d      	ldr	r5, [pc, #52]	@ (80047e4 <__libc_init_array+0x38>)
 80047b0:	4c0d      	ldr	r4, [pc, #52]	@ (80047e8 <__libc_init_array+0x3c>)
 80047b2:	1b64      	subs	r4, r4, r5
 80047b4:	10a4      	asrs	r4, r4, #2
 80047b6:	2600      	movs	r6, #0
 80047b8:	42a6      	cmp	r6, r4
 80047ba:	d109      	bne.n	80047d0 <__libc_init_array+0x24>
 80047bc:	4d0b      	ldr	r5, [pc, #44]	@ (80047ec <__libc_init_array+0x40>)
 80047be:	4c0c      	ldr	r4, [pc, #48]	@ (80047f0 <__libc_init_array+0x44>)
 80047c0:	f000 fd98 	bl	80052f4 <_init>
 80047c4:	1b64      	subs	r4, r4, r5
 80047c6:	10a4      	asrs	r4, r4, #2
 80047c8:	2600      	movs	r6, #0
 80047ca:	42a6      	cmp	r6, r4
 80047cc:	d105      	bne.n	80047da <__libc_init_array+0x2e>
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d4:	4798      	blx	r3
 80047d6:	3601      	adds	r6, #1
 80047d8:	e7ee      	b.n	80047b8 <__libc_init_array+0xc>
 80047da:	f855 3b04 	ldr.w	r3, [r5], #4
 80047de:	4798      	blx	r3
 80047e0:	3601      	adds	r6, #1
 80047e2:	e7f2      	b.n	80047ca <__libc_init_array+0x1e>
 80047e4:	080066dc 	.word	0x080066dc
 80047e8:	080066dc 	.word	0x080066dc
 80047ec:	080066dc 	.word	0x080066dc
 80047f0:	080066e0 	.word	0x080066e0

080047f4 <__retarget_lock_init_recursive>:
 80047f4:	4770      	bx	lr

080047f6 <__retarget_lock_acquire_recursive>:
 80047f6:	4770      	bx	lr

080047f8 <__retarget_lock_release_recursive>:
 80047f8:	4770      	bx	lr
	...

080047fc <_free_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4605      	mov	r5, r0
 8004800:	2900      	cmp	r1, #0
 8004802:	d041      	beq.n	8004888 <_free_r+0x8c>
 8004804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004808:	1f0c      	subs	r4, r1, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	bfb8      	it	lt
 800480e:	18e4      	addlt	r4, r4, r3
 8004810:	f000 f8e0 	bl	80049d4 <__malloc_lock>
 8004814:	4a1d      	ldr	r2, [pc, #116]	@ (800488c <_free_r+0x90>)
 8004816:	6813      	ldr	r3, [r2, #0]
 8004818:	b933      	cbnz	r3, 8004828 <_free_r+0x2c>
 800481a:	6063      	str	r3, [r4, #4]
 800481c:	6014      	str	r4, [r2, #0]
 800481e:	4628      	mov	r0, r5
 8004820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004824:	f000 b8dc 	b.w	80049e0 <__malloc_unlock>
 8004828:	42a3      	cmp	r3, r4
 800482a:	d908      	bls.n	800483e <_free_r+0x42>
 800482c:	6820      	ldr	r0, [r4, #0]
 800482e:	1821      	adds	r1, r4, r0
 8004830:	428b      	cmp	r3, r1
 8004832:	bf01      	itttt	eq
 8004834:	6819      	ldreq	r1, [r3, #0]
 8004836:	685b      	ldreq	r3, [r3, #4]
 8004838:	1809      	addeq	r1, r1, r0
 800483a:	6021      	streq	r1, [r4, #0]
 800483c:	e7ed      	b.n	800481a <_free_r+0x1e>
 800483e:	461a      	mov	r2, r3
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	b10b      	cbz	r3, 8004848 <_free_r+0x4c>
 8004844:	42a3      	cmp	r3, r4
 8004846:	d9fa      	bls.n	800483e <_free_r+0x42>
 8004848:	6811      	ldr	r1, [r2, #0]
 800484a:	1850      	adds	r0, r2, r1
 800484c:	42a0      	cmp	r0, r4
 800484e:	d10b      	bne.n	8004868 <_free_r+0x6c>
 8004850:	6820      	ldr	r0, [r4, #0]
 8004852:	4401      	add	r1, r0
 8004854:	1850      	adds	r0, r2, r1
 8004856:	4283      	cmp	r3, r0
 8004858:	6011      	str	r1, [r2, #0]
 800485a:	d1e0      	bne.n	800481e <_free_r+0x22>
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	6053      	str	r3, [r2, #4]
 8004862:	4408      	add	r0, r1
 8004864:	6010      	str	r0, [r2, #0]
 8004866:	e7da      	b.n	800481e <_free_r+0x22>
 8004868:	d902      	bls.n	8004870 <_free_r+0x74>
 800486a:	230c      	movs	r3, #12
 800486c:	602b      	str	r3, [r5, #0]
 800486e:	e7d6      	b.n	800481e <_free_r+0x22>
 8004870:	6820      	ldr	r0, [r4, #0]
 8004872:	1821      	adds	r1, r4, r0
 8004874:	428b      	cmp	r3, r1
 8004876:	bf04      	itt	eq
 8004878:	6819      	ldreq	r1, [r3, #0]
 800487a:	685b      	ldreq	r3, [r3, #4]
 800487c:	6063      	str	r3, [r4, #4]
 800487e:	bf04      	itt	eq
 8004880:	1809      	addeq	r1, r1, r0
 8004882:	6021      	streq	r1, [r4, #0]
 8004884:	6054      	str	r4, [r2, #4]
 8004886:	e7ca      	b.n	800481e <_free_r+0x22>
 8004888:	bd38      	pop	{r3, r4, r5, pc}
 800488a:	bf00      	nop
 800488c:	20000454 	.word	0x20000454

08004890 <sbrk_aligned>:
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	4e0f      	ldr	r6, [pc, #60]	@ (80048d0 <sbrk_aligned+0x40>)
 8004894:	460c      	mov	r4, r1
 8004896:	6831      	ldr	r1, [r6, #0]
 8004898:	4605      	mov	r5, r0
 800489a:	b911      	cbnz	r1, 80048a2 <sbrk_aligned+0x12>
 800489c:	f000 fcd6 	bl	800524c <_sbrk_r>
 80048a0:	6030      	str	r0, [r6, #0]
 80048a2:	4621      	mov	r1, r4
 80048a4:	4628      	mov	r0, r5
 80048a6:	f000 fcd1 	bl	800524c <_sbrk_r>
 80048aa:	1c43      	adds	r3, r0, #1
 80048ac:	d103      	bne.n	80048b6 <sbrk_aligned+0x26>
 80048ae:	f04f 34ff 	mov.w	r4, #4294967295
 80048b2:	4620      	mov	r0, r4
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
 80048b6:	1cc4      	adds	r4, r0, #3
 80048b8:	f024 0403 	bic.w	r4, r4, #3
 80048bc:	42a0      	cmp	r0, r4
 80048be:	d0f8      	beq.n	80048b2 <sbrk_aligned+0x22>
 80048c0:	1a21      	subs	r1, r4, r0
 80048c2:	4628      	mov	r0, r5
 80048c4:	f000 fcc2 	bl	800524c <_sbrk_r>
 80048c8:	3001      	adds	r0, #1
 80048ca:	d1f2      	bne.n	80048b2 <sbrk_aligned+0x22>
 80048cc:	e7ef      	b.n	80048ae <sbrk_aligned+0x1e>
 80048ce:	bf00      	nop
 80048d0:	20000450 	.word	0x20000450

080048d4 <_malloc_r>:
 80048d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048d8:	1ccd      	adds	r5, r1, #3
 80048da:	f025 0503 	bic.w	r5, r5, #3
 80048de:	3508      	adds	r5, #8
 80048e0:	2d0c      	cmp	r5, #12
 80048e2:	bf38      	it	cc
 80048e4:	250c      	movcc	r5, #12
 80048e6:	2d00      	cmp	r5, #0
 80048e8:	4606      	mov	r6, r0
 80048ea:	db01      	blt.n	80048f0 <_malloc_r+0x1c>
 80048ec:	42a9      	cmp	r1, r5
 80048ee:	d904      	bls.n	80048fa <_malloc_r+0x26>
 80048f0:	230c      	movs	r3, #12
 80048f2:	6033      	str	r3, [r6, #0]
 80048f4:	2000      	movs	r0, #0
 80048f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049d0 <_malloc_r+0xfc>
 80048fe:	f000 f869 	bl	80049d4 <__malloc_lock>
 8004902:	f8d8 3000 	ldr.w	r3, [r8]
 8004906:	461c      	mov	r4, r3
 8004908:	bb44      	cbnz	r4, 800495c <_malloc_r+0x88>
 800490a:	4629      	mov	r1, r5
 800490c:	4630      	mov	r0, r6
 800490e:	f7ff ffbf 	bl	8004890 <sbrk_aligned>
 8004912:	1c43      	adds	r3, r0, #1
 8004914:	4604      	mov	r4, r0
 8004916:	d158      	bne.n	80049ca <_malloc_r+0xf6>
 8004918:	f8d8 4000 	ldr.w	r4, [r8]
 800491c:	4627      	mov	r7, r4
 800491e:	2f00      	cmp	r7, #0
 8004920:	d143      	bne.n	80049aa <_malloc_r+0xd6>
 8004922:	2c00      	cmp	r4, #0
 8004924:	d04b      	beq.n	80049be <_malloc_r+0xea>
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	4639      	mov	r1, r7
 800492a:	4630      	mov	r0, r6
 800492c:	eb04 0903 	add.w	r9, r4, r3
 8004930:	f000 fc8c 	bl	800524c <_sbrk_r>
 8004934:	4581      	cmp	r9, r0
 8004936:	d142      	bne.n	80049be <_malloc_r+0xea>
 8004938:	6821      	ldr	r1, [r4, #0]
 800493a:	1a6d      	subs	r5, r5, r1
 800493c:	4629      	mov	r1, r5
 800493e:	4630      	mov	r0, r6
 8004940:	f7ff ffa6 	bl	8004890 <sbrk_aligned>
 8004944:	3001      	adds	r0, #1
 8004946:	d03a      	beq.n	80049be <_malloc_r+0xea>
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	442b      	add	r3, r5
 800494c:	6023      	str	r3, [r4, #0]
 800494e:	f8d8 3000 	ldr.w	r3, [r8]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	bb62      	cbnz	r2, 80049b0 <_malloc_r+0xdc>
 8004956:	f8c8 7000 	str.w	r7, [r8]
 800495a:	e00f      	b.n	800497c <_malloc_r+0xa8>
 800495c:	6822      	ldr	r2, [r4, #0]
 800495e:	1b52      	subs	r2, r2, r5
 8004960:	d420      	bmi.n	80049a4 <_malloc_r+0xd0>
 8004962:	2a0b      	cmp	r2, #11
 8004964:	d917      	bls.n	8004996 <_malloc_r+0xc2>
 8004966:	1961      	adds	r1, r4, r5
 8004968:	42a3      	cmp	r3, r4
 800496a:	6025      	str	r5, [r4, #0]
 800496c:	bf18      	it	ne
 800496e:	6059      	strne	r1, [r3, #4]
 8004970:	6863      	ldr	r3, [r4, #4]
 8004972:	bf08      	it	eq
 8004974:	f8c8 1000 	streq.w	r1, [r8]
 8004978:	5162      	str	r2, [r4, r5]
 800497a:	604b      	str	r3, [r1, #4]
 800497c:	4630      	mov	r0, r6
 800497e:	f000 f82f 	bl	80049e0 <__malloc_unlock>
 8004982:	f104 000b 	add.w	r0, r4, #11
 8004986:	1d23      	adds	r3, r4, #4
 8004988:	f020 0007 	bic.w	r0, r0, #7
 800498c:	1ac2      	subs	r2, r0, r3
 800498e:	bf1c      	itt	ne
 8004990:	1a1b      	subne	r3, r3, r0
 8004992:	50a3      	strne	r3, [r4, r2]
 8004994:	e7af      	b.n	80048f6 <_malloc_r+0x22>
 8004996:	6862      	ldr	r2, [r4, #4]
 8004998:	42a3      	cmp	r3, r4
 800499a:	bf0c      	ite	eq
 800499c:	f8c8 2000 	streq.w	r2, [r8]
 80049a0:	605a      	strne	r2, [r3, #4]
 80049a2:	e7eb      	b.n	800497c <_malloc_r+0xa8>
 80049a4:	4623      	mov	r3, r4
 80049a6:	6864      	ldr	r4, [r4, #4]
 80049a8:	e7ae      	b.n	8004908 <_malloc_r+0x34>
 80049aa:	463c      	mov	r4, r7
 80049ac:	687f      	ldr	r7, [r7, #4]
 80049ae:	e7b6      	b.n	800491e <_malloc_r+0x4a>
 80049b0:	461a      	mov	r2, r3
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	42a3      	cmp	r3, r4
 80049b6:	d1fb      	bne.n	80049b0 <_malloc_r+0xdc>
 80049b8:	2300      	movs	r3, #0
 80049ba:	6053      	str	r3, [r2, #4]
 80049bc:	e7de      	b.n	800497c <_malloc_r+0xa8>
 80049be:	230c      	movs	r3, #12
 80049c0:	6033      	str	r3, [r6, #0]
 80049c2:	4630      	mov	r0, r6
 80049c4:	f000 f80c 	bl	80049e0 <__malloc_unlock>
 80049c8:	e794      	b.n	80048f4 <_malloc_r+0x20>
 80049ca:	6005      	str	r5, [r0, #0]
 80049cc:	e7d6      	b.n	800497c <_malloc_r+0xa8>
 80049ce:	bf00      	nop
 80049d0:	20000454 	.word	0x20000454

080049d4 <__malloc_lock>:
 80049d4:	4801      	ldr	r0, [pc, #4]	@ (80049dc <__malloc_lock+0x8>)
 80049d6:	f7ff bf0e 	b.w	80047f6 <__retarget_lock_acquire_recursive>
 80049da:	bf00      	nop
 80049dc:	2000044c 	.word	0x2000044c

080049e0 <__malloc_unlock>:
 80049e0:	4801      	ldr	r0, [pc, #4]	@ (80049e8 <__malloc_unlock+0x8>)
 80049e2:	f7ff bf09 	b.w	80047f8 <__retarget_lock_release_recursive>
 80049e6:	bf00      	nop
 80049e8:	2000044c 	.word	0x2000044c

080049ec <__ssputs_r>:
 80049ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f0:	688e      	ldr	r6, [r1, #8]
 80049f2:	461f      	mov	r7, r3
 80049f4:	42be      	cmp	r6, r7
 80049f6:	680b      	ldr	r3, [r1, #0]
 80049f8:	4682      	mov	sl, r0
 80049fa:	460c      	mov	r4, r1
 80049fc:	4690      	mov	r8, r2
 80049fe:	d82d      	bhi.n	8004a5c <__ssputs_r+0x70>
 8004a00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004a08:	d026      	beq.n	8004a58 <__ssputs_r+0x6c>
 8004a0a:	6965      	ldr	r5, [r4, #20]
 8004a0c:	6909      	ldr	r1, [r1, #16]
 8004a0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a12:	eba3 0901 	sub.w	r9, r3, r1
 8004a16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a1a:	1c7b      	adds	r3, r7, #1
 8004a1c:	444b      	add	r3, r9
 8004a1e:	106d      	asrs	r5, r5, #1
 8004a20:	429d      	cmp	r5, r3
 8004a22:	bf38      	it	cc
 8004a24:	461d      	movcc	r5, r3
 8004a26:	0553      	lsls	r3, r2, #21
 8004a28:	d527      	bpl.n	8004a7a <__ssputs_r+0x8e>
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	f7ff ff52 	bl	80048d4 <_malloc_r>
 8004a30:	4606      	mov	r6, r0
 8004a32:	b360      	cbz	r0, 8004a8e <__ssputs_r+0xa2>
 8004a34:	6921      	ldr	r1, [r4, #16]
 8004a36:	464a      	mov	r2, r9
 8004a38:	f000 fc18 	bl	800526c <memcpy>
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a46:	81a3      	strh	r3, [r4, #12]
 8004a48:	6126      	str	r6, [r4, #16]
 8004a4a:	6165      	str	r5, [r4, #20]
 8004a4c:	444e      	add	r6, r9
 8004a4e:	eba5 0509 	sub.w	r5, r5, r9
 8004a52:	6026      	str	r6, [r4, #0]
 8004a54:	60a5      	str	r5, [r4, #8]
 8004a56:	463e      	mov	r6, r7
 8004a58:	42be      	cmp	r6, r7
 8004a5a:	d900      	bls.n	8004a5e <__ssputs_r+0x72>
 8004a5c:	463e      	mov	r6, r7
 8004a5e:	6820      	ldr	r0, [r4, #0]
 8004a60:	4632      	mov	r2, r6
 8004a62:	4641      	mov	r1, r8
 8004a64:	f000 fbb6 	bl	80051d4 <memmove>
 8004a68:	68a3      	ldr	r3, [r4, #8]
 8004a6a:	1b9b      	subs	r3, r3, r6
 8004a6c:	60a3      	str	r3, [r4, #8]
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	4433      	add	r3, r6
 8004a72:	6023      	str	r3, [r4, #0]
 8004a74:	2000      	movs	r0, #0
 8004a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7a:	462a      	mov	r2, r5
 8004a7c:	f000 fc04 	bl	8005288 <_realloc_r>
 8004a80:	4606      	mov	r6, r0
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d1e0      	bne.n	8004a48 <__ssputs_r+0x5c>
 8004a86:	6921      	ldr	r1, [r4, #16]
 8004a88:	4650      	mov	r0, sl
 8004a8a:	f7ff feb7 	bl	80047fc <_free_r>
 8004a8e:	230c      	movs	r3, #12
 8004a90:	f8ca 3000 	str.w	r3, [sl]
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a9a:	81a3      	strh	r3, [r4, #12]
 8004a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa0:	e7e9      	b.n	8004a76 <__ssputs_r+0x8a>
	...

08004aa4 <_svfiprintf_r>:
 8004aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa8:	4698      	mov	r8, r3
 8004aaa:	898b      	ldrh	r3, [r1, #12]
 8004aac:	061b      	lsls	r3, r3, #24
 8004aae:	b09d      	sub	sp, #116	@ 0x74
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	460d      	mov	r5, r1
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	d510      	bpl.n	8004ada <_svfiprintf_r+0x36>
 8004ab8:	690b      	ldr	r3, [r1, #16]
 8004aba:	b973      	cbnz	r3, 8004ada <_svfiprintf_r+0x36>
 8004abc:	2140      	movs	r1, #64	@ 0x40
 8004abe:	f7ff ff09 	bl	80048d4 <_malloc_r>
 8004ac2:	6028      	str	r0, [r5, #0]
 8004ac4:	6128      	str	r0, [r5, #16]
 8004ac6:	b930      	cbnz	r0, 8004ad6 <_svfiprintf_r+0x32>
 8004ac8:	230c      	movs	r3, #12
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad0:	b01d      	add	sp, #116	@ 0x74
 8004ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad6:	2340      	movs	r3, #64	@ 0x40
 8004ad8:	616b      	str	r3, [r5, #20]
 8004ada:	2300      	movs	r3, #0
 8004adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ade:	2320      	movs	r3, #32
 8004ae0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ae4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ae8:	2330      	movs	r3, #48	@ 0x30
 8004aea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004c88 <_svfiprintf_r+0x1e4>
 8004aee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004af2:	f04f 0901 	mov.w	r9, #1
 8004af6:	4623      	mov	r3, r4
 8004af8:	469a      	mov	sl, r3
 8004afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004afe:	b10a      	cbz	r2, 8004b04 <_svfiprintf_r+0x60>
 8004b00:	2a25      	cmp	r2, #37	@ 0x25
 8004b02:	d1f9      	bne.n	8004af8 <_svfiprintf_r+0x54>
 8004b04:	ebba 0b04 	subs.w	fp, sl, r4
 8004b08:	d00b      	beq.n	8004b22 <_svfiprintf_r+0x7e>
 8004b0a:	465b      	mov	r3, fp
 8004b0c:	4622      	mov	r2, r4
 8004b0e:	4629      	mov	r1, r5
 8004b10:	4638      	mov	r0, r7
 8004b12:	f7ff ff6b 	bl	80049ec <__ssputs_r>
 8004b16:	3001      	adds	r0, #1
 8004b18:	f000 80a7 	beq.w	8004c6a <_svfiprintf_r+0x1c6>
 8004b1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b1e:	445a      	add	r2, fp
 8004b20:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b22:	f89a 3000 	ldrb.w	r3, [sl]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 809f 	beq.w	8004c6a <_svfiprintf_r+0x1c6>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b36:	f10a 0a01 	add.w	sl, sl, #1
 8004b3a:	9304      	str	r3, [sp, #16]
 8004b3c:	9307      	str	r3, [sp, #28]
 8004b3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b42:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b44:	4654      	mov	r4, sl
 8004b46:	2205      	movs	r2, #5
 8004b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b4c:	484e      	ldr	r0, [pc, #312]	@ (8004c88 <_svfiprintf_r+0x1e4>)
 8004b4e:	f7fb fb4f 	bl	80001f0 <memchr>
 8004b52:	9a04      	ldr	r2, [sp, #16]
 8004b54:	b9d8      	cbnz	r0, 8004b8e <_svfiprintf_r+0xea>
 8004b56:	06d0      	lsls	r0, r2, #27
 8004b58:	bf44      	itt	mi
 8004b5a:	2320      	movmi	r3, #32
 8004b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b60:	0711      	lsls	r1, r2, #28
 8004b62:	bf44      	itt	mi
 8004b64:	232b      	movmi	r3, #43	@ 0x2b
 8004b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b70:	d015      	beq.n	8004b9e <_svfiprintf_r+0xfa>
 8004b72:	9a07      	ldr	r2, [sp, #28]
 8004b74:	4654      	mov	r4, sl
 8004b76:	2000      	movs	r0, #0
 8004b78:	f04f 0c0a 	mov.w	ip, #10
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b82:	3b30      	subs	r3, #48	@ 0x30
 8004b84:	2b09      	cmp	r3, #9
 8004b86:	d94b      	bls.n	8004c20 <_svfiprintf_r+0x17c>
 8004b88:	b1b0      	cbz	r0, 8004bb8 <_svfiprintf_r+0x114>
 8004b8a:	9207      	str	r2, [sp, #28]
 8004b8c:	e014      	b.n	8004bb8 <_svfiprintf_r+0x114>
 8004b8e:	eba0 0308 	sub.w	r3, r0, r8
 8004b92:	fa09 f303 	lsl.w	r3, r9, r3
 8004b96:	4313      	orrs	r3, r2
 8004b98:	9304      	str	r3, [sp, #16]
 8004b9a:	46a2      	mov	sl, r4
 8004b9c:	e7d2      	b.n	8004b44 <_svfiprintf_r+0xa0>
 8004b9e:	9b03      	ldr	r3, [sp, #12]
 8004ba0:	1d19      	adds	r1, r3, #4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	9103      	str	r1, [sp, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bfbb      	ittet	lt
 8004baa:	425b      	neglt	r3, r3
 8004bac:	f042 0202 	orrlt.w	r2, r2, #2
 8004bb0:	9307      	strge	r3, [sp, #28]
 8004bb2:	9307      	strlt	r3, [sp, #28]
 8004bb4:	bfb8      	it	lt
 8004bb6:	9204      	strlt	r2, [sp, #16]
 8004bb8:	7823      	ldrb	r3, [r4, #0]
 8004bba:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bbc:	d10a      	bne.n	8004bd4 <_svfiprintf_r+0x130>
 8004bbe:	7863      	ldrb	r3, [r4, #1]
 8004bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bc2:	d132      	bne.n	8004c2a <_svfiprintf_r+0x186>
 8004bc4:	9b03      	ldr	r3, [sp, #12]
 8004bc6:	1d1a      	adds	r2, r3, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	9203      	str	r2, [sp, #12]
 8004bcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bd0:	3402      	adds	r4, #2
 8004bd2:	9305      	str	r3, [sp, #20]
 8004bd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004c98 <_svfiprintf_r+0x1f4>
 8004bd8:	7821      	ldrb	r1, [r4, #0]
 8004bda:	2203      	movs	r2, #3
 8004bdc:	4650      	mov	r0, sl
 8004bde:	f7fb fb07 	bl	80001f0 <memchr>
 8004be2:	b138      	cbz	r0, 8004bf4 <_svfiprintf_r+0x150>
 8004be4:	9b04      	ldr	r3, [sp, #16]
 8004be6:	eba0 000a 	sub.w	r0, r0, sl
 8004bea:	2240      	movs	r2, #64	@ 0x40
 8004bec:	4082      	lsls	r2, r0
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	3401      	adds	r4, #1
 8004bf2:	9304      	str	r3, [sp, #16]
 8004bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf8:	4824      	ldr	r0, [pc, #144]	@ (8004c8c <_svfiprintf_r+0x1e8>)
 8004bfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004bfe:	2206      	movs	r2, #6
 8004c00:	f7fb faf6 	bl	80001f0 <memchr>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d036      	beq.n	8004c76 <_svfiprintf_r+0x1d2>
 8004c08:	4b21      	ldr	r3, [pc, #132]	@ (8004c90 <_svfiprintf_r+0x1ec>)
 8004c0a:	bb1b      	cbnz	r3, 8004c54 <_svfiprintf_r+0x1b0>
 8004c0c:	9b03      	ldr	r3, [sp, #12]
 8004c0e:	3307      	adds	r3, #7
 8004c10:	f023 0307 	bic.w	r3, r3, #7
 8004c14:	3308      	adds	r3, #8
 8004c16:	9303      	str	r3, [sp, #12]
 8004c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c1a:	4433      	add	r3, r6
 8004c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c1e:	e76a      	b.n	8004af6 <_svfiprintf_r+0x52>
 8004c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c24:	460c      	mov	r4, r1
 8004c26:	2001      	movs	r0, #1
 8004c28:	e7a8      	b.n	8004b7c <_svfiprintf_r+0xd8>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	3401      	adds	r4, #1
 8004c2e:	9305      	str	r3, [sp, #20]
 8004c30:	4619      	mov	r1, r3
 8004c32:	f04f 0c0a 	mov.w	ip, #10
 8004c36:	4620      	mov	r0, r4
 8004c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c3c:	3a30      	subs	r2, #48	@ 0x30
 8004c3e:	2a09      	cmp	r2, #9
 8004c40:	d903      	bls.n	8004c4a <_svfiprintf_r+0x1a6>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0c6      	beq.n	8004bd4 <_svfiprintf_r+0x130>
 8004c46:	9105      	str	r1, [sp, #20]
 8004c48:	e7c4      	b.n	8004bd4 <_svfiprintf_r+0x130>
 8004c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c4e:	4604      	mov	r4, r0
 8004c50:	2301      	movs	r3, #1
 8004c52:	e7f0      	b.n	8004c36 <_svfiprintf_r+0x192>
 8004c54:	ab03      	add	r3, sp, #12
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	462a      	mov	r2, r5
 8004c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004c94 <_svfiprintf_r+0x1f0>)
 8004c5c:	a904      	add	r1, sp, #16
 8004c5e:	4638      	mov	r0, r7
 8004c60:	f3af 8000 	nop.w
 8004c64:	1c42      	adds	r2, r0, #1
 8004c66:	4606      	mov	r6, r0
 8004c68:	d1d6      	bne.n	8004c18 <_svfiprintf_r+0x174>
 8004c6a:	89ab      	ldrh	r3, [r5, #12]
 8004c6c:	065b      	lsls	r3, r3, #25
 8004c6e:	f53f af2d 	bmi.w	8004acc <_svfiprintf_r+0x28>
 8004c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c74:	e72c      	b.n	8004ad0 <_svfiprintf_r+0x2c>
 8004c76:	ab03      	add	r3, sp, #12
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	462a      	mov	r2, r5
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <_svfiprintf_r+0x1f0>)
 8004c7e:	a904      	add	r1, sp, #16
 8004c80:	4638      	mov	r0, r7
 8004c82:	f000 f879 	bl	8004d78 <_printf_i>
 8004c86:	e7ed      	b.n	8004c64 <_svfiprintf_r+0x1c0>
 8004c88:	080066a0 	.word	0x080066a0
 8004c8c:	080066aa 	.word	0x080066aa
 8004c90:	00000000 	.word	0x00000000
 8004c94:	080049ed 	.word	0x080049ed
 8004c98:	080066a6 	.word	0x080066a6

08004c9c <_printf_common>:
 8004c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca0:	4616      	mov	r6, r2
 8004ca2:	4698      	mov	r8, r3
 8004ca4:	688a      	ldr	r2, [r1, #8]
 8004ca6:	690b      	ldr	r3, [r1, #16]
 8004ca8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cac:	4293      	cmp	r3, r2
 8004cae:	bfb8      	it	lt
 8004cb0:	4613      	movlt	r3, r2
 8004cb2:	6033      	str	r3, [r6, #0]
 8004cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cb8:	4607      	mov	r7, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	b10a      	cbz	r2, 8004cc2 <_printf_common+0x26>
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	6033      	str	r3, [r6, #0]
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	0699      	lsls	r1, r3, #26
 8004cc6:	bf42      	ittt	mi
 8004cc8:	6833      	ldrmi	r3, [r6, #0]
 8004cca:	3302      	addmi	r3, #2
 8004ccc:	6033      	strmi	r3, [r6, #0]
 8004cce:	6825      	ldr	r5, [r4, #0]
 8004cd0:	f015 0506 	ands.w	r5, r5, #6
 8004cd4:	d106      	bne.n	8004ce4 <_printf_common+0x48>
 8004cd6:	f104 0a19 	add.w	sl, r4, #25
 8004cda:	68e3      	ldr	r3, [r4, #12]
 8004cdc:	6832      	ldr	r2, [r6, #0]
 8004cde:	1a9b      	subs	r3, r3, r2
 8004ce0:	42ab      	cmp	r3, r5
 8004ce2:	dc26      	bgt.n	8004d32 <_printf_common+0x96>
 8004ce4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ce8:	6822      	ldr	r2, [r4, #0]
 8004cea:	3b00      	subs	r3, #0
 8004cec:	bf18      	it	ne
 8004cee:	2301      	movne	r3, #1
 8004cf0:	0692      	lsls	r2, r2, #26
 8004cf2:	d42b      	bmi.n	8004d4c <_printf_common+0xb0>
 8004cf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	47c8      	blx	r9
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d01e      	beq.n	8004d40 <_printf_common+0xa4>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	6922      	ldr	r2, [r4, #16]
 8004d06:	f003 0306 	and.w	r3, r3, #6
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	bf02      	ittt	eq
 8004d0e:	68e5      	ldreq	r5, [r4, #12]
 8004d10:	6833      	ldreq	r3, [r6, #0]
 8004d12:	1aed      	subeq	r5, r5, r3
 8004d14:	68a3      	ldr	r3, [r4, #8]
 8004d16:	bf0c      	ite	eq
 8004d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d1c:	2500      	movne	r5, #0
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	bfc4      	itt	gt
 8004d22:	1a9b      	subgt	r3, r3, r2
 8004d24:	18ed      	addgt	r5, r5, r3
 8004d26:	2600      	movs	r6, #0
 8004d28:	341a      	adds	r4, #26
 8004d2a:	42b5      	cmp	r5, r6
 8004d2c:	d11a      	bne.n	8004d64 <_printf_common+0xc8>
 8004d2e:	2000      	movs	r0, #0
 8004d30:	e008      	b.n	8004d44 <_printf_common+0xa8>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4652      	mov	r2, sl
 8004d36:	4641      	mov	r1, r8
 8004d38:	4638      	mov	r0, r7
 8004d3a:	47c8      	blx	r9
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d103      	bne.n	8004d48 <_printf_common+0xac>
 8004d40:	f04f 30ff 	mov.w	r0, #4294967295
 8004d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d48:	3501      	adds	r5, #1
 8004d4a:	e7c6      	b.n	8004cda <_printf_common+0x3e>
 8004d4c:	18e1      	adds	r1, r4, r3
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	2030      	movs	r0, #48	@ 0x30
 8004d52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d56:	4422      	add	r2, r4
 8004d58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d60:	3302      	adds	r3, #2
 8004d62:	e7c7      	b.n	8004cf4 <_printf_common+0x58>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4622      	mov	r2, r4
 8004d68:	4641      	mov	r1, r8
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	47c8      	blx	r9
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d0e6      	beq.n	8004d40 <_printf_common+0xa4>
 8004d72:	3601      	adds	r6, #1
 8004d74:	e7d9      	b.n	8004d2a <_printf_common+0x8e>
	...

08004d78 <_printf_i>:
 8004d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d7c:	7e0f      	ldrb	r7, [r1, #24]
 8004d7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d80:	2f78      	cmp	r7, #120	@ 0x78
 8004d82:	4691      	mov	r9, r2
 8004d84:	4680      	mov	r8, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	469a      	mov	sl, r3
 8004d8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d8e:	d807      	bhi.n	8004da0 <_printf_i+0x28>
 8004d90:	2f62      	cmp	r7, #98	@ 0x62
 8004d92:	d80a      	bhi.n	8004daa <_printf_i+0x32>
 8004d94:	2f00      	cmp	r7, #0
 8004d96:	f000 80d2 	beq.w	8004f3e <_printf_i+0x1c6>
 8004d9a:	2f58      	cmp	r7, #88	@ 0x58
 8004d9c:	f000 80b9 	beq.w	8004f12 <_printf_i+0x19a>
 8004da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004da4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004da8:	e03a      	b.n	8004e20 <_printf_i+0xa8>
 8004daa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dae:	2b15      	cmp	r3, #21
 8004db0:	d8f6      	bhi.n	8004da0 <_printf_i+0x28>
 8004db2:	a101      	add	r1, pc, #4	@ (adr r1, 8004db8 <_printf_i+0x40>)
 8004db4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004db8:	08004e11 	.word	0x08004e11
 8004dbc:	08004e25 	.word	0x08004e25
 8004dc0:	08004da1 	.word	0x08004da1
 8004dc4:	08004da1 	.word	0x08004da1
 8004dc8:	08004da1 	.word	0x08004da1
 8004dcc:	08004da1 	.word	0x08004da1
 8004dd0:	08004e25 	.word	0x08004e25
 8004dd4:	08004da1 	.word	0x08004da1
 8004dd8:	08004da1 	.word	0x08004da1
 8004ddc:	08004da1 	.word	0x08004da1
 8004de0:	08004da1 	.word	0x08004da1
 8004de4:	08004f25 	.word	0x08004f25
 8004de8:	08004e4f 	.word	0x08004e4f
 8004dec:	08004edf 	.word	0x08004edf
 8004df0:	08004da1 	.word	0x08004da1
 8004df4:	08004da1 	.word	0x08004da1
 8004df8:	08004f47 	.word	0x08004f47
 8004dfc:	08004da1 	.word	0x08004da1
 8004e00:	08004e4f 	.word	0x08004e4f
 8004e04:	08004da1 	.word	0x08004da1
 8004e08:	08004da1 	.word	0x08004da1
 8004e0c:	08004ee7 	.word	0x08004ee7
 8004e10:	6833      	ldr	r3, [r6, #0]
 8004e12:	1d1a      	adds	r2, r3, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6032      	str	r2, [r6, #0]
 8004e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e20:	2301      	movs	r3, #1
 8004e22:	e09d      	b.n	8004f60 <_printf_i+0x1e8>
 8004e24:	6833      	ldr	r3, [r6, #0]
 8004e26:	6820      	ldr	r0, [r4, #0]
 8004e28:	1d19      	adds	r1, r3, #4
 8004e2a:	6031      	str	r1, [r6, #0]
 8004e2c:	0606      	lsls	r6, r0, #24
 8004e2e:	d501      	bpl.n	8004e34 <_printf_i+0xbc>
 8004e30:	681d      	ldr	r5, [r3, #0]
 8004e32:	e003      	b.n	8004e3c <_printf_i+0xc4>
 8004e34:	0645      	lsls	r5, r0, #25
 8004e36:	d5fb      	bpl.n	8004e30 <_printf_i+0xb8>
 8004e38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e3c:	2d00      	cmp	r5, #0
 8004e3e:	da03      	bge.n	8004e48 <_printf_i+0xd0>
 8004e40:	232d      	movs	r3, #45	@ 0x2d
 8004e42:	426d      	negs	r5, r5
 8004e44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e48:	4859      	ldr	r0, [pc, #356]	@ (8004fb0 <_printf_i+0x238>)
 8004e4a:	230a      	movs	r3, #10
 8004e4c:	e011      	b.n	8004e72 <_printf_i+0xfa>
 8004e4e:	6821      	ldr	r1, [r4, #0]
 8004e50:	6833      	ldr	r3, [r6, #0]
 8004e52:	0608      	lsls	r0, r1, #24
 8004e54:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e58:	d402      	bmi.n	8004e60 <_printf_i+0xe8>
 8004e5a:	0649      	lsls	r1, r1, #25
 8004e5c:	bf48      	it	mi
 8004e5e:	b2ad      	uxthmi	r5, r5
 8004e60:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e62:	4853      	ldr	r0, [pc, #332]	@ (8004fb0 <_printf_i+0x238>)
 8004e64:	6033      	str	r3, [r6, #0]
 8004e66:	bf14      	ite	ne
 8004e68:	230a      	movne	r3, #10
 8004e6a:	2308      	moveq	r3, #8
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e72:	6866      	ldr	r6, [r4, #4]
 8004e74:	60a6      	str	r6, [r4, #8]
 8004e76:	2e00      	cmp	r6, #0
 8004e78:	bfa2      	ittt	ge
 8004e7a:	6821      	ldrge	r1, [r4, #0]
 8004e7c:	f021 0104 	bicge.w	r1, r1, #4
 8004e80:	6021      	strge	r1, [r4, #0]
 8004e82:	b90d      	cbnz	r5, 8004e88 <_printf_i+0x110>
 8004e84:	2e00      	cmp	r6, #0
 8004e86:	d04b      	beq.n	8004f20 <_printf_i+0x1a8>
 8004e88:	4616      	mov	r6, r2
 8004e8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e8e:	fb03 5711 	mls	r7, r3, r1, r5
 8004e92:	5dc7      	ldrb	r7, [r0, r7]
 8004e94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e98:	462f      	mov	r7, r5
 8004e9a:	42bb      	cmp	r3, r7
 8004e9c:	460d      	mov	r5, r1
 8004e9e:	d9f4      	bls.n	8004e8a <_printf_i+0x112>
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d10b      	bne.n	8004ebc <_printf_i+0x144>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	07df      	lsls	r7, r3, #31
 8004ea8:	d508      	bpl.n	8004ebc <_printf_i+0x144>
 8004eaa:	6923      	ldr	r3, [r4, #16]
 8004eac:	6861      	ldr	r1, [r4, #4]
 8004eae:	4299      	cmp	r1, r3
 8004eb0:	bfde      	ittt	le
 8004eb2:	2330      	movle	r3, #48	@ 0x30
 8004eb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004eb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ebc:	1b92      	subs	r2, r2, r6
 8004ebe:	6122      	str	r2, [r4, #16]
 8004ec0:	f8cd a000 	str.w	sl, [sp]
 8004ec4:	464b      	mov	r3, r9
 8004ec6:	aa03      	add	r2, sp, #12
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4640      	mov	r0, r8
 8004ecc:	f7ff fee6 	bl	8004c9c <_printf_common>
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d14a      	bne.n	8004f6a <_printf_i+0x1f2>
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed8:	b004      	add	sp, #16
 8004eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	f043 0320 	orr.w	r3, r3, #32
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	4833      	ldr	r0, [pc, #204]	@ (8004fb4 <_printf_i+0x23c>)
 8004ee8:	2778      	movs	r7, #120	@ 0x78
 8004eea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	6831      	ldr	r1, [r6, #0]
 8004ef2:	061f      	lsls	r7, r3, #24
 8004ef4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ef8:	d402      	bmi.n	8004f00 <_printf_i+0x188>
 8004efa:	065f      	lsls	r7, r3, #25
 8004efc:	bf48      	it	mi
 8004efe:	b2ad      	uxthmi	r5, r5
 8004f00:	6031      	str	r1, [r6, #0]
 8004f02:	07d9      	lsls	r1, r3, #31
 8004f04:	bf44      	itt	mi
 8004f06:	f043 0320 	orrmi.w	r3, r3, #32
 8004f0a:	6023      	strmi	r3, [r4, #0]
 8004f0c:	b11d      	cbz	r5, 8004f16 <_printf_i+0x19e>
 8004f0e:	2310      	movs	r3, #16
 8004f10:	e7ac      	b.n	8004e6c <_printf_i+0xf4>
 8004f12:	4827      	ldr	r0, [pc, #156]	@ (8004fb0 <_printf_i+0x238>)
 8004f14:	e7e9      	b.n	8004eea <_printf_i+0x172>
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	f023 0320 	bic.w	r3, r3, #32
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	e7f6      	b.n	8004f0e <_printf_i+0x196>
 8004f20:	4616      	mov	r6, r2
 8004f22:	e7bd      	b.n	8004ea0 <_printf_i+0x128>
 8004f24:	6833      	ldr	r3, [r6, #0]
 8004f26:	6825      	ldr	r5, [r4, #0]
 8004f28:	6961      	ldr	r1, [r4, #20]
 8004f2a:	1d18      	adds	r0, r3, #4
 8004f2c:	6030      	str	r0, [r6, #0]
 8004f2e:	062e      	lsls	r6, r5, #24
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	d501      	bpl.n	8004f38 <_printf_i+0x1c0>
 8004f34:	6019      	str	r1, [r3, #0]
 8004f36:	e002      	b.n	8004f3e <_printf_i+0x1c6>
 8004f38:	0668      	lsls	r0, r5, #25
 8004f3a:	d5fb      	bpl.n	8004f34 <_printf_i+0x1bc>
 8004f3c:	8019      	strh	r1, [r3, #0]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	6123      	str	r3, [r4, #16]
 8004f42:	4616      	mov	r6, r2
 8004f44:	e7bc      	b.n	8004ec0 <_printf_i+0x148>
 8004f46:	6833      	ldr	r3, [r6, #0]
 8004f48:	1d1a      	adds	r2, r3, #4
 8004f4a:	6032      	str	r2, [r6, #0]
 8004f4c:	681e      	ldr	r6, [r3, #0]
 8004f4e:	6862      	ldr	r2, [r4, #4]
 8004f50:	2100      	movs	r1, #0
 8004f52:	4630      	mov	r0, r6
 8004f54:	f7fb f94c 	bl	80001f0 <memchr>
 8004f58:	b108      	cbz	r0, 8004f5e <_printf_i+0x1e6>
 8004f5a:	1b80      	subs	r0, r0, r6
 8004f5c:	6060      	str	r0, [r4, #4]
 8004f5e:	6863      	ldr	r3, [r4, #4]
 8004f60:	6123      	str	r3, [r4, #16]
 8004f62:	2300      	movs	r3, #0
 8004f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f68:	e7aa      	b.n	8004ec0 <_printf_i+0x148>
 8004f6a:	6923      	ldr	r3, [r4, #16]
 8004f6c:	4632      	mov	r2, r6
 8004f6e:	4649      	mov	r1, r9
 8004f70:	4640      	mov	r0, r8
 8004f72:	47d0      	blx	sl
 8004f74:	3001      	adds	r0, #1
 8004f76:	d0ad      	beq.n	8004ed4 <_printf_i+0x15c>
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	079b      	lsls	r3, r3, #30
 8004f7c:	d413      	bmi.n	8004fa6 <_printf_i+0x22e>
 8004f7e:	68e0      	ldr	r0, [r4, #12]
 8004f80:	9b03      	ldr	r3, [sp, #12]
 8004f82:	4298      	cmp	r0, r3
 8004f84:	bfb8      	it	lt
 8004f86:	4618      	movlt	r0, r3
 8004f88:	e7a6      	b.n	8004ed8 <_printf_i+0x160>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	4649      	mov	r1, r9
 8004f90:	4640      	mov	r0, r8
 8004f92:	47d0      	blx	sl
 8004f94:	3001      	adds	r0, #1
 8004f96:	d09d      	beq.n	8004ed4 <_printf_i+0x15c>
 8004f98:	3501      	adds	r5, #1
 8004f9a:	68e3      	ldr	r3, [r4, #12]
 8004f9c:	9903      	ldr	r1, [sp, #12]
 8004f9e:	1a5b      	subs	r3, r3, r1
 8004fa0:	42ab      	cmp	r3, r5
 8004fa2:	dcf2      	bgt.n	8004f8a <_printf_i+0x212>
 8004fa4:	e7eb      	b.n	8004f7e <_printf_i+0x206>
 8004fa6:	2500      	movs	r5, #0
 8004fa8:	f104 0619 	add.w	r6, r4, #25
 8004fac:	e7f5      	b.n	8004f9a <_printf_i+0x222>
 8004fae:	bf00      	nop
 8004fb0:	080066b1 	.word	0x080066b1
 8004fb4:	080066c2 	.word	0x080066c2

08004fb8 <__sflush_r>:
 8004fb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc0:	0716      	lsls	r6, r2, #28
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	d454      	bmi.n	8005072 <__sflush_r+0xba>
 8004fc8:	684b      	ldr	r3, [r1, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	dc02      	bgt.n	8004fd4 <__sflush_r+0x1c>
 8004fce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	dd48      	ble.n	8005066 <__sflush_r+0xae>
 8004fd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fd6:	2e00      	cmp	r6, #0
 8004fd8:	d045      	beq.n	8005066 <__sflush_r+0xae>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004fe0:	682f      	ldr	r7, [r5, #0]
 8004fe2:	6a21      	ldr	r1, [r4, #32]
 8004fe4:	602b      	str	r3, [r5, #0]
 8004fe6:	d030      	beq.n	800504a <__sflush_r+0x92>
 8004fe8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	0759      	lsls	r1, r3, #29
 8004fee:	d505      	bpl.n	8004ffc <__sflush_r+0x44>
 8004ff0:	6863      	ldr	r3, [r4, #4]
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ff6:	b10b      	cbz	r3, 8004ffc <__sflush_r+0x44>
 8004ff8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ffa:	1ad2      	subs	r2, r2, r3
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005000:	6a21      	ldr	r1, [r4, #32]
 8005002:	4628      	mov	r0, r5
 8005004:	47b0      	blx	r6
 8005006:	1c43      	adds	r3, r0, #1
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	d106      	bne.n	800501a <__sflush_r+0x62>
 800500c:	6829      	ldr	r1, [r5, #0]
 800500e:	291d      	cmp	r1, #29
 8005010:	d82b      	bhi.n	800506a <__sflush_r+0xb2>
 8005012:	4a2a      	ldr	r2, [pc, #168]	@ (80050bc <__sflush_r+0x104>)
 8005014:	410a      	asrs	r2, r1
 8005016:	07d6      	lsls	r6, r2, #31
 8005018:	d427      	bmi.n	800506a <__sflush_r+0xb2>
 800501a:	2200      	movs	r2, #0
 800501c:	6062      	str	r2, [r4, #4]
 800501e:	04d9      	lsls	r1, r3, #19
 8005020:	6922      	ldr	r2, [r4, #16]
 8005022:	6022      	str	r2, [r4, #0]
 8005024:	d504      	bpl.n	8005030 <__sflush_r+0x78>
 8005026:	1c42      	adds	r2, r0, #1
 8005028:	d101      	bne.n	800502e <__sflush_r+0x76>
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	b903      	cbnz	r3, 8005030 <__sflush_r+0x78>
 800502e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005030:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005032:	602f      	str	r7, [r5, #0]
 8005034:	b1b9      	cbz	r1, 8005066 <__sflush_r+0xae>
 8005036:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800503a:	4299      	cmp	r1, r3
 800503c:	d002      	beq.n	8005044 <__sflush_r+0x8c>
 800503e:	4628      	mov	r0, r5
 8005040:	f7ff fbdc 	bl	80047fc <_free_r>
 8005044:	2300      	movs	r3, #0
 8005046:	6363      	str	r3, [r4, #52]	@ 0x34
 8005048:	e00d      	b.n	8005066 <__sflush_r+0xae>
 800504a:	2301      	movs	r3, #1
 800504c:	4628      	mov	r0, r5
 800504e:	47b0      	blx	r6
 8005050:	4602      	mov	r2, r0
 8005052:	1c50      	adds	r0, r2, #1
 8005054:	d1c9      	bne.n	8004fea <__sflush_r+0x32>
 8005056:	682b      	ldr	r3, [r5, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0c6      	beq.n	8004fea <__sflush_r+0x32>
 800505c:	2b1d      	cmp	r3, #29
 800505e:	d001      	beq.n	8005064 <__sflush_r+0xac>
 8005060:	2b16      	cmp	r3, #22
 8005062:	d11e      	bne.n	80050a2 <__sflush_r+0xea>
 8005064:	602f      	str	r7, [r5, #0]
 8005066:	2000      	movs	r0, #0
 8005068:	e022      	b.n	80050b0 <__sflush_r+0xf8>
 800506a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800506e:	b21b      	sxth	r3, r3
 8005070:	e01b      	b.n	80050aa <__sflush_r+0xf2>
 8005072:	690f      	ldr	r7, [r1, #16]
 8005074:	2f00      	cmp	r7, #0
 8005076:	d0f6      	beq.n	8005066 <__sflush_r+0xae>
 8005078:	0793      	lsls	r3, r2, #30
 800507a:	680e      	ldr	r6, [r1, #0]
 800507c:	bf08      	it	eq
 800507e:	694b      	ldreq	r3, [r1, #20]
 8005080:	600f      	str	r7, [r1, #0]
 8005082:	bf18      	it	ne
 8005084:	2300      	movne	r3, #0
 8005086:	eba6 0807 	sub.w	r8, r6, r7
 800508a:	608b      	str	r3, [r1, #8]
 800508c:	f1b8 0f00 	cmp.w	r8, #0
 8005090:	dde9      	ble.n	8005066 <__sflush_r+0xae>
 8005092:	6a21      	ldr	r1, [r4, #32]
 8005094:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005096:	4643      	mov	r3, r8
 8005098:	463a      	mov	r2, r7
 800509a:	4628      	mov	r0, r5
 800509c:	47b0      	blx	r6
 800509e:	2800      	cmp	r0, #0
 80050a0:	dc08      	bgt.n	80050b4 <__sflush_r+0xfc>
 80050a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050aa:	81a3      	strh	r3, [r4, #12]
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b4:	4407      	add	r7, r0
 80050b6:	eba8 0800 	sub.w	r8, r8, r0
 80050ba:	e7e7      	b.n	800508c <__sflush_r+0xd4>
 80050bc:	dfbffffe 	.word	0xdfbffffe

080050c0 <_fflush_r>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	690b      	ldr	r3, [r1, #16]
 80050c4:	4605      	mov	r5, r0
 80050c6:	460c      	mov	r4, r1
 80050c8:	b913      	cbnz	r3, 80050d0 <_fflush_r+0x10>
 80050ca:	2500      	movs	r5, #0
 80050cc:	4628      	mov	r0, r5
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
 80050d0:	b118      	cbz	r0, 80050da <_fflush_r+0x1a>
 80050d2:	6a03      	ldr	r3, [r0, #32]
 80050d4:	b90b      	cbnz	r3, 80050da <_fflush_r+0x1a>
 80050d6:	f7ff f969 	bl	80043ac <__sinit>
 80050da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f3      	beq.n	80050ca <_fflush_r+0xa>
 80050e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050e4:	07d0      	lsls	r0, r2, #31
 80050e6:	d404      	bmi.n	80050f2 <_fflush_r+0x32>
 80050e8:	0599      	lsls	r1, r3, #22
 80050ea:	d402      	bmi.n	80050f2 <_fflush_r+0x32>
 80050ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ee:	f7ff fb82 	bl	80047f6 <__retarget_lock_acquire_recursive>
 80050f2:	4628      	mov	r0, r5
 80050f4:	4621      	mov	r1, r4
 80050f6:	f7ff ff5f 	bl	8004fb8 <__sflush_r>
 80050fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050fc:	07da      	lsls	r2, r3, #31
 80050fe:	4605      	mov	r5, r0
 8005100:	d4e4      	bmi.n	80050cc <_fflush_r+0xc>
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	059b      	lsls	r3, r3, #22
 8005106:	d4e1      	bmi.n	80050cc <_fflush_r+0xc>
 8005108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800510a:	f7ff fb75 	bl	80047f8 <__retarget_lock_release_recursive>
 800510e:	e7dd      	b.n	80050cc <_fflush_r+0xc>

08005110 <__swhatbuf_r>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	460c      	mov	r4, r1
 8005114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005118:	2900      	cmp	r1, #0
 800511a:	b096      	sub	sp, #88	@ 0x58
 800511c:	4615      	mov	r5, r2
 800511e:	461e      	mov	r6, r3
 8005120:	da0d      	bge.n	800513e <__swhatbuf_r+0x2e>
 8005122:	89a3      	ldrh	r3, [r4, #12]
 8005124:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005128:	f04f 0100 	mov.w	r1, #0
 800512c:	bf14      	ite	ne
 800512e:	2340      	movne	r3, #64	@ 0x40
 8005130:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005134:	2000      	movs	r0, #0
 8005136:	6031      	str	r1, [r6, #0]
 8005138:	602b      	str	r3, [r5, #0]
 800513a:	b016      	add	sp, #88	@ 0x58
 800513c:	bd70      	pop	{r4, r5, r6, pc}
 800513e:	466a      	mov	r2, sp
 8005140:	f000 f862 	bl	8005208 <_fstat_r>
 8005144:	2800      	cmp	r0, #0
 8005146:	dbec      	blt.n	8005122 <__swhatbuf_r+0x12>
 8005148:	9901      	ldr	r1, [sp, #4]
 800514a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800514e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005152:	4259      	negs	r1, r3
 8005154:	4159      	adcs	r1, r3
 8005156:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800515a:	e7eb      	b.n	8005134 <__swhatbuf_r+0x24>

0800515c <__smakebuf_r>:
 800515c:	898b      	ldrh	r3, [r1, #12]
 800515e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005160:	079d      	lsls	r5, r3, #30
 8005162:	4606      	mov	r6, r0
 8005164:	460c      	mov	r4, r1
 8005166:	d507      	bpl.n	8005178 <__smakebuf_r+0x1c>
 8005168:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	6123      	str	r3, [r4, #16]
 8005170:	2301      	movs	r3, #1
 8005172:	6163      	str	r3, [r4, #20]
 8005174:	b003      	add	sp, #12
 8005176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005178:	ab01      	add	r3, sp, #4
 800517a:	466a      	mov	r2, sp
 800517c:	f7ff ffc8 	bl	8005110 <__swhatbuf_r>
 8005180:	9f00      	ldr	r7, [sp, #0]
 8005182:	4605      	mov	r5, r0
 8005184:	4639      	mov	r1, r7
 8005186:	4630      	mov	r0, r6
 8005188:	f7ff fba4 	bl	80048d4 <_malloc_r>
 800518c:	b948      	cbnz	r0, 80051a2 <__smakebuf_r+0x46>
 800518e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005192:	059a      	lsls	r2, r3, #22
 8005194:	d4ee      	bmi.n	8005174 <__smakebuf_r+0x18>
 8005196:	f023 0303 	bic.w	r3, r3, #3
 800519a:	f043 0302 	orr.w	r3, r3, #2
 800519e:	81a3      	strh	r3, [r4, #12]
 80051a0:	e7e2      	b.n	8005168 <__smakebuf_r+0xc>
 80051a2:	89a3      	ldrh	r3, [r4, #12]
 80051a4:	6020      	str	r0, [r4, #0]
 80051a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051aa:	81a3      	strh	r3, [r4, #12]
 80051ac:	9b01      	ldr	r3, [sp, #4]
 80051ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80051b2:	b15b      	cbz	r3, 80051cc <__smakebuf_r+0x70>
 80051b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051b8:	4630      	mov	r0, r6
 80051ba:	f000 f837 	bl	800522c <_isatty_r>
 80051be:	b128      	cbz	r0, 80051cc <__smakebuf_r+0x70>
 80051c0:	89a3      	ldrh	r3, [r4, #12]
 80051c2:	f023 0303 	bic.w	r3, r3, #3
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	81a3      	strh	r3, [r4, #12]
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	431d      	orrs	r5, r3
 80051d0:	81a5      	strh	r5, [r4, #12]
 80051d2:	e7cf      	b.n	8005174 <__smakebuf_r+0x18>

080051d4 <memmove>:
 80051d4:	4288      	cmp	r0, r1
 80051d6:	b510      	push	{r4, lr}
 80051d8:	eb01 0402 	add.w	r4, r1, r2
 80051dc:	d902      	bls.n	80051e4 <memmove+0x10>
 80051de:	4284      	cmp	r4, r0
 80051e0:	4623      	mov	r3, r4
 80051e2:	d807      	bhi.n	80051f4 <memmove+0x20>
 80051e4:	1e43      	subs	r3, r0, #1
 80051e6:	42a1      	cmp	r1, r4
 80051e8:	d008      	beq.n	80051fc <memmove+0x28>
 80051ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051f2:	e7f8      	b.n	80051e6 <memmove+0x12>
 80051f4:	4402      	add	r2, r0
 80051f6:	4601      	mov	r1, r0
 80051f8:	428a      	cmp	r2, r1
 80051fa:	d100      	bne.n	80051fe <memmove+0x2a>
 80051fc:	bd10      	pop	{r4, pc}
 80051fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005206:	e7f7      	b.n	80051f8 <memmove+0x24>

08005208 <_fstat_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d07      	ldr	r5, [pc, #28]	@ (8005228 <_fstat_r+0x20>)
 800520c:	2300      	movs	r3, #0
 800520e:	4604      	mov	r4, r0
 8005210:	4608      	mov	r0, r1
 8005212:	4611      	mov	r1, r2
 8005214:	602b      	str	r3, [r5, #0]
 8005216:	f7fc fd22 	bl	8001c5e <_fstat>
 800521a:	1c43      	adds	r3, r0, #1
 800521c:	d102      	bne.n	8005224 <_fstat_r+0x1c>
 800521e:	682b      	ldr	r3, [r5, #0]
 8005220:	b103      	cbz	r3, 8005224 <_fstat_r+0x1c>
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	bd38      	pop	{r3, r4, r5, pc}
 8005226:	bf00      	nop
 8005228:	20000448 	.word	0x20000448

0800522c <_isatty_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d06      	ldr	r5, [pc, #24]	@ (8005248 <_isatty_r+0x1c>)
 8005230:	2300      	movs	r3, #0
 8005232:	4604      	mov	r4, r0
 8005234:	4608      	mov	r0, r1
 8005236:	602b      	str	r3, [r5, #0]
 8005238:	f7fc fd21 	bl	8001c7e <_isatty>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_isatty_r+0x1a>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_isatty_r+0x1a>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	20000448 	.word	0x20000448

0800524c <_sbrk_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d06      	ldr	r5, [pc, #24]	@ (8005268 <_sbrk_r+0x1c>)
 8005250:	2300      	movs	r3, #0
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	f7fc fd2a 	bl	8001cb0 <_sbrk>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_sbrk_r+0x1a>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b103      	cbz	r3, 8005266 <_sbrk_r+0x1a>
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	20000448 	.word	0x20000448

0800526c <memcpy>:
 800526c:	440a      	add	r2, r1
 800526e:	4291      	cmp	r1, r2
 8005270:	f100 33ff 	add.w	r3, r0, #4294967295
 8005274:	d100      	bne.n	8005278 <memcpy+0xc>
 8005276:	4770      	bx	lr
 8005278:	b510      	push	{r4, lr}
 800527a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800527e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005282:	4291      	cmp	r1, r2
 8005284:	d1f9      	bne.n	800527a <memcpy+0xe>
 8005286:	bd10      	pop	{r4, pc}

08005288 <_realloc_r>:
 8005288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800528c:	4680      	mov	r8, r0
 800528e:	4615      	mov	r5, r2
 8005290:	460c      	mov	r4, r1
 8005292:	b921      	cbnz	r1, 800529e <_realloc_r+0x16>
 8005294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005298:	4611      	mov	r1, r2
 800529a:	f7ff bb1b 	b.w	80048d4 <_malloc_r>
 800529e:	b92a      	cbnz	r2, 80052ac <_realloc_r+0x24>
 80052a0:	f7ff faac 	bl	80047fc <_free_r>
 80052a4:	2400      	movs	r4, #0
 80052a6:	4620      	mov	r0, r4
 80052a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ac:	f000 f81a 	bl	80052e4 <_malloc_usable_size_r>
 80052b0:	4285      	cmp	r5, r0
 80052b2:	4606      	mov	r6, r0
 80052b4:	d802      	bhi.n	80052bc <_realloc_r+0x34>
 80052b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80052ba:	d8f4      	bhi.n	80052a6 <_realloc_r+0x1e>
 80052bc:	4629      	mov	r1, r5
 80052be:	4640      	mov	r0, r8
 80052c0:	f7ff fb08 	bl	80048d4 <_malloc_r>
 80052c4:	4607      	mov	r7, r0
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d0ec      	beq.n	80052a4 <_realloc_r+0x1c>
 80052ca:	42b5      	cmp	r5, r6
 80052cc:	462a      	mov	r2, r5
 80052ce:	4621      	mov	r1, r4
 80052d0:	bf28      	it	cs
 80052d2:	4632      	movcs	r2, r6
 80052d4:	f7ff ffca 	bl	800526c <memcpy>
 80052d8:	4621      	mov	r1, r4
 80052da:	4640      	mov	r0, r8
 80052dc:	f7ff fa8e 	bl	80047fc <_free_r>
 80052e0:	463c      	mov	r4, r7
 80052e2:	e7e0      	b.n	80052a6 <_realloc_r+0x1e>

080052e4 <_malloc_usable_size_r>:
 80052e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e8:	1f18      	subs	r0, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bfbc      	itt	lt
 80052ee:	580b      	ldrlt	r3, [r1, r0]
 80052f0:	18c0      	addlt	r0, r0, r3
 80052f2:	4770      	bx	lr

080052f4 <_init>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	bf00      	nop
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr

08005300 <_fini>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	bf00      	nop
 8005304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005306:	bc08      	pop	{r3}
 8005308:	469e      	mov	lr, r3
 800530a:	4770      	bx	lr
