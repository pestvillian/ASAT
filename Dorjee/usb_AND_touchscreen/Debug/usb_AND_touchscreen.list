
usb_AND_touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a9c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040ec  08012c4c  08012c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d38  08016d38  000182ec  2**0
                  CONTENTS
  4 .ARM          00000008  08016d38  08016d38  00017d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d40  08016d40  000182ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016d40  08016d40  00017d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016d44  08016d44  00017d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ec  20000000  08016d48  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000182ec  2**0
                  CONTENTS
 10 .bss          0000a2d8  200002ec  200002ec  000182ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a5c4  2000a5c4  000182ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000182ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d82a  00000000  00000000  0001831c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a34  00000000  00000000  00045b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025c8  00000000  00000000  0004c580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d39  00000000  00000000  0004eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d8c3  00000000  00000000  00050881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003092c  00000000  00000000  0007e144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4c51  00000000  00000000  000aea70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a36c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a92c  00000000  00000000  001a3704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001ae030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012c34 	.word	0x08012c34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002f0 	.word	0x200002f0
 80001ec:	08012c34 	.word	0x08012c34

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <USBH_HID_EventCallback>:
static uint8_t USB_BUSY = 0;
char qr_code_data[MAX_LINES][MAX_LINE_LENGTH] = { { '\0' } }; //static initializes strings with all null characters
HID_KEYBD_Info_TypeDef *Keyboard_Info;

/***DORJEE YOU HAVE TO CHANGE USBH_HID.H WHEN YOU GENERATE CODE****/
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) { //2.6s for 54 lines
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f00e fe05 	bl	800f1a8 <USBH_HID_GetKeybdInfo>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a41      	ldr	r2, [pc, #260]	@ (80006a8 <USBH_HID_EventCallback+0x118>)
 80005a2:	6013      	str	r3, [r2, #0]
	char key = USBH_HID_GetASCIICode(Keyboard_Info);
 80005a4:	4b40      	ldr	r3, [pc, #256]	@ (80006a8 <USBH_HID_EventCallback+0x118>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f00e fea5 	bl	800f2f8 <USBH_HID_GetASCIICode>
 80005ae:	4603      	mov	r3, r0
 80005b0:	72fb      	strb	r3, [r7, #11]
	//disable the touchscreen interrupt functionality when usb transmission starts
	//after tab it calls itself one more time, so disable after i=0
	if (i == 1) {
 80005b2:	4b3e      	ldr	r3, [pc, #248]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d102      	bne.n	80005c0 <USBH_HID_EventCallback+0x30>
		USB_BUSY = 1;
 80005ba:	4b3d      	ldr	r3, [pc, #244]	@ (80006b0 <USBH_HID_EventCallback+0x120>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
	}

	//store incoming chars. ignore null characters that come in for some reason
	if ((key != NULL_CHAR) && (key != SOH)) {
 80005c0:	7afb      	ldrb	r3, [r7, #11]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d011      	beq.n	80005ea <USBH_HID_EventCallback+0x5a>
 80005c6:	7afb      	ldrb	r3, [r7, #11]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d00e      	beq.n	80005ea <USBH_HID_EventCallback+0x5a>
		qr_code_data[i][j] = key;
 80005cc:	4b37      	ldr	r3, [pc, #220]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b38      	ldr	r3, [pc, #224]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4938      	ldr	r1, [pc, #224]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 80005d6:	0152      	lsls	r2, r2, #5
 80005d8:	440a      	add	r2, r1
 80005da:	4413      	add	r3, r2
 80005dc:	7afa      	ldrb	r2, [r7, #11]
 80005de:	701a      	strb	r2, [r3, #0]
		j++;
 80005e0:	4b34      	ldr	r3, [pc, #208]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a33      	ldr	r2, [pc, #204]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005e8:	6013      	str	r3, [r2, #0]
	}
	//handle new line
	if (key == NEWLINE_CHAR) {
 80005ea:	7afb      	ldrb	r3, [r7, #11]
 80005ec:	2b0a      	cmp	r3, #10
 80005ee:	d107      	bne.n	8000600 <USBH_HID_EventCallback+0x70>
		j = 0;
 80005f0:	4b30      	ldr	r3, [pc, #192]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
		i++;
 80005f6:	4b2d      	ldr	r3, [pc, #180]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	4a2b      	ldr	r2, [pc, #172]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005fe:	6013      	str	r3, [r2, #0]
	}
	//tab is the end of the qr code
	if (key == TAB) {
 8000600:	7afb      	ldrb	r3, [r7, #11]
 8000602:	2b09      	cmp	r3, #9
 8000604:	d14c      	bne.n	80006a0 <USBH_HID_EventCallback+0x110>
		for (int a=0; a<15; a++) {
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e002      	b.n	8000612 <USBH_HID_EventCallback+0x82>
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	3301      	adds	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b0e      	cmp	r3, #14
 8000616:	ddf9      	ble.n	800060c <USBH_HID_EventCallback+0x7c>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
			//printf("%s", qr_code_data[a]);
		}
		__disable_irq();
		//output_protocol(qr_code_data, i + 1);
		//check if the title is (10 chars + newline char) or less
		if (strlen(qr_code_data[0]) < (MAX_TITLE_SIZE + 1)) {
 800061c:	4826      	ldr	r0, [pc, #152]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 800061e:	f7ff fde7 	bl	80001f0 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	2b0c      	cmp	r3, #12
 8000626:	d835      	bhi.n	8000694 <USBH_HID_EventCallback+0x104>
			uint8_t freeSectorNumber = getFreeSector();
 8000628:	f000 fec4 	bl	80013b4 <getFreeSector>
 800062c:	4603      	mov	r3, r0
 800062e:	72bb      	strb	r3, [r7, #10]
			//printf("free sector is %d\n", freeSectorNumber);
			//only store the protocol if all memory isnt full
			if (freeSectorNumber <= 10) { //i only got 10 pages rn
 8000630:	7abb      	ldrb	r3, [r7, #10]
 8000632:	2b0a      	cmp	r3, #10
 8000634:	d829      	bhi.n	800068a <USBH_HID_EventCallback+0xfa>
				//printf("why\n");
				storeProtocol(qr_code_data, freeSectorNumber);
 8000636:	7abb      	ldrb	r3, [r7, #10]
 8000638:	4619      	mov	r1, r3
 800063a:	481f      	ldr	r0, [pc, #124]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 800063c:	f000 fcf4 	bl	8001028 <storeProtocol>
				//go to the page num the new protocol is on
				pageNum = freeSectorNumber;
 8000640:	4a1e      	ldr	r2, [pc, #120]	@ (80006bc <USBH_HID_EventCallback+0x12c>)
 8000642:	7abb      	ldrb	r3, [r7, #10]
 8000644:	7013      	strb	r3, [r2, #0]
				DrawMainPage(pageNum);
 8000646:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <USBH_HID_EventCallback+0x12c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f001 f96c 	bl	8001928 <DrawMainPage>
				currentPage = PAGE_MAIN;
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <USBH_HID_EventCallback+0x130>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < MAX_LINES; a++) {
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	e013      	b.n	8000684 <USBH_HID_EventCallback+0xf4>
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e00a      	b.n	8000678 <USBH_HID_EventCallback+0xe8>
						qr_code_data[a][b] = '\0';
 8000662:	4a15      	ldr	r2, [pc, #84]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	015b      	lsls	r3, r3, #5
 8000668:	441a      	add	r2, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4413      	add	r3, r2
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2b1f      	cmp	r3, #31
 800067c:	ddf1      	ble.n	8000662 <USBH_HID_EventCallback+0xd2>
				for (int a = 0; a < MAX_LINES; a++) {
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	3301      	adds	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	2b63      	cmp	r3, #99	@ 0x63
 8000688:	dde8      	ble.n	800065c <USBH_HID_EventCallback+0xcc>
  __ASM volatile ("cpsie i" : : : "memory");
 800068a:	b662      	cpsie	i
}
 800068c:	bf00      	nop
					}
				}

			}
			__enable_irq();
			USB_BUSY = 0;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <USBH_HID_EventCallback+0x120>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
		j = 0;
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
	}

}
 80006a0:	bf00      	nop
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20008f94 	.word	0x20008f94
 80006ac:	20000608 	.word	0x20000608
 80006b0:	20008311 	.word	0x20008311
 80006b4:	2000060c 	.word	0x2000060c
 80006b8:	20008314 	.word	0x20008314
 80006bc:	200001de 	.word	0x200001de
 80006c0:	20000605 	.word	0x20000605

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f004 fe92 	bl	80053f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f846 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 fb02 	bl	8000cd8 <MX_GPIO_Init>
  MX_CRC_Init();
 80006d4:	f000 f8ac 	bl	8000830 <MX_CRC_Init>
  MX_DMA2D_Init();
 80006d8:	f000 f8be 	bl	8000858 <MX_DMA2D_Init>
  MX_FMC_Init();
 80006dc:	f000 faac 	bl	8000c38 <MX_FMC_Init>
  MX_I2C3_Init();
 80006e0:	f000 f8ec 	bl	80008bc <MX_I2C3_Init>
  MX_LTDC_Init();
 80006e4:	f000 f92a 	bl	800093c <MX_LTDC_Init>
  MX_SPI5_Init();
 80006e8:	f000 f9a8 	bl	8000a3c <MX_SPI5_Init>
  MX_TIM1_Init();
 80006ec:	f000 f9dc 	bl	8000aa8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80006f0:	f000 fa78 	bl	8000be4 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80006f4:	f010 fdd6 	bl	80112a4 <MX_USB_HOST_Init>
  MX_TIM10_Init();
 80006f8:	f000 fa26 	bl	8000b48 <MX_TIM10_Init>
  MX_UART5_Init();
 80006fc:	f000 fa48 	bl	8000b90 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	printf("USB and Touchscreen Test\n");
 8000700:	4812      	ldr	r0, [pc, #72]	@ (800074c <main+0x88>)
 8000702:	f011 facf 	bl	8011ca4 <puts>
//	erase_sector(6);
//	erase_sector(7);
//	erase_sector(8);
//	erase_sector(9);
//	erase_sector(10);
	printf("Sectors may have been erased\n");
 8000706:	4812      	ldr	r0, [pc, #72]	@ (8000750 <main+0x8c>)
 8000708:	f011 facc 	bl	8011ca4 <puts>

	/******* TOUCHSCREEN INIT**********/
	BSP_LCD_Init();
 800070c:	f003 ff16 	bl	800453c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 8000710:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000714:	2000      	movs	r0, #0
 8000716:	f003 ff93 	bl	8004640 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800071a:	f04f 30ff 	mov.w	r0, #4294967295
 800071e:	f004 f83f 	bl	80047a0 <BSP_LCD_Clear>
	Touch_Init();
 8000722:	f001 f8d9 	bl	80018d8 <Touch_Init>

	/******** START PROGRAM ************/
	DrawMainPage(1);
 8000726:	2001      	movs	r0, #1
 8000728:	f001 f8fe 	bl	8001928 <DrawMainPage>
	HAL_TIM_Base_Start_IT(&htim10);   //start Interrupt Timer
 800072c:	4809      	ldr	r0, [pc, #36]	@ (8000754 <main+0x90>)
 800072e:	f00b fd19 	bl	800c164 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000732:	f010 fddd 	bl	80112f0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

		if (checkTouchFlag) {
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <main+0x94>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d0f9      	beq.n	8000732 <main+0x6e>
			HandleTouch();
 800073e:	f001 fd17 	bl	8002170 <HandleTouch>
			checkTouchFlag = 0;
 8000742:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <main+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8000748:	e7f3      	b.n	8000732 <main+0x6e>
 800074a:	bf00      	nop
 800074c:	08012c4c 	.word	0x08012c4c
 8000750:	08012c68 	.word	0x08012c68
 8000754:	200004ec 	.word	0x200004ec
 8000758:	20000604 	.word	0x20000604

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	@ 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	2230      	movs	r2, #48	@ 0x30
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f011 fb9a 	bl	8011ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <SystemClock_Config+0xcc>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	4a27      	ldr	r2, [pc, #156]	@ (8000828 <SystemClock_Config+0xcc>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000790:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <SystemClock_Config+0xcc>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	4b22      	ldr	r3, [pc, #136]	@ (800082c <SystemClock_Config+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a21      	ldr	r2, [pc, #132]	@ (800082c <SystemClock_Config+0xd0>)
 80007a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <SystemClock_Config+0xd0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007da:	2307      	movs	r3, #7
 80007dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f009 ff4c 	bl	800a680 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ee:	f002 f947 	bl	8002a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000808:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2105      	movs	r1, #5
 8000810:	4618      	mov	r0, r3
 8000812:	f00a f9ad 	bl	800ab70 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800081c:	f002 f930 	bl	8002a80 <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	@ 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_CRC_Init+0x20>)
 8000836:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <MX_CRC_Init+0x24>)
 8000838:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_CRC_Init+0x20>)
 800083c:	f004 ff20 	bl	8005680 <HAL_CRC_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000846:	f002 f91b 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000308 	.word	0x20000308
 8000854:	40023000 	.word	0x40023000

08000858 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800085c:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 800085e:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <MX_DMA2D_Init+0x60>)
 8000860:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000876:	2200      	movs	r2, #0
 8000878:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 800087c:	2200      	movs	r2, #0
 800087e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000882:	2200      	movs	r2, #0
 8000884:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000888:	2200      	movs	r2, #0
 800088a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800088c:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 800088e:	f005 f8d1 	bl	8005a34 <HAL_DMA2D_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000898:	f002 f8f2 	bl	8002a80 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800089c:	2101      	movs	r1, #1
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 80008a0:	f005 fb36 	bl	8005f10 <HAL_DMA2D_ConfigLayer>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008aa:	f002 f8e9 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000310 	.word	0x20000310
 80008b8:	4002b000 	.word	0x4002b000

080008bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000934 <MX_I2C3_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000938 <MX_I2C3_Init+0x7c>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008cc:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d8:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80008e6:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ec:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008f8:	480d      	ldr	r0, [pc, #52]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008fa:	f008 fa51 	bl	8008da0 <HAL_I2C_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000904:	f002 f8bc 	bl	8002a80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000908:	2100      	movs	r1, #0
 800090a:	4809      	ldr	r0, [pc, #36]	@ (8000930 <MX_I2C3_Init+0x74>)
 800090c:	f009 faaa 	bl	8009e64 <HAL_I2CEx_ConfigAnalogFilter>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000916:	f002 f8b3 	bl	8002a80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_I2C3_Init+0x74>)
 800091e:	f009 fadd 	bl	8009edc <HAL_I2CEx_ConfigDigitalFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000928:	f002 f8aa 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000350 	.word	0x20000350
 8000934:	40005c00 	.word	0x40005c00
 8000938:	000186a0 	.word	0x000186a0

0800093c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	@ 0x38
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2234      	movs	r2, #52	@ 0x34
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f011 faab 	bl	8011ea4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800094e:	4b39      	ldr	r3, [pc, #228]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000950:	4a39      	ldr	r2, [pc, #228]	@ (8000a38 <MX_LTDC_Init+0xfc>)
 8000952:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000954:	4b37      	ldr	r3, [pc, #220]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800095a:	4b36      	ldr	r3, [pc, #216]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000960:	4b34      	ldr	r3, [pc, #208]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000966:	4b33      	ldr	r3, [pc, #204]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800096c:	4b31      	ldr	r3, [pc, #196]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800096e:	2209      	movs	r2, #9
 8000970:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000972:	4b30      	ldr	r3, [pc, #192]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000974:	2201      	movs	r2, #1
 8000976:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000978:	4b2e      	ldr	r3, [pc, #184]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800097a:	221d      	movs	r2, #29
 800097c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800097e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000980:	2203      	movs	r2, #3
 8000982:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000984:	4b2b      	ldr	r3, [pc, #172]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000986:	f240 120d 	movw	r2, #269	@ 0x10d
 800098a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800098c:	4b29      	ldr	r3, [pc, #164]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800098e:	f240 1243 	movw	r2, #323	@ 0x143
 8000992:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000994:	4b27      	ldr	r3, [pc, #156]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000996:	f240 1217 	movw	r2, #279	@ 0x117
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800099e:	f240 1247 	movw	r2, #327	@ 0x147
 80009a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80009a4:	4b23      	ldr	r3, [pc, #140]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80009ac:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009bc:	481d      	ldr	r0, [pc, #116]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 80009be:	f009 facd 	bl	8009f5c <HAL_LTDC_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80009c8:	f002 f85a 	bl	8002a80 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80009d0:	23f0      	movs	r3, #240	@ 0xf0
 80009d2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80009d8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009dc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009de:	2302      	movs	r3, #2
 80009e0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80009e2:	23ff      	movs	r3, #255	@ 0xff
 80009e4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009ee:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009f0:	2307      	movs	r3, #7
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80009f4:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 80009fa:	23f0      	movs	r3, #240	@ 0xf0
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 80009fe:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a02:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000a1e:	f009 fc2f 	bl	800a280 <HAL_LTDC_ConfigLayer>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000a28:	f002 f82a 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	3738      	adds	r7, #56	@ 0x38
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200003a4 	.word	0x200003a4
 8000a38:	40016800 	.word	0x40016800

08000a3c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a42:	4a18      	ldr	r2, [pc, #96]	@ (8000aa4 <MX_SPI5_Init+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a4c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a6c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a70:	2218      	movs	r2, #24
 8000a72:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a88:	220a      	movs	r2, #10
 8000a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a8e:	f00a fd12 	bl	800b4b6 <HAL_SPI_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a98:	f001 fff2 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000044c 	.word	0x2000044c
 8000aa4:	40015000 	.word	0x40015000

08000aa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b44 <MX_TIM1_Init+0x9c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000acc:	22a7      	movs	r2, #167	@ 0xa7
 8000ace:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000adc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af0:	4813      	ldr	r0, [pc, #76]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000af2:	f00b fae7 	bl	800c0c4 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000afc:	f001 ffc0 	bl	8002a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000b0e:	f00b fc89 	bl	800c424 <HAL_TIM_ConfigClockSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b18:	f001 ffb2 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000b2a:	f00b feb1 	bl	800c890 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b34:	f001 ffa4 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200004a4 	.word	0x200004a4
 8000b44:	40010000 	.word	0x40010000

08000b48 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <MX_TIM10_Init+0x44>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1680-1;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b54:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000b58:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000b66:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b70:	2280      	movs	r2, #128	@ 0x80
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b76:	f00b faa5 	bl	800c0c4 <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000b80:	f001 ff7e 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200004ec 	.word	0x200004ec
 8000b8c:	40014400 	.word	0x40014400

08000b90 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <MX_UART5_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bc8:	f00b fef2 	bl	800c9b0 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f001 ff55 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000534 	.word	0x20000534
 8000be0:	40005000 	.word	0x40005000

08000be4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <MX_USART1_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c1c:	f00b fec8 	bl	800c9b0 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f001 ff2b 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000057c 	.word	0x2000057c
 8000c34:	40011000 	.word	0x40011000

08000c38 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
 8000c4c:	615a      	str	r2, [r3, #20]
 8000c4e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c52:	4a20      	ldr	r2, [pc, #128]	@ (8000cd4 <MX_FMC_Init+0x9c>)
 8000c54:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c64:	2204      	movs	r2, #4
 8000c66:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c6a:	2210      	movs	r2, #16
 8000c6c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c70:	2240      	movs	r2, #64	@ 0x40
 8000c72:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c76:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000c7a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c88:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000cba:	f00a fb6b 	bl	800b394 <HAL_SDRAM_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000cc4:	f001 fedc 	bl	8002a80 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200005c4 	.word	0x200005c4
 8000cd4:	a0000140 	.word	0xa0000140

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	@ 0x38
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
 8000cf2:	4b83      	ldr	r3, [pc, #524]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a82      	ldr	r2, [pc, #520]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b80      	ldr	r3, [pc, #512]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	623b      	str	r3, [r7, #32]
 8000d08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a7b      	ldr	r2, [pc, #492]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d14:	f043 0320 	orr.w	r3, r3, #32
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b79      	ldr	r3, [pc, #484]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0320 	and.w	r3, r3, #32
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	4b75      	ldr	r3, [pc, #468]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a74      	ldr	r2, [pc, #464]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b72      	ldr	r3, [pc, #456]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	4b6e      	ldr	r3, [pc, #440]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a6d      	ldr	r2, [pc, #436]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b6b      	ldr	r3, [pc, #428]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b67      	ldr	r3, [pc, #412]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a66      	ldr	r2, [pc, #408]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b64      	ldr	r3, [pc, #400]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b60      	ldr	r3, [pc, #384]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a5f      	ldr	r2, [pc, #380]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b59      	ldr	r3, [pc, #356]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a58      	ldr	r2, [pc, #352]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000da0:	f043 0310 	orr.w	r3, r3, #16
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b56      	ldr	r3, [pc, #344]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b52      	ldr	r3, [pc, #328]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a51      	ldr	r2, [pc, #324]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b4f      	ldr	r3, [pc, #316]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2116      	movs	r1, #22
 8000dd2:	484c      	ldr	r0, [pc, #304]	@ (8000f04 <MX_GPIO_Init+0x22c>)
 8000dd4:	f005 fe96 	bl	8006b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2180      	movs	r1, #128	@ 0x80
 8000ddc:	484a      	ldr	r0, [pc, #296]	@ (8000f08 <MX_GPIO_Init+0x230>)
 8000dde:	f005 fe91 	bl	8006b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000de8:	4848      	ldr	r0, [pc, #288]	@ (8000f0c <MX_GPIO_Init+0x234>)
 8000dea:	f005 fe8b 	bl	8006b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000df4:	4846      	ldr	r0, [pc, #280]	@ (8000f10 <MX_GPIO_Init+0x238>)
 8000df6:	f005 fe85 	bl	8006b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000dfa:	2316      	movs	r3, #22
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	483c      	ldr	r0, [pc, #240]	@ (8000f04 <MX_GPIO_Init+0x22c>)
 8000e12:	f005 fbbf 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000e16:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e1c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4836      	ldr	r0, [pc, #216]	@ (8000f08 <MX_GPIO_Init+0x230>)
 8000e2e:	f005 fbb1 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e32:	2380      	movs	r3, #128	@ 0x80
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	482f      	ldr	r0, [pc, #188]	@ (8000f08 <MX_GPIO_Init+0x230>)
 8000e4a:	f005 fba3 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e52:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4828      	ldr	r0, [pc, #160]	@ (8000f04 <MX_GPIO_Init+0x22c>)
 8000e64:	f005 fb96 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4826      	ldr	r0, [pc, #152]	@ (8000f14 <MX_GPIO_Init+0x23c>)
 8000e7c:	f005 fb8a 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000e80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	481d      	ldr	r0, [pc, #116]	@ (8000f0c <MX_GPIO_Init+0x234>)
 8000e96:	f005 fb7d 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e9a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4816      	ldr	r0, [pc, #88]	@ (8000f0c <MX_GPIO_Init+0x234>)
 8000eb4:	f005 fb6e 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000eb8:	2320      	movs	r3, #32
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480e      	ldr	r0, [pc, #56]	@ (8000f0c <MX_GPIO_Init+0x234>)
 8000ed4:	f005 fb5e 	bl	8006594 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ed8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <MX_GPIO_Init+0x238>)
 8000ef2:	f005 fb4f 	bl	8006594 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3738      	adds	r7, #56	@ 0x38
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020c00 	.word	0x40020c00
 8000f10:	40021800 	.word	0x40021800
 8000f14:	40020400 	.word	0x40020400

08000f18 <_write>:
void output_protocol(char line[MAX_LINES][MAX_LINE_LENGTH], int lines) {
	for (int i = 0; i < lines; i++) {
		printf("%s\n", line[i]);
	}
}
int _write(int file, char *ptr, int len) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <_write+0x28>)
 8000f30:	f00b fd8e 	bl	800ca50 <HAL_UART_Transmit>
	return len;
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000057c 	.word	0x2000057c

08000f44 <erase_sector>:
/**
 * @brief: Erase the memory from an entire sector
 * @param Sector: The sector number
 * @retval: none
 */
void erase_sector(uint32_t Sector) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();  // Unlock flash to enable erasing
 8000f4c:	f005 f962 	bl	8006214 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(sector_mapping(Sector), VOLTAGE_RANGE_3);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 fd1b 	bl	800298c <sector_mapping>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f005 facc 	bl	80064f8 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();  // Lock flash after erasing
 8000f60:	f005 f97a 	bl	8006258 <HAL_FLASH_Lock>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <write_to_flash>:
 * @param flash_address: address of string in flash memory that will be stored
 * @retval: none
 * Note: PLEASE UNLOCK AND LOCK FLASH BEFORE AND AFTER USING THIS FUNCTION,
 * IT DOES NOT DO IT ITSELF
 */
void write_to_flash(const char *data, uint32_t flash_address) {
 8000f6c:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();  // Unlock flash for writing

	for (uint8_t i = 0; i < strlen(data); i++) {
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e012      	b.n	8000fa4 <write_to_flash+0x38>
		//printf("%c", data[i]);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address + i, data[i]); // Write to flash
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	18d1      	adds	r1, r2, r3
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4698      	mov	r8, r3
 8000f92:	4691      	mov	r9, r2
 8000f94:	4642      	mov	r2, r8
 8000f96:	464b      	mov	r3, r9
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f005 f8e7 	bl	800616c <HAL_FLASH_Program>
	for (uint8_t i = 0; i < strlen(data); i++) {
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	7bfc      	ldrb	r4, [r7, #15]
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff f922 	bl	80001f0 <strlen>
 8000fac:	4603      	mov	r3, r0
 8000fae:	429c      	cmp	r4, r3
 8000fb0:	d3e5      	bcc.n	8000f7e <write_to_flash+0x12>
	}

	//HAL_FLASH_Lock();  // Lock flash after writing
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08000fbe <read_from_flash>:
 * @param flash_address: address of string in flash memory that will be read
 * @retval: failure if its reading trash from flash memory.
 * it literally does not read from flash btw if it detects 0xFF at the start
 * that means your output buffer will not be updated
 */
uint8_t read_from_flash(char *output, uint32_t flash_address) {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
	// Read byte by byte from flash memory, get a whole string in output variable
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e014      	b.n	8000ff8 <read_from_flash+0x3a>
		char key = *(char*) (flash_address + i);
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	73bb      	strb	r3, [r7, #14]
		//check if reading trash (0xFF) from flash memory
		if (key == 0xFF) {
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	2bff      	cmp	r3, #255	@ 0xff
 8000fdc:	d104      	bne.n	8000fe8 <read_from_flash+0x2a>
			if (i == 0) {
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d106      	bne.n	8000ff2 <read_from_flash+0x34>
				return 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e01b      	b.n	8001020 <read_from_flash+0x62>
			}
		} else {
			output[i] = key;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	7bba      	ldrb	r2, [r7, #14]
 8000ff0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	2b1f      	cmp	r3, #31
 8000ffc:	d9e7      	bls.n	8000fce <read_from_flash+0x10>
		}
	}
	output[strlen(output)] = '\0'; //add null to the end of string for printing
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff f8f6 	bl	80001f0 <strlen>
 8001004:	4602      	mov	r2, r0
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
	//printf("output is %s and strlen: %d\n", output, strlen(output));

	//error handling. G-codes are less than 32 chars, anything more is trash
	if (strlen(output) < MAX_LINE_LENGTH) {
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff f8ee 	bl	80001f0 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	2b1f      	cmp	r3, #31
 8001018:	d801      	bhi.n	800101e <read_from_flash+0x60>
		return 1;
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <read_from_flash+0x62>
	} else {
		return 0;
 800101e:	2300      	movs	r3, #0
	}

}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <storeProtocol>:
 * @param gcode_file: array of G-code commands
 * @param sector: which sector to store protocol in
 * @retval: failure if sector is "full"
 */
uint8_t storeProtocol(char new_protocol[MAX_LINES][MAX_LINE_LENGTH],
		uint32_t sector) {
 8001028:	b580      	push	{r7, lr}
 800102a:	f5ad 5d16 	sub.w	sp, sp, #9600	@ 0x2580
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8001036:	f2a3 539c 	subw	r3, r3, #1436	@ 0x59c
 800103a:	6018      	str	r0, [r3, #0]
 800103c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8001040:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 8001044:	6019      	str	r1, [r3, #0]

	//initialize variables
	int i = 0;  //protocol index
 8001046:	2300      	movs	r3, #0
 8001048:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800104c:	f102 021c 	add.w	r2, r2, #28
 8001050:	6013      	str	r3, [r2, #0]
	int j = 0;  //line index
 8001052:	2300      	movs	r3, #0
 8001054:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001058:	f102 0218 	add.w	r2, r2, #24
 800105c:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 800105e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8001062:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 8001066:	4618      	mov	r0, r3
 8001068:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800106c:	461a      	mov	r2, r3
 800106e:	2100      	movs	r1, #0
 8001070:	f010 ff18 	bl	8011ea4 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 8001074:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8001078:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f001 fc1d 	bl	80028bc <get_sector_address>
 8001082:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001086:	f103 0314 	add.w	r3, r3, #20
 800108a:	6018      	str	r0, [r3, #0]

	//check if all sectors are full before storing a protocol
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 800108c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8001090:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f000 f966 	bl	8001366 <get_num_protocols_in_sector>
 800109a:	4603      	mov	r3, r0
 800109c:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80010a0:	f102 0213 	add.w	r2, r2, #19
 80010a4:	7013      	strb	r3, [r2, #0]
	if (num_protocols == MAX_PROTOCOLS_IN_SECTOR) {
 80010a6:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80010aa:	f103 0313 	add.w	r3, r3, #19
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d101      	bne.n	80010b8 <storeProtocol+0x90>
		return 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e150      	b.n	800135a <storeProtocol+0x332>
	}

	//read existing protocols in sector and put into the temp protocol storage
	for (i = 0; i < num_protocols; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80010be:	f102 021c 	add.w	r2, r2, #28
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e05a      	b.n	800117c <storeProtocol+0x154>
		for (j = 0; j < MAX_LINES; j++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80010cc:	f102 0218 	add.w	r2, r2, #24
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e041      	b.n	8001158 <storeProtocol+0x130>
			//get the address for the current line in the current protocol
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80010d4:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80010d8:	f103 031c 	add.w	r3, r3, #28
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80010e2:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 80010e6:	461a      	mov	r2, r3
 80010e8:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80010ec:	f103 0318 	add.w	r3, r3, #24
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	015b      	lsls	r3, r3, #5
 80010f4:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80010f6:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80010fa:	f102 0214 	add.w	r2, r2, #20
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	4413      	add	r3, r2
 8001102:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001106:	f102 0208 	add.w	r2, r2, #8
 800110a:	6013      	str	r3, [r2, #0]
			//read lines from memory into buffer until you reach garbage
			read_from_flash(protocolStorage[i][j], temp_address); //only updates protocolStorage if its a valid line from memory
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	3b18      	subs	r3, #24
 8001112:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001116:	f102 021c 	add.w	r2, r2, #28
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	2164      	movs	r1, #100	@ 0x64
 800111e:	fb02 f101 	mul.w	r1, r2, r1
 8001122:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001126:	f102 0218 	add.w	r2, r2, #24
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	440a      	add	r2, r1
 800112e:	0152      	lsls	r2, r2, #5
 8001130:	4413      	add	r3, r2
 8001132:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001136:	f102 0208 	add.w	r2, r2, #8
 800113a:	6811      	ldr	r1, [r2, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff3e 	bl	8000fbe <read_from_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8001142:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001146:	f103 0318 	add.w	r3, r3, #24
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001152:	f102 0218 	add.w	r2, r2, #24
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800115c:	f103 0318 	add.w	r3, r3, #24
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b63      	cmp	r3, #99	@ 0x63
 8001164:	ddb6      	ble.n	80010d4 <storeProtocol+0xac>
	for (i = 0; i < num_protocols; i++) {
 8001166:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800116a:	f103 031c 	add.w	r3, r3, #28
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001176:	f102 021c 	add.w	r2, r2, #28
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001180:	f103 0313 	add.w	r3, r3, #19
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800118a:	f102 021c 	add.w	r2, r2, #28
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	db98      	blt.n	80010c6 <storeProtocol+0x9e>
	}
	//output: we now have the existing protocols in the buffer.
	//they only have their first number of lines in. the rest of lines are null

	//put the new protocol into the temp protocol storage
	for (j = 0; j < MAX_LINES; j++) {
 8001194:	2300      	movs	r3, #0
 8001196:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800119a:	f102 0218 	add.w	r2, r2, #24
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	e03b      	b.n	800121a <storeProtocol+0x1f2>
		//copy each line into the buffer from new protocol, should be null terminated from qr scanner
		if (new_protocol[j][0] != '\0') {
 80011a2:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80011a6:	f103 0318 	add.w	r3, r3, #24
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	015b      	lsls	r3, r3, #5
 80011ae:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 80011b2:	f2a2 529c 	subw	r2, r2, #1436	@ 0x59c
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	4413      	add	r3, r2
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d021      	beq.n	8001204 <storeProtocol+0x1dc>
			strcpy(protocolStorage[i][j], new_protocol[j]);
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	3b18      	subs	r3, #24
 80011c6:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80011ca:	f102 021c 	add.w	r2, r2, #28
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	2164      	movs	r1, #100	@ 0x64
 80011d2:	fb02 f101 	mul.w	r1, r2, r1
 80011d6:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80011da:	f102 0218 	add.w	r2, r2, #24
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	440a      	add	r2, r1
 80011e2:	0152      	lsls	r2, r2, #5
 80011e4:	1898      	adds	r0, r3, r2
 80011e6:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80011ea:	f103 0318 	add.w	r3, r3, #24
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	015b      	lsls	r3, r3, #5
 80011f2:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 80011f6:	f2a2 529c 	subw	r2, r2, #1436	@ 0x59c
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	4413      	add	r3, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f010 fedb 	bl	8011fba <strcpy>
	for (j = 0; j < MAX_LINES; j++) {
 8001204:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001208:	f103 0318 	add.w	r3, r3, #24
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001214:	f102 0218 	add.w	r2, r2, #24
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800121e:	f103 0318 	add.w	r3, r3, #24
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b63      	cmp	r3, #99	@ 0x63
 8001226:	ddbc      	ble.n	80011a2 <storeProtocol+0x17a>
	}
	//we now have the new protocol in the buffer.
	//it only has the first number of lines in. the rest of lines are null

	//write existing protocols and new protocol to flash memory, string-by-string
	erase_sector(sector); //erase sector before writing
 8001228:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 800122c:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	f7ff fe87 	bl	8000f44 <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 8001236:	f004 ffed 	bl	8006214 <HAL_FLASH_Unlock>
	for (i = 0; i < (num_protocols + 1); i++) {
 800123a:	2300      	movs	r3, #0
 800123c:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001240:	f102 021c 	add.w	r2, r2, #28
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e078      	b.n	800133a <storeProtocol+0x312>
		for (j = 0; j < MAX_LINES; j++) {
 8001248:	2300      	movs	r3, #0
 800124a:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800124e:	f102 0218 	add.w	r2, r2, #24
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e05f      	b.n	8001316 <storeProtocol+0x2ee>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			if ((new_protocol[j][0] != '\0') && (new_protocol[j][0] != 0xFF)) {
 8001256:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800125a:	f103 0318 	add.w	r3, r3, #24
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	015b      	lsls	r3, r3, #5
 8001262:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 8001266:	f2a2 529c 	subw	r2, r2, #1436	@ 0x59c
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d045      	beq.n	8001300 <storeProtocol+0x2d8>
 8001274:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001278:	f103 0318 	add.w	r3, r3, #24
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	015b      	lsls	r3, r3, #5
 8001280:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 8001284:	f2a2 529c 	subw	r2, r2, #1436	@ 0x59c
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2bff      	cmp	r3, #255	@ 0xff
 8001290:	d036      	beq.n	8001300 <storeProtocol+0x2d8>
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8001292:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001296:	f103 031c 	add.w	r3, r3, #28
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80012a0:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 80012a4:	461a      	mov	r2, r3
 80012a6:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80012aa:	f103 0318 	add.w	r3, r3, #24
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	015b      	lsls	r3, r3, #5
 80012b2:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80012b4:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80012b8:	f102 0214 	add.w	r2, r2, #20
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80012c4:	f102 020c 	add.w	r2, r2, #12
 80012c8:	6013      	str	r3, [r2, #0]
				//printf("len: %d and data: %s", strlen(protocolStorage[i][j]), protocolStorage[i][j]);
				write_to_flash(protocolStorage[i][j], temp_address);
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	3b18      	subs	r3, #24
 80012d0:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80012d4:	f102 021c 	add.w	r2, r2, #28
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	2164      	movs	r1, #100	@ 0x64
 80012dc:	fb02 f101 	mul.w	r1, r2, r1
 80012e0:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80012e4:	f102 0218 	add.w	r2, r2, #24
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	440a      	add	r2, r1
 80012ec:	0152      	lsls	r2, r2, #5
 80012ee:	4413      	add	r3, r2
 80012f0:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80012f4:	f102 020c 	add.w	r2, r2, #12
 80012f8:	6811      	ldr	r1, [r2, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fe36 	bl	8000f6c <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8001300:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001304:	f103 0318 	add.w	r3, r3, #24
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001310:	f102 0218 	add.w	r2, r2, #24
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800131a:	f103 0318 	add.w	r3, r3, #24
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b63      	cmp	r3, #99	@ 0x63
 8001322:	dd98      	ble.n	8001256 <storeProtocol+0x22e>
	for (i = 0; i < (num_protocols + 1); i++) {
 8001324:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001328:	f103 031c 	add.w	r3, r3, #28
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001334:	f102 021c 	add.w	r2, r2, #28
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800133e:	f103 0313 	add.w	r3, r3, #19
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001348:	f102 021c 	add.w	r2, r2, #28
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	f77f af7a 	ble.w	8001248 <storeProtocol+0x220>
			}
		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 8001354:	f004 ff80 	bl	8006258 <HAL_FLASH_Lock>

	//output:flash memory now has the lines of protocol storage in there
	//the remaining space is still 0xFF in flash
	return 1;
 8001358:	2301      	movs	r3, #1
}
 800135a:	4618      	mov	r0, r3
 800135c:	f507 5716 	add.w	r7, r7, #9600	@ 0x2580
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <get_num_protocols_in_sector>:

//return number of protocols in the sector
//NOTE: it doesnt actually do that. it checks the top of the sector first
//if there is no protocol there. it will just assume the rest is empty.
uint8_t get_num_protocols_in_sector(uint32_t sector) {
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	uint32_t flash_address = get_sector_address(sector);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f001 faa4 	bl	80028bc <get_sector_address>
 8001374:	6138      	str	r0, [r7, #16]

	uint8_t i = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
 800137e:	e011      	b.n	80013a4 <get_num_protocols_in_sector+0x3e>
		uint8_t first_char = *(uint8_t*) (flash_address + i * PROTOCOL_SIZE);
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	461a      	mov	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	73fb      	strb	r3, [r7, #15]
		//memory in flash is default 0xFF
		if (first_char == 0xFF) {
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2bff      	cmp	r3, #255	@ 0xff
 8001398:	d101      	bne.n	800139e <get_num_protocols_in_sector+0x38>
			return i;
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	e006      	b.n	80013ac <get_num_protocols_in_sector+0x46>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	3301      	adds	r3, #1
 80013a2:	75fb      	strb	r3, [r7, #23]
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d9ea      	bls.n	8001380 <get_num_protocols_in_sector+0x1a>
		}
	}
	return i;
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <getFreeSector>:

//check each sector sequentially for any space.
//return the first sector number you find that has space
uint8_t getFreeSector(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
	uint8_t i = 1;
 80013ba:	2301      	movs	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
	//check every sector starting at 1
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 80013be:	2301      	movs	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	e01f      	b.n	8001404 <getFreeSector+0x50>
		//check each potential protocol slot in the current sector
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	73bb      	strb	r3, [r7, #14]
 80013c8:	e016      	b.n	80013f8 <getFreeSector+0x44>
			//check first char of the given protocol in the current sector
			uint32_t flash_address = get_sector_address(i) + j * PROTOCOL_SIZE;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 fa75 	bl	80028bc <get_sector_address>
 80013d2:	4602      	mov	r2, r0
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	4413      	add	r3, r2
 80013e0:	60bb      	str	r3, [r7, #8]
			char first_char = *(char*) (flash_address);
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
			//if memory address is empty, this sector is free
			if (first_char == 0xFF) {
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	2bff      	cmp	r3, #255	@ 0xff
 80013ec:	d101      	bne.n	80013f2 <getFreeSector+0x3e>
				return i;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	e00e      	b.n	8001410 <getFreeSector+0x5c>
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 80013f2:	7bbb      	ldrb	r3, [r7, #14]
 80013f4:	3301      	adds	r3, #1
 80013f6:	73bb      	strb	r3, [r7, #14]
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d9e5      	bls.n	80013ca <getFreeSector+0x16>
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	3301      	adds	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b0e      	cmp	r3, #14
 8001408:	d9dc      	bls.n	80013c4 <getFreeSector+0x10>
			}
		}
	}
	//if somehow all sectors are full, return 15 or higher (16 in this case)
	return i + 1;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	3301      	adds	r3, #1
 800140e:	b2db      	uxtb	r3, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <transmitProtocol>:

/**
 * @brief: Transmit protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 */
void transmitProtocol(uint32_t sector, uint32_t offset) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	@ 0x30
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	615a      	str	r2, [r3, #20]
 8001438:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f001 fa3e 	bl	80028bc <get_sector_address>
 8001440:	4602      	mov	r2, r0
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001448:	fb01 f303 	mul.w	r3, r1, r3
 800144c:	4413      	add	r3, r2
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28

	//printf("\nNew Protocol\n"); //just for debugging

	//we need to process up to 1028 G-code commands
	//but if we run into an invalid string, gcode file is over
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8001450:	2300      	movs	r3, #0
 8001452:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001456:	e028      	b.n	80014aa <transmitProtocol+0x92>
		//an alternative to resetting the temp buffer is to only read up to newline
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	2220      	movs	r2, #32
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f010 fd1f 	bl	8011ea4 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 8001466:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800146a:	015b      	lsls	r3, r3, #5
 800146c:	461a      	mov	r2, r3
 800146e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001470:	441a      	add	r2, r3
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fda0 	bl	8000fbe <read_from_flash>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00d      	beq.n	80014a0 <transmitProtocol+0x88>
			//printf("%s", output);
//			HAL_UART_Transmit(&huart1, (uint8_t*) output, strlen(output),
//					HAL_MAX_DELAY);
			HAL_UART_Transmit(&huart5, (uint8_t*) output, strlen(output),
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe feb1 	bl	80001f0 <strlen>
 800148e:	4603      	mov	r3, r0
 8001490:	b29a      	uxth	r2, r3
 8001492:	f107 0108 	add.w	r1, r7, #8
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	4808      	ldr	r0, [pc, #32]	@ (80014bc <transmitProtocol+0xa4>)
 800149c:	f00b fad8 	bl	800ca50 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80014a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014a4:	3301      	adds	r3, #1
 80014a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80014aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014ae:	2b63      	cmp	r3, #99	@ 0x63
 80014b0:	d9d2      	bls.n	8001458 <transmitProtocol+0x40>
								HAL_MAX_DELAY);
		}
	}
}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	@ 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000534 	.word	0x20000534

080014c0 <queueProtocol>:

/**
 * @brief: Queue protocol from flash memory to RAM buffer
 * @param sector: which sector the protocol is stored in
 */
void queueProtocol(uint32_t sector, uint32_t offset) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	@ 0x30
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f001 f9ea 	bl	80028bc <get_sector_address>
 80014e8:	4602      	mov	r2, r0
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80014f0:	fb01 f303 	mul.w	r3, r1, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80014f8:	2300      	movs	r3, #0
 80014fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80014fe:	e02c      	b.n	800155a <queueProtocol+0x9a>
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	2220      	movs	r2, #32
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f010 fccb 	bl	8011ea4 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 800150e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001512:	015b      	lsls	r3, r3, #5
 8001514:	461a      	mov	r2, r3
 8001516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001518:	441a      	add	r2, r3
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fd4c 	bl	8000fbe <read_from_flash>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d011      	beq.n	8001550 <queueProtocol+0x90>
			strcpy(queueBuffer[queueSize][i], output);
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <queueProtocol+0xac>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001536:	2264      	movs	r2, #100	@ 0x64
 8001538:	fb01 f202 	mul.w	r2, r1, r2
 800153c:	4413      	add	r3, r2
 800153e:	015b      	lsls	r3, r3, #5
 8001540:	4a0b      	ldr	r2, [pc, #44]	@ (8001570 <queueProtocol+0xb0>)
 8001542:	4413      	add	r3, r2
 8001544:	f107 0208 	add.w	r2, r7, #8
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f010 fd35 	bl	8011fba <strcpy>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8001550:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001554:	3301      	adds	r3, #1
 8001556:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800155a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800155e:	2b63      	cmp	r3, #99	@ 0x63
 8001560:	d9ce      	bls.n	8001500 <queueProtocol+0x40>
		}
	}
}
 8001562:	bf00      	nop
 8001564:	bf00      	nop
 8001566:	3730      	adds	r7, #48	@ 0x30
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20008310 	.word	0x20008310
 8001570:	20000610 	.word	0x20000610

08001574 <transmitQueuedProtocols>:

/**
 * @brief: Transmit queued protocols from RAM buffer to ESP32 via UART string-by-string
 * @param queueSize:
 */
void transmitQueuedProtocols(uint8_t queueSize) {
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < queueSize; i++) {
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	e028      	b.n	80015d6 <transmitQueuedProtocols+0x62>
		for (uint8_t j = 0; j < MAX_LINES; j++) {
 8001584:	2300      	movs	r3, #0
 8001586:	73bb      	strb	r3, [r7, #14]
 8001588:	e01f      	b.n	80015ca <transmitQueuedProtocols+0x56>
			HAL_UART_Transmit(&huart1, (uint8_t*) queueBuffer[i][j],
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	2164      	movs	r1, #100	@ 0x64
 8001590:	fb01 f202 	mul.w	r2, r1, r2
 8001594:	4413      	add	r3, r2
 8001596:	015b      	lsls	r3, r3, #5
 8001598:	4a13      	ldr	r2, [pc, #76]	@ (80015e8 <transmitQueuedProtocols+0x74>)
 800159a:	189c      	adds	r4, r3, r2
					strlen(queueBuffer[i][j]), HAL_MAX_DELAY);
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	7bbb      	ldrb	r3, [r7, #14]
 80015a0:	2164      	movs	r1, #100	@ 0x64
 80015a2:	fb01 f202 	mul.w	r2, r1, r2
 80015a6:	4413      	add	r3, r2
 80015a8:	015b      	lsls	r3, r3, #5
 80015aa:	4a0f      	ldr	r2, [pc, #60]	@ (80015e8 <transmitQueuedProtocols+0x74>)
 80015ac:	4413      	add	r3, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe fe1e 	bl	80001f0 <strlen>
 80015b4:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) queueBuffer[i][j],
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
 80015bc:	4621      	mov	r1, r4
 80015be:	480b      	ldr	r0, [pc, #44]	@ (80015ec <transmitQueuedProtocols+0x78>)
 80015c0:	f00b fa46 	bl	800ca50 <HAL_UART_Transmit>
		for (uint8_t j = 0; j < MAX_LINES; j++) {
 80015c4:	7bbb      	ldrb	r3, [r7, #14]
 80015c6:	3301      	adds	r3, #1
 80015c8:	73bb      	strb	r3, [r7, #14]
 80015ca:	7bbb      	ldrb	r3, [r7, #14]
 80015cc:	2b63      	cmp	r3, #99	@ 0x63
 80015ce:	d9dc      	bls.n	800158a <transmitQueuedProtocols+0x16>
	for (uint8_t i = 0; i < queueSize; i++) {
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	3301      	adds	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d3d2      	bcc.n	8001584 <transmitQueuedProtocols+0x10>
		}
	}
}
 80015de:	bf00      	nop
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd90      	pop	{r4, r7, pc}
 80015e8:	20000610 	.word	0x20000610
 80015ec:	2000057c 	.word	0x2000057c

080015f0 <deleteProtocol>:
 * @brief: Delete protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 * @param offset: the exact slot in the sector the protocol is stored in
 * @retval: none
 */
void deleteProtocol(uint32_t sector, uint32_t offset) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	f5ad 5d17 	sub.w	sp, sp, #9664	@ 0x25c0
 80015f6:	b08c      	sub	sp, #48	@ 0x30
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 80015fe:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 8001602:	6018      	str	r0, [r3, #0]
 8001604:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 8001608:	f5a3 63be 	sub.w	r3, r3, #1520	@ 0x5f0
 800160c:	6019      	str	r1, [r3, #0]
	//initialize variables
	uint8_t new_offset = offset + 1; //have it range from 1-3
 800160e:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 8001612:	f5a3 63be 	sub.w	r3, r3, #1520	@ 0x5f0
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	3301      	adds	r3, #1
 800161c:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001620:	f102 021f 	add.w	r2, r2, #31
 8001624:	7013      	strb	r3, [r2, #0]
	int i = 0; int j = 0; //indices for moving through flash memory
 8001626:	2300      	movs	r3, #0
 8001628:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 800162c:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	2300      	movs	r3, #0
 8001634:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001638:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800163c:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 800163e:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 8001642:	f2a3 53a4 	subw	r3, r3, #1444	@ 0x5a4
 8001646:	4618      	mov	r0, r3
 8001648:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800164c:	461a      	mov	r2, r3
 800164e:	2100      	movs	r1, #0
 8001650:	f010 fc28 	bl	8011ea4 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 8001654:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 8001658:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	f001 f92d 	bl	80028bc <get_sector_address>
 8001662:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001666:	f103 0318 	add.w	r3, r3, #24
 800166a:	6018      	str	r0, [r3, #0]
	char trashLine[MAX_LINE_LENGTH];
	memset(trashLine, 0xFF, sizeof(trashLine));
 800166c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001670:	3b04      	subs	r3, #4
 8001672:	2220      	movs	r2, #32
 8001674:	21ff      	movs	r1, #255	@ 0xff
 8001676:	4618      	mov	r0, r3
 8001678:	f010 fc14 	bl	8011ea4 <memset>
	char nullLine[MAX_LINE_LENGTH];
	memset(nullLine, 0x00, sizeof(nullLine));
 800167c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001680:	3b24      	subs	r3, #36	@ 0x24
 8001682:	2220      	movs	r2, #32
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f010 fc0c 	bl	8011ea4 <memset>
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 800168c:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 8001690:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	f7ff fe66 	bl	8001366 <get_num_protocols_in_sector>
 800169a:	4603      	mov	r3, r0
 800169c:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80016a0:	f102 0217 	add.w	r2, r2, #23
 80016a4:	7013      	strb	r3, [r2, #0]

	int a=0; int b=0; //separate indices for protocolstorage
 80016a6:	2300      	movs	r3, #0
 80016a8:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80016ac:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80016b8:	f102 0220 	add.w	r2, r2, #32
 80016bc:	6013      	str	r3, [r2, #0]

	//copy all protocols in sector to local buffer
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80016be:	2300      	movs	r3, #0
 80016c0:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80016c4:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e082      	b.n	80017d2 <deleteProtocol+0x1e2>
		if (i != offset) {
 80016cc:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 80016d0:	f5a3 63be 	sub.w	r3, r3, #1520	@ 0x5f0
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80016da:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d06b      	beq.n	80017bc <deleteProtocol+0x1cc>
			//copy all lines of the protocol into the buffer
			for (j = 0; j < MAX_LINES; j++) {
 80016e4:	2300      	movs	r3, #0
 80016e6:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80016ea:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e04c      	b.n	800178c <deleteProtocol+0x19c>
				//get the address for the current line in the current protocol
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80016f2:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80016f6:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001700:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 8001704:	461a      	mov	r2, r3
 8001706:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 800170a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	015b      	lsls	r3, r3, #5
 8001712:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8001714:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001718:	f102 0218 	add.w	r2, r2, #24
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	4413      	add	r3, r2
 8001720:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001724:	f102 020c 	add.w	r2, r2, #12
 8001728:	6013      	str	r3, [r2, #0]
				//read lines from memory into buffer until you reach garbage
				read_from_flash(protocolStorage[a][b], temp_address); //only updates protocolStorage if its a valid line from memory
 800172a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800172e:	3b24      	subs	r3, #36	@ 0x24
 8001730:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001734:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	2164      	movs	r1, #100	@ 0x64
 800173c:	fb02 f101 	mul.w	r1, r2, r1
 8001740:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001744:	f102 0220 	add.w	r2, r2, #32
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	440a      	add	r2, r1
 800174c:	0152      	lsls	r2, r2, #5
 800174e:	4413      	add	r3, r2
 8001750:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001754:	f102 020c 	add.w	r2, r2, #12
 8001758:	6811      	ldr	r1, [r2, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fc2f 	bl	8000fbe <read_from_flash>
				b++;
 8001760:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001764:	f103 0320 	add.w	r3, r3, #32
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001770:	f102 0220 	add.w	r2, r2, #32
 8001774:	6013      	str	r3, [r2, #0]
			for (j = 0; j < MAX_LINES; j++) {
 8001776:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 800177a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001786:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001790:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b63      	cmp	r3, #99	@ 0x63
 8001798:	ddab      	ble.n	80016f2 <deleteProtocol+0x102>
			}
			a++;
 800179a:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 800179e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80017aa:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80017ae:	6013      	str	r3, [r2, #0]
			b = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80017b6:	f102 0220 	add.w	r2, r2, #32
 80017ba:	6013      	str	r3, [r2, #0]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80017bc:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80017c0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80017cc:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80017d6:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	f77f af75 	ble.w	80016cc <deleteProtocol+0xdc>
		}
	}


	//write existing protocols except the one to be deleted back to flash
	erase_sector(sector); //erase sector before writing
 80017e2:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 80017e6:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	f7ff fbaa 	bl	8000f44 <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 80017f0:	f004 fd10 	bl	8006214 <HAL_FLASH_Unlock>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80017fa:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e05a      	b.n	80018b8 <deleteProtocol+0x2c8>
		for (j = 0; j < MAX_LINES; j++) {
 8001802:	2300      	movs	r3, #0
 8001804:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001808:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e041      	b.n	8001894 <deleteProtocol+0x2a4>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8001810:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001814:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800181e:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 8001822:	461a      	mov	r2, r3
 8001824:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001828:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	015b      	lsls	r3, r3, #5
 8001830:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8001832:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001836:	f102 0218 	add.w	r2, r2, #24
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	4413      	add	r3, r2
 800183e:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001842:	f102 0210 	add.w	r2, r2, #16
 8001846:	6013      	str	r3, [r2, #0]
				write_to_flash(protocolStorage[i][j], temp_address);
 8001848:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800184c:	3b24      	subs	r3, #36	@ 0x24
 800184e:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001852:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	2164      	movs	r1, #100	@ 0x64
 800185a:	fb02 f101 	mul.w	r1, r2, r1
 800185e:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001862:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	440a      	add	r2, r1
 800186a:	0152      	lsls	r2, r2, #5
 800186c:	4413      	add	r3, r2
 800186e:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001872:	f102 0210 	add.w	r2, r2, #16
 8001876:	6811      	ldr	r1, [r2, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fb77 	bl	8000f6c <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 800187e:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001882:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3301      	adds	r3, #1
 800188a:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 800188e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001898:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b63      	cmp	r3, #99	@ 0x63
 80018a0:	ddb6      	ble.n	8001810 <deleteProtocol+0x220>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80018a2:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80018a6:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80018b2:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80018bc:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	dd9d      	ble.n	8001802 <deleteProtocol+0x212>
//					write_to_flash(protocolStorage[i][j], temp_address);
//				}

		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 80018c6:	f004 fcc7 	bl	8006258 <HAL_FLASH_Lock>
}
 80018ca:	bf00      	nop
 80018cc:	f507 5717 	add.w	r7, r7, #9664	@ 0x25c0
 80018d0:	3730      	adds	r7, #48	@ 0x30
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <Touch_Init>:
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, number);
}

/******************** Touchscreen *********************/

void Touch_Init(void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	if (BSP_TS_Init(240, 320) != TS_OK) {
 80018dc:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80018e0:	20f0      	movs	r0, #240	@ 0xf0
 80018e2:	f003 fc99 	bl	8005218 <BSP_TS_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d009      	beq.n	8001900 <Touch_Init+0x28>
		BSP_LCD_DisplayStringAt(0, 10, (uint8_t*) "Failure", CENTER_MODE);
 80018ec:	2301      	movs	r3, #1
 80018ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <Touch_Init+0x40>)
 80018f0:	210a      	movs	r1, #10
 80018f2:	2000      	movs	r0, #0
 80018f4:	f002 ffc0 	bl	8004878 <BSP_LCD_DisplayStringAt>
		printf("Touchscreen Initialization failure\n");
 80018f8:	4808      	ldr	r0, [pc, #32]	@ (800191c <Touch_Init+0x44>)
 80018fa:	f010 f9d3 	bl	8011ca4 <puts>
	} else {
		BSP_LCD_DisplayStringAt(0, 300, (uint8_t*) "Success", CENTER_MODE);
		printf("Touchscreen Initialization success\n");
	}
}
 80018fe:	e009      	b.n	8001914 <Touch_Init+0x3c>
		BSP_LCD_DisplayStringAt(0, 300, (uint8_t*) "Success", CENTER_MODE);
 8001900:	2301      	movs	r3, #1
 8001902:	4a07      	ldr	r2, [pc, #28]	@ (8001920 <Touch_Init+0x48>)
 8001904:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001908:	2000      	movs	r0, #0
 800190a:	f002 ffb5 	bl	8004878 <BSP_LCD_DisplayStringAt>
		printf("Touchscreen Initialization success\n");
 800190e:	4805      	ldr	r0, [pc, #20]	@ (8001924 <Touch_Init+0x4c>)
 8001910:	f010 f9c8 	bl	8011ca4 <puts>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	08012c88 	.word	0x08012c88
 800191c:	08012c90 	.word	0x08012c90
 8001920:	08012cb4 	.word	0x08012cb4
 8001924:	08012cbc 	.word	0x08012cbc

08001928 <DrawMainPage>:
/**
 * @brief: Draw main page and handle button label and status updates
 * @param: page_num: determines which page should be drawn from 1-10
 * @retval: none
 */
void DrawMainPage(uint8_t page_num) {
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b0a6      	sub	sp, #152	@ 0x98
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	//Draw "Protocol Title" box
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001932:	f04f 30ff 	mov.w	r0, #4294967295
 8001936:	f002 ff33 	bl	80047a0 <BSP_LCD_Clear>
	char empty[20] = "Empty\n"; //strings from flash memory come with newline at end
 800193a:	4a66      	ldr	r2, [pc, #408]	@ (8001ad4 <DrawMainPage+0x1ac>)
 800193c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001940:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001944:	6018      	str	r0, [r3, #0]
 8001946:	3304      	adds	r3, #4
 8001948:	8019      	strh	r1, [r3, #0]
 800194a:	3302      	adds	r3, #2
 800194c:	0c0a      	lsrs	r2, r1, #16
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	f107 0387 	add.w	r3, r7, #135	@ 0x87
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	731a      	strb	r2, [r3, #12]
	char pageTitle[20] = "";
 800195e:	2300      	movs	r3, #0
 8001960:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001962:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Page %d", page_num);
 8001970:	79fa      	ldrb	r2, [r7, #7]
 8001972:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001976:	4958      	ldr	r1, [pc, #352]	@ (8001ad8 <DrawMainPage+0x1b0>)
 8001978:	4618      	mov	r0, r3
 800197a:	f010 f99b 	bl	8011cb4 <siprintf>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800197e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001982:	f002 fec1 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 8001986:	4855      	ldr	r0, [pc, #340]	@ (8001adc <DrawMainPage+0x1b4>)
 8001988:	f002 fef0 	bl	800476c <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800198c:	4854      	ldr	r0, [pc, #336]	@ (8001ae0 <DrawMainPage+0x1b8>)
 800198e:	f002 fed3 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) pageTitle, CENTER_MODE);
 8001992:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001996:	2301      	movs	r3, #1
 8001998:	210a      	movs	r1, #10
 800199a:	200a      	movs	r0, #10
 800199c:	f002 ff6c 	bl	8004878 <BSP_LCD_DisplayStringAt>

	//get button label info from flash memory
	char readBuffer1[MAX_LINE_LENGTH] = ""; //initialize with nulls
 80019a0:	2300      	movs	r3, #0
 80019a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
 80019b4:	615a      	str	r2, [r3, #20]
 80019b6:	619a      	str	r2, [r3, #24]
	char readBuffer2[MAX_LINE_LENGTH] = ""; //initialize with nulls
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	615a      	str	r2, [r3, #20]
 80019ce:	619a      	str	r2, [r3, #24]
	char readBuffer3[MAX_LINE_LENGTH] = ""; //initialize with nulls
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	615a      	str	r2, [r3, #20]
 80019e6:	619a      	str	r2, [r3, #24]

	//if the protocol exists, read from it. else, name it empty
	if (read_from_flash(readBuffer1, get_sector_address(page_num))) {
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 ff66 	bl	80028bc <get_sector_address>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fae0 	bl	8000fbe <read_from_flash>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00a      	beq.n	8001a1a <DrawMainPage+0xf2>
		strcpy(buttons[0].label, readBuffer1);
 8001a04:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4836      	ldr	r0, [pc, #216]	@ (8001ae4 <DrawMainPage+0x1bc>)
 8001a0c:	f010 fad5 	bl	8011fba <strcpy>
		buttons[0].status = NOT_EMPTY;
 8001a10:	4b35      	ldr	r3, [pc, #212]	@ (8001ae8 <DrawMainPage+0x1c0>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001a18:	e009      	b.n	8001a2e <DrawMainPage+0x106>
	} else {
		strcpy(buttons[0].label, empty);
 8001a1a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4830      	ldr	r0, [pc, #192]	@ (8001ae4 <DrawMainPage+0x1bc>)
 8001a22:	f010 faca 	bl	8011fba <strcpy>
		buttons[0].status = EMPTY;
 8001a26:	4b30      	ldr	r3, [pc, #192]	@ (8001ae8 <DrawMainPage+0x1c0>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	if (read_from_flash(readBuffer2,
			get_sector_address(page_num) + PROTOCOL_SIZE)) {
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 ff43 	bl	80028bc <get_sector_address>
 8001a36:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer2,
 8001a38:	f603 32b8 	addw	r2, r3, #3000	@ 0xbb8
 8001a3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fabb 	bl	8000fbe <read_from_flash>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00a      	beq.n	8001a64 <DrawMainPage+0x13c>
		strcpy(buttons[1].label, readBuffer2);
 8001a4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a52:	4619      	mov	r1, r3
 8001a54:	4825      	ldr	r0, [pc, #148]	@ (8001aec <DrawMainPage+0x1c4>)
 8001a56:	f010 fab0 	bl	8011fba <strcpy>
		buttons[1].status = NOT_EMPTY;
 8001a5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <DrawMainPage+0x1c0>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8001a62:	e009      	b.n	8001a78 <DrawMainPage+0x150>
	} else {
		strcpy(buttons[1].label, empty);
 8001a64:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4820      	ldr	r0, [pc, #128]	@ (8001aec <DrawMainPage+0x1c4>)
 8001a6c:	f010 faa5 	bl	8011fba <strcpy>
		buttons[1].status = EMPTY;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <DrawMainPage+0x1c0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	}
	if (read_from_flash(readBuffer3,
			get_sector_address(page_num) + 2 * PROTOCOL_SIZE)) {
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 ff1e 	bl	80028bc <get_sector_address>
 8001a80:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer3,
 8001a82:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8001a86:	3310      	adds	r3, #16
 8001a88:	f107 020c 	add.w	r2, r7, #12
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4610      	mov	r0, r2
 8001a90:	f7ff fa95 	bl	8000fbe <read_from_flash>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00a      	beq.n	8001ab0 <DrawMainPage+0x188>
		strcpy(buttons[2].label, readBuffer3);
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4813      	ldr	r0, [pc, #76]	@ (8001af0 <DrawMainPage+0x1c8>)
 8001aa2:	f010 fa8a 	bl	8011fba <strcpy>
		buttons[2].status = NOT_EMPTY;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <DrawMainPage+0x1c0>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8001aae:	e009      	b.n	8001ac4 <DrawMainPage+0x19c>
	} else {
		strcpy(buttons[2].label, empty);
 8001ab0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480e      	ldr	r0, [pc, #56]	@ (8001af0 <DrawMainPage+0x1c8>)
 8001ab8:	f010 fa7f 	bl	8011fba <strcpy>
		buttons[2].status = EMPTY;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <DrawMainPage+0x1c0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	}

	// Draw buttons
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001ac4:	480b      	ldr	r0, [pc, #44]	@ (8001af4 <DrawMainPage+0x1cc>)
 8001ac6:	f002 fe1f 	bl	8004708 <BSP_LCD_SetTextColor>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001ad0:	e07e      	b.n	8001bd0 <DrawMainPage+0x2a8>
 8001ad2:	bf00      	nop
 8001ad4:	08012ce8 	.word	0x08012ce8
 8001ad8:	08012ce0 	.word	0x08012ce0
 8001adc:	20000254 	.word	0x20000254
 8001ae0:	ffff0000 	.word	0xffff0000
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000032 	.word	0x20000032
 8001af0:	2000005c 	.word	0x2000005c
 8001af4:	ff0000ff 	.word	0xff0000ff
		BSP_LCD_FillRect(buttons[i].x, buttons[i].y, buttons[i].w,
 8001af8:	4a6f      	ldr	r2, [pc, #444]	@ (8001cb8 <DrawMainPage+0x390>)
 8001afa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001afe:	212a      	movs	r1, #42	@ 0x2a
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	8818      	ldrh	r0, [r3, #0]
 8001b08:	4a6b      	ldr	r2, [pc, #428]	@ (8001cb8 <DrawMainPage+0x390>)
 8001b0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b0e:	212a      	movs	r1, #42	@ 0x2a
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	3302      	adds	r3, #2
 8001b18:	8819      	ldrh	r1, [r3, #0]
 8001b1a:	4a67      	ldr	r2, [pc, #412]	@ (8001cb8 <DrawMainPage+0x390>)
 8001b1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b20:	242a      	movs	r4, #42	@ 0x2a
 8001b22:	fb04 f303 	mul.w	r3, r4, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	3304      	adds	r3, #4
 8001b2a:	881a      	ldrh	r2, [r3, #0]
 8001b2c:	4c62      	ldr	r4, [pc, #392]	@ (8001cb8 <DrawMainPage+0x390>)
 8001b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b32:	252a      	movs	r5, #42	@ 0x2a
 8001b34:	fb05 f303 	mul.w	r3, r5, r3
 8001b38:	4423      	add	r3, r4
 8001b3a:	3306      	adds	r3, #6
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	f002 ff59 	bl	80049f4 <BSP_LCD_FillRect>
				buttons[i].h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001b42:	f04f 30ff 	mov.w	r0, #4294967295
 8001b46:	f002 fddf 	bl	8004708 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001b4a:	485c      	ldr	r0, [pc, #368]	@ (8001cbc <DrawMainPage+0x394>)
 8001b4c:	f002 fdf4 	bl	8004738 <BSP_LCD_SetBackColor>
		if (buttons[i].label[10] == NEWLINE_CHAR) {
		}
		buttons[i].label[strlen(buttons[i].label) - 1] = ' '; //dont display null terminator
 8001b50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b54:	222a      	movs	r2, #42	@ 0x2a
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	4a56      	ldr	r2, [pc, #344]	@ (8001cb8 <DrawMainPage+0x390>)
 8001b5e:	4413      	add	r3, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fb45 	bl	80001f0 <strlen>
 8001b66:	4603      	mov	r3, r0
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	4953      	ldr	r1, [pc, #332]	@ (8001cb8 <DrawMainPage+0x390>)
 8001b6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b70:	202a      	movs	r0, #42	@ 0x2a
 8001b72:	fb00 f202 	mul.w	r2, r0, r2
 8001b76:	440a      	add	r2, r1
 8001b78:	4413      	add	r3, r2
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	701a      	strb	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(buttons[i].x + 10, buttons[i].y + 10,
 8001b80:	4a4d      	ldr	r2, [pc, #308]	@ (8001cb8 <DrawMainPage+0x390>)
 8001b82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b86:	212a      	movs	r1, #42	@ 0x2a
 8001b88:	fb01 f303 	mul.w	r3, r1, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	330a      	adds	r3, #10
 8001b92:	b298      	uxth	r0, r3
 8001b94:	4a48      	ldr	r2, [pc, #288]	@ (8001cb8 <DrawMainPage+0x390>)
 8001b96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b9a:	212a      	movs	r1, #42	@ 0x2a
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	330a      	adds	r3, #10
 8001ba8:	b299      	uxth	r1, r3
				(uint8_t*) buttons[i].label, LEFT_MODE);
 8001baa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bae:	222a      	movs	r2, #42	@ 0x2a
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	3308      	adds	r3, #8
 8001bb6:	4a40      	ldr	r2, [pc, #256]	@ (8001cb8 <DrawMainPage+0x390>)
 8001bb8:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(buttons[i].x + 10, buttons[i].y + 10,
 8001bba:	2303      	movs	r3, #3
 8001bbc:	f002 fe5c 	bl	8004878 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001bc0:	483e      	ldr	r0, [pc, #248]	@ (8001cbc <DrawMainPage+0x394>)
 8001bc2:	f002 fda1 	bl	8004708 <BSP_LCD_SetTextColor>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001bc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	dd8f      	ble.n	8001af8 <DrawMainPage+0x1d0>
	}

	// Draw "Next" button
	if (page_num != 10) {
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b0a      	cmp	r3, #10
 8001bdc:	d01f      	beq.n	8001c1e <DrawMainPage+0x2f6>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001bde:	4838      	ldr	r0, [pc, #224]	@ (8001cc0 <DrawMainPage+0x398>)
 8001be0:	f002 fd92 	bl	8004708 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(nextButton.x, nextButton.y, nextButton.w,
 8001be4:	4b37      	ldr	r3, [pc, #220]	@ (8001cc4 <DrawMainPage+0x39c>)
 8001be6:	8818      	ldrh	r0, [r3, #0]
 8001be8:	4b36      	ldr	r3, [pc, #216]	@ (8001cc4 <DrawMainPage+0x39c>)
 8001bea:	8859      	ldrh	r1, [r3, #2]
 8001bec:	4b35      	ldr	r3, [pc, #212]	@ (8001cc4 <DrawMainPage+0x39c>)
 8001bee:	889a      	ldrh	r2, [r3, #4]
 8001bf0:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <DrawMainPage+0x39c>)
 8001bf2:	88db      	ldrh	r3, [r3, #6]
 8001bf4:	f002 fefe 	bl	80049f4 <BSP_LCD_FillRect>
				nextButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f002 fd84 	bl	8004708 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001c00:	482f      	ldr	r0, [pc, #188]	@ (8001cc0 <DrawMainPage+0x398>)
 8001c02:	f002 fd99 	bl	8004738 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(nextButton.x + 10, nextButton.y + 10,
 8001c06:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <DrawMainPage+0x39c>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	330a      	adds	r3, #10
 8001c0c:	b298      	uxth	r0, r3
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <DrawMainPage+0x39c>)
 8001c10:	885b      	ldrh	r3, [r3, #2]
 8001c12:	330a      	adds	r3, #10
 8001c14:	b299      	uxth	r1, r3
 8001c16:	2303      	movs	r3, #3
 8001c18:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc8 <DrawMainPage+0x3a0>)
 8001c1a:	f002 fe2d 	bl	8004878 <BSP_LCD_DisplayStringAt>
				(uint8_t*) nextButton.label, LEFT_MODE);
	}

	// Draw "Back" button
	if (page_num != 1) {
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d01f      	beq.n	8001c64 <DrawMainPage+0x33c>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001c24:	4826      	ldr	r0, [pc, #152]	@ (8001cc0 <DrawMainPage+0x398>)
 8001c26:	f002 fd6f 	bl	8004708 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w,
 8001c2a:	4b28      	ldr	r3, [pc, #160]	@ (8001ccc <DrawMainPage+0x3a4>)
 8001c2c:	8818      	ldrh	r0, [r3, #0]
 8001c2e:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <DrawMainPage+0x3a4>)
 8001c30:	8859      	ldrh	r1, [r3, #2]
 8001c32:	4b26      	ldr	r3, [pc, #152]	@ (8001ccc <DrawMainPage+0x3a4>)
 8001c34:	889a      	ldrh	r2, [r3, #4]
 8001c36:	4b25      	ldr	r3, [pc, #148]	@ (8001ccc <DrawMainPage+0x3a4>)
 8001c38:	88db      	ldrh	r3, [r3, #6]
 8001c3a:	f002 fedb 	bl	80049f4 <BSP_LCD_FillRect>
				backButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c42:	f002 fd61 	bl	8004708 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001c46:	481e      	ldr	r0, [pc, #120]	@ (8001cc0 <DrawMainPage+0x398>)
 8001c48:	f002 fd76 	bl	8004738 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <DrawMainPage+0x3a4>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	330a      	adds	r3, #10
 8001c52:	b298      	uxth	r0, r3
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <DrawMainPage+0x3a4>)
 8001c56:	885b      	ldrh	r3, [r3, #2]
 8001c58:	330a      	adds	r3, #10
 8001c5a:	b299      	uxth	r1, r3
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd0 <DrawMainPage+0x3a8>)
 8001c60:	f002 fe0a 	bl	8004878 <BSP_LCD_DisplayStringAt>
				(uint8_t*) backButton.label, LEFT_MODE);
	}

	//draw "Queue" button on page 1
	if (page_num == 1) {
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d121      	bne.n	8001cae <DrawMainPage+0x386>
		BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001c6a:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8001c6e:	f002 fd4b 	bl	8004708 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(queueButton.x, queueButton.y, queueButton.w,
 8001c72:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <DrawMainPage+0x3ac>)
 8001c74:	8818      	ldrh	r0, [r3, #0]
 8001c76:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <DrawMainPage+0x3ac>)
 8001c78:	8859      	ldrh	r1, [r3, #2]
 8001c7a:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <DrawMainPage+0x3ac>)
 8001c7c:	889a      	ldrh	r2, [r3, #4]
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <DrawMainPage+0x3ac>)
 8001c80:	88db      	ldrh	r3, [r3, #6]
 8001c82:	f002 feb7 	bl	80049f4 <BSP_LCD_FillRect>
				queueButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001c86:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001c8a:	f002 fd3d 	bl	8004708 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_YELLOW);
 8001c8e:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8001c92:	f002 fd51 	bl	8004738 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(queueButton.x + 10, queueButton.y + 10,
 8001c96:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <DrawMainPage+0x3ac>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	330a      	adds	r3, #10
 8001c9c:	b298      	uxth	r0, r3
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd4 <DrawMainPage+0x3ac>)
 8001ca0:	885b      	ldrh	r3, [r3, #2]
 8001ca2:	330a      	adds	r3, #10
 8001ca4:	b299      	uxth	r1, r3
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd8 <DrawMainPage+0x3b0>)
 8001caa:	f002 fde5 	bl	8004878 <BSP_LCD_DisplayStringAt>
				(uint8_t*) queueButton.label, LEFT_MODE);
	}
}
 8001cae:	bf00      	nop
 8001cb0:	3798      	adds	r7, #152	@ 0x98
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	ff0000ff 	.word	0xff0000ff
 8001cc0:	ffff0000 	.word	0xffff0000
 8001cc4:	200000d8 	.word	0x200000d8
 8001cc8:	200000e0 	.word	0x200000e0
 8001ccc:	200000ac 	.word	0x200000ac
 8001cd0:	200000b4 	.word	0x200000b4
 8001cd4:	20000080 	.word	0x20000080
 8001cd8:	20000088 	.word	0x20000088

08001cdc <DrawInfoPage>:

void DrawInfoPage(char protocolTitle[MAX_LINE_LENGTH]) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f002 fd5a 	bl	80047a0 <BSP_LCD_Clear>
	//Display protocol name at top of screen
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001cec:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001cf0:	f002 fd0a 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001cf4:	4846      	ldr	r0, [pc, #280]	@ (8001e10 <DrawInfoPage+0x134>)
 8001cf6:	f002 fd1f 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) protocolTitle, CENTER_MODE);
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	210a      	movs	r1, #10
 8001d00:	200a      	movs	r0, #10
 8001d02:	f002 fdb9 	bl	8004878 <BSP_LCD_DisplayStringAt>

	//Draw "QueueSelect" button on select page
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d06:	4843      	ldr	r0, [pc, #268]	@ (8001e14 <DrawInfoPage+0x138>)
 8001d08:	f002 fcfe 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(queueSelectButton.x, queueSelectButton.y,
 8001d0c:	4b42      	ldr	r3, [pc, #264]	@ (8001e18 <DrawInfoPage+0x13c>)
 8001d0e:	8818      	ldrh	r0, [r3, #0]
 8001d10:	4b41      	ldr	r3, [pc, #260]	@ (8001e18 <DrawInfoPage+0x13c>)
 8001d12:	8859      	ldrh	r1, [r3, #2]
 8001d14:	4b40      	ldr	r3, [pc, #256]	@ (8001e18 <DrawInfoPage+0x13c>)
 8001d16:	889a      	ldrh	r2, [r3, #4]
 8001d18:	4b3f      	ldr	r3, [pc, #252]	@ (8001e18 <DrawInfoPage+0x13c>)
 8001d1a:	88db      	ldrh	r3, [r3, #6]
 8001d1c:	f002 fe6a 	bl	80049f4 <BSP_LCD_FillRect>
			queueSelectButton.w, queueSelectButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f002 fcf0 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001d28:	483a      	ldr	r0, [pc, #232]	@ (8001e14 <DrawInfoPage+0x138>)
 8001d2a:	f002 fd05 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(queueSelectButton.x + 10, queueSelectButton.y + 10,
 8001d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e18 <DrawInfoPage+0x13c>)
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	330a      	adds	r3, #10
 8001d34:	b298      	uxth	r0, r3
 8001d36:	4b38      	ldr	r3, [pc, #224]	@ (8001e18 <DrawInfoPage+0x13c>)
 8001d38:	885b      	ldrh	r3, [r3, #2]
 8001d3a:	330a      	adds	r3, #10
 8001d3c:	b299      	uxth	r1, r3
 8001d3e:	2303      	movs	r3, #3
 8001d40:	4a36      	ldr	r2, [pc, #216]	@ (8001e1c <DrawInfoPage+0x140>)
 8001d42:	f002 fd99 	bl	8004878 <BSP_LCD_DisplayStringAt>
			(uint8_t*) queueSelectButton.label, LEFT_MODE);

	//Draw "Select" button
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d46:	4833      	ldr	r0, [pc, #204]	@ (8001e14 <DrawInfoPage+0x138>)
 8001d48:	f002 fcde 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(selectButton.x, selectButton.y, selectButton.w,
 8001d4c:	4b34      	ldr	r3, [pc, #208]	@ (8001e20 <DrawInfoPage+0x144>)
 8001d4e:	8818      	ldrh	r0, [r3, #0]
 8001d50:	4b33      	ldr	r3, [pc, #204]	@ (8001e20 <DrawInfoPage+0x144>)
 8001d52:	8859      	ldrh	r1, [r3, #2]
 8001d54:	4b32      	ldr	r3, [pc, #200]	@ (8001e20 <DrawInfoPage+0x144>)
 8001d56:	889a      	ldrh	r2, [r3, #4]
 8001d58:	4b31      	ldr	r3, [pc, #196]	@ (8001e20 <DrawInfoPage+0x144>)
 8001d5a:	88db      	ldrh	r3, [r3, #6]
 8001d5c:	f002 fe4a 	bl	80049f4 <BSP_LCD_FillRect>
			selectButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f002 fcd0 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001d68:	482a      	ldr	r0, [pc, #168]	@ (8001e14 <DrawInfoPage+0x138>)
 8001d6a:	f002 fce5 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(selectButton.x + 10, selectButton.y + 10,
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e20 <DrawInfoPage+0x144>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	330a      	adds	r3, #10
 8001d74:	b298      	uxth	r0, r3
 8001d76:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <DrawInfoPage+0x144>)
 8001d78:	885b      	ldrh	r3, [r3, #2]
 8001d7a:	330a      	adds	r3, #10
 8001d7c:	b299      	uxth	r1, r3
 8001d7e:	2303      	movs	r3, #3
 8001d80:	4a28      	ldr	r2, [pc, #160]	@ (8001e24 <DrawInfoPage+0x148>)
 8001d82:	f002 fd79 	bl	8004878 <BSP_LCD_DisplayStringAt>
			(uint8_t*) selectButton.label, LEFT_MODE);

	//Draw "Delete" button
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d86:	4823      	ldr	r0, [pc, #140]	@ (8001e14 <DrawInfoPage+0x138>)
 8001d88:	f002 fcbe 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(deleteButton.x, deleteButton.y, deleteButton.w,
 8001d8c:	4b26      	ldr	r3, [pc, #152]	@ (8001e28 <DrawInfoPage+0x14c>)
 8001d8e:	8818      	ldrh	r0, [r3, #0]
 8001d90:	4b25      	ldr	r3, [pc, #148]	@ (8001e28 <DrawInfoPage+0x14c>)
 8001d92:	8859      	ldrh	r1, [r3, #2]
 8001d94:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <DrawInfoPage+0x14c>)
 8001d96:	889a      	ldrh	r2, [r3, #4]
 8001d98:	4b23      	ldr	r3, [pc, #140]	@ (8001e28 <DrawInfoPage+0x14c>)
 8001d9a:	88db      	ldrh	r3, [r3, #6]
 8001d9c:	f002 fe2a 	bl	80049f4 <BSP_LCD_FillRect>
			deleteButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f002 fcb0 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001da8:	481a      	ldr	r0, [pc, #104]	@ (8001e14 <DrawInfoPage+0x138>)
 8001daa:	f002 fcc5 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(deleteButton.x + 10, deleteButton.y + 10,
 8001dae:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <DrawInfoPage+0x14c>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	330a      	adds	r3, #10
 8001db4:	b298      	uxth	r0, r3
 8001db6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <DrawInfoPage+0x14c>)
 8001db8:	885b      	ldrh	r3, [r3, #2]
 8001dba:	330a      	adds	r3, #10
 8001dbc:	b299      	uxth	r1, r3
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e2c <DrawInfoPage+0x150>)
 8001dc2:	f002 fd59 	bl	8004878 <BSP_LCD_DisplayStringAt>
			(uint8_t*) deleteButton.label, LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001dc6:	4812      	ldr	r0, [pc, #72]	@ (8001e10 <DrawInfoPage+0x134>)
 8001dc8:	f002 fc9e 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 8001dcc:	4b18      	ldr	r3, [pc, #96]	@ (8001e30 <DrawInfoPage+0x154>)
 8001dce:	8818      	ldrh	r0, [r3, #0]
 8001dd0:	4b17      	ldr	r3, [pc, #92]	@ (8001e30 <DrawInfoPage+0x154>)
 8001dd2:	8859      	ldrh	r1, [r3, #2]
 8001dd4:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <DrawInfoPage+0x154>)
 8001dd6:	889a      	ldrh	r2, [r3, #4]
 8001dd8:	4b15      	ldr	r3, [pc, #84]	@ (8001e30 <DrawInfoPage+0x154>)
 8001dda:	88db      	ldrh	r3, [r3, #6]
 8001ddc:	f002 fe0a 	bl	80049f4 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f002 fc90 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001de8:	4809      	ldr	r0, [pc, #36]	@ (8001e10 <DrawInfoPage+0x134>)
 8001dea:	f002 fca5 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8001dee:	4b10      	ldr	r3, [pc, #64]	@ (8001e30 <DrawInfoPage+0x154>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	330a      	adds	r3, #10
 8001df4:	b298      	uxth	r0, r3
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <DrawInfoPage+0x154>)
 8001df8:	885b      	ldrh	r3, [r3, #2]
 8001dfa:	330a      	adds	r3, #10
 8001dfc:	b299      	uxth	r1, r3
 8001dfe:	2303      	movs	r3, #3
 8001e00:	4a0c      	ldr	r2, [pc, #48]	@ (8001e34 <DrawInfoPage+0x158>)
 8001e02:	f002 fd39 	bl	8004878 <BSP_LCD_DisplayStringAt>
			(uint8_t*) backButton.label, LEFT_MODE);
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	ffff0000 	.word	0xffff0000
 8001e14:	ff0000ff 	.word	0xff0000ff
 8001e18:	2000015c 	.word	0x2000015c
 8001e1c:	20000164 	.word	0x20000164
 8001e20:	20000188 	.word	0x20000188
 8001e24:	20000190 	.word	0x20000190
 8001e28:	200001b4 	.word	0x200001b4
 8001e2c:	200001bc 	.word	0x200001bc
 8001e30:	200000ac 	.word	0x200000ac
 8001e34:	200000b4 	.word	0x200000b4

08001e38 <DrawQueuePage>:

void DrawQueuePage(uint8_t queueSize) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08e      	sub	sp, #56	@ 0x38
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001e42:	f04f 30ff 	mov.w	r0, #4294967295
 8001e46:	f002 fcab 	bl	80047a0 <BSP_LCD_Clear>
	char pageTitle[20] = "";
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
 8001e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Queue Size: %d", queueSize);
 8001e5c:	79fa      	ldrb	r2, [r7, #7]
 8001e5e:	f107 0320 	add.w	r3, r7, #32
 8001e62:	4956      	ldr	r1, [pc, #344]	@ (8001fbc <DrawQueuePage+0x184>)
 8001e64:	4618      	mov	r0, r3
 8001e66:	f00f ff25 	bl	8011cb4 <siprintf>
	//Display Queue at top of the screen
	BSP_LCD_SetFont(&Font20);
 8001e6a:	4855      	ldr	r0, [pc, #340]	@ (8001fc0 <DrawQueuePage+0x188>)
 8001e6c:	f002 fc7e 	bl	800476c <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e70:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001e74:	f002 fc48 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001e78:	4852      	ldr	r0, [pc, #328]	@ (8001fc4 <DrawQueuePage+0x18c>)
 8001e7a:	f002 fc5d 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) pageTitle, CENTER_MODE);
 8001e7e:	f107 0220 	add.w	r2, r7, #32
 8001e82:	2301      	movs	r3, #1
 8001e84:	210a      	movs	r1, #10
 8001e86:	200a      	movs	r0, #10
 8001e88:	f002 fcf6 	bl	8004878 <BSP_LCD_DisplayStringAt>

	//display protocols in queue here
	BSP_LCD_SetFont(&Font16);
 8001e8c:	484e      	ldr	r0, [pc, #312]	@ (8001fc8 <DrawQueuePage+0x190>)
 8001e8e:	f002 fc6d 	bl	800476c <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e92:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001e96:	f002 fc37 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9e:	f002 fc4b 	bl	8004738 <BSP_LCD_SetBackColor>
	char format[20] = "";
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
	for (uint8_t i = 0; i < queueSize; i++) {
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001eba:	e033      	b.n	8001f24 <DrawQueuePage+0xec>
		sprintf(format, "%d.) ", i + 1);
 8001ebc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	4941      	ldr	r1, [pc, #260]	@ (8001fcc <DrawQueuePage+0x194>)
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00f fef3 	bl	8011cb4 <siprintf>
		BSP_LCD_DisplayStringAt(10, 50 + i * 20, (uint8_t*) format, LEFT_MODE);
 8001ece:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3332      	adds	r3, #50	@ 0x32
 8001ee0:	b299      	uxth	r1, r3
 8001ee2:	f107 020c 	add.w	r2, r7, #12
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	200a      	movs	r0, #10
 8001eea:	f002 fcc5 	bl	8004878 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(60, 50 + i * 20, (uint8_t*) queueBuffer[i][0],
 8001eee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	0092      	lsls	r2, r2, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3332      	adds	r3, #50	@ 0x32
 8001f00:	b299      	uxth	r1, r3
 8001f02:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f06:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	4a30      	ldr	r2, [pc, #192]	@ (8001fd0 <DrawQueuePage+0x198>)
 8001f10:	441a      	add	r2, r3
 8001f12:	2303      	movs	r3, #3
 8001f14:	203c      	movs	r0, #60	@ 0x3c
 8001f16:	f002 fcaf 	bl	8004878 <BSP_LCD_DisplayStringAt>
	for (uint8_t i = 0; i < queueSize; i++) {
 8001f1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001f24:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d3c6      	bcc.n	8001ebc <DrawQueuePage+0x84>
				LEFT_MODE);
	}
	BSP_LCD_SetFont(&Font20);
 8001f2e:	4824      	ldr	r0, [pc, #144]	@ (8001fc0 <DrawQueuePage+0x188>)
 8001f30:	f002 fc1c 	bl	800476c <BSP_LCD_SetFont>

	//Draw "Run" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001f34:	4823      	ldr	r0, [pc, #140]	@ (8001fc4 <DrawQueuePage+0x18c>)
 8001f36:	f002 fbe7 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(runButton.x, runButton.y, runButton.w, runButton.h);
 8001f3a:	4b26      	ldr	r3, [pc, #152]	@ (8001fd4 <DrawQueuePage+0x19c>)
 8001f3c:	8818      	ldrh	r0, [r3, #0]
 8001f3e:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <DrawQueuePage+0x19c>)
 8001f40:	8859      	ldrh	r1, [r3, #2]
 8001f42:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <DrawQueuePage+0x19c>)
 8001f44:	889a      	ldrh	r2, [r3, #4]
 8001f46:	4b23      	ldr	r3, [pc, #140]	@ (8001fd4 <DrawQueuePage+0x19c>)
 8001f48:	88db      	ldrh	r3, [r3, #6]
 8001f4a:	f002 fd53 	bl	80049f4 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f52:	f002 fbd9 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001f56:	481b      	ldr	r0, [pc, #108]	@ (8001fc4 <DrawQueuePage+0x18c>)
 8001f58:	f002 fbee 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(runButton.x + 10, runButton.y + 10,
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <DrawQueuePage+0x19c>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	330a      	adds	r3, #10
 8001f62:	b298      	uxth	r0, r3
 8001f64:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <DrawQueuePage+0x19c>)
 8001f66:	885b      	ldrh	r3, [r3, #2]
 8001f68:	330a      	adds	r3, #10
 8001f6a:	b299      	uxth	r1, r3
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd8 <DrawQueuePage+0x1a0>)
 8001f70:	f002 fc82 	bl	8004878 <BSP_LCD_DisplayStringAt>
			(uint8_t*) runButton.label, LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001f74:	4813      	ldr	r0, [pc, #76]	@ (8001fc4 <DrawQueuePage+0x18c>)
 8001f76:	f002 fbc7 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 8001f7a:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <DrawQueuePage+0x1a4>)
 8001f7c:	8818      	ldrh	r0, [r3, #0]
 8001f7e:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <DrawQueuePage+0x1a4>)
 8001f80:	8859      	ldrh	r1, [r3, #2]
 8001f82:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <DrawQueuePage+0x1a4>)
 8001f84:	889a      	ldrh	r2, [r3, #4]
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <DrawQueuePage+0x1a4>)
 8001f88:	88db      	ldrh	r3, [r3, #6]
 8001f8a:	f002 fd33 	bl	80049f4 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f92:	f002 fbb9 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001f96:	480b      	ldr	r0, [pc, #44]	@ (8001fc4 <DrawQueuePage+0x18c>)
 8001f98:	f002 fbce 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <DrawQueuePage+0x1a4>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	330a      	adds	r3, #10
 8001fa2:	b298      	uxth	r0, r3
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <DrawQueuePage+0x1a4>)
 8001fa6:	885b      	ldrh	r3, [r3, #2]
 8001fa8:	330a      	adds	r3, #10
 8001faa:	b299      	uxth	r1, r3
 8001fac:	2303      	movs	r3, #3
 8001fae:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe0 <DrawQueuePage+0x1a8>)
 8001fb0:	f002 fc62 	bl	8004878 <BSP_LCD_DisplayStringAt>
			(uint8_t*) backButton.label, LEFT_MODE);
}
 8001fb4:	bf00      	nop
 8001fb6:	3738      	adds	r7, #56	@ 0x38
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	08012cfc 	.word	0x08012cfc
 8001fc0:	20000254 	.word	0x20000254
 8001fc4:	ffff0000 	.word	0xffff0000
 8001fc8:	2000025c 	.word	0x2000025c
 8001fcc:	08012d0c 	.word	0x08012d0c
 8001fd0:	20000610 	.word	0x20000610
 8001fd4:	20000104 	.word	0x20000104
 8001fd8:	2000010c 	.word	0x2000010c
 8001fdc:	200000ac 	.word	0x200000ac
 8001fe0:	200000b4 	.word	0x200000b4

08001fe4 <DrawConfirmationPage>:

void DrawConfirmationPage(uint32_t sector, uint32_t offset) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001fee:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff2:	f002 fbd5 	bl	80047a0 <BSP_LCD_Clear>

	//display confirmation text
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ff6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001ffa:	f002 fb85 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8002002:	f002 fb99 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) "Confirm Delete:", LEFT_MODE);
 8002006:	2303      	movs	r3, #3
 8002008:	4a2e      	ldr	r2, [pc, #184]	@ (80020c4 <DrawConfirmationPage+0xe0>)
 800200a:	210a      	movs	r1, #10
 800200c:	200a      	movs	r0, #10
 800200e:	f002 fc33 	bl	8004878 <BSP_LCD_DisplayStringAt>

	//Display protocol name for deletion
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002012:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002016:	f002 fb77 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800201a:	f04f 30ff 	mov.w	r0, #4294967295
 800201e:	f002 fb8b 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 30, (uint8_t*) buttons[offset].label,
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	222a      	movs	r2, #42	@ 0x2a
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	3308      	adds	r3, #8
 800202c:	4a26      	ldr	r2, [pc, #152]	@ (80020c8 <DrawConfirmationPage+0xe4>)
 800202e:	441a      	add	r2, r3
 8002030:	2301      	movs	r3, #1
 8002032:	211e      	movs	r1, #30
 8002034:	200a      	movs	r0, #10
 8002036:	f002 fc1f 	bl	8004878 <BSP_LCD_DisplayStringAt>
			CENTER_MODE);

	//Draw "Confirm" button
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800203a:	4824      	ldr	r0, [pc, #144]	@ (80020cc <DrawConfirmationPage+0xe8>)
 800203c:	f002 fb64 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(confirmButton.x, confirmButton.y, confirmButton.w,
 8002040:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <DrawConfirmationPage+0xec>)
 8002042:	8818      	ldrh	r0, [r3, #0]
 8002044:	4b22      	ldr	r3, [pc, #136]	@ (80020d0 <DrawConfirmationPage+0xec>)
 8002046:	8859      	ldrh	r1, [r3, #2]
 8002048:	4b21      	ldr	r3, [pc, #132]	@ (80020d0 <DrawConfirmationPage+0xec>)
 800204a:	889a      	ldrh	r2, [r3, #4]
 800204c:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <DrawConfirmationPage+0xec>)
 800204e:	88db      	ldrh	r3, [r3, #6]
 8002050:	f002 fcd0 	bl	80049f4 <BSP_LCD_FillRect>
			confirmButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f002 fb56 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800205c:	481b      	ldr	r0, [pc, #108]	@ (80020cc <DrawConfirmationPage+0xe8>)
 800205e:	f002 fb6b 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(confirmButton.x + 10, confirmButton.y + 10,
 8002062:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <DrawConfirmationPage+0xec>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	330a      	adds	r3, #10
 8002068:	b298      	uxth	r0, r3
 800206a:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <DrawConfirmationPage+0xec>)
 800206c:	885b      	ldrh	r3, [r3, #2]
 800206e:	330a      	adds	r3, #10
 8002070:	b299      	uxth	r1, r3
 8002072:	2303      	movs	r3, #3
 8002074:	4a17      	ldr	r2, [pc, #92]	@ (80020d4 <DrawConfirmationPage+0xf0>)
 8002076:	f002 fbff 	bl	8004878 <BSP_LCD_DisplayStringAt>
			(uint8_t*) confirmButton.label, LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800207a:	4817      	ldr	r0, [pc, #92]	@ (80020d8 <DrawConfirmationPage+0xf4>)
 800207c:	f002 fb44 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 8002080:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <DrawConfirmationPage+0xf8>)
 8002082:	8818      	ldrh	r0, [r3, #0]
 8002084:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <DrawConfirmationPage+0xf8>)
 8002086:	8859      	ldrh	r1, [r3, #2]
 8002088:	4b14      	ldr	r3, [pc, #80]	@ (80020dc <DrawConfirmationPage+0xf8>)
 800208a:	889a      	ldrh	r2, [r3, #4]
 800208c:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <DrawConfirmationPage+0xf8>)
 800208e:	88db      	ldrh	r3, [r3, #6]
 8002090:	f002 fcb0 	bl	80049f4 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f002 fb36 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800209c:	480e      	ldr	r0, [pc, #56]	@ (80020d8 <DrawConfirmationPage+0xf4>)
 800209e:	f002 fb4b 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <DrawConfirmationPage+0xf8>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	330a      	adds	r3, #10
 80020a8:	b298      	uxth	r0, r3
 80020aa:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <DrawConfirmationPage+0xf8>)
 80020ac:	885b      	ldrh	r3, [r3, #2]
 80020ae:	330a      	adds	r3, #10
 80020b0:	b299      	uxth	r1, r3
 80020b2:	2303      	movs	r3, #3
 80020b4:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <DrawConfirmationPage+0xfc>)
 80020b6:	f002 fbdf 	bl	8004878 <BSP_LCD_DisplayStringAt>
			(uint8_t*) backButton.label, LEFT_MODE);
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	08012d14 	.word	0x08012d14
 80020c8:	20000000 	.word	0x20000000
 80020cc:	ff0000ff 	.word	0xff0000ff
 80020d0:	20000130 	.word	0x20000130
 80020d4:	20000138 	.word	0x20000138
 80020d8:	ffff0000 	.word	0xffff0000
 80020dc:	200000ac 	.word	0x200000ac
 80020e0:	200000b4 	.word	0x200000b4

080020e4 <DrawPageFinish>:

void DrawPageFinish() {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f002 fb58 	bl	80047a0 <BSP_LCD_Clear>

	//Draw "Success!" box
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80020f0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80020f4:	f002 fb08 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80020f8:	4818      	ldr	r0, [pc, #96]	@ (800215c <DrawPageFinish+0x78>)
 80020fa:	f002 fb1d 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(selectButton.x + 10, selectButton.y + 10,
 80020fe:	4b18      	ldr	r3, [pc, #96]	@ (8002160 <DrawPageFinish+0x7c>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	330a      	adds	r3, #10
 8002104:	b298      	uxth	r0, r3
 8002106:	4b16      	ldr	r3, [pc, #88]	@ (8002160 <DrawPageFinish+0x7c>)
 8002108:	885b      	ldrh	r3, [r3, #2]
 800210a:	330a      	adds	r3, #10
 800210c:	b299      	uxth	r1, r3
 800210e:	2303      	movs	r3, #3
 8002110:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <DrawPageFinish+0x80>)
 8002112:	f002 fbb1 	bl	8004878 <BSP_LCD_DisplayStringAt>
			(uint8_t*) "Success!", LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002116:	4811      	ldr	r0, [pc, #68]	@ (800215c <DrawPageFinish+0x78>)
 8002118:	f002 faf6 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <DrawPageFinish+0x84>)
 800211e:	8818      	ldrh	r0, [r3, #0]
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <DrawPageFinish+0x84>)
 8002122:	8859      	ldrh	r1, [r3, #2]
 8002124:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <DrawPageFinish+0x84>)
 8002126:	889a      	ldrh	r2, [r3, #4]
 8002128:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <DrawPageFinish+0x84>)
 800212a:	88db      	ldrh	r3, [r3, #6]
 800212c:	f002 fc62 	bl	80049f4 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f002 fae8 	bl	8004708 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8002138:	4808      	ldr	r0, [pc, #32]	@ (800215c <DrawPageFinish+0x78>)
 800213a:	f002 fafd 	bl	8004738 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <DrawPageFinish+0x84>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	330a      	adds	r3, #10
 8002144:	b298      	uxth	r0, r3
 8002146:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <DrawPageFinish+0x84>)
 8002148:	885b      	ldrh	r3, [r3, #2]
 800214a:	330a      	adds	r3, #10
 800214c:	b299      	uxth	r1, r3
 800214e:	2303      	movs	r3, #3
 8002150:	4a06      	ldr	r2, [pc, #24]	@ (800216c <DrawPageFinish+0x88>)
 8002152:	f002 fb91 	bl	8004878 <BSP_LCD_DisplayStringAt>
			(uint8_t*) "Done", LEFT_MODE);
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	ffff0000 	.word	0xffff0000
 8002160:	20000188 	.word	0x20000188
 8002164:	08012d24 	.word	0x08012d24
 8002168:	200000ac 	.word	0x200000ac
 800216c:	08012d30 	.word	0x08012d30

08002170 <HandleTouch>:

//fix this function and give it a description
uint8_t HandleTouch(void) {
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
	//store the coordinates of the user touch in "TS_State"
	BSP_TS_GetState(&TS_State);
 8002176:	489e      	ldr	r0, [pc, #632]	@ (80023f0 <HandleTouch+0x280>)
 8002178:	f003 f888 	bl	800528c <BSP_TS_GetState>
	//do nothing if no touch detect
	if (!TS_State.TouchDetected) {
 800217c:	4b9c      	ldr	r3, [pc, #624]	@ (80023f0 <HandleTouch+0x280>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HandleTouch+0x18>
		return 0;
 8002184:	2300      	movs	r3, #0
 8002186:	e381      	b.n	800288c <HandleTouch+0x71c>
	}

	//init variables if a touch is detected
	char Empty_str[20] = "Empty\n"; //strings from flash memory come with newline at end
 8002188:	4a9a      	ldr	r2, [pc, #616]	@ (80023f4 <HandleTouch+0x284>)
 800218a:	463b      	mov	r3, r7
 800218c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002190:	6018      	str	r0, [r3, #0]
 8002192:	3304      	adds	r3, #4
 8002194:	8019      	strh	r1, [r3, #0]
 8002196:	3302      	adds	r3, #2
 8002198:	0c0a      	lsrs	r2, r1, #16
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	1dfb      	adds	r3, r7, #7
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	731a      	strb	r2, [r3, #12]
	static uint8_t protocol_num;
	static uint8_t protocol_offset = 0;
	//the y value has issues of being flipped and also needing to click below button
	TS_State.Y = (BSP_LCD_GetYSize() - TS_State.Y) - Y_OFFSET;
 80021a8:	f002 fa3e 	bl	8004628 <BSP_LCD_GetYSize>
 80021ac:	4603      	mov	r3, r0
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	4b8f      	ldr	r3, [pc, #572]	@ (80023f0 <HandleTouch+0x280>)
 80021b2:	889b      	ldrh	r3, [r3, #4]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3b14      	subs	r3, #20
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	4b8c      	ldr	r3, [pc, #560]	@ (80023f0 <HandleTouch+0x280>)
 80021be:	809a      	strh	r2, [r3, #4]

	//start state machine for touch handling
	switch (currentPage) {
 80021c0:	4b8d      	ldr	r3, [pc, #564]	@ (80023f8 <HandleTouch+0x288>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	f200 8361 	bhi.w	800288c <HandleTouch+0x71c>
 80021ca:	a201      	add	r2, pc, #4	@ (adr r2, 80021d0 <HandleTouch+0x60>)
 80021cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d0:	080021e5 	.word	0x080021e5
 80021d4:	08002499 	.word	0x08002499
 80021d8:	08002675 	.word	0x08002675
 80021dc:	0800274d 	.word	0x0800274d
 80021e0:	08002831 	.word	0x08002831
	case PAGE_MAIN:
		//back button
		if (TS_State.X >= backButton.x
 80021e4:	4b82      	ldr	r3, [pc, #520]	@ (80023f0 <HandleTouch+0x280>)
 80021e6:	885a      	ldrh	r2, [r3, #2]
 80021e8:	4b84      	ldr	r3, [pc, #528]	@ (80023fc <HandleTouch+0x28c>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d33c      	bcc.n	800226a <HandleTouch+0xfa>
				&& TS_State.X <= (backButton.x + backButton.w)
 80021f0:	4b7f      	ldr	r3, [pc, #508]	@ (80023f0 <HandleTouch+0x280>)
 80021f2:	885b      	ldrh	r3, [r3, #2]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b81      	ldr	r3, [pc, #516]	@ (80023fc <HandleTouch+0x28c>)
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	4619      	mov	r1, r3
 80021fc:	4b7f      	ldr	r3, [pc, #508]	@ (80023fc <HandleTouch+0x28c>)
 80021fe:	889b      	ldrh	r3, [r3, #4]
 8002200:	440b      	add	r3, r1
 8002202:	429a      	cmp	r2, r3
 8002204:	dc31      	bgt.n	800226a <HandleTouch+0xfa>
				&& TS_State.Y >= backButton.y
 8002206:	4b7a      	ldr	r3, [pc, #488]	@ (80023f0 <HandleTouch+0x280>)
 8002208:	889a      	ldrh	r2, [r3, #4]
 800220a:	4b7c      	ldr	r3, [pc, #496]	@ (80023fc <HandleTouch+0x28c>)
 800220c:	885b      	ldrh	r3, [r3, #2]
 800220e:	429a      	cmp	r2, r3
 8002210:	d32b      	bcc.n	800226a <HandleTouch+0xfa>
				&& TS_State.Y <= (backButton.y + backButton.h)
 8002212:	4b77      	ldr	r3, [pc, #476]	@ (80023f0 <HandleTouch+0x280>)
 8002214:	889b      	ldrh	r3, [r3, #4]
 8002216:	461a      	mov	r2, r3
 8002218:	4b78      	ldr	r3, [pc, #480]	@ (80023fc <HandleTouch+0x28c>)
 800221a:	885b      	ldrh	r3, [r3, #2]
 800221c:	4619      	mov	r1, r3
 800221e:	4b77      	ldr	r3, [pc, #476]	@ (80023fc <HandleTouch+0x28c>)
 8002220:	88db      	ldrh	r3, [r3, #6]
 8002222:	440b      	add	r3, r1
 8002224:	429a      	cmp	r2, r3
 8002226:	dc20      	bgt.n	800226a <HandleTouch+0xfa>
				&& (pageNum != 1)) {
 8002228:	4b75      	ldr	r3, [pc, #468]	@ (8002400 <HandleTouch+0x290>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d01c      	beq.n	800226a <HandleTouch+0xfa>
			pageNum--;
 8002230:	4b73      	ldr	r3, [pc, #460]	@ (8002400 <HandleTouch+0x290>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	3b01      	subs	r3, #1
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b71      	ldr	r3, [pc, #452]	@ (8002400 <HandleTouch+0x290>)
 800223a:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 800223c:	4b70      	ldr	r3, [pc, #448]	@ (8002400 <HandleTouch+0x290>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fb71 	bl	8001928 <DrawMainPage>
			if (pageNum == 1) {
 8002246:	4b6e      	ldr	r3, [pc, #440]	@ (8002400 <HandleTouch+0x290>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d10a      	bne.n	8002264 <HandleTouch+0xf4>
				//next page wont register touch until you let go
				while (TS_State.TouchDetected) {
 800224e:	e005      	b.n	800225c <HandleTouch+0xec>
					BSP_TS_GetState(&TS_State);
 8002250:	4867      	ldr	r0, [pc, #412]	@ (80023f0 <HandleTouch+0x280>)
 8002252:	f003 f81b 	bl	800528c <BSP_TS_GetState>
					if (!TS_State.TouchDetected) {
					}
					HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8002256:	2014      	movs	r0, #20
 8002258:	f003 f90c 	bl	8005474 <HAL_Delay>
				while (TS_State.TouchDetected) {
 800225c:	4b64      	ldr	r3, [pc, #400]	@ (80023f0 <HandleTouch+0x280>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f5      	bne.n	8002250 <HandleTouch+0xe0>
				}
			}
			HAL_Delay(SCREEN_DELAY);
 8002264:	2032      	movs	r0, #50	@ 0x32
 8002266:	f003 f905 	bl	8005474 <HAL_Delay>
		}
		//next button
		if (TS_State.X >= nextButton.x
 800226a:	4b61      	ldr	r3, [pc, #388]	@ (80023f0 <HandleTouch+0x280>)
 800226c:	885a      	ldrh	r2, [r3, #2]
 800226e:	4b65      	ldr	r3, [pc, #404]	@ (8002404 <HandleTouch+0x294>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d32d      	bcc.n	80022d2 <HandleTouch+0x162>
				&& TS_State.X <= (nextButton.x + nextButton.w)
 8002276:	4b5e      	ldr	r3, [pc, #376]	@ (80023f0 <HandleTouch+0x280>)
 8002278:	885b      	ldrh	r3, [r3, #2]
 800227a:	461a      	mov	r2, r3
 800227c:	4b61      	ldr	r3, [pc, #388]	@ (8002404 <HandleTouch+0x294>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	4b60      	ldr	r3, [pc, #384]	@ (8002404 <HandleTouch+0x294>)
 8002284:	889b      	ldrh	r3, [r3, #4]
 8002286:	440b      	add	r3, r1
 8002288:	429a      	cmp	r2, r3
 800228a:	dc22      	bgt.n	80022d2 <HandleTouch+0x162>
				&& TS_State.Y >= nextButton.y
 800228c:	4b58      	ldr	r3, [pc, #352]	@ (80023f0 <HandleTouch+0x280>)
 800228e:	889a      	ldrh	r2, [r3, #4]
 8002290:	4b5c      	ldr	r3, [pc, #368]	@ (8002404 <HandleTouch+0x294>)
 8002292:	885b      	ldrh	r3, [r3, #2]
 8002294:	429a      	cmp	r2, r3
 8002296:	d31c      	bcc.n	80022d2 <HandleTouch+0x162>
				&& TS_State.Y <= (nextButton.y + nextButton.h)
 8002298:	4b55      	ldr	r3, [pc, #340]	@ (80023f0 <HandleTouch+0x280>)
 800229a:	889b      	ldrh	r3, [r3, #4]
 800229c:	461a      	mov	r2, r3
 800229e:	4b59      	ldr	r3, [pc, #356]	@ (8002404 <HandleTouch+0x294>)
 80022a0:	885b      	ldrh	r3, [r3, #2]
 80022a2:	4619      	mov	r1, r3
 80022a4:	4b57      	ldr	r3, [pc, #348]	@ (8002404 <HandleTouch+0x294>)
 80022a6:	88db      	ldrh	r3, [r3, #6]
 80022a8:	440b      	add	r3, r1
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dc11      	bgt.n	80022d2 <HandleTouch+0x162>
				&& (pageNum != 10)) {
 80022ae:	4b54      	ldr	r3, [pc, #336]	@ (8002400 <HandleTouch+0x290>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b0a      	cmp	r3, #10
 80022b4:	d00d      	beq.n	80022d2 <HandleTouch+0x162>
			pageNum++;
 80022b6:	4b52      	ldr	r3, [pc, #328]	@ (8002400 <HandleTouch+0x290>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4b50      	ldr	r3, [pc, #320]	@ (8002400 <HandleTouch+0x290>)
 80022c0:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 80022c2:	4b4f      	ldr	r3, [pc, #316]	@ (8002400 <HandleTouch+0x290>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fb2e 	bl	8001928 <DrawMainPage>
			HAL_Delay(SCREEN_DELAY);
 80022cc:	2032      	movs	r0, #50	@ 0x32
 80022ce:	f003 f8d1 	bl	8005474 <HAL_Delay>
		}
		//queue button
		if (TS_State.X >= queueButton.x
 80022d2:	4b47      	ldr	r3, [pc, #284]	@ (80023f0 <HandleTouch+0x280>)
 80022d4:	885a      	ldrh	r2, [r3, #2]
 80022d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002408 <HandleTouch+0x298>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d335      	bcc.n	800234a <HandleTouch+0x1da>
				&& TS_State.X <= (queueButton.x + queueButton.w)
 80022de:	4b44      	ldr	r3, [pc, #272]	@ (80023f0 <HandleTouch+0x280>)
 80022e0:	885b      	ldrh	r3, [r3, #2]
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b48      	ldr	r3, [pc, #288]	@ (8002408 <HandleTouch+0x298>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	4b47      	ldr	r3, [pc, #284]	@ (8002408 <HandleTouch+0x298>)
 80022ec:	889b      	ldrh	r3, [r3, #4]
 80022ee:	440b      	add	r3, r1
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dc2a      	bgt.n	800234a <HandleTouch+0x1da>
				&& TS_State.Y >= queueButton.y
 80022f4:	4b3e      	ldr	r3, [pc, #248]	@ (80023f0 <HandleTouch+0x280>)
 80022f6:	889a      	ldrh	r2, [r3, #4]
 80022f8:	4b43      	ldr	r3, [pc, #268]	@ (8002408 <HandleTouch+0x298>)
 80022fa:	885b      	ldrh	r3, [r3, #2]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d324      	bcc.n	800234a <HandleTouch+0x1da>
				&& TS_State.Y <= (queueButton.y + queueButton.h)
 8002300:	4b3b      	ldr	r3, [pc, #236]	@ (80023f0 <HandleTouch+0x280>)
 8002302:	889b      	ldrh	r3, [r3, #4]
 8002304:	461a      	mov	r2, r3
 8002306:	4b40      	ldr	r3, [pc, #256]	@ (8002408 <HandleTouch+0x298>)
 8002308:	885b      	ldrh	r3, [r3, #2]
 800230a:	4619      	mov	r1, r3
 800230c:	4b3e      	ldr	r3, [pc, #248]	@ (8002408 <HandleTouch+0x298>)
 800230e:	88db      	ldrh	r3, [r3, #6]
 8002310:	440b      	add	r3, r1
 8002312:	429a      	cmp	r2, r3
 8002314:	dc19      	bgt.n	800234a <HandleTouch+0x1da>
				&& (pageNum == 1)) {
 8002316:	4b3a      	ldr	r3, [pc, #232]	@ (8002400 <HandleTouch+0x290>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d115      	bne.n	800234a <HandleTouch+0x1da>
			DrawQueuePage(queueSize);
 800231e:	4b3b      	ldr	r3, [pc, #236]	@ (800240c <HandleTouch+0x29c>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fd88 	bl	8001e38 <DrawQueuePage>
			currentPage = PAGE_QUEUE;
 8002328:	4b33      	ldr	r3, [pc, #204]	@ (80023f8 <HandleTouch+0x288>)
 800232a:	2202      	movs	r2, #2
 800232c:	701a      	strb	r2, [r3, #0]
			//next page wont register touch until you let go
			while (TS_State.TouchDetected) {
 800232e:	e005      	b.n	800233c <HandleTouch+0x1cc>
				BSP_TS_GetState(&TS_State);
 8002330:	482f      	ldr	r0, [pc, #188]	@ (80023f0 <HandleTouch+0x280>)
 8002332:	f002 ffab 	bl	800528c <BSP_TS_GetState>
				if (!TS_State.TouchDetected) {
				}
				HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8002336:	2014      	movs	r0, #20
 8002338:	f003 f89c 	bl	8005474 <HAL_Delay>
			while (TS_State.TouchDetected) {
 800233c:	4b2c      	ldr	r3, [pc, #176]	@ (80023f0 <HandleTouch+0x280>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f5      	bne.n	8002330 <HandleTouch+0x1c0>
			}
			HAL_Delay(SCREEN_DELAY);
 8002344:	2032      	movs	r0, #50	@ 0x32
 8002346:	f003 f895 	bl	8005474 <HAL_Delay>
		}
		//3 protocol buttons
		for (int i = 0; i < NUM_BUTTONS; i++) {
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e09e      	b.n	800248e <HandleTouch+0x31e>
			if (TS_State.X >= buttons[i].x
 8002350:	4b27      	ldr	r3, [pc, #156]	@ (80023f0 <HandleTouch+0x280>)
 8002352:	885a      	ldrh	r2, [r3, #2]
 8002354:	492e      	ldr	r1, [pc, #184]	@ (8002410 <HandleTouch+0x2a0>)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	202a      	movs	r0, #42	@ 0x2a
 800235a:	fb00 f303 	mul.w	r3, r0, r3
 800235e:	440b      	add	r3, r1
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	f0c0 8090 	bcc.w	8002488 <HandleTouch+0x318>
					&& TS_State.X <= (buttons[i].x + buttons[i].w)
 8002368:	4b21      	ldr	r3, [pc, #132]	@ (80023f0 <HandleTouch+0x280>)
 800236a:	885b      	ldrh	r3, [r3, #2]
 800236c:	4618      	mov	r0, r3
 800236e:	4a28      	ldr	r2, [pc, #160]	@ (8002410 <HandleTouch+0x2a0>)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	212a      	movs	r1, #42	@ 0x2a
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	461c      	mov	r4, r3
 800237e:	4a24      	ldr	r2, [pc, #144]	@ (8002410 <HandleTouch+0x2a0>)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	212a      	movs	r1, #42	@ 0x2a
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	3304      	adds	r3, #4
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	4423      	add	r3, r4
 8002390:	4298      	cmp	r0, r3
 8002392:	dc79      	bgt.n	8002488 <HandleTouch+0x318>
					&& TS_State.Y >= buttons[i].y
 8002394:	4b16      	ldr	r3, [pc, #88]	@ (80023f0 <HandleTouch+0x280>)
 8002396:	889a      	ldrh	r2, [r3, #4]
 8002398:	491d      	ldr	r1, [pc, #116]	@ (8002410 <HandleTouch+0x2a0>)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	202a      	movs	r0, #42	@ 0x2a
 800239e:	fb00 f303 	mul.w	r3, r0, r3
 80023a2:	440b      	add	r3, r1
 80023a4:	3302      	adds	r3, #2
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d36d      	bcc.n	8002488 <HandleTouch+0x318>
					&& TS_State.Y <= (buttons[i].y + buttons[i].h)) {
 80023ac:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <HandleTouch+0x280>)
 80023ae:	889b      	ldrh	r3, [r3, #4]
 80023b0:	4618      	mov	r0, r3
 80023b2:	4a17      	ldr	r2, [pc, #92]	@ (8002410 <HandleTouch+0x2a0>)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	212a      	movs	r1, #42	@ 0x2a
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3302      	adds	r3, #2
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	461c      	mov	r4, r3
 80023c4:	4a12      	ldr	r2, [pc, #72]	@ (8002410 <HandleTouch+0x2a0>)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	212a      	movs	r1, #42	@ 0x2a
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	3306      	adds	r3, #6
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	4423      	add	r3, r4
 80023d6:	4298      	cmp	r0, r3
 80023d8:	dc56      	bgt.n	8002488 <HandleTouch+0x318>
				//check which button has been pressed
				if (i == 0) {
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d11d      	bne.n	800241c <HandleTouch+0x2ac>
					protocol_num = 1;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <HandleTouch+0x2a4>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
					protocol_offset = 0;
 80023e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <HandleTouch+0x2a8>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	e029      	b.n	8002442 <HandleTouch+0x2d2>
 80023ee:	bf00      	nop
 80023f0:	200005f8 	.word	0x200005f8
 80023f4:	08012ce8 	.word	0x08012ce8
 80023f8:	20000605 	.word	0x20000605
 80023fc:	200000ac 	.word	0x200000ac
 8002400:	200001de 	.word	0x200001de
 8002404:	200000d8 	.word	0x200000d8
 8002408:	20000080 	.word	0x20000080
 800240c:	20008310 	.word	0x20008310
 8002410:	20000000 	.word	0x20000000
 8002414:	20008f98 	.word	0x20008f98
 8002418:	20008f99 	.word	0x20008f99
				} else if (i == 1) {
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d106      	bne.n	8002430 <HandleTouch+0x2c0>
					protocol_num = 1;
 8002422:	4b89      	ldr	r3, [pc, #548]	@ (8002648 <HandleTouch+0x4d8>)
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
					protocol_offset = 1;
 8002428:	4b88      	ldr	r3, [pc, #544]	@ (800264c <HandleTouch+0x4dc>)
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	e008      	b.n	8002442 <HandleTouch+0x2d2>
				} else if (i == 2) {
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d105      	bne.n	8002442 <HandleTouch+0x2d2>
					protocol_num = 1;
 8002436:	4b84      	ldr	r3, [pc, #528]	@ (8002648 <HandleTouch+0x4d8>)
 8002438:	2201      	movs	r2, #1
 800243a:	701a      	strb	r2, [r3, #0]
					protocol_offset = 2;
 800243c:	4b83      	ldr	r3, [pc, #524]	@ (800264c <HandleTouch+0x4dc>)
 800243e:	2202      	movs	r2, #2
 8002440:	701a      	strb	r2, [r3, #0]
				}
				//dont draw next page if the button says "Empty"
				if (buttons[i].status == NOT_EMPTY) {
 8002442:	4a83      	ldr	r2, [pc, #524]	@ (8002650 <HandleTouch+0x4e0>)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	212a      	movs	r1, #42	@ 0x2a
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	3328      	adds	r3, #40	@ 0x28
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d113      	bne.n	800247e <HandleTouch+0x30e>
					currentPage = PAGE_SELECT;
 8002456:	4b7f      	ldr	r3, [pc, #508]	@ (8002654 <HandleTouch+0x4e4>)
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
					DrawInfoPage(buttons[i].label);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	222a      	movs	r2, #42	@ 0x2a
 8002460:	fb02 f303 	mul.w	r3, r2, r3
 8002464:	3308      	adds	r3, #8
 8002466:	4a7a      	ldr	r2, [pc, #488]	@ (8002650 <HandleTouch+0x4e0>)
 8002468:	4413      	add	r3, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fc36 	bl	8001cdc <DrawInfoPage>
				}
				//next page wont register touch until you let go
				while (TS_State.TouchDetected) {
 8002470:	e005      	b.n	800247e <HandleTouch+0x30e>
					BSP_TS_GetState(&TS_State);
 8002472:	4879      	ldr	r0, [pc, #484]	@ (8002658 <HandleTouch+0x4e8>)
 8002474:	f002 ff0a 	bl	800528c <BSP_TS_GetState>
					if (!TS_State.TouchDetected) {
					}
					HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8002478:	2014      	movs	r0, #20
 800247a:	f002 fffb 	bl	8005474 <HAL_Delay>
				while (TS_State.TouchDetected) {
 800247e:	4b76      	ldr	r3, [pc, #472]	@ (8002658 <HandleTouch+0x4e8>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f5      	bne.n	8002472 <HandleTouch+0x302>
				}
				return;
 8002486:	e201      	b.n	800288c <HandleTouch+0x71c>
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3301      	adds	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b02      	cmp	r3, #2
 8002492:	f77f af5d 	ble.w	8002350 <HandleTouch+0x1e0>
			}
		}
		break;
 8002496:	e1f9      	b.n	800288c <HandleTouch+0x71c>
	case PAGE_SELECT:
		//back button
		if (TS_State.X >= backButton.x
 8002498:	4b6f      	ldr	r3, [pc, #444]	@ (8002658 <HandleTouch+0x4e8>)
 800249a:	885a      	ldrh	r2, [r3, #2]
 800249c:	4b6f      	ldr	r3, [pc, #444]	@ (800265c <HandleTouch+0x4ec>)
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d323      	bcc.n	80024ec <HandleTouch+0x37c>
				&& TS_State.X <= (backButton.x + backButton.w)
 80024a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002658 <HandleTouch+0x4e8>)
 80024a6:	885b      	ldrh	r3, [r3, #2]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b6c      	ldr	r3, [pc, #432]	@ (800265c <HandleTouch+0x4ec>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	4619      	mov	r1, r3
 80024b0:	4b6a      	ldr	r3, [pc, #424]	@ (800265c <HandleTouch+0x4ec>)
 80024b2:	889b      	ldrh	r3, [r3, #4]
 80024b4:	440b      	add	r3, r1
 80024b6:	429a      	cmp	r2, r3
 80024b8:	dc18      	bgt.n	80024ec <HandleTouch+0x37c>
				&& TS_State.Y >= backButton.y
 80024ba:	4b67      	ldr	r3, [pc, #412]	@ (8002658 <HandleTouch+0x4e8>)
 80024bc:	889a      	ldrh	r2, [r3, #4]
 80024be:	4b67      	ldr	r3, [pc, #412]	@ (800265c <HandleTouch+0x4ec>)
 80024c0:	885b      	ldrh	r3, [r3, #2]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d312      	bcc.n	80024ec <HandleTouch+0x37c>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 80024c6:	4b64      	ldr	r3, [pc, #400]	@ (8002658 <HandleTouch+0x4e8>)
 80024c8:	889b      	ldrh	r3, [r3, #4]
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b63      	ldr	r3, [pc, #396]	@ (800265c <HandleTouch+0x4ec>)
 80024ce:	885b      	ldrh	r3, [r3, #2]
 80024d0:	4619      	mov	r1, r3
 80024d2:	4b62      	ldr	r3, [pc, #392]	@ (800265c <HandleTouch+0x4ec>)
 80024d4:	88db      	ldrh	r3, [r3, #6]
 80024d6:	440b      	add	r3, r1
 80024d8:	429a      	cmp	r2, r3
 80024da:	dc07      	bgt.n	80024ec <HandleTouch+0x37c>
			currentPage = PAGE_MAIN;
 80024dc:	4b5d      	ldr	r3, [pc, #372]	@ (8002654 <HandleTouch+0x4e4>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 80024e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002660 <HandleTouch+0x4f0>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fa1e 	bl	8001928 <DrawMainPage>
		}
		//queueSelect button
		if (TS_State.X >= queueSelectButton.x
 80024ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002658 <HandleTouch+0x4e8>)
 80024ee:	885a      	ldrh	r2, [r3, #2]
 80024f0:	4b5c      	ldr	r3, [pc, #368]	@ (8002664 <HandleTouch+0x4f4>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d339      	bcc.n	800256c <HandleTouch+0x3fc>
				&& TS_State.X <= (queueSelectButton.x + queueSelectButton.w)
 80024f8:	4b57      	ldr	r3, [pc, #348]	@ (8002658 <HandleTouch+0x4e8>)
 80024fa:	885b      	ldrh	r3, [r3, #2]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b59      	ldr	r3, [pc, #356]	@ (8002664 <HandleTouch+0x4f4>)
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	4b57      	ldr	r3, [pc, #348]	@ (8002664 <HandleTouch+0x4f4>)
 8002506:	889b      	ldrh	r3, [r3, #4]
 8002508:	440b      	add	r3, r1
 800250a:	429a      	cmp	r2, r3
 800250c:	dc2e      	bgt.n	800256c <HandleTouch+0x3fc>
				&& TS_State.Y >= queueSelectButton.y
 800250e:	4b52      	ldr	r3, [pc, #328]	@ (8002658 <HandleTouch+0x4e8>)
 8002510:	889a      	ldrh	r2, [r3, #4]
 8002512:	4b54      	ldr	r3, [pc, #336]	@ (8002664 <HandleTouch+0x4f4>)
 8002514:	885b      	ldrh	r3, [r3, #2]
 8002516:	429a      	cmp	r2, r3
 8002518:	d328      	bcc.n	800256c <HandleTouch+0x3fc>
				&& TS_State.Y <= (queueSelectButton.y + queueSelectButton.h)) {
 800251a:	4b4f      	ldr	r3, [pc, #316]	@ (8002658 <HandleTouch+0x4e8>)
 800251c:	889b      	ldrh	r3, [r3, #4]
 800251e:	461a      	mov	r2, r3
 8002520:	4b50      	ldr	r3, [pc, #320]	@ (8002664 <HandleTouch+0x4f4>)
 8002522:	885b      	ldrh	r3, [r3, #2]
 8002524:	4619      	mov	r1, r3
 8002526:	4b4f      	ldr	r3, [pc, #316]	@ (8002664 <HandleTouch+0x4f4>)
 8002528:	88db      	ldrh	r3, [r3, #6]
 800252a:	440b      	add	r3, r1
 800252c:	429a      	cmp	r2, r3
 800252e:	dc1d      	bgt.n	800256c <HandleTouch+0x3fc>
			HAL_Delay(20);
 8002530:	2014      	movs	r0, #20
 8002532:	f002 ff9f 	bl	8005474 <HAL_Delay>
			//store the protocol in queueBuffer
			if (queueSize < MAX_QUEUE_SIZE) {
 8002536:	4b4c      	ldr	r3, [pc, #304]	@ (8002668 <HandleTouch+0x4f8>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b09      	cmp	r3, #9
 800253c:	d816      	bhi.n	800256c <HandleTouch+0x3fc>
				queueProtocol(pageNum, protocol_offset);
 800253e:	4b48      	ldr	r3, [pc, #288]	@ (8002660 <HandleTouch+0x4f0>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	4b41      	ldr	r3, [pc, #260]	@ (800264c <HandleTouch+0x4dc>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	4610      	mov	r0, r2
 800254c:	f7fe ffb8 	bl	80014c0 <queueProtocol>
				queueSize++;
 8002550:	4b45      	ldr	r3, [pc, #276]	@ (8002668 <HandleTouch+0x4f8>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	3301      	adds	r3, #1
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b43      	ldr	r3, [pc, #268]	@ (8002668 <HandleTouch+0x4f8>)
 800255a:	701a      	strb	r2, [r3, #0]
				currentPage = PAGE_QUEUE;
 800255c:	4b3d      	ldr	r3, [pc, #244]	@ (8002654 <HandleTouch+0x4e4>)
 800255e:	2202      	movs	r2, #2
 8002560:	701a      	strb	r2, [r3, #0]
				DrawQueuePage(queueSize);
 8002562:	4b41      	ldr	r3, [pc, #260]	@ (8002668 <HandleTouch+0x4f8>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fc66 	bl	8001e38 <DrawQueuePage>
			} else {
				//handle queue buffer being full
			}
		}
		//select button
		if (TS_State.X >= selectButton.x
 800256c:	4b3a      	ldr	r3, [pc, #232]	@ (8002658 <HandleTouch+0x4e8>)
 800256e:	885a      	ldrh	r2, [r3, #2]
 8002570:	4b3e      	ldr	r3, [pc, #248]	@ (800266c <HandleTouch+0x4fc>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d32c      	bcc.n	80025d2 <HandleTouch+0x462>
				&& TS_State.X <= (selectButton.x + selectButton.w)
 8002578:	4b37      	ldr	r3, [pc, #220]	@ (8002658 <HandleTouch+0x4e8>)
 800257a:	885b      	ldrh	r3, [r3, #2]
 800257c:	461a      	mov	r2, r3
 800257e:	4b3b      	ldr	r3, [pc, #236]	@ (800266c <HandleTouch+0x4fc>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	4619      	mov	r1, r3
 8002584:	4b39      	ldr	r3, [pc, #228]	@ (800266c <HandleTouch+0x4fc>)
 8002586:	889b      	ldrh	r3, [r3, #4]
 8002588:	440b      	add	r3, r1
 800258a:	429a      	cmp	r2, r3
 800258c:	dc21      	bgt.n	80025d2 <HandleTouch+0x462>
				&& TS_State.Y >= selectButton.y
 800258e:	4b32      	ldr	r3, [pc, #200]	@ (8002658 <HandleTouch+0x4e8>)
 8002590:	889a      	ldrh	r2, [r3, #4]
 8002592:	4b36      	ldr	r3, [pc, #216]	@ (800266c <HandleTouch+0x4fc>)
 8002594:	885b      	ldrh	r3, [r3, #2]
 8002596:	429a      	cmp	r2, r3
 8002598:	d31b      	bcc.n	80025d2 <HandleTouch+0x462>
				&& TS_State.Y <= (selectButton.y + selectButton.h)) {
 800259a:	4b2f      	ldr	r3, [pc, #188]	@ (8002658 <HandleTouch+0x4e8>)
 800259c:	889b      	ldrh	r3, [r3, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	4b32      	ldr	r3, [pc, #200]	@ (800266c <HandleTouch+0x4fc>)
 80025a2:	885b      	ldrh	r3, [r3, #2]
 80025a4:	4619      	mov	r1, r3
 80025a6:	4b31      	ldr	r3, [pc, #196]	@ (800266c <HandleTouch+0x4fc>)
 80025a8:	88db      	ldrh	r3, [r3, #6]
 80025aa:	440b      	add	r3, r1
 80025ac:	429a      	cmp	r2, r3
 80025ae:	dc10      	bgt.n	80025d2 <HandleTouch+0x462>
			HAL_Delay(20);
 80025b0:	2014      	movs	r0, #20
 80025b2:	f002 ff5f 	bl	8005474 <HAL_Delay>
			//transmit protocol and move to finish page
			transmitProtocol(pageNum, protocol_offset);
 80025b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002660 <HandleTouch+0x4f0>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b23      	ldr	r3, [pc, #140]	@ (800264c <HandleTouch+0x4dc>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f7fe ff28 	bl	8001418 <transmitProtocol>
			currentPage = PAGE_FINISH;
 80025c8:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <HandleTouch+0x4e4>)
 80025ca:	2204      	movs	r2, #4
 80025cc:	701a      	strb	r2, [r3, #0]
			DrawPageFinish();
 80025ce:	f7ff fd89 	bl	80020e4 <DrawPageFinish>
		}
		//delete button
		if (TS_State.X >= deleteButton.x
 80025d2:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <HandleTouch+0x4e8>)
 80025d4:	885a      	ldrh	r2, [r3, #2]
 80025d6:	4b26      	ldr	r3, [pc, #152]	@ (8002670 <HandleTouch+0x500>)
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d32e      	bcc.n	800263c <HandleTouch+0x4cc>
				&& TS_State.X <= (deleteButton.x + deleteButton.w)
 80025de:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <HandleTouch+0x4e8>)
 80025e0:	885b      	ldrh	r3, [r3, #2]
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b22      	ldr	r3, [pc, #136]	@ (8002670 <HandleTouch+0x500>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	4619      	mov	r1, r3
 80025ea:	4b21      	ldr	r3, [pc, #132]	@ (8002670 <HandleTouch+0x500>)
 80025ec:	889b      	ldrh	r3, [r3, #4]
 80025ee:	440b      	add	r3, r1
 80025f0:	429a      	cmp	r2, r3
 80025f2:	dc23      	bgt.n	800263c <HandleTouch+0x4cc>
				&& TS_State.Y >= deleteButton.y
 80025f4:	4b18      	ldr	r3, [pc, #96]	@ (8002658 <HandleTouch+0x4e8>)
 80025f6:	889a      	ldrh	r2, [r3, #4]
 80025f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002670 <HandleTouch+0x500>)
 80025fa:	885b      	ldrh	r3, [r3, #2]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d31d      	bcc.n	800263c <HandleTouch+0x4cc>
				&& TS_State.Y <= (deleteButton.y + deleteButton.h)) {
 8002600:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <HandleTouch+0x4e8>)
 8002602:	889b      	ldrh	r3, [r3, #4]
 8002604:	461a      	mov	r2, r3
 8002606:	4b1a      	ldr	r3, [pc, #104]	@ (8002670 <HandleTouch+0x500>)
 8002608:	885b      	ldrh	r3, [r3, #2]
 800260a:	4619      	mov	r1, r3
 800260c:	4b18      	ldr	r3, [pc, #96]	@ (8002670 <HandleTouch+0x500>)
 800260e:	88db      	ldrh	r3, [r3, #6]
 8002610:	440b      	add	r3, r1
 8002612:	429a      	cmp	r2, r3
 8002614:	dc12      	bgt.n	800263c <HandleTouch+0x4cc>
			//move to delete confirmation page
			currentPage = PAGE_CONFIRMATION;
 8002616:	4b0f      	ldr	r3, [pc, #60]	@ (8002654 <HandleTouch+0x4e4>)
 8002618:	2203      	movs	r2, #3
 800261a:	701a      	strb	r2, [r3, #0]
			DrawConfirmationPage(pageNum, protocol_offset);
 800261c:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <HandleTouch+0x4f0>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <HandleTouch+0x4dc>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	4610      	mov	r0, r2
 800262a:	f7ff fcdb 	bl	8001fe4 <DrawConfirmationPage>
		}
		//next page wont register touch until you let go
		while (TS_State.TouchDetected) {
 800262e:	e005      	b.n	800263c <HandleTouch+0x4cc>
			BSP_TS_GetState(&TS_State);
 8002630:	4809      	ldr	r0, [pc, #36]	@ (8002658 <HandleTouch+0x4e8>)
 8002632:	f002 fe2b 	bl	800528c <BSP_TS_GetState>
			if (!TS_State.TouchDetected) {
			}
			HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8002636:	2014      	movs	r0, #20
 8002638:	f002 ff1c 	bl	8005474 <HAL_Delay>
		while (TS_State.TouchDetected) {
 800263c:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <HandleTouch+0x4e8>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f5      	bne.n	8002630 <HandleTouch+0x4c0>
		}
		break;
 8002644:	e122      	b.n	800288c <HandleTouch+0x71c>
 8002646:	bf00      	nop
 8002648:	20008f98 	.word	0x20008f98
 800264c:	20008f99 	.word	0x20008f99
 8002650:	20000000 	.word	0x20000000
 8002654:	20000605 	.word	0x20000605
 8002658:	200005f8 	.word	0x200005f8
 800265c:	200000ac 	.word	0x200000ac
 8002660:	200001de 	.word	0x200001de
 8002664:	2000015c 	.word	0x2000015c
 8002668:	20008310 	.word	0x20008310
 800266c:	20000188 	.word	0x20000188
 8002670:	200001b4 	.word	0x200001b4
	case PAGE_QUEUE:
		//back button
		if (TS_State.X >= backButton.x
 8002674:	4b87      	ldr	r3, [pc, #540]	@ (8002894 <HandleTouch+0x724>)
 8002676:	885a      	ldrh	r2, [r3, #2]
 8002678:	4b87      	ldr	r3, [pc, #540]	@ (8002898 <HandleTouch+0x728>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d32e      	bcc.n	80026de <HandleTouch+0x56e>
				&& TS_State.X <= (backButton.x + backButton.w)
 8002680:	4b84      	ldr	r3, [pc, #528]	@ (8002894 <HandleTouch+0x724>)
 8002682:	885b      	ldrh	r3, [r3, #2]
 8002684:	461a      	mov	r2, r3
 8002686:	4b84      	ldr	r3, [pc, #528]	@ (8002898 <HandleTouch+0x728>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	4619      	mov	r1, r3
 800268c:	4b82      	ldr	r3, [pc, #520]	@ (8002898 <HandleTouch+0x728>)
 800268e:	889b      	ldrh	r3, [r3, #4]
 8002690:	440b      	add	r3, r1
 8002692:	429a      	cmp	r2, r3
 8002694:	dc23      	bgt.n	80026de <HandleTouch+0x56e>
				&& TS_State.Y >= backButton.y
 8002696:	4b7f      	ldr	r3, [pc, #508]	@ (8002894 <HandleTouch+0x724>)
 8002698:	889a      	ldrh	r2, [r3, #4]
 800269a:	4b7f      	ldr	r3, [pc, #508]	@ (8002898 <HandleTouch+0x728>)
 800269c:	885b      	ldrh	r3, [r3, #2]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d31d      	bcc.n	80026de <HandleTouch+0x56e>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 80026a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002894 <HandleTouch+0x724>)
 80026a4:	889b      	ldrh	r3, [r3, #4]
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002898 <HandleTouch+0x728>)
 80026aa:	885b      	ldrh	r3, [r3, #2]
 80026ac:	4619      	mov	r1, r3
 80026ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002898 <HandleTouch+0x728>)
 80026b0:	88db      	ldrh	r3, [r3, #6]
 80026b2:	440b      	add	r3, r1
 80026b4:	429a      	cmp	r2, r3
 80026b6:	dc12      	bgt.n	80026de <HandleTouch+0x56e>
			currentPage = PAGE_MAIN;
 80026b8:	4b78      	ldr	r3, [pc, #480]	@ (800289c <HandleTouch+0x72c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 80026be:	4b78      	ldr	r3, [pc, #480]	@ (80028a0 <HandleTouch+0x730>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff f930 	bl	8001928 <DrawMainPage>
			//next page wont register touch until you let go
			while (TS_State.TouchDetected) {
 80026c8:	e005      	b.n	80026d6 <HandleTouch+0x566>
				BSP_TS_GetState(&TS_State);
 80026ca:	4872      	ldr	r0, [pc, #456]	@ (8002894 <HandleTouch+0x724>)
 80026cc:	f002 fdde 	bl	800528c <BSP_TS_GetState>
				if (!TS_State.TouchDetected) {
				}
				HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 80026d0:	2014      	movs	r0, #20
 80026d2:	f002 fecf 	bl	8005474 <HAL_Delay>
			while (TS_State.TouchDetected) {
 80026d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002894 <HandleTouch+0x724>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f5      	bne.n	80026ca <HandleTouch+0x55a>
			}
		}
		//run button
		if (TS_State.X >= runButton.x
 80026de:	4b6d      	ldr	r3, [pc, #436]	@ (8002894 <HandleTouch+0x724>)
 80026e0:	885a      	ldrh	r2, [r3, #2]
 80026e2:	4b70      	ldr	r3, [pc, #448]	@ (80028a4 <HandleTouch+0x734>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	f0c0 80cd 	bcc.w	8002886 <HandleTouch+0x716>
				&& TS_State.X <= (runButton.x + runButton.w)
 80026ec:	4b69      	ldr	r3, [pc, #420]	@ (8002894 <HandleTouch+0x724>)
 80026ee:	885b      	ldrh	r3, [r3, #2]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b6c      	ldr	r3, [pc, #432]	@ (80028a4 <HandleTouch+0x734>)
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	4619      	mov	r1, r3
 80026f8:	4b6a      	ldr	r3, [pc, #424]	@ (80028a4 <HandleTouch+0x734>)
 80026fa:	889b      	ldrh	r3, [r3, #4]
 80026fc:	440b      	add	r3, r1
 80026fe:	429a      	cmp	r2, r3
 8002700:	f300 80c1 	bgt.w	8002886 <HandleTouch+0x716>
				&& TS_State.Y >= runButton.y
 8002704:	4b63      	ldr	r3, [pc, #396]	@ (8002894 <HandleTouch+0x724>)
 8002706:	889a      	ldrh	r2, [r3, #4]
 8002708:	4b66      	ldr	r3, [pc, #408]	@ (80028a4 <HandleTouch+0x734>)
 800270a:	885b      	ldrh	r3, [r3, #2]
 800270c:	429a      	cmp	r2, r3
 800270e:	f0c0 80ba 	bcc.w	8002886 <HandleTouch+0x716>
				&& TS_State.Y <= (runButton.y + runButton.h)) {
 8002712:	4b60      	ldr	r3, [pc, #384]	@ (8002894 <HandleTouch+0x724>)
 8002714:	889b      	ldrh	r3, [r3, #4]
 8002716:	461a      	mov	r2, r3
 8002718:	4b62      	ldr	r3, [pc, #392]	@ (80028a4 <HandleTouch+0x734>)
 800271a:	885b      	ldrh	r3, [r3, #2]
 800271c:	4619      	mov	r1, r3
 800271e:	4b61      	ldr	r3, [pc, #388]	@ (80028a4 <HandleTouch+0x734>)
 8002720:	88db      	ldrh	r3, [r3, #6]
 8002722:	440b      	add	r3, r1
 8002724:	429a      	cmp	r2, r3
 8002726:	f300 80ae 	bgt.w	8002886 <HandleTouch+0x716>
			HAL_Delay(20);
 800272a:	2014      	movs	r0, #20
 800272c:	f002 fea2 	bl	8005474 <HAL_Delay>
			//handle queue functionality here dorjee
			transmitQueuedProtocols(queueSize);
 8002730:	4b5d      	ldr	r3, [pc, #372]	@ (80028a8 <HandleTouch+0x738>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe ff1d 	bl	8001574 <transmitQueuedProtocols>
			queueSize = 0;
 800273a:	4b5b      	ldr	r3, [pc, #364]	@ (80028a8 <HandleTouch+0x738>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
			currentPage = PAGE_FINISH;
 8002740:	4b56      	ldr	r3, [pc, #344]	@ (800289c <HandleTouch+0x72c>)
 8002742:	2204      	movs	r2, #4
 8002744:	701a      	strb	r2, [r3, #0]
			DrawPageFinish();
 8002746:	f7ff fccd 	bl	80020e4 <DrawPageFinish>
		}
		break;
 800274a:	e09c      	b.n	8002886 <HandleTouch+0x716>
	case PAGE_CONFIRMATION:
		//back button
		if (TS_State.X >= backButton.x
 800274c:	4b51      	ldr	r3, [pc, #324]	@ (8002894 <HandleTouch+0x724>)
 800274e:	885a      	ldrh	r2, [r3, #2]
 8002750:	4b51      	ldr	r3, [pc, #324]	@ (8002898 <HandleTouch+0x728>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d329      	bcc.n	80027ac <HandleTouch+0x63c>
				&& TS_State.X <= (backButton.x + backButton.w)
 8002758:	4b4e      	ldr	r3, [pc, #312]	@ (8002894 <HandleTouch+0x724>)
 800275a:	885b      	ldrh	r3, [r3, #2]
 800275c:	461a      	mov	r2, r3
 800275e:	4b4e      	ldr	r3, [pc, #312]	@ (8002898 <HandleTouch+0x728>)
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	4b4c      	ldr	r3, [pc, #304]	@ (8002898 <HandleTouch+0x728>)
 8002766:	889b      	ldrh	r3, [r3, #4]
 8002768:	440b      	add	r3, r1
 800276a:	429a      	cmp	r2, r3
 800276c:	dc1e      	bgt.n	80027ac <HandleTouch+0x63c>
				&& TS_State.Y >= backButton.y
 800276e:	4b49      	ldr	r3, [pc, #292]	@ (8002894 <HandleTouch+0x724>)
 8002770:	889a      	ldrh	r2, [r3, #4]
 8002772:	4b49      	ldr	r3, [pc, #292]	@ (8002898 <HandleTouch+0x728>)
 8002774:	885b      	ldrh	r3, [r3, #2]
 8002776:	429a      	cmp	r2, r3
 8002778:	d318      	bcc.n	80027ac <HandleTouch+0x63c>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 800277a:	4b46      	ldr	r3, [pc, #280]	@ (8002894 <HandleTouch+0x724>)
 800277c:	889b      	ldrh	r3, [r3, #4]
 800277e:	461a      	mov	r2, r3
 8002780:	4b45      	ldr	r3, [pc, #276]	@ (8002898 <HandleTouch+0x728>)
 8002782:	885b      	ldrh	r3, [r3, #2]
 8002784:	4619      	mov	r1, r3
 8002786:	4b44      	ldr	r3, [pc, #272]	@ (8002898 <HandleTouch+0x728>)
 8002788:	88db      	ldrh	r3, [r3, #6]
 800278a:	440b      	add	r3, r1
 800278c:	429a      	cmp	r2, r3
 800278e:	dc0d      	bgt.n	80027ac <HandleTouch+0x63c>
			currentPage = PAGE_SELECT;
 8002790:	4b42      	ldr	r3, [pc, #264]	@ (800289c <HandleTouch+0x72c>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
			DrawInfoPage(buttons[i].label);
 8002796:	4b45      	ldr	r3, [pc, #276]	@ (80028ac <HandleTouch+0x73c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	222a      	movs	r2, #42	@ 0x2a
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	3308      	adds	r3, #8
 80027a2:	4a43      	ldr	r2, [pc, #268]	@ (80028b0 <HandleTouch+0x740>)
 80027a4:	4413      	add	r3, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fa98 	bl	8001cdc <DrawInfoPage>
		}
		//confirm button
		if (TS_State.X >= confirmButton.x
 80027ac:	4b39      	ldr	r3, [pc, #228]	@ (8002894 <HandleTouch+0x724>)
 80027ae:	885a      	ldrh	r2, [r3, #2]
 80027b0:	4b40      	ldr	r3, [pc, #256]	@ (80028b4 <HandleTouch+0x744>)
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d336      	bcc.n	8002826 <HandleTouch+0x6b6>
				&& TS_State.X <= (confirmButton.x + confirmButton.w)
 80027b8:	4b36      	ldr	r3, [pc, #216]	@ (8002894 <HandleTouch+0x724>)
 80027ba:	885b      	ldrh	r3, [r3, #2]
 80027bc:	461a      	mov	r2, r3
 80027be:	4b3d      	ldr	r3, [pc, #244]	@ (80028b4 <HandleTouch+0x744>)
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	4619      	mov	r1, r3
 80027c4:	4b3b      	ldr	r3, [pc, #236]	@ (80028b4 <HandleTouch+0x744>)
 80027c6:	889b      	ldrh	r3, [r3, #4]
 80027c8:	440b      	add	r3, r1
 80027ca:	429a      	cmp	r2, r3
 80027cc:	dc2b      	bgt.n	8002826 <HandleTouch+0x6b6>
				&& TS_State.Y >= confirmButton.y
 80027ce:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <HandleTouch+0x724>)
 80027d0:	889a      	ldrh	r2, [r3, #4]
 80027d2:	4b38      	ldr	r3, [pc, #224]	@ (80028b4 <HandleTouch+0x744>)
 80027d4:	885b      	ldrh	r3, [r3, #2]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d325      	bcc.n	8002826 <HandleTouch+0x6b6>
				&& TS_State.Y <= (confirmButton.y + confirmButton.h)) {
 80027da:	4b2e      	ldr	r3, [pc, #184]	@ (8002894 <HandleTouch+0x724>)
 80027dc:	889b      	ldrh	r3, [r3, #4]
 80027de:	461a      	mov	r2, r3
 80027e0:	4b34      	ldr	r3, [pc, #208]	@ (80028b4 <HandleTouch+0x744>)
 80027e2:	885b      	ldrh	r3, [r3, #2]
 80027e4:	4619      	mov	r1, r3
 80027e6:	4b33      	ldr	r3, [pc, #204]	@ (80028b4 <HandleTouch+0x744>)
 80027e8:	88db      	ldrh	r3, [r3, #6]
 80027ea:	440b      	add	r3, r1
 80027ec:	429a      	cmp	r2, r3
 80027ee:	dc1a      	bgt.n	8002826 <HandleTouch+0x6b6>
			HAL_Delay(20);
 80027f0:	2014      	movs	r0, #20
 80027f2:	f002 fe3f 	bl	8005474 <HAL_Delay>
			//delete protocol and go back to main page
			deleteProtocol(pageNum, protocol_offset);
 80027f6:	4b2a      	ldr	r3, [pc, #168]	@ (80028a0 <HandleTouch+0x730>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b2e      	ldr	r3, [pc, #184]	@ (80028b8 <HandleTouch+0x748>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f7fe fef4 	bl	80015f0 <deleteProtocol>
			currentPage = PAGE_MAIN;
 8002808:	4b24      	ldr	r3, [pc, #144]	@ (800289c <HandleTouch+0x72c>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 800280e:	4b24      	ldr	r3, [pc, #144]	@ (80028a0 <HandleTouch+0x730>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f888 	bl	8001928 <DrawMainPage>
		}
		//next page wont register touch until you let go
		while (TS_State.TouchDetected) {
 8002818:	e005      	b.n	8002826 <HandleTouch+0x6b6>
			BSP_TS_GetState(&TS_State);
 800281a:	481e      	ldr	r0, [pc, #120]	@ (8002894 <HandleTouch+0x724>)
 800281c:	f002 fd36 	bl	800528c <BSP_TS_GetState>
			if (!TS_State.TouchDetected) {
			}
			HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8002820:	2014      	movs	r0, #20
 8002822:	f002 fe27 	bl	8005474 <HAL_Delay>
		while (TS_State.TouchDetected) {
 8002826:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <HandleTouch+0x724>)
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f5      	bne.n	800281a <HandleTouch+0x6aa>
		}
		break;
 800282e:	e02d      	b.n	800288c <HandleTouch+0x71c>
	case PAGE_FINISH:
		if (TS_State.X >= backButton.x
 8002830:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <HandleTouch+0x724>)
 8002832:	885a      	ldrh	r2, [r3, #2]
 8002834:	4b18      	ldr	r3, [pc, #96]	@ (8002898 <HandleTouch+0x728>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d326      	bcc.n	800288a <HandleTouch+0x71a>
				&& TS_State.X <= (backButton.x + backButton.w)
 800283c:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <HandleTouch+0x724>)
 800283e:	885b      	ldrh	r3, [r3, #2]
 8002840:	461a      	mov	r2, r3
 8002842:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <HandleTouch+0x728>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	4619      	mov	r1, r3
 8002848:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <HandleTouch+0x728>)
 800284a:	889b      	ldrh	r3, [r3, #4]
 800284c:	440b      	add	r3, r1
 800284e:	429a      	cmp	r2, r3
 8002850:	dc1b      	bgt.n	800288a <HandleTouch+0x71a>
				&& TS_State.Y >= backButton.y
 8002852:	4b10      	ldr	r3, [pc, #64]	@ (8002894 <HandleTouch+0x724>)
 8002854:	889a      	ldrh	r2, [r3, #4]
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <HandleTouch+0x728>)
 8002858:	885b      	ldrh	r3, [r3, #2]
 800285a:	429a      	cmp	r2, r3
 800285c:	d315      	bcc.n	800288a <HandleTouch+0x71a>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 800285e:	4b0d      	ldr	r3, [pc, #52]	@ (8002894 <HandleTouch+0x724>)
 8002860:	889b      	ldrh	r3, [r3, #4]
 8002862:	461a      	mov	r2, r3
 8002864:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <HandleTouch+0x728>)
 8002866:	885b      	ldrh	r3, [r3, #2]
 8002868:	4619      	mov	r1, r3
 800286a:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <HandleTouch+0x728>)
 800286c:	88db      	ldrh	r3, [r3, #6]
 800286e:	440b      	add	r3, r1
 8002870:	429a      	cmp	r2, r3
 8002872:	dc0a      	bgt.n	800288a <HandleTouch+0x71a>
			currentPage = PAGE_MAIN;
 8002874:	4b09      	ldr	r3, [pc, #36]	@ (800289c <HandleTouch+0x72c>)
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 800287a:	4b09      	ldr	r3, [pc, #36]	@ (80028a0 <HandleTouch+0x730>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff f852 	bl	8001928 <DrawMainPage>
		}
		break;
 8002884:	e001      	b.n	800288a <HandleTouch+0x71a>
		break;
 8002886:	bf00      	nop
 8002888:	e000      	b.n	800288c <HandleTouch+0x71c>
		break;
 800288a:	bf00      	nop
	}
}
 800288c:	4618      	mov	r0, r3
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd90      	pop	{r4, r7, pc}
 8002894:	200005f8 	.word	0x200005f8
 8002898:	200000ac 	.word	0x200000ac
 800289c:	20000605 	.word	0x20000605
 80028a0:	200001de 	.word	0x200001de
 80028a4:	20000104 	.word	0x20000104
 80028a8:	20008310 	.word	0x20008310
 80028ac:	20000608 	.word	0x20000608
 80028b0:	20000000 	.word	0x20000000
 80028b4:	20000130 	.word	0x20000130
 80028b8:	20008f99 	.word	0x20008f99

080028bc <get_sector_address>:

//I name sectors from 1-14. the actual sectors are from 5-23. this functions maps them
uint32_t get_sector_address(uint32_t sector) {
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
	switch (sector) {
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	2b0d      	cmp	r3, #13
 80028ca:	d83b      	bhi.n	8002944 <get_sector_address+0x88>
 80028cc:	a201      	add	r2, pc, #4	@ (adr r2, 80028d4 <get_sector_address+0x18>)
 80028ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d2:	bf00      	nop
 80028d4:	0800290d 	.word	0x0800290d
 80028d8:	08002911 	.word	0x08002911
 80028dc:	08002915 	.word	0x08002915
 80028e0:	08002919 	.word	0x08002919
 80028e4:	0800291d 	.word	0x0800291d
 80028e8:	08002921 	.word	0x08002921
 80028ec:	08002925 	.word	0x08002925
 80028f0:	08002929 	.word	0x08002929
 80028f4:	0800292d 	.word	0x0800292d
 80028f8:	08002931 	.word	0x08002931
 80028fc:	08002935 	.word	0x08002935
 8002900:	08002939 	.word	0x08002939
 8002904:	0800293d 	.word	0x0800293d
 8002908:	08002941 	.word	0x08002941
	case 1:
		return SECTOR_5;
 800290c:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <get_sector_address+0x98>)
 800290e:	e01a      	b.n	8002946 <get_sector_address+0x8a>
	case 2:
		return SECTOR_6;
 8002910:	4b11      	ldr	r3, [pc, #68]	@ (8002958 <get_sector_address+0x9c>)
 8002912:	e018      	b.n	8002946 <get_sector_address+0x8a>
	case 3:
		return SECTOR_7;
 8002914:	4b11      	ldr	r3, [pc, #68]	@ (800295c <get_sector_address+0xa0>)
 8002916:	e016      	b.n	8002946 <get_sector_address+0x8a>
	case 4:
		return SECTOR_8;
 8002918:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <get_sector_address+0xa4>)
 800291a:	e014      	b.n	8002946 <get_sector_address+0x8a>
	case 5:
		return SECTOR_9;
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <get_sector_address+0xa8>)
 800291e:	e012      	b.n	8002946 <get_sector_address+0x8a>
	case 6:
		return SECTOR_10;
 8002920:	4b11      	ldr	r3, [pc, #68]	@ (8002968 <get_sector_address+0xac>)
 8002922:	e010      	b.n	8002946 <get_sector_address+0x8a>
	case 7:
		return SECTOR_11;
 8002924:	4b11      	ldr	r3, [pc, #68]	@ (800296c <get_sector_address+0xb0>)
 8002926:	e00e      	b.n	8002946 <get_sector_address+0x8a>
	case 8:
		return SECTOR_17;
 8002928:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <get_sector_address+0xb4>)
 800292a:	e00c      	b.n	8002946 <get_sector_address+0x8a>
	case 9:
		return SECTOR_18;
 800292c:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <get_sector_address+0xb8>)
 800292e:	e00a      	b.n	8002946 <get_sector_address+0x8a>
	case 10:
		return SECTOR_19;
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <get_sector_address+0xbc>)
 8002932:	e008      	b.n	8002946 <get_sector_address+0x8a>
	case 11:
		return SECTOR_20;
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <get_sector_address+0xc0>)
 8002936:	e006      	b.n	8002946 <get_sector_address+0x8a>
	case 12:
		return SECTOR_21;
 8002938:	4b11      	ldr	r3, [pc, #68]	@ (8002980 <get_sector_address+0xc4>)
 800293a:	e004      	b.n	8002946 <get_sector_address+0x8a>
	case 13:
		return SECTOR_22;
 800293c:	4b11      	ldr	r3, [pc, #68]	@ (8002984 <get_sector_address+0xc8>)
 800293e:	e002      	b.n	8002946 <get_sector_address+0x8a>
	case 14:
		return SECTOR_23;
 8002940:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <get_sector_address+0xcc>)
 8002942:	e000      	b.n	8002946 <get_sector_address+0x8a>
	default:
		break;
 8002944:	bf00      	nop
	}
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	08020000 	.word	0x08020000
 8002958:	08040000 	.word	0x08040000
 800295c:	08060000 	.word	0x08060000
 8002960:	08080000 	.word	0x08080000
 8002964:	080a0000 	.word	0x080a0000
 8002968:	080c0000 	.word	0x080c0000
 800296c:	080e0000 	.word	0x080e0000
 8002970:	08120000 	.word	0x08120000
 8002974:	08140000 	.word	0x08140000
 8002978:	08160000 	.word	0x08160000
 800297c:	08180000 	.word	0x08180000
 8002980:	081a0000 	.word	0x081a0000
 8002984:	081c0000 	.word	0x081c0000
 8002988:	081e0000 	.word	0x081e0000

0800298c <sector_mapping>:

uint32_t sector_mapping(uint32_t sector) {
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	2b0d      	cmp	r3, #13
 800299a:	d83b      	bhi.n	8002a14 <sector_mapping+0x88>
 800299c:	a201      	add	r2, pc, #4	@ (adr r2, 80029a4 <sector_mapping+0x18>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029dd 	.word	0x080029dd
 80029a8:	080029e1 	.word	0x080029e1
 80029ac:	080029e5 	.word	0x080029e5
 80029b0:	080029e9 	.word	0x080029e9
 80029b4:	080029ed 	.word	0x080029ed
 80029b8:	080029f1 	.word	0x080029f1
 80029bc:	080029f5 	.word	0x080029f5
 80029c0:	080029f9 	.word	0x080029f9
 80029c4:	080029fd 	.word	0x080029fd
 80029c8:	08002a01 	.word	0x08002a01
 80029cc:	08002a05 	.word	0x08002a05
 80029d0:	08002a09 	.word	0x08002a09
 80029d4:	08002a0d 	.word	0x08002a0d
 80029d8:	08002a11 	.word	0x08002a11
	case 1:
		return 5;
 80029dc:	2305      	movs	r3, #5
 80029de:	e019      	b.n	8002a14 <sector_mapping+0x88>
	case 2:
		return 6;
 80029e0:	2306      	movs	r3, #6
 80029e2:	e017      	b.n	8002a14 <sector_mapping+0x88>
	case 3:
		return 7;
 80029e4:	2307      	movs	r3, #7
 80029e6:	e015      	b.n	8002a14 <sector_mapping+0x88>
	case 4:
		return 8;
 80029e8:	2308      	movs	r3, #8
 80029ea:	e013      	b.n	8002a14 <sector_mapping+0x88>
	case 5:
		return 9;
 80029ec:	2309      	movs	r3, #9
 80029ee:	e011      	b.n	8002a14 <sector_mapping+0x88>
	case 6:
		return 10;
 80029f0:	230a      	movs	r3, #10
 80029f2:	e00f      	b.n	8002a14 <sector_mapping+0x88>
	case 7:
		return 11;
 80029f4:	230b      	movs	r3, #11
 80029f6:	e00d      	b.n	8002a14 <sector_mapping+0x88>
	case 8:
		return 17;
 80029f8:	2311      	movs	r3, #17
 80029fa:	e00b      	b.n	8002a14 <sector_mapping+0x88>
	case 9:
		return 18;
 80029fc:	2312      	movs	r3, #18
 80029fe:	e009      	b.n	8002a14 <sector_mapping+0x88>
	case 10:
		return 19;
 8002a00:	2313      	movs	r3, #19
 8002a02:	e007      	b.n	8002a14 <sector_mapping+0x88>
	case 11:
		return 20;
 8002a04:	2314      	movs	r3, #20
 8002a06:	e005      	b.n	8002a14 <sector_mapping+0x88>
	case 12:
		return 21;
 8002a08:	2315      	movs	r3, #21
 8002a0a:	e003      	b.n	8002a14 <sector_mapping+0x88>
	case 13:
		return 22;
 8002a0c:	2316      	movs	r3, #22
 8002a0e:	e001      	b.n	8002a14 <sector_mapping+0x88>
	case 14:
		return 23;
 8002a10:	2317      	movs	r3, #23
 8002a12:	e7ff      	b.n	8002a14 <sector_mapping+0x88>
	}
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a32:	f002 fcff 	bl	8005434 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	//10 hz interrupt
	if (htim == &htim10) {
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a0d      	ldr	r2, [pc, #52]	@ (8002a70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d10b      	bne.n	8002a56 <HAL_TIM_PeriodElapsedCallback+0x36>
		if (!USB_BUSY) {
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_TIM_PeriodElapsedCallback+0x2c>
			checkTouchFlag = 1;
 8002a46:	4b0c      	ldr	r3, [pc, #48]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
		}
		count++;
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	4a0a      	ldr	r2, [pc, #40]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a54:	6013      	str	r3, [r2, #0]
	}

	//use this for a slower frequency application
	if (count == 5) {
 8002a56:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d102      	bne.n	8002a64 <HAL_TIM_PeriodElapsedCallback+0x44>
		//checkTouchFlag = 1;
		count = 0;
 8002a5e:	4b07      	ldr	r3, [pc, #28]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END Callback 1 */
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40001000 	.word	0x40001000
 8002a70:	200004ec 	.word	0x200004ec
 8002a74:	20008311 	.word	0x20008311
 8002a78:	20000604 	.word	0x20000604
 8002a7c:	20000600 	.word	0x20000600

08002a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a84:	b672      	cpsid	i
}
 8002a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <Error_Handler+0x8>

08002a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <HAL_MspInit+0x4c>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad8 <HAL_MspInit+0x4c>)
 8002a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad8 <HAL_MspInit+0x4c>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <HAL_MspInit+0x4c>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	4a08      	ldr	r2, [pc, #32]	@ (8002ad8 <HAL_MspInit+0x4c>)
 8002ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_MspInit+0x4c>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800

08002adc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8002b18 <HAL_CRC_MspInit+0x3c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d10d      	bne.n	8002b0a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <HAL_CRC_MspInit+0x40>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	4a09      	ldr	r2, [pc, #36]	@ (8002b1c <HAL_CRC_MspInit+0x40>)
 8002af8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afe:	4b07      	ldr	r3, [pc, #28]	@ (8002b1c <HAL_CRC_MspInit+0x40>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40023000 	.word	0x40023000
 8002b1c:	40023800 	.word	0x40023800

08002b20 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0e      	ldr	r2, [pc, #56]	@ (8002b68 <HAL_DMA2D_MspInit+0x48>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d115      	bne.n	8002b5e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <HAL_DMA2D_MspInit+0x4c>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b6c <HAL_DMA2D_MspInit+0x4c>)
 8002b3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b42:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <HAL_DMA2D_MspInit+0x4c>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2105      	movs	r1, #5
 8002b52:	205a      	movs	r0, #90	@ 0x5a
 8002b54:	f002 fd6a 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002b58:	205a      	movs	r0, #90	@ 0x5a
 8002b5a:	f002 fd83 	bl	8005664 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	4002b000 	.word	0x4002b000
 8002b6c:	40023800 	.word	0x40023800

08002b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	@ 0x28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 0314 	add.w	r3, r7, #20
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a29      	ldr	r2, [pc, #164]	@ (8002c34 <HAL_I2C_MspInit+0xc4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d14b      	bne.n	8002c2a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	4b28      	ldr	r3, [pc, #160]	@ (8002c38 <HAL_I2C_MspInit+0xc8>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	4a27      	ldr	r2, [pc, #156]	@ (8002c38 <HAL_I2C_MspInit+0xc8>)
 8002b9c:	f043 0304 	orr.w	r3, r3, #4
 8002ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba2:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <HAL_I2C_MspInit+0xc8>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b21      	ldr	r3, [pc, #132]	@ (8002c38 <HAL_I2C_MspInit+0xc8>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	4a20      	ldr	r2, [pc, #128]	@ (8002c38 <HAL_I2C_MspInit+0xc8>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002c38 <HAL_I2C_MspInit+0xc8>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002bca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bd0:	2312      	movs	r3, #18
 8002bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bdc:	2304      	movs	r3, #4
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	4619      	mov	r1, r3
 8002be6:	4815      	ldr	r0, [pc, #84]	@ (8002c3c <HAL_I2C_MspInit+0xcc>)
 8002be8:	f003 fcd4 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002bec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bf2:	2312      	movs	r3, #18
 8002bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bfe:	2304      	movs	r3, #4
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	4619      	mov	r1, r3
 8002c08:	480d      	ldr	r0, [pc, #52]	@ (8002c40 <HAL_I2C_MspInit+0xd0>)
 8002c0a:	f003 fcc3 	bl	8006594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <HAL_I2C_MspInit+0xc8>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	4a08      	ldr	r2, [pc, #32]	@ (8002c38 <HAL_I2C_MspInit+0xc8>)
 8002c18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <HAL_I2C_MspInit+0xc8>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002c2a:	bf00      	nop
 8002c2c:	3728      	adds	r7, #40	@ 0x28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40005c00 	.word	0x40005c00
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40020800 	.word	0x40020800
 8002c40:	40020000 	.word	0x40020000

08002c44 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0b      	ldr	r2, [pc, #44]	@ (8002c80 <HAL_I2C_MspDeInit+0x3c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d10f      	bne.n	8002c76 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002c56:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_I2C_MspDeInit+0x40>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <HAL_I2C_MspDeInit+0x40>)
 8002c5c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c60:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8002c62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c66:	4808      	ldr	r0, [pc, #32]	@ (8002c88 <HAL_I2C_MspDeInit+0x44>)
 8002c68:	f003 fe40 	bl	80068ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8002c6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c70:	4806      	ldr	r0, [pc, #24]	@ (8002c8c <HAL_I2C_MspDeInit+0x48>)
 8002c72:	f003 fe3b 	bl	80068ec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40005c00 	.word	0x40005c00
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020800 	.word	0x40020800
 8002c8c:	40020000 	.word	0x40020000

08002c90 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b09a      	sub	sp, #104	@ 0x68
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cac:	2230      	movs	r2, #48	@ 0x30
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f00f f8f7 	bl	8011ea4 <memset>
  if(hltdc->Instance==LTDC)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a85      	ldr	r2, [pc, #532]	@ (8002ed0 <HAL_LTDC_MspInit+0x240>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	f040 8103 	bne.w	8002ec8 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002cc6:	23c0      	movs	r3, #192	@ 0xc0
 8002cc8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002cca:	2304      	movs	r3, #4
 8002ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002cce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f008 f99b 	bl	800b014 <HAL_RCCEx_PeriphCLKConfig>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002ce4:	f7ff fecc 	bl	8002a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	4b79      	ldr	r3, [pc, #484]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf0:	4a78      	ldr	r2, [pc, #480]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002cf2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cf6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cf8:	4b76      	ldr	r3, [pc, #472]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d00:	623b      	str	r3, [r7, #32]
 8002d02:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	4b72      	ldr	r3, [pc, #456]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	4a71      	ldr	r2, [pc, #452]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d0e:	f043 0320 	orr.w	r3, r3, #32
 8002d12:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d14:	4b6f      	ldr	r3, [pc, #444]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	4b6b      	ldr	r3, [pc, #428]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d28:	4a6a      	ldr	r2, [pc, #424]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d30:	4b68      	ldr	r3, [pc, #416]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	4b64      	ldr	r3, [pc, #400]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d44:	4a63      	ldr	r2, [pc, #396]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d46:	f043 0302 	orr.w	r3, r3, #2
 8002d4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d4c:	4b61      	ldr	r3, [pc, #388]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d60:	4a5c      	ldr	r2, [pc, #368]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d66:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d68:	4b5a      	ldr	r3, [pc, #360]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	4b56      	ldr	r3, [pc, #344]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	4a55      	ldr	r2, [pc, #340]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d7e:	f043 0304 	orr.w	r3, r3, #4
 8002d82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d84:	4b53      	ldr	r3, [pc, #332]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d90:	2300      	movs	r3, #0
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	4b4f      	ldr	r3, [pc, #316]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d98:	4a4e      	ldr	r2, [pc, #312]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002d9a:	f043 0308 	orr.w	r3, r3, #8
 8002d9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ed4 <HAL_LTDC_MspInit+0x244>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002dac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002db0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002dbe:	230e      	movs	r3, #14
 8002dc0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002dc2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4843      	ldr	r0, [pc, #268]	@ (8002ed8 <HAL_LTDC_MspInit+0x248>)
 8002dca:	f003 fbe3 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002dce:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002dd2:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002de0:	230e      	movs	r3, #14
 8002de2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002de8:	4619      	mov	r1, r3
 8002dea:	483c      	ldr	r0, [pc, #240]	@ (8002edc <HAL_LTDC_MspInit+0x24c>)
 8002dec:	f003 fbd2 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002df0:	2303      	movs	r3, #3
 8002df2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df4:	2302      	movs	r3, #2
 8002df6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e00:	2309      	movs	r3, #9
 8002e02:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4835      	ldr	r0, [pc, #212]	@ (8002ee0 <HAL_LTDC_MspInit+0x250>)
 8002e0c:	f003 fbc2 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002e10:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002e14:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e22:	230e      	movs	r3, #14
 8002e24:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e26:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	482c      	ldr	r0, [pc, #176]	@ (8002ee0 <HAL_LTDC_MspInit+0x250>)
 8002e2e:	f003 fbb1 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002e32:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002e36:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e40:	2300      	movs	r3, #0
 8002e42:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e44:	230e      	movs	r3, #14
 8002e46:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4825      	ldr	r0, [pc, #148]	@ (8002ee4 <HAL_LTDC_MspInit+0x254>)
 8002e50:	f003 fba0 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002e54:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002e58:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e66:	230e      	movs	r3, #14
 8002e68:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e6e:	4619      	mov	r1, r3
 8002e70:	481d      	ldr	r0, [pc, #116]	@ (8002ee8 <HAL_LTDC_MspInit+0x258>)
 8002e72:	f003 fb8f 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002e76:	2348      	movs	r3, #72	@ 0x48
 8002e78:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e86:	230e      	movs	r3, #14
 8002e88:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e8a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4816      	ldr	r0, [pc, #88]	@ (8002eec <HAL_LTDC_MspInit+0x25c>)
 8002e92:	f003 fb7f 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002e96:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002e9a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ea8:	2309      	movs	r3, #9
 8002eaa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	480c      	ldr	r0, [pc, #48]	@ (8002ee4 <HAL_LTDC_MspInit+0x254>)
 8002eb4:	f003 fb6e 	bl	8006594 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2105      	movs	r1, #5
 8002ebc:	2058      	movs	r0, #88	@ 0x58
 8002ebe:	f002 fbb5 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ec2:	2058      	movs	r0, #88	@ 0x58
 8002ec4:	f002 fbce 	bl	8005664 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002ec8:	bf00      	nop
 8002eca:	3768      	adds	r7, #104	@ 0x68
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40016800 	.word	0x40016800
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40021400 	.word	0x40021400
 8002edc:	40020000 	.word	0x40020000
 8002ee0:	40020400 	.word	0x40020400
 8002ee4:	40021800 	.word	0x40021800
 8002ee8:	40020800 	.word	0x40020800
 8002eec:	40020c00 	.word	0x40020c00

08002ef0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	@ 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 0314 	add.w	r3, r7, #20
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a19      	ldr	r2, [pc, #100]	@ (8002f74 <HAL_SPI_MspInit+0x84>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d12c      	bne.n	8002f6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	4b18      	ldr	r3, [pc, #96]	@ (8002f78 <HAL_SPI_MspInit+0x88>)
 8002f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1a:	4a17      	ldr	r2, [pc, #92]	@ (8002f78 <HAL_SPI_MspInit+0x88>)
 8002f1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f22:	4b15      	ldr	r3, [pc, #84]	@ (8002f78 <HAL_SPI_MspInit+0x88>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f2a:	613b      	str	r3, [r7, #16]
 8002f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b11      	ldr	r3, [pc, #68]	@ (8002f78 <HAL_SPI_MspInit+0x88>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	4a10      	ldr	r2, [pc, #64]	@ (8002f78 <HAL_SPI_MspInit+0x88>)
 8002f38:	f043 0320 	orr.w	r3, r3, #32
 8002f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f78 <HAL_SPI_MspInit+0x88>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002f4a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002f5c:	2305      	movs	r3, #5
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	4619      	mov	r1, r3
 8002f66:	4805      	ldr	r0, [pc, #20]	@ (8002f7c <HAL_SPI_MspInit+0x8c>)
 8002f68:	f003 fb14 	bl	8006594 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002f6c:	bf00      	nop
 8002f6e:	3728      	adds	r7, #40	@ 0x28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40015000 	.word	0x40015000
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40021400 	.word	0x40021400

08002f80 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a08      	ldr	r2, [pc, #32]	@ (8002fb0 <HAL_SPI_MspDeInit+0x30>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10a      	bne.n	8002fa8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002f92:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <HAL_SPI_MspDeInit+0x34>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f96:	4a07      	ldr	r2, [pc, #28]	@ (8002fb4 <HAL_SPI_MspDeInit+0x34>)
 8002f98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002f9c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002f9e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002fa2:	4805      	ldr	r0, [pc, #20]	@ (8002fb8 <HAL_SPI_MspDeInit+0x38>)
 8002fa4:	f003 fca2 	bl	80068ec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40015000 	.word	0x40015000
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40021400 	.word	0x40021400

08002fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800303c <HAL_TIM_Base_MspInit+0x80>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d116      	bne.n	8002ffc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8003040 <HAL_TIM_Base_MspInit+0x84>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8003040 <HAL_TIM_Base_MspInit+0x84>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fde:	4b18      	ldr	r3, [pc, #96]	@ (8003040 <HAL_TIM_Base_MspInit+0x84>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2100      	movs	r1, #0
 8002fee:	2019      	movs	r0, #25
 8002ff0:	f002 fb1c 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ff4:	2019      	movs	r0, #25
 8002ff6:	f002 fb35 	bl	8005664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002ffa:	e01a      	b.n	8003032 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a10      	ldr	r2, [pc, #64]	@ (8003044 <HAL_TIM_Base_MspInit+0x88>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d115      	bne.n	8003032 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	4b0d      	ldr	r3, [pc, #52]	@ (8003040 <HAL_TIM_Base_MspInit+0x84>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300e:	4a0c      	ldr	r2, [pc, #48]	@ (8003040 <HAL_TIM_Base_MspInit+0x84>)
 8003010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003014:	6453      	str	r3, [r2, #68]	@ 0x44
 8003016:	4b0a      	ldr	r3, [pc, #40]	@ (8003040 <HAL_TIM_Base_MspInit+0x84>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003022:	2200      	movs	r2, #0
 8003024:	2100      	movs	r1, #0
 8003026:	2019      	movs	r0, #25
 8003028:	f002 fb00 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800302c:	2019      	movs	r0, #25
 800302e:	f002 fb19 	bl	8005664 <HAL_NVIC_EnableIRQ>
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40023800 	.word	0x40023800
 8003044:	40014400 	.word	0x40014400

08003048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08c      	sub	sp, #48	@ 0x30
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 031c 	add.w	r3, r7, #28
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a42      	ldr	r2, [pc, #264]	@ (8003170 <HAL_UART_MspInit+0x128>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d14b      	bne.n	8003102 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	4b41      	ldr	r3, [pc, #260]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	4a40      	ldr	r2, [pc, #256]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 8003074:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003078:	6413      	str	r3, [r2, #64]	@ 0x40
 800307a:	4b3e      	ldr	r3, [pc, #248]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	4b3a      	ldr	r3, [pc, #232]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	4a39      	ldr	r2, [pc, #228]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	6313      	str	r3, [r2, #48]	@ 0x30
 8003096:	4b37      	ldr	r3, [pc, #220]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	4b33      	ldr	r3, [pc, #204]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	4a32      	ldr	r2, [pc, #200]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 80030ac:	f043 0308 	orr.w	r3, r3, #8
 80030b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b2:	4b30      	ldr	r3, [pc, #192]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80030be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030cc:	2303      	movs	r3, #3
 80030ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80030d0:	2308      	movs	r3, #8
 80030d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d4:	f107 031c 	add.w	r3, r7, #28
 80030d8:	4619      	mov	r1, r3
 80030da:	4827      	ldr	r0, [pc, #156]	@ (8003178 <HAL_UART_MspInit+0x130>)
 80030dc:	f003 fa5a 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030e0:	2304      	movs	r3, #4
 80030e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ec:	2303      	movs	r3, #3
 80030ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80030f0:	2308      	movs	r3, #8
 80030f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f4:	f107 031c 	add.w	r3, r7, #28
 80030f8:	4619      	mov	r1, r3
 80030fa:	4820      	ldr	r0, [pc, #128]	@ (800317c <HAL_UART_MspInit+0x134>)
 80030fc:	f003 fa4a 	bl	8006594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003100:	e031      	b.n	8003166 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1e      	ldr	r2, [pc, #120]	@ (8003180 <HAL_UART_MspInit+0x138>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d12c      	bne.n	8003166 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	4b18      	ldr	r3, [pc, #96]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 8003112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003114:	4a17      	ldr	r2, [pc, #92]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 8003116:	f043 0310 	orr.w	r3, r3, #16
 800311a:	6453      	str	r3, [r2, #68]	@ 0x44
 800311c:	4b15      	ldr	r3, [pc, #84]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 800311e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003128:	2300      	movs	r3, #0
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003130:	4a10      	ldr	r2, [pc, #64]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6313      	str	r3, [r2, #48]	@ 0x30
 8003138:	4b0e      	ldr	r3, [pc, #56]	@ (8003174 <HAL_UART_MspInit+0x12c>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003144:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003152:	2303      	movs	r3, #3
 8003154:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003156:	2307      	movs	r3, #7
 8003158:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315a:	f107 031c 	add.w	r3, r7, #28
 800315e:	4619      	mov	r1, r3
 8003160:	4808      	ldr	r0, [pc, #32]	@ (8003184 <HAL_UART_MspInit+0x13c>)
 8003162:	f003 fa17 	bl	8006594 <HAL_GPIO_Init>
}
 8003166:	bf00      	nop
 8003168:	3730      	adds	r7, #48	@ 0x30
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40005000 	.word	0x40005000
 8003174:	40023800 	.word	0x40023800
 8003178:	40020800 	.word	0x40020800
 800317c:	40020c00 	.word	0x40020c00
 8003180:	40011000 	.word	0x40011000
 8003184:	40020000 	.word	0x40020000

08003188 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800318e:	1d3b      	adds	r3, r7, #4
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800319c:	4b3b      	ldr	r3, [pc, #236]	@ (800328c <HAL_FMC_MspInit+0x104>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d16f      	bne.n	8003284 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80031a4:	4b39      	ldr	r3, [pc, #228]	@ (800328c <HAL_FMC_MspInit+0x104>)
 80031a6:	2201      	movs	r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	4b38      	ldr	r3, [pc, #224]	@ (8003290 <HAL_FMC_MspInit+0x108>)
 80031b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b2:	4a37      	ldr	r2, [pc, #220]	@ (8003290 <HAL_FMC_MspInit+0x108>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6393      	str	r3, [r2, #56]	@ 0x38
 80031ba:	4b35      	ldr	r3, [pc, #212]	@ (8003290 <HAL_FMC_MspInit+0x108>)
 80031bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80031c6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80031ca:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031cc:	2302      	movs	r3, #2
 80031ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d4:	2303      	movs	r3, #3
 80031d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80031d8:	230c      	movs	r3, #12
 80031da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031dc:	1d3b      	adds	r3, r7, #4
 80031de:	4619      	mov	r1, r3
 80031e0:	482c      	ldr	r0, [pc, #176]	@ (8003294 <HAL_FMC_MspInit+0x10c>)
 80031e2:	f003 f9d7 	bl	8006594 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80031e6:	2301      	movs	r3, #1
 80031e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f2:	2303      	movs	r3, #3
 80031f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80031f6:	230c      	movs	r3, #12
 80031f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80031fa:	1d3b      	adds	r3, r7, #4
 80031fc:	4619      	mov	r1, r3
 80031fe:	4826      	ldr	r0, [pc, #152]	@ (8003298 <HAL_FMC_MspInit+0x110>)
 8003200:	f003 f9c8 	bl	8006594 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003204:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003208:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320a:	2302      	movs	r3, #2
 800320c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003212:	2303      	movs	r3, #3
 8003214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003216:	230c      	movs	r3, #12
 8003218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	4619      	mov	r1, r3
 800321e:	481f      	ldr	r0, [pc, #124]	@ (800329c <HAL_FMC_MspInit+0x114>)
 8003220:	f003 f9b8 	bl	8006594 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003224:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003228:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322a:	2302      	movs	r3, #2
 800322c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003232:	2303      	movs	r3, #3
 8003234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003236:	230c      	movs	r3, #12
 8003238:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800323a:	1d3b      	adds	r3, r7, #4
 800323c:	4619      	mov	r1, r3
 800323e:	4818      	ldr	r0, [pc, #96]	@ (80032a0 <HAL_FMC_MspInit+0x118>)
 8003240:	f003 f9a8 	bl	8006594 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8003244:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003248:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003252:	2303      	movs	r3, #3
 8003254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003256:	230c      	movs	r3, #12
 8003258:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	4619      	mov	r1, r3
 800325e:	4811      	ldr	r0, [pc, #68]	@ (80032a4 <HAL_FMC_MspInit+0x11c>)
 8003260:	f003 f998 	bl	8006594 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003264:	2360      	movs	r3, #96	@ 0x60
 8003266:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003268:	2302      	movs	r3, #2
 800326a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003270:	2303      	movs	r3, #3
 8003272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003274:	230c      	movs	r3, #12
 8003276:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003278:	1d3b      	adds	r3, r7, #4
 800327a:	4619      	mov	r1, r3
 800327c:	480a      	ldr	r0, [pc, #40]	@ (80032a8 <HAL_FMC_MspInit+0x120>)
 800327e:	f003 f989 	bl	8006594 <HAL_GPIO_Init>
 8003282:	e000      	b.n	8003286 <HAL_FMC_MspInit+0xfe>
    return;
 8003284:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20008f9c 	.word	0x20008f9c
 8003290:	40023800 	.word	0x40023800
 8003294:	40021400 	.word	0x40021400
 8003298:	40020800 	.word	0x40020800
 800329c:	40021800 	.word	0x40021800
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40020c00 	.word	0x40020c00
 80032a8:	40020400 	.word	0x40020400

080032ac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80032b4:	f7ff ff68 	bl	8003188 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08e      	sub	sp, #56	@ 0x38
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	4b33      	ldr	r3, [pc, #204]	@ (80033a4 <HAL_InitTick+0xe4>)
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	4a32      	ldr	r2, [pc, #200]	@ (80033a4 <HAL_InitTick+0xe4>)
 80032da:	f043 0310 	orr.w	r3, r3, #16
 80032de:	6413      	str	r3, [r2, #64]	@ 0x40
 80032e0:	4b30      	ldr	r3, [pc, #192]	@ (80033a4 <HAL_InitTick+0xe4>)
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032ec:	f107 0210 	add.w	r2, r7, #16
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f007 fe5a 	bl	800afb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d103      	bne.n	800330e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003306:	f007 fe2b 	bl	800af60 <HAL_RCC_GetPCLK1Freq>
 800330a:	6378      	str	r0, [r7, #52]	@ 0x34
 800330c:	e004      	b.n	8003318 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800330e:	f007 fe27 	bl	800af60 <HAL_RCC_GetPCLK1Freq>
 8003312:	4603      	mov	r3, r0
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331a:	4a23      	ldr	r2, [pc, #140]	@ (80033a8 <HAL_InitTick+0xe8>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	0c9b      	lsrs	r3, r3, #18
 8003322:	3b01      	subs	r3, #1
 8003324:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003326:	4b21      	ldr	r3, [pc, #132]	@ (80033ac <HAL_InitTick+0xec>)
 8003328:	4a21      	ldr	r2, [pc, #132]	@ (80033b0 <HAL_InitTick+0xf0>)
 800332a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800332c:	4b1f      	ldr	r3, [pc, #124]	@ (80033ac <HAL_InitTick+0xec>)
 800332e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003332:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003334:	4a1d      	ldr	r2, [pc, #116]	@ (80033ac <HAL_InitTick+0xec>)
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003338:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800333a:	4b1c      	ldr	r3, [pc, #112]	@ (80033ac <HAL_InitTick+0xec>)
 800333c:	2200      	movs	r2, #0
 800333e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003340:	4b1a      	ldr	r3, [pc, #104]	@ (80033ac <HAL_InitTick+0xec>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003346:	4b19      	ldr	r3, [pc, #100]	@ (80033ac <HAL_InitTick+0xec>)
 8003348:	2200      	movs	r2, #0
 800334a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800334c:	4817      	ldr	r0, [pc, #92]	@ (80033ac <HAL_InitTick+0xec>)
 800334e:	f008 feb9 	bl	800c0c4 <HAL_TIM_Base_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003358:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800335c:	2b00      	cmp	r3, #0
 800335e:	d11b      	bne.n	8003398 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003360:	4812      	ldr	r0, [pc, #72]	@ (80033ac <HAL_InitTick+0xec>)
 8003362:	f008 feff 	bl	800c164 <HAL_TIM_Base_Start_IT>
 8003366:	4603      	mov	r3, r0
 8003368:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800336c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003370:	2b00      	cmp	r3, #0
 8003372:	d111      	bne.n	8003398 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003374:	2036      	movs	r0, #54	@ 0x36
 8003376:	f002 f975 	bl	8005664 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b0f      	cmp	r3, #15
 800337e:	d808      	bhi.n	8003392 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003380:	2200      	movs	r2, #0
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	2036      	movs	r0, #54	@ 0x36
 8003386:	f002 f951 	bl	800562c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800338a:	4a0a      	ldr	r2, [pc, #40]	@ (80033b4 <HAL_InitTick+0xf4>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	e002      	b.n	8003398 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003398:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800339c:	4618      	mov	r0, r3
 800339e:	3738      	adds	r7, #56	@ 0x38
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40023800 	.word	0x40023800
 80033a8:	431bde83 	.word	0x431bde83
 80033ac:	20008fa0 	.word	0x20008fa0
 80033b0:	40001000 	.word	0x40001000
 80033b4:	20000268 	.word	0x20000268

080033b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <NMI_Handler+0x4>

080033c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <HardFault_Handler+0x4>

080033c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033cc:	bf00      	nop
 80033ce:	e7fd      	b.n	80033cc <MemManage_Handler+0x4>

080033d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d4:	bf00      	nop
 80033d6:	e7fd      	b.n	80033d4 <BusFault_Handler+0x4>

080033d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033dc:	bf00      	nop
 80033de:	e7fd      	b.n	80033dc <UsageFault_Handler+0x4>

080033e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800341c:	4803      	ldr	r0, [pc, #12]	@ (800342c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800341e:	f008 ff11 	bl	800c244 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003422:	4803      	ldr	r0, [pc, #12]	@ (8003430 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003424:	f008 ff0e 	bl	800c244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}
 800342c:	200004a4 	.word	0x200004a4
 8003430:	200004ec 	.word	0x200004ec

08003434 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003438:	4802      	ldr	r0, [pc, #8]	@ (8003444 <TIM6_DAC_IRQHandler+0x10>)
 800343a:	f008 ff03 	bl	800c244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20008fa0 	.word	0x20008fa0

08003448 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800344c:	4802      	ldr	r0, [pc, #8]	@ (8003458 <OTG_HS_IRQHandler+0x10>)
 800344e:	f003 fe53 	bl	80070f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	2000a098 	.word	0x2000a098

0800345c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003460:	4802      	ldr	r0, [pc, #8]	@ (800346c <LTDC_IRQHandler+0x10>)
 8003462:	f006 fe4b 	bl	800a0fc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	200003a4 	.word	0x200003a4

08003470 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003474:	4802      	ldr	r0, [pc, #8]	@ (8003480 <DMA2D_IRQHandler+0x10>)
 8003476:	f002 fc3a 	bl	8005cee <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000310 	.word	0x20000310

08003484 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e00a      	b.n	80034ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003496:	f3af 8000 	nop.w
 800349a:	4601      	mov	r1, r0
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	60ba      	str	r2, [r7, #8]
 80034a2:	b2ca      	uxtb	r2, r1
 80034a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	3301      	adds	r3, #1
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	dbf0      	blt.n	8003496 <_read+0x12>
  }

  return len;
 80034b4:	687b      	ldr	r3, [r7, #4]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <_close>:
  }
  return len;
}

int _close(int file)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034e6:	605a      	str	r2, [r3, #4]
  return 0;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <_isatty>:

int _isatty(int file)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034fe:	2301      	movs	r3, #1
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003530:	4a14      	ldr	r2, [pc, #80]	@ (8003584 <_sbrk+0x5c>)
 8003532:	4b15      	ldr	r3, [pc, #84]	@ (8003588 <_sbrk+0x60>)
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800353c:	4b13      	ldr	r3, [pc, #76]	@ (800358c <_sbrk+0x64>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003544:	4b11      	ldr	r3, [pc, #68]	@ (800358c <_sbrk+0x64>)
 8003546:	4a12      	ldr	r2, [pc, #72]	@ (8003590 <_sbrk+0x68>)
 8003548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <_sbrk+0x64>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	429a      	cmp	r2, r3
 8003556:	d207      	bcs.n	8003568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003558:	f00e fd02 	bl	8011f60 <__errno>
 800355c:	4603      	mov	r3, r0
 800355e:	220c      	movs	r2, #12
 8003560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003562:	f04f 33ff 	mov.w	r3, #4294967295
 8003566:	e009      	b.n	800357c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003568:	4b08      	ldr	r3, [pc, #32]	@ (800358c <_sbrk+0x64>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800356e:	4b07      	ldr	r3, [pc, #28]	@ (800358c <_sbrk+0x64>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	4a05      	ldr	r2, [pc, #20]	@ (800358c <_sbrk+0x64>)
 8003578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800357a:	68fb      	ldr	r3, [r7, #12]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20030000 	.word	0x20030000
 8003588:	00000400 	.word	0x00000400
 800358c:	20008fe8 	.word	0x20008fe8
 8003590:	2000a5c8 	.word	0x2000a5c8

08003594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003598:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <SystemInit+0x20>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359e:	4a05      	ldr	r2, [pc, #20]	@ (80035b4 <SystemInit+0x20>)
 80035a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035a8:	bf00      	nop
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80035b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035bc:	f7ff ffea 	bl	8003594 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035c0:	480c      	ldr	r0, [pc, #48]	@ (80035f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035c2:	490d      	ldr	r1, [pc, #52]	@ (80035f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035c4:	4a0d      	ldr	r2, [pc, #52]	@ (80035fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c8:	e002      	b.n	80035d0 <LoopCopyDataInit>

080035ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ce:	3304      	adds	r3, #4

080035d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d4:	d3f9      	bcc.n	80035ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003600 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003604 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035dc:	e001      	b.n	80035e2 <LoopFillZerobss>

080035de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e0:	3204      	adds	r2, #4

080035e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e4:	d3fb      	bcc.n	80035de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80035e6:	f00e fcc1 	bl	8011f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ea:	f7fd f86b 	bl	80006c4 <main>
  bx  lr    
 80035ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80035f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80035f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035f8:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 80035fc:	08016d48 	.word	0x08016d48
  ldr r2, =_sbss
 8003600:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 8003604:	2000a5c4 	.word	0x2000a5c4

08003608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003608:	e7fe      	b.n	8003608 <ADC_IRQHandler>

0800360a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800360e:	f000 fe49 	bl	80042a4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8003612:	20ca      	movs	r0, #202	@ 0xca
 8003614:	f000 f95d 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8003618:	20c3      	movs	r0, #195	@ 0xc3
 800361a:	f000 f967 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800361e:	2008      	movs	r0, #8
 8003620:	f000 f964 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8003624:	2050      	movs	r0, #80	@ 0x50
 8003626:	f000 f961 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800362a:	20cf      	movs	r0, #207	@ 0xcf
 800362c:	f000 f951 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003630:	2000      	movs	r0, #0
 8003632:	f000 f95b 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8003636:	20c1      	movs	r0, #193	@ 0xc1
 8003638:	f000 f958 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800363c:	2030      	movs	r0, #48	@ 0x30
 800363e:	f000 f955 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8003642:	20ed      	movs	r0, #237	@ 0xed
 8003644:	f000 f945 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8003648:	2064      	movs	r0, #100	@ 0x64
 800364a:	f000 f94f 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800364e:	2003      	movs	r0, #3
 8003650:	f000 f94c 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8003654:	2012      	movs	r0, #18
 8003656:	f000 f949 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800365a:	2081      	movs	r0, #129	@ 0x81
 800365c:	f000 f946 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8003660:	20e8      	movs	r0, #232	@ 0xe8
 8003662:	f000 f936 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8003666:	2085      	movs	r0, #133	@ 0x85
 8003668:	f000 f940 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800366c:	2000      	movs	r0, #0
 800366e:	f000 f93d 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003672:	2078      	movs	r0, #120	@ 0x78
 8003674:	f000 f93a 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8003678:	20cb      	movs	r0, #203	@ 0xcb
 800367a:	f000 f92a 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800367e:	2039      	movs	r0, #57	@ 0x39
 8003680:	f000 f934 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8003684:	202c      	movs	r0, #44	@ 0x2c
 8003686:	f000 f931 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800368a:	2000      	movs	r0, #0
 800368c:	f000 f92e 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8003690:	2034      	movs	r0, #52	@ 0x34
 8003692:	f000 f92b 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8003696:	2002      	movs	r0, #2
 8003698:	f000 f928 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800369c:	20f7      	movs	r0, #247	@ 0xf7
 800369e:	f000 f918 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80036a2:	2020      	movs	r0, #32
 80036a4:	f000 f922 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80036a8:	20ea      	movs	r0, #234	@ 0xea
 80036aa:	f000 f912 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80036ae:	2000      	movs	r0, #0
 80036b0:	f000 f91c 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80036b4:	2000      	movs	r0, #0
 80036b6:	f000 f919 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80036ba:	20b1      	movs	r0, #177	@ 0xb1
 80036bc:	f000 f909 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80036c0:	2000      	movs	r0, #0
 80036c2:	f000 f913 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80036c6:	201b      	movs	r0, #27
 80036c8:	f000 f910 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80036cc:	20b6      	movs	r0, #182	@ 0xb6
 80036ce:	f000 f900 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80036d2:	200a      	movs	r0, #10
 80036d4:	f000 f90a 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80036d8:	20a2      	movs	r0, #162	@ 0xa2
 80036da:	f000 f907 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80036de:	20c0      	movs	r0, #192	@ 0xc0
 80036e0:	f000 f8f7 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80036e4:	2010      	movs	r0, #16
 80036e6:	f000 f901 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80036ea:	20c1      	movs	r0, #193	@ 0xc1
 80036ec:	f000 f8f1 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80036f0:	2010      	movs	r0, #16
 80036f2:	f000 f8fb 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80036f6:	20c5      	movs	r0, #197	@ 0xc5
 80036f8:	f000 f8eb 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80036fc:	2045      	movs	r0, #69	@ 0x45
 80036fe:	f000 f8f5 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8003702:	2015      	movs	r0, #21
 8003704:	f000 f8f2 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8003708:	20c7      	movs	r0, #199	@ 0xc7
 800370a:	f000 f8e2 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800370e:	2090      	movs	r0, #144	@ 0x90
 8003710:	f000 f8ec 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8003714:	2036      	movs	r0, #54	@ 0x36
 8003716:	f000 f8dc 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800371a:	20c8      	movs	r0, #200	@ 0xc8
 800371c:	f000 f8e6 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8003720:	20f2      	movs	r0, #242	@ 0xf2
 8003722:	f000 f8d6 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003726:	2000      	movs	r0, #0
 8003728:	f000 f8e0 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800372c:	20b0      	movs	r0, #176	@ 0xb0
 800372e:	f000 f8d0 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8003732:	20c2      	movs	r0, #194	@ 0xc2
 8003734:	f000 f8da 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003738:	20b6      	movs	r0, #182	@ 0xb6
 800373a:	f000 f8ca 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800373e:	200a      	movs	r0, #10
 8003740:	f000 f8d4 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8003744:	20a7      	movs	r0, #167	@ 0xa7
 8003746:	f000 f8d1 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800374a:	2027      	movs	r0, #39	@ 0x27
 800374c:	f000 f8ce 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003750:	2004      	movs	r0, #4
 8003752:	f000 f8cb 	bl	80038ec <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8003756:	202a      	movs	r0, #42	@ 0x2a
 8003758:	f000 f8bb 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800375c:	2000      	movs	r0, #0
 800375e:	f000 f8c5 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003762:	2000      	movs	r0, #0
 8003764:	f000 f8c2 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003768:	2000      	movs	r0, #0
 800376a:	f000 f8bf 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800376e:	20ef      	movs	r0, #239	@ 0xef
 8003770:	f000 f8bc 	bl	80038ec <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8003774:	202b      	movs	r0, #43	@ 0x2b
 8003776:	f000 f8ac 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800377a:	2000      	movs	r0, #0
 800377c:	f000 f8b6 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003780:	2000      	movs	r0, #0
 8003782:	f000 f8b3 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8003786:	2001      	movs	r0, #1
 8003788:	f000 f8b0 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800378c:	203f      	movs	r0, #63	@ 0x3f
 800378e:	f000 f8ad 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8003792:	20f6      	movs	r0, #246	@ 0xf6
 8003794:	f000 f89d 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003798:	2001      	movs	r0, #1
 800379a:	f000 f8a7 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800379e:	2000      	movs	r0, #0
 80037a0:	f000 f8a4 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80037a4:	2006      	movs	r0, #6
 80037a6:	f000 f8a1 	bl	80038ec <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80037aa:	202c      	movs	r0, #44	@ 0x2c
 80037ac:	f000 f891 	bl	80038d2 <ili9341_WriteReg>
  LCD_Delay(200);
 80037b0:	20c8      	movs	r0, #200	@ 0xc8
 80037b2:	f000 fe65 	bl	8004480 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80037b6:	2026      	movs	r0, #38	@ 0x26
 80037b8:	f000 f88b 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80037bc:	2001      	movs	r0, #1
 80037be:	f000 f895 	bl	80038ec <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80037c2:	20e0      	movs	r0, #224	@ 0xe0
 80037c4:	f000 f885 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80037c8:	200f      	movs	r0, #15
 80037ca:	f000 f88f 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80037ce:	2029      	movs	r0, #41	@ 0x29
 80037d0:	f000 f88c 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80037d4:	2024      	movs	r0, #36	@ 0x24
 80037d6:	f000 f889 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80037da:	200c      	movs	r0, #12
 80037dc:	f000 f886 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80037e0:	200e      	movs	r0, #14
 80037e2:	f000 f883 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80037e6:	2009      	movs	r0, #9
 80037e8:	f000 f880 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80037ec:	204e      	movs	r0, #78	@ 0x4e
 80037ee:	f000 f87d 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80037f2:	2078      	movs	r0, #120	@ 0x78
 80037f4:	f000 f87a 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80037f8:	203c      	movs	r0, #60	@ 0x3c
 80037fa:	f000 f877 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80037fe:	2009      	movs	r0, #9
 8003800:	f000 f874 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8003804:	2013      	movs	r0, #19
 8003806:	f000 f871 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800380a:	2005      	movs	r0, #5
 800380c:	f000 f86e 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8003810:	2017      	movs	r0, #23
 8003812:	f000 f86b 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003816:	2011      	movs	r0, #17
 8003818:	f000 f868 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800381c:	2000      	movs	r0, #0
 800381e:	f000 f865 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8003822:	20e1      	movs	r0, #225	@ 0xe1
 8003824:	f000 f855 	bl	80038d2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003828:	2000      	movs	r0, #0
 800382a:	f000 f85f 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800382e:	2016      	movs	r0, #22
 8003830:	f000 f85c 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003834:	201b      	movs	r0, #27
 8003836:	f000 f859 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800383a:	2004      	movs	r0, #4
 800383c:	f000 f856 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003840:	2011      	movs	r0, #17
 8003842:	f000 f853 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8003846:	2007      	movs	r0, #7
 8003848:	f000 f850 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800384c:	2031      	movs	r0, #49	@ 0x31
 800384e:	f000 f84d 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8003852:	2033      	movs	r0, #51	@ 0x33
 8003854:	f000 f84a 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003858:	2042      	movs	r0, #66	@ 0x42
 800385a:	f000 f847 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800385e:	2005      	movs	r0, #5
 8003860:	f000 f844 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003864:	200c      	movs	r0, #12
 8003866:	f000 f841 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800386a:	200a      	movs	r0, #10
 800386c:	f000 f83e 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003870:	2028      	movs	r0, #40	@ 0x28
 8003872:	f000 f83b 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8003876:	202f      	movs	r0, #47	@ 0x2f
 8003878:	f000 f838 	bl	80038ec <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800387c:	200f      	movs	r0, #15
 800387e:	f000 f835 	bl	80038ec <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8003882:	2011      	movs	r0, #17
 8003884:	f000 f825 	bl	80038d2 <ili9341_WriteReg>
  LCD_Delay(200);
 8003888:	20c8      	movs	r0, #200	@ 0xc8
 800388a:	f000 fdf9 	bl	8004480 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800388e:	2029      	movs	r0, #41	@ 0x29
 8003890:	f000 f81f 	bl	80038d2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8003894:	202c      	movs	r0, #44	@ 0x2c
 8003896:	f000 f81c 	bl	80038d2 <ili9341_WriteReg>
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}

0800389e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80038a2:	f000 fcff 	bl	80042a4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80038a6:	2103      	movs	r1, #3
 80038a8:	20d3      	movs	r0, #211	@ 0xd3
 80038aa:	f000 f82c 	bl	8003906 <ili9341_ReadData>
 80038ae:	4603      	mov	r3, r0
 80038b0:	b29b      	uxth	r3, r3
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80038ba:	2029      	movs	r0, #41	@ 0x29
 80038bc:	f000 f809 	bl	80038d2 <ili9341_WriteReg>
}
 80038c0:	bf00      	nop
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80038c8:	2028      	movs	r0, #40	@ 0x28
 80038ca:	f000 f802 	bl	80038d2 <ili9341_WriteReg>
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80038dc:	79fb      	ldrb	r3, [r7, #7]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fd7a 	bl	80043d8 <LCD_IO_WriteReg>
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80038f6:	88fb      	ldrh	r3, [r7, #6]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fd4b 	bl	8004394 <LCD_IO_WriteData>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	460a      	mov	r2, r1
 8003910:	80fb      	strh	r3, [r7, #6]
 8003912:	4613      	mov	r3, r2
 8003914:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003916:	797a      	ldrb	r2, [r7, #5]
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fd7d 	bl	800441c <LCD_IO_ReadData>
 8003922:	4603      	mov	r3, r0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8003930:	23f0      	movs	r3, #240	@ 0xf0
}
 8003932:	4618      	mov	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8003940:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fa59 	bl	8003e14 <stmpe811_GetInstance>
 8003962:	4603      	mov	r3, r0
 8003964:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	2bff      	cmp	r3, #255	@ 0xff
 800396a:	d112      	bne.n	8003992 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800396c:	2000      	movs	r0, #0
 800396e:	f000 fa51 	bl	8003e14 <stmpe811_GetInstance>
 8003972:	4603      	mov	r3, r0
 8003974:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8003976:	7bbb      	ldrb	r3, [r7, #14]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d80a      	bhi.n	8003992 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800397c:	7bbb      	ldrb	r3, [r7, #14]
 800397e:	88fa      	ldrh	r2, [r7, #6]
 8003980:	b2d1      	uxtb	r1, r2
 8003982:	4a06      	ldr	r2, [pc, #24]	@ (800399c <stmpe811_Init+0x4c>)
 8003984:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8003986:	f000 fd86 	bl	8004496 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 f807 	bl	80039a0 <stmpe811_Reset>
    }
  }
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20008fec 	.word	0x20008fec

080039a0 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2202      	movs	r2, #2
 80039b0:	2103      	movs	r1, #3
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fd7b 	bl	80044ae <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80039b8:	200a      	movs	r0, #10
 80039ba:	f000 fdb4 	bl	8004526 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2200      	movs	r2, #0
 80039c4:	2103      	movs	r1, #3
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fd71 	bl	80044ae <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80039cc:	2002      	movs	r0, #2
 80039ce:	f000 fdaa 	bl	8004526 <IOE_Delay>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80039da:	b590      	push	{r4, r7, lr}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	4603      	mov	r3, r0
 80039e2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80039e4:	f000 fd57 	bl	8004496 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fd70 	bl	80044d4 <IOE_Read>
 80039f4:	4603      	mov	r3, r0
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2101      	movs	r1, #1
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fd67 	bl	80044d4 <IOE_Read>
 8003a06:	4603      	mov	r3, r0
 8003a08:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003a0a:	4323      	orrs	r3, r4
 8003a0c:	b21b      	sxth	r3, r3
 8003a0e:	b29b      	uxth	r3, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd90      	pop	{r4, r7, pc}

08003a18 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2109      	movs	r1, #9
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fd51 	bl	80044d4 <IOE_Read>
 8003a32:	4603      	mov	r3, r0
 8003a34:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8003a3e:	88fb      	ldrh	r3, [r7, #6]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	7bfa      	ldrb	r2, [r7, #15]
 8003a44:	2109      	movs	r1, #9
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fd31 	bl	80044ae <IOE_Write>
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2109      	movs	r1, #9
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fd33 	bl	80044d4 <IOE_Read>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	2109      	movs	r1, #9
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fd13 	bl	80044ae <IOE_Write>
    
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	460a      	mov	r2, r1
 8003a9a:	80fb      	strh	r3, [r7, #6]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	210a      	movs	r1, #10
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fd12 	bl	80044d4 <IOE_Read>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	797b      	ldrb	r3, [r7, #5]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	210a      	movs	r1, #10
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fcf2 	bl	80044ae <IOE_Write>
}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	4603      	mov	r3, r0
 8003ada:	460a      	mov	r2, r1
 8003adc:	80fb      	strh	r3, [r7, #6]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	210a      	movs	r1, #10
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fcf1 	bl	80044d4 <IOE_Read>
 8003af2:	4603      	mov	r3, r0
 8003af4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8003af6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	b25a      	sxtb	r2, r3
 8003afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b02:	4013      	ands	r3, r2
 8003b04:	b25b      	sxtb	r3, r3
 8003b06:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	7bfa      	ldrb	r2, [r7, #15]
 8003b0e:	210a      	movs	r1, #10
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fccc 	bl	80044ae <IOE_Write>
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	4603      	mov	r3, r0
 8003b26:	460a      	mov	r2, r1
 8003b28:	80fb      	strh	r3, [r7, #6]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	210b      	movs	r1, #11
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fccd 	bl	80044d4 <IOE_Read>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	797b      	ldrb	r3, [r7, #5]
 8003b40:	4013      	ands	r3, r2
 8003b42:	b2db      	uxtb	r3, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	460a      	mov	r2, r1
 8003b56:	80fb      	strh	r3, [r7, #6]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	797a      	ldrb	r2, [r7, #5]
 8003b62:	210b      	movs	r1, #11
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fca2 	bl	80044ae <IOE_Write>
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	4603      	mov	r3, r0
 8003b7a:	6039      	str	r1, [r7, #0]
 8003b7c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2117      	movs	r1, #23
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fca3 	bl	80044d4 <IOE_Read>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	b25b      	sxtb	r3, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	b25a      	sxtb	r2, r3
 8003b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	b25b      	sxtb	r3, r3
 8003ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	2117      	movs	r1, #23
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fc7e 	bl	80044ae <IOE_Write>
}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2104      	movs	r1, #4
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fc82 	bl	80044d4 <IOE_Read>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	f023 0304 	bic.w	r3, r3, #4
 8003bda:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	2104      	movs	r1, #4
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fc62 	bl	80044ae <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	21f0      	movs	r1, #240	@ 0xf0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ffbf 	bl	8003b72 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	7bfa      	ldrb	r2, [r7, #15]
 8003c02:	2104      	movs	r1, #4
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fc52 	bl	80044ae <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2249      	movs	r2, #73	@ 0x49
 8003c10:	2120      	movs	r1, #32
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 fc4b 	bl	80044ae <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8003c18:	2002      	movs	r0, #2
 8003c1a:	f000 fc84 	bl	8004526 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2201      	movs	r2, #1
 8003c24:	2121      	movs	r1, #33	@ 0x21
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fc41 	bl	80044ae <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	229a      	movs	r2, #154	@ 0x9a
 8003c32:	2141      	movs	r1, #65	@ 0x41
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fc3a 	bl	80044ae <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2201      	movs	r2, #1
 8003c40:	214a      	movs	r1, #74	@ 0x4a
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fc33 	bl	80044ae <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	214b      	movs	r1, #75	@ 0x4b
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fc2c 	bl	80044ae <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	214b      	movs	r1, #75	@ 0x4b
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fc25 	bl	80044ae <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2201      	movs	r2, #1
 8003c6a:	2156      	movs	r1, #86	@ 0x56
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fc1e 	bl	80044ae <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2201      	movs	r2, #1
 8003c78:	2158      	movs	r1, #88	@ 0x58
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fc17 	bl	80044ae <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2201      	movs	r2, #1
 8003c86:	2140      	movs	r1, #64	@ 0x40
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fc10 	bl	80044ae <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003c8e:	88fb      	ldrh	r3, [r7, #6]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	22ff      	movs	r2, #255	@ 0xff
 8003c94:	210b      	movs	r1, #11
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fc09 	bl	80044ae <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8003c9c:	2002      	movs	r0, #2
 8003c9e:	f000 fc42 	bl	8004526 <IOE_Delay>
}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2140      	movs	r1, #64	@ 0x40
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fc08 	bl	80044d4 <IOE_Read>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cca:	2b80      	cmp	r3, #128	@ 0x80
 8003ccc:	bf0c      	ite	eq
 8003cce:	2301      	moveq	r3, #1
 8003cd0:	2300      	movne	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8003cd6:	7bbb      	ldrb	r3, [r7, #14]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	214c      	movs	r1, #76	@ 0x4c
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fbf6 	bl	80044d4 <IOE_Read>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d010      	beq.n	8003d10 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
 8003cf2:	e00d      	b.n	8003d10 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	214b      	movs	r1, #75	@ 0x4b
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fbd6 	bl	80044ae <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2200      	movs	r2, #0
 8003d08:	214b      	movs	r1, #75	@ 0x4b
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fbcf 	bl	80044ae <IOE_Write>
  }
  
  return ret;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	4603      	mov	r3, r0
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003d28:	89fb      	ldrh	r3, [r7, #14]
 8003d2a:	b2d8      	uxtb	r0, r3
 8003d2c:	f107 0210 	add.w	r2, r7, #16
 8003d30:	2304      	movs	r3, #4
 8003d32:	21d7      	movs	r1, #215	@ 0xd7
 8003d34:	f000 fbe1 	bl	80044fa <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8003d38:	7c3b      	ldrb	r3, [r7, #16]
 8003d3a:	061a      	lsls	r2, r3, #24
 8003d3c:	7c7b      	ldrb	r3, [r7, #17]
 8003d3e:	041b      	lsls	r3, r3, #16
 8003d40:	431a      	orrs	r2, r3
 8003d42:	7cbb      	ldrb	r3, [r7, #18]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	4313      	orrs	r3, r2
 8003d48:	7cfa      	ldrb	r2, [r7, #19]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	0d1b      	lsrs	r3, r3, #20
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003d68:	89fb      	ldrh	r3, [r7, #14]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	214b      	movs	r1, #75	@ 0x4b
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fb9c 	bl	80044ae <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003d76:	89fb      	ldrh	r3, [r7, #14]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	214b      	movs	r1, #75	@ 0x4b
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fb95 	bl	80044ae <IOE_Write>
}
 8003d84:	bf00      	nop
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8003d96:	f000 fb84 	bl	80044a2 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	211f      	movs	r1, #31
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff fe76 	bl	8003a90 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fe36 	bl	8003a18 <stmpe811_EnableGlobalIT>
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fe47 	bl	8003a54 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	211f      	movs	r1, #31
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fe81 	bl	8003ad2 <stmpe811_DisableITSource>
}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	211f      	movs	r1, #31
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fe99 	bl	8003b1e <stmpe811_ReadGITStatus>
 8003dec:	4603      	mov	r3, r0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8003e00:	88fb      	ldrh	r3, [r7, #6]
 8003e02:	211f      	movs	r1, #31
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fea1 	bl	8003b4c <stmpe811_ClearGlobalIT>
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003e22:	2300      	movs	r3, #0
 8003e24:	73fb      	strb	r3, [r7, #15]
 8003e26:	e00b      	b.n	8003e40 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e54 <stmpe811_GetInstance+0x40>)
 8003e2c:	5cd3      	ldrb	r3, [r2, r3]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	e006      	b.n	8003e48 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d9f0      	bls.n	8003e28 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8003e46:	23ff      	movs	r3, #255	@ 0xff
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	20008fec 	.word	0x20008fec

08003e58 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	@ 0x28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a33      	ldr	r2, [pc, #204]	@ (8003f34 <I2Cx_MspInit+0xdc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d15f      	bne.n	8003f2a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	4b32      	ldr	r3, [pc, #200]	@ (8003f38 <I2Cx_MspInit+0xe0>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	4a31      	ldr	r2, [pc, #196]	@ (8003f38 <I2Cx_MspInit+0xe0>)
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f38 <I2Cx_MspInit+0xe0>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003f38 <I2Cx_MspInit+0xe0>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f38 <I2Cx_MspInit+0xe0>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e96:	4b28      	ldr	r3, [pc, #160]	@ (8003f38 <I2Cx_MspInit+0xe0>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8003ea2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003ea8:	2312      	movs	r3, #18
 8003eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003eb8:	f107 0314 	add.w	r3, r7, #20
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	481f      	ldr	r0, [pc, #124]	@ (8003f3c <I2Cx_MspInit+0xe4>)
 8003ec0:	f002 fb68 	bl	8006594 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8003ec4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ec8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003eca:	f107 0314 	add.w	r3, r7, #20
 8003ece:	4619      	mov	r1, r3
 8003ed0:	481b      	ldr	r0, [pc, #108]	@ (8003f40 <I2Cx_MspInit+0xe8>)
 8003ed2:	f002 fb5f 	bl	8006594 <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	4b17      	ldr	r3, [pc, #92]	@ (8003f38 <I2Cx_MspInit+0xe0>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	4a16      	ldr	r2, [pc, #88]	@ (8003f38 <I2Cx_MspInit+0xe0>)
 8003ee0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ee6:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <I2Cx_MspInit+0xe0>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 8003ef2:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <I2Cx_MspInit+0xe0>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4a10      	ldr	r2, [pc, #64]	@ (8003f38 <I2Cx_MspInit+0xe0>)
 8003ef8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003efc:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 8003efe:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <I2Cx_MspInit+0xe0>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	4a0d      	ldr	r2, [pc, #52]	@ (8003f38 <I2Cx_MspInit+0xe0>)
 8003f04:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f08:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	210f      	movs	r1, #15
 8003f0e:	2048      	movs	r0, #72	@ 0x48
 8003f10:	f001 fb8c 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003f14:	2048      	movs	r0, #72	@ 0x48
 8003f16:	f001 fba5 	bl	8005664 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	210f      	movs	r1, #15
 8003f1e:	2049      	movs	r0, #73	@ 0x49
 8003f20:	f001 fb84 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003f24:	2049      	movs	r0, #73	@ 0x49
 8003f26:	f001 fb9d 	bl	8005664 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	3728      	adds	r7, #40	@ 0x28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40005c00 	.word	0x40005c00
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	40020000 	.word	0x40020000
 8003f40:	40020800 	.word	0x40020800

08003f44 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003f48:	4814      	ldr	r0, [pc, #80]	@ (8003f9c <I2Cx_Init+0x58>)
 8003f4a:	f005 fbc9 	bl	80096e0 <HAL_I2C_GetState>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d121      	bne.n	8003f98 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8003f54:	4b11      	ldr	r3, [pc, #68]	@ (8003f9c <I2Cx_Init+0x58>)
 8003f56:	4a12      	ldr	r2, [pc, #72]	@ (8003fa0 <I2Cx_Init+0x5c>)
 8003f58:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8003f5a:	4b10      	ldr	r3, [pc, #64]	@ (8003f9c <I2Cx_Init+0x58>)
 8003f5c:	4a11      	ldr	r2, [pc, #68]	@ (8003fa4 <I2Cx_Init+0x60>)
 8003f5e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003f60:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <I2Cx_Init+0x58>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8003f66:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <I2Cx_Init+0x58>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <I2Cx_Init+0x58>)
 8003f6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f72:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003f74:	4b09      	ldr	r3, [pc, #36]	@ (8003f9c <I2Cx_Init+0x58>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8003f7a:	4b08      	ldr	r3, [pc, #32]	@ (8003f9c <I2Cx_Init+0x58>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003f80:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <I2Cx_Init+0x58>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 8003f86:	4b05      	ldr	r3, [pc, #20]	@ (8003f9c <I2Cx_Init+0x58>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8003f8c:	4803      	ldr	r0, [pc, #12]	@ (8003f9c <I2Cx_Init+0x58>)
 8003f8e:	f7ff ff63 	bl	8003e58 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8003f92:	4802      	ldr	r0, [pc, #8]	@ (8003f9c <I2Cx_Init+0x58>)
 8003f94:	f004 ff04 	bl	8008da0 <HAL_I2C_Init>
  }
}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20008ff0 	.word	0x20008ff0
 8003fa0:	40005c00 	.word	0x40005c00
 8003fa4:	000186a0 	.word	0x000186a0

08003fa8 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	4b13      	ldr	r3, [pc, #76]	@ (8004000 <I2Cx_ITConfig+0x58>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb6:	4a12      	ldr	r2, [pc, #72]	@ (8004000 <I2Cx_ITConfig+0x58>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fbe:	4b10      	ldr	r3, [pc, #64]	@ (8004000 <I2Cx_ITConfig+0x58>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8003fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8003fd8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003fdc:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4808      	ldr	r0, [pc, #32]	@ (8004004 <I2Cx_ITConfig+0x5c>)
 8003fe4:	f002 fad6 	bl	8006594 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8003fe8:	2200      	movs	r2, #0
 8003fea:	210f      	movs	r1, #15
 8003fec:	2028      	movs	r0, #40	@ 0x28
 8003fee:	f001 fb1d 	bl	800562c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8003ff2:	2028      	movs	r0, #40	@ 0x28
 8003ff4:	f001 fb36 	bl	8005664 <HAL_NVIC_EnableIRQ>
}
 8003ff8:	bf00      	nop
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40023800 	.word	0x40023800
 8004004:	40020000 	.word	0x40020000

08004008 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af04      	add	r7, sp, #16
 800400e:	4603      	mov	r3, r0
 8004010:	71fb      	strb	r3, [r7, #7]
 8004012:	460b      	mov	r3, r1
 8004014:	71bb      	strb	r3, [r7, #6]
 8004016:	4613      	mov	r3, r2
 8004018:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	b299      	uxth	r1, r3
 8004022:	79bb      	ldrb	r3, [r7, #6]
 8004024:	b29a      	uxth	r2, r3
 8004026:	4b0b      	ldr	r3, [pc, #44]	@ (8004054 <I2Cx_WriteData+0x4c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	9302      	str	r3, [sp, #8]
 800402c:	2301      	movs	r3, #1
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	1d7b      	adds	r3, r7, #5
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	2301      	movs	r3, #1
 8004036:	4808      	ldr	r0, [pc, #32]	@ (8004058 <I2Cx_WriteData+0x50>)
 8004038:	f005 f826 	bl	8009088 <HAL_I2C_Mem_Write>
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8004046:	f000 f863 	bl	8004110 <I2Cx_Error>
  }
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000244 	.word	0x20000244
 8004058:	20008ff0 	.word	0x20008ff0

0800405c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af04      	add	r7, sp, #16
 8004062:	4603      	mov	r3, r0
 8004064:	460a      	mov	r2, r1
 8004066:	71fb      	strb	r3, [r7, #7]
 8004068:	4613      	mov	r3, r2
 800406a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	b299      	uxth	r1, r3
 8004078:	79bb      	ldrb	r3, [r7, #6]
 800407a:	b29a      	uxth	r2, r3
 800407c:	4b0b      	ldr	r3, [pc, #44]	@ (80040ac <I2Cx_ReadData+0x50>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	9302      	str	r3, [sp, #8]
 8004082:	2301      	movs	r3, #1
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	f107 030e 	add.w	r3, r7, #14
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	2301      	movs	r3, #1
 800408e:	4808      	ldr	r0, [pc, #32]	@ (80040b0 <I2Cx_ReadData+0x54>)
 8004090:	f005 f8f4 	bl	800927c <HAL_I2C_Mem_Read>
 8004094:	4603      	mov	r3, r0
 8004096:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800409e:	f000 f837 	bl	8004110 <I2Cx_Error>

  }
  return value;
 80040a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000244 	.word	0x20000244
 80040b0:	20008ff0 	.word	0x20008ff0

080040b4 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af04      	add	r7, sp, #16
 80040ba:	603a      	str	r2, [r7, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	71fb      	strb	r3, [r7, #7]
 80040c2:	460b      	mov	r3, r1
 80040c4:	71bb      	strb	r3, [r7, #6]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	b299      	uxth	r1, r3
 80040d2:	79bb      	ldrb	r3, [r7, #6]
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004108 <I2Cx_ReadBuffer+0x54>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	9302      	str	r3, [sp, #8]
 80040dc:	88bb      	ldrh	r3, [r7, #4]
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2301      	movs	r3, #1
 80040e6:	4809      	ldr	r0, [pc, #36]	@ (800410c <I2Cx_ReadBuffer+0x58>)
 80040e8:	f005 f8c8 	bl	800927c <HAL_I2C_Mem_Read>
 80040ec:	4603      	mov	r3, r0
 80040ee:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e002      	b.n	8004100 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80040fa:	f000 f809 	bl	8004110 <I2Cx_Error>

    return 1;
 80040fe:	2301      	movs	r3, #1
  }
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20000244 	.word	0x20000244
 800410c:	20008ff0 	.word	0x20008ff0

08004110 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8004114:	4803      	ldr	r0, [pc, #12]	@ (8004124 <I2Cx_Error+0x14>)
 8004116:	f004 ff87 	bl	8009028 <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800411a:	f7ff ff13 	bl	8003f44 <I2Cx_Init>
}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20008ff0 	.word	0x20008ff0

08004128 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800412c:	4819      	ldr	r0, [pc, #100]	@ (8004194 <SPIx_Init+0x6c>)
 800412e:	f007 fe79 	bl	800be24 <HAL_SPI_GetState>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d12b      	bne.n	8004190 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8004138:	4b16      	ldr	r3, [pc, #88]	@ (8004194 <SPIx_Init+0x6c>)
 800413a:	4a17      	ldr	r2, [pc, #92]	@ (8004198 <SPIx_Init+0x70>)
 800413c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800413e:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <SPIx_Init+0x6c>)
 8004140:	2218      	movs	r2, #24
 8004142:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8004144:	4b13      	ldr	r3, [pc, #76]	@ (8004194 <SPIx_Init+0x6c>)
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800414a:	4b12      	ldr	r3, [pc, #72]	@ (8004194 <SPIx_Init+0x6c>)
 800414c:	2200      	movs	r2, #0
 800414e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8004150:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <SPIx_Init+0x6c>)
 8004152:	2200      	movs	r2, #0
 8004154:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8004156:	4b0f      	ldr	r3, [pc, #60]	@ (8004194 <SPIx_Init+0x6c>)
 8004158:	2200      	movs	r2, #0
 800415a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800415c:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <SPIx_Init+0x6c>)
 800415e:	2207      	movs	r2, #7
 8004160:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8004162:	4b0c      	ldr	r3, [pc, #48]	@ (8004194 <SPIx_Init+0x6c>)
 8004164:	2200      	movs	r2, #0
 8004166:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8004168:	4b0a      	ldr	r3, [pc, #40]	@ (8004194 <SPIx_Init+0x6c>)
 800416a:	2200      	movs	r2, #0
 800416c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800416e:	4b09      	ldr	r3, [pc, #36]	@ (8004194 <SPIx_Init+0x6c>)
 8004170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004174:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8004176:	4b07      	ldr	r3, [pc, #28]	@ (8004194 <SPIx_Init+0x6c>)
 8004178:	2200      	movs	r2, #0
 800417a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800417c:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <SPIx_Init+0x6c>)
 800417e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004182:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8004184:	4803      	ldr	r0, [pc, #12]	@ (8004194 <SPIx_Init+0x6c>)
 8004186:	f000 f853 	bl	8004230 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800418a:	4802      	ldr	r0, [pc, #8]	@ (8004194 <SPIx_Init+0x6c>)
 800418c:	f007 f993 	bl	800b4b6 <HAL_SPI_Init>
  }
}
 8004190:	bf00      	nop
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20009044 	.word	0x20009044
 8004198:	40015000 	.word	0x40015000

0800419c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <SPIx_Read+0x38>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f107 0108 	add.w	r1, r7, #8
 80041b6:	4808      	ldr	r0, [pc, #32]	@ (80041d8 <SPIx_Read+0x3c>)
 80041b8:	f007 fb72 	bl	800b8a0 <HAL_SPI_Receive>
 80041bc:	4603      	mov	r3, r0
 80041be:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80041c6:	f000 f827 	bl	8004218 <SPIx_Error>
  }

  return readvalue;
 80041ca:	68bb      	ldr	r3, [r7, #8]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20000248 	.word	0x20000248
 80041d8:	20009044 	.word	0x20009044

080041dc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 80041ea:	4b09      	ldr	r3, [pc, #36]	@ (8004210 <SPIx_Write+0x34>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	1db9      	adds	r1, r7, #6
 80041f0:	2201      	movs	r2, #1
 80041f2:	4808      	ldr	r0, [pc, #32]	@ (8004214 <SPIx_Write+0x38>)
 80041f4:	f007 fa10 	bl	800b618 <HAL_SPI_Transmit>
 80041f8:	4603      	mov	r3, r0
 80041fa:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8004202:	f000 f809 	bl	8004218 <SPIx_Error>
  }
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000248 	.word	0x20000248
 8004214:	20009044 	.word	0x20009044

08004218 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800421c:	4803      	ldr	r0, [pc, #12]	@ (800422c <SPIx_Error+0x14>)
 800421e:	f007 f9d3 	bl	800b5c8 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8004222:	f7ff ff81 	bl	8004128 <SPIx_Init>
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20009044 	.word	0x20009044

08004230 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	@ 0x28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004238:	2300      	movs	r3, #0
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	4b17      	ldr	r3, [pc, #92]	@ (800429c <SPIx_MspInit+0x6c>)
 800423e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004240:	4a16      	ldr	r2, [pc, #88]	@ (800429c <SPIx_MspInit+0x6c>)
 8004242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004246:	6453      	str	r3, [r2, #68]	@ 0x44
 8004248:	4b14      	ldr	r3, [pc, #80]	@ (800429c <SPIx_MspInit+0x6c>)
 800424a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	4b10      	ldr	r3, [pc, #64]	@ (800429c <SPIx_MspInit+0x6c>)
 800425a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425c:	4a0f      	ldr	r2, [pc, #60]	@ (800429c <SPIx_MspInit+0x6c>)
 800425e:	f043 0320 	orr.w	r3, r3, #32
 8004262:	6313      	str	r3, [r2, #48]	@ 0x30
 8004264:	4b0d      	ldr	r3, [pc, #52]	@ (800429c <SPIx_MspInit+0x6c>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8004270:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8004274:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8004276:	2302      	movs	r3, #2
 8004278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800427a:	2302      	movs	r3, #2
 800427c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800427e:	2301      	movs	r3, #1
 8004280:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8004282:	2305      	movs	r3, #5
 8004284:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8004286:	f107 0314 	add.w	r3, r7, #20
 800428a:	4619      	mov	r1, r3
 800428c:	4804      	ldr	r0, [pc, #16]	@ (80042a0 <SPIx_MspInit+0x70>)
 800428e:	f002 f981 	bl	8006594 <HAL_GPIO_Init>
}
 8004292:	bf00      	nop
 8004294:	3728      	adds	r7, #40	@ 0x28
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800
 80042a0:	40021400 	.word	0x40021400

080042a4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 80042aa:	4b36      	ldr	r3, [pc, #216]	@ (8004384 <LCD_IO_Init+0xe0>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d164      	bne.n	800437c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80042b2:	4b34      	ldr	r3, [pc, #208]	@ (8004384 <LCD_IO_Init+0xe0>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80042b8:	2300      	movs	r3, #0
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	4b32      	ldr	r3, [pc, #200]	@ (8004388 <LCD_IO_Init+0xe4>)
 80042be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c0:	4a31      	ldr	r2, [pc, #196]	@ (8004388 <LCD_IO_Init+0xe4>)
 80042c2:	f043 0308 	orr.w	r3, r3, #8
 80042c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80042c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004388 <LCD_IO_Init+0xe4>)
 80042ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80042d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80042da:	2301      	movs	r3, #1
 80042dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80042e2:	2302      	movs	r3, #2
 80042e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80042e6:	f107 030c 	add.w	r3, r7, #12
 80042ea:	4619      	mov	r1, r3
 80042ec:	4827      	ldr	r0, [pc, #156]	@ (800438c <LCD_IO_Init+0xe8>)
 80042ee:	f002 f951 	bl	8006594 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	4b24      	ldr	r3, [pc, #144]	@ (8004388 <LCD_IO_Init+0xe4>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	4a23      	ldr	r2, [pc, #140]	@ (8004388 <LCD_IO_Init+0xe4>)
 80042fc:	f043 0308 	orr.w	r3, r3, #8
 8004300:	6313      	str	r3, [r2, #48]	@ 0x30
 8004302:	4b21      	ldr	r3, [pc, #132]	@ (8004388 <LCD_IO_Init+0xe4>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	607b      	str	r3, [r7, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800430e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004312:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004314:	2301      	movs	r3, #1
 8004316:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800431c:	2302      	movs	r3, #2
 800431e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8004320:	f107 030c 	add.w	r3, r7, #12
 8004324:	4619      	mov	r1, r3
 8004326:	4819      	ldr	r0, [pc, #100]	@ (800438c <LCD_IO_Init+0xe8>)
 8004328:	f002 f934 	bl	8006594 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800432c:	2300      	movs	r3, #0
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	4b15      	ldr	r3, [pc, #84]	@ (8004388 <LCD_IO_Init+0xe4>)
 8004332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004334:	4a14      	ldr	r2, [pc, #80]	@ (8004388 <LCD_IO_Init+0xe4>)
 8004336:	f043 0304 	orr.w	r3, r3, #4
 800433a:	6313      	str	r3, [r2, #48]	@ 0x30
 800433c:	4b12      	ldr	r3, [pc, #72]	@ (8004388 <LCD_IO_Init+0xe4>)
 800433e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8004348:	2304      	movs	r3, #4
 800434a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800434c:	2301      	movs	r3, #1
 800434e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004354:	2302      	movs	r3, #2
 8004356:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8004358:	f107 030c 	add.w	r3, r7, #12
 800435c:	4619      	mov	r1, r3
 800435e:	480c      	ldr	r0, [pc, #48]	@ (8004390 <LCD_IO_Init+0xec>)
 8004360:	f002 f918 	bl	8006594 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8004364:	2200      	movs	r2, #0
 8004366:	2104      	movs	r1, #4
 8004368:	4809      	ldr	r0, [pc, #36]	@ (8004390 <LCD_IO_Init+0xec>)
 800436a:	f002 fbcb 	bl	8006b04 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800436e:	2201      	movs	r2, #1
 8004370:	2104      	movs	r1, #4
 8004372:	4807      	ldr	r0, [pc, #28]	@ (8004390 <LCD_IO_Init+0xec>)
 8004374:	f002 fbc6 	bl	8006b04 <HAL_GPIO_WritePin>

    SPIx_Init();
 8004378:	f7ff fed6 	bl	8004128 <SPIx_Init>
  }
}
 800437c:	bf00      	nop
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	2000909c 	.word	0x2000909c
 8004388:	40023800 	.word	0x40023800
 800438c:	40020c00 	.word	0x40020c00
 8004390:	40020800 	.word	0x40020800

08004394 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800439e:	2201      	movs	r2, #1
 80043a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043a4:	480a      	ldr	r0, [pc, #40]	@ (80043d0 <LCD_IO_WriteData+0x3c>)
 80043a6:	f002 fbad 	bl	8006b04 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80043aa:	2200      	movs	r2, #0
 80043ac:	2104      	movs	r1, #4
 80043ae:	4809      	ldr	r0, [pc, #36]	@ (80043d4 <LCD_IO_WriteData+0x40>)
 80043b0:	f002 fba8 	bl	8006b04 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ff10 	bl	80041dc <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80043bc:	2201      	movs	r2, #1
 80043be:	2104      	movs	r1, #4
 80043c0:	4804      	ldr	r0, [pc, #16]	@ (80043d4 <LCD_IO_WriteData+0x40>)
 80043c2:	f002 fb9f 	bl	8006b04 <HAL_GPIO_WritePin>
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40020c00 	.word	0x40020c00
 80043d4:	40020800 	.word	0x40020800

080043d8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80043e2:	2200      	movs	r2, #0
 80043e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043e8:	480a      	ldr	r0, [pc, #40]	@ (8004414 <LCD_IO_WriteReg+0x3c>)
 80043ea:	f002 fb8b 	bl	8006b04 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80043ee:	2200      	movs	r2, #0
 80043f0:	2104      	movs	r1, #4
 80043f2:	4809      	ldr	r0, [pc, #36]	@ (8004418 <LCD_IO_WriteReg+0x40>)
 80043f4:	f002 fb86 	bl	8006b04 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff feed 	bl	80041dc <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004402:	2201      	movs	r2, #1
 8004404:	2104      	movs	r1, #4
 8004406:	4804      	ldr	r0, [pc, #16]	@ (8004418 <LCD_IO_WriteReg+0x40>)
 8004408:	f002 fb7c 	bl	8006b04 <HAL_GPIO_WritePin>
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40020c00 	.word	0x40020c00
 8004418:	40020800 	.word	0x40020800

0800441c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	460a      	mov	r2, r1
 8004426:	80fb      	strh	r3, [r7, #6]
 8004428:	4613      	mov	r3, r2
 800442a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8004430:	2200      	movs	r2, #0
 8004432:	2104      	movs	r1, #4
 8004434:	4810      	ldr	r0, [pc, #64]	@ (8004478 <LCD_IO_ReadData+0x5c>)
 8004436:	f002 fb65 	bl	8006b04 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800443a:	2200      	movs	r2, #0
 800443c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004440:	480e      	ldr	r0, [pc, #56]	@ (800447c <LCD_IO_ReadData+0x60>)
 8004442:	f002 fb5f 	bl	8006b04 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fec7 	bl	80041dc <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 800444e:	797b      	ldrb	r3, [r7, #5]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fea3 	bl	800419c <SPIx_Read>
 8004456:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004458:	2201      	movs	r2, #1
 800445a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800445e:	4807      	ldr	r0, [pc, #28]	@ (800447c <LCD_IO_ReadData+0x60>)
 8004460:	f002 fb50 	bl	8006b04 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004464:	2201      	movs	r2, #1
 8004466:	2104      	movs	r1, #4
 8004468:	4803      	ldr	r0, [pc, #12]	@ (8004478 <LCD_IO_ReadData+0x5c>)
 800446a:	f002 fb4b 	bl	8006b04 <HAL_GPIO_WritePin>

  return readvalue;
 800446e:	68fb      	ldr	r3, [r7, #12]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40020800 	.word	0x40020800
 800447c:	40020c00 	.word	0x40020c00

08004480 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fff3 	bl	8005474 <HAL_Delay>
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800449a:	f7ff fd53 	bl	8003f44 <I2Cx_Init>
}
 800449e:	bf00      	nop
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80044a6:	f7ff fd7f 	bl	8003fa8 <I2Cx_ITConfig>
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}

080044ae <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	71fb      	strb	r3, [r7, #7]
 80044b8:	460b      	mov	r3, r1
 80044ba:	71bb      	strb	r3, [r7, #6]
 80044bc:	4613      	mov	r3, r2
 80044be:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80044c0:	797a      	ldrb	r2, [r7, #5]
 80044c2:	79b9      	ldrb	r1, [r7, #6]
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fd9e 	bl	8004008 <I2Cx_WriteData>
}
 80044cc:	bf00      	nop
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	460a      	mov	r2, r1
 80044de:	71fb      	strb	r3, [r7, #7]
 80044e0:	4613      	mov	r3, r2
 80044e2:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80044e4:	79ba      	ldrb	r2, [r7, #6]
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	4611      	mov	r1, r2
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff fdb6 	bl	800405c <I2Cx_ReadData>
 80044f0:	4603      	mov	r3, r0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	603a      	str	r2, [r7, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	4603      	mov	r3, r0
 8004506:	71fb      	strb	r3, [r7, #7]
 8004508:	460b      	mov	r3, r1
 800450a:	71bb      	strb	r3, [r7, #6]
 800450c:	4613      	mov	r3, r2
 800450e:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8004510:	88bb      	ldrh	r3, [r7, #4]
 8004512:	79b9      	ldrb	r1, [r7, #6]
 8004514:	79f8      	ldrb	r0, [r7, #7]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	f7ff fdcc 	bl	80040b4 <I2Cx_ReadBuffer>
 800451c:	4603      	mov	r3, r0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 ffa0 	bl	8005474 <HAL_Delay>
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8004540:	4b2d      	ldr	r3, [pc, #180]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 8004542:	4a2e      	ldr	r2, [pc, #184]	@ (80045fc <BSP_LCD_Init+0xc0>)
 8004544:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8004546:	4b2c      	ldr	r3, [pc, #176]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 8004548:	2209      	movs	r2, #9
 800454a:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800454c:	4b2a      	ldr	r3, [pc, #168]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 800454e:	2201      	movs	r2, #1
 8004550:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8004552:	4b29      	ldr	r3, [pc, #164]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 8004554:	221d      	movs	r2, #29
 8004556:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8004558:	4b27      	ldr	r3, [pc, #156]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 800455a:	2203      	movs	r2, #3
 800455c:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 800455e:	4b26      	ldr	r3, [pc, #152]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 8004560:	f240 120d 	movw	r2, #269	@ 0x10d
 8004564:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8004566:	4b24      	ldr	r3, [pc, #144]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 8004568:	f240 1243 	movw	r2, #323	@ 0x143
 800456c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 800456e:	4b22      	ldr	r3, [pc, #136]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 8004570:	f240 1217 	movw	r2, #279	@ 0x117
 8004574:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8004576:	4b20      	ldr	r3, [pc, #128]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 8004578:	f240 1247 	movw	r2, #327	@ 0x147
 800457c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 800457e:	4b1e      	ldr	r3, [pc, #120]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8004586:	4b1c      	ldr	r3, [pc, #112]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 800458e:	4b1a      	ldr	r3, [pc, #104]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004596:	4b1a      	ldr	r3, [pc, #104]	@ (8004600 <BSP_LCD_Init+0xc4>)
 8004598:	2208      	movs	r2, #8
 800459a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800459c:	4b18      	ldr	r3, [pc, #96]	@ (8004600 <BSP_LCD_Init+0xc4>)
 800459e:	22c0      	movs	r2, #192	@ 0xc0
 80045a0:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80045a2:	4b17      	ldr	r3, [pc, #92]	@ (8004600 <BSP_LCD_Init+0xc4>)
 80045a4:	2204      	movs	r2, #4
 80045a6:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80045a8:	4b15      	ldr	r3, [pc, #84]	@ (8004600 <BSP_LCD_Init+0xc4>)
 80045aa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80045ae:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80045b0:	4813      	ldr	r0, [pc, #76]	@ (8004600 <BSP_LCD_Init+0xc4>)
 80045b2:	f006 fd2f 	bl	800b014 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80045b6:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80045bc:	4b0e      	ldr	r3, [pc, #56]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 80045be:	2200      	movs	r2, #0
 80045c0:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80045c2:	4b0d      	ldr	r3, [pc, #52]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80045c8:	4b0b      	ldr	r3, [pc, #44]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 80045ce:	f000 fa6b 	bl	8004aa8 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 80045d2:	4809      	ldr	r0, [pc, #36]	@ (80045f8 <BSP_LCD_Init+0xbc>)
 80045d4:	f005 fcc2 	bl	8009f5c <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 80045d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004604 <BSP_LCD_Init+0xc8>)
 80045da:	4a0b      	ldr	r2, [pc, #44]	@ (8004608 <BSP_LCD_Init+0xcc>)
 80045dc:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 80045de:	4b09      	ldr	r3, [pc, #36]	@ (8004604 <BSP_LCD_Init+0xc8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80045e6:	f000 fc4d 	bl	8004e84 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80045ea:	4808      	ldr	r0, [pc, #32]	@ (800460c <BSP_LCD_Init+0xd0>)
 80045ec:	f000 f8be 	bl	800476c <BSP_LCD_SetFont>

  return LCD_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	200090a0 	.word	0x200090a0
 80045fc:	40016800 	.word	0x40016800
 8004600:	20009188 	.word	0x20009188
 8004604:	200091d4 	.word	0x200091d4
 8004608:	200001e4 	.word	0x200001e4
 800460c:	2000024c 	.word	0x2000024c

08004610 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8004614:	4b03      	ldr	r3, [pc, #12]	@ (8004624 <BSP_LCD_GetXSize+0x14>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461a:	4798      	blx	r3
 800461c:	4603      	mov	r3, r0
}
 800461e:	4618      	mov	r0, r3
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	200091d4 	.word	0x200091d4

08004628 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800462c:	4b03      	ldr	r3, [pc, #12]	@ (800463c <BSP_LCD_GetYSize+0x14>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004632:	4798      	blx	r3
 8004634:	4603      	mov	r3, r0
}
 8004636:	4618      	mov	r0, r3
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	200091d4 	.word	0x200091d4

08004640 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b090      	sub	sp, #64	@ 0x40
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	6039      	str	r1, [r7, #0]
 800464a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8004650:	f7ff ffde 	bl	8004610 <BSP_LCD_GetXSize>
 8004654:	4603      	mov	r3, r0
 8004656:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 800465c:	f7ff ffe4 	bl	8004628 <BSP_LCD_GetYSize>
 8004660:	4603      	mov	r3, r0
 8004662:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 800466c:	23ff      	movs	r3, #255	@ 0xff
 800466e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004686:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800468a:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800468c:	2307      	movs	r3, #7
 800468e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8004690:	f7ff ffbe 	bl	8004610 <BSP_LCD_GetXSize>
 8004694:	4603      	mov	r3, r0
 8004696:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8004698:	f7ff ffc6 	bl	8004628 <BSP_LCD_GetYSize>
 800469c:	4603      	mov	r3, r0
 800469e:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 80046a0:	88fa      	ldrh	r2, [r7, #6]
 80046a2:	f107 030c 	add.w	r3, r7, #12
 80046a6:	4619      	mov	r1, r3
 80046a8:	4814      	ldr	r0, [pc, #80]	@ (80046fc <BSP_LCD_LayerDefaultInit+0xbc>)
 80046aa:	f005 fde9 	bl	800a280 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80046ae:	88fa      	ldrh	r2, [r7, #6]
 80046b0:	4913      	ldr	r1, [pc, #76]	@ (8004700 <BSP_LCD_LayerDefaultInit+0xc0>)
 80046b2:	4613      	mov	r3, r2
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	3304      	adds	r3, #4
 80046be:	f04f 32ff 	mov.w	r2, #4294967295
 80046c2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80046c4:	88fa      	ldrh	r2, [r7, #6]
 80046c6:	490e      	ldr	r1, [pc, #56]	@ (8004700 <BSP_LCD_LayerDefaultInit+0xc0>)
 80046c8:	4613      	mov	r3, r2
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	3308      	adds	r3, #8
 80046d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004704 <BSP_LCD_LayerDefaultInit+0xc4>)
 80046d6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80046d8:	88fa      	ldrh	r2, [r7, #6]
 80046da:	4909      	ldr	r1, [pc, #36]	@ (8004700 <BSP_LCD_LayerDefaultInit+0xc0>)
 80046dc:	4613      	mov	r3, r2
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80046ea:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80046ec:	4803      	ldr	r0, [pc, #12]	@ (80046fc <BSP_LCD_LayerDefaultInit+0xbc>)
 80046ee:	f005 fe05 	bl	800a2fc <HAL_LTDC_EnableDither>
}
 80046f2:	bf00      	nop
 80046f4:	3740      	adds	r7, #64	@ 0x40
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	200090a0 	.word	0x200090a0
 8004700:	200091bc 	.word	0x200091bc
 8004704:	2000024c 	.word	0x2000024c

08004708 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004710:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <BSP_LCD_SetTextColor+0x28>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4907      	ldr	r1, [pc, #28]	@ (8004734 <BSP_LCD_SetTextColor+0x2c>)
 8004716:	4613      	mov	r3, r2
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	601a      	str	r2, [r3, #0]
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	200091b8 	.word	0x200091b8
 8004734:	200091bc 	.word	0x200091bc

08004738 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004740:	4b08      	ldr	r3, [pc, #32]	@ (8004764 <BSP_LCD_SetBackColor+0x2c>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4908      	ldr	r1, [pc, #32]	@ (8004768 <BSP_LCD_SetBackColor+0x30>)
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	3304      	adds	r3, #4
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	601a      	str	r2, [r3, #0]
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	200091b8 	.word	0x200091b8
 8004768:	200091bc 	.word	0x200091bc

0800476c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8004774:	4b08      	ldr	r3, [pc, #32]	@ (8004798 <BSP_LCD_SetFont+0x2c>)
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	4908      	ldr	r1, [pc, #32]	@ (800479c <BSP_LCD_SetFont+0x30>)
 800477a:	4613      	mov	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	3308      	adds	r3, #8
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	200091b8 	.word	0x200091b8
 800479c:	200091bc 	.word	0x200091bc

080047a0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80047a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 80047a8:	4b0f      	ldr	r3, [pc, #60]	@ (80047e8 <BSP_LCD_Clear+0x48>)
 80047aa:	681c      	ldr	r4, [r3, #0]
 80047ac:	4b0e      	ldr	r3, [pc, #56]	@ (80047e8 <BSP_LCD_Clear+0x48>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a0e      	ldr	r2, [pc, #56]	@ (80047ec <BSP_LCD_Clear+0x4c>)
 80047b2:	2134      	movs	r1, #52	@ 0x34
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	4413      	add	r3, r2
 80047ba:	335c      	adds	r3, #92	@ 0x5c
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461e      	mov	r6, r3
 80047c0:	f7ff ff26 	bl	8004610 <BSP_LCD_GetXSize>
 80047c4:	4605      	mov	r5, r0
 80047c6:	f7ff ff2f 	bl	8004628 <BSP_LCD_GetYSize>
 80047ca:	4602      	mov	r2, r0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	2300      	movs	r3, #0
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	462a      	mov	r2, r5
 80047d8:	4631      	mov	r1, r6
 80047da:	4620      	mov	r0, r4
 80047dc:	f000 fb1a 	bl	8004e14 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e8:	200091b8 	.word	0x200091b8
 80047ec:	200090a0 	.word	0x200090a0

080047f0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80047f0:	b590      	push	{r4, r7, lr}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	80fb      	strh	r3, [r7, #6]
 80047fa:	460b      	mov	r3, r1
 80047fc:	80bb      	strh	r3, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8004802:	4b1b      	ldr	r3, [pc, #108]	@ (8004870 <BSP_LCD_DisplayChar+0x80>)
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	491b      	ldr	r1, [pc, #108]	@ (8004874 <BSP_LCD_DisplayChar+0x84>)
 8004808:	4613      	mov	r3, r2
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	3308      	adds	r3, #8
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6819      	ldr	r1, [r3, #0]
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800481e:	4b14      	ldr	r3, [pc, #80]	@ (8004870 <BSP_LCD_DisplayChar+0x80>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4c14      	ldr	r4, [pc, #80]	@ (8004874 <BSP_LCD_DisplayChar+0x84>)
 8004824:	4613      	mov	r3, r2
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4423      	add	r3, r4
 800482e:	3308      	adds	r3, #8
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8004834:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004838:	4b0d      	ldr	r3, [pc, #52]	@ (8004870 <BSP_LCD_DisplayChar+0x80>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4c0d      	ldr	r4, [pc, #52]	@ (8004874 <BSP_LCD_DisplayChar+0x84>)
 800483e:	4613      	mov	r3, r2
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4423      	add	r3, r4
 8004848:	3308      	adds	r3, #8
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	889b      	ldrh	r3, [r3, #4]
 800484e:	3307      	adds	r3, #7
 8004850:	2b00      	cmp	r3, #0
 8004852:	da00      	bge.n	8004856 <BSP_LCD_DisplayChar+0x66>
 8004854:	3307      	adds	r3, #7
 8004856:	10db      	asrs	r3, r3, #3
 8004858:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800485c:	18ca      	adds	r2, r1, r3
 800485e:	88b9      	ldrh	r1, [r7, #4]
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fa1c 	bl	8004ca0 <DrawChar>
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	bd90      	pop	{r4, r7, pc}
 8004870:	200091b8 	.word	0x200091b8
 8004874:	200091bc 	.word	0x200091bc

08004878 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8004878:	b5b0      	push	{r4, r5, r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0
 800487e:	60ba      	str	r2, [r7, #8]
 8004880:	461a      	mov	r2, r3
 8004882:	4603      	mov	r3, r0
 8004884:	81fb      	strh	r3, [r7, #14]
 8004886:	460b      	mov	r3, r1
 8004888:	81bb      	strh	r3, [r7, #12]
 800488a:	4613      	mov	r3, r2
 800488c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800488e:	2301      	movs	r3, #1
 8004890:	83fb      	strh	r3, [r7, #30]
 8004892:	2300      	movs	r3, #0
 8004894:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	2300      	movs	r3, #0
 800489c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 80048a2:	e002      	b.n	80048aa <BSP_LCD_DisplayStringAt+0x32>
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	617a      	str	r2, [r7, #20]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f6      	bne.n	80048a4 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 80048b6:	f7ff feab 	bl	8004610 <BSP_LCD_GetXSize>
 80048ba:	4601      	mov	r1, r0
 80048bc:	4b4b      	ldr	r3, [pc, #300]	@ (80049ec <BSP_LCD_DisplayStringAt+0x174>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	484b      	ldr	r0, [pc, #300]	@ (80049f0 <BSP_LCD_DisplayStringAt+0x178>)
 80048c2:	4613      	mov	r3, r2
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4403      	add	r3, r0
 80048cc:	3308      	adds	r3, #8
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	889b      	ldrh	r3, [r3, #4]
 80048d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048d6:	613b      	str	r3, [r7, #16]

  switch (mode)
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d01c      	beq.n	8004918 <BSP_LCD_DisplayStringAt+0xa0>
 80048de:	2b03      	cmp	r3, #3
 80048e0:	dc33      	bgt.n	800494a <BSP_LCD_DisplayStringAt+0xd2>
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d002      	beq.n	80048ec <BSP_LCD_DisplayStringAt+0x74>
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d019      	beq.n	800491e <BSP_LCD_DisplayStringAt+0xa6>
 80048ea:	e02e      	b.n	800494a <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	1ad1      	subs	r1, r2, r3
 80048f2:	4b3e      	ldr	r3, [pc, #248]	@ (80049ec <BSP_LCD_DisplayStringAt+0x174>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	483e      	ldr	r0, [pc, #248]	@ (80049f0 <BSP_LCD_DisplayStringAt+0x178>)
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4403      	add	r3, r0
 8004902:	3308      	adds	r3, #8
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	889b      	ldrh	r3, [r3, #4]
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	89fb      	ldrh	r3, [r7, #14]
 8004912:	4413      	add	r3, r2
 8004914:	83fb      	strh	r3, [r7, #30]
      break;
 8004916:	e01b      	b.n	8004950 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8004918:	89fb      	ldrh	r3, [r7, #14]
 800491a:	83fb      	strh	r3, [r7, #30]
      break;
 800491c:	e018      	b.n	8004950 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	b299      	uxth	r1, r3
 8004926:	4b31      	ldr	r3, [pc, #196]	@ (80049ec <BSP_LCD_DisplayStringAt+0x174>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4831      	ldr	r0, [pc, #196]	@ (80049f0 <BSP_LCD_DisplayStringAt+0x178>)
 800492c:	4613      	mov	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4403      	add	r3, r0
 8004936:	3308      	adds	r3, #8
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	889b      	ldrh	r3, [r3, #4]
 800493c:	fb11 f303 	smulbb	r3, r1, r3
 8004940:	b29a      	uxth	r2, r3
 8004942:	89fb      	ldrh	r3, [r7, #14]
 8004944:	4413      	add	r3, r2
 8004946:	83fb      	strh	r3, [r7, #30]
      break;
 8004948:	e002      	b.n	8004950 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 800494a:	89fb      	ldrh	r3, [r7, #14]
 800494c:	83fb      	strh	r3, [r7, #30]
      break;
 800494e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8004950:	e01a      	b.n	8004988 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	781a      	ldrb	r2, [r3, #0]
 8004956:	89b9      	ldrh	r1, [r7, #12]
 8004958:	8bfb      	ldrh	r3, [r7, #30]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff ff48 	bl	80047f0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8004960:	4b22      	ldr	r3, [pc, #136]	@ (80049ec <BSP_LCD_DisplayStringAt+0x174>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4922      	ldr	r1, [pc, #136]	@ (80049f0 <BSP_LCD_DisplayStringAt+0x178>)
 8004966:	4613      	mov	r3, r2
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	3308      	adds	r3, #8
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	889a      	ldrh	r2, [r3, #4]
 8004976:	8bfb      	ldrh	r3, [r7, #30]
 8004978:	4413      	add	r3, r2
 800497a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	3301      	adds	r3, #1
 8004980:	60bb      	str	r3, [r7, #8]
    i++;
 8004982:	8bbb      	ldrh	r3, [r7, #28]
 8004984:	3301      	adds	r3, #1
 8004986:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	bf14      	ite	ne
 8004990:	2301      	movne	r3, #1
 8004992:	2300      	moveq	r3, #0
 8004994:	b2dc      	uxtb	r4, r3
 8004996:	f7ff fe3b 	bl	8004610 <BSP_LCD_GetXSize>
 800499a:	8bb9      	ldrh	r1, [r7, #28]
 800499c:	4b13      	ldr	r3, [pc, #76]	@ (80049ec <BSP_LCD_DisplayStringAt+0x174>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4d13      	ldr	r5, [pc, #76]	@ (80049f0 <BSP_LCD_DisplayStringAt+0x178>)
 80049a2:	4613      	mov	r3, r2
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	442b      	add	r3, r5
 80049ac:	3308      	adds	r3, #8
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	889b      	ldrh	r3, [r3, #4]
 80049b2:	fb01 f303 	mul.w	r3, r1, r3
 80049b6:	1ac3      	subs	r3, r0, r3
 80049b8:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 80049ba:	4b0c      	ldr	r3, [pc, #48]	@ (80049ec <BSP_LCD_DisplayStringAt+0x174>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	480c      	ldr	r0, [pc, #48]	@ (80049f0 <BSP_LCD_DisplayStringAt+0x178>)
 80049c0:	4613      	mov	r3, r2
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4403      	add	r3, r0
 80049ca:	3308      	adds	r3, #8
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80049d0:	4299      	cmp	r1, r3
 80049d2:	bf2c      	ite	cs
 80049d4:	2301      	movcs	r3, #1
 80049d6:	2300      	movcc	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	4023      	ands	r3, r4
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1b7      	bne.n	8004952 <BSP_LCD_DisplayStringAt+0xda>
  }
}
 80049e2:	bf00      	nop
 80049e4:	bf00      	nop
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bdb0      	pop	{r4, r5, r7, pc}
 80049ec:	200091b8 	.word	0x200091b8
 80049f0:	200091bc 	.word	0x200091bc

080049f4 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80049f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af02      	add	r7, sp, #8
 80049fc:	4604      	mov	r4, r0
 80049fe:	4608      	mov	r0, r1
 8004a00:	4611      	mov	r1, r2
 8004a02:	461a      	mov	r2, r3
 8004a04:	4623      	mov	r3, r4
 8004a06:	80fb      	strh	r3, [r7, #6]
 8004a08:	4603      	mov	r3, r0
 8004a0a:	80bb      	strh	r3, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	807b      	strh	r3, [r7, #2]
 8004a10:	4613      	mov	r3, r2
 8004a12:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004a18:	4b20      	ldr	r3, [pc, #128]	@ (8004a9c <BSP_LCD_FillRect+0xa8>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4920      	ldr	r1, [pc, #128]	@ (8004aa0 <BSP_LCD_FillRect+0xac>)
 8004a1e:	4613      	mov	r3, r2
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fe6c 	bl	8004708 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8004a30:	4b1a      	ldr	r3, [pc, #104]	@ (8004a9c <BSP_LCD_FillRect+0xa8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa4 <BSP_LCD_FillRect+0xb0>)
 8004a36:	2134      	movs	r1, #52	@ 0x34
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	335c      	adds	r3, #92	@ 0x5c
 8004a40:	681c      	ldr	r4, [r3, #0]
 8004a42:	f7ff fde5 	bl	8004610 <BSP_LCD_GetXSize>
 8004a46:	4602      	mov	r2, r0
 8004a48:	88bb      	ldrh	r3, [r7, #4]
 8004a4a:	fb03 f202 	mul.w	r2, r3, r2
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4423      	add	r3, r4
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 8004a58:	4b10      	ldr	r3, [pc, #64]	@ (8004a9c <BSP_LCD_FillRect+0xa8>)
 8004a5a:	681c      	ldr	r4, [r3, #0]
 8004a5c:	68fd      	ldr	r5, [r7, #12]
 8004a5e:	887e      	ldrh	r6, [r7, #2]
 8004a60:	f8b7 8000 	ldrh.w	r8, [r7]
 8004a64:	f7ff fdd4 	bl	8004610 <BSP_LCD_GetXSize>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	887b      	ldrh	r3, [r7, #2]
 8004a6c:	1ad1      	subs	r1, r2, r3
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <BSP_LCD_FillRect+0xa8>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	480b      	ldr	r0, [pc, #44]	@ (8004aa0 <BSP_LCD_FillRect+0xac>)
 8004a74:	4613      	mov	r3, r2
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4403      	add	r3, r0
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	9100      	str	r1, [sp, #0]
 8004a84:	4643      	mov	r3, r8
 8004a86:	4632      	mov	r2, r6
 8004a88:	4629      	mov	r1, r5
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f000 f9c2 	bl	8004e14 <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a9a:	bf00      	nop
 8004a9c:	200091b8 	.word	0x200091b8
 8004aa0:	200091bc 	.word	0x200091bc
 8004aa4:	200090a0 	.word	0x200090a0

08004aa8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08e      	sub	sp, #56	@ 0x38
 8004aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004aae:	2300      	movs	r3, #0
 8004ab0:	623b      	str	r3, [r7, #32]
 8004ab2:	4b61      	ldr	r3, [pc, #388]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab6:	4a60      	ldr	r2, [pc, #384]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004ab8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004abe:	4b5e      	ldr	r3, [pc, #376]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ac6:	623b      	str	r3, [r7, #32]
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	61fb      	str	r3, [r7, #28]
 8004ace:	4b5a      	ldr	r3, [pc, #360]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	4a59      	ldr	r2, [pc, #356]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004ad4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ada:	4b57      	ldr	r3, [pc, #348]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ade:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	4b53      	ldr	r3, [pc, #332]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	4a52      	ldr	r2, [pc, #328]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004af6:	4b50      	ldr	r3, [pc, #320]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	61bb      	str	r3, [r7, #24]
 8004b00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	4b4c      	ldr	r3, [pc, #304]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	4a4b      	ldr	r2, [pc, #300]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b0c:	f043 0302 	orr.w	r3, r3, #2
 8004b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b12:	4b49      	ldr	r3, [pc, #292]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	4b45      	ldr	r3, [pc, #276]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b26:	4a44      	ldr	r2, [pc, #272]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b28:	f043 0304 	orr.w	r3, r3, #4
 8004b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b2e:	4b42      	ldr	r3, [pc, #264]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b42:	4a3d      	ldr	r2, [pc, #244]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b44:	f043 0308 	orr.w	r3, r3, #8
 8004b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	4b37      	ldr	r3, [pc, #220]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5e:	4a36      	ldr	r2, [pc, #216]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b60:	f043 0320 	orr.w	r3, r3, #32
 8004b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b66:	4b34      	ldr	r3, [pc, #208]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	4b30      	ldr	r3, [pc, #192]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b82:	4b2d      	ldr	r3, [pc, #180]	@ (8004c38 <BSP_LCD_MspInit+0x190>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8004b8e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8004b92:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004b94:	2302      	movs	r3, #2
 8004b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8004ba0:	230e      	movs	r3, #14
 8004ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4824      	ldr	r0, [pc, #144]	@ (8004c3c <BSP_LCD_MspInit+0x194>)
 8004bac:	f001 fcf2 	bl	8006594 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004bb0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8004bb4:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4820      	ldr	r0, [pc, #128]	@ (8004c40 <BSP_LCD_MspInit+0x198>)
 8004bbe:	f001 fce9 	bl	8006594 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004bc2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8004bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bcc:	4619      	mov	r1, r3
 8004bce:	481d      	ldr	r0, [pc, #116]	@ (8004c44 <BSP_LCD_MspInit+0x19c>)
 8004bd0:	f001 fce0 	bl	8006594 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004bd4:	2348      	movs	r3, #72	@ 0x48
 8004bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bdc:	4619      	mov	r1, r3
 8004bde:	481a      	ldr	r0, [pc, #104]	@ (8004c48 <BSP_LCD_MspInit+0x1a0>)
 8004be0:	f001 fcd8 	bl	8006594 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004be4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004be8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4816      	ldr	r0, [pc, #88]	@ (8004c4c <BSP_LCD_MspInit+0x1a4>)
 8004bf2:	f001 fccf 	bl	8006594 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004bf6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c00:	4619      	mov	r1, r3
 8004c02:	4813      	ldr	r0, [pc, #76]	@ (8004c50 <BSP_LCD_MspInit+0x1a8>)
 8004c04:	f001 fcc6 	bl	8006594 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8004c0c:	2309      	movs	r3, #9
 8004c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c14:	4619      	mov	r1, r3
 8004c16:	480a      	ldr	r0, [pc, #40]	@ (8004c40 <BSP_LCD_MspInit+0x198>)
 8004c18:	f001 fcbc 	bl	8006594 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004c1c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004c20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c26:	4619      	mov	r1, r3
 8004c28:	4809      	ldr	r0, [pc, #36]	@ (8004c50 <BSP_LCD_MspInit+0x1a8>)
 8004c2a:	f001 fcb3 	bl	8006594 <HAL_GPIO_Init>
}
 8004c2e:	bf00      	nop
 8004c30:	3738      	adds	r7, #56	@ 0x38
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40020000 	.word	0x40020000
 8004c40:	40020400 	.word	0x40020400
 8004c44:	40020800 	.word	0x40020800
 8004c48:	40020c00 	.word	0x40020c00
 8004c4c:	40021400 	.word	0x40021400
 8004c50:	40021800 	.word	0x40021800

08004c54 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004c54:	b5b0      	push	{r4, r5, r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	603a      	str	r2, [r7, #0]
 8004c5e:	80fb      	strh	r3, [r7, #6]
 8004c60:	460b      	mov	r3, r1
 8004c62:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004c64:	4b0c      	ldr	r3, [pc, #48]	@ (8004c98 <BSP_LCD_DrawPixel+0x44>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a0c      	ldr	r2, [pc, #48]	@ (8004c9c <BSP_LCD_DrawPixel+0x48>)
 8004c6a:	2134      	movs	r1, #52	@ 0x34
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	4413      	add	r3, r2
 8004c72:	335c      	adds	r3, #92	@ 0x5c
 8004c74:	681c      	ldr	r4, [r3, #0]
 8004c76:	88bd      	ldrh	r5, [r7, #4]
 8004c78:	f7ff fcca 	bl	8004610 <BSP_LCD_GetXSize>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	fb03 f205 	mul.w	r2, r3, r5
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4423      	add	r3, r4
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	6013      	str	r3, [r2, #0]
}
 8004c90:	bf00      	nop
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bdb0      	pop	{r4, r5, r7, pc}
 8004c98:	200091b8 	.word	0x200091b8
 8004c9c:	200090a0 	.word	0x200090a0

08004ca0 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	603a      	str	r2, [r7, #0]
 8004caa:	80fb      	strh	r3, [r7, #6]
 8004cac:	460b      	mov	r3, r1
 8004cae:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61fb      	str	r3, [r7, #28]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004cbc:	4b53      	ldr	r3, [pc, #332]	@ (8004e0c <DrawChar+0x16c>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4953      	ldr	r1, [pc, #332]	@ (8004e10 <DrawChar+0x170>)
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3308      	adds	r3, #8
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	88db      	ldrh	r3, [r3, #6]
 8004cd2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8004e0c <DrawChar+0x16c>)
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	494d      	ldr	r1, [pc, #308]	@ (8004e10 <DrawChar+0x170>)
 8004cda:	4613      	mov	r3, r2
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	889b      	ldrh	r3, [r3, #4]
 8004cea:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 8004cec:	8a3b      	ldrh	r3, [r7, #16]
 8004cee:	3307      	adds	r3, #7
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	da00      	bge.n	8004cf6 <DrawChar+0x56>
 8004cf4:	3307      	adds	r3, #7
 8004cf6:	10db      	asrs	r3, r3, #3
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	8a3b      	ldrh	r3, [r7, #16]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	e076      	b.n	8004dfa <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8004d0c:	8a3b      	ldrh	r3, [r7, #16]
 8004d0e:	3307      	adds	r3, #7
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	da00      	bge.n	8004d16 <DrawChar+0x76>
 8004d14:	3307      	adds	r3, #7
 8004d16:	10db      	asrs	r3, r3, #3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	fb02 f303 	mul.w	r3, r2, r3
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	4413      	add	r3, r2
 8004d24:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 8004d26:	8a3b      	ldrh	r3, [r7, #16]
 8004d28:	3307      	adds	r3, #7
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	da00      	bge.n	8004d30 <DrawChar+0x90>
 8004d2e:	3307      	adds	r3, #7
 8004d30:	10db      	asrs	r3, r3, #3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d002      	beq.n	8004d3c <DrawChar+0x9c>
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d004      	beq.n	8004d44 <DrawChar+0xa4>
 8004d3a:	e00c      	b.n	8004d56 <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	617b      	str	r3, [r7, #20]
        break;
 8004d42:	e016      	b.n	8004d72 <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	3201      	adds	r2, #1
 8004d4e:	7812      	ldrb	r2, [r2, #0]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
        break;
 8004d54:	e00d      	b.n	8004d72 <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	041a      	lsls	r2, r3, #16
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	4313      	orrs	r3, r2
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	3202      	adds	r2, #2
 8004d6a:	7812      	ldrb	r2, [r2, #0]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]
        break;
 8004d70:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004d72:	2300      	movs	r3, #0
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	e036      	b.n	8004de6 <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8004d78:	8a3a      	ldrh	r2, [r7, #16]
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	1ad2      	subs	r2, r2, r3
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	4413      	add	r3, r2
 8004d82:	3b01      	subs	r3, #1
 8004d84:	2201      	movs	r2, #1
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d012      	beq.n	8004dba <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	88fb      	ldrh	r3, [r7, #6]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	b298      	uxth	r0, r3
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e0c <DrawChar+0x16c>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	491b      	ldr	r1, [pc, #108]	@ (8004e10 <DrawChar+0x170>)
 8004da4:	4613      	mov	r3, r2
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	88bb      	ldrh	r3, [r7, #4]
 8004db2:	4619      	mov	r1, r3
 8004db4:	f7ff ff4e 	bl	8004c54 <BSP_LCD_DrawPixel>
 8004db8:	e012      	b.n	8004de0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	b298      	uxth	r0, r3
 8004dc4:	4b11      	ldr	r3, [pc, #68]	@ (8004e0c <DrawChar+0x16c>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4911      	ldr	r1, [pc, #68]	@ (8004e10 <DrawChar+0x170>)
 8004dca:	4613      	mov	r3, r2
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	88bb      	ldrh	r3, [r7, #4]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	f7ff ff3a 	bl	8004c54 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	3301      	adds	r3, #1
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	8a3b      	ldrh	r3, [r7, #16]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d3c4      	bcc.n	8004d78 <DrawChar+0xd8>
      }
    }
    Ypos++;
 8004dee:	88bb      	ldrh	r3, [r7, #4]
 8004df0:	3301      	adds	r3, #1
 8004df2:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	3301      	adds	r3, #1
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	8a7b      	ldrh	r3, [r7, #18]
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d384      	bcc.n	8004d0c <DrawChar+0x6c>
  }
}
 8004e02:	bf00      	nop
 8004e04:	bf00      	nop
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	200091b8 	.word	0x200091b8
 8004e10:	200091bc 	.word	0x200091bc

08004e14 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004e22:	4b16      	ldr	r3, [pc, #88]	@ (8004e7c <FillBuffer+0x68>)
 8004e24:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004e28:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004e2a:	4b14      	ldr	r3, [pc, #80]	@ (8004e7c <FillBuffer+0x68>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8004e30:	4a12      	ldr	r2, [pc, #72]	@ (8004e7c <FillBuffer+0x68>)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 8004e36:	4b11      	ldr	r3, [pc, #68]	@ (8004e7c <FillBuffer+0x68>)
 8004e38:	4a11      	ldr	r2, [pc, #68]	@ (8004e80 <FillBuffer+0x6c>)
 8004e3a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8004e3c:	480f      	ldr	r0, [pc, #60]	@ (8004e7c <FillBuffer+0x68>)
 8004e3e:	f000 fdf9 	bl	8005a34 <HAL_DMA2D_Init>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d115      	bne.n	8004e74 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8004e48:	68f9      	ldr	r1, [r7, #12]
 8004e4a:	480c      	ldr	r0, [pc, #48]	@ (8004e7c <FillBuffer+0x68>)
 8004e4c:	f001 f860 	bl	8005f10 <HAL_DMA2D_ConfigLayer>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10e      	bne.n	8004e74 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69f9      	ldr	r1, [r7, #28]
 8004e60:	4806      	ldr	r0, [pc, #24]	@ (8004e7c <FillBuffer+0x68>)
 8004e62:	f000 fe30 	bl	8005ac6 <HAL_DMA2D_Start>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d103      	bne.n	8004e74 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004e6c:	210a      	movs	r1, #10
 8004e6e:	4803      	ldr	r0, [pc, #12]	@ (8004e7c <FillBuffer+0x68>)
 8004e70:	f000 fe54 	bl	8005b1c <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20009148 	.word	0x20009148
 8004e80:	4002b000 	.word	0x4002b000

08004e84 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004e88:	4b29      	ldr	r3, [pc, #164]	@ (8004f30 <BSP_SDRAM_Init+0xac>)
 8004e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8004f34 <BSP_SDRAM_Init+0xb0>)
 8004e8c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8004f38 <BSP_SDRAM_Init+0xb4>)
 8004e90:	2202      	movs	r2, #2
 8004e92:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004e94:	4b28      	ldr	r3, [pc, #160]	@ (8004f38 <BSP_SDRAM_Init+0xb4>)
 8004e96:	2207      	movs	r2, #7
 8004e98:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004e9a:	4b27      	ldr	r3, [pc, #156]	@ (8004f38 <BSP_SDRAM_Init+0xb4>)
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004ea0:	4b25      	ldr	r3, [pc, #148]	@ (8004f38 <BSP_SDRAM_Init+0xb4>)
 8004ea2:	2207      	movs	r2, #7
 8004ea4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004ea6:	4b24      	ldr	r3, [pc, #144]	@ (8004f38 <BSP_SDRAM_Init+0xb4>)
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004eac:	4b22      	ldr	r3, [pc, #136]	@ (8004f38 <BSP_SDRAM_Init+0xb4>)
 8004eae:	2202      	movs	r2, #2
 8004eb0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004eb2:	4b21      	ldr	r3, [pc, #132]	@ (8004f38 <BSP_SDRAM_Init+0xb4>)
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f30 <BSP_SDRAM_Init+0xac>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8004f30 <BSP_SDRAM_Init+0xac>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f30 <BSP_SDRAM_Init+0xac>)
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004eca:	4b19      	ldr	r3, [pc, #100]	@ (8004f30 <BSP_SDRAM_Init+0xac>)
 8004ecc:	2210      	movs	r2, #16
 8004ece:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004ed0:	4b17      	ldr	r3, [pc, #92]	@ (8004f30 <BSP_SDRAM_Init+0xac>)
 8004ed2:	2240      	movs	r2, #64	@ 0x40
 8004ed4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004ed6:	4b16      	ldr	r3, [pc, #88]	@ (8004f30 <BSP_SDRAM_Init+0xac>)
 8004ed8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004edc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004ede:	4b14      	ldr	r3, [pc, #80]	@ (8004f30 <BSP_SDRAM_Init+0xac>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004ee4:	4b12      	ldr	r3, [pc, #72]	@ (8004f30 <BSP_SDRAM_Init+0xac>)
 8004ee6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004eea:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004eec:	4b10      	ldr	r3, [pc, #64]	@ (8004f30 <BSP_SDRAM_Init+0xac>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f30 <BSP_SDRAM_Init+0xac>)
 8004ef4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ef8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004efa:	2100      	movs	r1, #0
 8004efc:	480c      	ldr	r0, [pc, #48]	@ (8004f30 <BSP_SDRAM_Init+0xac>)
 8004efe:	f000 f87f 	bl	8005000 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004f02:	490d      	ldr	r1, [pc, #52]	@ (8004f38 <BSP_SDRAM_Init+0xb4>)
 8004f04:	480a      	ldr	r0, [pc, #40]	@ (8004f30 <BSP_SDRAM_Init+0xac>)
 8004f06:	f006 fa45 	bl	800b394 <HAL_SDRAM_Init>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004f10:	4b0a      	ldr	r3, [pc, #40]	@ (8004f3c <BSP_SDRAM_Init+0xb8>)
 8004f12:	2201      	movs	r2, #1
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	e002      	b.n	8004f1e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004f18:	4b08      	ldr	r3, [pc, #32]	@ (8004f3c <BSP_SDRAM_Init+0xb8>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004f1e:	f240 506a 	movw	r0, #1386	@ 0x56a
 8004f22:	f000 f80d 	bl	8004f40 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8004f26:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <BSP_SDRAM_Init+0xb8>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	200091d8 	.word	0x200091d8
 8004f34:	a0000140 	.word	0xa0000140
 8004f38:	2000920c 	.word	0x2000920c
 8004f3c:	20000264 	.word	0x20000264

08004f40 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004f52:	4b29      	ldr	r3, [pc, #164]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f54:	2208      	movs	r2, #8
 8004f56:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004f58:	4b27      	ldr	r3, [pc, #156]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004f5e:	4b26      	ldr	r3, [pc, #152]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004f64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f68:	4923      	ldr	r1, [pc, #140]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f6a:	4824      	ldr	r0, [pc, #144]	@ (8004ffc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004f6c:	f006 fa46 	bl	800b3fc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004f70:	2001      	movs	r0, #1
 8004f72:	f000 fa7f 	bl	8005474 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004f76:	4b20      	ldr	r3, [pc, #128]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f78:	2202      	movs	r2, #2
 8004f7a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f7e:	2208      	movs	r2, #8
 8004f80:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004f82:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004f88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004f8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f92:	4919      	ldr	r1, [pc, #100]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f94:	4819      	ldr	r0, [pc, #100]	@ (8004ffc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004f96:	f006 fa31 	bl	800b3fc <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004f9a:	4b17      	ldr	r3, [pc, #92]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004fa0:	4b15      	ldr	r3, [pc, #84]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fa2:	2208      	movs	r2, #8
 8004fa4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004fa6:	4b14      	ldr	r3, [pc, #80]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fa8:	2204      	movs	r2, #4
 8004faa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004fac:	4b12      	ldr	r3, [pc, #72]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004fb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fb6:	4910      	ldr	r1, [pc, #64]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fb8:	4810      	ldr	r0, [pc, #64]	@ (8004ffc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004fba:	f006 fa1f 	bl	800b3fc <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004fbe:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8004fc2:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004fca:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fcc:	2208      	movs	r2, #8
 8004fce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004fd0:	4b09      	ldr	r3, [pc, #36]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4a07      	ldr	r2, [pc, #28]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fda:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004fdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fe0:	4905      	ldr	r1, [pc, #20]	@ (8004ff8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fe2:	4806      	ldr	r0, [pc, #24]	@ (8004ffc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004fe4:	f006 fa0a 	bl	800b3fc <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4804      	ldr	r0, [pc, #16]	@ (8004ffc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004fec:	f006 fa3b 	bl	800b466 <HAL_SDRAM_ProgramRefreshRate>
}
 8004ff0:	bf00      	nop
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20009228 	.word	0x20009228
 8004ffc:	200091d8 	.word	0x200091d8

08005000 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b090      	sub	sp, #64	@ 0x40
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 80ec 	beq.w	80051ea <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8005012:	2300      	movs	r3, #0
 8005014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005016:	4b77      	ldr	r3, [pc, #476]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501a:	4a76      	ldr	r2, [pc, #472]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	6393      	str	r3, [r2, #56]	@ 0x38
 8005022:	4b74      	ldr	r3, [pc, #464]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 800502e:	2300      	movs	r3, #0
 8005030:	627b      	str	r3, [r7, #36]	@ 0x24
 8005032:	4b70      	ldr	r3, [pc, #448]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005036:	4a6f      	ldr	r2, [pc, #444]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005038:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800503c:	6313      	str	r3, [r2, #48]	@ 0x30
 800503e:	4b6d      	ldr	r3, [pc, #436]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800504a:	2300      	movs	r3, #0
 800504c:	623b      	str	r3, [r7, #32]
 800504e:	4b69      	ldr	r3, [pc, #420]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	4a68      	ldr	r2, [pc, #416]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005054:	f043 0302 	orr.w	r3, r3, #2
 8005058:	6313      	str	r3, [r2, #48]	@ 0x30
 800505a:	4b66      	ldr	r3, [pc, #408]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	623b      	str	r3, [r7, #32]
 8005064:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
 800506a:	4b62      	ldr	r3, [pc, #392]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506e:	4a61      	ldr	r2, [pc, #388]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005070:	f043 0304 	orr.w	r3, r3, #4
 8005074:	6313      	str	r3, [r2, #48]	@ 0x30
 8005076:	4b5f      	ldr	r3, [pc, #380]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	61fb      	str	r3, [r7, #28]
 8005080:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	4b5b      	ldr	r3, [pc, #364]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	4a5a      	ldr	r2, [pc, #360]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 800508c:	f043 0308 	orr.w	r3, r3, #8
 8005090:	6313      	str	r3, [r2, #48]	@ 0x30
 8005092:	4b58      	ldr	r3, [pc, #352]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	4b54      	ldr	r3, [pc, #336]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a6:	4a53      	ldr	r2, [pc, #332]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 80050a8:	f043 0310 	orr.w	r3, r3, #16
 80050ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ae:	4b51      	ldr	r3, [pc, #324]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	4b4d      	ldr	r3, [pc, #308]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 80050c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c2:	4a4c      	ldr	r2, [pc, #304]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 80050c4:	f043 0320 	orr.w	r3, r3, #32
 80050c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ca:	4b4a      	ldr	r3, [pc, #296]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 80050cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	4b46      	ldr	r3, [pc, #280]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050de:	4a45      	ldr	r2, [pc, #276]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 80050e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80050e6:	4b43      	ldr	r3, [pc, #268]	@ (80051f4 <BSP_SDRAM_MspInit+0x1f4>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80050f2:	2302      	movs	r3, #2
 80050f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80050f6:	2302      	movs	r3, #2
 80050f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80050fe:	230c      	movs	r3, #12
 8005100:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8005102:	2360      	movs	r3, #96	@ 0x60
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005106:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800510a:	4619      	mov	r1, r3
 800510c:	483a      	ldr	r0, [pc, #232]	@ (80051f8 <BSP_SDRAM_MspInit+0x1f8>)
 800510e:	f001 fa41 	bl	8006594 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8005112:	2301      	movs	r3, #1
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8005116:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800511a:	4619      	mov	r1, r3
 800511c:	4837      	ldr	r0, [pc, #220]	@ (80051fc <BSP_SDRAM_MspInit+0x1fc>)
 800511e:	f001 fa39 	bl	8006594 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8005122:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005126:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8005128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800512c:	4619      	mov	r1, r3
 800512e:	4834      	ldr	r0, [pc, #208]	@ (8005200 <BSP_SDRAM_MspInit+0x200>)
 8005130:	f001 fa30 	bl	8006594 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8005134:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8005138:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800513a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800513e:	4619      	mov	r1, r3
 8005140:	4830      	ldr	r0, [pc, #192]	@ (8005204 <BSP_SDRAM_MspInit+0x204>)
 8005142:	f001 fa27 	bl	8006594 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8005146:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800514a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800514c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005150:	4619      	mov	r1, r3
 8005152:	482d      	ldr	r0, [pc, #180]	@ (8005208 <BSP_SDRAM_MspInit+0x208>)
 8005154:	f001 fa1e 	bl	8006594 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8005158:	f248 1333 	movw	r3, #33075	@ 0x8133
 800515c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800515e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005162:	4619      	mov	r1, r3
 8005164:	4829      	ldr	r0, [pc, #164]	@ (800520c <BSP_SDRAM_MspInit+0x20c>)
 8005166:	f001 fa15 	bl	8006594 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800516a:	4b29      	ldr	r3, [pc, #164]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 800516c:	2200      	movs	r2, #0
 800516e:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005170:	4b27      	ldr	r3, [pc, #156]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 8005172:	2280      	movs	r2, #128	@ 0x80
 8005174:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005176:	4b26      	ldr	r3, [pc, #152]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 8005178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800517c:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800517e:	4b24      	ldr	r3, [pc, #144]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 8005180:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005184:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005186:	4b22      	ldr	r3, [pc, #136]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 8005188:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800518c:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800518e:	4b20      	ldr	r3, [pc, #128]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 8005190:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005194:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8005196:	4b1e      	ldr	r3, [pc, #120]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 8005198:	2200      	movs	r2, #0
 800519a:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800519c:	4b1c      	ldr	r3, [pc, #112]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 800519e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80051a2:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80051a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80051aa:	4b19      	ldr	r3, [pc, #100]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 80051ac:	2203      	movs	r2, #3
 80051ae:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80051b0:	4b17      	ldr	r3, [pc, #92]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80051b6:	4b16      	ldr	r3, [pc, #88]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80051bc:	4b14      	ldr	r3, [pc, #80]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 80051be:	4a15      	ldr	r2, [pc, #84]	@ (8005214 <BSP_SDRAM_MspInit+0x214>)
 80051c0:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a12      	ldr	r2, [pc, #72]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 80051c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80051c8:	4a11      	ldr	r2, [pc, #68]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 80051ce:	4810      	ldr	r0, [pc, #64]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 80051d0:	f000 fb20 	bl	8005814 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 80051d4:	480e      	ldr	r0, [pc, #56]	@ (8005210 <BSP_SDRAM_MspInit+0x210>)
 80051d6:	f000 fa6f 	bl	80056b8 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80051da:	2200      	movs	r2, #0
 80051dc:	210f      	movs	r1, #15
 80051de:	2038      	movs	r0, #56	@ 0x38
 80051e0:	f000 fa24 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80051e4:	2038      	movs	r0, #56	@ 0x38
 80051e6:	f000 fa3d 	bl	8005664 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80051ea:	bf00      	nop
 80051ec:	3740      	adds	r7, #64	@ 0x40
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40020400 	.word	0x40020400
 80051fc:	40020800 	.word	0x40020800
 8005200:	40020c00 	.word	0x40020c00
 8005204:	40021000 	.word	0x40021000
 8005208:	40021400 	.word	0x40021400
 800520c:	40021800 	.word	0x40021800
 8005210:	20009238 	.word	0x20009238
 8005214:	40026410 	.word	0x40026410

08005218 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	460a      	mov	r2, r1
 8005222:	80fb      	strh	r3, [r7, #6]
 8005224:	4613      	mov	r3, r2
 8005226:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800522c:	4a13      	ldr	r2, [pc, #76]	@ (800527c <BSP_TS_Init+0x64>)
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8005232:	4a13      	ldr	r2, [pc, #76]	@ (8005280 <BSP_TS_Init+0x68>)
 8005234:	88bb      	ldrh	r3, [r7, #4]
 8005236:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8005238:	4b12      	ldr	r3, [pc, #72]	@ (8005284 <BSP_TS_Init+0x6c>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2082      	movs	r0, #130	@ 0x82
 800523e:	4798      	blx	r3
 8005240:	4603      	mov	r3, r0
 8005242:	461a      	mov	r2, r3
 8005244:	f640 0311 	movw	r3, #2065	@ 0x811
 8005248:	429a      	cmp	r2, r3
 800524a:	d104      	bne.n	8005256 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 800524c:	4b0e      	ldr	r3, [pc, #56]	@ (8005288 <BSP_TS_Init+0x70>)
 800524e:	4a0d      	ldr	r2, [pc, #52]	@ (8005284 <BSP_TS_Init+0x6c>)
 8005250:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800525c:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <BSP_TS_Init+0x70>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2082      	movs	r0, #130	@ 0x82
 8005264:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8005266:	4b08      	ldr	r3, [pc, #32]	@ (8005288 <BSP_TS_Init+0x70>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	2082      	movs	r0, #130	@ 0x82
 800526e:	4798      	blx	r3
  }

  return ret;
 8005270:	7bfb      	ldrb	r3, [r7, #15]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	2000929c 	.word	0x2000929c
 8005280:	2000929e 	.word	0x2000929e
 8005284:	2000021c 	.word	0x2000021c
 8005288:	20009298 	.word	0x20009298

0800528c <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef *TsState)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff, x, y, xr, yr;

  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8005294:	4b4f      	ldr	r3, [pc, #316]	@ (80053d4 <BSP_TS_GetState+0x148>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	2082      	movs	r0, #130	@ 0x82
 800529c:	4798      	blx	r3
 800529e:	4603      	mov	r3, r0
 80052a0:	461a      	mov	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	801a      	strh	r2, [r3, #0]

  if (TsState->TouchDetected)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 808d 	beq.w	80053ca <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80052b0:	4b48      	ldr	r3, [pc, #288]	@ (80053d4 <BSP_TS_GetState+0x148>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f107 020c 	add.w	r2, r7, #12
 80052ba:	f107 010e 	add.w	r1, r7, #14
 80052be:	2082      	movs	r0, #130	@ 0x82
 80052c0:	4798      	blx	r3
    /* Y value first correction */
    y = 3700 - y;
#else

    /* Y value first correction */
    y -= 360;
 80052c2:	89bb      	ldrh	r3, [r7, #12]
 80052c4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	81bb      	strh	r3, [r7, #12]

#endif

    /* Y value second correction */
    yr = y / 11;
 80052cc:	89bb      	ldrh	r3, [r7, #12]
 80052ce:	4a42      	ldr	r2, [pc, #264]	@ (80053d8 <BSP_TS_GetState+0x14c>)
 80052d0:	fba2 2303 	umull	r2, r3, r2, r3
 80052d4:	08db      	lsrs	r3, r3, #3
 80052d6:	82bb      	strh	r3, [r7, #20]

    /* Return y position value */
    if (yr <= 0)
 80052d8:	8abb      	ldrh	r3, [r7, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	82bb      	strh	r3, [r7, #20]
 80052e2:	e008      	b.n	80052f6 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80052e4:	4b3d      	ldr	r3, [pc, #244]	@ (80053dc <BSP_TS_GetState+0x150>)
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	8aba      	ldrh	r2, [r7, #20]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d903      	bls.n	80052f6 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80052ee:	4b3b      	ldr	r3, [pc, #236]	@ (80053dc <BSP_TS_GetState+0x150>)
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80052f6:	8abb      	ldrh	r3, [r7, #20]
 80052f8:	81bb      	strh	r3, [r7, #12]

    /* X value first correction */
    if (x <= 3000)
 80052fa:	89fb      	ldrh	r3, [r7, #14]
 80052fc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8005300:	4293      	cmp	r3, r2
 8005302:	d806      	bhi.n	8005312 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8005304:	89fb      	ldrh	r3, [r7, #14]
 8005306:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 800530a:	330e      	adds	r3, #14
 800530c:	b29b      	uxth	r3, r3
 800530e:	81fb      	strh	r3, [r7, #14]
 8005310:	e005      	b.n	800531e <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8005312:	89fb      	ldrh	r3, [r7, #14]
 8005314:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8005318:	3308      	adds	r3, #8
 800531a:	b29b      	uxth	r3, r3
 800531c:	81fb      	strh	r3, [r7, #14]
    }

    /* X value second correction */
    xr = x / 15;
 800531e:	89fb      	ldrh	r3, [r7, #14]
 8005320:	4a2f      	ldr	r2, [pc, #188]	@ (80053e0 <BSP_TS_GetState+0x154>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	08db      	lsrs	r3, r3, #3
 8005328:	82fb      	strh	r3, [r7, #22]

    /* Return X position value */
    if (xr <= 0)
 800532a:	8afb      	ldrh	r3, [r7, #22]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d102      	bne.n	8005336 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	82fb      	strh	r3, [r7, #22]
 8005334:	e008      	b.n	8005348 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8005336:	4b2b      	ldr	r3, [pc, #172]	@ (80053e4 <BSP_TS_GetState+0x158>)
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	8afa      	ldrh	r2, [r7, #22]
 800533c:	429a      	cmp	r2, r3
 800533e:	d903      	bls.n	8005348 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8005340:	4b28      	ldr	r3, [pc, #160]	@ (80053e4 <BSP_TS_GetState+0x158>)
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	3b01      	subs	r3, #1
 8005346:	82fb      	strh	r3, [r7, #22]
    }
    else
    {}

    x = xr;
 8005348:	8afb      	ldrh	r3, [r7, #22]
 800534a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x ? (x - _x): (_x - x);
 800534c:	89fb      	ldrh	r3, [r7, #14]
 800534e:	461a      	mov	r2, r3
 8005350:	4b25      	ldr	r3, [pc, #148]	@ (80053e8 <BSP_TS_GetState+0x15c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d906      	bls.n	8005366 <BSP_TS_GetState+0xda>
 8005358:	89fa      	ldrh	r2, [r7, #14]
 800535a:	4b23      	ldr	r3, [pc, #140]	@ (80053e8 <BSP_TS_GetState+0x15c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	b29b      	uxth	r3, r3
 8005364:	e005      	b.n	8005372 <BSP_TS_GetState+0xe6>
 8005366:	4b20      	ldr	r3, [pc, #128]	@ (80053e8 <BSP_TS_GetState+0x15c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	b29a      	uxth	r2, r3
 800536c:	89fb      	ldrh	r3, [r7, #14]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	b29b      	uxth	r3, r3
 8005372:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y ? (y - _y) : (_y - y);
 8005374:	89bb      	ldrh	r3, [r7, #12]
 8005376:	461a      	mov	r2, r3
 8005378:	4b1c      	ldr	r3, [pc, #112]	@ (80053ec <BSP_TS_GetState+0x160>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d906      	bls.n	800538e <BSP_TS_GetState+0x102>
 8005380:	89ba      	ldrh	r2, [r7, #12]
 8005382:	4b1a      	ldr	r3, [pc, #104]	@ (80053ec <BSP_TS_GetState+0x160>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	b29b      	uxth	r3, r3
 800538c:	e005      	b.n	800539a <BSP_TS_GetState+0x10e>
 800538e:	4b17      	ldr	r3, [pc, #92]	@ (80053ec <BSP_TS_GetState+0x160>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	b29a      	uxth	r2, r3
 8005394:	89bb      	ldrh	r3, [r7, #12]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	b29b      	uxth	r3, r3
 800539a:	823b      	strh	r3, [r7, #16]

    if (xDiff + yDiff > 5)
 800539c:	8a7a      	ldrh	r2, [r7, #18]
 800539e:	8a3b      	ldrh	r3, [r7, #16]
 80053a0:	4413      	add	r3, r2
 80053a2:	2b05      	cmp	r3, #5
 80053a4:	dd07      	ble.n	80053b6 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80053a6:	89fb      	ldrh	r3, [r7, #14]
 80053a8:	461a      	mov	r2, r3
 80053aa:	4b0f      	ldr	r3, [pc, #60]	@ (80053e8 <BSP_TS_GetState+0x15c>)
 80053ac:	601a      	str	r2, [r3, #0]
      _y = y;
 80053ae:	89bb      	ldrh	r3, [r7, #12]
 80053b0:	461a      	mov	r2, r3
 80053b2:	4b0e      	ldr	r3, [pc, #56]	@ (80053ec <BSP_TS_GetState+0x160>)
 80053b4:	601a      	str	r2, [r3, #0]
    }

    /* Update the X position */
    TsState->X = _x;
 80053b6:	4b0c      	ldr	r3, [pc, #48]	@ (80053e8 <BSP_TS_GetState+0x15c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	805a      	strh	r2, [r3, #2]

    /* Update the Y position */
    TsState->Y = _y;
 80053c0:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <BSP_TS_GetState+0x160>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	809a      	strh	r2, [r3, #4]
  }
}
 80053ca:	bf00      	nop
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20009298 	.word	0x20009298
 80053d8:	ba2e8ba3 	.word	0xba2e8ba3
 80053dc:	2000929e 	.word	0x2000929e
 80053e0:	88888889 	.word	0x88888889
 80053e4:	2000929c 	.word	0x2000929c
 80053e8:	200092a0 	.word	0x200092a0
 80053ec:	200092a4 	.word	0x200092a4

080053f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005430 <HAL_Init+0x40>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a0d      	ldr	r2, [pc, #52]	@ (8005430 <HAL_Init+0x40>)
 80053fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005400:	4b0b      	ldr	r3, [pc, #44]	@ (8005430 <HAL_Init+0x40>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a0a      	ldr	r2, [pc, #40]	@ (8005430 <HAL_Init+0x40>)
 8005406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800540a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800540c:	4b08      	ldr	r3, [pc, #32]	@ (8005430 <HAL_Init+0x40>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a07      	ldr	r2, [pc, #28]	@ (8005430 <HAL_Init+0x40>)
 8005412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005418:	2003      	movs	r0, #3
 800541a:	f000 f8fc 	bl	8005616 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800541e:	200f      	movs	r0, #15
 8005420:	f7fd ff4e 	bl	80032c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005424:	f7fd fb32 	bl	8002a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40023c00 	.word	0x40023c00

08005434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005438:	4b06      	ldr	r3, [pc, #24]	@ (8005454 <HAL_IncTick+0x20>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	461a      	mov	r2, r3
 800543e:	4b06      	ldr	r3, [pc, #24]	@ (8005458 <HAL_IncTick+0x24>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4413      	add	r3, r2
 8005444:	4a04      	ldr	r2, [pc, #16]	@ (8005458 <HAL_IncTick+0x24>)
 8005446:	6013      	str	r3, [r2, #0]
}
 8005448:	bf00      	nop
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	2000026c 	.word	0x2000026c
 8005458:	200092a8 	.word	0x200092a8

0800545c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  return uwTick;
 8005460:	4b03      	ldr	r3, [pc, #12]	@ (8005470 <HAL_GetTick+0x14>)
 8005462:	681b      	ldr	r3, [r3, #0]
}
 8005464:	4618      	mov	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	200092a8 	.word	0x200092a8

08005474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800547c:	f7ff ffee 	bl	800545c <HAL_GetTick>
 8005480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548c:	d005      	beq.n	800549a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800548e:	4b0a      	ldr	r3, [pc, #40]	@ (80054b8 <HAL_Delay+0x44>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800549a:	bf00      	nop
 800549c:	f7ff ffde 	bl	800545c <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d8f7      	bhi.n	800549c <HAL_Delay+0x28>
  {
  }
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	2000026c 	.word	0x2000026c

080054bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005500 <__NVIC_SetPriorityGrouping+0x44>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054d8:	4013      	ands	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80054e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054ee:	4a04      	ldr	r2, [pc, #16]	@ (8005500 <__NVIC_SetPriorityGrouping+0x44>)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	60d3      	str	r3, [r2, #12]
}
 80054f4:	bf00      	nop
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	e000ed00 	.word	0xe000ed00

08005504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005508:	4b04      	ldr	r3, [pc, #16]	@ (800551c <__NVIC_GetPriorityGrouping+0x18>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	0a1b      	lsrs	r3, r3, #8
 800550e:	f003 0307 	and.w	r3, r3, #7
}
 8005512:	4618      	mov	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	e000ed00 	.word	0xe000ed00

08005520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800552a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552e:	2b00      	cmp	r3, #0
 8005530:	db0b      	blt.n	800554a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	f003 021f 	and.w	r2, r3, #31
 8005538:	4907      	ldr	r1, [pc, #28]	@ (8005558 <__NVIC_EnableIRQ+0x38>)
 800553a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553e:	095b      	lsrs	r3, r3, #5
 8005540:	2001      	movs	r0, #1
 8005542:	fa00 f202 	lsl.w	r2, r0, r2
 8005546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	e000e100 	.word	0xe000e100

0800555c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	6039      	str	r1, [r7, #0]
 8005566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556c:	2b00      	cmp	r3, #0
 800556e:	db0a      	blt.n	8005586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	b2da      	uxtb	r2, r3
 8005574:	490c      	ldr	r1, [pc, #48]	@ (80055a8 <__NVIC_SetPriority+0x4c>)
 8005576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557a:	0112      	lsls	r2, r2, #4
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	440b      	add	r3, r1
 8005580:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005584:	e00a      	b.n	800559c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	b2da      	uxtb	r2, r3
 800558a:	4908      	ldr	r1, [pc, #32]	@ (80055ac <__NVIC_SetPriority+0x50>)
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	3b04      	subs	r3, #4
 8005594:	0112      	lsls	r2, r2, #4
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	440b      	add	r3, r1
 800559a:	761a      	strb	r2, [r3, #24]
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	e000e100 	.word	0xe000e100
 80055ac:	e000ed00 	.word	0xe000ed00

080055b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b089      	sub	sp, #36	@ 0x24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f1c3 0307 	rsb	r3, r3, #7
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	bf28      	it	cs
 80055ce:	2304      	movcs	r3, #4
 80055d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	3304      	adds	r3, #4
 80055d6:	2b06      	cmp	r3, #6
 80055d8:	d902      	bls.n	80055e0 <NVIC_EncodePriority+0x30>
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	3b03      	subs	r3, #3
 80055de:	e000      	b.n	80055e2 <NVIC_EncodePriority+0x32>
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055e4:	f04f 32ff 	mov.w	r2, #4294967295
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43da      	mvns	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	401a      	ands	r2, r3
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055f8:	f04f 31ff 	mov.w	r1, #4294967295
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005602:	43d9      	mvns	r1, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005608:	4313      	orrs	r3, r2
         );
}
 800560a:	4618      	mov	r0, r3
 800560c:	3724      	adds	r7, #36	@ 0x24
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff ff4c 	bl	80054bc <__NVIC_SetPriorityGrouping>
}
 8005624:	bf00      	nop
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800563e:	f7ff ff61 	bl	8005504 <__NVIC_GetPriorityGrouping>
 8005642:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	6978      	ldr	r0, [r7, #20]
 800564a:	f7ff ffb1 	bl	80055b0 <NVIC_EncodePriority>
 800564e:	4602      	mov	r2, r0
 8005650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005654:	4611      	mov	r1, r2
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff ff80 	bl	800555c <__NVIC_SetPriority>
}
 800565c:	bf00      	nop
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800566e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff ff54 	bl	8005520 <__NVIC_EnableIRQ>
}
 8005678:	bf00      	nop
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e00e      	b.n	80056b0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	795b      	ldrb	r3, [r3, #5]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fd fa1a 	bl	8002adc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80056c4:	f7ff feca 	bl	800545c <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e099      	b.n	8005808 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056f4:	e00f      	b.n	8005716 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056f6:	f7ff feb1 	bl	800545c <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b05      	cmp	r3, #5
 8005702:	d908      	bls.n	8005716 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2203      	movs	r2, #3
 800570e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e078      	b.n	8005808 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e8      	bne.n	80056f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	4b38      	ldr	r3, [pc, #224]	@ (8005810 <HAL_DMA_Init+0x158>)
 8005730:	4013      	ands	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005742:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800574e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800575a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	2b04      	cmp	r3, #4
 800576e:	d107      	bne.n	8005780 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005778:	4313      	orrs	r3, r2
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f023 0307 	bic.w	r3, r3, #7
 8005796:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d117      	bne.n	80057da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00e      	beq.n	80057da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f8bd 	bl	800593c <DMA_CheckFifoParam>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2240      	movs	r2, #64	@ 0x40
 80057cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80057d6:	2301      	movs	r3, #1
 80057d8:	e016      	b.n	8005808 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f874 	bl	80058d0 <DMA_CalcBaseAndBitshift>
 80057e8:	4603      	mov	r3, r0
 80057ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f0:	223f      	movs	r2, #63	@ 0x3f
 80057f2:	409a      	lsls	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	f010803f 	.word	0xf010803f

08005814 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e050      	b.n	80058c8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d101      	bne.n	8005836 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005832:	2302      	movs	r3, #2
 8005834:	e048      	b.n	80058c8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2200      	movs	r2, #0
 8005854:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2200      	movs	r2, #0
 800585c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2200      	movs	r2, #0
 800586c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2221      	movs	r2, #33	@ 0x21
 8005874:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f82a 	bl	80058d0 <DMA_CalcBaseAndBitshift>
 800587c:	4603      	mov	r3, r0
 800587e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a8:	223f      	movs	r2, #63	@ 0x3f
 80058aa:	409a      	lsls	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	3b10      	subs	r3, #16
 80058e0:	4a14      	ldr	r2, [pc, #80]	@ (8005934 <DMA_CalcBaseAndBitshift+0x64>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	091b      	lsrs	r3, r3, #4
 80058e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058ea:	4a13      	ldr	r2, [pc, #76]	@ (8005938 <DMA_CalcBaseAndBitshift+0x68>)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d909      	bls.n	8005912 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005906:	f023 0303 	bic.w	r3, r3, #3
 800590a:	1d1a      	adds	r2, r3, #4
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005910:	e007      	b.n	8005922 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800591a:	f023 0303 	bic.w	r3, r3, #3
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	aaaaaaab 	.word	0xaaaaaaab
 8005938:	080169ec 	.word	0x080169ec

0800593c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d11f      	bne.n	8005996 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b03      	cmp	r3, #3
 800595a:	d856      	bhi.n	8005a0a <DMA_CheckFifoParam+0xce>
 800595c:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <DMA_CheckFifoParam+0x28>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	08005975 	.word	0x08005975
 8005968:	08005987 	.word	0x08005987
 800596c:	08005975 	.word	0x08005975
 8005970:	08005a0b 	.word	0x08005a0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d046      	beq.n	8005a0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005984:	e043      	b.n	8005a0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800598e:	d140      	bne.n	8005a12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005994:	e03d      	b.n	8005a12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800599e:	d121      	bne.n	80059e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d837      	bhi.n	8005a16 <DMA_CheckFifoParam+0xda>
 80059a6:	a201      	add	r2, pc, #4	@ (adr r2, 80059ac <DMA_CheckFifoParam+0x70>)
 80059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ac:	080059bd 	.word	0x080059bd
 80059b0:	080059c3 	.word	0x080059c3
 80059b4:	080059bd 	.word	0x080059bd
 80059b8:	080059d5 	.word	0x080059d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	73fb      	strb	r3, [r7, #15]
      break;
 80059c0:	e030      	b.n	8005a24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d025      	beq.n	8005a1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d2:	e022      	b.n	8005a1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80059dc:	d11f      	bne.n	8005a1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059e2:	e01c      	b.n	8005a1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d903      	bls.n	80059f2 <DMA_CheckFifoParam+0xb6>
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d003      	beq.n	80059f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80059f0:	e018      	b.n	8005a24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	73fb      	strb	r3, [r7, #15]
      break;
 80059f6:	e015      	b.n	8005a24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00e      	beq.n	8005a22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	73fb      	strb	r3, [r7, #15]
      break;
 8005a08:	e00b      	b.n	8005a22 <DMA_CheckFifoParam+0xe6>
      break;
 8005a0a:	bf00      	nop
 8005a0c:	e00a      	b.n	8005a24 <DMA_CheckFifoParam+0xe8>
      break;
 8005a0e:	bf00      	nop
 8005a10:	e008      	b.n	8005a24 <DMA_CheckFifoParam+0xe8>
      break;
 8005a12:	bf00      	nop
 8005a14:	e006      	b.n	8005a24 <DMA_CheckFifoParam+0xe8>
      break;
 8005a16:	bf00      	nop
 8005a18:	e004      	b.n	8005a24 <DMA_CheckFifoParam+0xe8>
      break;
 8005a1a:	bf00      	nop
 8005a1c:	e002      	b.n	8005a24 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a1e:	bf00      	nop
 8005a20:	e000      	b.n	8005a24 <DMA_CheckFifoParam+0xe8>
      break;
 8005a22:	bf00      	nop
    }
  } 
  
  return status; 
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop

08005a34 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e03b      	b.n	8005abe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fd f860 	bl	8002b20 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a84:	f023 0107 	bic.w	r1, r3, #7
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005a9e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	68d1      	ldr	r1, [r2, #12]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af02      	add	r7, sp, #8
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
 8005ad2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_DMA2D_Start+0x1c>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e018      	b.n	8005b14 <HAL_DMA2D_Start+0x4e>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2202      	movs	r2, #2
 8005aee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 fa99 	bl	8006034 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0201 	orr.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d056      	beq.n	8005be6 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b38:	f7ff fc90 	bl	800545c <HAL_GetTick>
 8005b3c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005b3e:	e04b      	b.n	8005bd8 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d023      	beq.n	8005b9a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b60:	f043 0202 	orr.w	r2, r3, #2
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b76:	f043 0201 	orr.w	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2221      	movs	r2, #33	@ 0x21
 8005b84:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2204      	movs	r2, #4
 8005b8a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e0a5      	b.n	8005ce6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d01a      	beq.n	8005bd8 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ba2:	f7ff fc5b 	bl	800545c <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d302      	bcc.n	8005bb8 <HAL_DMA2D_PollForTransfer+0x9c>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10f      	bne.n	8005bd8 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bbc:	f043 0220 	orr.w	r2, r3, #32
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2203      	movs	r2, #3
 8005bc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e086      	b.n	8005ce6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0ac      	beq.n	8005b40 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d061      	beq.n	8005ccc <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c08:	f7ff fc28 	bl	800545c <HAL_GetTick>
 8005c0c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005c0e:	e056      	b.n	8005cbe <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d02e      	beq.n	8005c80 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c30:	f043 0204 	orr.w	r2, r3, #4
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d005      	beq.n	8005c4e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c46:	f043 0202 	orr.w	r2, r3, #2
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c5c:	f043 0201 	orr.w	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2229      	movs	r2, #41	@ 0x29
 8005c6a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e032      	b.n	8005ce6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c86:	d01a      	beq.n	8005cbe <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c88:	f7ff fbe8 	bl	800545c <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d302      	bcc.n	8005c9e <HAL_DMA2D_PollForTransfer+0x182>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10f      	bne.n	8005cbe <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca2:	f043 0220 	orr.w	r2, r3, #32
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2203      	movs	r2, #3
 8005cae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e013      	b.n	8005ce6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0a1      	beq.n	8005c10 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2212      	movs	r2, #18
 8005cd2:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d026      	beq.n	8005d5e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d021      	beq.n	8005d5e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d28:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2e:	f043 0201 	orr.w	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2204      	movs	r2, #4
 8005d42:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d026      	beq.n	8005db6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d021      	beq.n	8005db6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d80:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2220      	movs	r2, #32
 8005d88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8e:	f043 0202 	orr.w	r2, r3, #2
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2204      	movs	r2, #4
 8005d9a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d026      	beq.n	8005e0e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d021      	beq.n	8005e0e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dd8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2208      	movs	r2, #8
 8005de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de6:	f043 0204 	orr.w	r2, r3, #4
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2204      	movs	r2, #4
 8005df2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d013      	beq.n	8005e40 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00e      	beq.n	8005e40 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e30:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2204      	movs	r2, #4
 8005e38:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f853 	bl	8005ee6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d024      	beq.n	8005e94 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01f      	beq.n	8005e94 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005e62:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d01f      	beq.n	8005ede <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01a      	beq.n	8005ede <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005eb6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2210      	movs	r2, #16
 8005ebe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f80e 	bl	8005efa <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_DMA2D_ConfigLayer+0x20>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e079      	b.n	8006024 <HAL_DMA2D_ConfigLayer+0x114>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	3318      	adds	r3, #24
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	041b      	lsls	r3, r3, #16
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005f5a:	4b35      	ldr	r3, [pc, #212]	@ (8006030 <HAL_DMA2D_ConfigLayer+0x120>)
 8005f5c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2b0a      	cmp	r3, #10
 8005f64:	d003      	beq.n	8005f6e <HAL_DMA2D_ConfigLayer+0x5e>
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	d107      	bne.n	8005f7e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	e005      	b.n	8005f8a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	061b      	lsls	r3, r3, #24
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d120      	bne.n	8005fd2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	ea02 0103 	and.w	r1, r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b0a      	cmp	r3, #10
 8005fb8:	d003      	beq.n	8005fc2 <HAL_DMA2D_ConfigLayer+0xb2>
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b09      	cmp	r3, #9
 8005fc0:	d127      	bne.n	8006012 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005fce:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fd0:	e01f      	b.n	8006012 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69da      	ldr	r2, [r3, #28]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	43db      	mvns	r3, r3
 8005fdc:	ea02 0103 	and.w	r1, r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	6812      	ldr	r2, [r2, #0]
 8005ff2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b0a      	cmp	r3, #10
 8005ffa:	d003      	beq.n	8006004 <HAL_DMA2D_ConfigLayer+0xf4>
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b09      	cmp	r3, #9
 8006002:	d106      	bne.n	8006012 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006010:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	ff03000f 	.word	0xff03000f

08006034 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006034:	b480      	push	{r7}
 8006036:	b08b      	sub	sp, #44	@ 0x2c
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006048:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	041a      	lsls	r2, r3, #16
 8006050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006052:	431a      	orrs	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800606c:	d174      	bne.n	8006158 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006074:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800607c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006084:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d108      	bne.n	80060a6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	431a      	orrs	r2, r3
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	4313      	orrs	r3, r2
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060a4:	e053      	b.n	800614e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d106      	bne.n	80060bc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ba:	e048      	b.n	800614e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d111      	bne.n	80060e8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	0cdb      	lsrs	r3, r3, #19
 80060c8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	0a9b      	lsrs	r3, r3, #10
 80060ce:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	08db      	lsrs	r3, r3, #3
 80060d4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	02db      	lsls	r3, r3, #11
 80060de:	4313      	orrs	r3, r2
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e6:	e032      	b.n	800614e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d117      	bne.n	8006120 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	0fdb      	lsrs	r3, r3, #31
 80060f4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	0cdb      	lsrs	r3, r3, #19
 80060fa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	0adb      	lsrs	r3, r3, #11
 8006100:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	08db      	lsrs	r3, r3, #3
 8006106:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	029b      	lsls	r3, r3, #10
 8006110:	431a      	orrs	r2, r3
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	03db      	lsls	r3, r3, #15
 8006116:	4313      	orrs	r3, r2
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
 800611e:	e016      	b.n	800614e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	0f1b      	lsrs	r3, r3, #28
 8006124:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	0d1b      	lsrs	r3, r3, #20
 800612a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	0b1b      	lsrs	r3, r3, #12
 8006130:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	011a      	lsls	r2, r3, #4
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	431a      	orrs	r2, r3
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	031b      	lsls	r3, r3, #12
 8006146:	4313      	orrs	r3, r2
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006154:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006156:	e003      	b.n	8006160 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	60da      	str	r2, [r3, #12]
}
 8006160:	bf00      	nop
 8006162:	372c      	adds	r7, #44	@ 0x2c
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800617e:	4b23      	ldr	r3, [pc, #140]	@ (800620c <HAL_FLASH_Program+0xa0>)
 8006180:	7e1b      	ldrb	r3, [r3, #24]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_FLASH_Program+0x1e>
 8006186:	2302      	movs	r3, #2
 8006188:	e03b      	b.n	8006202 <HAL_FLASH_Program+0x96>
 800618a:	4b20      	ldr	r3, [pc, #128]	@ (800620c <HAL_FLASH_Program+0xa0>)
 800618c:	2201      	movs	r2, #1
 800618e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006190:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006194:	f000 f870 	bl	8006278 <FLASH_WaitForLastOperation>
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d12b      	bne.n	80061fa <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d105      	bne.n	80061b4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80061a8:	783b      	ldrb	r3, [r7, #0]
 80061aa:	4619      	mov	r1, r3
 80061ac:	68b8      	ldr	r0, [r7, #8]
 80061ae:	f000 f91b 	bl	80063e8 <FLASH_Program_Byte>
 80061b2:	e016      	b.n	80061e2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d105      	bne.n	80061c6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80061ba:	883b      	ldrh	r3, [r7, #0]
 80061bc:	4619      	mov	r1, r3
 80061be:	68b8      	ldr	r0, [r7, #8]
 80061c0:	f000 f8ee 	bl	80063a0 <FLASH_Program_HalfWord>
 80061c4:	e00d      	b.n	80061e2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d105      	bne.n	80061d8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	4619      	mov	r1, r3
 80061d0:	68b8      	ldr	r0, [r7, #8]
 80061d2:	f000 f8c3 	bl	800635c <FLASH_Program_Word>
 80061d6:	e004      	b.n	80061e2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80061d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061dc:	68b8      	ldr	r0, [r7, #8]
 80061de:	f000 f88b 	bl	80062f8 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80061e2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80061e6:	f000 f847 	bl	8006278 <FLASH_WaitForLastOperation>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80061ee:	4b08      	ldr	r3, [pc, #32]	@ (8006210 <HAL_FLASH_Program+0xa4>)
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	4a07      	ldr	r2, [pc, #28]	@ (8006210 <HAL_FLASH_Program+0xa4>)
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80061fa:	4b04      	ldr	r3, [pc, #16]	@ (800620c <HAL_FLASH_Program+0xa0>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	761a      	strb	r2, [r3, #24]

  return status;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	200092ac 	.word	0x200092ac
 8006210:	40023c00 	.word	0x40023c00

08006214 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800621e:	4b0b      	ldr	r3, [pc, #44]	@ (800624c <HAL_FLASH_Unlock+0x38>)
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	da0b      	bge.n	800623e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006226:	4b09      	ldr	r3, [pc, #36]	@ (800624c <HAL_FLASH_Unlock+0x38>)
 8006228:	4a09      	ldr	r2, [pc, #36]	@ (8006250 <HAL_FLASH_Unlock+0x3c>)
 800622a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800622c:	4b07      	ldr	r3, [pc, #28]	@ (800624c <HAL_FLASH_Unlock+0x38>)
 800622e:	4a09      	ldr	r2, [pc, #36]	@ (8006254 <HAL_FLASH_Unlock+0x40>)
 8006230:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006232:	4b06      	ldr	r3, [pc, #24]	@ (800624c <HAL_FLASH_Unlock+0x38>)
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	da01      	bge.n	800623e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800623e:	79fb      	ldrb	r3, [r7, #7]
}
 8006240:	4618      	mov	r0, r3
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	40023c00 	.word	0x40023c00
 8006250:	45670123 	.word	0x45670123
 8006254:	cdef89ab 	.word	0xcdef89ab

08006258 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800625c:	4b05      	ldr	r3, [pc, #20]	@ (8006274 <HAL_FLASH_Lock+0x1c>)
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	4a04      	ldr	r2, [pc, #16]	@ (8006274 <HAL_FLASH_Lock+0x1c>)
 8006262:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006266:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	40023c00 	.word	0x40023c00

08006278 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006284:	4b1a      	ldr	r3, [pc, #104]	@ (80062f0 <FLASH_WaitForLastOperation+0x78>)
 8006286:	2200      	movs	r2, #0
 8006288:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800628a:	f7ff f8e7 	bl	800545c <HAL_GetTick>
 800628e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8006290:	e010      	b.n	80062b4 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d00c      	beq.n	80062b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <FLASH_WaitForLastOperation+0x38>
 80062a0:	f7ff f8dc 	bl	800545c <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d201      	bcs.n	80062b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e019      	b.n	80062e8 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80062b4:	4b0f      	ldr	r3, [pc, #60]	@ (80062f4 <FLASH_WaitForLastOperation+0x7c>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e8      	bne.n	8006292 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80062c0:	4b0c      	ldr	r3, [pc, #48]	@ (80062f4 <FLASH_WaitForLastOperation+0x7c>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80062cc:	4b09      	ldr	r3, [pc, #36]	@ (80062f4 <FLASH_WaitForLastOperation+0x7c>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80062d2:	4b08      	ldr	r3, [pc, #32]	@ (80062f4 <FLASH_WaitForLastOperation+0x7c>)
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80062de:	f000 f8a5 	bl	800642c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80062e6:	2300      	movs	r3, #0

}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	200092ac 	.word	0x200092ac
 80062f4:	40023c00 	.word	0x40023c00

080062f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006304:	4b14      	ldr	r3, [pc, #80]	@ (8006358 <FLASH_Program_DoubleWord+0x60>)
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	4a13      	ldr	r2, [pc, #76]	@ (8006358 <FLASH_Program_DoubleWord+0x60>)
 800630a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800630e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006310:	4b11      	ldr	r3, [pc, #68]	@ (8006358 <FLASH_Program_DoubleWord+0x60>)
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	4a10      	ldr	r2, [pc, #64]	@ (8006358 <FLASH_Program_DoubleWord+0x60>)
 8006316:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800631a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800631c:	4b0e      	ldr	r3, [pc, #56]	@ (8006358 <FLASH_Program_DoubleWord+0x60>)
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	4a0d      	ldr	r2, [pc, #52]	@ (8006358 <FLASH_Program_DoubleWord+0x60>)
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800632e:	f3bf 8f6f 	isb	sy
}
 8006332:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8006334:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	000a      	movs	r2, r1
 8006342:	2300      	movs	r3, #0
 8006344:	68f9      	ldr	r1, [r7, #12]
 8006346:	3104      	adds	r1, #4
 8006348:	4613      	mov	r3, r2
 800634a:	600b      	str	r3, [r1, #0]
}
 800634c:	bf00      	nop
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	40023c00 	.word	0x40023c00

0800635c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006366:	4b0d      	ldr	r3, [pc, #52]	@ (800639c <FLASH_Program_Word+0x40>)
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	4a0c      	ldr	r2, [pc, #48]	@ (800639c <FLASH_Program_Word+0x40>)
 800636c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006370:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006372:	4b0a      	ldr	r3, [pc, #40]	@ (800639c <FLASH_Program_Word+0x40>)
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	4a09      	ldr	r2, [pc, #36]	@ (800639c <FLASH_Program_Word+0x40>)
 8006378:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800637c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800637e:	4b07      	ldr	r3, [pc, #28]	@ (800639c <FLASH_Program_Word+0x40>)
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	4a06      	ldr	r2, [pc, #24]	@ (800639c <FLASH_Program_Word+0x40>)
 8006384:	f043 0301 	orr.w	r3, r3, #1
 8006388:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	601a      	str	r2, [r3, #0]
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	40023c00 	.word	0x40023c00

080063a0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063ac:	4b0d      	ldr	r3, [pc, #52]	@ (80063e4 <FLASH_Program_HalfWord+0x44>)
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	4a0c      	ldr	r2, [pc, #48]	@ (80063e4 <FLASH_Program_HalfWord+0x44>)
 80063b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80063b8:	4b0a      	ldr	r3, [pc, #40]	@ (80063e4 <FLASH_Program_HalfWord+0x44>)
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	4a09      	ldr	r2, [pc, #36]	@ (80063e4 <FLASH_Program_HalfWord+0x44>)
 80063be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80063c4:	4b07      	ldr	r3, [pc, #28]	@ (80063e4 <FLASH_Program_HalfWord+0x44>)
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	4a06      	ldr	r2, [pc, #24]	@ (80063e4 <FLASH_Program_HalfWord+0x44>)
 80063ca:	f043 0301 	orr.w	r3, r3, #1
 80063ce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	887a      	ldrh	r2, [r7, #2]
 80063d4:	801a      	strh	r2, [r3, #0]
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40023c00 	.word	0x40023c00

080063e8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006428 <FLASH_Program_Byte+0x40>)
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	4a0b      	ldr	r2, [pc, #44]	@ (8006428 <FLASH_Program_Byte+0x40>)
 80063fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006400:	4b09      	ldr	r3, [pc, #36]	@ (8006428 <FLASH_Program_Byte+0x40>)
 8006402:	4a09      	ldr	r2, [pc, #36]	@ (8006428 <FLASH_Program_Byte+0x40>)
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006408:	4b07      	ldr	r3, [pc, #28]	@ (8006428 <FLASH_Program_Byte+0x40>)
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	4a06      	ldr	r2, [pc, #24]	@ (8006428 <FLASH_Program_Byte+0x40>)
 800640e:	f043 0301 	orr.w	r3, r3, #1
 8006412:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	78fa      	ldrb	r2, [r7, #3]
 8006418:	701a      	strb	r2, [r3, #0]
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	40023c00 	.word	0x40023c00

0800642c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006430:	4b2f      	ldr	r3, [pc, #188]	@ (80064f0 <FLASH_SetErrorCode+0xc4>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0310 	and.w	r3, r3, #16
 8006438:	2b00      	cmp	r3, #0
 800643a:	d008      	beq.n	800644e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800643c:	4b2d      	ldr	r3, [pc, #180]	@ (80064f4 <FLASH_SetErrorCode+0xc8>)
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	f043 0310 	orr.w	r3, r3, #16
 8006444:	4a2b      	ldr	r2, [pc, #172]	@ (80064f4 <FLASH_SetErrorCode+0xc8>)
 8006446:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006448:	4b29      	ldr	r3, [pc, #164]	@ (80064f0 <FLASH_SetErrorCode+0xc4>)
 800644a:	2210      	movs	r2, #16
 800644c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800644e:	4b28      	ldr	r3, [pc, #160]	@ (80064f0 <FLASH_SetErrorCode+0xc4>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d008      	beq.n	800646c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800645a:	4b26      	ldr	r3, [pc, #152]	@ (80064f4 <FLASH_SetErrorCode+0xc8>)
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	f043 0308 	orr.w	r3, r3, #8
 8006462:	4a24      	ldr	r2, [pc, #144]	@ (80064f4 <FLASH_SetErrorCode+0xc8>)
 8006464:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006466:	4b22      	ldr	r3, [pc, #136]	@ (80064f0 <FLASH_SetErrorCode+0xc4>)
 8006468:	2220      	movs	r2, #32
 800646a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800646c:	4b20      	ldr	r3, [pc, #128]	@ (80064f0 <FLASH_SetErrorCode+0xc4>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	d008      	beq.n	800648a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006478:	4b1e      	ldr	r3, [pc, #120]	@ (80064f4 <FLASH_SetErrorCode+0xc8>)
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f043 0304 	orr.w	r3, r3, #4
 8006480:	4a1c      	ldr	r2, [pc, #112]	@ (80064f4 <FLASH_SetErrorCode+0xc8>)
 8006482:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006484:	4b1a      	ldr	r3, [pc, #104]	@ (80064f0 <FLASH_SetErrorCode+0xc4>)
 8006486:	2240      	movs	r2, #64	@ 0x40
 8006488:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800648a:	4b19      	ldr	r3, [pc, #100]	@ (80064f0 <FLASH_SetErrorCode+0xc4>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006492:	2b00      	cmp	r3, #0
 8006494:	d008      	beq.n	80064a8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006496:	4b17      	ldr	r3, [pc, #92]	@ (80064f4 <FLASH_SetErrorCode+0xc8>)
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f043 0302 	orr.w	r3, r3, #2
 800649e:	4a15      	ldr	r2, [pc, #84]	@ (80064f4 <FLASH_SetErrorCode+0xc8>)
 80064a0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80064a2:	4b13      	ldr	r3, [pc, #76]	@ (80064f0 <FLASH_SetErrorCode+0xc4>)
 80064a4:	2280      	movs	r2, #128	@ 0x80
 80064a6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80064a8:	4b11      	ldr	r3, [pc, #68]	@ (80064f0 <FLASH_SetErrorCode+0xc4>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d009      	beq.n	80064c8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80064b4:	4b0f      	ldr	r3, [pc, #60]	@ (80064f4 <FLASH_SetErrorCode+0xc8>)
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f043 0301 	orr.w	r3, r3, #1
 80064bc:	4a0d      	ldr	r2, [pc, #52]	@ (80064f4 <FLASH_SetErrorCode+0xc8>)
 80064be:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80064c0:	4b0b      	ldr	r3, [pc, #44]	@ (80064f0 <FLASH_SetErrorCode+0xc4>)
 80064c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064c6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80064c8:	4b09      	ldr	r3, [pc, #36]	@ (80064f0 <FLASH_SetErrorCode+0xc4>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80064d4:	4b07      	ldr	r3, [pc, #28]	@ (80064f4 <FLASH_SetErrorCode+0xc8>)
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	f043 0320 	orr.w	r3, r3, #32
 80064dc:	4a05      	ldr	r2, [pc, #20]	@ (80064f4 <FLASH_SetErrorCode+0xc8>)
 80064de:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80064e0:	4b03      	ldr	r3, [pc, #12]	@ (80064f0 <FLASH_SetErrorCode+0xc4>)
 80064e2:	2202      	movs	r2, #2
 80064e4:	60da      	str	r2, [r3, #12]
  }
}
 80064e6:	bf00      	nop
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	40023c00 	.word	0x40023c00
 80064f4:	200092ac 	.word	0x200092ac

080064f8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d102      	bne.n	8006514 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	e010      	b.n	8006536 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d103      	bne.n	8006522 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800651a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e009      	b.n	8006536 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006522:	78fb      	ldrb	r3, [r7, #3]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d103      	bne.n	8006530 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006528:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	e002      	b.n	8006536 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006530:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006534:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b0b      	cmp	r3, #11
 800653a:	d902      	bls.n	8006542 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3304      	adds	r3, #4
 8006540:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006542:	4b13      	ldr	r3, [pc, #76]	@ (8006590 <FLASH_Erase_Sector+0x98>)
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	4a12      	ldr	r2, [pc, #72]	@ (8006590 <FLASH_Erase_Sector+0x98>)
 8006548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800654c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800654e:	4b10      	ldr	r3, [pc, #64]	@ (8006590 <FLASH_Erase_Sector+0x98>)
 8006550:	691a      	ldr	r2, [r3, #16]
 8006552:	490f      	ldr	r1, [pc, #60]	@ (8006590 <FLASH_Erase_Sector+0x98>)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4313      	orrs	r3, r2
 8006558:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800655a:	4b0d      	ldr	r3, [pc, #52]	@ (8006590 <FLASH_Erase_Sector+0x98>)
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	4a0c      	ldr	r2, [pc, #48]	@ (8006590 <FLASH_Erase_Sector+0x98>)
 8006560:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006564:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006566:	4b0a      	ldr	r3, [pc, #40]	@ (8006590 <FLASH_Erase_Sector+0x98>)
 8006568:	691a      	ldr	r2, [r3, #16]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	4313      	orrs	r3, r2
 8006570:	4a07      	ldr	r2, [pc, #28]	@ (8006590 <FLASH_Erase_Sector+0x98>)
 8006572:	f043 0302 	orr.w	r3, r3, #2
 8006576:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006578:	4b05      	ldr	r3, [pc, #20]	@ (8006590 <FLASH_Erase_Sector+0x98>)
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	4a04      	ldr	r2, [pc, #16]	@ (8006590 <FLASH_Erase_Sector+0x98>)
 800657e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006582:	6113      	str	r3, [r2, #16]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	40023c00 	.word	0x40023c00

08006594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006594:	b480      	push	{r7}
 8006596:	b089      	sub	sp, #36	@ 0x24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	e177      	b.n	80068a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065b0:	2201      	movs	r2, #1
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4013      	ands	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	f040 8166 	bne.w	800689a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d005      	beq.n	80065e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d130      	bne.n	8006648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	2203      	movs	r2, #3
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	43db      	mvns	r3, r3
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	4013      	ands	r3, r2
 80065fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	fa02 f303 	lsl.w	r3, r2, r3
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	4313      	orrs	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800661c:	2201      	movs	r2, #1
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	43db      	mvns	r3, r3
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	4013      	ands	r3, r2
 800662a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	091b      	lsrs	r3, r3, #4
 8006632:	f003 0201 	and.w	r2, r3, #1
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	4313      	orrs	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f003 0303 	and.w	r3, r3, #3
 8006650:	2b03      	cmp	r3, #3
 8006652:	d017      	beq.n	8006684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	2203      	movs	r2, #3
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	43db      	mvns	r3, r3
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	4013      	ands	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	fa02 f303 	lsl.w	r3, r2, r3
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	4313      	orrs	r3, r2
 800667c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d123      	bne.n	80066d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	08da      	lsrs	r2, r3, #3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3208      	adds	r2, #8
 8006698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800669c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	220f      	movs	r2, #15
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	43db      	mvns	r3, r3
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	4013      	ands	r3, r2
 80066b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	691a      	ldr	r2, [r3, #16]
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	08da      	lsrs	r2, r3, #3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	3208      	adds	r2, #8
 80066d2:	69b9      	ldr	r1, [r7, #24]
 80066d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	005b      	lsls	r3, r3, #1
 80066e2:	2203      	movs	r2, #3
 80066e4:	fa02 f303 	lsl.w	r3, r2, r3
 80066e8:	43db      	mvns	r3, r3
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	4013      	ands	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f003 0203 	and.w	r2, r3, #3
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	4313      	orrs	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80c0 	beq.w	800689a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
 800671e:	4b66      	ldr	r3, [pc, #408]	@ (80068b8 <HAL_GPIO_Init+0x324>)
 8006720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006722:	4a65      	ldr	r2, [pc, #404]	@ (80068b8 <HAL_GPIO_Init+0x324>)
 8006724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006728:	6453      	str	r3, [r2, #68]	@ 0x44
 800672a:	4b63      	ldr	r3, [pc, #396]	@ (80068b8 <HAL_GPIO_Init+0x324>)
 800672c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006736:	4a61      	ldr	r2, [pc, #388]	@ (80068bc <HAL_GPIO_Init+0x328>)
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	089b      	lsrs	r3, r3, #2
 800673c:	3302      	adds	r3, #2
 800673e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	220f      	movs	r2, #15
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43db      	mvns	r3, r3
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	4013      	ands	r3, r2
 8006758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a58      	ldr	r2, [pc, #352]	@ (80068c0 <HAL_GPIO_Init+0x32c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d037      	beq.n	80067d2 <HAL_GPIO_Init+0x23e>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a57      	ldr	r2, [pc, #348]	@ (80068c4 <HAL_GPIO_Init+0x330>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d031      	beq.n	80067ce <HAL_GPIO_Init+0x23a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a56      	ldr	r2, [pc, #344]	@ (80068c8 <HAL_GPIO_Init+0x334>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d02b      	beq.n	80067ca <HAL_GPIO_Init+0x236>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a55      	ldr	r2, [pc, #340]	@ (80068cc <HAL_GPIO_Init+0x338>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d025      	beq.n	80067c6 <HAL_GPIO_Init+0x232>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a54      	ldr	r2, [pc, #336]	@ (80068d0 <HAL_GPIO_Init+0x33c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d01f      	beq.n	80067c2 <HAL_GPIO_Init+0x22e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a53      	ldr	r2, [pc, #332]	@ (80068d4 <HAL_GPIO_Init+0x340>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d019      	beq.n	80067be <HAL_GPIO_Init+0x22a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a52      	ldr	r2, [pc, #328]	@ (80068d8 <HAL_GPIO_Init+0x344>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d013      	beq.n	80067ba <HAL_GPIO_Init+0x226>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a51      	ldr	r2, [pc, #324]	@ (80068dc <HAL_GPIO_Init+0x348>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00d      	beq.n	80067b6 <HAL_GPIO_Init+0x222>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a50      	ldr	r2, [pc, #320]	@ (80068e0 <HAL_GPIO_Init+0x34c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d007      	beq.n	80067b2 <HAL_GPIO_Init+0x21e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a4f      	ldr	r2, [pc, #316]	@ (80068e4 <HAL_GPIO_Init+0x350>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d101      	bne.n	80067ae <HAL_GPIO_Init+0x21a>
 80067aa:	2309      	movs	r3, #9
 80067ac:	e012      	b.n	80067d4 <HAL_GPIO_Init+0x240>
 80067ae:	230a      	movs	r3, #10
 80067b0:	e010      	b.n	80067d4 <HAL_GPIO_Init+0x240>
 80067b2:	2308      	movs	r3, #8
 80067b4:	e00e      	b.n	80067d4 <HAL_GPIO_Init+0x240>
 80067b6:	2307      	movs	r3, #7
 80067b8:	e00c      	b.n	80067d4 <HAL_GPIO_Init+0x240>
 80067ba:	2306      	movs	r3, #6
 80067bc:	e00a      	b.n	80067d4 <HAL_GPIO_Init+0x240>
 80067be:	2305      	movs	r3, #5
 80067c0:	e008      	b.n	80067d4 <HAL_GPIO_Init+0x240>
 80067c2:	2304      	movs	r3, #4
 80067c4:	e006      	b.n	80067d4 <HAL_GPIO_Init+0x240>
 80067c6:	2303      	movs	r3, #3
 80067c8:	e004      	b.n	80067d4 <HAL_GPIO_Init+0x240>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e002      	b.n	80067d4 <HAL_GPIO_Init+0x240>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e000      	b.n	80067d4 <HAL_GPIO_Init+0x240>
 80067d2:	2300      	movs	r3, #0
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	f002 0203 	and.w	r2, r2, #3
 80067da:	0092      	lsls	r2, r2, #2
 80067dc:	4093      	lsls	r3, r2
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067e4:	4935      	ldr	r1, [pc, #212]	@ (80068bc <HAL_GPIO_Init+0x328>)
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	089b      	lsrs	r3, r3, #2
 80067ea:	3302      	adds	r3, #2
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067f2:	4b3d      	ldr	r3, [pc, #244]	@ (80068e8 <HAL_GPIO_Init+0x354>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	43db      	mvns	r3, r3
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	4013      	ands	r3, r2
 8006800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006816:	4a34      	ldr	r2, [pc, #208]	@ (80068e8 <HAL_GPIO_Init+0x354>)
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800681c:	4b32      	ldr	r3, [pc, #200]	@ (80068e8 <HAL_GPIO_Init+0x354>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	43db      	mvns	r3, r3
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	4013      	ands	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006840:	4a29      	ldr	r2, [pc, #164]	@ (80068e8 <HAL_GPIO_Init+0x354>)
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006846:	4b28      	ldr	r3, [pc, #160]	@ (80068e8 <HAL_GPIO_Init+0x354>)
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	43db      	mvns	r3, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	4013      	ands	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	4313      	orrs	r3, r2
 8006868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800686a:	4a1f      	ldr	r2, [pc, #124]	@ (80068e8 <HAL_GPIO_Init+0x354>)
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006870:	4b1d      	ldr	r3, [pc, #116]	@ (80068e8 <HAL_GPIO_Init+0x354>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	43db      	mvns	r3, r3
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	4013      	ands	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006894:	4a14      	ldr	r2, [pc, #80]	@ (80068e8 <HAL_GPIO_Init+0x354>)
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	3301      	adds	r3, #1
 800689e:	61fb      	str	r3, [r7, #28]
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	2b0f      	cmp	r3, #15
 80068a4:	f67f ae84 	bls.w	80065b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80068a8:	bf00      	nop
 80068aa:	bf00      	nop
 80068ac:	3724      	adds	r7, #36	@ 0x24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40023800 	.word	0x40023800
 80068bc:	40013800 	.word	0x40013800
 80068c0:	40020000 	.word	0x40020000
 80068c4:	40020400 	.word	0x40020400
 80068c8:	40020800 	.word	0x40020800
 80068cc:	40020c00 	.word	0x40020c00
 80068d0:	40021000 	.word	0x40021000
 80068d4:	40021400 	.word	0x40021400
 80068d8:	40021800 	.word	0x40021800
 80068dc:	40021c00 	.word	0x40021c00
 80068e0:	40022000 	.word	0x40022000
 80068e4:	40022400 	.word	0x40022400
 80068e8:	40013c00 	.word	0x40013c00

080068ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80068fe:	2300      	movs	r3, #0
 8006900:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	e0d9      	b.n	8006abc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006908:	2201      	movs	r2, #1
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4013      	ands	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	429a      	cmp	r2, r3
 8006920:	f040 80c9 	bne.w	8006ab6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006924:	4a6b      	ldr	r2, [pc, #428]	@ (8006ad4 <HAL_GPIO_DeInit+0x1e8>)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	089b      	lsrs	r3, r3, #2
 800692a:	3302      	adds	r3, #2
 800692c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006930:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	220f      	movs	r2, #15
 800693c:	fa02 f303 	lsl.w	r3, r2, r3
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	4013      	ands	r3, r2
 8006944:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a63      	ldr	r2, [pc, #396]	@ (8006ad8 <HAL_GPIO_DeInit+0x1ec>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d037      	beq.n	80069be <HAL_GPIO_DeInit+0xd2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a62      	ldr	r2, [pc, #392]	@ (8006adc <HAL_GPIO_DeInit+0x1f0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d031      	beq.n	80069ba <HAL_GPIO_DeInit+0xce>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a61      	ldr	r2, [pc, #388]	@ (8006ae0 <HAL_GPIO_DeInit+0x1f4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d02b      	beq.n	80069b6 <HAL_GPIO_DeInit+0xca>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a60      	ldr	r2, [pc, #384]	@ (8006ae4 <HAL_GPIO_DeInit+0x1f8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d025      	beq.n	80069b2 <HAL_GPIO_DeInit+0xc6>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a5f      	ldr	r2, [pc, #380]	@ (8006ae8 <HAL_GPIO_DeInit+0x1fc>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01f      	beq.n	80069ae <HAL_GPIO_DeInit+0xc2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a5e      	ldr	r2, [pc, #376]	@ (8006aec <HAL_GPIO_DeInit+0x200>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d019      	beq.n	80069aa <HAL_GPIO_DeInit+0xbe>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a5d      	ldr	r2, [pc, #372]	@ (8006af0 <HAL_GPIO_DeInit+0x204>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <HAL_GPIO_DeInit+0xba>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a5c      	ldr	r2, [pc, #368]	@ (8006af4 <HAL_GPIO_DeInit+0x208>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00d      	beq.n	80069a2 <HAL_GPIO_DeInit+0xb6>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a5b      	ldr	r2, [pc, #364]	@ (8006af8 <HAL_GPIO_DeInit+0x20c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d007      	beq.n	800699e <HAL_GPIO_DeInit+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a5a      	ldr	r2, [pc, #360]	@ (8006afc <HAL_GPIO_DeInit+0x210>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d101      	bne.n	800699a <HAL_GPIO_DeInit+0xae>
 8006996:	2309      	movs	r3, #9
 8006998:	e012      	b.n	80069c0 <HAL_GPIO_DeInit+0xd4>
 800699a:	230a      	movs	r3, #10
 800699c:	e010      	b.n	80069c0 <HAL_GPIO_DeInit+0xd4>
 800699e:	2308      	movs	r3, #8
 80069a0:	e00e      	b.n	80069c0 <HAL_GPIO_DeInit+0xd4>
 80069a2:	2307      	movs	r3, #7
 80069a4:	e00c      	b.n	80069c0 <HAL_GPIO_DeInit+0xd4>
 80069a6:	2306      	movs	r3, #6
 80069a8:	e00a      	b.n	80069c0 <HAL_GPIO_DeInit+0xd4>
 80069aa:	2305      	movs	r3, #5
 80069ac:	e008      	b.n	80069c0 <HAL_GPIO_DeInit+0xd4>
 80069ae:	2304      	movs	r3, #4
 80069b0:	e006      	b.n	80069c0 <HAL_GPIO_DeInit+0xd4>
 80069b2:	2303      	movs	r3, #3
 80069b4:	e004      	b.n	80069c0 <HAL_GPIO_DeInit+0xd4>
 80069b6:	2302      	movs	r3, #2
 80069b8:	e002      	b.n	80069c0 <HAL_GPIO_DeInit+0xd4>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <HAL_GPIO_DeInit+0xd4>
 80069be:	2300      	movs	r3, #0
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	f002 0203 	and.w	r2, r2, #3
 80069c6:	0092      	lsls	r2, r2, #2
 80069c8:	4093      	lsls	r3, r2
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d132      	bne.n	8006a36 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80069d0:	4b4b      	ldr	r3, [pc, #300]	@ (8006b00 <HAL_GPIO_DeInit+0x214>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	43db      	mvns	r3, r3
 80069d8:	4949      	ldr	r1, [pc, #292]	@ (8006b00 <HAL_GPIO_DeInit+0x214>)
 80069da:	4013      	ands	r3, r2
 80069dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80069de:	4b48      	ldr	r3, [pc, #288]	@ (8006b00 <HAL_GPIO_DeInit+0x214>)
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	43db      	mvns	r3, r3
 80069e6:	4946      	ldr	r1, [pc, #280]	@ (8006b00 <HAL_GPIO_DeInit+0x214>)
 80069e8:	4013      	ands	r3, r2
 80069ea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80069ec:	4b44      	ldr	r3, [pc, #272]	@ (8006b00 <HAL_GPIO_DeInit+0x214>)
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	43db      	mvns	r3, r3
 80069f4:	4942      	ldr	r1, [pc, #264]	@ (8006b00 <HAL_GPIO_DeInit+0x214>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80069fa:	4b41      	ldr	r3, [pc, #260]	@ (8006b00 <HAL_GPIO_DeInit+0x214>)
 80069fc:	689a      	ldr	r2, [r3, #8]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	43db      	mvns	r3, r3
 8006a02:	493f      	ldr	r1, [pc, #252]	@ (8006b00 <HAL_GPIO_DeInit+0x214>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	220f      	movs	r2, #15
 8006a12:	fa02 f303 	lsl.w	r3, r2, r3
 8006a16:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006a18:	4a2e      	ldr	r2, [pc, #184]	@ (8006ad4 <HAL_GPIO_DeInit+0x1e8>)
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	089b      	lsrs	r3, r3, #2
 8006a1e:	3302      	adds	r3, #2
 8006a20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	43da      	mvns	r2, r3
 8006a28:	482a      	ldr	r0, [pc, #168]	@ (8006ad4 <HAL_GPIO_DeInit+0x1e8>)
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	089b      	lsrs	r3, r3, #2
 8006a2e:	400a      	ands	r2, r1
 8006a30:	3302      	adds	r3, #2
 8006a32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	2103      	movs	r1, #3
 8006a40:	fa01 f303 	lsl.w	r3, r1, r3
 8006a44:	43db      	mvns	r3, r3
 8006a46:	401a      	ands	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	08da      	lsrs	r2, r3, #3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3208      	adds	r2, #8
 8006a54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	220f      	movs	r2, #15
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	43db      	mvns	r3, r3
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	08d2      	lsrs	r2, r2, #3
 8006a6c:	4019      	ands	r1, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3208      	adds	r2, #8
 8006a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	2103      	movs	r1, #3
 8006a80:	fa01 f303 	lsl.w	r3, r1, r3
 8006a84:	43db      	mvns	r3, r3
 8006a86:	401a      	ands	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	2101      	movs	r1, #1
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	fa01 f303 	lsl.w	r3, r1, r3
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	401a      	ands	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	2103      	movs	r1, #3
 8006aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	401a      	ands	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2b0f      	cmp	r3, #15
 8006ac0:	f67f af22 	bls.w	8006908 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40013800 	.word	0x40013800
 8006ad8:	40020000 	.word	0x40020000
 8006adc:	40020400 	.word	0x40020400
 8006ae0:	40020800 	.word	0x40020800
 8006ae4:	40020c00 	.word	0x40020c00
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	40021400 	.word	0x40021400
 8006af0:	40021800 	.word	0x40021800
 8006af4:	40021c00 	.word	0x40021c00
 8006af8:	40022000 	.word	0x40022000
 8006afc:	40022400 	.word	0x40022400
 8006b00:	40013c00 	.word	0x40013c00

08006b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	807b      	strh	r3, [r7, #2]
 8006b10:	4613      	mov	r3, r2
 8006b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b14:	787b      	ldrb	r3, [r7, #1]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b1a:	887a      	ldrh	r2, [r7, #2]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b20:	e003      	b.n	8006b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b22:	887b      	ldrh	r3, [r7, #2]
 8006b24:	041a      	lsls	r2, r3, #16
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	619a      	str	r2, [r3, #24]
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b086      	sub	sp, #24
 8006b3a:	af02      	add	r7, sp, #8
 8006b3c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e059      	b.n	8006bfc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f00a fbfc 	bl	8011360 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2203      	movs	r2, #3
 8006b6c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b76:	d102      	bne.n	8006b7e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f006 fcaf 	bl	800d4e6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	7c1a      	ldrb	r2, [r3, #16]
 8006b90:	f88d 2000 	strb.w	r2, [sp]
 8006b94:	3304      	adds	r3, #4
 8006b96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b98:	f006 fc30 	bl	800d3fc <USB_CoreInit>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e026      	b.n	8006bfc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f006 fca7 	bl	800d508 <USB_SetCurrentMode>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e017      	b.n	8006bfc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	7c1a      	ldrb	r2, [r3, #16]
 8006bd4:	f88d 2000 	strb.w	r2, [sp]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bdc:	f006 fe4a 	bl	800d874 <USB_HostInit>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2202      	movs	r2, #2
 8006bea:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e004      	b.n	8006bfc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006c04:	b590      	push	{r4, r7, lr}
 8006c06:	b08b      	sub	sp, #44	@ 0x2c
 8006c08:	af04      	add	r7, sp, #16
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	4611      	mov	r1, r2
 8006c10:	461a      	mov	r2, r3
 8006c12:	4603      	mov	r3, r0
 8006c14:	70fb      	strb	r3, [r7, #3]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70bb      	strb	r3, [r7, #2]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8006c1e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006c20:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d101      	bne.n	8006c30 <HAL_HCD_HC_Init+0x2c>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e09d      	b.n	8006d6c <HAL_HCD_HC_Init+0x168>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8006c38:	78fa      	ldrb	r2, [r7, #3]
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	011b      	lsls	r3, r3, #4
 8006c40:	1a9b      	subs	r3, r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	440b      	add	r3, r1
 8006c46:	3319      	adds	r3, #25
 8006c48:	2200      	movs	r2, #0
 8006c4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006c4c:	78fa      	ldrb	r2, [r7, #3]
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	4613      	mov	r3, r2
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	440b      	add	r3, r1
 8006c5a:	3314      	adds	r3, #20
 8006c5c:	787a      	ldrb	r2, [r7, #1]
 8006c5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006c60:	78fa      	ldrb	r2, [r7, #3]
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4613      	mov	r3, r2
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	1a9b      	subs	r3, r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	440b      	add	r3, r1
 8006c6e:	3315      	adds	r3, #21
 8006c70:	78fa      	ldrb	r2, [r7, #3]
 8006c72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006c74:	78fa      	ldrb	r2, [r7, #3]
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	1a9b      	subs	r3, r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	3326      	adds	r3, #38	@ 0x26
 8006c84:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8006c88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	78bb      	ldrb	r3, [r7, #2]
 8006c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c92:	b2d8      	uxtb	r0, r3
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	1a9b      	subs	r3, r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	3316      	adds	r3, #22
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fbc8 	bl	8007440 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8006cb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	da0a      	bge.n	8006cce <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006cb8:	78fa      	ldrb	r2, [r7, #3]
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	1a9b      	subs	r3, r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	440b      	add	r3, r1
 8006cc6:	3317      	adds	r3, #23
 8006cc8:	2201      	movs	r2, #1
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	e009      	b.n	8006ce2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006cce:	78fa      	ldrb	r2, [r7, #3]
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	1a9b      	subs	r3, r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	3317      	adds	r3, #23
 8006cde:	2200      	movs	r2, #0
 8006ce0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f006 ff28 	bl	800db3c <USB_GetHostSpeed>
 8006cec:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8006cee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d10b      	bne.n	8006d0e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8006cf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d107      	bne.n	8006d0e <HAL_HCD_HC_Init+0x10a>
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2bbc      	cmp	r3, #188	@ 0xbc
 8006d08:	d901      	bls.n	8006d0e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8006d0a:	23bc      	movs	r3, #188	@ 0xbc
 8006d0c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8006d0e:	78fa      	ldrb	r2, [r7, #3]
 8006d10:	6879      	ldr	r1, [r7, #4]
 8006d12:	4613      	mov	r3, r2
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	1a9b      	subs	r3, r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3318      	adds	r3, #24
 8006d1e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8006d24:	78fa      	ldrb	r2, [r7, #3]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	b298      	uxth	r0, r3
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	011b      	lsls	r3, r3, #4
 8006d30:	1a9b      	subs	r3, r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	440b      	add	r3, r1
 8006d36:	3328      	adds	r3, #40	@ 0x28
 8006d38:	4602      	mov	r2, r0
 8006d3a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	787c      	ldrb	r4, [r7, #1]
 8006d46:	78ba      	ldrb	r2, [r7, #2]
 8006d48:	78f9      	ldrb	r1, [r7, #3]
 8006d4a:	9302      	str	r3, [sp, #8]
 8006d4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	4623      	mov	r3, r4
 8006d5a:	f006 ff17 	bl	800db8c <USB_HC_Init>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd90      	pop	{r4, r7, pc}

08006d74 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <HAL_HCD_HC_Halt+0x1e>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e00f      	b.n	8006db2 <HAL_HCD_HC_Halt+0x3e>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	78fa      	ldrb	r2, [r7, #3]
 8006da0:	4611      	mov	r1, r2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f007 faa9 	bl	800e2fa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4603      	mov	r3, r0
 8006dcc:	70fb      	strb	r3, [r7, #3]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	70bb      	strb	r3, [r7, #2]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006dd6:	78fa      	ldrb	r2, [r7, #3]
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	1a9b      	subs	r3, r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	440b      	add	r3, r1
 8006de4:	3317      	adds	r3, #23
 8006de6:	78ba      	ldrb	r2, [r7, #2]
 8006de8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006dea:	78fa      	ldrb	r2, [r7, #3]
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	4613      	mov	r3, r2
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	440b      	add	r3, r1
 8006df8:	3326      	adds	r3, #38	@ 0x26
 8006dfa:	787a      	ldrb	r2, [r7, #1]
 8006dfc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006dfe:	7c3b      	ldrb	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d114      	bne.n	8006e2e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006e04:	78fa      	ldrb	r2, [r7, #3]
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	1a9b      	subs	r3, r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	332a      	adds	r3, #42	@ 0x2a
 8006e14:	2203      	movs	r2, #3
 8006e16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006e18:	78fa      	ldrb	r2, [r7, #3]
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	011b      	lsls	r3, r3, #4
 8006e20:	1a9b      	subs	r3, r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	3319      	adds	r3, #25
 8006e28:	7f3a      	ldrb	r2, [r7, #28]
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	e009      	b.n	8006e42 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006e2e:	78fa      	ldrb	r2, [r7, #3]
 8006e30:	6879      	ldr	r1, [r7, #4]
 8006e32:	4613      	mov	r3, r2
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	1a9b      	subs	r3, r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	440b      	add	r3, r1
 8006e3c:	332a      	adds	r3, #42	@ 0x2a
 8006e3e:	2202      	movs	r2, #2
 8006e40:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006e42:	787b      	ldrb	r3, [r7, #1]
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	f200 8102 	bhi.w	800704e <HAL_HCD_HC_SubmitRequest+0x292>
 8006e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e50 <HAL_HCD_HC_SubmitRequest+0x94>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e61 	.word	0x08006e61
 8006e54:	08007039 	.word	0x08007039
 8006e58:	08006f25 	.word	0x08006f25
 8006e5c:	08006faf 	.word	0x08006faf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8006e60:	7c3b      	ldrb	r3, [r7, #16]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	f040 80f5 	bne.w	8007052 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8006e68:	78bb      	ldrb	r3, [r7, #2]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d12d      	bne.n	8006eca <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8006e6e:	8b3b      	ldrh	r3, [r7, #24]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d109      	bne.n	8006e88 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8006e74:	78fa      	ldrb	r2, [r7, #3]
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	1a9b      	subs	r3, r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	333d      	adds	r3, #61	@ 0x3d
 8006e84:	2201      	movs	r2, #1
 8006e86:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8006e88:	78fa      	ldrb	r2, [r7, #3]
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	440b      	add	r3, r1
 8006e96:	333d      	adds	r3, #61	@ 0x3d
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006e9e:	78fa      	ldrb	r2, [r7, #3]
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	1a9b      	subs	r3, r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	332a      	adds	r3, #42	@ 0x2a
 8006eae:	2200      	movs	r2, #0
 8006eb0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8006eb2:	e0ce      	b.n	8007052 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006eb4:	78fa      	ldrb	r2, [r7, #3]
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	1a9b      	subs	r3, r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	332a      	adds	r3, #42	@ 0x2a
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	701a      	strb	r2, [r3, #0]
      break;
 8006ec8:	e0c3      	b.n	8007052 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8006eca:	78fa      	ldrb	r2, [r7, #3]
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	011b      	lsls	r3, r3, #4
 8006ed2:	1a9b      	subs	r3, r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	331a      	adds	r3, #26
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	f040 80b8 	bne.w	8007052 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8006ee2:	78fa      	ldrb	r2, [r7, #3]
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	333c      	adds	r3, #60	@ 0x3c
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006ef8:	78fa      	ldrb	r2, [r7, #3]
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	4613      	mov	r3, r2
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	1a9b      	subs	r3, r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	332a      	adds	r3, #42	@ 0x2a
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
      break;
 8006f0c:	e0a1      	b.n	8007052 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006f0e:	78fa      	ldrb	r2, [r7, #3]
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	4613      	mov	r3, r2
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	1a9b      	subs	r3, r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	440b      	add	r3, r1
 8006f1c:	332a      	adds	r3, #42	@ 0x2a
 8006f1e:	2202      	movs	r2, #2
 8006f20:	701a      	strb	r2, [r3, #0]
      break;
 8006f22:	e096      	b.n	8007052 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006f24:	78bb      	ldrb	r3, [r7, #2]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d120      	bne.n	8006f6c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	011b      	lsls	r3, r3, #4
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	333d      	adds	r3, #61	@ 0x3d
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	4613      	mov	r3, r2
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	1a9b      	subs	r3, r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	332a      	adds	r3, #42	@ 0x2a
 8006f50:	2200      	movs	r2, #0
 8006f52:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006f54:	e07e      	b.n	8007054 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006f56:	78fa      	ldrb	r2, [r7, #3]
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	1a9b      	subs	r3, r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	440b      	add	r3, r1
 8006f64:	332a      	adds	r3, #42	@ 0x2a
 8006f66:	2202      	movs	r2, #2
 8006f68:	701a      	strb	r2, [r3, #0]
      break;
 8006f6a:	e073      	b.n	8007054 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006f6c:	78fa      	ldrb	r2, [r7, #3]
 8006f6e:	6879      	ldr	r1, [r7, #4]
 8006f70:	4613      	mov	r3, r2
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	1a9b      	subs	r3, r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	440b      	add	r3, r1
 8006f7a:	333c      	adds	r3, #60	@ 0x3c
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006f82:	78fa      	ldrb	r2, [r7, #3]
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	1a9b      	subs	r3, r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	440b      	add	r3, r1
 8006f90:	332a      	adds	r3, #42	@ 0x2a
 8006f92:	2200      	movs	r2, #0
 8006f94:	701a      	strb	r2, [r3, #0]
      break;
 8006f96:	e05d      	b.n	8007054 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006f98:	78fa      	ldrb	r2, [r7, #3]
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	1a9b      	subs	r3, r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	440b      	add	r3, r1
 8006fa6:	332a      	adds	r3, #42	@ 0x2a
 8006fa8:	2202      	movs	r2, #2
 8006faa:	701a      	strb	r2, [r3, #0]
      break;
 8006fac:	e052      	b.n	8007054 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006fae:	78bb      	ldrb	r3, [r7, #2]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d120      	bne.n	8006ff6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006fb4:	78fa      	ldrb	r2, [r7, #3]
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	1a9b      	subs	r3, r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	333d      	adds	r3, #61	@ 0x3d
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006fca:	78fa      	ldrb	r2, [r7, #3]
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	1a9b      	subs	r3, r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	440b      	add	r3, r1
 8006fd8:	332a      	adds	r3, #42	@ 0x2a
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006fde:	e039      	b.n	8007054 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006fe0:	78fa      	ldrb	r2, [r7, #3]
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	440b      	add	r3, r1
 8006fee:	332a      	adds	r3, #42	@ 0x2a
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	701a      	strb	r2, [r3, #0]
      break;
 8006ff4:	e02e      	b.n	8007054 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006ff6:	78fa      	ldrb	r2, [r7, #3]
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	1a9b      	subs	r3, r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	333c      	adds	r3, #60	@ 0x3c
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10a      	bne.n	8007022 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800700c:	78fa      	ldrb	r2, [r7, #3]
 800700e:	6879      	ldr	r1, [r7, #4]
 8007010:	4613      	mov	r3, r2
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	332a      	adds	r3, #42	@ 0x2a
 800701c:	2200      	movs	r2, #0
 800701e:	701a      	strb	r2, [r3, #0]
      break;
 8007020:	e018      	b.n	8007054 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	1a9b      	subs	r3, r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	332a      	adds	r3, #42	@ 0x2a
 8007032:	2202      	movs	r2, #2
 8007034:	701a      	strb	r2, [r3, #0]
      break;
 8007036:	e00d      	b.n	8007054 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007038:	78fa      	ldrb	r2, [r7, #3]
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	4613      	mov	r3, r2
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	1a9b      	subs	r3, r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	440b      	add	r3, r1
 8007046:	332a      	adds	r3, #42	@ 0x2a
 8007048:	2200      	movs	r2, #0
 800704a:	701a      	strb	r2, [r3, #0]
      break;
 800704c:	e002      	b.n	8007054 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800704e:	bf00      	nop
 8007050:	e000      	b.n	8007054 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8007052:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007054:	78fa      	ldrb	r2, [r7, #3]
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	332c      	adds	r3, #44	@ 0x2c
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007068:	78fa      	ldrb	r2, [r7, #3]
 800706a:	8b39      	ldrh	r1, [r7, #24]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	4613      	mov	r3, r2
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	1a9b      	subs	r3, r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4403      	add	r3, r0
 8007078:	3334      	adds	r3, #52	@ 0x34
 800707a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800707c:	78fa      	ldrb	r2, [r7, #3]
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	4613      	mov	r3, r2
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	334c      	adds	r3, #76	@ 0x4c
 800708c:	2200      	movs	r2, #0
 800708e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007090:	78fa      	ldrb	r2, [r7, #3]
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	4613      	mov	r3, r2
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	3338      	adds	r3, #56	@ 0x38
 80070a0:	2200      	movs	r2, #0
 80070a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80070a4:	78fa      	ldrb	r2, [r7, #3]
 80070a6:	6879      	ldr	r1, [r7, #4]
 80070a8:	4613      	mov	r3, r2
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	1a9b      	subs	r3, r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	440b      	add	r3, r1
 80070b2:	3315      	adds	r3, #21
 80070b4:	78fa      	ldrb	r2, [r7, #3]
 80070b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	4613      	mov	r3, r2
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	1a9b      	subs	r3, r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	334d      	adds	r3, #77	@ 0x4d
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	78fa      	ldrb	r2, [r7, #3]
 80070d2:	4613      	mov	r3, r2
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	1a9b      	subs	r3, r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	3310      	adds	r3, #16
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4413      	add	r3, r2
 80070e0:	1d19      	adds	r1, r3, #4
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	799b      	ldrb	r3, [r3, #6]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f006 fe7c 	bl	800dde4 <USB_HC_StartXfer>
 80070ec:	4603      	mov	r3, r0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop

080070f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4618      	mov	r0, r3
 8007110:	f006 fb70 	bl	800d7f4 <USB_GetMode>
 8007114:	4603      	mov	r3, r0
 8007116:	2b01      	cmp	r3, #1
 8007118:	f040 80fb 	bne.w	8007312 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4618      	mov	r0, r3
 8007122:	f006 fb33 	bl	800d78c <USB_ReadInterrupts>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 80f1 	beq.w	8007310 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4618      	mov	r0, r3
 8007134:	f006 fb2a 	bl	800d78c <USB_ReadInterrupts>
 8007138:	4603      	mov	r3, r0
 800713a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800713e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007142:	d104      	bne.n	800714e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800714c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4618      	mov	r0, r3
 8007154:	f006 fb1a 	bl	800d78c <USB_ReadInterrupts>
 8007158:	4603      	mov	r3, r0
 800715a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800715e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007162:	d104      	bne.n	800716e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800716c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4618      	mov	r0, r3
 8007174:	f006 fb0a 	bl	800d78c <USB_ReadInterrupts>
 8007178:	4603      	mov	r3, r0
 800717a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800717e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007182:	d104      	bne.n	800718e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800718c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4618      	mov	r0, r3
 8007194:	f006 fafa 	bl	800d78c <USB_ReadInterrupts>
 8007198:	4603      	mov	r3, r0
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d103      	bne.n	80071aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2202      	movs	r2, #2
 80071a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f006 faec 	bl	800d78c <USB_ReadInterrupts>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071be:	d120      	bne.n	8007202 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80071c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d113      	bne.n	8007202 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80071da:	2110      	movs	r1, #16
 80071dc:	6938      	ldr	r0, [r7, #16]
 80071de:	f006 f9df 	bl	800d5a0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80071e2:	6938      	ldr	r0, [r7, #16]
 80071e4:	f006 fa0e 	bl	800d604 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	7a5b      	ldrb	r3, [r3, #9]
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d105      	bne.n	80071fc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2101      	movs	r1, #1
 80071f6:	4618      	mov	r0, r3
 80071f8:	f006 fc00 	bl	800d9fc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f00a f929 	bl	8011454 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4618      	mov	r0, r3
 8007208:	f006 fac0 	bl	800d78c <USB_ReadInterrupts>
 800720c:	4603      	mov	r3, r0
 800720e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007216:	d102      	bne.n	800721e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 fd4d 	bl	8008cb8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f006 fab2 	bl	800d78c <USB_ReadInterrupts>
 8007228:	4603      	mov	r3, r0
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b08      	cmp	r3, #8
 8007230:	d106      	bne.n	8007240 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f00a f8f2 	bl	801141c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2208      	movs	r2, #8
 800723e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4618      	mov	r0, r3
 8007246:	f006 faa1 	bl	800d78c <USB_ReadInterrupts>
 800724a:	4603      	mov	r3, r0
 800724c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007250:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007254:	d139      	bne.n	80072ca <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4618      	mov	r0, r3
 800725c:	f007 f83c 	bl	800e2d8 <USB_HC_ReadInterrupt>
 8007260:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	e025      	b.n	80072b4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	fa22 f303 	lsr.w	r3, r2, r3
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d018      	beq.n	80072ae <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4413      	add	r3, r2
 8007284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800728e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007292:	d106      	bne.n	80072a2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f905 	bl	80074aa <HCD_HC_IN_IRQHandler>
 80072a0:	e005      	b.n	80072ae <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 ff67 	bl	800817c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	3301      	adds	r3, #1
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	795b      	ldrb	r3, [r3, #5]
 80072b8:	461a      	mov	r2, r3
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	4293      	cmp	r3, r2
 80072be:	d3d3      	bcc.n	8007268 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80072c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f006 fa5c 	bl	800d78c <USB_ReadInterrupts>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b10      	cmp	r3, #16
 80072dc:	d101      	bne.n	80072e2 <HAL_HCD_IRQHandler+0x1ea>
 80072de:	2301      	movs	r3, #1
 80072e0:	e000      	b.n	80072e4 <HAL_HCD_IRQHandler+0x1ec>
 80072e2:	2300      	movs	r3, #0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d014      	beq.n	8007312 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0210 	bic.w	r2, r2, #16
 80072f6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 fbfe 	bl	8008afa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	699a      	ldr	r2, [r3, #24]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f042 0210 	orr.w	r2, r2, #16
 800730c:	619a      	str	r2, [r3, #24]
 800730e:	e000      	b.n	8007312 <HAL_HCD_IRQHandler+0x21a>
      return;
 8007310:	bf00      	nop
    }
  }
}
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_HCD_Start+0x16>
 800732a:	2302      	movs	r3, #2
 800732c:	e013      	b.n	8007356 <HAL_HCD_Start+0x3e>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2101      	movs	r1, #1
 800733c:	4618      	mov	r0, r3
 800733e:	f006 fbc4 	bl	800daca <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f006 f8bc 	bl	800d4c4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_HCD_Stop+0x16>
 8007370:	2302      	movs	r3, #2
 8007372:	e00d      	b.n	8007390 <HAL_HCD_Stop+0x32>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4618      	mov	r0, r3
 8007382:	f007 f917 	bl	800e5b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f006 fb66 	bl	800da76 <USB_ResetPort>
 80073aa:	4603      	mov	r3, r0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80073c0:	78fa      	ldrb	r2, [r7, #3]
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	334c      	adds	r3, #76	@ 0x4c
 80073d0:	781b      	ldrb	r3, [r3, #0]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	460b      	mov	r3, r1
 80073e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80073ea:	78fa      	ldrb	r2, [r7, #3]
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	4613      	mov	r3, r2
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	1a9b      	subs	r3, r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	440b      	add	r3, r1
 80073f8:	3338      	adds	r3, #56	@ 0x38
 80073fa:	681b      	ldr	r3, [r3, #0]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4618      	mov	r0, r3
 8007416:	f006 fba8 	bl	800db6a <USB_GetCurrentFrame>
 800741a:	4603      	mov	r3, r0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4618      	mov	r0, r3
 8007432:	f006 fb83 	bl	800db3c <USB_GetHostSpeed>
 8007436:	4603      	mov	r3, r0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	460b      	mov	r3, r1
 800744a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800744c:	78fa      	ldrb	r2, [r7, #3]
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	4613      	mov	r3, r2
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	440b      	add	r3, r1
 800745a:	331a      	adds	r3, #26
 800745c:	2200      	movs	r2, #0
 800745e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8007460:	78fa      	ldrb	r2, [r7, #3]
 8007462:	6879      	ldr	r1, [r7, #4]
 8007464:	4613      	mov	r3, r2
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	1a9b      	subs	r3, r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	440b      	add	r3, r1
 800746e:	331b      	adds	r3, #27
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8007474:	78fa      	ldrb	r2, [r7, #3]
 8007476:	6879      	ldr	r1, [r7, #4]
 8007478:	4613      	mov	r3, r2
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	1a9b      	subs	r3, r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	440b      	add	r3, r1
 8007482:	3325      	adds	r3, #37	@ 0x25
 8007484:	2200      	movs	r2, #0
 8007486:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8007488:	78fa      	ldrb	r2, [r7, #3]
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	4613      	mov	r3, r2
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	1a9b      	subs	r3, r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	440b      	add	r3, r1
 8007496:	3324      	adds	r3, #36	@ 0x24
 8007498:	2200      	movs	r2, #0
 800749a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b086      	sub	sp, #24
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	78fa      	ldrb	r2, [r7, #3]
 80074c6:	4611      	mov	r1, r2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f006 f972 	bl	800d7b2 <USB_ReadChInterrupts>
 80074ce:	4603      	mov	r3, r0
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d11a      	bne.n	800750e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80074d8:	78fb      	ldrb	r3, [r7, #3]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074e4:	461a      	mov	r2, r3
 80074e6:	2304      	movs	r3, #4
 80074e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80074ea:	78fa      	ldrb	r2, [r7, #3]
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	011b      	lsls	r3, r3, #4
 80074f2:	1a9b      	subs	r3, r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	440b      	add	r3, r1
 80074f8:	334d      	adds	r3, #77	@ 0x4d
 80074fa:	2207      	movs	r2, #7
 80074fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	4611      	mov	r1, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f006 fef7 	bl	800e2fa <USB_HC_Halt>
 800750c:	e09e      	b.n	800764c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	4611      	mov	r1, r2
 8007516:	4618      	mov	r0, r3
 8007518:	f006 f94b 	bl	800d7b2 <USB_ReadChInterrupts>
 800751c:	4603      	mov	r3, r0
 800751e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007526:	d11b      	bne.n	8007560 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	4413      	add	r3, r2
 8007530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007534:	461a      	mov	r2, r3
 8007536:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800753a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800753c:	78fa      	ldrb	r2, [r7, #3]
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	4613      	mov	r3, r2
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	1a9b      	subs	r3, r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	440b      	add	r3, r1
 800754a:	334d      	adds	r3, #77	@ 0x4d
 800754c:	2208      	movs	r2, #8
 800754e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	78fa      	ldrb	r2, [r7, #3]
 8007556:	4611      	mov	r1, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f006 fece 	bl	800e2fa <USB_HC_Halt>
 800755e:	e075      	b.n	800764c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	78fa      	ldrb	r2, [r7, #3]
 8007566:	4611      	mov	r1, r2
 8007568:	4618      	mov	r0, r3
 800756a:	f006 f922 	bl	800d7b2 <USB_ReadChInterrupts>
 800756e:	4603      	mov	r3, r0
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b08      	cmp	r3, #8
 8007576:	d11a      	bne.n	80075ae <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007578:	78fb      	ldrb	r3, [r7, #3]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	4413      	add	r3, r2
 8007580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007584:	461a      	mov	r2, r3
 8007586:	2308      	movs	r3, #8
 8007588:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800758a:	78fa      	ldrb	r2, [r7, #3]
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	4613      	mov	r3, r2
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	1a9b      	subs	r3, r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	440b      	add	r3, r1
 8007598:	334d      	adds	r3, #77	@ 0x4d
 800759a:	2206      	movs	r2, #6
 800759c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	78fa      	ldrb	r2, [r7, #3]
 80075a4:	4611      	mov	r1, r2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f006 fea7 	bl	800e2fa <USB_HC_Halt>
 80075ac:	e04e      	b.n	800764c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	78fa      	ldrb	r2, [r7, #3]
 80075b4:	4611      	mov	r1, r2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f006 f8fb 	bl	800d7b2 <USB_ReadChInterrupts>
 80075bc:	4603      	mov	r3, r0
 80075be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075c6:	d11b      	bne.n	8007600 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80075c8:	78fb      	ldrb	r3, [r7, #3]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075d4:	461a      	mov	r2, r3
 80075d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80075dc:	78fa      	ldrb	r2, [r7, #3]
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	4613      	mov	r3, r2
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	440b      	add	r3, r1
 80075ea:	334d      	adds	r3, #77	@ 0x4d
 80075ec:	2209      	movs	r2, #9
 80075ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	78fa      	ldrb	r2, [r7, #3]
 80075f6:	4611      	mov	r1, r2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f006 fe7e 	bl	800e2fa <USB_HC_Halt>
 80075fe:	e025      	b.n	800764c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	78fa      	ldrb	r2, [r7, #3]
 8007606:	4611      	mov	r1, r2
 8007608:	4618      	mov	r0, r3
 800760a:	f006 f8d2 	bl	800d7b2 <USB_ReadChInterrupts>
 800760e:	4603      	mov	r3, r0
 8007610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007614:	2b80      	cmp	r3, #128	@ 0x80
 8007616:	d119      	bne.n	800764c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007618:	78fb      	ldrb	r3, [r7, #3]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	4413      	add	r3, r2
 8007620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007624:	461a      	mov	r2, r3
 8007626:	2380      	movs	r3, #128	@ 0x80
 8007628:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800762a:	78fa      	ldrb	r2, [r7, #3]
 800762c:	6879      	ldr	r1, [r7, #4]
 800762e:	4613      	mov	r3, r2
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	1a9b      	subs	r3, r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	440b      	add	r3, r1
 8007638:	334d      	adds	r3, #77	@ 0x4d
 800763a:	2207      	movs	r2, #7
 800763c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	78fa      	ldrb	r2, [r7, #3]
 8007644:	4611      	mov	r1, r2
 8007646:	4618      	mov	r0, r3
 8007648:	f006 fe57 	bl	800e2fa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	78fa      	ldrb	r2, [r7, #3]
 8007652:	4611      	mov	r1, r2
 8007654:	4618      	mov	r0, r3
 8007656:	f006 f8ac 	bl	800d7b2 <USB_ReadChInterrupts>
 800765a:	4603      	mov	r3, r0
 800765c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007664:	d112      	bne.n	800768c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	78fa      	ldrb	r2, [r7, #3]
 800766c:	4611      	mov	r1, r2
 800766e:	4618      	mov	r0, r3
 8007670:	f006 fe43 	bl	800e2fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	4413      	add	r3, r2
 800767c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007680:	461a      	mov	r2, r3
 8007682:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007686:	6093      	str	r3, [r2, #8]
 8007688:	f000 bd75 	b.w	8008176 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	78fa      	ldrb	r2, [r7, #3]
 8007692:	4611      	mov	r1, r2
 8007694:	4618      	mov	r0, r3
 8007696:	f006 f88c 	bl	800d7b2 <USB_ReadChInterrupts>
 800769a:	4603      	mov	r3, r0
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	f040 8128 	bne.w	80078f6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076b2:	461a      	mov	r2, r3
 80076b4:	2320      	movs	r3, #32
 80076b6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80076b8:	78fa      	ldrb	r2, [r7, #3]
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	4613      	mov	r3, r2
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	1a9b      	subs	r3, r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	331b      	adds	r3, #27
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d119      	bne.n	8007702 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80076ce:	78fa      	ldrb	r2, [r7, #3]
 80076d0:	6879      	ldr	r1, [r7, #4]
 80076d2:	4613      	mov	r3, r2
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	1a9b      	subs	r3, r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	331b      	adds	r3, #27
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	78fa      	ldrb	r2, [r7, #3]
 80076f2:	0151      	lsls	r1, r2, #5
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	440a      	add	r2, r1
 80076f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007700:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	799b      	ldrb	r3, [r3, #6]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d01b      	beq.n	8007742 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	4613      	mov	r3, r2
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	1a9b      	subs	r3, r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	440b      	add	r3, r1
 8007718:	3330      	adds	r3, #48	@ 0x30
 800771a:	6819      	ldr	r1, [r3, #0]
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	4413      	add	r3, r2
 8007724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800772e:	78fa      	ldrb	r2, [r7, #3]
 8007730:	1ac9      	subs	r1, r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4613      	mov	r3, r2
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	1a9b      	subs	r3, r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4403      	add	r3, r0
 800773e:	3338      	adds	r3, #56	@ 0x38
 8007740:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8007742:	78fa      	ldrb	r2, [r7, #3]
 8007744:	6879      	ldr	r1, [r7, #4]
 8007746:	4613      	mov	r3, r2
 8007748:	011b      	lsls	r3, r3, #4
 800774a:	1a9b      	subs	r3, r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	440b      	add	r3, r1
 8007750:	334d      	adds	r3, #77	@ 0x4d
 8007752:	2201      	movs	r2, #1
 8007754:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8007756:	78fa      	ldrb	r2, [r7, #3]
 8007758:	6879      	ldr	r1, [r7, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	011b      	lsls	r3, r3, #4
 800775e:	1a9b      	subs	r3, r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	440b      	add	r3, r1
 8007764:	3344      	adds	r3, #68	@ 0x44
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800776a:	78fb      	ldrb	r3, [r7, #3]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	4413      	add	r3, r2
 8007772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007776:	461a      	mov	r2, r3
 8007778:	2301      	movs	r3, #1
 800777a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800777c:	78fa      	ldrb	r2, [r7, #3]
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	4613      	mov	r3, r2
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	1a9b      	subs	r3, r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	3326      	adds	r3, #38	@ 0x26
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007792:	78fa      	ldrb	r2, [r7, #3]
 8007794:	6879      	ldr	r1, [r7, #4]
 8007796:	4613      	mov	r3, r2
 8007798:	011b      	lsls	r3, r3, #4
 800779a:	1a9b      	subs	r3, r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	440b      	add	r3, r1
 80077a0:	3326      	adds	r3, #38	@ 0x26
 80077a2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d110      	bne.n	80077ca <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	78fa      	ldrb	r2, [r7, #3]
 80077ae:	4611      	mov	r1, r2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f006 fda2 	bl	800e2fa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077c2:	461a      	mov	r2, r3
 80077c4:	2310      	movs	r3, #16
 80077c6:	6093      	str	r3, [r2, #8]
 80077c8:	e03d      	b.n	8007846 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80077ca:	78fa      	ldrb	r2, [r7, #3]
 80077cc:	6879      	ldr	r1, [r7, #4]
 80077ce:	4613      	mov	r3, r2
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	1a9b      	subs	r3, r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	440b      	add	r3, r1
 80077d8:	3326      	adds	r3, #38	@ 0x26
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d00a      	beq.n	80077f6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80077e0:	78fa      	ldrb	r2, [r7, #3]
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	4613      	mov	r3, r2
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	1a9b      	subs	r3, r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	440b      	add	r3, r1
 80077ee:	3326      	adds	r3, #38	@ 0x26
 80077f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d127      	bne.n	8007846 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80077f6:	78fb      	ldrb	r3, [r7, #3]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	440a      	add	r2, r1
 800780c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007810:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007814:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007816:	78fa      	ldrb	r2, [r7, #3]
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	4613      	mov	r3, r2
 800781c:	011b      	lsls	r3, r3, #4
 800781e:	1a9b      	subs	r3, r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	440b      	add	r3, r1
 8007824:	334c      	adds	r3, #76	@ 0x4c
 8007826:	2201      	movs	r2, #1
 8007828:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800782a:	78fa      	ldrb	r2, [r7, #3]
 800782c:	6879      	ldr	r1, [r7, #4]
 800782e:	4613      	mov	r3, r2
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	1a9b      	subs	r3, r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	440b      	add	r3, r1
 8007838:	334c      	adds	r3, #76	@ 0x4c
 800783a:	781a      	ldrb	r2, [r3, #0]
 800783c:	78fb      	ldrb	r3, [r7, #3]
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f009 fe15 	bl	8011470 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	799b      	ldrb	r3, [r3, #6]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d13b      	bne.n	80078c6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800784e:	78fa      	ldrb	r2, [r7, #3]
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	4613      	mov	r3, r2
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	1a9b      	subs	r3, r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	440b      	add	r3, r1
 800785c:	3338      	adds	r3, #56	@ 0x38
 800785e:	6819      	ldr	r1, [r3, #0]
 8007860:	78fa      	ldrb	r2, [r7, #3]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4613      	mov	r3, r2
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	1a9b      	subs	r3, r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4403      	add	r3, r0
 800786e:	3328      	adds	r3, #40	@ 0x28
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	440b      	add	r3, r1
 8007874:	1e59      	subs	r1, r3, #1
 8007876:	78fa      	ldrb	r2, [r7, #3]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	4613      	mov	r3, r2
 800787c:	011b      	lsls	r3, r3, #4
 800787e:	1a9b      	subs	r3, r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4403      	add	r3, r0
 8007884:	3328      	adds	r3, #40	@ 0x28
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	fbb1 f3f3 	udiv	r3, r1, r3
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8470 	beq.w	8008176 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8007896:	78fa      	ldrb	r2, [r7, #3]
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	4613      	mov	r3, r2
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	1a9b      	subs	r3, r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	440b      	add	r3, r1
 80078a4:	333c      	adds	r3, #60	@ 0x3c
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	78fa      	ldrb	r2, [r7, #3]
 80078aa:	f083 0301 	eor.w	r3, r3, #1
 80078ae:	b2d8      	uxtb	r0, r3
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	1a9b      	subs	r3, r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	333c      	adds	r3, #60	@ 0x3c
 80078be:	4602      	mov	r2, r0
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	f000 bc58 	b.w	8008176 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80078c6:	78fa      	ldrb	r2, [r7, #3]
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	4613      	mov	r3, r2
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	1a9b      	subs	r3, r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	333c      	adds	r3, #60	@ 0x3c
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	78fa      	ldrb	r2, [r7, #3]
 80078da:	f083 0301 	eor.w	r3, r3, #1
 80078de:	b2d8      	uxtb	r0, r3
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	4613      	mov	r3, r2
 80078e4:	011b      	lsls	r3, r3, #4
 80078e6:	1a9b      	subs	r3, r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	440b      	add	r3, r1
 80078ec:	333c      	adds	r3, #60	@ 0x3c
 80078ee:	4602      	mov	r2, r0
 80078f0:	701a      	strb	r2, [r3, #0]
 80078f2:	f000 bc40 	b.w	8008176 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	78fa      	ldrb	r2, [r7, #3]
 80078fc:	4611      	mov	r1, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f005 ff57 	bl	800d7b2 <USB_ReadChInterrupts>
 8007904:	4603      	mov	r3, r0
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b20      	cmp	r3, #32
 800790c:	d131      	bne.n	8007972 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800790e:	78fb      	ldrb	r3, [r7, #3]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	4413      	add	r3, r2
 8007916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800791a:	461a      	mov	r2, r3
 800791c:	2320      	movs	r3, #32
 800791e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8007920:	78fa      	ldrb	r2, [r7, #3]
 8007922:	6879      	ldr	r1, [r7, #4]
 8007924:	4613      	mov	r3, r2
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	1a9b      	subs	r3, r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	440b      	add	r3, r1
 800792e:	331a      	adds	r3, #26
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2b01      	cmp	r3, #1
 8007934:	f040 841f 	bne.w	8008176 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8007938:	78fa      	ldrb	r2, [r7, #3]
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	4613      	mov	r3, r2
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	1a9b      	subs	r3, r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	331b      	adds	r3, #27
 8007948:	2201      	movs	r2, #1
 800794a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800794c:	78fa      	ldrb	r2, [r7, #3]
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	4613      	mov	r3, r2
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	1a9b      	subs	r3, r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	334d      	adds	r3, #77	@ 0x4d
 800795c:	2203      	movs	r2, #3
 800795e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	78fa      	ldrb	r2, [r7, #3]
 8007966:	4611      	mov	r1, r2
 8007968:	4618      	mov	r0, r3
 800796a:	f006 fcc6 	bl	800e2fa <USB_HC_Halt>
 800796e:	f000 bc02 	b.w	8008176 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f005 ff19 	bl	800d7b2 <USB_ReadChInterrupts>
 8007980:	4603      	mov	r3, r0
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b02      	cmp	r3, #2
 8007988:	f040 8305 	bne.w	8007f96 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	4413      	add	r3, r2
 8007994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007998:	461a      	mov	r2, r3
 800799a:	2302      	movs	r3, #2
 800799c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800799e:	78fa      	ldrb	r2, [r7, #3]
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	4613      	mov	r3, r2
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	1a9b      	subs	r3, r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	440b      	add	r3, r1
 80079ac:	334d      	adds	r3, #77	@ 0x4d
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d114      	bne.n	80079de <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80079b4:	78fa      	ldrb	r2, [r7, #3]
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	4613      	mov	r3, r2
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	1a9b      	subs	r3, r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	334d      	adds	r3, #77	@ 0x4d
 80079c4:	2202      	movs	r2, #2
 80079c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80079c8:	78fa      	ldrb	r2, [r7, #3]
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	4613      	mov	r3, r2
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	334c      	adds	r3, #76	@ 0x4c
 80079d8:	2201      	movs	r2, #1
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	e2cc      	b.n	8007f78 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	4613      	mov	r3, r2
 80079e4:	011b      	lsls	r3, r3, #4
 80079e6:	1a9b      	subs	r3, r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	334d      	adds	r3, #77	@ 0x4d
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b06      	cmp	r3, #6
 80079f2:	d114      	bne.n	8007a1e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80079f4:	78fa      	ldrb	r2, [r7, #3]
 80079f6:	6879      	ldr	r1, [r7, #4]
 80079f8:	4613      	mov	r3, r2
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	1a9b      	subs	r3, r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	440b      	add	r3, r1
 8007a02:	334d      	adds	r3, #77	@ 0x4d
 8007a04:	2202      	movs	r2, #2
 8007a06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8007a08:	78fa      	ldrb	r2, [r7, #3]
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	1a9b      	subs	r3, r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	334c      	adds	r3, #76	@ 0x4c
 8007a18:	2205      	movs	r2, #5
 8007a1a:	701a      	strb	r2, [r3, #0]
 8007a1c:	e2ac      	b.n	8007f78 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007a1e:	78fa      	ldrb	r2, [r7, #3]
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	4613      	mov	r3, r2
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	1a9b      	subs	r3, r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	440b      	add	r3, r1
 8007a2c:	334d      	adds	r3, #77	@ 0x4d
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b07      	cmp	r3, #7
 8007a32:	d00b      	beq.n	8007a4c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8007a34:	78fa      	ldrb	r2, [r7, #3]
 8007a36:	6879      	ldr	r1, [r7, #4]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	334d      	adds	r3, #77	@ 0x4d
 8007a44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007a46:	2b09      	cmp	r3, #9
 8007a48:	f040 80a6 	bne.w	8007b98 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4613      	mov	r3, r2
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	1a9b      	subs	r3, r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	334d      	adds	r3, #77	@ 0x4d
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007a60:	78fa      	ldrb	r2, [r7, #3]
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	4613      	mov	r3, r2
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	1a9b      	subs	r3, r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	3344      	adds	r3, #68	@ 0x44
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	1c59      	adds	r1, r3, #1
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	4613      	mov	r3, r2
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	1a9b      	subs	r3, r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4403      	add	r3, r0
 8007a80:	3344      	adds	r3, #68	@ 0x44
 8007a82:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007a84:	78fa      	ldrb	r2, [r7, #3]
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	1a9b      	subs	r3, r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	440b      	add	r3, r1
 8007a92:	3344      	adds	r3, #68	@ 0x44
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d943      	bls.n	8007b22 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007a9a:	78fa      	ldrb	r2, [r7, #3]
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	1a9b      	subs	r3, r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	440b      	add	r3, r1
 8007aa8:	3344      	adds	r3, #68	@ 0x44
 8007aaa:	2200      	movs	r2, #0
 8007aac:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8007aae:	78fa      	ldrb	r2, [r7, #3]
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	1a9b      	subs	r3, r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	440b      	add	r3, r1
 8007abc:	331a      	adds	r3, #26
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d123      	bne.n	8007b0c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8007ac4:	78fa      	ldrb	r2, [r7, #3]
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	011b      	lsls	r3, r3, #4
 8007acc:	1a9b      	subs	r3, r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	331b      	adds	r3, #27
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8007ad8:	78fa      	ldrb	r2, [r7, #3]
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	4613      	mov	r3, r2
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	1a9b      	subs	r3, r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	440b      	add	r3, r1
 8007ae6:	331c      	adds	r3, #28
 8007ae8:	2200      	movs	r2, #0
 8007aea:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	78fa      	ldrb	r2, [r7, #3]
 8007afc:	0151      	lsls	r1, r2, #5
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	440a      	add	r2, r1
 8007b02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b0a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007b0c:	78fa      	ldrb	r2, [r7, #3]
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	011b      	lsls	r3, r3, #4
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	334c      	adds	r3, #76	@ 0x4c
 8007b1c:	2204      	movs	r2, #4
 8007b1e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007b20:	e229      	b.n	8007f76 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007b22:	78fa      	ldrb	r2, [r7, #3]
 8007b24:	6879      	ldr	r1, [r7, #4]
 8007b26:	4613      	mov	r3, r2
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	1a9b      	subs	r3, r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	440b      	add	r3, r1
 8007b30:	334c      	adds	r3, #76	@ 0x4c
 8007b32:	2202      	movs	r2, #2
 8007b34:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007b36:	78fa      	ldrb	r2, [r7, #3]
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	3326      	adds	r3, #38	@ 0x26
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007b4c:	78fa      	ldrb	r2, [r7, #3]
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	4613      	mov	r3, r2
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	1a9b      	subs	r3, r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	3326      	adds	r3, #38	@ 0x26
 8007b5c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	f040 8209 	bne.w	8007f76 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b7a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b82:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b90:	461a      	mov	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007b96:	e1ee      	b.n	8007f76 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007b98:	78fa      	ldrb	r2, [r7, #3]
 8007b9a:	6879      	ldr	r1, [r7, #4]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	1a9b      	subs	r3, r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	440b      	add	r3, r1
 8007ba6:	334d      	adds	r3, #77	@ 0x4d
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b05      	cmp	r3, #5
 8007bac:	f040 80c8 	bne.w	8007d40 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007bb0:	78fa      	ldrb	r2, [r7, #3]
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	1a9b      	subs	r3, r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	334d      	adds	r3, #77	@ 0x4d
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007bc4:	78fa      	ldrb	r2, [r7, #3]
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	1a9b      	subs	r3, r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	440b      	add	r3, r1
 8007bd2:	331b      	adds	r3, #27
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	f040 81ce 	bne.w	8007f78 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007bdc:	78fa      	ldrb	r2, [r7, #3]
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	4613      	mov	r3, r2
 8007be2:	011b      	lsls	r3, r3, #4
 8007be4:	1a9b      	subs	r3, r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	440b      	add	r3, r1
 8007bea:	3326      	adds	r3, #38	@ 0x26
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d16b      	bne.n	8007cca <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	1a9b      	subs	r3, r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	3348      	adds	r3, #72	@ 0x48
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	1c59      	adds	r1, r3, #1
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	1a9b      	subs	r3, r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4403      	add	r3, r0
 8007c12:	3348      	adds	r3, #72	@ 0x48
 8007c14:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	011b      	lsls	r3, r3, #4
 8007c1e:	1a9b      	subs	r3, r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	440b      	add	r3, r1
 8007c24:	3348      	adds	r3, #72	@ 0x48
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d943      	bls.n	8007cb4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	4613      	mov	r3, r2
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	1a9b      	subs	r3, r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	440b      	add	r3, r1
 8007c3a:	3348      	adds	r3, #72	@ 0x48
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8007c40:	78fa      	ldrb	r2, [r7, #3]
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	4613      	mov	r3, r2
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	1a9b      	subs	r3, r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	331b      	adds	r3, #27
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8007c54:	78fa      	ldrb	r2, [r7, #3]
 8007c56:	6879      	ldr	r1, [r7, #4]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	1a9b      	subs	r3, r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	3344      	adds	r3, #68	@ 0x44
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d809      	bhi.n	8007c7e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8007c6a:	78fa      	ldrb	r2, [r7, #3]
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	011b      	lsls	r3, r3, #4
 8007c72:	1a9b      	subs	r3, r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	440b      	add	r3, r1
 8007c78:	331c      	adds	r3, #28
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	78fa      	ldrb	r2, [r7, #3]
 8007c8e:	0151      	lsls	r1, r2, #5
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	440a      	add	r2, r1
 8007c94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c9c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8007c9e:	78fa      	ldrb	r2, [r7, #3]
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	1a9b      	subs	r3, r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	334c      	adds	r3, #76	@ 0x4c
 8007cae:	2204      	movs	r2, #4
 8007cb0:	701a      	strb	r2, [r3, #0]
 8007cb2:	e014      	b.n	8007cde <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007cb4:	78fa      	ldrb	r2, [r7, #3]
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	1a9b      	subs	r3, r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	334c      	adds	r3, #76	@ 0x4c
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	701a      	strb	r2, [r3, #0]
 8007cc8:	e009      	b.n	8007cde <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007cca:	78fa      	ldrb	r2, [r7, #3]
 8007ccc:	6879      	ldr	r1, [r7, #4]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	1a9b      	subs	r3, r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	440b      	add	r3, r1
 8007cd8:	334c      	adds	r3, #76	@ 0x4c
 8007cda:	2202      	movs	r2, #2
 8007cdc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007cde:	78fa      	ldrb	r2, [r7, #3]
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	011b      	lsls	r3, r3, #4
 8007ce6:	1a9b      	subs	r3, r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	440b      	add	r3, r1
 8007cec:	3326      	adds	r3, #38	@ 0x26
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	011b      	lsls	r3, r3, #4
 8007cfc:	1a9b      	subs	r3, r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	440b      	add	r3, r1
 8007d02:	3326      	adds	r3, #38	@ 0x26
 8007d04:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	f040 8136 	bne.w	8007f78 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d22:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d2a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007d2c:	78fb      	ldrb	r3, [r7, #3]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d38:	461a      	mov	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	e11b      	b.n	8007f78 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007d40:	78fa      	ldrb	r2, [r7, #3]
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	4613      	mov	r3, r2
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	1a9b      	subs	r3, r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	440b      	add	r3, r1
 8007d4e:	334d      	adds	r3, #77	@ 0x4d
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	f040 8081 	bne.w	8007e5a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007d58:	78fa      	ldrb	r2, [r7, #3]
 8007d5a:	6879      	ldr	r1, [r7, #4]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	1a9b      	subs	r3, r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	440b      	add	r3, r1
 8007d66:	334d      	adds	r3, #77	@ 0x4d
 8007d68:	2202      	movs	r2, #2
 8007d6a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007d6c:	78fa      	ldrb	r2, [r7, #3]
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	4613      	mov	r3, r2
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	1a9b      	subs	r3, r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	440b      	add	r3, r1
 8007d7a:	331b      	adds	r3, #27
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	f040 80fa 	bne.w	8007f78 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007d84:	78fa      	ldrb	r2, [r7, #3]
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	011b      	lsls	r3, r3, #4
 8007d8c:	1a9b      	subs	r3, r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	440b      	add	r3, r1
 8007d92:	334c      	adds	r3, #76	@ 0x4c
 8007d94:	2202      	movs	r2, #2
 8007d96:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	78fa      	ldrb	r2, [r7, #3]
 8007da8:	0151      	lsls	r1, r2, #5
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	440a      	add	r2, r1
 8007dae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007db6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	78fa      	ldrb	r2, [r7, #3]
 8007dc8:	0151      	lsls	r1, r2, #5
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	440a      	add	r2, r1
 8007dce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dd6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	78fa      	ldrb	r2, [r7, #3]
 8007de8:	0151      	lsls	r1, r2, #5
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	440a      	add	r2, r1
 8007dee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007df2:	f023 0320 	bic.w	r3, r3, #32
 8007df6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007df8:	78fa      	ldrb	r2, [r7, #3]
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	011b      	lsls	r3, r3, #4
 8007e00:	1a9b      	subs	r3, r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	440b      	add	r3, r1
 8007e06:	3326      	adds	r3, #38	@ 0x26
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00b      	beq.n	8007e26 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007e0e:	78fa      	ldrb	r2, [r7, #3]
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	4613      	mov	r3, r2
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	1a9b      	subs	r3, r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	440b      	add	r3, r1
 8007e1c:	3326      	adds	r3, #38	@ 0x26
 8007e1e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	f040 80a9 	bne.w	8007f78 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007e26:	78fb      	ldrb	r3, [r7, #3]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e3c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e44:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007e46:	78fb      	ldrb	r3, [r7, #3]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e52:	461a      	mov	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	e08e      	b.n	8007f78 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007e5a:	78fa      	ldrb	r2, [r7, #3]
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	011b      	lsls	r3, r3, #4
 8007e62:	1a9b      	subs	r3, r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	440b      	add	r3, r1
 8007e68:	334d      	adds	r3, #77	@ 0x4d
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d143      	bne.n	8007ef8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007e70:	78fa      	ldrb	r2, [r7, #3]
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	4613      	mov	r3, r2
 8007e76:	011b      	lsls	r3, r3, #4
 8007e78:	1a9b      	subs	r3, r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	440b      	add	r3, r1
 8007e7e:	334d      	adds	r3, #77	@ 0x4d
 8007e80:	2202      	movs	r2, #2
 8007e82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007e84:	78fa      	ldrb	r2, [r7, #3]
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	011b      	lsls	r3, r3, #4
 8007e8c:	1a9b      	subs	r3, r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	440b      	add	r3, r1
 8007e92:	334c      	adds	r3, #76	@ 0x4c
 8007e94:	2202      	movs	r2, #2
 8007e96:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e98:	78fa      	ldrb	r2, [r7, #3]
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	1a9b      	subs	r3, r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	440b      	add	r3, r1
 8007ea6:	3326      	adds	r3, #38	@ 0x26
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007eae:	78fa      	ldrb	r2, [r7, #3]
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	1a9b      	subs	r3, r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	440b      	add	r3, r1
 8007ebc:	3326      	adds	r3, #38	@ 0x26
 8007ebe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d159      	bne.n	8007f78 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007eda:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ee2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	015a      	lsls	r2, r3, #5
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	4413      	add	r3, r2
 8007eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	e03f      	b.n	8007f78 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	4613      	mov	r3, r2
 8007efe:	011b      	lsls	r3, r3, #4
 8007f00:	1a9b      	subs	r3, r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	440b      	add	r3, r1
 8007f06:	334d      	adds	r3, #77	@ 0x4d
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b08      	cmp	r3, #8
 8007f0c:	d126      	bne.n	8007f5c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	1a9b      	subs	r3, r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	334d      	adds	r3, #77	@ 0x4d
 8007f1e:	2202      	movs	r2, #2
 8007f20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007f22:	78fa      	ldrb	r2, [r7, #3]
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	1a9b      	subs	r3, r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	440b      	add	r3, r1
 8007f30:	3344      	adds	r3, #68	@ 0x44
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	1c59      	adds	r1, r3, #1
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	1a9b      	subs	r3, r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4403      	add	r3, r0
 8007f42:	3344      	adds	r3, #68	@ 0x44
 8007f44:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8007f46:	78fa      	ldrb	r2, [r7, #3]
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	1a9b      	subs	r3, r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	334c      	adds	r3, #76	@ 0x4c
 8007f56:	2204      	movs	r2, #4
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	e00d      	b.n	8007f78 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8007f5c:	78fa      	ldrb	r2, [r7, #3]
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	4613      	mov	r3, r2
 8007f62:	011b      	lsls	r3, r3, #4
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	334d      	adds	r3, #77	@ 0x4d
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	f000 8100 	beq.w	8008174 <HCD_HC_IN_IRQHandler+0xcca>
 8007f74:	e000      	b.n	8007f78 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007f76:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007f78:	78fa      	ldrb	r2, [r7, #3]
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	1a9b      	subs	r3, r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	440b      	add	r3, r1
 8007f86:	334c      	adds	r3, #76	@ 0x4c
 8007f88:	781a      	ldrb	r2, [r3, #0]
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f009 fa6e 	bl	8011470 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007f94:	e0ef      	b.n	8008176 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f005 fc07 	bl	800d7b2 <USB_ReadChInterrupts>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007faa:	2b40      	cmp	r3, #64	@ 0x40
 8007fac:	d12f      	bne.n	800800e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007fae:	78fb      	ldrb	r3, [r7, #3]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fba:	461a      	mov	r2, r3
 8007fbc:	2340      	movs	r3, #64	@ 0x40
 8007fbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8007fc0:	78fa      	ldrb	r2, [r7, #3]
 8007fc2:	6879      	ldr	r1, [r7, #4]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	1a9b      	subs	r3, r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	440b      	add	r3, r1
 8007fce:	334d      	adds	r3, #77	@ 0x4d
 8007fd0:	2205      	movs	r2, #5
 8007fd2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007fd4:	78fa      	ldrb	r2, [r7, #3]
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	1a9b      	subs	r3, r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	440b      	add	r3, r1
 8007fe2:	331a      	adds	r3, #26
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d109      	bne.n	8007ffe <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007fea:	78fa      	ldrb	r2, [r7, #3]
 8007fec:	6879      	ldr	r1, [r7, #4]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	011b      	lsls	r3, r3, #4
 8007ff2:	1a9b      	subs	r3, r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	440b      	add	r3, r1
 8007ff8:	3344      	adds	r3, #68	@ 0x44
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f006 f977 	bl	800e2fa <USB_HC_Halt>
 800800c:	e0b3      	b.n	8008176 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	78fa      	ldrb	r2, [r7, #3]
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f005 fbcb 	bl	800d7b2 <USB_ReadChInterrupts>
 800801c:	4603      	mov	r3, r0
 800801e:	f003 0310 	and.w	r3, r3, #16
 8008022:	2b10      	cmp	r3, #16
 8008024:	f040 80a7 	bne.w	8008176 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008028:	78fa      	ldrb	r2, [r7, #3]
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	4613      	mov	r3, r2
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	1a9b      	subs	r3, r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	440b      	add	r3, r1
 8008036:	3326      	adds	r3, #38	@ 0x26
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b03      	cmp	r3, #3
 800803c:	d11b      	bne.n	8008076 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800803e:	78fa      	ldrb	r2, [r7, #3]
 8008040:	6879      	ldr	r1, [r7, #4]
 8008042:	4613      	mov	r3, r2
 8008044:	011b      	lsls	r3, r3, #4
 8008046:	1a9b      	subs	r3, r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	440b      	add	r3, r1
 800804c:	3344      	adds	r3, #68	@ 0x44
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8008052:	78fa      	ldrb	r2, [r7, #3]
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	4613      	mov	r3, r2
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	440b      	add	r3, r1
 8008060:	334d      	adds	r3, #77	@ 0x4d
 8008062:	2204      	movs	r2, #4
 8008064:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	78fa      	ldrb	r2, [r7, #3]
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f006 f943 	bl	800e2fa <USB_HC_Halt>
 8008074:	e03f      	b.n	80080f6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008076:	78fa      	ldrb	r2, [r7, #3]
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	4613      	mov	r3, r2
 800807c:	011b      	lsls	r3, r3, #4
 800807e:	1a9b      	subs	r3, r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	440b      	add	r3, r1
 8008084:	3326      	adds	r3, #38	@ 0x26
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00a      	beq.n	80080a2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800808c:	78fa      	ldrb	r2, [r7, #3]
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	4613      	mov	r3, r2
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	1a9b      	subs	r3, r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	3326      	adds	r3, #38	@ 0x26
 800809c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d129      	bne.n	80080f6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80080a2:	78fa      	ldrb	r2, [r7, #3]
 80080a4:	6879      	ldr	r1, [r7, #4]
 80080a6:	4613      	mov	r3, r2
 80080a8:	011b      	lsls	r3, r3, #4
 80080aa:	1a9b      	subs	r3, r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	440b      	add	r3, r1
 80080b0:	3344      	adds	r3, #68	@ 0x44
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	799b      	ldrb	r3, [r3, #6]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <HCD_HC_IN_IRQHandler+0xc2a>
 80080be:	78fa      	ldrb	r2, [r7, #3]
 80080c0:	6879      	ldr	r1, [r7, #4]
 80080c2:	4613      	mov	r3, r2
 80080c4:	011b      	lsls	r3, r3, #4
 80080c6:	1a9b      	subs	r3, r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	440b      	add	r3, r1
 80080cc:	331b      	adds	r3, #27
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d110      	bne.n	80080f6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80080d4:	78fa      	ldrb	r2, [r7, #3]
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	4613      	mov	r3, r2
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	1a9b      	subs	r3, r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	440b      	add	r3, r1
 80080e2:	334d      	adds	r3, #77	@ 0x4d
 80080e4:	2204      	movs	r2, #4
 80080e6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	78fa      	ldrb	r2, [r7, #3]
 80080ee:	4611      	mov	r1, r2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f006 f902 	bl	800e2fa <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80080f6:	78fa      	ldrb	r2, [r7, #3]
 80080f8:	6879      	ldr	r1, [r7, #4]
 80080fa:	4613      	mov	r3, r2
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	1a9b      	subs	r3, r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	440b      	add	r3, r1
 8008104:	331b      	adds	r3, #27
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d129      	bne.n	8008160 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800810c:	78fa      	ldrb	r2, [r7, #3]
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4613      	mov	r3, r2
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	1a9b      	subs	r3, r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	440b      	add	r3, r1
 800811a:	331b      	adds	r3, #27
 800811c:	2200      	movs	r2, #0
 800811e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008120:	78fb      	ldrb	r3, [r7, #3]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	4413      	add	r3, r2
 8008128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	78fa      	ldrb	r2, [r7, #3]
 8008130:	0151      	lsls	r1, r2, #5
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	440a      	add	r2, r1
 8008136:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800813a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800813e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	4413      	add	r3, r2
 8008148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	78fa      	ldrb	r2, [r7, #3]
 8008150:	0151      	lsls	r1, r2, #5
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	440a      	add	r2, r1
 8008156:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800815a:	f043 0320 	orr.w	r3, r3, #32
 800815e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	4413      	add	r3, r2
 8008168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800816c:	461a      	mov	r2, r3
 800816e:	2310      	movs	r3, #16
 8008170:	6093      	str	r3, [r2, #8]
 8008172:	e000      	b.n	8008176 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8008174:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	78fa      	ldrb	r2, [r7, #3]
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f005 fb09 	bl	800d7b2 <USB_ReadChInterrupts>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f003 0304 	and.w	r3, r3, #4
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d11b      	bne.n	80081e2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081b6:	461a      	mov	r2, r3
 80081b8:	2304      	movs	r3, #4
 80081ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80081bc:	78fa      	ldrb	r2, [r7, #3]
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	4613      	mov	r3, r2
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	1a9b      	subs	r3, r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	440b      	add	r3, r1
 80081ca:	334d      	adds	r3, #77	@ 0x4d
 80081cc:	2207      	movs	r2, #7
 80081ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	78fa      	ldrb	r2, [r7, #3]
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f006 f88e 	bl	800e2fa <USB_HC_Halt>
 80081de:	f000 bc89 	b.w	8008af4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	4611      	mov	r1, r2
 80081ea:	4618      	mov	r0, r3
 80081ec:	f005 fae1 	bl	800d7b2 <USB_ReadChInterrupts>
 80081f0:	4603      	mov	r3, r0
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	f040 8082 	bne.w	8008300 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	4413      	add	r3, r2
 8008204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008208:	461a      	mov	r2, r3
 800820a:	2320      	movs	r3, #32
 800820c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800820e:	78fa      	ldrb	r2, [r7, #3]
 8008210:	6879      	ldr	r1, [r7, #4]
 8008212:	4613      	mov	r3, r2
 8008214:	011b      	lsls	r3, r3, #4
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	440b      	add	r3, r1
 800821c:	3319      	adds	r3, #25
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d124      	bne.n	800826e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	4613      	mov	r3, r2
 800822a:	011b      	lsls	r3, r3, #4
 800822c:	1a9b      	subs	r3, r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	3319      	adds	r3, #25
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008238:	78fa      	ldrb	r2, [r7, #3]
 800823a:	6879      	ldr	r1, [r7, #4]
 800823c:	4613      	mov	r3, r2
 800823e:	011b      	lsls	r3, r3, #4
 8008240:	1a9b      	subs	r3, r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	440b      	add	r3, r1
 8008246:	334c      	adds	r3, #76	@ 0x4c
 8008248:	2202      	movs	r2, #2
 800824a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800824c:	78fa      	ldrb	r2, [r7, #3]
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	4613      	mov	r3, r2
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	1a9b      	subs	r3, r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	440b      	add	r3, r1
 800825a:	334d      	adds	r3, #77	@ 0x4d
 800825c:	2203      	movs	r2, #3
 800825e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	78fa      	ldrb	r2, [r7, #3]
 8008266:	4611      	mov	r1, r2
 8008268:	4618      	mov	r0, r3
 800826a:	f006 f846 	bl	800e2fa <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800826e:	78fa      	ldrb	r2, [r7, #3]
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	4613      	mov	r3, r2
 8008274:	011b      	lsls	r3, r3, #4
 8008276:	1a9b      	subs	r3, r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	440b      	add	r3, r1
 800827c:	331a      	adds	r3, #26
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b01      	cmp	r3, #1
 8008282:	f040 8437 	bne.w	8008af4 <HCD_HC_OUT_IRQHandler+0x978>
 8008286:	78fa      	ldrb	r2, [r7, #3]
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	4613      	mov	r3, r2
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	1a9b      	subs	r3, r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	440b      	add	r3, r1
 8008294:	331b      	adds	r3, #27
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	f040 842b 	bne.w	8008af4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800829e:	78fa      	ldrb	r2, [r7, #3]
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	4613      	mov	r3, r2
 80082a4:	011b      	lsls	r3, r3, #4
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	440b      	add	r3, r1
 80082ac:	3326      	adds	r3, #38	@ 0x26
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d009      	beq.n	80082c8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80082b4:	78fa      	ldrb	r2, [r7, #3]
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4613      	mov	r3, r2
 80082ba:	011b      	lsls	r3, r3, #4
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	440b      	add	r3, r1
 80082c2:	331b      	adds	r3, #27
 80082c4:	2201      	movs	r2, #1
 80082c6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80082c8:	78fa      	ldrb	r2, [r7, #3]
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	4613      	mov	r3, r2
 80082ce:	011b      	lsls	r3, r3, #4
 80082d0:	1a9b      	subs	r3, r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	334d      	adds	r3, #77	@ 0x4d
 80082d8:	2203      	movs	r2, #3
 80082da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	78fa      	ldrb	r2, [r7, #3]
 80082e2:	4611      	mov	r1, r2
 80082e4:	4618      	mov	r0, r3
 80082e6:	f006 f808 	bl	800e2fa <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80082ea:	78fa      	ldrb	r2, [r7, #3]
 80082ec:	6879      	ldr	r1, [r7, #4]
 80082ee:	4613      	mov	r3, r2
 80082f0:	011b      	lsls	r3, r3, #4
 80082f2:	1a9b      	subs	r3, r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	440b      	add	r3, r1
 80082f8:	3344      	adds	r3, #68	@ 0x44
 80082fa:	2200      	movs	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	e3f9      	b.n	8008af4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	78fa      	ldrb	r2, [r7, #3]
 8008306:	4611      	mov	r1, r2
 8008308:	4618      	mov	r0, r3
 800830a:	f005 fa52 	bl	800d7b2 <USB_ReadChInterrupts>
 800830e:	4603      	mov	r3, r0
 8008310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008318:	d111      	bne.n	800833e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800831a:	78fb      	ldrb	r3, [r7, #3]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	4413      	add	r3, r2
 8008322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008326:	461a      	mov	r2, r3
 8008328:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800832c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	78fa      	ldrb	r2, [r7, #3]
 8008334:	4611      	mov	r1, r2
 8008336:	4618      	mov	r0, r3
 8008338:	f005 ffdf 	bl	800e2fa <USB_HC_Halt>
 800833c:	e3da      	b.n	8008af4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	78fa      	ldrb	r2, [r7, #3]
 8008344:	4611      	mov	r1, r2
 8008346:	4618      	mov	r0, r3
 8008348:	f005 fa33 	bl	800d7b2 <USB_ReadChInterrupts>
 800834c:	4603      	mov	r3, r0
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b01      	cmp	r3, #1
 8008354:	d168      	bne.n	8008428 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008356:	78fa      	ldrb	r2, [r7, #3]
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	4613      	mov	r3, r2
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	1a9b      	subs	r3, r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	440b      	add	r3, r1
 8008364:	3344      	adds	r3, #68	@ 0x44
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	78fa      	ldrb	r2, [r7, #3]
 8008370:	4611      	mov	r1, r2
 8008372:	4618      	mov	r0, r3
 8008374:	f005 fa1d 	bl	800d7b2 <USB_ReadChInterrupts>
 8008378:	4603      	mov	r3, r0
 800837a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800837e:	2b40      	cmp	r3, #64	@ 0x40
 8008380:	d112      	bne.n	80083a8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008382:	78fa      	ldrb	r2, [r7, #3]
 8008384:	6879      	ldr	r1, [r7, #4]
 8008386:	4613      	mov	r3, r2
 8008388:	011b      	lsls	r3, r3, #4
 800838a:	1a9b      	subs	r3, r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	440b      	add	r3, r1
 8008390:	3319      	adds	r3, #25
 8008392:	2201      	movs	r2, #1
 8008394:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	4413      	add	r3, r2
 800839e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083a2:	461a      	mov	r2, r3
 80083a4:	2340      	movs	r3, #64	@ 0x40
 80083a6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80083a8:	78fa      	ldrb	r2, [r7, #3]
 80083aa:	6879      	ldr	r1, [r7, #4]
 80083ac:	4613      	mov	r3, r2
 80083ae:	011b      	lsls	r3, r3, #4
 80083b0:	1a9b      	subs	r3, r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	440b      	add	r3, r1
 80083b6:	331b      	adds	r3, #27
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d019      	beq.n	80083f2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80083be:	78fa      	ldrb	r2, [r7, #3]
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	4613      	mov	r3, r2
 80083c4:	011b      	lsls	r3, r3, #4
 80083c6:	1a9b      	subs	r3, r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	440b      	add	r3, r1
 80083cc:	331b      	adds	r3, #27
 80083ce:	2200      	movs	r2, #0
 80083d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	015a      	lsls	r2, r3, #5
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	4413      	add	r3, r2
 80083da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	78fa      	ldrb	r2, [r7, #3]
 80083e2:	0151      	lsls	r1, r2, #5
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	440a      	add	r2, r1
 80083e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083f0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80083f2:	78fb      	ldrb	r3, [r7, #3]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083fe:	461a      	mov	r2, r3
 8008400:	2301      	movs	r3, #1
 8008402:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8008404:	78fa      	ldrb	r2, [r7, #3]
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	4613      	mov	r3, r2
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	334d      	adds	r3, #77	@ 0x4d
 8008414:	2201      	movs	r2, #1
 8008416:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	78fa      	ldrb	r2, [r7, #3]
 800841e:	4611      	mov	r1, r2
 8008420:	4618      	mov	r0, r3
 8008422:	f005 ff6a 	bl	800e2fa <USB_HC_Halt>
 8008426:	e365      	b.n	8008af4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	78fa      	ldrb	r2, [r7, #3]
 800842e:	4611      	mov	r1, r2
 8008430:	4618      	mov	r0, r3
 8008432:	f005 f9be 	bl	800d7b2 <USB_ReadChInterrupts>
 8008436:	4603      	mov	r3, r0
 8008438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800843c:	2b40      	cmp	r3, #64	@ 0x40
 800843e:	d139      	bne.n	80084b4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8008440:	78fa      	ldrb	r2, [r7, #3]
 8008442:	6879      	ldr	r1, [r7, #4]
 8008444:	4613      	mov	r3, r2
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	1a9b      	subs	r3, r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	440b      	add	r3, r1
 800844e:	334d      	adds	r3, #77	@ 0x4d
 8008450:	2205      	movs	r2, #5
 8008452:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008454:	78fa      	ldrb	r2, [r7, #3]
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	4613      	mov	r3, r2
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	1a9b      	subs	r3, r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	440b      	add	r3, r1
 8008462:	331a      	adds	r3, #26
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d109      	bne.n	800847e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800846a:	78fa      	ldrb	r2, [r7, #3]
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	4613      	mov	r3, r2
 8008470:	011b      	lsls	r3, r3, #4
 8008472:	1a9b      	subs	r3, r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	3319      	adds	r3, #25
 800847a:	2201      	movs	r2, #1
 800847c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800847e:	78fa      	ldrb	r2, [r7, #3]
 8008480:	6879      	ldr	r1, [r7, #4]
 8008482:	4613      	mov	r3, r2
 8008484:	011b      	lsls	r3, r3, #4
 8008486:	1a9b      	subs	r3, r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	440b      	add	r3, r1
 800848c:	3344      	adds	r3, #68	@ 0x44
 800848e:	2200      	movs	r2, #0
 8008490:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	78fa      	ldrb	r2, [r7, #3]
 8008498:	4611      	mov	r1, r2
 800849a:	4618      	mov	r0, r3
 800849c:	f005 ff2d 	bl	800e2fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ac:	461a      	mov	r2, r3
 80084ae:	2340      	movs	r3, #64	@ 0x40
 80084b0:	6093      	str	r3, [r2, #8]
 80084b2:	e31f      	b.n	8008af4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	78fa      	ldrb	r2, [r7, #3]
 80084ba:	4611      	mov	r1, r2
 80084bc:	4618      	mov	r0, r3
 80084be:	f005 f978 	bl	800d7b2 <USB_ReadChInterrupts>
 80084c2:	4603      	mov	r3, r0
 80084c4:	f003 0308 	and.w	r3, r3, #8
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d11a      	bne.n	8008502 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	015a      	lsls	r2, r3, #5
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	4413      	add	r3, r2
 80084d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084d8:	461a      	mov	r2, r3
 80084da:	2308      	movs	r3, #8
 80084dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80084de:	78fa      	ldrb	r2, [r7, #3]
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	011b      	lsls	r3, r3, #4
 80084e6:	1a9b      	subs	r3, r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	440b      	add	r3, r1
 80084ec:	334d      	adds	r3, #77	@ 0x4d
 80084ee:	2206      	movs	r2, #6
 80084f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	4611      	mov	r1, r2
 80084fa:	4618      	mov	r0, r3
 80084fc:	f005 fefd 	bl	800e2fa <USB_HC_Halt>
 8008500:	e2f8      	b.n	8008af4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	78fa      	ldrb	r2, [r7, #3]
 8008508:	4611      	mov	r1, r2
 800850a:	4618      	mov	r0, r3
 800850c:	f005 f951 	bl	800d7b2 <USB_ReadChInterrupts>
 8008510:	4603      	mov	r3, r0
 8008512:	f003 0310 	and.w	r3, r3, #16
 8008516:	2b10      	cmp	r3, #16
 8008518:	d144      	bne.n	80085a4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800851a:	78fa      	ldrb	r2, [r7, #3]
 800851c:	6879      	ldr	r1, [r7, #4]
 800851e:	4613      	mov	r3, r2
 8008520:	011b      	lsls	r3, r3, #4
 8008522:	1a9b      	subs	r3, r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	440b      	add	r3, r1
 8008528:	3344      	adds	r3, #68	@ 0x44
 800852a:	2200      	movs	r2, #0
 800852c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800852e:	78fa      	ldrb	r2, [r7, #3]
 8008530:	6879      	ldr	r1, [r7, #4]
 8008532:	4613      	mov	r3, r2
 8008534:	011b      	lsls	r3, r3, #4
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	440b      	add	r3, r1
 800853c:	334d      	adds	r3, #77	@ 0x4d
 800853e:	2204      	movs	r2, #4
 8008540:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8008542:	78fa      	ldrb	r2, [r7, #3]
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	4613      	mov	r3, r2
 8008548:	011b      	lsls	r3, r3, #4
 800854a:	1a9b      	subs	r3, r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	440b      	add	r3, r1
 8008550:	3319      	adds	r3, #25
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d114      	bne.n	8008582 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8008558:	78fa      	ldrb	r2, [r7, #3]
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	4613      	mov	r3, r2
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	440b      	add	r3, r1
 8008566:	3318      	adds	r3, #24
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d109      	bne.n	8008582 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	6879      	ldr	r1, [r7, #4]
 8008572:	4613      	mov	r3, r2
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	1a9b      	subs	r3, r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	440b      	add	r3, r1
 800857c:	3319      	adds	r3, #25
 800857e:	2201      	movs	r2, #1
 8008580:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	4611      	mov	r1, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f005 feb5 	bl	800e2fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	4413      	add	r3, r2
 8008598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800859c:	461a      	mov	r2, r3
 800859e:	2310      	movs	r3, #16
 80085a0:	6093      	str	r3, [r2, #8]
 80085a2:	e2a7      	b.n	8008af4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	78fa      	ldrb	r2, [r7, #3]
 80085aa:	4611      	mov	r1, r2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f005 f900 	bl	800d7b2 <USB_ReadChInterrupts>
 80085b2:	4603      	mov	r3, r0
 80085b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085b8:	2b80      	cmp	r3, #128	@ 0x80
 80085ba:	f040 8083 	bne.w	80086c4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	799b      	ldrb	r3, [r3, #6]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d111      	bne.n	80085ea <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80085c6:	78fa      	ldrb	r2, [r7, #3]
 80085c8:	6879      	ldr	r1, [r7, #4]
 80085ca:	4613      	mov	r3, r2
 80085cc:	011b      	lsls	r3, r3, #4
 80085ce:	1a9b      	subs	r3, r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	440b      	add	r3, r1
 80085d4:	334d      	adds	r3, #77	@ 0x4d
 80085d6:	2207      	movs	r2, #7
 80085d8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	78fa      	ldrb	r2, [r7, #3]
 80085e0:	4611      	mov	r1, r2
 80085e2:	4618      	mov	r0, r3
 80085e4:	f005 fe89 	bl	800e2fa <USB_HC_Halt>
 80085e8:	e062      	b.n	80086b0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80085ea:	78fa      	ldrb	r2, [r7, #3]
 80085ec:	6879      	ldr	r1, [r7, #4]
 80085ee:	4613      	mov	r3, r2
 80085f0:	011b      	lsls	r3, r3, #4
 80085f2:	1a9b      	subs	r3, r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	440b      	add	r3, r1
 80085f8:	3344      	adds	r3, #68	@ 0x44
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	1c59      	adds	r1, r3, #1
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	4613      	mov	r3, r2
 8008602:	011b      	lsls	r3, r3, #4
 8008604:	1a9b      	subs	r3, r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4403      	add	r3, r0
 800860a:	3344      	adds	r3, #68	@ 0x44
 800860c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800860e:	78fa      	ldrb	r2, [r7, #3]
 8008610:	6879      	ldr	r1, [r7, #4]
 8008612:	4613      	mov	r3, r2
 8008614:	011b      	lsls	r3, r3, #4
 8008616:	1a9b      	subs	r3, r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	440b      	add	r3, r1
 800861c:	3344      	adds	r3, #68	@ 0x44
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b02      	cmp	r3, #2
 8008622:	d922      	bls.n	800866a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008624:	78fa      	ldrb	r2, [r7, #3]
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	4613      	mov	r3, r2
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	1a9b      	subs	r3, r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	440b      	add	r3, r1
 8008632:	3344      	adds	r3, #68	@ 0x44
 8008634:	2200      	movs	r2, #0
 8008636:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008638:	78fa      	ldrb	r2, [r7, #3]
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	4613      	mov	r3, r2
 800863e:	011b      	lsls	r3, r3, #4
 8008640:	1a9b      	subs	r3, r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	334c      	adds	r3, #76	@ 0x4c
 8008648:	2204      	movs	r2, #4
 800864a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800864c:	78fa      	ldrb	r2, [r7, #3]
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	4613      	mov	r3, r2
 8008652:	011b      	lsls	r3, r3, #4
 8008654:	1a9b      	subs	r3, r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	440b      	add	r3, r1
 800865a:	334c      	adds	r3, #76	@ 0x4c
 800865c:	781a      	ldrb	r2, [r3, #0]
 800865e:	78fb      	ldrb	r3, [r7, #3]
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f008 ff04 	bl	8011470 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008668:	e022      	b.n	80086b0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800866a:	78fa      	ldrb	r2, [r7, #3]
 800866c:	6879      	ldr	r1, [r7, #4]
 800866e:	4613      	mov	r3, r2
 8008670:	011b      	lsls	r3, r3, #4
 8008672:	1a9b      	subs	r3, r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	440b      	add	r3, r1
 8008678:	334c      	adds	r3, #76	@ 0x4c
 800867a:	2202      	movs	r2, #2
 800867c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800867e:	78fb      	ldrb	r3, [r7, #3]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	4413      	add	r3, r2
 8008686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008694:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800869c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086aa:	461a      	mov	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	015a      	lsls	r2, r3, #5
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	4413      	add	r3, r2
 80086b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086bc:	461a      	mov	r2, r3
 80086be:	2380      	movs	r3, #128	@ 0x80
 80086c0:	6093      	str	r3, [r2, #8]
 80086c2:	e217      	b.n	8008af4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	78fa      	ldrb	r2, [r7, #3]
 80086ca:	4611      	mov	r1, r2
 80086cc:	4618      	mov	r0, r3
 80086ce:	f005 f870 	bl	800d7b2 <USB_ReadChInterrupts>
 80086d2:	4603      	mov	r3, r0
 80086d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086dc:	d11b      	bne.n	8008716 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80086de:	78fa      	ldrb	r2, [r7, #3]
 80086e0:	6879      	ldr	r1, [r7, #4]
 80086e2:	4613      	mov	r3, r2
 80086e4:	011b      	lsls	r3, r3, #4
 80086e6:	1a9b      	subs	r3, r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	440b      	add	r3, r1
 80086ec:	334d      	adds	r3, #77	@ 0x4d
 80086ee:	2209      	movs	r2, #9
 80086f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	78fa      	ldrb	r2, [r7, #3]
 80086f8:	4611      	mov	r1, r2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f005 fdfd 	bl	800e2fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	4413      	add	r3, r2
 8008708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800870c:	461a      	mov	r2, r3
 800870e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008712:	6093      	str	r3, [r2, #8]
 8008714:	e1ee      	b.n	8008af4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	78fa      	ldrb	r2, [r7, #3]
 800871c:	4611      	mov	r1, r2
 800871e:	4618      	mov	r0, r3
 8008720:	f005 f847 	bl	800d7b2 <USB_ReadChInterrupts>
 8008724:	4603      	mov	r3, r0
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b02      	cmp	r3, #2
 800872c:	f040 81df 	bne.w	8008aee <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008730:	78fb      	ldrb	r3, [r7, #3]
 8008732:	015a      	lsls	r2, r3, #5
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	4413      	add	r3, r2
 8008738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800873c:	461a      	mov	r2, r3
 800873e:	2302      	movs	r3, #2
 8008740:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008742:	78fa      	ldrb	r2, [r7, #3]
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	4613      	mov	r3, r2
 8008748:	011b      	lsls	r3, r3, #4
 800874a:	1a9b      	subs	r3, r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	334d      	adds	r3, #77	@ 0x4d
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	2b01      	cmp	r3, #1
 8008756:	f040 8093 	bne.w	8008880 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800875a:	78fa      	ldrb	r2, [r7, #3]
 800875c:	6879      	ldr	r1, [r7, #4]
 800875e:	4613      	mov	r3, r2
 8008760:	011b      	lsls	r3, r3, #4
 8008762:	1a9b      	subs	r3, r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	440b      	add	r3, r1
 8008768:	334d      	adds	r3, #77	@ 0x4d
 800876a:	2202      	movs	r2, #2
 800876c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800876e:	78fa      	ldrb	r2, [r7, #3]
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	4613      	mov	r3, r2
 8008774:	011b      	lsls	r3, r3, #4
 8008776:	1a9b      	subs	r3, r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	440b      	add	r3, r1
 800877c:	334c      	adds	r3, #76	@ 0x4c
 800877e:	2201      	movs	r2, #1
 8008780:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008782:	78fa      	ldrb	r2, [r7, #3]
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	4613      	mov	r3, r2
 8008788:	011b      	lsls	r3, r3, #4
 800878a:	1a9b      	subs	r3, r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	440b      	add	r3, r1
 8008790:	3326      	adds	r3, #38	@ 0x26
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b02      	cmp	r3, #2
 8008796:	d00b      	beq.n	80087b0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8008798:	78fa      	ldrb	r2, [r7, #3]
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	4613      	mov	r3, r2
 800879e:	011b      	lsls	r3, r3, #4
 80087a0:	1a9b      	subs	r3, r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	3326      	adds	r3, #38	@ 0x26
 80087a8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	f040 8190 	bne.w	8008ad0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	799b      	ldrb	r3, [r3, #6]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d115      	bne.n	80087e4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80087b8:	78fa      	ldrb	r2, [r7, #3]
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	4613      	mov	r3, r2
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	1a9b      	subs	r3, r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	333d      	adds	r3, #61	@ 0x3d
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	78fa      	ldrb	r2, [r7, #3]
 80087cc:	f083 0301 	eor.w	r3, r3, #1
 80087d0:	b2d8      	uxtb	r0, r3
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	4613      	mov	r3, r2
 80087d6:	011b      	lsls	r3, r3, #4
 80087d8:	1a9b      	subs	r3, r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	440b      	add	r3, r1
 80087de:	333d      	adds	r3, #61	@ 0x3d
 80087e0:	4602      	mov	r2, r0
 80087e2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	799b      	ldrb	r3, [r3, #6]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	f040 8171 	bne.w	8008ad0 <HCD_HC_OUT_IRQHandler+0x954>
 80087ee:	78fa      	ldrb	r2, [r7, #3]
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	4613      	mov	r3, r2
 80087f4:	011b      	lsls	r3, r3, #4
 80087f6:	1a9b      	subs	r3, r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	440b      	add	r3, r1
 80087fc:	3334      	adds	r3, #52	@ 0x34
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 8165 	beq.w	8008ad0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8008806:	78fa      	ldrb	r2, [r7, #3]
 8008808:	6879      	ldr	r1, [r7, #4]
 800880a:	4613      	mov	r3, r2
 800880c:	011b      	lsls	r3, r3, #4
 800880e:	1a9b      	subs	r3, r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	440b      	add	r3, r1
 8008814:	3334      	adds	r3, #52	@ 0x34
 8008816:	6819      	ldr	r1, [r3, #0]
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	4613      	mov	r3, r2
 800881e:	011b      	lsls	r3, r3, #4
 8008820:	1a9b      	subs	r3, r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4403      	add	r3, r0
 8008826:	3328      	adds	r3, #40	@ 0x28
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	440b      	add	r3, r1
 800882c:	1e59      	subs	r1, r3, #1
 800882e:	78fa      	ldrb	r2, [r7, #3]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	4613      	mov	r3, r2
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	1a9b      	subs	r3, r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4403      	add	r3, r0
 800883c:	3328      	adds	r3, #40	@ 0x28
 800883e:	881b      	ldrh	r3, [r3, #0]
 8008840:	fbb1 f3f3 	udiv	r3, r1, r3
 8008844:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 813f 	beq.w	8008ad0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8008852:	78fa      	ldrb	r2, [r7, #3]
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	4613      	mov	r3, r2
 8008858:	011b      	lsls	r3, r3, #4
 800885a:	1a9b      	subs	r3, r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	440b      	add	r3, r1
 8008860:	333d      	adds	r3, #61	@ 0x3d
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	78fa      	ldrb	r2, [r7, #3]
 8008866:	f083 0301 	eor.w	r3, r3, #1
 800886a:	b2d8      	uxtb	r0, r3
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	4613      	mov	r3, r2
 8008870:	011b      	lsls	r3, r3, #4
 8008872:	1a9b      	subs	r3, r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	333d      	adds	r3, #61	@ 0x3d
 800887a:	4602      	mov	r2, r0
 800887c:	701a      	strb	r2, [r3, #0]
 800887e:	e127      	b.n	8008ad0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	6879      	ldr	r1, [r7, #4]
 8008884:	4613      	mov	r3, r2
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	1a9b      	subs	r3, r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	440b      	add	r3, r1
 800888e:	334d      	adds	r3, #77	@ 0x4d
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d120      	bne.n	80088d8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	4613      	mov	r3, r2
 800889c:	011b      	lsls	r3, r3, #4
 800889e:	1a9b      	subs	r3, r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	440b      	add	r3, r1
 80088a4:	334d      	adds	r3, #77	@ 0x4d
 80088a6:	2202      	movs	r2, #2
 80088a8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80088aa:	78fa      	ldrb	r2, [r7, #3]
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	011b      	lsls	r3, r3, #4
 80088b2:	1a9b      	subs	r3, r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	440b      	add	r3, r1
 80088b8:	331b      	adds	r3, #27
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	f040 8107 	bne.w	8008ad0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80088c2:	78fa      	ldrb	r2, [r7, #3]
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	4613      	mov	r3, r2
 80088c8:	011b      	lsls	r3, r3, #4
 80088ca:	1a9b      	subs	r3, r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	440b      	add	r3, r1
 80088d0:	334c      	adds	r3, #76	@ 0x4c
 80088d2:	2202      	movs	r2, #2
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	e0fb      	b.n	8008ad0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80088d8:	78fa      	ldrb	r2, [r7, #3]
 80088da:	6879      	ldr	r1, [r7, #4]
 80088dc:	4613      	mov	r3, r2
 80088de:	011b      	lsls	r3, r3, #4
 80088e0:	1a9b      	subs	r3, r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	440b      	add	r3, r1
 80088e6:	334d      	adds	r3, #77	@ 0x4d
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	d13a      	bne.n	8008964 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80088ee:	78fa      	ldrb	r2, [r7, #3]
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	011b      	lsls	r3, r3, #4
 80088f6:	1a9b      	subs	r3, r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	440b      	add	r3, r1
 80088fc:	334d      	adds	r3, #77	@ 0x4d
 80088fe:	2202      	movs	r2, #2
 8008900:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008902:	78fa      	ldrb	r2, [r7, #3]
 8008904:	6879      	ldr	r1, [r7, #4]
 8008906:	4613      	mov	r3, r2
 8008908:	011b      	lsls	r3, r3, #4
 800890a:	1a9b      	subs	r3, r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	440b      	add	r3, r1
 8008910:	334c      	adds	r3, #76	@ 0x4c
 8008912:	2202      	movs	r2, #2
 8008914:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008916:	78fa      	ldrb	r2, [r7, #3]
 8008918:	6879      	ldr	r1, [r7, #4]
 800891a:	4613      	mov	r3, r2
 800891c:	011b      	lsls	r3, r3, #4
 800891e:	1a9b      	subs	r3, r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	440b      	add	r3, r1
 8008924:	331b      	adds	r3, #27
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	2b01      	cmp	r3, #1
 800892a:	f040 80d1 	bne.w	8008ad0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800892e:	78fa      	ldrb	r2, [r7, #3]
 8008930:	6879      	ldr	r1, [r7, #4]
 8008932:	4613      	mov	r3, r2
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	1a9b      	subs	r3, r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	440b      	add	r3, r1
 800893c:	331b      	adds	r3, #27
 800893e:	2200      	movs	r2, #0
 8008940:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008942:	78fb      	ldrb	r3, [r7, #3]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	4413      	add	r3, r2
 800894a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	78fa      	ldrb	r2, [r7, #3]
 8008952:	0151      	lsls	r1, r2, #5
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	440a      	add	r2, r1
 8008958:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800895c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008960:	6053      	str	r3, [r2, #4]
 8008962:	e0b5      	b.n	8008ad0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008964:	78fa      	ldrb	r2, [r7, #3]
 8008966:	6879      	ldr	r1, [r7, #4]
 8008968:	4613      	mov	r3, r2
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	1a9b      	subs	r3, r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	440b      	add	r3, r1
 8008972:	334d      	adds	r3, #77	@ 0x4d
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	2b05      	cmp	r3, #5
 8008978:	d114      	bne.n	80089a4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800897a:	78fa      	ldrb	r2, [r7, #3]
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	4613      	mov	r3, r2
 8008980:	011b      	lsls	r3, r3, #4
 8008982:	1a9b      	subs	r3, r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	440b      	add	r3, r1
 8008988:	334d      	adds	r3, #77	@ 0x4d
 800898a:	2202      	movs	r2, #2
 800898c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800898e:	78fa      	ldrb	r2, [r7, #3]
 8008990:	6879      	ldr	r1, [r7, #4]
 8008992:	4613      	mov	r3, r2
 8008994:	011b      	lsls	r3, r3, #4
 8008996:	1a9b      	subs	r3, r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	440b      	add	r3, r1
 800899c:	334c      	adds	r3, #76	@ 0x4c
 800899e:	2202      	movs	r2, #2
 80089a0:	701a      	strb	r2, [r3, #0]
 80089a2:	e095      	b.n	8008ad0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80089a4:	78fa      	ldrb	r2, [r7, #3]
 80089a6:	6879      	ldr	r1, [r7, #4]
 80089a8:	4613      	mov	r3, r2
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	1a9b      	subs	r3, r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	440b      	add	r3, r1
 80089b2:	334d      	adds	r3, #77	@ 0x4d
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2b06      	cmp	r3, #6
 80089b8:	d114      	bne.n	80089e4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	6879      	ldr	r1, [r7, #4]
 80089be:	4613      	mov	r3, r2
 80089c0:	011b      	lsls	r3, r3, #4
 80089c2:	1a9b      	subs	r3, r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	440b      	add	r3, r1
 80089c8:	334d      	adds	r3, #77	@ 0x4d
 80089ca:	2202      	movs	r2, #2
 80089cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80089ce:	78fa      	ldrb	r2, [r7, #3]
 80089d0:	6879      	ldr	r1, [r7, #4]
 80089d2:	4613      	mov	r3, r2
 80089d4:	011b      	lsls	r3, r3, #4
 80089d6:	1a9b      	subs	r3, r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	440b      	add	r3, r1
 80089dc:	334c      	adds	r3, #76	@ 0x4c
 80089de:	2205      	movs	r2, #5
 80089e0:	701a      	strb	r2, [r3, #0]
 80089e2:	e075      	b.n	8008ad0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80089e4:	78fa      	ldrb	r2, [r7, #3]
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	4613      	mov	r3, r2
 80089ea:	011b      	lsls	r3, r3, #4
 80089ec:	1a9b      	subs	r3, r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	440b      	add	r3, r1
 80089f2:	334d      	adds	r3, #77	@ 0x4d
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	2b07      	cmp	r3, #7
 80089f8:	d00a      	beq.n	8008a10 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80089fa:	78fa      	ldrb	r2, [r7, #3]
 80089fc:	6879      	ldr	r1, [r7, #4]
 80089fe:	4613      	mov	r3, r2
 8008a00:	011b      	lsls	r3, r3, #4
 8008a02:	1a9b      	subs	r3, r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	440b      	add	r3, r1
 8008a08:	334d      	adds	r3, #77	@ 0x4d
 8008a0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008a0c:	2b09      	cmp	r3, #9
 8008a0e:	d170      	bne.n	8008af2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008a10:	78fa      	ldrb	r2, [r7, #3]
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	4613      	mov	r3, r2
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	1a9b      	subs	r3, r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	440b      	add	r3, r1
 8008a1e:	334d      	adds	r3, #77	@ 0x4d
 8008a20:	2202      	movs	r2, #2
 8008a22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008a24:	78fa      	ldrb	r2, [r7, #3]
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	011b      	lsls	r3, r3, #4
 8008a2c:	1a9b      	subs	r3, r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	3344      	adds	r3, #68	@ 0x44
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	1c59      	adds	r1, r3, #1
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	011b      	lsls	r3, r3, #4
 8008a3e:	1a9b      	subs	r3, r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4403      	add	r3, r0
 8008a44:	3344      	adds	r3, #68	@ 0x44
 8008a46:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008a48:	78fa      	ldrb	r2, [r7, #3]
 8008a4a:	6879      	ldr	r1, [r7, #4]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	1a9b      	subs	r3, r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	440b      	add	r3, r1
 8008a56:	3344      	adds	r3, #68	@ 0x44
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d914      	bls.n	8008a88 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008a5e:	78fa      	ldrb	r2, [r7, #3]
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	4613      	mov	r3, r2
 8008a64:	011b      	lsls	r3, r3, #4
 8008a66:	1a9b      	subs	r3, r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	440b      	add	r3, r1
 8008a6c:	3344      	adds	r3, #68	@ 0x44
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008a72:	78fa      	ldrb	r2, [r7, #3]
 8008a74:	6879      	ldr	r1, [r7, #4]
 8008a76:	4613      	mov	r3, r2
 8008a78:	011b      	lsls	r3, r3, #4
 8008a7a:	1a9b      	subs	r3, r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	440b      	add	r3, r1
 8008a80:	334c      	adds	r3, #76	@ 0x4c
 8008a82:	2204      	movs	r2, #4
 8008a84:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008a86:	e022      	b.n	8008ace <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008a88:	78fa      	ldrb	r2, [r7, #3]
 8008a8a:	6879      	ldr	r1, [r7, #4]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	011b      	lsls	r3, r3, #4
 8008a90:	1a9b      	subs	r3, r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	440b      	add	r3, r1
 8008a96:	334c      	adds	r3, #76	@ 0x4c
 8008a98:	2202      	movs	r2, #2
 8008a9a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008ab2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008aba:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008abc:	78fb      	ldrb	r3, [r7, #3]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ac8:	461a      	mov	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008ace:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008ad0:	78fa      	ldrb	r2, [r7, #3]
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	011b      	lsls	r3, r3, #4
 8008ad8:	1a9b      	subs	r3, r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	440b      	add	r3, r1
 8008ade:	334c      	adds	r3, #76	@ 0x4c
 8008ae0:	781a      	ldrb	r2, [r3, #0]
 8008ae2:	78fb      	ldrb	r3, [r7, #3]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f008 fcc2 	bl	8011470 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008aec:	e002      	b.n	8008af4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8008aee:	bf00      	nop
 8008af0:	e000      	b.n	8008af4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8008af2:	bf00      	nop
  }
}
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b08a      	sub	sp, #40	@ 0x28
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	f003 030f 	and.w	r3, r3, #15
 8008b1a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	0c5b      	lsrs	r3, r3, #17
 8008b20:	f003 030f 	and.w	r3, r3, #15
 8008b24:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	091b      	lsrs	r3, r3, #4
 8008b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b2e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d004      	beq.n	8008b40 <HCD_RXQLVL_IRQHandler+0x46>
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2b05      	cmp	r3, #5
 8008b3a:	f000 80b6 	beq.w	8008caa <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008b3e:	e0b7      	b.n	8008cb0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 80b3 	beq.w	8008cae <HCD_RXQLVL_IRQHandler+0x1b4>
 8008b48:	6879      	ldr	r1, [r7, #4]
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	011b      	lsls	r3, r3, #4
 8008b50:	1a9b      	subs	r3, r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	440b      	add	r3, r1
 8008b56:	332c      	adds	r3, #44	@ 0x2c
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 80a7 	beq.w	8008cae <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8008b60:	6879      	ldr	r1, [r7, #4]
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	4613      	mov	r3, r2
 8008b66:	011b      	lsls	r3, r3, #4
 8008b68:	1a9b      	subs	r3, r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	3338      	adds	r3, #56	@ 0x38
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	18d1      	adds	r1, r2, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	011b      	lsls	r3, r3, #4
 8008b7e:	1a9b      	subs	r3, r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4403      	add	r3, r0
 8008b84:	3334      	adds	r3, #52	@ 0x34
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4299      	cmp	r1, r3
 8008b8a:	f200 8083 	bhi.w	8008c94 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6818      	ldr	r0, [r3, #0]
 8008b92:	6879      	ldr	r1, [r7, #4]
 8008b94:	69ba      	ldr	r2, [r7, #24]
 8008b96:	4613      	mov	r3, r2
 8008b98:	011b      	lsls	r3, r3, #4
 8008b9a:	1a9b      	subs	r3, r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	440b      	add	r3, r1
 8008ba0:	332c      	adds	r3, #44	@ 0x2c
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	b292      	uxth	r2, r2
 8008ba8:	4619      	mov	r1, r3
 8008baa:	f004 fd97 	bl	800d6dc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	011b      	lsls	r3, r3, #4
 8008bb6:	1a9b      	subs	r3, r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	440b      	add	r3, r1
 8008bbc:	332c      	adds	r3, #44	@ 0x2c
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	18d1      	adds	r1, r2, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	011b      	lsls	r3, r3, #4
 8008bcc:	1a9b      	subs	r3, r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4403      	add	r3, r0
 8008bd2:	332c      	adds	r3, #44	@ 0x2c
 8008bd4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	1a9b      	subs	r3, r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	440b      	add	r3, r1
 8008be4:	3338      	adds	r3, #56	@ 0x38
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	18d1      	adds	r1, r2, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	011b      	lsls	r3, r3, #4
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4403      	add	r3, r0
 8008bfa:	3338      	adds	r3, #56	@ 0x38
 8008bfc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	0cdb      	lsrs	r3, r3, #19
 8008c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c12:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	69ba      	ldr	r2, [r7, #24]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	011b      	lsls	r3, r3, #4
 8008c1c:	1a9b      	subs	r3, r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	440b      	add	r3, r1
 8008c22:	3328      	adds	r3, #40	@ 0x28
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	461a      	mov	r2, r3
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d13f      	bne.n	8008cae <HCD_RXQLVL_IRQHandler+0x1b4>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d03c      	beq.n	8008cae <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008c4a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c52:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c60:	461a      	mov	r2, r3
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	011b      	lsls	r3, r3, #4
 8008c6e:	1a9b      	subs	r3, r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	440b      	add	r3, r1
 8008c74:	333c      	adds	r3, #60	@ 0x3c
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	f083 0301 	eor.w	r3, r3, #1
 8008c7c:	b2d8      	uxtb	r0, r3
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	4613      	mov	r3, r2
 8008c84:	011b      	lsls	r3, r3, #4
 8008c86:	1a9b      	subs	r3, r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	333c      	adds	r3, #60	@ 0x3c
 8008c8e:	4602      	mov	r2, r0
 8008c90:	701a      	strb	r2, [r3, #0]
      break;
 8008c92:	e00c      	b.n	8008cae <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	1a9b      	subs	r3, r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	440b      	add	r3, r1
 8008ca2:	334c      	adds	r3, #76	@ 0x4c
 8008ca4:	2204      	movs	r2, #4
 8008ca6:	701a      	strb	r2, [r3, #0]
      break;
 8008ca8:	e001      	b.n	8008cae <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8008caa:	bf00      	nop
 8008cac:	e000      	b.n	8008cb0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8008cae:	bf00      	nop
  }
}
 8008cb0:	bf00      	nop
 8008cb2:	3728      	adds	r7, #40	@ 0x28
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008ce4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d10b      	bne.n	8008d08 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d102      	bne.n	8008d00 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f008 fb9c 	bl	8011438 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f043 0302 	orr.w	r3, r3, #2
 8008d06:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f003 0308 	and.w	r3, r3, #8
 8008d0e:	2b08      	cmp	r3, #8
 8008d10:	d132      	bne.n	8008d78 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f043 0308 	orr.w	r3, r3, #8
 8008d18:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f003 0304 	and.w	r3, r3, #4
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	d126      	bne.n	8008d72 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	7a5b      	ldrb	r3, [r3, #9]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d113      	bne.n	8008d54 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008d32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d36:	d106      	bne.n	8008d46 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2102      	movs	r1, #2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f004 fe5c 	bl	800d9fc <USB_InitFSLSPClkSel>
 8008d44:	e011      	b.n	8008d6a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f004 fe55 	bl	800d9fc <USB_InitFSLSPClkSel>
 8008d52:	e00a      	b.n	8008d6a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	79db      	ldrb	r3, [r3, #7]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d106      	bne.n	8008d6a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d62:	461a      	mov	r2, r3
 8008d64:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8008d68:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f008 fb8e 	bl	801148c <HAL_HCD_PortEnabled_Callback>
 8008d70:	e002      	b.n	8008d78 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f008 fb98 	bl	80114a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f003 0320 	and.w	r3, r3, #32
 8008d7e:	2b20      	cmp	r3, #32
 8008d80:	d103      	bne.n	8008d8a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f043 0320 	orr.w	r3, r3, #32
 8008d88:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008d90:	461a      	mov	r2, r3
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	6013      	str	r3, [r2, #0]
}
 8008d96:	bf00      	nop
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e12b      	b.n	800900a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d106      	bne.n	8008dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7f9 fed2 	bl	8002b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2224      	movs	r2, #36	@ 0x24
 8008dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 0201 	bic.w	r2, r2, #1
 8008de2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008e04:	f002 f8ac 	bl	800af60 <HAL_RCC_GetPCLK1Freq>
 8008e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	4a81      	ldr	r2, [pc, #516]	@ (8009014 <HAL_I2C_Init+0x274>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d807      	bhi.n	8008e24 <HAL_I2C_Init+0x84>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4a80      	ldr	r2, [pc, #512]	@ (8009018 <HAL_I2C_Init+0x278>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	bf94      	ite	ls
 8008e1c:	2301      	movls	r3, #1
 8008e1e:	2300      	movhi	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	e006      	b.n	8008e32 <HAL_I2C_Init+0x92>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	4a7d      	ldr	r2, [pc, #500]	@ (800901c <HAL_I2C_Init+0x27c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	bf94      	ite	ls
 8008e2c:	2301      	movls	r3, #1
 8008e2e:	2300      	movhi	r3, #0
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e0e7      	b.n	800900a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	4a78      	ldr	r2, [pc, #480]	@ (8009020 <HAL_I2C_Init+0x280>)
 8008e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e42:	0c9b      	lsrs	r3, r3, #18
 8008e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6a1b      	ldr	r3, [r3, #32]
 8008e60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	4a6a      	ldr	r2, [pc, #424]	@ (8009014 <HAL_I2C_Init+0x274>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d802      	bhi.n	8008e74 <HAL_I2C_Init+0xd4>
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	3301      	adds	r3, #1
 8008e72:	e009      	b.n	8008e88 <HAL_I2C_Init+0xe8>
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008e7a:	fb02 f303 	mul.w	r3, r2, r3
 8008e7e:	4a69      	ldr	r2, [pc, #420]	@ (8009024 <HAL_I2C_Init+0x284>)
 8008e80:	fba2 2303 	umull	r2, r3, r2, r3
 8008e84:	099b      	lsrs	r3, r3, #6
 8008e86:	3301      	adds	r3, #1
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	6812      	ldr	r2, [r2, #0]
 8008e8c:	430b      	orrs	r3, r1
 8008e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008e9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	495c      	ldr	r1, [pc, #368]	@ (8009014 <HAL_I2C_Init+0x274>)
 8008ea4:	428b      	cmp	r3, r1
 8008ea6:	d819      	bhi.n	8008edc <HAL_I2C_Init+0x13c>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	1e59      	subs	r1, r3, #1
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008eb6:	1c59      	adds	r1, r3, #1
 8008eb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008ebc:	400b      	ands	r3, r1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <HAL_I2C_Init+0x138>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	1e59      	subs	r1, r3, #1
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	005b      	lsls	r3, r3, #1
 8008ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ed6:	e051      	b.n	8008f7c <HAL_I2C_Init+0x1dc>
 8008ed8:	2304      	movs	r3, #4
 8008eda:	e04f      	b.n	8008f7c <HAL_I2C_Init+0x1dc>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d111      	bne.n	8008f08 <HAL_I2C_Init+0x168>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	1e58      	subs	r0, r3, #1
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6859      	ldr	r1, [r3, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	005b      	lsls	r3, r3, #1
 8008ef0:	440b      	add	r3, r1
 8008ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	bf0c      	ite	eq
 8008f00:	2301      	moveq	r3, #1
 8008f02:	2300      	movne	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	e012      	b.n	8008f2e <HAL_I2C_Init+0x18e>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	1e58      	subs	r0, r3, #1
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6859      	ldr	r1, [r3, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	440b      	add	r3, r1
 8008f16:	0099      	lsls	r1, r3, #2
 8008f18:	440b      	add	r3, r1
 8008f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f1e:	3301      	adds	r3, #1
 8008f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	bf0c      	ite	eq
 8008f28:	2301      	moveq	r3, #1
 8008f2a:	2300      	movne	r3, #0
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <HAL_I2C_Init+0x196>
 8008f32:	2301      	movs	r3, #1
 8008f34:	e022      	b.n	8008f7c <HAL_I2C_Init+0x1dc>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10e      	bne.n	8008f5c <HAL_I2C_Init+0x1bc>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	1e58      	subs	r0, r3, #1
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6859      	ldr	r1, [r3, #4]
 8008f46:	460b      	mov	r3, r1
 8008f48:	005b      	lsls	r3, r3, #1
 8008f4a:	440b      	add	r3, r1
 8008f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f50:	3301      	adds	r3, #1
 8008f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f5a:	e00f      	b.n	8008f7c <HAL_I2C_Init+0x1dc>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	1e58      	subs	r0, r3, #1
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6859      	ldr	r1, [r3, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	440b      	add	r3, r1
 8008f6a:	0099      	lsls	r1, r3, #2
 8008f6c:	440b      	add	r3, r1
 8008f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f72:	3301      	adds	r3, #1
 8008f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f7c:	6879      	ldr	r1, [r7, #4]
 8008f7e:	6809      	ldr	r1, [r1, #0]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	69da      	ldr	r2, [r3, #28]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	431a      	orrs	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008faa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	6911      	ldr	r1, [r2, #16]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	68d2      	ldr	r2, [r2, #12]
 8008fb6:	4311      	orrs	r1, r2
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	6812      	ldr	r2, [r2, #0]
 8008fbc:	430b      	orrs	r3, r1
 8008fbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	695a      	ldr	r2, [r3, #20]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	431a      	orrs	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	430a      	orrs	r2, r1
 8008fda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0201 	orr.w	r2, r2, #1
 8008fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	000186a0 	.word	0x000186a0
 8009018:	001e847f 	.word	0x001e847f
 800901c:	003d08ff 	.word	0x003d08ff
 8009020:	431bde83 	.word	0x431bde83
 8009024:	10624dd3 	.word	0x10624dd3

08009028 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e021      	b.n	800907e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2224      	movs	r2, #36	@ 0x24
 800903e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f022 0201 	bic.w	r2, r2, #1
 8009050:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7f9 fdf6 	bl	8002c44 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af02      	add	r7, sp, #8
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	4608      	mov	r0, r1
 8009092:	4611      	mov	r1, r2
 8009094:	461a      	mov	r2, r3
 8009096:	4603      	mov	r3, r0
 8009098:	817b      	strh	r3, [r7, #10]
 800909a:	460b      	mov	r3, r1
 800909c:	813b      	strh	r3, [r7, #8]
 800909e:	4613      	mov	r3, r2
 80090a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80090a2:	f7fc f9db 	bl	800545c <HAL_GetTick>
 80090a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b20      	cmp	r3, #32
 80090b2:	f040 80d9 	bne.w	8009268 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	2319      	movs	r3, #25
 80090bc:	2201      	movs	r2, #1
 80090be:	496d      	ldr	r1, [pc, #436]	@ (8009274 <HAL_I2C_Mem_Write+0x1ec>)
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 fc99 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80090cc:	2302      	movs	r3, #2
 80090ce:	e0cc      	b.n	800926a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d101      	bne.n	80090de <HAL_I2C_Mem_Write+0x56>
 80090da:	2302      	movs	r3, #2
 80090dc:	e0c5      	b.n	800926a <HAL_I2C_Mem_Write+0x1e2>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d007      	beq.n	8009104 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0201 	orr.w	r2, r2, #1
 8009102:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009112:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2221      	movs	r2, #33	@ 0x21
 8009118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2240      	movs	r2, #64	@ 0x40
 8009120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6a3a      	ldr	r2, [r7, #32]
 800912e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009134:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4a4d      	ldr	r2, [pc, #308]	@ (8009278 <HAL_I2C_Mem_Write+0x1f0>)
 8009144:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009146:	88f8      	ldrh	r0, [r7, #6]
 8009148:	893a      	ldrh	r2, [r7, #8]
 800914a:	8979      	ldrh	r1, [r7, #10]
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	9301      	str	r3, [sp, #4]
 8009150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	4603      	mov	r3, r0
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 fad0 	bl	80096fc <I2C_RequestMemoryWrite>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d052      	beq.n	8009208 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e081      	b.n	800926a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 fd5e 	bl	8009c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00d      	beq.n	8009192 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917a:	2b04      	cmp	r3, #4
 800917c:	d107      	bne.n	800918e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800918c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e06b      	b.n	800926a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009196:	781a      	ldrb	r2, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a2:	1c5a      	adds	r2, r3, #1
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091ac:	3b01      	subs	r3, #1
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	b29a      	uxth	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	695b      	ldr	r3, [r3, #20]
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	d11b      	bne.n	8009208 <HAL_I2C_Mem_Write+0x180>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d017      	beq.n	8009208 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091dc:	781a      	ldrb	r2, [r3, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091f2:	3b01      	subs	r3, #1
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091fe:	b29b      	uxth	r3, r3
 8009200:	3b01      	subs	r3, #1
 8009202:	b29a      	uxth	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1aa      	bne.n	8009166 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 fd51 	bl	8009cbc <I2C_WaitOnBTFFlagUntilTimeout>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00d      	beq.n	800923c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009224:	2b04      	cmp	r3, #4
 8009226:	d107      	bne.n	8009238 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009236:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e016      	b.n	800926a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800924a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2220      	movs	r2, #32
 8009250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	e000      	b.n	800926a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009268:	2302      	movs	r3, #2
  }
}
 800926a:	4618      	mov	r0, r3
 800926c:	3718      	adds	r7, #24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	00100002 	.word	0x00100002
 8009278:	ffff0000 	.word	0xffff0000

0800927c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08c      	sub	sp, #48	@ 0x30
 8009280:	af02      	add	r7, sp, #8
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	4608      	mov	r0, r1
 8009286:	4611      	mov	r1, r2
 8009288:	461a      	mov	r2, r3
 800928a:	4603      	mov	r3, r0
 800928c:	817b      	strh	r3, [r7, #10]
 800928e:	460b      	mov	r3, r1
 8009290:	813b      	strh	r3, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009296:	f7fc f8e1 	bl	800545c <HAL_GetTick>
 800929a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	f040 8214 	bne.w	80096d2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	2319      	movs	r3, #25
 80092b0:	2201      	movs	r2, #1
 80092b2:	497b      	ldr	r1, [pc, #492]	@ (80094a0 <HAL_I2C_Mem_Read+0x224>)
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 fb9f 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80092c0:	2302      	movs	r3, #2
 80092c2:	e207      	b.n	80096d4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <HAL_I2C_Mem_Read+0x56>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e200      	b.n	80096d4 <HAL_I2C_Mem_Read+0x458>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d007      	beq.n	80092f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f042 0201 	orr.w	r2, r2, #1
 80092f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009306:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2222      	movs	r2, #34	@ 0x22
 800930c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2240      	movs	r2, #64	@ 0x40
 8009314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009322:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009328:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800932e:	b29a      	uxth	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4a5b      	ldr	r2, [pc, #364]	@ (80094a4 <HAL_I2C_Mem_Read+0x228>)
 8009338:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800933a:	88f8      	ldrh	r0, [r7, #6]
 800933c:	893a      	ldrh	r2, [r7, #8]
 800933e:	8979      	ldrh	r1, [r7, #10]
 8009340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	4603      	mov	r3, r0
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 fa6c 	bl	8009828 <I2C_RequestMemoryRead>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e1bc      	b.n	80096d4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800935e:	2b00      	cmp	r3, #0
 8009360:	d113      	bne.n	800938a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009362:	2300      	movs	r3, #0
 8009364:	623b      	str	r3, [r7, #32]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	623b      	str	r3, [r7, #32]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	623b      	str	r3, [r7, #32]
 8009376:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	e190      	b.n	80096ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800938e:	2b01      	cmp	r3, #1
 8009390:	d11b      	bne.n	80093ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093a2:	2300      	movs	r3, #0
 80093a4:	61fb      	str	r3, [r7, #28]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	61fb      	str	r3, [r7, #28]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	61fb      	str	r3, [r7, #28]
 80093b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	e170      	b.n	80096ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d11b      	bne.n	800940a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093f2:	2300      	movs	r3, #0
 80093f4:	61bb      	str	r3, [r7, #24]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	61bb      	str	r3, [r7, #24]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	61bb      	str	r3, [r7, #24]
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	e150      	b.n	80096ac <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800940a:	2300      	movs	r3, #0
 800940c:	617b      	str	r3, [r7, #20]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	617b      	str	r3, [r7, #20]
 800941e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009420:	e144      	b.n	80096ac <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009426:	2b03      	cmp	r3, #3
 8009428:	f200 80f1 	bhi.w	800960e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009430:	2b01      	cmp	r3, #1
 8009432:	d123      	bne.n	800947c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009436:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fc87 	bl	8009d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d001      	beq.n	8009448 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e145      	b.n	80096d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	691a      	ldr	r2, [r3, #16]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009452:	b2d2      	uxtb	r2, r2
 8009454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009464:	3b01      	subs	r3, #1
 8009466:	b29a      	uxth	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009470:	b29b      	uxth	r3, r3
 8009472:	3b01      	subs	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800947a:	e117      	b.n	80096ac <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009480:	2b02      	cmp	r3, #2
 8009482:	d14e      	bne.n	8009522 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948a:	2200      	movs	r2, #0
 800948c:	4906      	ldr	r1, [pc, #24]	@ (80094a8 <HAL_I2C_Mem_Read+0x22c>)
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 fab2 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d008      	beq.n	80094ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e11a      	b.n	80096d4 <HAL_I2C_Mem_Read+0x458>
 800949e:	bf00      	nop
 80094a0:	00100002 	.word	0x00100002
 80094a4:	ffff0000 	.word	0xffff0000
 80094a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	691a      	ldr	r2, [r3, #16]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c6:	b2d2      	uxtb	r2, r2
 80094c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094d8:	3b01      	subs	r3, #1
 80094da:	b29a      	uxth	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	3b01      	subs	r3, #1
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	691a      	ldr	r2, [r3, #16]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f8:	b2d2      	uxtb	r2, r2
 80094fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800950a:	3b01      	subs	r3, #1
 800950c:	b29a      	uxth	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009516:	b29b      	uxth	r3, r3
 8009518:	3b01      	subs	r3, #1
 800951a:	b29a      	uxth	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009520:	e0c4      	b.n	80096ac <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009528:	2200      	movs	r2, #0
 800952a:	496c      	ldr	r1, [pc, #432]	@ (80096dc <HAL_I2C_Mem_Read+0x460>)
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 fa63 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e0cb      	b.n	80096d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800954a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009556:	b2d2      	uxtb	r2, r2
 8009558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009568:	3b01      	subs	r3, #1
 800956a:	b29a      	uxth	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009574:	b29b      	uxth	r3, r3
 8009576:	3b01      	subs	r3, #1
 8009578:	b29a      	uxth	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009584:	2200      	movs	r2, #0
 8009586:	4955      	ldr	r1, [pc, #340]	@ (80096dc <HAL_I2C_Mem_Read+0x460>)
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fa35 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e09d      	b.n	80096d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	691a      	ldr	r2, [r3, #16]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b2:	b2d2      	uxtb	r2, r2
 80095b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095c4:	3b01      	subs	r3, #1
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	3b01      	subs	r3, #1
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e4:	b2d2      	uxtb	r2, r2
 80095e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ec:	1c5a      	adds	r2, r3, #1
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095f6:	3b01      	subs	r3, #1
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009602:	b29b      	uxth	r3, r3
 8009604:	3b01      	subs	r3, #1
 8009606:	b29a      	uxth	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800960c:	e04e      	b.n	80096ac <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800960e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009610:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 fb9a 	bl	8009d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e058      	b.n	80096d4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	691a      	ldr	r2, [r3, #16]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800962c:	b2d2      	uxtb	r2, r2
 800962e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800963e:	3b01      	subs	r3, #1
 8009640:	b29a      	uxth	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800964a:	b29b      	uxth	r3, r3
 800964c:	3b01      	subs	r3, #1
 800964e:	b29a      	uxth	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	f003 0304 	and.w	r3, r3, #4
 800965e:	2b04      	cmp	r3, #4
 8009660:	d124      	bne.n	80096ac <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009666:	2b03      	cmp	r3, #3
 8009668:	d107      	bne.n	800967a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009678:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	691a      	ldr	r2, [r3, #16]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009684:	b2d2      	uxtb	r2, r2
 8009686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968c:	1c5a      	adds	r2, r3, #1
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009696:	3b01      	subs	r3, #1
 8009698:	b29a      	uxth	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	3b01      	subs	r3, #1
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f47f aeb6 	bne.w	8009422 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	e000      	b.n	80096d4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80096d2:	2302      	movs	r3, #2
  }
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3728      	adds	r7, #40	@ 0x28
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	00010004 	.word	0x00010004

080096e0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096ee:	b2db      	uxtb	r3, r3
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af02      	add	r7, sp, #8
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	4608      	mov	r0, r1
 8009706:	4611      	mov	r1, r2
 8009708:	461a      	mov	r2, r3
 800970a:	4603      	mov	r3, r0
 800970c:	817b      	strh	r3, [r7, #10]
 800970e:	460b      	mov	r3, r1
 8009710:	813b      	strh	r3, [r7, #8]
 8009712:	4613      	mov	r3, r2
 8009714:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009724:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	2200      	movs	r2, #0
 800972e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 f960 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00d      	beq.n	800975a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800974c:	d103      	bne.n	8009756 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009754:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e05f      	b.n	800981a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800975a:	897b      	ldrh	r3, [r7, #10]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	461a      	mov	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009768:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800976a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976c:	6a3a      	ldr	r2, [r7, #32]
 800976e:	492d      	ldr	r1, [pc, #180]	@ (8009824 <I2C_RequestMemoryWrite+0x128>)
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 f9bb 	bl	8009aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e04c      	b.n	800981a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009780:	2300      	movs	r3, #0
 8009782:	617b      	str	r3, [r7, #20]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009798:	6a39      	ldr	r1, [r7, #32]
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 fa46 	bl	8009c2c <I2C_WaitOnTXEFlagUntilTimeout>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00d      	beq.n	80097c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	d107      	bne.n	80097be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e02b      	b.n	800981a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80097c2:	88fb      	ldrh	r3, [r7, #6]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d105      	bne.n	80097d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80097c8:	893b      	ldrh	r3, [r7, #8]
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	611a      	str	r2, [r3, #16]
 80097d2:	e021      	b.n	8009818 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80097d4:	893b      	ldrh	r3, [r7, #8]
 80097d6:	0a1b      	lsrs	r3, r3, #8
 80097d8:	b29b      	uxth	r3, r3
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097e4:	6a39      	ldr	r1, [r7, #32]
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 fa20 	bl	8009c2c <I2C_WaitOnTXEFlagUntilTimeout>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00d      	beq.n	800980e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097f6:	2b04      	cmp	r3, #4
 80097f8:	d107      	bne.n	800980a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009808:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e005      	b.n	800981a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800980e:	893b      	ldrh	r3, [r7, #8]
 8009810:	b2da      	uxtb	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	00010002 	.word	0x00010002

08009828 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af02      	add	r7, sp, #8
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	4608      	mov	r0, r1
 8009832:	4611      	mov	r1, r2
 8009834:	461a      	mov	r2, r3
 8009836:	4603      	mov	r3, r0
 8009838:	817b      	strh	r3, [r7, #10]
 800983a:	460b      	mov	r3, r1
 800983c:	813b      	strh	r3, [r7, #8]
 800983e:	4613      	mov	r3, r2
 8009840:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009850:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009860:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	2200      	movs	r2, #0
 800986a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 f8c2 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00d      	beq.n	8009896 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009888:	d103      	bne.n	8009892 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009890:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e0aa      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009896:	897b      	ldrh	r3, [r7, #10]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	461a      	mov	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80098a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a8:	6a3a      	ldr	r2, [r7, #32]
 80098aa:	4952      	ldr	r1, [pc, #328]	@ (80099f4 <I2C_RequestMemoryRead+0x1cc>)
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 f91d 	bl	8009aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e097      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098bc:	2300      	movs	r3, #0
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098d4:	6a39      	ldr	r1, [r7, #32]
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 f9a8 	bl	8009c2c <I2C_WaitOnTXEFlagUntilTimeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00d      	beq.n	80098fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e6:	2b04      	cmp	r3, #4
 80098e8:	d107      	bne.n	80098fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e076      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098fe:	88fb      	ldrh	r3, [r7, #6]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d105      	bne.n	8009910 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009904:	893b      	ldrh	r3, [r7, #8]
 8009906:	b2da      	uxtb	r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	611a      	str	r2, [r3, #16]
 800990e:	e021      	b.n	8009954 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009910:	893b      	ldrh	r3, [r7, #8]
 8009912:	0a1b      	lsrs	r3, r3, #8
 8009914:	b29b      	uxth	r3, r3
 8009916:	b2da      	uxtb	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800991e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009920:	6a39      	ldr	r1, [r7, #32]
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 f982 	bl	8009c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00d      	beq.n	800994a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009932:	2b04      	cmp	r3, #4
 8009934:	d107      	bne.n	8009946 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009944:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e050      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800994a:	893b      	ldrh	r3, [r7, #8]
 800994c:	b2da      	uxtb	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009956:	6a39      	ldr	r1, [r7, #32]
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 f967 	bl	8009c2c <I2C_WaitOnTXEFlagUntilTimeout>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00d      	beq.n	8009980 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009968:	2b04      	cmp	r3, #4
 800996a:	d107      	bne.n	800997c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800997a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e035      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800998e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	2200      	movs	r2, #0
 8009998:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f82b 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00d      	beq.n	80099c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099b6:	d103      	bne.n	80099c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e013      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80099c4:	897b      	ldrh	r3, [r7, #10]
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	f043 0301 	orr.w	r3, r3, #1
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d6:	6a3a      	ldr	r2, [r7, #32]
 80099d8:	4906      	ldr	r1, [pc, #24]	@ (80099f4 <I2C_RequestMemoryRead+0x1cc>)
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 f886 	bl	8009aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e000      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	00010002 	.word	0x00010002

080099f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	603b      	str	r3, [r7, #0]
 8009a04:	4613      	mov	r3, r2
 8009a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a08:	e048      	b.n	8009a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a10:	d044      	beq.n	8009a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a12:	f7fb fd23 	bl	800545c <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d302      	bcc.n	8009a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d139      	bne.n	8009a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	0c1b      	lsrs	r3, r3, #16
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d10d      	bne.n	8009a4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	43da      	mvns	r2, r3
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	bf0c      	ite	eq
 8009a44:	2301      	moveq	r3, #1
 8009a46:	2300      	movne	r3, #0
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	e00c      	b.n	8009a68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	43da      	mvns	r2, r3
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	4013      	ands	r3, r2
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	bf0c      	ite	eq
 8009a60:	2301      	moveq	r3, #1
 8009a62:	2300      	movne	r3, #0
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	461a      	mov	r2, r3
 8009a68:	79fb      	ldrb	r3, [r7, #7]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d116      	bne.n	8009a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2220      	movs	r2, #32
 8009a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a88:	f043 0220 	orr.w	r2, r3, #32
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e023      	b.n	8009ae4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	0c1b      	lsrs	r3, r3, #16
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d10d      	bne.n	8009ac2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	43da      	mvns	r2, r3
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	bf0c      	ite	eq
 8009ab8:	2301      	moveq	r3, #1
 8009aba:	2300      	movne	r3, #0
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	461a      	mov	r2, r3
 8009ac0:	e00c      	b.n	8009adc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	43da      	mvns	r2, r3
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	4013      	ands	r3, r2
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	bf0c      	ite	eq
 8009ad4:	2301      	moveq	r3, #1
 8009ad6:	2300      	movne	r3, #0
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	461a      	mov	r2, r3
 8009adc:	79fb      	ldrb	r3, [r7, #7]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d093      	beq.n	8009a0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009afa:	e071      	b.n	8009be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b0a:	d123      	bne.n	8009b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009b24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2220      	movs	r2, #32
 8009b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b40:	f043 0204 	orr.w	r2, r3, #4
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e067      	b.n	8009c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5a:	d041      	beq.n	8009be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b5c:	f7fb fc7e 	bl	800545c <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d302      	bcc.n	8009b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d136      	bne.n	8009be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	0c1b      	lsrs	r3, r3, #16
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d10c      	bne.n	8009b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	43da      	mvns	r2, r3
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	4013      	ands	r3, r2
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	bf14      	ite	ne
 8009b8e:	2301      	movne	r3, #1
 8009b90:	2300      	moveq	r3, #0
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	e00b      	b.n	8009bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	43da      	mvns	r2, r3
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	bf14      	ite	ne
 8009ba8:	2301      	movne	r3, #1
 8009baa:	2300      	moveq	r3, #0
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d016      	beq.n	8009be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bcc:	f043 0220 	orr.w	r2, r3, #32
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e021      	b.n	8009c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	0c1b      	lsrs	r3, r3, #16
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d10c      	bne.n	8009c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	43da      	mvns	r2, r3
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	bf14      	ite	ne
 8009bfc:	2301      	movne	r3, #1
 8009bfe:	2300      	moveq	r3, #0
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	e00b      	b.n	8009c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	43da      	mvns	r2, r3
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	4013      	ands	r3, r2
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	bf14      	ite	ne
 8009c16:	2301      	movne	r3, #1
 8009c18:	2300      	moveq	r3, #0
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f47f af6d 	bne.w	8009afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c38:	e034      	b.n	8009ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 f8e3 	bl	8009e06 <I2C_IsAcknowledgeFailed>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e034      	b.n	8009cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c50:	d028      	beq.n	8009ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c52:	f7fb fc03 	bl	800545c <HAL_GetTick>
 8009c56:	4602      	mov	r2, r0
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d302      	bcc.n	8009c68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d11d      	bne.n	8009ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c72:	2b80      	cmp	r3, #128	@ 0x80
 8009c74:	d016      	beq.n	8009ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2220      	movs	r2, #32
 8009c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c90:	f043 0220 	orr.w	r2, r3, #32
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e007      	b.n	8009cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cae:	2b80      	cmp	r3, #128	@ 0x80
 8009cb0:	d1c3      	bne.n	8009c3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009cc8:	e034      	b.n	8009d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f000 f89b 	bl	8009e06 <I2C_IsAcknowledgeFailed>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e034      	b.n	8009d44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce0:	d028      	beq.n	8009d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ce2:	f7fb fbbb 	bl	800545c <HAL_GetTick>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d302      	bcc.n	8009cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d11d      	bne.n	8009d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	f003 0304 	and.w	r3, r3, #4
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	d016      	beq.n	8009d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2220      	movs	r2, #32
 8009d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d20:	f043 0220 	orr.w	r2, r3, #32
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e007      	b.n	8009d44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	f003 0304 	and.w	r3, r3, #4
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	d1c3      	bne.n	8009cca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d58:	e049      	b.n	8009dee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	695b      	ldr	r3, [r3, #20]
 8009d60:	f003 0310 	and.w	r3, r3, #16
 8009d64:	2b10      	cmp	r3, #16
 8009d66:	d119      	bne.n	8009d9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f06f 0210 	mvn.w	r2, #16
 8009d70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e030      	b.n	8009dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d9c:	f7fb fb5e 	bl	800545c <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d302      	bcc.n	8009db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d11d      	bne.n	8009dee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dbc:	2b40      	cmp	r3, #64	@ 0x40
 8009dbe:	d016      	beq.n	8009dee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dda:	f043 0220 	orr.w	r2, r3, #32
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e007      	b.n	8009dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009df8:	2b40      	cmp	r3, #64	@ 0x40
 8009dfa:	d1ae      	bne.n	8009d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009e06:	b480      	push	{r7}
 8009e08:	b083      	sub	sp, #12
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e1c:	d11b      	bne.n	8009e56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009e26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2220      	movs	r2, #32
 8009e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e42:	f043 0204 	orr.w	r2, r3, #4
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b20      	cmp	r3, #32
 8009e78:	d129      	bne.n	8009ece <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2224      	movs	r2, #36	@ 0x24
 8009e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f022 0201 	bic.w	r2, r2, #1
 8009e90:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f022 0210 	bic.w	r2, r2, #16
 8009ea0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f042 0201 	orr.w	r2, r2, #1
 8009ec0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2220      	movs	r2, #32
 8009ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e000      	b.n	8009ed0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009ece:	2302      	movs	r3, #2
  }
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b20      	cmp	r3, #32
 8009ef4:	d12a      	bne.n	8009f4c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2224      	movs	r2, #36	@ 0x24
 8009efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f022 0201 	bic.w	r2, r2, #1
 8009f0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f14:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009f16:	89fb      	ldrh	r3, [r7, #14]
 8009f18:	f023 030f 	bic.w	r3, r3, #15
 8009f1c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	89fb      	ldrh	r3, [r7, #14]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	89fa      	ldrh	r2, [r7, #14]
 8009f2e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f042 0201 	orr.w	r2, r2, #1
 8009f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2220      	movs	r2, #32
 8009f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	e000      	b.n	8009f4e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009f4c:	2302      	movs	r3, #2
  }
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
	...

08009f5c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e0bf      	b.n	800a0ee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d106      	bne.n	8009f88 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7f8 fe84 	bl	8002c90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	699a      	ldr	r2, [r3, #24]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009f9e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6999      	ldr	r1, [r3, #24]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009fb4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6899      	ldr	r1, [r3, #8]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	4b4a      	ldr	r3, [pc, #296]	@ (800a0f8 <HAL_LTDC_Init+0x19c>)
 8009fd0:	400b      	ands	r3, r1
 8009fd2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	695b      	ldr	r3, [r3, #20]
 8009fd8:	041b      	lsls	r3, r3, #16
 8009fda:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6899      	ldr	r1, [r3, #8]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	699a      	ldr	r2, [r3, #24]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	431a      	orrs	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68d9      	ldr	r1, [r3, #12]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	4b3e      	ldr	r3, [pc, #248]	@ (800a0f8 <HAL_LTDC_Init+0x19c>)
 8009ffe:	400b      	ands	r3, r1
 800a000:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	041b      	lsls	r3, r3, #16
 800a008:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68d9      	ldr	r1, [r3, #12]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a1a      	ldr	r2, [r3, #32]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	431a      	orrs	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	430a      	orrs	r2, r1
 800a01e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6919      	ldr	r1, [r3, #16]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	4b33      	ldr	r3, [pc, #204]	@ (800a0f8 <HAL_LTDC_Init+0x19c>)
 800a02c:	400b      	ands	r3, r1
 800a02e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a034:	041b      	lsls	r3, r3, #16
 800a036:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	6919      	ldr	r1, [r3, #16]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	431a      	orrs	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	430a      	orrs	r2, r1
 800a04c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6959      	ldr	r1, [r3, #20]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	4b27      	ldr	r3, [pc, #156]	@ (800a0f8 <HAL_LTDC_Init+0x19c>)
 800a05a:	400b      	ands	r3, r1
 800a05c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a062:	041b      	lsls	r3, r3, #16
 800a064:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	6959      	ldr	r1, [r3, #20]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	431a      	orrs	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a082:	021b      	lsls	r3, r3, #8
 800a084:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a08c:	041b      	lsls	r3, r3, #16
 800a08e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a09e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	430a      	orrs	r2, r1
 800a0ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0206 	orr.w	r2, r2, #6
 800a0ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	699a      	ldr	r2, [r3, #24]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f042 0201 	orr.w	r2, r2, #1
 800a0da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	f000f800 	.word	0xf000f800

0800a0fc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a10a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a112:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d023      	beq.n	800a166 <HAL_LTDC_IRQHandler+0x6a>
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	f003 0304 	and.w	r3, r3, #4
 800a124:	2b00      	cmp	r3, #0
 800a126:	d01e      	beq.n	800a166 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f022 0204 	bic.w	r2, r2, #4
 800a136:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2204      	movs	r2, #4
 800a13e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a146:	f043 0201 	orr.w	r2, r3, #1
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2204      	movs	r2, #4
 800a154:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f86f 	bl	800a244 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f003 0302 	and.w	r3, r3, #2
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d023      	beq.n	800a1b8 <HAL_LTDC_IRQHandler+0xbc>
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	f003 0302 	and.w	r3, r3, #2
 800a176:	2b00      	cmp	r3, #0
 800a178:	d01e      	beq.n	800a1b8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 0202 	bic.w	r2, r2, #2
 800a188:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2202      	movs	r2, #2
 800a190:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a198:	f043 0202 	orr.w	r2, r3, #2
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2204      	movs	r2, #4
 800a1a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f846 	bl	800a244 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f003 0301 	and.w	r3, r3, #1
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d01b      	beq.n	800a1fa <HAL_LTDC_IRQHandler+0xfe>
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d016      	beq.n	800a1fa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f022 0201 	bic.w	r2, r2, #1
 800a1da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f82f 	bl	800a258 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f003 0308 	and.w	r3, r3, #8
 800a200:	2b00      	cmp	r3, #0
 800a202:	d01b      	beq.n	800a23c <HAL_LTDC_IRQHandler+0x140>
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	f003 0308 	and.w	r3, r3, #8
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d016      	beq.n	800a23c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f022 0208 	bic.w	r2, r2, #8
 800a21c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2208      	movs	r2, #8
 800a224:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f818 	bl	800a26c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a23c:	bf00      	nop
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a280:	b5b0      	push	{r4, r5, r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a292:	2b01      	cmp	r3, #1
 800a294:	d101      	bne.n	800a29a <HAL_LTDC_ConfigLayer+0x1a>
 800a296:	2302      	movs	r3, #2
 800a298:	e02c      	b.n	800a2f4 <HAL_LTDC_ConfigLayer+0x74>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2202      	movs	r2, #2
 800a2a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2134      	movs	r1, #52	@ 0x34
 800a2b0:	fb01 f303 	mul.w	r3, r1, r3
 800a2b4:	4413      	add	r3, r2
 800a2b6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	4614      	mov	r4, r2
 800a2be:	461d      	mov	r5, r3
 800a2c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2cc:	682b      	ldr	r3, [r5, #0]
 800a2ce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	68b9      	ldr	r1, [r7, #8]
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f000 f83b 	bl	800a350 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bdb0      	pop	{r4, r5, r7, pc}

0800a2fc <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d101      	bne.n	800a312 <HAL_LTDC_EnableDither+0x16>
 800a30e:	2302      	movs	r3, #2
 800a310:	e016      	b.n	800a340 <HAL_LTDC_EnableDither+0x44>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2202      	movs	r2, #2
 800a31e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800a322:	4b0a      	ldr	r3, [pc, #40]	@ (800a34c <HAL_LTDC_EnableDither+0x50>)
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	4a09      	ldr	r2, [pc, #36]	@ (800a34c <HAL_LTDC_EnableDither+0x50>)
 800a328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a32c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	40016800 	.word	0x40016800

0800a350 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a350:	b480      	push	{r7}
 800a352:	b089      	sub	sp, #36	@ 0x24
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	0c1b      	lsrs	r3, r3, #16
 800a368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a36c:	4413      	add	r3, r2
 800a36e:	041b      	lsls	r3, r3, #16
 800a370:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	01db      	lsls	r3, r3, #7
 800a37c:	4413      	add	r3, r2
 800a37e:	3384      	adds	r3, #132	@ 0x84
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	6812      	ldr	r2, [r2, #0]
 800a386:	4611      	mov	r1, r2
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	01d2      	lsls	r2, r2, #7
 800a38c:	440a      	add	r2, r1
 800a38e:	3284      	adds	r2, #132	@ 0x84
 800a390:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a394:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	0c1b      	lsrs	r3, r3, #16
 800a3a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a3a6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a3a8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	01db      	lsls	r3, r3, #7
 800a3b4:	440b      	add	r3, r1
 800a3b6:	3384      	adds	r3, #132	@ 0x84
 800a3b8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a3be:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	68da      	ldr	r2, [r3, #12]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3ce:	4413      	add	r3, r2
 800a3d0:	041b      	lsls	r3, r3, #16
 800a3d2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	01db      	lsls	r3, r3, #7
 800a3de:	4413      	add	r3, r2
 800a3e0:	3384      	adds	r3, #132	@ 0x84
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	6812      	ldr	r2, [r2, #0]
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	01d2      	lsls	r2, r2, #7
 800a3ee:	440a      	add	r2, r1
 800a3f0:	3284      	adds	r2, #132	@ 0x84
 800a3f2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a3f6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	689a      	ldr	r2, [r3, #8]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a406:	4413      	add	r3, r2
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4619      	mov	r1, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	01db      	lsls	r3, r3, #7
 800a414:	440b      	add	r3, r1
 800a416:	3384      	adds	r3, #132	@ 0x84
 800a418:	4619      	mov	r1, r3
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	461a      	mov	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	01db      	lsls	r3, r3, #7
 800a42a:	4413      	add	r3, r2
 800a42c:	3384      	adds	r3, #132	@ 0x84
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	6812      	ldr	r2, [r2, #0]
 800a434:	4611      	mov	r1, r2
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	01d2      	lsls	r2, r2, #7
 800a43a:	440a      	add	r2, r1
 800a43c:	3284      	adds	r2, #132	@ 0x84
 800a43e:	f023 0307 	bic.w	r3, r3, #7
 800a442:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	461a      	mov	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	01db      	lsls	r3, r3, #7
 800a44e:	4413      	add	r3, r2
 800a450:	3384      	adds	r3, #132	@ 0x84
 800a452:	461a      	mov	r2, r3
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a460:	021b      	lsls	r3, r3, #8
 800a462:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a46a:	041b      	lsls	r3, r3, #16
 800a46c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	061b      	lsls	r3, r3, #24
 800a474:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	01db      	lsls	r3, r3, #7
 800a480:	4413      	add	r3, r2
 800a482:	3384      	adds	r3, #132	@ 0x84
 800a484:	699b      	ldr	r3, [r3, #24]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	01db      	lsls	r3, r3, #7
 800a490:	4413      	add	r3, r2
 800a492:	3384      	adds	r3, #132	@ 0x84
 800a494:	461a      	mov	r2, r3
 800a496:	2300      	movs	r3, #0
 800a498:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	431a      	orrs	r2, r3
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	01db      	lsls	r3, r3, #7
 800a4b4:	440b      	add	r3, r1
 800a4b6:	3384      	adds	r3, #132	@ 0x84
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	01db      	lsls	r3, r3, #7
 800a4ca:	4413      	add	r3, r2
 800a4cc:	3384      	adds	r3, #132	@ 0x84
 800a4ce:	695b      	ldr	r3, [r3, #20]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	6812      	ldr	r2, [r2, #0]
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	01d2      	lsls	r2, r2, #7
 800a4da:	440a      	add	r2, r1
 800a4dc:	3284      	adds	r2, #132	@ 0x84
 800a4de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a4e2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	01db      	lsls	r3, r3, #7
 800a4ee:	4413      	add	r3, r2
 800a4f0:	3384      	adds	r3, #132	@ 0x84
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	695b      	ldr	r3, [r3, #20]
 800a4f8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	01db      	lsls	r3, r3, #7
 800a504:	4413      	add	r3, r2
 800a506:	3384      	adds	r3, #132	@ 0x84
 800a508:	69db      	ldr	r3, [r3, #28]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	6812      	ldr	r2, [r2, #0]
 800a50e:	4611      	mov	r1, r2
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	01d2      	lsls	r2, r2, #7
 800a514:	440a      	add	r2, r1
 800a516:	3284      	adds	r2, #132	@ 0x84
 800a518:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800a51c:	f023 0307 	bic.w	r3, r3, #7
 800a520:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	69da      	ldr	r2, [r3, #28]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	68f9      	ldr	r1, [r7, #12]
 800a52c:	6809      	ldr	r1, [r1, #0]
 800a52e:	4608      	mov	r0, r1
 800a530:	6879      	ldr	r1, [r7, #4]
 800a532:	01c9      	lsls	r1, r1, #7
 800a534:	4401      	add	r1, r0
 800a536:	3184      	adds	r1, #132	@ 0x84
 800a538:	4313      	orrs	r3, r2
 800a53a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	461a      	mov	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	01db      	lsls	r3, r3, #7
 800a546:	4413      	add	r3, r2
 800a548:	3384      	adds	r3, #132	@ 0x84
 800a54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	01db      	lsls	r3, r3, #7
 800a556:	4413      	add	r3, r2
 800a558:	3384      	adds	r3, #132	@ 0x84
 800a55a:	461a      	mov	r2, r3
 800a55c:	2300      	movs	r3, #0
 800a55e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	461a      	mov	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	01db      	lsls	r3, r3, #7
 800a56a:	4413      	add	r3, r2
 800a56c:	3384      	adds	r3, #132	@ 0x84
 800a56e:	461a      	mov	r2, r3
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a574:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d102      	bne.n	800a584 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800a57e:	2304      	movs	r3, #4
 800a580:	61fb      	str	r3, [r7, #28]
 800a582:	e01b      	b.n	800a5bc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d102      	bne.n	800a592 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800a58c:	2303      	movs	r3, #3
 800a58e:	61fb      	str	r3, [r7, #28]
 800a590:	e014      	b.n	800a5bc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	2b04      	cmp	r3, #4
 800a598:	d00b      	beq.n	800a5b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d007      	beq.n	800a5b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	d003      	beq.n	800a5b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a5ae:	2b07      	cmp	r3, #7
 800a5b0:	d102      	bne.n	800a5b8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800a5b2:	2302      	movs	r3, #2
 800a5b4:	61fb      	str	r3, [r7, #28]
 800a5b6:	e001      	b.n	800a5bc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	01db      	lsls	r3, r3, #7
 800a5c6:	4413      	add	r3, r2
 800a5c8:	3384      	adds	r3, #132	@ 0x84
 800a5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	6812      	ldr	r2, [r2, #0]
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	01d2      	lsls	r2, r2, #7
 800a5d6:	440a      	add	r2, r1
 800a5d8:	3284      	adds	r2, #132	@ 0x84
 800a5da:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a5de:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e4:	69fa      	ldr	r2, [r7, #28]
 800a5e6:	fb02 f303 	mul.w	r3, r2, r3
 800a5ea:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	6859      	ldr	r1, [r3, #4]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	1acb      	subs	r3, r1, r3
 800a5f6:	69f9      	ldr	r1, [r7, #28]
 800a5f8:	fb01 f303 	mul.w	r3, r1, r3
 800a5fc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a5fe:	68f9      	ldr	r1, [r7, #12]
 800a600:	6809      	ldr	r1, [r1, #0]
 800a602:	4608      	mov	r0, r1
 800a604:	6879      	ldr	r1, [r7, #4]
 800a606:	01c9      	lsls	r1, r1, #7
 800a608:	4401      	add	r1, r0
 800a60a:	3184      	adds	r1, #132	@ 0x84
 800a60c:	4313      	orrs	r3, r2
 800a60e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	461a      	mov	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	01db      	lsls	r3, r3, #7
 800a61a:	4413      	add	r3, r2
 800a61c:	3384      	adds	r3, #132	@ 0x84
 800a61e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	6812      	ldr	r2, [r2, #0]
 800a624:	4611      	mov	r1, r2
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	01d2      	lsls	r2, r2, #7
 800a62a:	440a      	add	r2, r1
 800a62c:	3284      	adds	r2, #132	@ 0x84
 800a62e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a632:	f023 0307 	bic.w	r3, r3, #7
 800a636:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	461a      	mov	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	01db      	lsls	r3, r3, #7
 800a642:	4413      	add	r3, r2
 800a644:	3384      	adds	r3, #132	@ 0x84
 800a646:	461a      	mov	r2, r3
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a64c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	01db      	lsls	r3, r3, #7
 800a658:	4413      	add	r3, r2
 800a65a:	3384      	adds	r3, #132	@ 0x84
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	6812      	ldr	r2, [r2, #0]
 800a662:	4611      	mov	r1, r2
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	01d2      	lsls	r2, r2, #7
 800a668:	440a      	add	r2, r1
 800a66a:	3284      	adds	r2, #132	@ 0x84
 800a66c:	f043 0301 	orr.w	r3, r3, #1
 800a670:	6013      	str	r3, [r2, #0]
}
 800a672:	bf00      	nop
 800a674:	3724      	adds	r7, #36	@ 0x24
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
	...

0800a680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e267      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d075      	beq.n	800a78a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a69e:	4b88      	ldr	r3, [pc, #544]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f003 030c 	and.w	r3, r3, #12
 800a6a6:	2b04      	cmp	r3, #4
 800a6a8:	d00c      	beq.n	800a6c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a6aa:	4b85      	ldr	r3, [pc, #532]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a6b2:	2b08      	cmp	r3, #8
 800a6b4:	d112      	bne.n	800a6dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a6b6:	4b82      	ldr	r3, [pc, #520]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6c2:	d10b      	bne.n	800a6dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6c4:	4b7e      	ldr	r3, [pc, #504]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d05b      	beq.n	800a788 <HAL_RCC_OscConfig+0x108>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d157      	bne.n	800a788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e242      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6e4:	d106      	bne.n	800a6f4 <HAL_RCC_OscConfig+0x74>
 800a6e6:	4b76      	ldr	r3, [pc, #472]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a75      	ldr	r2, [pc, #468]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a6ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6f0:	6013      	str	r3, [r2, #0]
 800a6f2:	e01d      	b.n	800a730 <HAL_RCC_OscConfig+0xb0>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6fc:	d10c      	bne.n	800a718 <HAL_RCC_OscConfig+0x98>
 800a6fe:	4b70      	ldr	r3, [pc, #448]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a6f      	ldr	r2, [pc, #444]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a704:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	4b6d      	ldr	r3, [pc, #436]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a6c      	ldr	r2, [pc, #432]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	e00b      	b.n	800a730 <HAL_RCC_OscConfig+0xb0>
 800a718:	4b69      	ldr	r3, [pc, #420]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a68      	ldr	r2, [pc, #416]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a71e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	4b66      	ldr	r3, [pc, #408]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a65      	ldr	r2, [pc, #404]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a72a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a72e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d013      	beq.n	800a760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a738:	f7fa fe90 	bl	800545c <HAL_GetTick>
 800a73c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a73e:	e008      	b.n	800a752 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a740:	f7fa fe8c 	bl	800545c <HAL_GetTick>
 800a744:	4602      	mov	r2, r0
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	2b64      	cmp	r3, #100	@ 0x64
 800a74c:	d901      	bls.n	800a752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a74e:	2303      	movs	r3, #3
 800a750:	e207      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a752:	4b5b      	ldr	r3, [pc, #364]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d0f0      	beq.n	800a740 <HAL_RCC_OscConfig+0xc0>
 800a75e:	e014      	b.n	800a78a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a760:	f7fa fe7c 	bl	800545c <HAL_GetTick>
 800a764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a766:	e008      	b.n	800a77a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a768:	f7fa fe78 	bl	800545c <HAL_GetTick>
 800a76c:	4602      	mov	r2, r0
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	2b64      	cmp	r3, #100	@ 0x64
 800a774:	d901      	bls.n	800a77a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a776:	2303      	movs	r3, #3
 800a778:	e1f3      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a77a:	4b51      	ldr	r3, [pc, #324]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1f0      	bne.n	800a768 <HAL_RCC_OscConfig+0xe8>
 800a786:	e000      	b.n	800a78a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0302 	and.w	r3, r3, #2
 800a792:	2b00      	cmp	r3, #0
 800a794:	d063      	beq.n	800a85e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a796:	4b4a      	ldr	r3, [pc, #296]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	f003 030c 	and.w	r3, r3, #12
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00b      	beq.n	800a7ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a7a2:	4b47      	ldr	r3, [pc, #284]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a7aa:	2b08      	cmp	r3, #8
 800a7ac:	d11c      	bne.n	800a7e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a7ae:	4b44      	ldr	r3, [pc, #272]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d116      	bne.n	800a7e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7ba:	4b41      	ldr	r3, [pc, #260]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 0302 	and.w	r3, r3, #2
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d005      	beq.n	800a7d2 <HAL_RCC_OscConfig+0x152>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d001      	beq.n	800a7d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e1c7      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7d2:	4b3b      	ldr	r3, [pc, #236]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	4937      	ldr	r1, [pc, #220]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7e6:	e03a      	b.n	800a85e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d020      	beq.n	800a832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a7f0:	4b34      	ldr	r3, [pc, #208]	@ (800a8c4 <HAL_RCC_OscConfig+0x244>)
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7f6:	f7fa fe31 	bl	800545c <HAL_GetTick>
 800a7fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7fc:	e008      	b.n	800a810 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7fe:	f7fa fe2d 	bl	800545c <HAL_GetTick>
 800a802:	4602      	mov	r2, r0
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d901      	bls.n	800a810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e1a8      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a810:	4b2b      	ldr	r3, [pc, #172]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f003 0302 	and.w	r3, r3, #2
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d0f0      	beq.n	800a7fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a81c:	4b28      	ldr	r3, [pc, #160]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	00db      	lsls	r3, r3, #3
 800a82a:	4925      	ldr	r1, [pc, #148]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a82c:	4313      	orrs	r3, r2
 800a82e:	600b      	str	r3, [r1, #0]
 800a830:	e015      	b.n	800a85e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a832:	4b24      	ldr	r3, [pc, #144]	@ (800a8c4 <HAL_RCC_OscConfig+0x244>)
 800a834:	2200      	movs	r2, #0
 800a836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a838:	f7fa fe10 	bl	800545c <HAL_GetTick>
 800a83c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a83e:	e008      	b.n	800a852 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a840:	f7fa fe0c 	bl	800545c <HAL_GetTick>
 800a844:	4602      	mov	r2, r0
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d901      	bls.n	800a852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e187      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a852:	4b1b      	ldr	r3, [pc, #108]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 0302 	and.w	r3, r3, #2
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1f0      	bne.n	800a840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 0308 	and.w	r3, r3, #8
 800a866:	2b00      	cmp	r3, #0
 800a868:	d036      	beq.n	800a8d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d016      	beq.n	800a8a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a872:	4b15      	ldr	r3, [pc, #84]	@ (800a8c8 <HAL_RCC_OscConfig+0x248>)
 800a874:	2201      	movs	r2, #1
 800a876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a878:	f7fa fdf0 	bl	800545c <HAL_GetTick>
 800a87c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a87e:	e008      	b.n	800a892 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a880:	f7fa fdec 	bl	800545c <HAL_GetTick>
 800a884:	4602      	mov	r2, r0
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d901      	bls.n	800a892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e167      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a892:	4b0b      	ldr	r3, [pc, #44]	@ (800a8c0 <HAL_RCC_OscConfig+0x240>)
 800a894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a896:	f003 0302 	and.w	r3, r3, #2
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d0f0      	beq.n	800a880 <HAL_RCC_OscConfig+0x200>
 800a89e:	e01b      	b.n	800a8d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8a0:	4b09      	ldr	r3, [pc, #36]	@ (800a8c8 <HAL_RCC_OscConfig+0x248>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8a6:	f7fa fdd9 	bl	800545c <HAL_GetTick>
 800a8aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8ac:	e00e      	b.n	800a8cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8ae:	f7fa fdd5 	bl	800545c <HAL_GetTick>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	d907      	bls.n	800a8cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e150      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
 800a8c0:	40023800 	.word	0x40023800
 800a8c4:	42470000 	.word	0x42470000
 800a8c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8cc:	4b88      	ldr	r3, [pc, #544]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a8ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8d0:	f003 0302 	and.w	r3, r3, #2
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1ea      	bne.n	800a8ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0304 	and.w	r3, r3, #4
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 8097 	beq.w	800aa14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8ea:	4b81      	ldr	r3, [pc, #516]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a8ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10f      	bne.n	800a916 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60bb      	str	r3, [r7, #8]
 800a8fa:	4b7d      	ldr	r3, [pc, #500]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a8fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8fe:	4a7c      	ldr	r2, [pc, #496]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a904:	6413      	str	r3, [r2, #64]	@ 0x40
 800a906:	4b7a      	ldr	r3, [pc, #488]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a90a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a90e:	60bb      	str	r3, [r7, #8]
 800a910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a912:	2301      	movs	r3, #1
 800a914:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a916:	4b77      	ldr	r3, [pc, #476]	@ (800aaf4 <HAL_RCC_OscConfig+0x474>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d118      	bne.n	800a954 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a922:	4b74      	ldr	r3, [pc, #464]	@ (800aaf4 <HAL_RCC_OscConfig+0x474>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a73      	ldr	r2, [pc, #460]	@ (800aaf4 <HAL_RCC_OscConfig+0x474>)
 800a928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a92c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a92e:	f7fa fd95 	bl	800545c <HAL_GetTick>
 800a932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a934:	e008      	b.n	800a948 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a936:	f7fa fd91 	bl	800545c <HAL_GetTick>
 800a93a:	4602      	mov	r2, r0
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	2b02      	cmp	r3, #2
 800a942:	d901      	bls.n	800a948 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e10c      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a948:	4b6a      	ldr	r3, [pc, #424]	@ (800aaf4 <HAL_RCC_OscConfig+0x474>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a950:	2b00      	cmp	r3, #0
 800a952:	d0f0      	beq.n	800a936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d106      	bne.n	800a96a <HAL_RCC_OscConfig+0x2ea>
 800a95c:	4b64      	ldr	r3, [pc, #400]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a95e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a960:	4a63      	ldr	r2, [pc, #396]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a962:	f043 0301 	orr.w	r3, r3, #1
 800a966:	6713      	str	r3, [r2, #112]	@ 0x70
 800a968:	e01c      	b.n	800a9a4 <HAL_RCC_OscConfig+0x324>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	2b05      	cmp	r3, #5
 800a970:	d10c      	bne.n	800a98c <HAL_RCC_OscConfig+0x30c>
 800a972:	4b5f      	ldr	r3, [pc, #380]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a976:	4a5e      	ldr	r2, [pc, #376]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a978:	f043 0304 	orr.w	r3, r3, #4
 800a97c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a97e:	4b5c      	ldr	r3, [pc, #368]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a982:	4a5b      	ldr	r2, [pc, #364]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a984:	f043 0301 	orr.w	r3, r3, #1
 800a988:	6713      	str	r3, [r2, #112]	@ 0x70
 800a98a:	e00b      	b.n	800a9a4 <HAL_RCC_OscConfig+0x324>
 800a98c:	4b58      	ldr	r3, [pc, #352]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a98e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a990:	4a57      	ldr	r2, [pc, #348]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a992:	f023 0301 	bic.w	r3, r3, #1
 800a996:	6713      	str	r3, [r2, #112]	@ 0x70
 800a998:	4b55      	ldr	r3, [pc, #340]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a99a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a99c:	4a54      	ldr	r2, [pc, #336]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a99e:	f023 0304 	bic.w	r3, r3, #4
 800a9a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d015      	beq.n	800a9d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9ac:	f7fa fd56 	bl	800545c <HAL_GetTick>
 800a9b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9b2:	e00a      	b.n	800a9ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9b4:	f7fa fd52 	bl	800545c <HAL_GetTick>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d901      	bls.n	800a9ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e0cb      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9ca:	4b49      	ldr	r3, [pc, #292]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a9cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9ce:	f003 0302 	and.w	r3, r3, #2
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d0ee      	beq.n	800a9b4 <HAL_RCC_OscConfig+0x334>
 800a9d6:	e014      	b.n	800aa02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9d8:	f7fa fd40 	bl	800545c <HAL_GetTick>
 800a9dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a9de:	e00a      	b.n	800a9f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9e0:	f7fa fd3c 	bl	800545c <HAL_GetTick>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d901      	bls.n	800a9f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	e0b5      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a9f6:	4b3e      	ldr	r3, [pc, #248]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800a9f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9fa:	f003 0302 	and.w	r3, r3, #2
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1ee      	bne.n	800a9e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aa02:	7dfb      	ldrb	r3, [r7, #23]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d105      	bne.n	800aa14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa08:	4b39      	ldr	r3, [pc, #228]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800aa0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa0c:	4a38      	ldr	r2, [pc, #224]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800aa0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 80a1 	beq.w	800ab60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aa1e:	4b34      	ldr	r3, [pc, #208]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f003 030c 	and.w	r3, r3, #12
 800aa26:	2b08      	cmp	r3, #8
 800aa28:	d05c      	beq.n	800aae4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d141      	bne.n	800aab6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa32:	4b31      	ldr	r3, [pc, #196]	@ (800aaf8 <HAL_RCC_OscConfig+0x478>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa38:	f7fa fd10 	bl	800545c <HAL_GetTick>
 800aa3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa3e:	e008      	b.n	800aa52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa40:	f7fa fd0c 	bl	800545c <HAL_GetTick>
 800aa44:	4602      	mov	r2, r0
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d901      	bls.n	800aa52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800aa4e:	2303      	movs	r3, #3
 800aa50:	e087      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa52:	4b27      	ldr	r3, [pc, #156]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1f0      	bne.n	800aa40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	69da      	ldr	r2, [r3, #28]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	431a      	orrs	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6c:	019b      	lsls	r3, r3, #6
 800aa6e:	431a      	orrs	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa74:	085b      	lsrs	r3, r3, #1
 800aa76:	3b01      	subs	r3, #1
 800aa78:	041b      	lsls	r3, r3, #16
 800aa7a:	431a      	orrs	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa80:	061b      	lsls	r3, r3, #24
 800aa82:	491b      	ldr	r1, [pc, #108]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800aa84:	4313      	orrs	r3, r2
 800aa86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa88:	4b1b      	ldr	r3, [pc, #108]	@ (800aaf8 <HAL_RCC_OscConfig+0x478>)
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa8e:	f7fa fce5 	bl	800545c <HAL_GetTick>
 800aa92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa94:	e008      	b.n	800aaa8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa96:	f7fa fce1 	bl	800545c <HAL_GetTick>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d901      	bls.n	800aaa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e05c      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aaa8:	4b11      	ldr	r3, [pc, #68]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d0f0      	beq.n	800aa96 <HAL_RCC_OscConfig+0x416>
 800aab4:	e054      	b.n	800ab60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aab6:	4b10      	ldr	r3, [pc, #64]	@ (800aaf8 <HAL_RCC_OscConfig+0x478>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aabc:	f7fa fcce 	bl	800545c <HAL_GetTick>
 800aac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aac2:	e008      	b.n	800aad6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aac4:	f7fa fcca 	bl	800545c <HAL_GetTick>
 800aac8:	4602      	mov	r2, r0
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d901      	bls.n	800aad6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800aad2:	2303      	movs	r3, #3
 800aad4:	e045      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aad6:	4b06      	ldr	r3, [pc, #24]	@ (800aaf0 <HAL_RCC_OscConfig+0x470>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1f0      	bne.n	800aac4 <HAL_RCC_OscConfig+0x444>
 800aae2:	e03d      	b.n	800ab60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d107      	bne.n	800aafc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e038      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
 800aaf0:	40023800 	.word	0x40023800
 800aaf4:	40007000 	.word	0x40007000
 800aaf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800aafc:	4b1b      	ldr	r3, [pc, #108]	@ (800ab6c <HAL_RCC_OscConfig+0x4ec>)
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d028      	beq.n	800ab5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d121      	bne.n	800ab5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d11a      	bne.n	800ab5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ab32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d111      	bne.n	800ab5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab42:	085b      	lsrs	r3, r3, #1
 800ab44:	3b01      	subs	r3, #1
 800ab46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d107      	bne.n	800ab5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d001      	beq.n	800ab60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e000      	b.n	800ab62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3718      	adds	r7, #24
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	40023800 	.word	0x40023800

0800ab70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e0cc      	b.n	800ad1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab84:	4b68      	ldr	r3, [pc, #416]	@ (800ad28 <HAL_RCC_ClockConfig+0x1b8>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 030f 	and.w	r3, r3, #15
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d90c      	bls.n	800abac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab92:	4b65      	ldr	r3, [pc, #404]	@ (800ad28 <HAL_RCC_ClockConfig+0x1b8>)
 800ab94:	683a      	ldr	r2, [r7, #0]
 800ab96:	b2d2      	uxtb	r2, r2
 800ab98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab9a:	4b63      	ldr	r3, [pc, #396]	@ (800ad28 <HAL_RCC_ClockConfig+0x1b8>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 030f 	and.w	r3, r3, #15
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d001      	beq.n	800abac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e0b8      	b.n	800ad1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0302 	and.w	r3, r3, #2
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d020      	beq.n	800abfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 0304 	and.w	r3, r3, #4
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d005      	beq.n	800abd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800abc4:	4b59      	ldr	r3, [pc, #356]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	4a58      	ldr	r2, [pc, #352]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800abca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800abce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0308 	and.w	r3, r3, #8
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d005      	beq.n	800abe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800abdc:	4b53      	ldr	r3, [pc, #332]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	4a52      	ldr	r2, [pc, #328]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800abe2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800abe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abe8:	4b50      	ldr	r3, [pc, #320]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	494d      	ldr	r1, [pc, #308]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d044      	beq.n	800ac90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d107      	bne.n	800ac1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac0e:	4b47      	ldr	r3, [pc, #284]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d119      	bne.n	800ac4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e07f      	b.n	800ad1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d003      	beq.n	800ac2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	d107      	bne.n	800ac3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac2e:	4b3f      	ldr	r3, [pc, #252]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d109      	bne.n	800ac4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e06f      	b.n	800ad1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac3e:	4b3b      	ldr	r3, [pc, #236]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f003 0302 	and.w	r3, r3, #2
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e067      	b.n	800ad1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac4e:	4b37      	ldr	r3, [pc, #220]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f023 0203 	bic.w	r2, r3, #3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	4934      	ldr	r1, [pc, #208]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ac60:	f7fa fbfc 	bl	800545c <HAL_GetTick>
 800ac64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac66:	e00a      	b.n	800ac7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac68:	f7fa fbf8 	bl	800545c <HAL_GetTick>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d901      	bls.n	800ac7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e04f      	b.n	800ad1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac7e:	4b2b      	ldr	r3, [pc, #172]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	f003 020c 	and.w	r2, r3, #12
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d1eb      	bne.n	800ac68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac90:	4b25      	ldr	r3, [pc, #148]	@ (800ad28 <HAL_RCC_ClockConfig+0x1b8>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 030f 	and.w	r3, r3, #15
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d20c      	bcs.n	800acb8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac9e:	4b22      	ldr	r3, [pc, #136]	@ (800ad28 <HAL_RCC_ClockConfig+0x1b8>)
 800aca0:	683a      	ldr	r2, [r7, #0]
 800aca2:	b2d2      	uxtb	r2, r2
 800aca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aca6:	4b20      	ldr	r3, [pc, #128]	@ (800ad28 <HAL_RCC_ClockConfig+0x1b8>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 030f 	and.w	r3, r3, #15
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d001      	beq.n	800acb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e032      	b.n	800ad1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f003 0304 	and.w	r3, r3, #4
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d008      	beq.n	800acd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800acc4:	4b19      	ldr	r3, [pc, #100]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	4916      	ldr	r1, [pc, #88]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800acd2:	4313      	orrs	r3, r2
 800acd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 0308 	and.w	r3, r3, #8
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d009      	beq.n	800acf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ace2:	4b12      	ldr	r3, [pc, #72]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	00db      	lsls	r3, r3, #3
 800acf0:	490e      	ldr	r1, [pc, #56]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800acf2:	4313      	orrs	r3, r2
 800acf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800acf6:	f000 f821 	bl	800ad3c <HAL_RCC_GetSysClockFreq>
 800acfa:	4602      	mov	r2, r0
 800acfc:	4b0b      	ldr	r3, [pc, #44]	@ (800ad2c <HAL_RCC_ClockConfig+0x1bc>)
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	091b      	lsrs	r3, r3, #4
 800ad02:	f003 030f 	and.w	r3, r3, #15
 800ad06:	490a      	ldr	r1, [pc, #40]	@ (800ad30 <HAL_RCC_ClockConfig+0x1c0>)
 800ad08:	5ccb      	ldrb	r3, [r1, r3]
 800ad0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad0e:	4a09      	ldr	r2, [pc, #36]	@ (800ad34 <HAL_RCC_ClockConfig+0x1c4>)
 800ad10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800ad12:	4b09      	ldr	r3, [pc, #36]	@ (800ad38 <HAL_RCC_ClockConfig+0x1c8>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7f8 fad2 	bl	80032c0 <HAL_InitTick>

  return HAL_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3710      	adds	r7, #16
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	40023c00 	.word	0x40023c00
 800ad2c:	40023800 	.word	0x40023800
 800ad30:	08013464 	.word	0x08013464
 800ad34:	200001e0 	.word	0x200001e0
 800ad38:	20000268 	.word	0x20000268

0800ad3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad40:	b094      	sub	sp, #80	@ 0x50
 800ad42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800ad44:	2300      	movs	r3, #0
 800ad46:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800ad50:	2300      	movs	r3, #0
 800ad52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad54:	4b79      	ldr	r3, [pc, #484]	@ (800af3c <HAL_RCC_GetSysClockFreq+0x200>)
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f003 030c 	and.w	r3, r3, #12
 800ad5c:	2b08      	cmp	r3, #8
 800ad5e:	d00d      	beq.n	800ad7c <HAL_RCC_GetSysClockFreq+0x40>
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	f200 80e1 	bhi.w	800af28 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d002      	beq.n	800ad70 <HAL_RCC_GetSysClockFreq+0x34>
 800ad6a:	2b04      	cmp	r3, #4
 800ad6c:	d003      	beq.n	800ad76 <HAL_RCC_GetSysClockFreq+0x3a>
 800ad6e:	e0db      	b.n	800af28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ad70:	4b73      	ldr	r3, [pc, #460]	@ (800af40 <HAL_RCC_GetSysClockFreq+0x204>)
 800ad72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ad74:	e0db      	b.n	800af2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ad76:	4b73      	ldr	r3, [pc, #460]	@ (800af44 <HAL_RCC_GetSysClockFreq+0x208>)
 800ad78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ad7a:	e0d8      	b.n	800af2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ad7c:	4b6f      	ldr	r3, [pc, #444]	@ (800af3c <HAL_RCC_GetSysClockFreq+0x200>)
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ad86:	4b6d      	ldr	r3, [pc, #436]	@ (800af3c <HAL_RCC_GetSysClockFreq+0x200>)
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d063      	beq.n	800ae5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad92:	4b6a      	ldr	r3, [pc, #424]	@ (800af3c <HAL_RCC_GetSysClockFreq+0x200>)
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	099b      	lsrs	r3, r3, #6
 800ad98:	2200      	movs	r2, #0
 800ad9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800ad9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ada4:	633b      	str	r3, [r7, #48]	@ 0x30
 800ada6:	2300      	movs	r3, #0
 800ada8:	637b      	str	r3, [r7, #52]	@ 0x34
 800adaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800adae:	4622      	mov	r2, r4
 800adb0:	462b      	mov	r3, r5
 800adb2:	f04f 0000 	mov.w	r0, #0
 800adb6:	f04f 0100 	mov.w	r1, #0
 800adba:	0159      	lsls	r1, r3, #5
 800adbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800adc0:	0150      	lsls	r0, r2, #5
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	4621      	mov	r1, r4
 800adc8:	1a51      	subs	r1, r2, r1
 800adca:	6139      	str	r1, [r7, #16]
 800adcc:	4629      	mov	r1, r5
 800adce:	eb63 0301 	sbc.w	r3, r3, r1
 800add2:	617b      	str	r3, [r7, #20]
 800add4:	f04f 0200 	mov.w	r2, #0
 800add8:	f04f 0300 	mov.w	r3, #0
 800addc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ade0:	4659      	mov	r1, fp
 800ade2:	018b      	lsls	r3, r1, #6
 800ade4:	4651      	mov	r1, sl
 800ade6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800adea:	4651      	mov	r1, sl
 800adec:	018a      	lsls	r2, r1, #6
 800adee:	4651      	mov	r1, sl
 800adf0:	ebb2 0801 	subs.w	r8, r2, r1
 800adf4:	4659      	mov	r1, fp
 800adf6:	eb63 0901 	sbc.w	r9, r3, r1
 800adfa:	f04f 0200 	mov.w	r2, #0
 800adfe:	f04f 0300 	mov.w	r3, #0
 800ae02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ae06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ae0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ae0e:	4690      	mov	r8, r2
 800ae10:	4699      	mov	r9, r3
 800ae12:	4623      	mov	r3, r4
 800ae14:	eb18 0303 	adds.w	r3, r8, r3
 800ae18:	60bb      	str	r3, [r7, #8]
 800ae1a:	462b      	mov	r3, r5
 800ae1c:	eb49 0303 	adc.w	r3, r9, r3
 800ae20:	60fb      	str	r3, [r7, #12]
 800ae22:	f04f 0200 	mov.w	r2, #0
 800ae26:	f04f 0300 	mov.w	r3, #0
 800ae2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ae2e:	4629      	mov	r1, r5
 800ae30:	024b      	lsls	r3, r1, #9
 800ae32:	4621      	mov	r1, r4
 800ae34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ae38:	4621      	mov	r1, r4
 800ae3a:	024a      	lsls	r2, r1, #9
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae42:	2200      	movs	r2, #0
 800ae44:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ae4c:	f7f5 fa28 	bl	80002a0 <__aeabi_uldivmod>
 800ae50:	4602      	mov	r2, r0
 800ae52:	460b      	mov	r3, r1
 800ae54:	4613      	mov	r3, r2
 800ae56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae58:	e058      	b.n	800af0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ae5a:	4b38      	ldr	r3, [pc, #224]	@ (800af3c <HAL_RCC_GetSysClockFreq+0x200>)
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	099b      	lsrs	r3, r3, #6
 800ae60:	2200      	movs	r2, #0
 800ae62:	4618      	mov	r0, r3
 800ae64:	4611      	mov	r1, r2
 800ae66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ae6a:	623b      	str	r3, [r7, #32]
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ae74:	4642      	mov	r2, r8
 800ae76:	464b      	mov	r3, r9
 800ae78:	f04f 0000 	mov.w	r0, #0
 800ae7c:	f04f 0100 	mov.w	r1, #0
 800ae80:	0159      	lsls	r1, r3, #5
 800ae82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ae86:	0150      	lsls	r0, r2, #5
 800ae88:	4602      	mov	r2, r0
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4641      	mov	r1, r8
 800ae8e:	ebb2 0a01 	subs.w	sl, r2, r1
 800ae92:	4649      	mov	r1, r9
 800ae94:	eb63 0b01 	sbc.w	fp, r3, r1
 800ae98:	f04f 0200 	mov.w	r2, #0
 800ae9c:	f04f 0300 	mov.w	r3, #0
 800aea0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800aea4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800aea8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800aeac:	ebb2 040a 	subs.w	r4, r2, sl
 800aeb0:	eb63 050b 	sbc.w	r5, r3, fp
 800aeb4:	f04f 0200 	mov.w	r2, #0
 800aeb8:	f04f 0300 	mov.w	r3, #0
 800aebc:	00eb      	lsls	r3, r5, #3
 800aebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aec2:	00e2      	lsls	r2, r4, #3
 800aec4:	4614      	mov	r4, r2
 800aec6:	461d      	mov	r5, r3
 800aec8:	4643      	mov	r3, r8
 800aeca:	18e3      	adds	r3, r4, r3
 800aecc:	603b      	str	r3, [r7, #0]
 800aece:	464b      	mov	r3, r9
 800aed0:	eb45 0303 	adc.w	r3, r5, r3
 800aed4:	607b      	str	r3, [r7, #4]
 800aed6:	f04f 0200 	mov.w	r2, #0
 800aeda:	f04f 0300 	mov.w	r3, #0
 800aede:	e9d7 4500 	ldrd	r4, r5, [r7]
 800aee2:	4629      	mov	r1, r5
 800aee4:	028b      	lsls	r3, r1, #10
 800aee6:	4621      	mov	r1, r4
 800aee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aeec:	4621      	mov	r1, r4
 800aeee:	028a      	lsls	r2, r1, #10
 800aef0:	4610      	mov	r0, r2
 800aef2:	4619      	mov	r1, r3
 800aef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aef6:	2200      	movs	r2, #0
 800aef8:	61bb      	str	r3, [r7, #24]
 800aefa:	61fa      	str	r2, [r7, #28]
 800aefc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af00:	f7f5 f9ce 	bl	80002a0 <__aeabi_uldivmod>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	4613      	mov	r3, r2
 800af0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800af0c:	4b0b      	ldr	r3, [pc, #44]	@ (800af3c <HAL_RCC_GetSysClockFreq+0x200>)
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	0c1b      	lsrs	r3, r3, #16
 800af12:	f003 0303 	and.w	r3, r3, #3
 800af16:	3301      	adds	r3, #1
 800af18:	005b      	lsls	r3, r3, #1
 800af1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800af1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800af1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af20:	fbb2 f3f3 	udiv	r3, r2, r3
 800af24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800af26:	e002      	b.n	800af2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800af28:	4b05      	ldr	r3, [pc, #20]	@ (800af40 <HAL_RCC_GetSysClockFreq+0x204>)
 800af2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800af2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800af30:	4618      	mov	r0, r3
 800af32:	3750      	adds	r7, #80	@ 0x50
 800af34:	46bd      	mov	sp, r7
 800af36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af3a:	bf00      	nop
 800af3c:	40023800 	.word	0x40023800
 800af40:	00f42400 	.word	0x00f42400
 800af44:	007a1200 	.word	0x007a1200

0800af48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af48:	b480      	push	{r7}
 800af4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800af4c:	4b03      	ldr	r3, [pc, #12]	@ (800af5c <HAL_RCC_GetHCLKFreq+0x14>)
 800af4e:	681b      	ldr	r3, [r3, #0]
}
 800af50:	4618      	mov	r0, r3
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	200001e0 	.word	0x200001e0

0800af60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af64:	f7ff fff0 	bl	800af48 <HAL_RCC_GetHCLKFreq>
 800af68:	4602      	mov	r2, r0
 800af6a:	4b05      	ldr	r3, [pc, #20]	@ (800af80 <HAL_RCC_GetPCLK1Freq+0x20>)
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	0a9b      	lsrs	r3, r3, #10
 800af70:	f003 0307 	and.w	r3, r3, #7
 800af74:	4903      	ldr	r1, [pc, #12]	@ (800af84 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af76:	5ccb      	ldrb	r3, [r1, r3]
 800af78:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	40023800 	.word	0x40023800
 800af84:	08013474 	.word	0x08013474

0800af88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af8c:	f7ff ffdc 	bl	800af48 <HAL_RCC_GetHCLKFreq>
 800af90:	4602      	mov	r2, r0
 800af92:	4b05      	ldr	r3, [pc, #20]	@ (800afa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	0b5b      	lsrs	r3, r3, #13
 800af98:	f003 0307 	and.w	r3, r3, #7
 800af9c:	4903      	ldr	r1, [pc, #12]	@ (800afac <HAL_RCC_GetPCLK2Freq+0x24>)
 800af9e:	5ccb      	ldrb	r3, [r1, r3]
 800afa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	40023800 	.word	0x40023800
 800afac:	08013474 	.word	0x08013474

0800afb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	220f      	movs	r2, #15
 800afbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800afc0:	4b12      	ldr	r3, [pc, #72]	@ (800b00c <HAL_RCC_GetClockConfig+0x5c>)
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	f003 0203 	and.w	r2, r3, #3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800afcc:	4b0f      	ldr	r3, [pc, #60]	@ (800b00c <HAL_RCC_GetClockConfig+0x5c>)
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800afd8:	4b0c      	ldr	r3, [pc, #48]	@ (800b00c <HAL_RCC_GetClockConfig+0x5c>)
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800afe4:	4b09      	ldr	r3, [pc, #36]	@ (800b00c <HAL_RCC_GetClockConfig+0x5c>)
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	08db      	lsrs	r3, r3, #3
 800afea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aff2:	4b07      	ldr	r3, [pc, #28]	@ (800b010 <HAL_RCC_GetClockConfig+0x60>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 020f 	and.w	r2, r3, #15
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	601a      	str	r2, [r3, #0]
}
 800affe:	bf00      	nop
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	40023800 	.word	0x40023800
 800b010:	40023c00 	.word	0x40023c00

0800b014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b020:	2300      	movs	r3, #0
 800b022:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 0301 	and.w	r3, r3, #1
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10b      	bne.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d105      	bne.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b044:	2b00      	cmp	r3, #0
 800b046:	d075      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b048:	4b91      	ldr	r3, [pc, #580]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b04e:	f7fa fa05 	bl	800545c <HAL_GetTick>
 800b052:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b054:	e008      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b056:	f7fa fa01 	bl	800545c <HAL_GetTick>
 800b05a:	4602      	mov	r2, r0
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	2b02      	cmp	r3, #2
 800b062:	d901      	bls.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b064:	2303      	movs	r3, #3
 800b066:	e189      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b068:	4b8a      	ldr	r3, [pc, #552]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1f0      	bne.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0301 	and.w	r3, r3, #1
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d009      	beq.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	019a      	lsls	r2, r3, #6
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	071b      	lsls	r3, r3, #28
 800b08c:	4981      	ldr	r1, [pc, #516]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b08e:	4313      	orrs	r3, r2
 800b090:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 0302 	and.w	r3, r3, #2
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d01f      	beq.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b0a0:	4b7c      	ldr	r3, [pc, #496]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b0a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0a6:	0f1b      	lsrs	r3, r3, #28
 800b0a8:	f003 0307 	and.w	r3, r3, #7
 800b0ac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	019a      	lsls	r2, r3, #6
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	061b      	lsls	r3, r3, #24
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	071b      	lsls	r3, r3, #28
 800b0c0:	4974      	ldr	r1, [pc, #464]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b0c8:	4b72      	ldr	r3, [pc, #456]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b0ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0ce:	f023 021f 	bic.w	r2, r3, #31
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	69db      	ldr	r3, [r3, #28]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	496e      	ldr	r1, [pc, #440]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00d      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	019a      	lsls	r2, r3, #6
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	061b      	lsls	r3, r3, #24
 800b0f8:	431a      	orrs	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	071b      	lsls	r3, r3, #28
 800b100:	4964      	ldr	r1, [pc, #400]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b102:	4313      	orrs	r3, r2
 800b104:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b108:	4b61      	ldr	r3, [pc, #388]	@ (800b290 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800b10a:	2201      	movs	r2, #1
 800b10c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b10e:	f7fa f9a5 	bl	800545c <HAL_GetTick>
 800b112:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b114:	e008      	b.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b116:	f7fa f9a1 	bl	800545c <HAL_GetTick>
 800b11a:	4602      	mov	r2, r0
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	2b02      	cmp	r3, #2
 800b122:	d901      	bls.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	e129      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b128:	4b5a      	ldr	r3, [pc, #360]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d0f0      	beq.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 0304 	and.w	r3, r3, #4
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d105      	bne.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d079      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b14c:	4b52      	ldr	r3, [pc, #328]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b14e:	2200      	movs	r2, #0
 800b150:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b152:	f7fa f983 	bl	800545c <HAL_GetTick>
 800b156:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b158:	e008      	b.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b15a:	f7fa f97f 	bl	800545c <HAL_GetTick>
 800b15e:	4602      	mov	r2, r0
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	2b02      	cmp	r3, #2
 800b166:	d901      	bls.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b168:	2303      	movs	r3, #3
 800b16a:	e107      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b16c:	4b49      	ldr	r3, [pc, #292]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b178:	d0ef      	beq.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0304 	and.w	r3, r3, #4
 800b182:	2b00      	cmp	r3, #0
 800b184:	d020      	beq.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b186:	4b43      	ldr	r3, [pc, #268]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b18c:	0f1b      	lsrs	r3, r3, #28
 800b18e:	f003 0307 	and.w	r3, r3, #7
 800b192:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	019a      	lsls	r2, r3, #6
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	695b      	ldr	r3, [r3, #20]
 800b19e:	061b      	lsls	r3, r3, #24
 800b1a0:	431a      	orrs	r2, r3
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	071b      	lsls	r3, r3, #28
 800b1a6:	493b      	ldr	r1, [pc, #236]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b1ae:	4b39      	ldr	r3, [pc, #228]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1b4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6a1b      	ldr	r3, [r3, #32]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	021b      	lsls	r3, r3, #8
 800b1c0:	4934      	ldr	r1, [pc, #208]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 0308 	and.w	r3, r3, #8
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d01e      	beq.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b1d4:	4b2f      	ldr	r3, [pc, #188]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1da:	0e1b      	lsrs	r3, r3, #24
 800b1dc:	f003 030f 	and.w	r3, r3, #15
 800b1e0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	019a      	lsls	r2, r3, #6
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	061b      	lsls	r3, r3, #24
 800b1ec:	431a      	orrs	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	699b      	ldr	r3, [r3, #24]
 800b1f2:	071b      	lsls	r3, r3, #28
 800b1f4:	4927      	ldr	r1, [pc, #156]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b1fc:	4b25      	ldr	r3, [pc, #148]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b202:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20a:	4922      	ldr	r1, [pc, #136]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b212:	4b21      	ldr	r3, [pc, #132]	@ (800b298 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b214:	2201      	movs	r2, #1
 800b216:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b218:	f7fa f920 	bl	800545c <HAL_GetTick>
 800b21c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b21e:	e008      	b.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b220:	f7fa f91c 	bl	800545c <HAL_GetTick>
 800b224:	4602      	mov	r2, r0
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d901      	bls.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b22e:	2303      	movs	r3, #3
 800b230:	e0a4      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b232:	4b18      	ldr	r3, [pc, #96]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b23a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b23e:	d1ef      	bne.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 0320 	and.w	r3, r3, #32
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f000 808b 	beq.w	800b364 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b24e:	2300      	movs	r3, #0
 800b250:	60fb      	str	r3, [r7, #12]
 800b252:	4b10      	ldr	r3, [pc, #64]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b256:	4a0f      	ldr	r2, [pc, #60]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b25c:	6413      	str	r3, [r2, #64]	@ 0x40
 800b25e:	4b0d      	ldr	r3, [pc, #52]	@ (800b294 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b266:	60fb      	str	r3, [r7, #12]
 800b268:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b26a:	4b0c      	ldr	r3, [pc, #48]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a0b      	ldr	r2, [pc, #44]	@ (800b29c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b274:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b276:	f7fa f8f1 	bl	800545c <HAL_GetTick>
 800b27a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800b27c:	e010      	b.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b27e:	f7fa f8ed 	bl	800545c <HAL_GetTick>
 800b282:	4602      	mov	r2, r0
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	1ad3      	subs	r3, r2, r3
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d909      	bls.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800b28c:	2303      	movs	r3, #3
 800b28e:	e075      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x368>
 800b290:	42470068 	.word	0x42470068
 800b294:	40023800 	.word	0x40023800
 800b298:	42470070 	.word	0x42470070
 800b29c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800b2a0:	4b38      	ldr	r3, [pc, #224]	@ (800b384 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d0e8      	beq.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b2ac:	4b36      	ldr	r3, [pc, #216]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b2ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2b4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d02f      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d028      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b2ca:	4b2f      	ldr	r3, [pc, #188]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b2cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b2d4:	4b2d      	ldr	r3, [pc, #180]	@ (800b38c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b2da:	4b2c      	ldr	r3, [pc, #176]	@ (800b38c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b2e0:	4a29      	ldr	r2, [pc, #164]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b2e6:	4b28      	ldr	r3, [pc, #160]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b2e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2ea:	f003 0301 	and.w	r3, r3, #1
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d114      	bne.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b2f2:	f7fa f8b3 	bl	800545c <HAL_GetTick>
 800b2f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2f8:	e00a      	b.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2fa:	f7fa f8af 	bl	800545c <HAL_GetTick>
 800b2fe:	4602      	mov	r2, r0
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b308:	4293      	cmp	r3, r2
 800b30a:	d901      	bls.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800b30c:	2303      	movs	r3, #3
 800b30e:	e035      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b310:	4b1d      	ldr	r3, [pc, #116]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b314:	f003 0302 	and.w	r3, r3, #2
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d0ee      	beq.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b320:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b328:	d10d      	bne.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b32a:	4b17      	ldr	r3, [pc, #92]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b336:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b33a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b33e:	4912      	ldr	r1, [pc, #72]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b340:	4313      	orrs	r3, r2
 800b342:	608b      	str	r3, [r1, #8]
 800b344:	e005      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800b346:	4b10      	ldr	r3, [pc, #64]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	4a0f      	ldr	r2, [pc, #60]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b34c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b350:	6093      	str	r3, [r2, #8]
 800b352:	4b0d      	ldr	r3, [pc, #52]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b354:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b35a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b35e:	490a      	ldr	r1, [pc, #40]	@ (800b388 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b360:	4313      	orrs	r3, r2
 800b362:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f003 0310 	and.w	r3, r3, #16
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d004      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800b376:	4b06      	ldr	r3, [pc, #24]	@ (800b390 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800b378:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3718      	adds	r7, #24
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	40007000 	.word	0x40007000
 800b388:	40023800 	.word	0x40023800
 800b38c:	42470e40 	.word	0x42470e40
 800b390:	424711e0 	.word	0x424711e0

0800b394 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e025      	b.n	800b3f4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d106      	bne.n	800b3c2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7f7 ff75 	bl	80032ac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	f001 fef7 	bl	800d1c8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6818      	ldr	r0, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	f001 ff4c 	bl	800d282 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b40e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b410:	7dfb      	ldrb	r3, [r7, #23]
 800b412:	2b02      	cmp	r3, #2
 800b414:	d101      	bne.n	800b41a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b416:	2302      	movs	r3, #2
 800b418:	e021      	b.n	800b45e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b41a:	7dfb      	ldrb	r3, [r7, #23]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d002      	beq.n	800b426 <HAL_SDRAM_SendCommand+0x2a>
 800b420:	7dfb      	ldrb	r3, [r7, #23]
 800b422:	2b05      	cmp	r3, #5
 800b424:	d118      	bne.n	800b458 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2202      	movs	r2, #2
 800b42a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	68b9      	ldr	r1, [r7, #8]
 800b436:	4618      	mov	r0, r3
 800b438:	f001 ff8c 	bl	800d354 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b02      	cmp	r3, #2
 800b442:	d104      	bne.n	800b44e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2205      	movs	r2, #5
 800b448:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b44c:	e006      	b.n	800b45c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b456:	e001      	b.n	800b45c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e000      	b.n	800b45e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3718      	adds	r7, #24
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b082      	sub	sp, #8
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b476:	b2db      	uxtb	r3, r3
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d101      	bne.n	800b480 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b47c:	2302      	movs	r3, #2
 800b47e:	e016      	b.n	800b4ae <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d10f      	bne.n	800b4ac <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2202      	movs	r2, #2
 800b490:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	6839      	ldr	r1, [r7, #0]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f001 ff97 	bl	800d3ce <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	e000      	b.n	800b4ae <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b082      	sub	sp, #8
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d101      	bne.n	800b4c8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	e07b      	b.n	800b5c0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d108      	bne.n	800b4e2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b4d8:	d009      	beq.n	800b4ee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	61da      	str	r2, [r3, #28]
 800b4e0:	e005      	b.n	800b4ee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d106      	bne.n	800b50e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7f7 fcf1 	bl	8002ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2202      	movs	r2, #2
 800b512:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b524:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b536:	431a      	orrs	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b540:	431a      	orrs	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	691b      	ldr	r3, [r3, #16]
 800b546:	f003 0302 	and.w	r3, r3, #2
 800b54a:	431a      	orrs	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	695b      	ldr	r3, [r3, #20]
 800b550:	f003 0301 	and.w	r3, r3, #1
 800b554:	431a      	orrs	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	699b      	ldr	r3, [r3, #24]
 800b55a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b55e:	431a      	orrs	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	69db      	ldr	r3, [r3, #28]
 800b564:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b568:	431a      	orrs	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b572:	ea42 0103 	orr.w	r1, r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b57a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	430a      	orrs	r2, r1
 800b584:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	0c1b      	lsrs	r3, r3, #16
 800b58c:	f003 0104 	and.w	r1, r3, #4
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b594:	f003 0210 	and.w	r2, r3, #16
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	430a      	orrs	r2, r1
 800b59e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	69da      	ldr	r2, [r3, #28]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b5ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d101      	bne.n	800b5da <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e01a      	b.n	800b610 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2202      	movs	r2, #2
 800b5de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b5f0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7f7 fcc4 	bl	8002f80 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b088      	sub	sp, #32
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	603b      	str	r3, [r7, #0]
 800b624:	4613      	mov	r3, r2
 800b626:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b628:	f7f9 ff18 	bl	800545c <HAL_GetTick>
 800b62c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b62e:	88fb      	ldrh	r3, [r7, #6]
 800b630:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d001      	beq.n	800b642 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b63e:	2302      	movs	r3, #2
 800b640:	e12a      	b.n	800b898 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <HAL_SPI_Transmit+0x36>
 800b648:	88fb      	ldrh	r3, [r7, #6]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d101      	bne.n	800b652 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e122      	b.n	800b898 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d101      	bne.n	800b660 <HAL_SPI_Transmit+0x48>
 800b65c:	2302      	movs	r3, #2
 800b65e:	e11b      	b.n	800b898 <HAL_SPI_Transmit+0x280>
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2203      	movs	r2, #3
 800b66c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	88fa      	ldrh	r2, [r7, #6]
 800b680:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	88fa      	ldrh	r2, [r7, #6]
 800b686:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2200      	movs	r2, #0
 800b698:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6ae:	d10f      	bne.n	800b6d0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b6be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b6ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6da:	2b40      	cmp	r3, #64	@ 0x40
 800b6dc:	d007      	beq.n	800b6ee <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6f6:	d152      	bne.n	800b79e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d002      	beq.n	800b706 <HAL_SPI_Transmit+0xee>
 800b700:	8b7b      	ldrh	r3, [r7, #26]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d145      	bne.n	800b792 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b70a:	881a      	ldrh	r2, [r3, #0]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b716:	1c9a      	adds	r2, r3, #2
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b720:	b29b      	uxth	r3, r3
 800b722:	3b01      	subs	r3, #1
 800b724:	b29a      	uxth	r2, r3
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b72a:	e032      	b.n	800b792 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	f003 0302 	and.w	r3, r3, #2
 800b736:	2b02      	cmp	r3, #2
 800b738:	d112      	bne.n	800b760 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b73e:	881a      	ldrh	r2, [r3, #0]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b74a:	1c9a      	adds	r2, r3, #2
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b754:	b29b      	uxth	r3, r3
 800b756:	3b01      	subs	r3, #1
 800b758:	b29a      	uxth	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b75e:	e018      	b.n	800b792 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b760:	f7f9 fe7c 	bl	800545c <HAL_GetTick>
 800b764:	4602      	mov	r2, r0
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d803      	bhi.n	800b778 <HAL_SPI_Transmit+0x160>
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b776:	d102      	bne.n	800b77e <HAL_SPI_Transmit+0x166>
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d109      	bne.n	800b792 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b78e:	2303      	movs	r3, #3
 800b790:	e082      	b.n	800b898 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b796:	b29b      	uxth	r3, r3
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1c7      	bne.n	800b72c <HAL_SPI_Transmit+0x114>
 800b79c:	e053      	b.n	800b846 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d002      	beq.n	800b7ac <HAL_SPI_Transmit+0x194>
 800b7a6:	8b7b      	ldrh	r3, [r7, #26]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d147      	bne.n	800b83c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	330c      	adds	r3, #12
 800b7b6:	7812      	ldrb	r2, [r2, #0]
 800b7b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7be:	1c5a      	adds	r2, r3, #1
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b7d2:	e033      	b.n	800b83c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f003 0302 	and.w	r3, r3, #2
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d113      	bne.n	800b80a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	330c      	adds	r3, #12
 800b7ec:	7812      	ldrb	r2, [r2, #0]
 800b7ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7f4:	1c5a      	adds	r2, r3, #1
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	3b01      	subs	r3, #1
 800b802:	b29a      	uxth	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b808:	e018      	b.n	800b83c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b80a:	f7f9 fe27 	bl	800545c <HAL_GetTick>
 800b80e:	4602      	mov	r2, r0
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	683a      	ldr	r2, [r7, #0]
 800b816:	429a      	cmp	r2, r3
 800b818:	d803      	bhi.n	800b822 <HAL_SPI_Transmit+0x20a>
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b820:	d102      	bne.n	800b828 <HAL_SPI_Transmit+0x210>
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d109      	bne.n	800b83c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	e02d      	b.n	800b898 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b840:	b29b      	uxth	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1c6      	bne.n	800b7d4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b846:	69fa      	ldr	r2, [r7, #28]
 800b848:	6839      	ldr	r1, [r7, #0]
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f000 fbe6 	bl	800c01c <SPI_EndRxTxTransaction>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d002      	beq.n	800b85c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2220      	movs	r2, #32
 800b85a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d10a      	bne.n	800b87a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b864:	2300      	movs	r3, #0
 800b866:	617b      	str	r3, [r7, #20]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	617b      	str	r3, [r7, #20]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	617b      	str	r3, [r7, #20]
 800b878:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	e000      	b.n	800b898 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b896:	2300      	movs	r3, #0
  }
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3720      	adds	r7, #32
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b088      	sub	sp, #32
 800b8a4:	af02      	add	r7, sp, #8
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	603b      	str	r3, [r7, #0]
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d001      	beq.n	800b8c0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800b8bc:	2302      	movs	r3, #2
 800b8be:	e104      	b.n	800baca <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b8c8:	d112      	bne.n	800b8f0 <HAL_SPI_Receive+0x50>
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10e      	bne.n	800b8f0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2204      	movs	r2, #4
 800b8d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b8da:	88fa      	ldrh	r2, [r7, #6]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	68b9      	ldr	r1, [r7, #8]
 800b8e6:	68f8      	ldr	r0, [r7, #12]
 800b8e8:	f000 f8f3 	bl	800bad2 <HAL_SPI_TransmitReceive>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	e0ec      	b.n	800baca <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8f0:	f7f9 fdb4 	bl	800545c <HAL_GetTick>
 800b8f4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d002      	beq.n	800b902 <HAL_SPI_Receive+0x62>
 800b8fc:	88fb      	ldrh	r3, [r7, #6]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e0e1      	b.n	800baca <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d101      	bne.n	800b914 <HAL_SPI_Receive+0x74>
 800b910:	2302      	movs	r3, #2
 800b912:	e0da      	b.n	800baca <HAL_SPI_Receive+0x22a>
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2201      	movs	r2, #1
 800b918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2204      	movs	r2, #4
 800b920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2200      	movs	r2, #0
 800b928:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	88fa      	ldrh	r2, [r7, #6]
 800b934:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	88fa      	ldrh	r2, [r7, #6]
 800b93a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2200      	movs	r2, #0
 800b946:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b962:	d10f      	bne.n	800b984 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b972:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b982:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b98e:	2b40      	cmp	r3, #64	@ 0x40
 800b990:	d007      	beq.n	800b9a2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9a0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d170      	bne.n	800ba8c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b9aa:	e035      	b.n	800ba18 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d115      	bne.n	800b9e6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f103 020c 	add.w	r2, r3, #12
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9c6:	7812      	ldrb	r2, [r2, #0]
 800b9c8:	b2d2      	uxtb	r2, r2
 800b9ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d0:	1c5a      	adds	r2, r3, #1
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b9e4:	e018      	b.n	800ba18 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9e6:	f7f9 fd39 	bl	800545c <HAL_GetTick>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	683a      	ldr	r2, [r7, #0]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d803      	bhi.n	800b9fe <HAL_SPI_Receive+0x15e>
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fc:	d102      	bne.n	800ba04 <HAL_SPI_Receive+0x164>
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d109      	bne.n	800ba18 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ba14:	2303      	movs	r3, #3
 800ba16:	e058      	b.n	800baca <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1c4      	bne.n	800b9ac <HAL_SPI_Receive+0x10c>
 800ba22:	e038      	b.n	800ba96 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	f003 0301 	and.w	r3, r3, #1
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d113      	bne.n	800ba5a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	68da      	ldr	r2, [r3, #12]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba3c:	b292      	uxth	r2, r2
 800ba3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba44:	1c9a      	adds	r2, r3, #2
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	3b01      	subs	r3, #1
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ba58:	e018      	b.n	800ba8c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba5a:	f7f9 fcff 	bl	800545c <HAL_GetTick>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	683a      	ldr	r2, [r7, #0]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d803      	bhi.n	800ba72 <HAL_SPI_Receive+0x1d2>
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba70:	d102      	bne.n	800ba78 <HAL_SPI_Receive+0x1d8>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d109      	bne.n	800ba8c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2200      	movs	r2, #0
 800ba84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ba88:	2303      	movs	r3, #3
 800ba8a:	e01e      	b.n	800baca <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1c6      	bne.n	800ba24 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f000 fa58 	bl	800bf50 <SPI_EndRxTransaction>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d002      	beq.n	800baac <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2220      	movs	r2, #32
 800baaa:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d001      	beq.n	800bac8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e000      	b.n	800baca <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800bac8:	2300      	movs	r3, #0
  }
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b08a      	sub	sp, #40	@ 0x28
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	60f8      	str	r0, [r7, #12]
 800bada:	60b9      	str	r1, [r7, #8]
 800badc:	607a      	str	r2, [r7, #4]
 800bade:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bae0:	2301      	movs	r3, #1
 800bae2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bae4:	f7f9 fcba 	bl	800545c <HAL_GetTick>
 800bae8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800baf0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800baf8:	887b      	ldrh	r3, [r7, #2]
 800bafa:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bafc:	7ffb      	ldrb	r3, [r7, #31]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d00c      	beq.n	800bb1c <HAL_SPI_TransmitReceive+0x4a>
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bb08:	d106      	bne.n	800bb18 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d102      	bne.n	800bb18 <HAL_SPI_TransmitReceive+0x46>
 800bb12:	7ffb      	ldrb	r3, [r7, #31]
 800bb14:	2b04      	cmp	r3, #4
 800bb16:	d001      	beq.n	800bb1c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800bb18:	2302      	movs	r3, #2
 800bb1a:	e17f      	b.n	800be1c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d005      	beq.n	800bb2e <HAL_SPI_TransmitReceive+0x5c>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d002      	beq.n	800bb2e <HAL_SPI_TransmitReceive+0x5c>
 800bb28:	887b      	ldrh	r3, [r7, #2]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d101      	bne.n	800bb32 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e174      	b.n	800be1c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d101      	bne.n	800bb40 <HAL_SPI_TransmitReceive+0x6e>
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	e16d      	b.n	800be1c <HAL_SPI_TransmitReceive+0x34a>
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	2b04      	cmp	r3, #4
 800bb52:	d003      	beq.n	800bb5c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2205      	movs	r2, #5
 800bb58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	887a      	ldrh	r2, [r7, #2]
 800bb6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	887a      	ldrh	r2, [r7, #2]
 800bb72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	887a      	ldrh	r2, [r7, #2]
 800bb7e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	887a      	ldrh	r2, [r7, #2]
 800bb84:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb9c:	2b40      	cmp	r3, #64	@ 0x40
 800bb9e:	d007      	beq.n	800bbb0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bbae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bbb8:	d17e      	bne.n	800bcb8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d002      	beq.n	800bbc8 <HAL_SPI_TransmitReceive+0xf6>
 800bbc2:	8afb      	ldrh	r3, [r7, #22]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d16c      	bne.n	800bca2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbcc:	881a      	ldrh	r2, [r3, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd8:	1c9a      	adds	r2, r3, #2
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	b29a      	uxth	r2, r3
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bbec:	e059      	b.n	800bca2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f003 0302 	and.w	r3, r3, #2
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d11b      	bne.n	800bc34 <HAL_SPI_TransmitReceive+0x162>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d016      	beq.n	800bc34 <HAL_SPI_TransmitReceive+0x162>
 800bc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d113      	bne.n	800bc34 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc10:	881a      	ldrh	r2, [r3, #0]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc1c:	1c9a      	adds	r2, r3, #2
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	f003 0301 	and.w	r3, r3, #1
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d119      	bne.n	800bc76 <HAL_SPI_TransmitReceive+0x1a4>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d014      	beq.n	800bc76 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68da      	ldr	r2, [r3, #12]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc56:	b292      	uxth	r2, r2
 800bc58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc5e:	1c9a      	adds	r2, r3, #2
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bc72:	2301      	movs	r3, #1
 800bc74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bc76:	f7f9 fbf1 	bl	800545c <HAL_GetTick>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	6a3b      	ldr	r3, [r7, #32]
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d80d      	bhi.n	800bca2 <HAL_SPI_TransmitReceive+0x1d0>
 800bc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc8c:	d009      	beq.n	800bca2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	e0bc      	b.n	800be1c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1a0      	bne.n	800bbee <HAL_SPI_TransmitReceive+0x11c>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d19b      	bne.n	800bbee <HAL_SPI_TransmitReceive+0x11c>
 800bcb6:	e082      	b.n	800bdbe <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <HAL_SPI_TransmitReceive+0x1f4>
 800bcc0:	8afb      	ldrh	r3, [r7, #22]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d171      	bne.n	800bdaa <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	330c      	adds	r3, #12
 800bcd0:	7812      	ldrb	r2, [r2, #0]
 800bcd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcd8:	1c5a      	adds	r2, r3, #1
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	3b01      	subs	r3, #1
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bcec:	e05d      	b.n	800bdaa <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	f003 0302 	and.w	r3, r3, #2
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d11c      	bne.n	800bd36 <HAL_SPI_TransmitReceive+0x264>
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d017      	beq.n	800bd36 <HAL_SPI_TransmitReceive+0x264>
 800bd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d114      	bne.n	800bd36 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	330c      	adds	r3, #12
 800bd16:	7812      	ldrb	r2, [r2, #0]
 800bd18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd1e:	1c5a      	adds	r2, r3, #1
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bd32:	2300      	movs	r3, #0
 800bd34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d119      	bne.n	800bd78 <HAL_SPI_TransmitReceive+0x2a6>
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d014      	beq.n	800bd78 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68da      	ldr	r2, [r3, #12]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd58:	b2d2      	uxtb	r2, r2
 800bd5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bd74:	2301      	movs	r3, #1
 800bd76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bd78:	f7f9 fb70 	bl	800545c <HAL_GetTick>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	6a3b      	ldr	r3, [r7, #32]
 800bd80:	1ad3      	subs	r3, r2, r3
 800bd82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d803      	bhi.n	800bd90 <HAL_SPI_TransmitReceive+0x2be>
 800bd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8e:	d102      	bne.n	800bd96 <HAL_SPI_TransmitReceive+0x2c4>
 800bd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d109      	bne.n	800bdaa <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800bda6:	2303      	movs	r3, #3
 800bda8:	e038      	b.n	800be1c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d19c      	bne.n	800bcee <HAL_SPI_TransmitReceive+0x21c>
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d197      	bne.n	800bcee <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bdbe:	6a3a      	ldr	r2, [r7, #32]
 800bdc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f000 f92a 	bl	800c01c <SPI_EndRxTxTransaction>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d008      	beq.n	800bde0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2220      	movs	r2, #32
 800bdd2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	e01d      	b.n	800be1c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10a      	bne.n	800bdfe <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bde8:	2300      	movs	r3, #0
 800bdea:	613b      	str	r3, [r7, #16]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	613b      	str	r3, [r7, #16]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	613b      	str	r3, [r7, #16]
 800bdfc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2201      	movs	r2, #1
 800be02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2200      	movs	r2, #0
 800be0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	e000      	b.n	800be1c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800be1a:	2300      	movs	r3, #0
  }
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3728      	adds	r7, #40	@ 0x28
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800be32:	b2db      	uxtb	r3, r3
}
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b088      	sub	sp, #32
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	603b      	str	r3, [r7, #0]
 800be4c:	4613      	mov	r3, r2
 800be4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800be50:	f7f9 fb04 	bl	800545c <HAL_GetTick>
 800be54:	4602      	mov	r2, r0
 800be56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be58:	1a9b      	subs	r3, r3, r2
 800be5a:	683a      	ldr	r2, [r7, #0]
 800be5c:	4413      	add	r3, r2
 800be5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800be60:	f7f9 fafc 	bl	800545c <HAL_GetTick>
 800be64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800be66:	4b39      	ldr	r3, [pc, #228]	@ (800bf4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	015b      	lsls	r3, r3, #5
 800be6c:	0d1b      	lsrs	r3, r3, #20
 800be6e:	69fa      	ldr	r2, [r7, #28]
 800be70:	fb02 f303 	mul.w	r3, r2, r3
 800be74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be76:	e054      	b.n	800bf22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be7e:	d050      	beq.n	800bf22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800be80:	f7f9 faec 	bl	800545c <HAL_GetTick>
 800be84:	4602      	mov	r2, r0
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	69fa      	ldr	r2, [r7, #28]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d902      	bls.n	800be96 <SPI_WaitFlagStateUntilTimeout+0x56>
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d13d      	bne.n	800bf12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	685a      	ldr	r2, [r3, #4]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800beae:	d111      	bne.n	800bed4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800beb8:	d004      	beq.n	800bec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bec2:	d107      	bne.n	800bed4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bedc:	d10f      	bne.n	800befe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800beec:	601a      	str	r2, [r3, #0]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800befc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2201      	movs	r2, #1
 800bf02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e017      	b.n	800bf42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	689a      	ldr	r2, [r3, #8]
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	4013      	ands	r3, r2
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	bf0c      	ite	eq
 800bf32:	2301      	moveq	r3, #1
 800bf34:	2300      	movne	r3, #0
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	461a      	mov	r2, r3
 800bf3a:	79fb      	ldrb	r3, [r7, #7]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d19b      	bne.n	800be78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3720      	adds	r7, #32
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	200001e0 	.word	0x200001e0

0800bf50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af02      	add	r7, sp, #8
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bf64:	d111      	bne.n	800bf8a <SPI_EndRxTransaction+0x3a>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf6e:	d004      	beq.n	800bf7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf78:	d107      	bne.n	800bf8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bf88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bf92:	d12a      	bne.n	800bfea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf9c:	d012      	beq.n	800bfc4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	2180      	movs	r1, #128	@ 0x80
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f7ff ff49 	bl	800be40 <SPI_WaitFlagStateUntilTimeout>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d02d      	beq.n	800c010 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfb8:	f043 0220 	orr.w	r2, r3, #32
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bfc0:	2303      	movs	r3, #3
 800bfc2:	e026      	b.n	800c012 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	2101      	movs	r1, #1
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f7ff ff36 	bl	800be40 <SPI_WaitFlagStateUntilTimeout>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d01a      	beq.n	800c010 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfde:	f043 0220 	orr.w	r2, r3, #32
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bfe6:	2303      	movs	r3, #3
 800bfe8:	e013      	b.n	800c012 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	2200      	movs	r2, #0
 800bff2:	2101      	movs	r1, #1
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f7ff ff23 	bl	800be40 <SPI_WaitFlagStateUntilTimeout>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d007      	beq.n	800c010 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c004:	f043 0220 	orr.w	r2, r3, #32
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c00c:	2303      	movs	r3, #3
 800c00e:	e000      	b.n	800c012 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
	...

0800c01c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b088      	sub	sp, #32
 800c020:	af02      	add	r7, sp, #8
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	9300      	str	r3, [sp, #0]
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	2201      	movs	r2, #1
 800c030:	2102      	movs	r1, #2
 800c032:	68f8      	ldr	r0, [r7, #12]
 800c034:	f7ff ff04 	bl	800be40 <SPI_WaitFlagStateUntilTimeout>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d007      	beq.n	800c04e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c042:	f043 0220 	orr.w	r2, r3, #32
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800c04a:	2303      	movs	r3, #3
 800c04c:	e032      	b.n	800c0b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c04e:	4b1b      	ldr	r3, [pc, #108]	@ (800c0bc <SPI_EndRxTxTransaction+0xa0>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a1b      	ldr	r2, [pc, #108]	@ (800c0c0 <SPI_EndRxTxTransaction+0xa4>)
 800c054:	fba2 2303 	umull	r2, r3, r2, r3
 800c058:	0d5b      	lsrs	r3, r3, #21
 800c05a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c05e:	fb02 f303 	mul.w	r3, r2, r3
 800c062:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c06c:	d112      	bne.n	800c094 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	9300      	str	r3, [sp, #0]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	2200      	movs	r2, #0
 800c076:	2180      	movs	r1, #128	@ 0x80
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f7ff fee1 	bl	800be40 <SPI_WaitFlagStateUntilTimeout>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d016      	beq.n	800c0b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c088:	f043 0220 	orr.w	r2, r3, #32
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c090:	2303      	movs	r3, #3
 800c092:	e00f      	b.n	800c0b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00a      	beq.n	800c0b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	3b01      	subs	r3, #1
 800c09e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0aa:	2b80      	cmp	r3, #128	@ 0x80
 800c0ac:	d0f2      	beq.n	800c094 <SPI_EndRxTxTransaction+0x78>
 800c0ae:	e000      	b.n	800c0b2 <SPI_EndRxTxTransaction+0x96>
        break;
 800c0b0:	bf00      	nop
  }

  return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	200001e0 	.word	0x200001e0
 800c0c0:	165e9f81 	.word	0x165e9f81

0800c0c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d101      	bne.n	800c0d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e041      	b.n	800c15a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d106      	bne.n	800c0f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7f6 ff66 	bl	8002fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2202      	movs	r2, #2
 800c0f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	3304      	adds	r3, #4
 800c100:	4619      	mov	r1, r3
 800c102:	4610      	mov	r0, r2
 800c104:	f000 fa7e 	bl	800c604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2201      	movs	r2, #1
 800c114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2201      	movs	r2, #1
 800c124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2201      	movs	r2, #1
 800c154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
	...

0800c164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c172:	b2db      	uxtb	r3, r3
 800c174:	2b01      	cmp	r3, #1
 800c176:	d001      	beq.n	800c17c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	e04e      	b.n	800c21a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2202      	movs	r2, #2
 800c180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	68da      	ldr	r2, [r3, #12]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f042 0201 	orr.w	r2, r2, #1
 800c192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a23      	ldr	r2, [pc, #140]	@ (800c228 <HAL_TIM_Base_Start_IT+0xc4>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d022      	beq.n	800c1e4 <HAL_TIM_Base_Start_IT+0x80>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1a6:	d01d      	beq.n	800c1e4 <HAL_TIM_Base_Start_IT+0x80>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a1f      	ldr	r2, [pc, #124]	@ (800c22c <HAL_TIM_Base_Start_IT+0xc8>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d018      	beq.n	800c1e4 <HAL_TIM_Base_Start_IT+0x80>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a1e      	ldr	r2, [pc, #120]	@ (800c230 <HAL_TIM_Base_Start_IT+0xcc>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d013      	beq.n	800c1e4 <HAL_TIM_Base_Start_IT+0x80>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4a1c      	ldr	r2, [pc, #112]	@ (800c234 <HAL_TIM_Base_Start_IT+0xd0>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d00e      	beq.n	800c1e4 <HAL_TIM_Base_Start_IT+0x80>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a1b      	ldr	r2, [pc, #108]	@ (800c238 <HAL_TIM_Base_Start_IT+0xd4>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d009      	beq.n	800c1e4 <HAL_TIM_Base_Start_IT+0x80>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a19      	ldr	r2, [pc, #100]	@ (800c23c <HAL_TIM_Base_Start_IT+0xd8>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d004      	beq.n	800c1e4 <HAL_TIM_Base_Start_IT+0x80>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a18      	ldr	r2, [pc, #96]	@ (800c240 <HAL_TIM_Base_Start_IT+0xdc>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d111      	bne.n	800c208 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	f003 0307 	and.w	r3, r3, #7
 800c1ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2b06      	cmp	r3, #6
 800c1f4:	d010      	beq.n	800c218 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f042 0201 	orr.w	r2, r2, #1
 800c204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c206:	e007      	b.n	800c218 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f042 0201 	orr.w	r2, r2, #1
 800c216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3714      	adds	r7, #20
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop
 800c228:	40010000 	.word	0x40010000
 800c22c:	40000400 	.word	0x40000400
 800c230:	40000800 	.word	0x40000800
 800c234:	40000c00 	.word	0x40000c00
 800c238:	40010400 	.word	0x40010400
 800c23c:	40014000 	.word	0x40014000
 800c240:	40001800 	.word	0x40001800

0800c244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	f003 0302 	and.w	r3, r3, #2
 800c262:	2b00      	cmp	r3, #0
 800c264:	d020      	beq.n	800c2a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f003 0302 	and.w	r3, r3, #2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d01b      	beq.n	800c2a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f06f 0202 	mvn.w	r2, #2
 800c278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	699b      	ldr	r3, [r3, #24]
 800c286:	f003 0303 	and.w	r3, r3, #3
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d003      	beq.n	800c296 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f999 	bl	800c5c6 <HAL_TIM_IC_CaptureCallback>
 800c294:	e005      	b.n	800c2a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f98b 	bl	800c5b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 f99c 	bl	800c5da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	f003 0304 	and.w	r3, r3, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d020      	beq.n	800c2f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f003 0304 	and.w	r3, r3, #4
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d01b      	beq.n	800c2f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f06f 0204 	mvn.w	r2, #4
 800c2c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2202      	movs	r2, #2
 800c2ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d003      	beq.n	800c2e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f973 	bl	800c5c6 <HAL_TIM_IC_CaptureCallback>
 800c2e0:	e005      	b.n	800c2ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 f965 	bl	800c5b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 f976 	bl	800c5da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	f003 0308 	and.w	r3, r3, #8
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d020      	beq.n	800c340 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f003 0308 	and.w	r3, r3, #8
 800c304:	2b00      	cmp	r3, #0
 800c306:	d01b      	beq.n	800c340 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f06f 0208 	mvn.w	r2, #8
 800c310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2204      	movs	r2, #4
 800c316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	69db      	ldr	r3, [r3, #28]
 800c31e:	f003 0303 	and.w	r3, r3, #3
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f94d 	bl	800c5c6 <HAL_TIM_IC_CaptureCallback>
 800c32c:	e005      	b.n	800c33a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f93f 	bl	800c5b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 f950 	bl	800c5da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	f003 0310 	and.w	r3, r3, #16
 800c346:	2b00      	cmp	r3, #0
 800c348:	d020      	beq.n	800c38c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f003 0310 	and.w	r3, r3, #16
 800c350:	2b00      	cmp	r3, #0
 800c352:	d01b      	beq.n	800c38c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f06f 0210 	mvn.w	r2, #16
 800c35c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2208      	movs	r2, #8
 800c362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	69db      	ldr	r3, [r3, #28]
 800c36a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d003      	beq.n	800c37a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 f927 	bl	800c5c6 <HAL_TIM_IC_CaptureCallback>
 800c378:	e005      	b.n	800c386 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f919 	bl	800c5b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 f92a 	bl	800c5da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2200      	movs	r2, #0
 800c38a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	f003 0301 	and.w	r3, r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00c      	beq.n	800c3b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f003 0301 	and.w	r3, r3, #1
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d007      	beq.n	800c3b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f06f 0201 	mvn.w	r2, #1
 800c3a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7f6 fb38 	bl	8002a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00c      	beq.n	800c3d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d007      	beq.n	800c3d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c3cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 fae4 	bl	800c99c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00c      	beq.n	800c3f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d007      	beq.n	800c3f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c3f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 f8fb 	bl	800c5ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	f003 0320 	and.w	r3, r3, #32
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00c      	beq.n	800c41c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f003 0320 	and.w	r3, r3, #32
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d007      	beq.n	800c41c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f06f 0220 	mvn.w	r2, #32
 800c414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fab6 	bl	800c988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c41c:	bf00      	nop
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c42e:	2300      	movs	r3, #0
 800c430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d101      	bne.n	800c440 <HAL_TIM_ConfigClockSource+0x1c>
 800c43c:	2302      	movs	r3, #2
 800c43e:	e0b4      	b.n	800c5aa <HAL_TIM_ConfigClockSource+0x186>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2202      	movs	r2, #2
 800c44c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c45e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c478:	d03e      	beq.n	800c4f8 <HAL_TIM_ConfigClockSource+0xd4>
 800c47a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c47e:	f200 8087 	bhi.w	800c590 <HAL_TIM_ConfigClockSource+0x16c>
 800c482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c486:	f000 8086 	beq.w	800c596 <HAL_TIM_ConfigClockSource+0x172>
 800c48a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c48e:	d87f      	bhi.n	800c590 <HAL_TIM_ConfigClockSource+0x16c>
 800c490:	2b70      	cmp	r3, #112	@ 0x70
 800c492:	d01a      	beq.n	800c4ca <HAL_TIM_ConfigClockSource+0xa6>
 800c494:	2b70      	cmp	r3, #112	@ 0x70
 800c496:	d87b      	bhi.n	800c590 <HAL_TIM_ConfigClockSource+0x16c>
 800c498:	2b60      	cmp	r3, #96	@ 0x60
 800c49a:	d050      	beq.n	800c53e <HAL_TIM_ConfigClockSource+0x11a>
 800c49c:	2b60      	cmp	r3, #96	@ 0x60
 800c49e:	d877      	bhi.n	800c590 <HAL_TIM_ConfigClockSource+0x16c>
 800c4a0:	2b50      	cmp	r3, #80	@ 0x50
 800c4a2:	d03c      	beq.n	800c51e <HAL_TIM_ConfigClockSource+0xfa>
 800c4a4:	2b50      	cmp	r3, #80	@ 0x50
 800c4a6:	d873      	bhi.n	800c590 <HAL_TIM_ConfigClockSource+0x16c>
 800c4a8:	2b40      	cmp	r3, #64	@ 0x40
 800c4aa:	d058      	beq.n	800c55e <HAL_TIM_ConfigClockSource+0x13a>
 800c4ac:	2b40      	cmp	r3, #64	@ 0x40
 800c4ae:	d86f      	bhi.n	800c590 <HAL_TIM_ConfigClockSource+0x16c>
 800c4b0:	2b30      	cmp	r3, #48	@ 0x30
 800c4b2:	d064      	beq.n	800c57e <HAL_TIM_ConfigClockSource+0x15a>
 800c4b4:	2b30      	cmp	r3, #48	@ 0x30
 800c4b6:	d86b      	bhi.n	800c590 <HAL_TIM_ConfigClockSource+0x16c>
 800c4b8:	2b20      	cmp	r3, #32
 800c4ba:	d060      	beq.n	800c57e <HAL_TIM_ConfigClockSource+0x15a>
 800c4bc:	2b20      	cmp	r3, #32
 800c4be:	d867      	bhi.n	800c590 <HAL_TIM_ConfigClockSource+0x16c>
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d05c      	beq.n	800c57e <HAL_TIM_ConfigClockSource+0x15a>
 800c4c4:	2b10      	cmp	r3, #16
 800c4c6:	d05a      	beq.n	800c57e <HAL_TIM_ConfigClockSource+0x15a>
 800c4c8:	e062      	b.n	800c590 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4da:	f000 f9b9 	bl	800c850 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c4ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	609a      	str	r2, [r3, #8]
      break;
 800c4f6:	e04f      	b.n	800c598 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c508:	f000 f9a2 	bl	800c850 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	689a      	ldr	r2, [r3, #8]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c51a:	609a      	str	r2, [r3, #8]
      break;
 800c51c:	e03c      	b.n	800c598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c52a:	461a      	mov	r2, r3
 800c52c:	f000 f916 	bl	800c75c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2150      	movs	r1, #80	@ 0x50
 800c536:	4618      	mov	r0, r3
 800c538:	f000 f96f 	bl	800c81a <TIM_ITRx_SetConfig>
      break;
 800c53c:	e02c      	b.n	800c598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c54a:	461a      	mov	r2, r3
 800c54c:	f000 f935 	bl	800c7ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2160      	movs	r1, #96	@ 0x60
 800c556:	4618      	mov	r0, r3
 800c558:	f000 f95f 	bl	800c81a <TIM_ITRx_SetConfig>
      break;
 800c55c:	e01c      	b.n	800c598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c56a:	461a      	mov	r2, r3
 800c56c:	f000 f8f6 	bl	800c75c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2140      	movs	r1, #64	@ 0x40
 800c576:	4618      	mov	r0, r3
 800c578:	f000 f94f 	bl	800c81a <TIM_ITRx_SetConfig>
      break;
 800c57c:	e00c      	b.n	800c598 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4619      	mov	r1, r3
 800c588:	4610      	mov	r0, r2
 800c58a:	f000 f946 	bl	800c81a <TIM_ITRx_SetConfig>
      break;
 800c58e:	e003      	b.n	800c598 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	73fb      	strb	r3, [r7, #15]
      break;
 800c594:	e000      	b.n	800c598 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5ba:	bf00      	nop
 800c5bc:	370c      	adds	r7, #12
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b083      	sub	sp, #12
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5ce:	bf00      	nop
 800c5d0:	370c      	adds	r7, #12
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr

0800c5da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5da:	b480      	push	{r7}
 800c5dc:	b083      	sub	sp, #12
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c5e2:	bf00      	nop
 800c5e4:	370c      	adds	r7, #12
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b083      	sub	sp, #12
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5f6:	bf00      	nop
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
	...

0800c604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4a46      	ldr	r2, [pc, #280]	@ (800c730 <TIM_Base_SetConfig+0x12c>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d013      	beq.n	800c644 <TIM_Base_SetConfig+0x40>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c622:	d00f      	beq.n	800c644 <TIM_Base_SetConfig+0x40>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a43      	ldr	r2, [pc, #268]	@ (800c734 <TIM_Base_SetConfig+0x130>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d00b      	beq.n	800c644 <TIM_Base_SetConfig+0x40>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a42      	ldr	r2, [pc, #264]	@ (800c738 <TIM_Base_SetConfig+0x134>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d007      	beq.n	800c644 <TIM_Base_SetConfig+0x40>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a41      	ldr	r2, [pc, #260]	@ (800c73c <TIM_Base_SetConfig+0x138>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d003      	beq.n	800c644 <TIM_Base_SetConfig+0x40>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a40      	ldr	r2, [pc, #256]	@ (800c740 <TIM_Base_SetConfig+0x13c>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d108      	bne.n	800c656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c64a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	4313      	orrs	r3, r2
 800c654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a35      	ldr	r2, [pc, #212]	@ (800c730 <TIM_Base_SetConfig+0x12c>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d02b      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c664:	d027      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a32      	ldr	r2, [pc, #200]	@ (800c734 <TIM_Base_SetConfig+0x130>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d023      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a31      	ldr	r2, [pc, #196]	@ (800c738 <TIM_Base_SetConfig+0x134>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d01f      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a30      	ldr	r2, [pc, #192]	@ (800c73c <TIM_Base_SetConfig+0x138>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d01b      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4a2f      	ldr	r2, [pc, #188]	@ (800c740 <TIM_Base_SetConfig+0x13c>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d017      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a2e      	ldr	r2, [pc, #184]	@ (800c744 <TIM_Base_SetConfig+0x140>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d013      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a2d      	ldr	r2, [pc, #180]	@ (800c748 <TIM_Base_SetConfig+0x144>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d00f      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4a2c      	ldr	r2, [pc, #176]	@ (800c74c <TIM_Base_SetConfig+0x148>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d00b      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	4a2b      	ldr	r2, [pc, #172]	@ (800c750 <TIM_Base_SetConfig+0x14c>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d007      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4a2a      	ldr	r2, [pc, #168]	@ (800c754 <TIM_Base_SetConfig+0x150>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d003      	beq.n	800c6b6 <TIM_Base_SetConfig+0xb2>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a29      	ldr	r2, [pc, #164]	@ (800c758 <TIM_Base_SetConfig+0x154>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d108      	bne.n	800c6c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	695b      	ldr	r3, [r3, #20]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	689a      	ldr	r2, [r3, #8]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a10      	ldr	r2, [pc, #64]	@ (800c730 <TIM_Base_SetConfig+0x12c>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d003      	beq.n	800c6fc <TIM_Base_SetConfig+0xf8>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4a12      	ldr	r2, [pc, #72]	@ (800c740 <TIM_Base_SetConfig+0x13c>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d103      	bne.n	800c704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	691a      	ldr	r2, [r3, #16]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2201      	movs	r2, #1
 800c708:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	f003 0301 	and.w	r3, r3, #1
 800c712:	2b01      	cmp	r3, #1
 800c714:	d105      	bne.n	800c722 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	691b      	ldr	r3, [r3, #16]
 800c71a:	f023 0201 	bic.w	r2, r3, #1
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	611a      	str	r2, [r3, #16]
  }
}
 800c722:	bf00      	nop
 800c724:	3714      	adds	r7, #20
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop
 800c730:	40010000 	.word	0x40010000
 800c734:	40000400 	.word	0x40000400
 800c738:	40000800 	.word	0x40000800
 800c73c:	40000c00 	.word	0x40000c00
 800c740:	40010400 	.word	0x40010400
 800c744:	40014000 	.word	0x40014000
 800c748:	40014400 	.word	0x40014400
 800c74c:	40014800 	.word	0x40014800
 800c750:	40001800 	.word	0x40001800
 800c754:	40001c00 	.word	0x40001c00
 800c758:	40002000 	.word	0x40002000

0800c75c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b087      	sub	sp, #28
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6a1b      	ldr	r3, [r3, #32]
 800c76c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	6a1b      	ldr	r3, [r3, #32]
 800c772:	f023 0201 	bic.w	r2, r3, #1
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	699b      	ldr	r3, [r3, #24]
 800c77e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	011b      	lsls	r3, r3, #4
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	4313      	orrs	r3, r2
 800c790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f023 030a 	bic.w	r3, r3, #10
 800c798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	693a      	ldr	r2, [r7, #16]
 800c7a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	697a      	ldr	r2, [r7, #20]
 800c7ac:	621a      	str	r2, [r3, #32]
}
 800c7ae:	bf00      	nop
 800c7b0:	371c      	adds	r7, #28
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr

0800c7ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7ba:	b480      	push	{r7}
 800c7bc:	b087      	sub	sp, #28
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	60f8      	str	r0, [r7, #12]
 800c7c2:	60b9      	str	r1, [r7, #8]
 800c7c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6a1b      	ldr	r3, [r3, #32]
 800c7ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6a1b      	ldr	r3, [r3, #32]
 800c7d0:	f023 0210 	bic.w	r2, r3, #16
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	699b      	ldr	r3, [r3, #24]
 800c7dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c7e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	031b      	lsls	r3, r3, #12
 800c7ea:	693a      	ldr	r2, [r7, #16]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c7f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	011b      	lsls	r3, r3, #4
 800c7fc:	697a      	ldr	r2, [r7, #20]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	697a      	ldr	r2, [r7, #20]
 800c80c:	621a      	str	r2, [r3, #32]
}
 800c80e:	bf00      	nop
 800c810:	371c      	adds	r7, #28
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c81a:	b480      	push	{r7}
 800c81c:	b085      	sub	sp, #20
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
 800c822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	4313      	orrs	r3, r2
 800c838:	f043 0307 	orr.w	r3, r3, #7
 800c83c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	609a      	str	r2, [r3, #8]
}
 800c844:	bf00      	nop
 800c846:	3714      	adds	r7, #20
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c850:	b480      	push	{r7}
 800c852:	b087      	sub	sp, #28
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
 800c85c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c86a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	021a      	lsls	r2, r3, #8
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	431a      	orrs	r2, r3
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	4313      	orrs	r3, r2
 800c878:	697a      	ldr	r2, [r7, #20]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	609a      	str	r2, [r3, #8]
}
 800c884:	bf00      	nop
 800c886:	371c      	adds	r7, #28
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d101      	bne.n	800c8a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	e05a      	b.n	800c95e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2202      	movs	r2, #2
 800c8b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a21      	ldr	r2, [pc, #132]	@ (800c96c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d022      	beq.n	800c932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8f4:	d01d      	beq.n	800c932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a1d      	ldr	r2, [pc, #116]	@ (800c970 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d018      	beq.n	800c932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a1b      	ldr	r2, [pc, #108]	@ (800c974 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d013      	beq.n	800c932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a1a      	ldr	r2, [pc, #104]	@ (800c978 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d00e      	beq.n	800c932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a18      	ldr	r2, [pc, #96]	@ (800c97c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d009      	beq.n	800c932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4a17      	ldr	r2, [pc, #92]	@ (800c980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d004      	beq.n	800c932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a15      	ldr	r2, [pc, #84]	@ (800c984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d10c      	bne.n	800c94c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	4313      	orrs	r3, r2
 800c942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2201      	movs	r2, #1
 800c950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	40010000 	.word	0x40010000
 800c970:	40000400 	.word	0x40000400
 800c974:	40000800 	.word	0x40000800
 800c978:	40000c00 	.word	0x40000c00
 800c97c:	40010400 	.word	0x40010400
 800c980:	40014000 	.word	0x40014000
 800c984:	40001800 	.word	0x40001800

0800c988 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c990:	bf00      	nop
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c9a4:	bf00      	nop
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d101      	bne.n	800c9c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e042      	b.n	800ca48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d106      	bne.n	800c9dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7f6 fb36 	bl	8003048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2224      	movs	r2, #36	@ 0x24
 800c9e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	68da      	ldr	r2, [r3, #12]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c9f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f973 	bl	800cce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	691a      	ldr	r2, [r3, #16]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ca08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	695a      	ldr	r2, [r3, #20]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ca18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	68da      	ldr	r2, [r3, #12]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ca28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2220      	movs	r2, #32
 800ca34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2220      	movs	r2, #32
 800ca3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ca46:	2300      	movs	r3, #0
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08a      	sub	sp, #40	@ 0x28
 800ca54:	af02      	add	r7, sp, #8
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	603b      	str	r3, [r7, #0]
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ca60:	2300      	movs	r3, #0
 800ca62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b20      	cmp	r3, #32
 800ca6e:	d175      	bne.n	800cb5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d002      	beq.n	800ca7c <HAL_UART_Transmit+0x2c>
 800ca76:	88fb      	ldrh	r3, [r7, #6]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d101      	bne.n	800ca80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e06e      	b.n	800cb5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2221      	movs	r2, #33	@ 0x21
 800ca8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca8e:	f7f8 fce5 	bl	800545c <HAL_GetTick>
 800ca92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	88fa      	ldrh	r2, [r7, #6]
 800ca98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	88fa      	ldrh	r2, [r7, #6]
 800ca9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800caa8:	d108      	bne.n	800cabc <HAL_UART_Transmit+0x6c>
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d104      	bne.n	800cabc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	61bb      	str	r3, [r7, #24]
 800caba:	e003      	b.n	800cac4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cac4:	e02e      	b.n	800cb24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	2200      	movs	r2, #0
 800cace:	2180      	movs	r1, #128	@ 0x80
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f000 f848 	bl	800cb66 <UART_WaitOnFlagUntilTimeout>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d005      	beq.n	800cae8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2220      	movs	r2, #32
 800cae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800cae4:	2303      	movs	r3, #3
 800cae6:	e03a      	b.n	800cb5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d10b      	bne.n	800cb06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	461a      	mov	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cafc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	3302      	adds	r3, #2
 800cb02:	61bb      	str	r3, [r7, #24]
 800cb04:	e007      	b.n	800cb16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	781a      	ldrb	r2, [r3, #0]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	3301      	adds	r3, #1
 800cb14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1cb      	bne.n	800cac6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	2200      	movs	r2, #0
 800cb36:	2140      	movs	r1, #64	@ 0x40
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f000 f814 	bl	800cb66 <UART_WaitOnFlagUntilTimeout>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d005      	beq.n	800cb50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2220      	movs	r2, #32
 800cb48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	e006      	b.n	800cb5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2220      	movs	r2, #32
 800cb54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	e000      	b.n	800cb5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800cb5c:	2302      	movs	r3, #2
  }
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3720      	adds	r7, #32
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b086      	sub	sp, #24
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	60f8      	str	r0, [r7, #12]
 800cb6e:	60b9      	str	r1, [r7, #8]
 800cb70:	603b      	str	r3, [r7, #0]
 800cb72:	4613      	mov	r3, r2
 800cb74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb76:	e03b      	b.n	800cbf0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb78:	6a3b      	ldr	r3, [r7, #32]
 800cb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb7e:	d037      	beq.n	800cbf0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb80:	f7f8 fc6c 	bl	800545c <HAL_GetTick>
 800cb84:	4602      	mov	r2, r0
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	1ad3      	subs	r3, r2, r3
 800cb8a:	6a3a      	ldr	r2, [r7, #32]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d302      	bcc.n	800cb96 <UART_WaitOnFlagUntilTimeout+0x30>
 800cb90:	6a3b      	ldr	r3, [r7, #32]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d101      	bne.n	800cb9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cb96:	2303      	movs	r3, #3
 800cb98:	e03a      	b.n	800cc10 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	f003 0304 	and.w	r3, r3, #4
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d023      	beq.n	800cbf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2b80      	cmp	r3, #128	@ 0x80
 800cbac:	d020      	beq.n	800cbf0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	2b40      	cmp	r3, #64	@ 0x40
 800cbb2:	d01d      	beq.n	800cbf0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 0308 	and.w	r3, r3, #8
 800cbbe:	2b08      	cmp	r3, #8
 800cbc0:	d116      	bne.n	800cbf0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	617b      	str	r3, [r7, #20]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	617b      	str	r3, [r7, #20]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	617b      	str	r3, [r7, #20]
 800cbd6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f000 f81d 	bl	800cc18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2208      	movs	r2, #8
 800cbe2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800cbec:	2301      	movs	r3, #1
 800cbee:	e00f      	b.n	800cc10 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	bf0c      	ite	eq
 800cc00:	2301      	moveq	r3, #1
 800cc02:	2300      	movne	r3, #0
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	461a      	mov	r2, r3
 800cc08:	79fb      	ldrb	r3, [r7, #7]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d0b4      	beq.n	800cb78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc0e:	2300      	movs	r3, #0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3718      	adds	r7, #24
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b095      	sub	sp, #84	@ 0x54
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	330c      	adds	r3, #12
 800cc26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc2a:	e853 3f00 	ldrex	r3, [r3]
 800cc2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	330c      	adds	r3, #12
 800cc3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cc40:	643a      	str	r2, [r7, #64]	@ 0x40
 800cc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc48:	e841 2300 	strex	r3, r2, [r1]
 800cc4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d1e5      	bne.n	800cc20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	3314      	adds	r3, #20
 800cc5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5c:	6a3b      	ldr	r3, [r7, #32]
 800cc5e:	e853 3f00 	ldrex	r3, [r3]
 800cc62:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	f023 0301 	bic.w	r3, r3, #1
 800cc6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	3314      	adds	r3, #20
 800cc72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc7c:	e841 2300 	strex	r3, r2, [r1]
 800cc80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1e5      	bne.n	800cc54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d119      	bne.n	800ccc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	330c      	adds	r3, #12
 800cc96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	e853 3f00 	ldrex	r3, [r3]
 800cc9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	f023 0310 	bic.w	r3, r3, #16
 800cca6:	647b      	str	r3, [r7, #68]	@ 0x44
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	330c      	adds	r3, #12
 800ccae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccb0:	61ba      	str	r2, [r7, #24]
 800ccb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb4:	6979      	ldr	r1, [r7, #20]
 800ccb6:	69ba      	ldr	r2, [r7, #24]
 800ccb8:	e841 2300 	strex	r3, r2, [r1]
 800ccbc:	613b      	str	r3, [r7, #16]
   return(result);
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d1e5      	bne.n	800cc90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2220      	movs	r2, #32
 800ccc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ccd2:	bf00      	nop
 800ccd4:	3754      	adds	r7, #84	@ 0x54
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr
	...

0800cce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cce4:	b0c0      	sub	sp, #256	@ 0x100
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ccec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	691b      	ldr	r3, [r3, #16]
 800ccf4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ccf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccfc:	68d9      	ldr	r1, [r3, #12]
 800ccfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	ea40 0301 	orr.w	r3, r0, r1
 800cd08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cd0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd0e:	689a      	ldr	r2, [r3, #8]
 800cd10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	431a      	orrs	r2, r3
 800cd18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	431a      	orrs	r2, r3
 800cd20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd24:	69db      	ldr	r3, [r3, #28]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cd2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cd38:	f021 010c 	bic.w	r1, r1, #12
 800cd3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cd46:	430b      	orrs	r3, r1
 800cd48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cd4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	695b      	ldr	r3, [r3, #20]
 800cd52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cd56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd5a:	6999      	ldr	r1, [r3, #24]
 800cd5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	ea40 0301 	orr.w	r3, r0, r1
 800cd66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cd68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	4b8f      	ldr	r3, [pc, #572]	@ (800cfac <UART_SetConfig+0x2cc>)
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d005      	beq.n	800cd80 <UART_SetConfig+0xa0>
 800cd74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	4b8d      	ldr	r3, [pc, #564]	@ (800cfb0 <UART_SetConfig+0x2d0>)
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d104      	bne.n	800cd8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cd80:	f7fe f902 	bl	800af88 <HAL_RCC_GetPCLK2Freq>
 800cd84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cd88:	e003      	b.n	800cd92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cd8a:	f7fe f8e9 	bl	800af60 <HAL_RCC_GetPCLK1Freq>
 800cd8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd96:	69db      	ldr	r3, [r3, #28]
 800cd98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd9c:	f040 810c 	bne.w	800cfb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cda0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cda4:	2200      	movs	r2, #0
 800cda6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cdaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cdae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cdb2:	4622      	mov	r2, r4
 800cdb4:	462b      	mov	r3, r5
 800cdb6:	1891      	adds	r1, r2, r2
 800cdb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cdba:	415b      	adcs	r3, r3
 800cdbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cdbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cdc2:	4621      	mov	r1, r4
 800cdc4:	eb12 0801 	adds.w	r8, r2, r1
 800cdc8:	4629      	mov	r1, r5
 800cdca:	eb43 0901 	adc.w	r9, r3, r1
 800cdce:	f04f 0200 	mov.w	r2, #0
 800cdd2:	f04f 0300 	mov.w	r3, #0
 800cdd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cdda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cdde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cde2:	4690      	mov	r8, r2
 800cde4:	4699      	mov	r9, r3
 800cde6:	4623      	mov	r3, r4
 800cde8:	eb18 0303 	adds.w	r3, r8, r3
 800cdec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cdf0:	462b      	mov	r3, r5
 800cdf2:	eb49 0303 	adc.w	r3, r9, r3
 800cdf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cdfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	2200      	movs	r2, #0
 800ce02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ce06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ce0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ce0e:	460b      	mov	r3, r1
 800ce10:	18db      	adds	r3, r3, r3
 800ce12:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce14:	4613      	mov	r3, r2
 800ce16:	eb42 0303 	adc.w	r3, r2, r3
 800ce1a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ce20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ce24:	f7f3 fa3c 	bl	80002a0 <__aeabi_uldivmod>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	460b      	mov	r3, r1
 800ce2c:	4b61      	ldr	r3, [pc, #388]	@ (800cfb4 <UART_SetConfig+0x2d4>)
 800ce2e:	fba3 2302 	umull	r2, r3, r3, r2
 800ce32:	095b      	lsrs	r3, r3, #5
 800ce34:	011c      	lsls	r4, r3, #4
 800ce36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ce40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ce44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ce48:	4642      	mov	r2, r8
 800ce4a:	464b      	mov	r3, r9
 800ce4c:	1891      	adds	r1, r2, r2
 800ce4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ce50:	415b      	adcs	r3, r3
 800ce52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ce58:	4641      	mov	r1, r8
 800ce5a:	eb12 0a01 	adds.w	sl, r2, r1
 800ce5e:	4649      	mov	r1, r9
 800ce60:	eb43 0b01 	adc.w	fp, r3, r1
 800ce64:	f04f 0200 	mov.w	r2, #0
 800ce68:	f04f 0300 	mov.w	r3, #0
 800ce6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ce70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ce74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ce78:	4692      	mov	sl, r2
 800ce7a:	469b      	mov	fp, r3
 800ce7c:	4643      	mov	r3, r8
 800ce7e:	eb1a 0303 	adds.w	r3, sl, r3
 800ce82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ce86:	464b      	mov	r3, r9
 800ce88:	eb4b 0303 	adc.w	r3, fp, r3
 800ce8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ce90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800cea0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cea4:	460b      	mov	r3, r1
 800cea6:	18db      	adds	r3, r3, r3
 800cea8:	643b      	str	r3, [r7, #64]	@ 0x40
 800ceaa:	4613      	mov	r3, r2
 800ceac:	eb42 0303 	adc.w	r3, r2, r3
 800ceb0:	647b      	str	r3, [r7, #68]	@ 0x44
 800ceb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ceb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ceba:	f7f3 f9f1 	bl	80002a0 <__aeabi_uldivmod>
 800cebe:	4602      	mov	r2, r0
 800cec0:	460b      	mov	r3, r1
 800cec2:	4611      	mov	r1, r2
 800cec4:	4b3b      	ldr	r3, [pc, #236]	@ (800cfb4 <UART_SetConfig+0x2d4>)
 800cec6:	fba3 2301 	umull	r2, r3, r3, r1
 800ceca:	095b      	lsrs	r3, r3, #5
 800cecc:	2264      	movs	r2, #100	@ 0x64
 800cece:	fb02 f303 	mul.w	r3, r2, r3
 800ced2:	1acb      	subs	r3, r1, r3
 800ced4:	00db      	lsls	r3, r3, #3
 800ced6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ceda:	4b36      	ldr	r3, [pc, #216]	@ (800cfb4 <UART_SetConfig+0x2d4>)
 800cedc:	fba3 2302 	umull	r2, r3, r3, r2
 800cee0:	095b      	lsrs	r3, r3, #5
 800cee2:	005b      	lsls	r3, r3, #1
 800cee4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800cee8:	441c      	add	r4, r3
 800ceea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ceee:	2200      	movs	r2, #0
 800cef0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cef4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800cef8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800cefc:	4642      	mov	r2, r8
 800cefe:	464b      	mov	r3, r9
 800cf00:	1891      	adds	r1, r2, r2
 800cf02:	63b9      	str	r1, [r7, #56]	@ 0x38
 800cf04:	415b      	adcs	r3, r3
 800cf06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cf0c:	4641      	mov	r1, r8
 800cf0e:	1851      	adds	r1, r2, r1
 800cf10:	6339      	str	r1, [r7, #48]	@ 0x30
 800cf12:	4649      	mov	r1, r9
 800cf14:	414b      	adcs	r3, r1
 800cf16:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf18:	f04f 0200 	mov.w	r2, #0
 800cf1c:	f04f 0300 	mov.w	r3, #0
 800cf20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800cf24:	4659      	mov	r1, fp
 800cf26:	00cb      	lsls	r3, r1, #3
 800cf28:	4651      	mov	r1, sl
 800cf2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cf2e:	4651      	mov	r1, sl
 800cf30:	00ca      	lsls	r2, r1, #3
 800cf32:	4610      	mov	r0, r2
 800cf34:	4619      	mov	r1, r3
 800cf36:	4603      	mov	r3, r0
 800cf38:	4642      	mov	r2, r8
 800cf3a:	189b      	adds	r3, r3, r2
 800cf3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf40:	464b      	mov	r3, r9
 800cf42:	460a      	mov	r2, r1
 800cf44:	eb42 0303 	adc.w	r3, r2, r3
 800cf48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cf58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cf5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cf60:	460b      	mov	r3, r1
 800cf62:	18db      	adds	r3, r3, r3
 800cf64:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf66:	4613      	mov	r3, r2
 800cf68:	eb42 0303 	adc.w	r3, r2, r3
 800cf6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cf72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800cf76:	f7f3 f993 	bl	80002a0 <__aeabi_uldivmod>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb4 <UART_SetConfig+0x2d4>)
 800cf80:	fba3 1302 	umull	r1, r3, r3, r2
 800cf84:	095b      	lsrs	r3, r3, #5
 800cf86:	2164      	movs	r1, #100	@ 0x64
 800cf88:	fb01 f303 	mul.w	r3, r1, r3
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	00db      	lsls	r3, r3, #3
 800cf90:	3332      	adds	r3, #50	@ 0x32
 800cf92:	4a08      	ldr	r2, [pc, #32]	@ (800cfb4 <UART_SetConfig+0x2d4>)
 800cf94:	fba2 2303 	umull	r2, r3, r2, r3
 800cf98:	095b      	lsrs	r3, r3, #5
 800cf9a:	f003 0207 	and.w	r2, r3, #7
 800cf9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4422      	add	r2, r4
 800cfa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cfa8:	e106      	b.n	800d1b8 <UART_SetConfig+0x4d8>
 800cfaa:	bf00      	nop
 800cfac:	40011000 	.word	0x40011000
 800cfb0:	40011400 	.word	0x40011400
 800cfb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cfb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cfc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cfc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800cfca:	4642      	mov	r2, r8
 800cfcc:	464b      	mov	r3, r9
 800cfce:	1891      	adds	r1, r2, r2
 800cfd0:	6239      	str	r1, [r7, #32]
 800cfd2:	415b      	adcs	r3, r3
 800cfd4:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cfda:	4641      	mov	r1, r8
 800cfdc:	1854      	adds	r4, r2, r1
 800cfde:	4649      	mov	r1, r9
 800cfe0:	eb43 0501 	adc.w	r5, r3, r1
 800cfe4:	f04f 0200 	mov.w	r2, #0
 800cfe8:	f04f 0300 	mov.w	r3, #0
 800cfec:	00eb      	lsls	r3, r5, #3
 800cfee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cff2:	00e2      	lsls	r2, r4, #3
 800cff4:	4614      	mov	r4, r2
 800cff6:	461d      	mov	r5, r3
 800cff8:	4643      	mov	r3, r8
 800cffa:	18e3      	adds	r3, r4, r3
 800cffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d000:	464b      	mov	r3, r9
 800d002:	eb45 0303 	adc.w	r3, r5, r3
 800d006:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d00a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	2200      	movs	r2, #0
 800d012:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d016:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d01a:	f04f 0200 	mov.w	r2, #0
 800d01e:	f04f 0300 	mov.w	r3, #0
 800d022:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d026:	4629      	mov	r1, r5
 800d028:	008b      	lsls	r3, r1, #2
 800d02a:	4621      	mov	r1, r4
 800d02c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d030:	4621      	mov	r1, r4
 800d032:	008a      	lsls	r2, r1, #2
 800d034:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d038:	f7f3 f932 	bl	80002a0 <__aeabi_uldivmod>
 800d03c:	4602      	mov	r2, r0
 800d03e:	460b      	mov	r3, r1
 800d040:	4b60      	ldr	r3, [pc, #384]	@ (800d1c4 <UART_SetConfig+0x4e4>)
 800d042:	fba3 2302 	umull	r2, r3, r3, r2
 800d046:	095b      	lsrs	r3, r3, #5
 800d048:	011c      	lsls	r4, r3, #4
 800d04a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d04e:	2200      	movs	r2, #0
 800d050:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d054:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d058:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d05c:	4642      	mov	r2, r8
 800d05e:	464b      	mov	r3, r9
 800d060:	1891      	adds	r1, r2, r2
 800d062:	61b9      	str	r1, [r7, #24]
 800d064:	415b      	adcs	r3, r3
 800d066:	61fb      	str	r3, [r7, #28]
 800d068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d06c:	4641      	mov	r1, r8
 800d06e:	1851      	adds	r1, r2, r1
 800d070:	6139      	str	r1, [r7, #16]
 800d072:	4649      	mov	r1, r9
 800d074:	414b      	adcs	r3, r1
 800d076:	617b      	str	r3, [r7, #20]
 800d078:	f04f 0200 	mov.w	r2, #0
 800d07c:	f04f 0300 	mov.w	r3, #0
 800d080:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d084:	4659      	mov	r1, fp
 800d086:	00cb      	lsls	r3, r1, #3
 800d088:	4651      	mov	r1, sl
 800d08a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d08e:	4651      	mov	r1, sl
 800d090:	00ca      	lsls	r2, r1, #3
 800d092:	4610      	mov	r0, r2
 800d094:	4619      	mov	r1, r3
 800d096:	4603      	mov	r3, r0
 800d098:	4642      	mov	r2, r8
 800d09a:	189b      	adds	r3, r3, r2
 800d09c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d0a0:	464b      	mov	r3, r9
 800d0a2:	460a      	mov	r2, r1
 800d0a4:	eb42 0303 	adc.w	r3, r2, r3
 800d0a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d0b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d0b8:	f04f 0200 	mov.w	r2, #0
 800d0bc:	f04f 0300 	mov.w	r3, #0
 800d0c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d0c4:	4649      	mov	r1, r9
 800d0c6:	008b      	lsls	r3, r1, #2
 800d0c8:	4641      	mov	r1, r8
 800d0ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d0ce:	4641      	mov	r1, r8
 800d0d0:	008a      	lsls	r2, r1, #2
 800d0d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d0d6:	f7f3 f8e3 	bl	80002a0 <__aeabi_uldivmod>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	460b      	mov	r3, r1
 800d0de:	4611      	mov	r1, r2
 800d0e0:	4b38      	ldr	r3, [pc, #224]	@ (800d1c4 <UART_SetConfig+0x4e4>)
 800d0e2:	fba3 2301 	umull	r2, r3, r3, r1
 800d0e6:	095b      	lsrs	r3, r3, #5
 800d0e8:	2264      	movs	r2, #100	@ 0x64
 800d0ea:	fb02 f303 	mul.w	r3, r2, r3
 800d0ee:	1acb      	subs	r3, r1, r3
 800d0f0:	011b      	lsls	r3, r3, #4
 800d0f2:	3332      	adds	r3, #50	@ 0x32
 800d0f4:	4a33      	ldr	r2, [pc, #204]	@ (800d1c4 <UART_SetConfig+0x4e4>)
 800d0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d0fa:	095b      	lsrs	r3, r3, #5
 800d0fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d100:	441c      	add	r4, r3
 800d102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d106:	2200      	movs	r2, #0
 800d108:	673b      	str	r3, [r7, #112]	@ 0x70
 800d10a:	677a      	str	r2, [r7, #116]	@ 0x74
 800d10c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d110:	4642      	mov	r2, r8
 800d112:	464b      	mov	r3, r9
 800d114:	1891      	adds	r1, r2, r2
 800d116:	60b9      	str	r1, [r7, #8]
 800d118:	415b      	adcs	r3, r3
 800d11a:	60fb      	str	r3, [r7, #12]
 800d11c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d120:	4641      	mov	r1, r8
 800d122:	1851      	adds	r1, r2, r1
 800d124:	6039      	str	r1, [r7, #0]
 800d126:	4649      	mov	r1, r9
 800d128:	414b      	adcs	r3, r1
 800d12a:	607b      	str	r3, [r7, #4]
 800d12c:	f04f 0200 	mov.w	r2, #0
 800d130:	f04f 0300 	mov.w	r3, #0
 800d134:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d138:	4659      	mov	r1, fp
 800d13a:	00cb      	lsls	r3, r1, #3
 800d13c:	4651      	mov	r1, sl
 800d13e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d142:	4651      	mov	r1, sl
 800d144:	00ca      	lsls	r2, r1, #3
 800d146:	4610      	mov	r0, r2
 800d148:	4619      	mov	r1, r3
 800d14a:	4603      	mov	r3, r0
 800d14c:	4642      	mov	r2, r8
 800d14e:	189b      	adds	r3, r3, r2
 800d150:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d152:	464b      	mov	r3, r9
 800d154:	460a      	mov	r2, r1
 800d156:	eb42 0303 	adc.w	r3, r2, r3
 800d15a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d15c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	663b      	str	r3, [r7, #96]	@ 0x60
 800d166:	667a      	str	r2, [r7, #100]	@ 0x64
 800d168:	f04f 0200 	mov.w	r2, #0
 800d16c:	f04f 0300 	mov.w	r3, #0
 800d170:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d174:	4649      	mov	r1, r9
 800d176:	008b      	lsls	r3, r1, #2
 800d178:	4641      	mov	r1, r8
 800d17a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d17e:	4641      	mov	r1, r8
 800d180:	008a      	lsls	r2, r1, #2
 800d182:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d186:	f7f3 f88b 	bl	80002a0 <__aeabi_uldivmod>
 800d18a:	4602      	mov	r2, r0
 800d18c:	460b      	mov	r3, r1
 800d18e:	4b0d      	ldr	r3, [pc, #52]	@ (800d1c4 <UART_SetConfig+0x4e4>)
 800d190:	fba3 1302 	umull	r1, r3, r3, r2
 800d194:	095b      	lsrs	r3, r3, #5
 800d196:	2164      	movs	r1, #100	@ 0x64
 800d198:	fb01 f303 	mul.w	r3, r1, r3
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	011b      	lsls	r3, r3, #4
 800d1a0:	3332      	adds	r3, #50	@ 0x32
 800d1a2:	4a08      	ldr	r2, [pc, #32]	@ (800d1c4 <UART_SetConfig+0x4e4>)
 800d1a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d1a8:	095b      	lsrs	r3, r3, #5
 800d1aa:	f003 020f 	and.w	r2, r3, #15
 800d1ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4422      	add	r2, r4
 800d1b6:	609a      	str	r2, [r3, #8]
}
 800d1b8:	bf00      	nop
 800d1ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d1c4:	51eb851f 	.word	0x51eb851f

0800d1c8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d123      	bne.n	800d222 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800d1e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d1e6:	683a      	ldr	r2, [r7, #0]
 800d1e8:	6851      	ldr	r1, [r2, #4]
 800d1ea:	683a      	ldr	r2, [r7, #0]
 800d1ec:	6892      	ldr	r2, [r2, #8]
 800d1ee:	4311      	orrs	r1, r2
 800d1f0:	683a      	ldr	r2, [r7, #0]
 800d1f2:	68d2      	ldr	r2, [r2, #12]
 800d1f4:	4311      	orrs	r1, r2
 800d1f6:	683a      	ldr	r2, [r7, #0]
 800d1f8:	6912      	ldr	r2, [r2, #16]
 800d1fa:	4311      	orrs	r1, r2
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	6952      	ldr	r2, [r2, #20]
 800d200:	4311      	orrs	r1, r2
 800d202:	683a      	ldr	r2, [r7, #0]
 800d204:	6992      	ldr	r2, [r2, #24]
 800d206:	4311      	orrs	r1, r2
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	69d2      	ldr	r2, [r2, #28]
 800d20c:	4311      	orrs	r1, r2
 800d20e:	683a      	ldr	r2, [r7, #0]
 800d210:	6a12      	ldr	r2, [r2, #32]
 800d212:	4311      	orrs	r1, r2
 800d214:	683a      	ldr	r2, [r7, #0]
 800d216:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d218:	430a      	orrs	r2, r1
 800d21a:	431a      	orrs	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	601a      	str	r2, [r3, #0]
 800d220:	e028      	b.n	800d274 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	69d9      	ldr	r1, [r3, #28]
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	4319      	orrs	r1, r3
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d238:	430b      	orrs	r3, r1
 800d23a:	431a      	orrs	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800d248:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d24c:	683a      	ldr	r2, [r7, #0]
 800d24e:	6851      	ldr	r1, [r2, #4]
 800d250:	683a      	ldr	r2, [r7, #0]
 800d252:	6892      	ldr	r2, [r2, #8]
 800d254:	4311      	orrs	r1, r2
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	68d2      	ldr	r2, [r2, #12]
 800d25a:	4311      	orrs	r1, r2
 800d25c:	683a      	ldr	r2, [r7, #0]
 800d25e:	6912      	ldr	r2, [r2, #16]
 800d260:	4311      	orrs	r1, r2
 800d262:	683a      	ldr	r2, [r7, #0]
 800d264:	6952      	ldr	r2, [r2, #20]
 800d266:	4311      	orrs	r1, r2
 800d268:	683a      	ldr	r2, [r7, #0]
 800d26a:	6992      	ldr	r2, [r2, #24]
 800d26c:	430a      	orrs	r2, r1
 800d26e:	431a      	orrs	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr

0800d282 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d282:	b480      	push	{r7}
 800d284:	b085      	sub	sp, #20
 800d286:	af00      	add	r7, sp, #0
 800d288:	60f8      	str	r0, [r7, #12]
 800d28a:	60b9      	str	r1, [r7, #8]
 800d28c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d128      	bne.n	800d2e6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	689b      	ldr	r3, [r3, #8]
 800d298:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	1e59      	subs	r1, r3, #1
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	011b      	lsls	r3, r3, #4
 800d2aa:	4319      	orrs	r1, r3
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	021b      	lsls	r3, r3, #8
 800d2b4:	4319      	orrs	r1, r3
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	031b      	lsls	r3, r3, #12
 800d2be:	4319      	orrs	r1, r3
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	041b      	lsls	r3, r3, #16
 800d2c8:	4319      	orrs	r1, r3
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	695b      	ldr	r3, [r3, #20]
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	051b      	lsls	r3, r3, #20
 800d2d2:	4319      	orrs	r1, r3
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	061b      	lsls	r3, r3, #24
 800d2dc:	430b      	orrs	r3, r1
 800d2de:	431a      	orrs	r2, r3
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	609a      	str	r2, [r3, #8]
 800d2e4:	e02f      	b.n	800d346 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d2ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	68d2      	ldr	r2, [r2, #12]
 800d2f6:	3a01      	subs	r2, #1
 800d2f8:	0311      	lsls	r1, r2, #12
 800d2fa:	68ba      	ldr	r2, [r7, #8]
 800d2fc:	6952      	ldr	r2, [r2, #20]
 800d2fe:	3a01      	subs	r2, #1
 800d300:	0512      	lsls	r2, r2, #20
 800d302:	430a      	orrs	r2, r1
 800d304:	431a      	orrs	r2, r3
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	1e59      	subs	r1, r3, #1
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	3b01      	subs	r3, #1
 800d31e:	011b      	lsls	r3, r3, #4
 800d320:	4319      	orrs	r1, r3
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	689b      	ldr	r3, [r3, #8]
 800d326:	3b01      	subs	r3, #1
 800d328:	021b      	lsls	r3, r3, #8
 800d32a:	4319      	orrs	r1, r3
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	691b      	ldr	r3, [r3, #16]
 800d330:	3b01      	subs	r3, #1
 800d332:	041b      	lsls	r3, r3, #16
 800d334:	4319      	orrs	r1, r3
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	699b      	ldr	r3, [r3, #24]
 800d33a:	3b01      	subs	r3, #1
 800d33c:	061b      	lsls	r3, r3, #24
 800d33e:	430b      	orrs	r3, r1
 800d340:	431a      	orrs	r2, r3
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d346:	2300      	movs	r3, #0
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3714      	adds	r7, #20
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b086      	sub	sp, #24
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800d360:	2300      	movs	r3, #0
 800d362:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	0d9b      	lsrs	r3, r3, #22
 800d36a:	059b      	lsls	r3, r3, #22
 800d36c:	68ba      	ldr	r2, [r7, #8]
 800d36e:	6811      	ldr	r1, [r2, #0]
 800d370:	68ba      	ldr	r2, [r7, #8]
 800d372:	6852      	ldr	r2, [r2, #4]
 800d374:	4311      	orrs	r1, r2
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	6892      	ldr	r2, [r2, #8]
 800d37a:	3a01      	subs	r2, #1
 800d37c:	0152      	lsls	r2, r2, #5
 800d37e:	4311      	orrs	r1, r2
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	68d2      	ldr	r2, [r2, #12]
 800d384:	0252      	lsls	r2, r2, #9
 800d386:	430a      	orrs	r2, r1
 800d388:	431a      	orrs	r2, r3
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800d38e:	f7f8 f865 	bl	800545c <HAL_GetTick>
 800d392:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800d394:	e010      	b.n	800d3b8 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d39c:	d00c      	beq.n	800d3b8 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d007      	beq.n	800d3b4 <FMC_SDRAM_SendCommand+0x60>
 800d3a4:	f7f8 f85a 	bl	800545c <HAL_GetTick>
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d201      	bcs.n	800d3b8 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800d3b4:	2303      	movs	r3, #3
 800d3b6:	e006      	b.n	800d3c6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	699b      	ldr	r3, [r3, #24]
 800d3bc:	f003 0320 	and.w	r3, r3, #32
 800d3c0:	2b20      	cmp	r3, #32
 800d3c2:	d0e8      	beq.n	800d396 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800d3c4:	2300      	movs	r3, #0
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3718      	adds	r7, #24
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d3ce:	b480      	push	{r7}
 800d3d0:	b083      	sub	sp, #12
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
 800d3d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	695b      	ldr	r3, [r3, #20]
 800d3dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800d3e0:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800d3e4:	683a      	ldr	r2, [r7, #0]
 800d3e6:	0052      	lsls	r2, r2, #1
 800d3e8:	431a      	orrs	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d3fc:	b084      	sub	sp, #16
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b084      	sub	sp, #16
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	f107 001c 	add.w	r0, r7, #28
 800d40a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d40e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d412:	2b01      	cmp	r3, #1
 800d414:	d123      	bne.n	800d45e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d41a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800d42a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	68db      	ldr	r3, [r3, #12]
 800d436:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d43e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d442:	2b01      	cmp	r3, #1
 800d444:	d105      	bne.n	800d452 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 f9dc 	bl	800d810 <USB_CoreReset>
 800d458:	4603      	mov	r3, r0
 800d45a:	73fb      	strb	r3, [r7, #15]
 800d45c:	e01b      	b.n	800d496 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f9d0 	bl	800d810 <USB_CoreReset>
 800d470:	4603      	mov	r3, r0
 800d472:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d474:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d106      	bne.n	800d48a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d480:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	639a      	str	r2, [r3, #56]	@ 0x38
 800d488:	e005      	b.n	800d496 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d48e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d496:	7fbb      	ldrb	r3, [r7, #30]
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d10b      	bne.n	800d4b4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	689b      	ldr	r3, [r3, #8]
 800d4a0:	f043 0206 	orr.w	r2, r3, #6
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	f043 0220 	orr.w	r2, r3, #32
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d4c0:	b004      	add	sp, #16
 800d4c2:	4770      	bx	lr

0800d4c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	689b      	ldr	r3, [r3, #8]
 800d4d0:	f043 0201 	orr.w	r2, r3, #1
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	370c      	adds	r7, #12
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr

0800d4e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d4e6:	b480      	push	{r7}
 800d4e8:	b083      	sub	sp, #12
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	689b      	ldr	r3, [r3, #8]
 800d4f2:	f023 0201 	bic.w	r2, r3, #1
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d4fa:	2300      	movs	r3, #0
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	460b      	mov	r3, r1
 800d512:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d514:	2300      	movs	r3, #0
 800d516:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d524:	78fb      	ldrb	r3, [r7, #3]
 800d526:	2b01      	cmp	r3, #1
 800d528:	d115      	bne.n	800d556 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	68db      	ldr	r3, [r3, #12]
 800d52e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d536:	200a      	movs	r0, #10
 800d538:	f7f7 ff9c 	bl	8005474 <HAL_Delay>
      ms += 10U;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	330a      	adds	r3, #10
 800d540:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f956 	bl	800d7f4 <USB_GetMode>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d01e      	beq.n	800d58c <USB_SetCurrentMode+0x84>
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2bc7      	cmp	r3, #199	@ 0xc7
 800d552:	d9f0      	bls.n	800d536 <USB_SetCurrentMode+0x2e>
 800d554:	e01a      	b.n	800d58c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d556:	78fb      	ldrb	r3, [r7, #3]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d115      	bne.n	800d588 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d568:	200a      	movs	r0, #10
 800d56a:	f7f7 ff83 	bl	8005474 <HAL_Delay>
      ms += 10U;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	330a      	adds	r3, #10
 800d572:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 f93d 	bl	800d7f4 <USB_GetMode>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d005      	beq.n	800d58c <USB_SetCurrentMode+0x84>
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2bc7      	cmp	r3, #199	@ 0xc7
 800d584:	d9f0      	bls.n	800d568 <USB_SetCurrentMode+0x60>
 800d586:	e001      	b.n	800d58c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	e005      	b.n	800d598 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2bc8      	cmp	r3, #200	@ 0xc8
 800d590:	d101      	bne.n	800d596 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	e000      	b.n	800d598 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3710      	adds	r7, #16
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d5ba:	d901      	bls.n	800d5c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d5bc:	2303      	movs	r3, #3
 800d5be:	e01b      	b.n	800d5f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	daf2      	bge.n	800d5ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	019b      	lsls	r3, r3, #6
 800d5d0:	f043 0220 	orr.w	r2, r3, #32
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d5e4:	d901      	bls.n	800d5ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d5e6:	2303      	movs	r3, #3
 800d5e8:	e006      	b.n	800d5f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	691b      	ldr	r3, [r3, #16]
 800d5ee:	f003 0320 	and.w	r3, r3, #32
 800d5f2:	2b20      	cmp	r3, #32
 800d5f4:	d0f0      	beq.n	800d5d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3714      	adds	r7, #20
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d60c:	2300      	movs	r3, #0
 800d60e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	3301      	adds	r3, #1
 800d614:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d61c:	d901      	bls.n	800d622 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d61e:	2303      	movs	r3, #3
 800d620:	e018      	b.n	800d654 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	daf2      	bge.n	800d610 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d62a:	2300      	movs	r3, #0
 800d62c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2210      	movs	r2, #16
 800d632:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3301      	adds	r3, #1
 800d638:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d640:	d901      	bls.n	800d646 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d642:	2303      	movs	r3, #3
 800d644:	e006      	b.n	800d654 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	f003 0310 	and.w	r3, r3, #16
 800d64e:	2b10      	cmp	r3, #16
 800d650:	d0f0      	beq.n	800d634 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d652:	2300      	movs	r3, #0
}
 800d654:	4618      	mov	r0, r3
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d660:	b480      	push	{r7}
 800d662:	b089      	sub	sp, #36	@ 0x24
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	4611      	mov	r1, r2
 800d66c:	461a      	mov	r2, r3
 800d66e:	460b      	mov	r3, r1
 800d670:	71fb      	strb	r3, [r7, #7]
 800d672:	4613      	mov	r3, r2
 800d674:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d67e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d682:	2b00      	cmp	r3, #0
 800d684:	d123      	bne.n	800d6ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d686:	88bb      	ldrh	r3, [r7, #4]
 800d688:	3303      	adds	r3, #3
 800d68a:	089b      	lsrs	r3, r3, #2
 800d68c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d68e:	2300      	movs	r3, #0
 800d690:	61bb      	str	r3, [r7, #24]
 800d692:	e018      	b.n	800d6c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d694:	79fb      	ldrb	r3, [r7, #7]
 800d696:	031a      	lsls	r2, r3, #12
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	4413      	add	r3, r2
 800d69c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	69fb      	ldr	r3, [r7, #28]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d6c0:	69bb      	ldr	r3, [r7, #24]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	61bb      	str	r3, [r7, #24]
 800d6c6:	69ba      	ldr	r2, [r7, #24]
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d3e2      	bcc.n	800d694 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3724      	adds	r7, #36	@ 0x24
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b08b      	sub	sp, #44	@ 0x2c
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	4613      	mov	r3, r2
 800d6e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d6f2:	88fb      	ldrh	r3, [r7, #6]
 800d6f4:	089b      	lsrs	r3, r3, #2
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d6fa:	88fb      	ldrh	r3, [r7, #6]
 800d6fc:	f003 0303 	and.w	r3, r3, #3
 800d700:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d702:	2300      	movs	r3, #0
 800d704:	623b      	str	r3, [r7, #32]
 800d706:	e014      	b.n	800d732 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d712:	601a      	str	r2, [r3, #0]
    pDest++;
 800d714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d716:	3301      	adds	r3, #1
 800d718:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71c:	3301      	adds	r3, #1
 800d71e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d722:	3301      	adds	r3, #1
 800d724:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d728:	3301      	adds	r3, #1
 800d72a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d72c:	6a3b      	ldr	r3, [r7, #32]
 800d72e:	3301      	adds	r3, #1
 800d730:	623b      	str	r3, [r7, #32]
 800d732:	6a3a      	ldr	r2, [r7, #32]
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	429a      	cmp	r2, r3
 800d738:	d3e6      	bcc.n	800d708 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d73a:	8bfb      	ldrh	r3, [r7, #30]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d01e      	beq.n	800d77e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d740:	2300      	movs	r3, #0
 800d742:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d74a:	461a      	mov	r2, r3
 800d74c:	f107 0310 	add.w	r3, r7, #16
 800d750:	6812      	ldr	r2, [r2, #0]
 800d752:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d754:	693a      	ldr	r2, [r7, #16]
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	00db      	lsls	r3, r3, #3
 800d75c:	fa22 f303 	lsr.w	r3, r2, r3
 800d760:	b2da      	uxtb	r2, r3
 800d762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d764:	701a      	strb	r2, [r3, #0]
      i++;
 800d766:	6a3b      	ldr	r3, [r7, #32]
 800d768:	3301      	adds	r3, #1
 800d76a:	623b      	str	r3, [r7, #32]
      pDest++;
 800d76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76e:	3301      	adds	r3, #1
 800d770:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d772:	8bfb      	ldrh	r3, [r7, #30]
 800d774:	3b01      	subs	r3, #1
 800d776:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d778:	8bfb      	ldrh	r3, [r7, #30]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d1ea      	bne.n	800d754 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d780:	4618      	mov	r0, r3
 800d782:	372c      	adds	r7, #44	@ 0x2c
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b085      	sub	sp, #20
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	695b      	ldr	r3, [r3, #20]
 800d798:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	699b      	ldr	r3, [r3, #24]
 800d79e:	68fa      	ldr	r2, [r7, #12]
 800d7a0:	4013      	ands	r3, r2
 800d7a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3714      	adds	r7, #20
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr

0800d7b2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800d7b2:	b480      	push	{r7}
 800d7b4:	b085      	sub	sp, #20
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800d7c2:	78fb      	ldrb	r3, [r7, #3]
 800d7c4:	015a      	lsls	r2, r3, #5
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800d7d2:	78fb      	ldrb	r3, [r7, #3]
 800d7d4:	015a      	lsls	r2, r3, #5
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	4413      	add	r3, r2
 800d7da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d7de:	68db      	ldr	r3, [r3, #12]
 800d7e0:	68ba      	ldr	r2, [r7, #8]
 800d7e2:	4013      	ands	r3, r2
 800d7e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3714      	adds	r7, #20
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	695b      	ldr	r3, [r3, #20]
 800d800:	f003 0301 	and.w	r3, r3, #1
}
 800d804:	4618      	mov	r0, r3
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d810:	b480      	push	{r7}
 800d812:	b085      	sub	sp, #20
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d818:	2300      	movs	r3, #0
 800d81a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	3301      	adds	r3, #1
 800d820:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d828:	d901      	bls.n	800d82e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d82a:	2303      	movs	r3, #3
 800d82c:	e01b      	b.n	800d866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	2b00      	cmp	r3, #0
 800d834:	daf2      	bge.n	800d81c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d836:	2300      	movs	r3, #0
 800d838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	691b      	ldr	r3, [r3, #16]
 800d83e:	f043 0201 	orr.w	r2, r3, #1
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	3301      	adds	r3, #1
 800d84a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d852:	d901      	bls.n	800d858 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d854:	2303      	movs	r3, #3
 800d856:	e006      	b.n	800d866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	f003 0301 	and.w	r3, r3, #1
 800d860:	2b01      	cmp	r3, #1
 800d862:	d0f0      	beq.n	800d846 <USB_CoreReset+0x36>

  return HAL_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3714      	adds	r7, #20
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr
	...

0800d874 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d874:	b084      	sub	sp, #16
 800d876:	b580      	push	{r7, lr}
 800d878:	b086      	sub	sp, #24
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
 800d87e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d886:	2300      	movs	r3, #0
 800d888:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d894:	461a      	mov	r2, r3
 800d896:	2300      	movs	r3, #0
 800d898:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d89e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8aa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8b6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d119      	bne.n	800d8fe <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d8ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d10a      	bne.n	800d8e8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d8e0:	f043 0304 	orr.w	r3, r3, #4
 800d8e4:	6013      	str	r3, [r2, #0]
 800d8e6:	e014      	b.n	800d912 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d8f6:	f023 0304 	bic.w	r3, r3, #4
 800d8fa:	6013      	str	r3, [r2, #0]
 800d8fc:	e009      	b.n	800d912 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	68fa      	ldr	r2, [r7, #12]
 800d908:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d90c:	f023 0304 	bic.w	r3, r3, #4
 800d910:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d912:	2110      	movs	r1, #16
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f7ff fe43 	bl	800d5a0 <USB_FlushTxFifo>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d001      	beq.n	800d924 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800d920:	2301      	movs	r3, #1
 800d922:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7ff fe6d 	bl	800d604 <USB_FlushRxFifo>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d001      	beq.n	800d934 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800d930:	2301      	movs	r3, #1
 800d932:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d934:	2300      	movs	r3, #0
 800d936:	613b      	str	r3, [r7, #16]
 800d938:	e015      	b.n	800d966 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	015a      	lsls	r2, r3, #5
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	4413      	add	r3, r2
 800d942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d946:	461a      	mov	r2, r3
 800d948:	f04f 33ff 	mov.w	r3, #4294967295
 800d94c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	015a      	lsls	r2, r3, #5
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	4413      	add	r3, r2
 800d956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d95a:	461a      	mov	r2, r3
 800d95c:	2300      	movs	r3, #0
 800d95e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	3301      	adds	r3, #1
 800d964:	613b      	str	r3, [r7, #16]
 800d966:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d96a:	461a      	mov	r2, r3
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	4293      	cmp	r3, r2
 800d970:	d3e3      	bcc.n	800d93a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f04f 32ff 	mov.w	r2, #4294967295
 800d97e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	4a18      	ldr	r2, [pc, #96]	@ (800d9e4 <USB_HostInit+0x170>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d10b      	bne.n	800d9a0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d98e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a15      	ldr	r2, [pc, #84]	@ (800d9e8 <USB_HostInit+0x174>)
 800d994:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4a14      	ldr	r2, [pc, #80]	@ (800d9ec <USB_HostInit+0x178>)
 800d99a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800d99e:	e009      	b.n	800d9b4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2280      	movs	r2, #128	@ 0x80
 800d9a4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4a11      	ldr	r2, [pc, #68]	@ (800d9f0 <USB_HostInit+0x17c>)
 800d9aa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	4a11      	ldr	r2, [pc, #68]	@ (800d9f4 <USB_HostInit+0x180>)
 800d9b0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d9b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d105      	bne.n	800d9c8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	699b      	ldr	r3, [r3, #24]
 800d9c0:	f043 0210 	orr.w	r2, r3, #16
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	699a      	ldr	r2, [r3, #24]
 800d9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d9f8 <USB_HostInit+0x184>)
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d9d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3718      	adds	r7, #24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d9e0:	b004      	add	sp, #16
 800d9e2:	4770      	bx	lr
 800d9e4:	40040000 	.word	0x40040000
 800d9e8:	01000200 	.word	0x01000200
 800d9ec:	00e00300 	.word	0x00e00300
 800d9f0:	00600080 	.word	0x00600080
 800d9f4:	004000e0 	.word	0x004000e0
 800d9f8:	a3200008 	.word	0xa3200008

0800d9fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	460b      	mov	r3, r1
 800da06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800da1a:	f023 0303 	bic.w	r3, r3, #3
 800da1e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	78fb      	ldrb	r3, [r7, #3]
 800da2a:	f003 0303 	and.w	r3, r3, #3
 800da2e:	68f9      	ldr	r1, [r7, #12]
 800da30:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800da34:	4313      	orrs	r3, r2
 800da36:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800da38:	78fb      	ldrb	r3, [r7, #3]
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d107      	bne.n	800da4e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da44:	461a      	mov	r2, r3
 800da46:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800da4a:	6053      	str	r3, [r2, #4]
 800da4c:	e00c      	b.n	800da68 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800da4e:	78fb      	ldrb	r3, [r7, #3]
 800da50:	2b02      	cmp	r3, #2
 800da52:	d107      	bne.n	800da64 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da5a:	461a      	mov	r2, r3
 800da5c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800da60:	6053      	str	r3, [r2, #4]
 800da62:	e001      	b.n	800da68 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800da64:	2301      	movs	r3, #1
 800da66:	e000      	b.n	800da6a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800da68:	2300      	movs	r3, #0
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3714      	adds	r7, #20
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr

0800da76 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b084      	sub	sp, #16
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800da82:	2300      	movs	r3, #0
 800da84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800da96:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	68fa      	ldr	r2, [r7, #12]
 800da9c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800daa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800daa4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800daa6:	2064      	movs	r0, #100	@ 0x64
 800daa8:	f7f7 fce4 	bl	8005474 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	68fa      	ldr	r2, [r7, #12]
 800dab0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800dab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dab8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800daba:	200a      	movs	r0, #10
 800dabc:	f7f7 fcda 	bl	8005474 <HAL_Delay>

  return HAL_OK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800daca:	b480      	push	{r7}
 800dacc:	b085      	sub	sp, #20
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
 800dad2:	460b      	mov	r3, r1
 800dad4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800dada:	2300      	movs	r3, #0
 800dadc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800daee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d109      	bne.n	800db0e <USB_DriveVbus+0x44>
 800dafa:	78fb      	ldrb	r3, [r7, #3]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d106      	bne.n	800db0e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	68fa      	ldr	r2, [r7, #12]
 800db04:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800db08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800db0c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800db14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db18:	d109      	bne.n	800db2e <USB_DriveVbus+0x64>
 800db1a:	78fb      	ldrb	r3, [r7, #3]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d106      	bne.n	800db2e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800db28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db2c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	3714      	adds	r7, #20
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800db48:	2300      	movs	r3, #0
 800db4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	0c5b      	lsrs	r3, r3, #17
 800db5a:	f003 0303 	and.w	r3, r3, #3
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3714      	adds	r7, #20
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr

0800db6a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800db6a:	b480      	push	{r7}
 800db6c:	b085      	sub	sp, #20
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	b29b      	uxth	r3, r3
}
 800db80:	4618      	mov	r0, r3
 800db82:	3714      	adds	r7, #20
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b088      	sub	sp, #32
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	4608      	mov	r0, r1
 800db96:	4611      	mov	r1, r2
 800db98:	461a      	mov	r2, r3
 800db9a:	4603      	mov	r3, r0
 800db9c:	70fb      	strb	r3, [r7, #3]
 800db9e:	460b      	mov	r3, r1
 800dba0:	70bb      	strb	r3, [r7, #2]
 800dba2:	4613      	mov	r3, r2
 800dba4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800dba6:	2300      	movs	r3, #0
 800dba8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800dbae:	78fb      	ldrb	r3, [r7, #3]
 800dbb0:	015a      	lsls	r2, r3, #5
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbba:	461a      	mov	r2, r3
 800dbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800dbc0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800dbc2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dbc6:	2b03      	cmp	r3, #3
 800dbc8:	d87c      	bhi.n	800dcc4 <USB_HC_Init+0x138>
 800dbca:	a201      	add	r2, pc, #4	@ (adr r2, 800dbd0 <USB_HC_Init+0x44>)
 800dbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd0:	0800dbe1 	.word	0x0800dbe1
 800dbd4:	0800dc87 	.word	0x0800dc87
 800dbd8:	0800dbe1 	.word	0x0800dbe1
 800dbdc:	0800dc49 	.word	0x0800dc49
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dbe0:	78fb      	ldrb	r3, [r7, #3]
 800dbe2:	015a      	lsls	r2, r3, #5
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbec:	461a      	mov	r2, r3
 800dbee:	f240 439d 	movw	r3, #1181	@ 0x49d
 800dbf2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800dbf4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	da10      	bge.n	800dc1e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dbfc:	78fb      	ldrb	r3, [r7, #3]
 800dbfe:	015a      	lsls	r2, r3, #5
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	4413      	add	r3, r2
 800dc04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	78fa      	ldrb	r2, [r7, #3]
 800dc0c:	0151      	lsls	r1, r2, #5
 800dc0e:	693a      	ldr	r2, [r7, #16]
 800dc10:	440a      	add	r2, r1
 800dc12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dc1a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800dc1c:	e055      	b.n	800dcca <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4a6f      	ldr	r2, [pc, #444]	@ (800dde0 <USB_HC_Init+0x254>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d151      	bne.n	800dcca <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800dc26:	78fb      	ldrb	r3, [r7, #3]
 800dc28:	015a      	lsls	r2, r3, #5
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	78fa      	ldrb	r2, [r7, #3]
 800dc36:	0151      	lsls	r1, r2, #5
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	440a      	add	r2, r1
 800dc3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc40:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800dc44:	60d3      	str	r3, [r2, #12]
      break;
 800dc46:	e040      	b.n	800dcca <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dc48:	78fb      	ldrb	r3, [r7, #3]
 800dc4a:	015a      	lsls	r2, r3, #5
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	4413      	add	r3, r2
 800dc50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc54:	461a      	mov	r2, r3
 800dc56:	f240 639d 	movw	r3, #1693	@ 0x69d
 800dc5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dc5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	da34      	bge.n	800dcce <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dc64:	78fb      	ldrb	r3, [r7, #3]
 800dc66:	015a      	lsls	r2, r3, #5
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	78fa      	ldrb	r2, [r7, #3]
 800dc74:	0151      	lsls	r1, r2, #5
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	440a      	add	r2, r1
 800dc7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dc82:	60d3      	str	r3, [r2, #12]
      }

      break;
 800dc84:	e023      	b.n	800dcce <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dc86:	78fb      	ldrb	r3, [r7, #3]
 800dc88:	015a      	lsls	r2, r3, #5
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc92:	461a      	mov	r2, r3
 800dc94:	f240 2325 	movw	r3, #549	@ 0x225
 800dc98:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dc9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	da17      	bge.n	800dcd2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800dca2:	78fb      	ldrb	r3, [r7, #3]
 800dca4:	015a      	lsls	r2, r3, #5
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	4413      	add	r3, r2
 800dcaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	78fa      	ldrb	r2, [r7, #3]
 800dcb2:	0151      	lsls	r1, r2, #5
 800dcb4:	693a      	ldr	r2, [r7, #16]
 800dcb6:	440a      	add	r2, r1
 800dcb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dcbc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800dcc0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800dcc2:	e006      	b.n	800dcd2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	77fb      	strb	r3, [r7, #31]
      break;
 800dcc8:	e004      	b.n	800dcd4 <USB_HC_Init+0x148>
      break;
 800dcca:	bf00      	nop
 800dccc:	e002      	b.n	800dcd4 <USB_HC_Init+0x148>
      break;
 800dcce:	bf00      	nop
 800dcd0:	e000      	b.n	800dcd4 <USB_HC_Init+0x148>
      break;
 800dcd2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800dcd4:	78fb      	ldrb	r3, [r7, #3]
 800dcd6:	015a      	lsls	r2, r3, #5
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	4413      	add	r3, r2
 800dcdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dce0:	461a      	mov	r2, r3
 800dce2:	2300      	movs	r3, #0
 800dce4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800dce6:	78fb      	ldrb	r3, [r7, #3]
 800dce8:	015a      	lsls	r2, r3, #5
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	4413      	add	r3, r2
 800dcee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcf2:	68db      	ldr	r3, [r3, #12]
 800dcf4:	78fa      	ldrb	r2, [r7, #3]
 800dcf6:	0151      	lsls	r1, r2, #5
 800dcf8:	693a      	ldr	r2, [r7, #16]
 800dcfa:	440a      	add	r2, r1
 800dcfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dd00:	f043 0302 	orr.w	r3, r3, #2
 800dd04:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dd0c:	699a      	ldr	r2, [r3, #24]
 800dd0e:	78fb      	ldrb	r3, [r7, #3]
 800dd10:	f003 030f 	and.w	r3, r3, #15
 800dd14:	2101      	movs	r1, #1
 800dd16:	fa01 f303 	lsl.w	r3, r1, r3
 800dd1a:	6939      	ldr	r1, [r7, #16]
 800dd1c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800dd20:	4313      	orrs	r3, r2
 800dd22:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	699b      	ldr	r3, [r3, #24]
 800dd28:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800dd30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	da03      	bge.n	800dd40 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800dd38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd3c:	61bb      	str	r3, [r7, #24]
 800dd3e:	e001      	b.n	800dd44 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800dd40:	2300      	movs	r3, #0
 800dd42:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f7ff fef9 	bl	800db3c <USB_GetHostSpeed>
 800dd4a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800dd4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	d106      	bne.n	800dd62 <USB_HC_Init+0x1d6>
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	d003      	beq.n	800dd62 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800dd5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800dd5e:	617b      	str	r3, [r7, #20]
 800dd60:	e001      	b.n	800dd66 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800dd62:	2300      	movs	r3, #0
 800dd64:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dd66:	787b      	ldrb	r3, [r7, #1]
 800dd68:	059b      	lsls	r3, r3, #22
 800dd6a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dd6e:	78bb      	ldrb	r3, [r7, #2]
 800dd70:	02db      	lsls	r3, r3, #11
 800dd72:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dd76:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dd78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dd7c:	049b      	lsls	r3, r3, #18
 800dd7e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dd82:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800dd84:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800dd86:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dd8a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800dd8c:	69bb      	ldr	r3, [r7, #24]
 800dd8e:	431a      	orrs	r2, r3
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dd94:	78fa      	ldrb	r2, [r7, #3]
 800dd96:	0151      	lsls	r1, r2, #5
 800dd98:	693a      	ldr	r2, [r7, #16]
 800dd9a:	440a      	add	r2, r1
 800dd9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800dda0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dda4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800dda6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ddaa:	2b03      	cmp	r3, #3
 800ddac:	d003      	beq.n	800ddb6 <USB_HC_Init+0x22a>
 800ddae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d10f      	bne.n	800ddd6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ddb6:	78fb      	ldrb	r3, [r7, #3]
 800ddb8:	015a      	lsls	r2, r3, #5
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	4413      	add	r3, r2
 800ddbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	78fa      	ldrb	r2, [r7, #3]
 800ddc6:	0151      	lsls	r1, r2, #5
 800ddc8:	693a      	ldr	r2, [r7, #16]
 800ddca:	440a      	add	r2, r1
 800ddcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ddd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ddd4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ddd6:	7ffb      	ldrb	r3, [r7, #31]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3720      	adds	r7, #32
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	40040000 	.word	0x40040000

0800dde4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b08c      	sub	sp, #48	@ 0x30
 800dde8:	af02      	add	r7, sp, #8
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	4613      	mov	r3, r2
 800ddf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	785b      	ldrb	r3, [r3, #1]
 800ddfa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800ddfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de00:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	4a5d      	ldr	r2, [pc, #372]	@ (800df7c <USB_HC_StartXfer+0x198>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d12f      	bne.n	800de6a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800de0a:	79fb      	ldrb	r3, [r7, #7]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d11c      	bne.n	800de4a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	7c9b      	ldrb	r3, [r3, #18]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d003      	beq.n	800de20 <USB_HC_StartXfer+0x3c>
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	7c9b      	ldrb	r3, [r3, #18]
 800de1c:	2b02      	cmp	r3, #2
 800de1e:	d124      	bne.n	800de6a <USB_HC_StartXfer+0x86>
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	799b      	ldrb	r3, [r3, #6]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d120      	bne.n	800de6a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800de28:	69fb      	ldr	r3, [r7, #28]
 800de2a:	015a      	lsls	r2, r3, #5
 800de2c:	6a3b      	ldr	r3, [r7, #32]
 800de2e:	4413      	add	r3, r2
 800de30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	69fa      	ldr	r2, [r7, #28]
 800de38:	0151      	lsls	r1, r2, #5
 800de3a:	6a3a      	ldr	r2, [r7, #32]
 800de3c:	440a      	add	r2, r1
 800de3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800de42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de46:	60d3      	str	r3, [r2, #12]
 800de48:	e00f      	b.n	800de6a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	791b      	ldrb	r3, [r3, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d10b      	bne.n	800de6a <USB_HC_StartXfer+0x86>
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	795b      	ldrb	r3, [r3, #5]
 800de56:	2b01      	cmp	r3, #1
 800de58:	d107      	bne.n	800de6a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	785b      	ldrb	r3, [r3, #1]
 800de5e:	4619      	mov	r1, r3
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f000 fb6b 	bl	800e53c <USB_DoPing>
        return HAL_OK;
 800de66:	2300      	movs	r3, #0
 800de68:	e232      	b.n	800e2d0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	799b      	ldrb	r3, [r3, #6]
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d158      	bne.n	800df24 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800de72:	2301      	movs	r3, #1
 800de74:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	78db      	ldrb	r3, [r3, #3]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d007      	beq.n	800de8e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800de7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de80:	68ba      	ldr	r2, [r7, #8]
 800de82:	8a92      	ldrh	r2, [r2, #20]
 800de84:	fb03 f202 	mul.w	r2, r3, r2
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	61da      	str	r2, [r3, #28]
 800de8c:	e07c      	b.n	800df88 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	7c9b      	ldrb	r3, [r3, #18]
 800de92:	2b01      	cmp	r3, #1
 800de94:	d130      	bne.n	800def8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	6a1b      	ldr	r3, [r3, #32]
 800de9a:	2bbc      	cmp	r3, #188	@ 0xbc
 800de9c:	d918      	bls.n	800ded0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	8a9b      	ldrh	r3, [r3, #20]
 800dea2:	461a      	mov	r2, r3
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	69da      	ldr	r2, [r3, #28]
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d003      	beq.n	800dec0 <USB_HC_StartXfer+0xdc>
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	2b02      	cmp	r3, #2
 800debe:	d103      	bne.n	800dec8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	2202      	movs	r2, #2
 800dec4:	60da      	str	r2, [r3, #12]
 800dec6:	e05f      	b.n	800df88 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	2201      	movs	r2, #1
 800decc:	60da      	str	r2, [r3, #12]
 800dece:	e05b      	b.n	800df88 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	6a1a      	ldr	r2, [r3, #32]
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d007      	beq.n	800def0 <USB_HC_StartXfer+0x10c>
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	2b02      	cmp	r3, #2
 800dee6:	d003      	beq.n	800def0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	2204      	movs	r2, #4
 800deec:	60da      	str	r2, [r3, #12]
 800deee:	e04b      	b.n	800df88 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	2203      	movs	r2, #3
 800def4:	60da      	str	r2, [r3, #12]
 800def6:	e047      	b.n	800df88 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800def8:	79fb      	ldrb	r3, [r7, #7]
 800defa:	2b01      	cmp	r3, #1
 800defc:	d10d      	bne.n	800df1a <USB_HC_StartXfer+0x136>
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	6a1b      	ldr	r3, [r3, #32]
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	8a92      	ldrh	r2, [r2, #20]
 800df06:	4293      	cmp	r3, r2
 800df08:	d907      	bls.n	800df1a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800df0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df0c:	68ba      	ldr	r2, [r7, #8]
 800df0e:	8a92      	ldrh	r2, [r2, #20]
 800df10:	fb03 f202 	mul.w	r2, r3, r2
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	61da      	str	r2, [r3, #28]
 800df18:	e036      	b.n	800df88 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	6a1a      	ldr	r2, [r3, #32]
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	61da      	str	r2, [r3, #28]
 800df22:	e031      	b.n	800df88 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	6a1b      	ldr	r3, [r3, #32]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d018      	beq.n	800df5e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	6a1b      	ldr	r3, [r3, #32]
 800df30:	68ba      	ldr	r2, [r7, #8]
 800df32:	8a92      	ldrh	r2, [r2, #20]
 800df34:	4413      	add	r3, r2
 800df36:	3b01      	subs	r3, #1
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	8a92      	ldrh	r2, [r2, #20]
 800df3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800df40:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800df42:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800df44:	8b7b      	ldrh	r3, [r7, #26]
 800df46:	429a      	cmp	r2, r3
 800df48:	d90b      	bls.n	800df62 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800df4a:	8b7b      	ldrh	r3, [r7, #26]
 800df4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800df4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	8a92      	ldrh	r2, [r2, #20]
 800df54:	fb03 f202 	mul.w	r2, r3, r2
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	61da      	str	r2, [r3, #28]
 800df5c:	e001      	b.n	800df62 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800df5e:	2301      	movs	r3, #1
 800df60:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	78db      	ldrb	r3, [r3, #3]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00a      	beq.n	800df80 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800df6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	8a92      	ldrh	r2, [r2, #20]
 800df70:	fb03 f202 	mul.w	r2, r3, r2
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	61da      	str	r2, [r3, #28]
 800df78:	e006      	b.n	800df88 <USB_HC_StartXfer+0x1a4>
 800df7a:	bf00      	nop
 800df7c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	6a1a      	ldr	r2, [r3, #32]
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	69db      	ldr	r3, [r3, #28]
 800df8c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800df90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df92:	04d9      	lsls	r1, r3, #19
 800df94:	4ba3      	ldr	r3, [pc, #652]	@ (800e224 <USB_HC_StartXfer+0x440>)
 800df96:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800df98:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	7d9b      	ldrb	r3, [r3, #22]
 800df9e:	075b      	lsls	r3, r3, #29
 800dfa0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dfa4:	69f9      	ldr	r1, [r7, #28]
 800dfa6:	0148      	lsls	r0, r1, #5
 800dfa8:	6a39      	ldr	r1, [r7, #32]
 800dfaa:	4401      	add	r1, r0
 800dfac:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dfb0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dfb2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800dfb4:	79fb      	ldrb	r3, [r7, #7]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d009      	beq.n	800dfce <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	6999      	ldr	r1, [r3, #24]
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	015a      	lsls	r2, r3, #5
 800dfc2:	6a3b      	ldr	r3, [r7, #32]
 800dfc4:	4413      	add	r3, r2
 800dfc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dfca:	460a      	mov	r2, r1
 800dfcc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800dfce:	6a3b      	ldr	r3, [r7, #32]
 800dfd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	f003 0301 	and.w	r3, r3, #1
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	bf0c      	ite	eq
 800dfde:	2301      	moveq	r3, #1
 800dfe0:	2300      	movne	r3, #0
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	015a      	lsls	r2, r3, #5
 800dfea:	6a3b      	ldr	r3, [r7, #32]
 800dfec:	4413      	add	r3, r2
 800dfee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	69fa      	ldr	r2, [r7, #28]
 800dff6:	0151      	lsls	r1, r2, #5
 800dff8:	6a3a      	ldr	r2, [r7, #32]
 800dffa:	440a      	add	r2, r1
 800dffc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e000:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e004:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	015a      	lsls	r2, r3, #5
 800e00a:	6a3b      	ldr	r3, [r7, #32]
 800e00c:	4413      	add	r3, r2
 800e00e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	7e7b      	ldrb	r3, [r7, #25]
 800e016:	075b      	lsls	r3, r3, #29
 800e018:	69f9      	ldr	r1, [r7, #28]
 800e01a:	0148      	lsls	r0, r1, #5
 800e01c:	6a39      	ldr	r1, [r7, #32]
 800e01e:	4401      	add	r1, r0
 800e020:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800e024:	4313      	orrs	r3, r2
 800e026:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	799b      	ldrb	r3, [r3, #6]
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	f040 80c3 	bne.w	800e1b8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	7c5b      	ldrb	r3, [r3, #17]
 800e036:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e038:	68ba      	ldr	r2, [r7, #8]
 800e03a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e03c:	4313      	orrs	r3, r2
 800e03e:	69fa      	ldr	r2, [r7, #28]
 800e040:	0151      	lsls	r1, r2, #5
 800e042:	6a3a      	ldr	r2, [r7, #32]
 800e044:	440a      	add	r2, r1
 800e046:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e04a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e04e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	015a      	lsls	r2, r3, #5
 800e054:	6a3b      	ldr	r3, [r7, #32]
 800e056:	4413      	add	r3, r2
 800e058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	69fa      	ldr	r2, [r7, #28]
 800e060:	0151      	lsls	r1, r2, #5
 800e062:	6a3a      	ldr	r2, [r7, #32]
 800e064:	440a      	add	r2, r1
 800e066:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e06a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e06e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	79db      	ldrb	r3, [r3, #7]
 800e074:	2b01      	cmp	r3, #1
 800e076:	d123      	bne.n	800e0c0 <USB_HC_StartXfer+0x2dc>
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	78db      	ldrb	r3, [r3, #3]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d11f      	bne.n	800e0c0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	015a      	lsls	r2, r3, #5
 800e084:	6a3b      	ldr	r3, [r7, #32]
 800e086:	4413      	add	r3, r2
 800e088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	69fa      	ldr	r2, [r7, #28]
 800e090:	0151      	lsls	r1, r2, #5
 800e092:	6a3a      	ldr	r2, [r7, #32]
 800e094:	440a      	add	r2, r1
 800e096:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e09a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e09e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	015a      	lsls	r2, r3, #5
 800e0a4:	6a3b      	ldr	r3, [r7, #32]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0ac:	68db      	ldr	r3, [r3, #12]
 800e0ae:	69fa      	ldr	r2, [r7, #28]
 800e0b0:	0151      	lsls	r1, r2, #5
 800e0b2:	6a3a      	ldr	r2, [r7, #32]
 800e0b4:	440a      	add	r2, r1
 800e0b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0be:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	7c9b      	ldrb	r3, [r3, #18]
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d003      	beq.n	800e0d0 <USB_HC_StartXfer+0x2ec>
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	7c9b      	ldrb	r3, [r3, #18]
 800e0cc:	2b03      	cmp	r3, #3
 800e0ce:	d117      	bne.n	800e100 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	d113      	bne.n	800e100 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	78db      	ldrb	r3, [r3, #3]
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d10f      	bne.n	800e100 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	015a      	lsls	r2, r3, #5
 800e0e4:	6a3b      	ldr	r3, [r7, #32]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	69fa      	ldr	r2, [r7, #28]
 800e0f0:	0151      	lsls	r1, r2, #5
 800e0f2:	6a3a      	ldr	r2, [r7, #32]
 800e0f4:	440a      	add	r2, r1
 800e0f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e0fe:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	7c9b      	ldrb	r3, [r3, #18]
 800e104:	2b01      	cmp	r3, #1
 800e106:	d162      	bne.n	800e1ce <USB_HC_StartXfer+0x3ea>
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	78db      	ldrb	r3, [r3, #3]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d15e      	bne.n	800e1ce <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	3b01      	subs	r3, #1
 800e116:	2b03      	cmp	r3, #3
 800e118:	d858      	bhi.n	800e1cc <USB_HC_StartXfer+0x3e8>
 800e11a:	a201      	add	r2, pc, #4	@ (adr r2, 800e120 <USB_HC_StartXfer+0x33c>)
 800e11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e120:	0800e131 	.word	0x0800e131
 800e124:	0800e153 	.word	0x0800e153
 800e128:	0800e175 	.word	0x0800e175
 800e12c:	0800e197 	.word	0x0800e197
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	015a      	lsls	r2, r3, #5
 800e134:	6a3b      	ldr	r3, [r7, #32]
 800e136:	4413      	add	r3, r2
 800e138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	69fa      	ldr	r2, [r7, #28]
 800e140:	0151      	lsls	r1, r2, #5
 800e142:	6a3a      	ldr	r2, [r7, #32]
 800e144:	440a      	add	r2, r1
 800e146:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e14a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e14e:	6053      	str	r3, [r2, #4]
          break;
 800e150:	e03d      	b.n	800e1ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800e152:	69fb      	ldr	r3, [r7, #28]
 800e154:	015a      	lsls	r2, r3, #5
 800e156:	6a3b      	ldr	r3, [r7, #32]
 800e158:	4413      	add	r3, r2
 800e15a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	69fa      	ldr	r2, [r7, #28]
 800e162:	0151      	lsls	r1, r2, #5
 800e164:	6a3a      	ldr	r2, [r7, #32]
 800e166:	440a      	add	r2, r1
 800e168:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e16c:	f043 030e 	orr.w	r3, r3, #14
 800e170:	6053      	str	r3, [r2, #4]
          break;
 800e172:	e02c      	b.n	800e1ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	015a      	lsls	r2, r3, #5
 800e178:	6a3b      	ldr	r3, [r7, #32]
 800e17a:	4413      	add	r3, r2
 800e17c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	69fa      	ldr	r2, [r7, #28]
 800e184:	0151      	lsls	r1, r2, #5
 800e186:	6a3a      	ldr	r2, [r7, #32]
 800e188:	440a      	add	r2, r1
 800e18a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e18e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e192:	6053      	str	r3, [r2, #4]
          break;
 800e194:	e01b      	b.n	800e1ce <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	015a      	lsls	r2, r3, #5
 800e19a:	6a3b      	ldr	r3, [r7, #32]
 800e19c:	4413      	add	r3, r2
 800e19e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	69fa      	ldr	r2, [r7, #28]
 800e1a6:	0151      	lsls	r1, r2, #5
 800e1a8:	6a3a      	ldr	r2, [r7, #32]
 800e1aa:	440a      	add	r2, r1
 800e1ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e1b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e1b4:	6053      	str	r3, [r2, #4]
          break;
 800e1b6:	e00a      	b.n	800e1ce <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	015a      	lsls	r2, r3, #5
 800e1bc:	6a3b      	ldr	r3, [r7, #32]
 800e1be:	4413      	add	r3, r2
 800e1c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	6053      	str	r3, [r2, #4]
 800e1ca:	e000      	b.n	800e1ce <USB_HC_StartXfer+0x3ea>
          break;
 800e1cc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e1ce:	69fb      	ldr	r3, [r7, #28]
 800e1d0:	015a      	lsls	r2, r3, #5
 800e1d2:	6a3b      	ldr	r3, [r7, #32]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e1e4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	78db      	ldrb	r3, [r3, #3]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d004      	beq.n	800e1f8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1f4:	613b      	str	r3, [r7, #16]
 800e1f6:	e003      	b.n	800e200 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e1fe:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e206:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	015a      	lsls	r2, r3, #5
 800e20c:	6a3b      	ldr	r3, [r7, #32]
 800e20e:	4413      	add	r3, r2
 800e210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e214:	461a      	mov	r2, r3
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e21a:	79fb      	ldrb	r3, [r7, #7]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d003      	beq.n	800e228 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800e220:	2300      	movs	r3, #0
 800e222:	e055      	b.n	800e2d0 <USB_HC_StartXfer+0x4ec>
 800e224:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	78db      	ldrb	r3, [r3, #3]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d14e      	bne.n	800e2ce <USB_HC_StartXfer+0x4ea>
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	6a1b      	ldr	r3, [r3, #32]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d04a      	beq.n	800e2ce <USB_HC_StartXfer+0x4ea>
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	79db      	ldrb	r3, [r3, #7]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d146      	bne.n	800e2ce <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	7c9b      	ldrb	r3, [r3, #18]
 800e244:	2b03      	cmp	r3, #3
 800e246:	d831      	bhi.n	800e2ac <USB_HC_StartXfer+0x4c8>
 800e248:	a201      	add	r2, pc, #4	@ (adr r2, 800e250 <USB_HC_StartXfer+0x46c>)
 800e24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24e:	bf00      	nop
 800e250:	0800e261 	.word	0x0800e261
 800e254:	0800e285 	.word	0x0800e285
 800e258:	0800e261 	.word	0x0800e261
 800e25c:	0800e285 	.word	0x0800e285
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	6a1b      	ldr	r3, [r3, #32]
 800e264:	3303      	adds	r3, #3
 800e266:	089b      	lsrs	r3, r3, #2
 800e268:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e26a:	8afa      	ldrh	r2, [r7, #22]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e270:	b29b      	uxth	r3, r3
 800e272:	429a      	cmp	r2, r3
 800e274:	d91c      	bls.n	800e2b0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	699b      	ldr	r3, [r3, #24]
 800e27a:	f043 0220 	orr.w	r2, r3, #32
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	619a      	str	r2, [r3, #24]
        }
        break;
 800e282:	e015      	b.n	800e2b0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	6a1b      	ldr	r3, [r3, #32]
 800e288:	3303      	adds	r3, #3
 800e28a:	089b      	lsrs	r3, r3, #2
 800e28c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e28e:	8afa      	ldrh	r2, [r7, #22]
 800e290:	6a3b      	ldr	r3, [r7, #32]
 800e292:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e296:	691b      	ldr	r3, [r3, #16]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d90a      	bls.n	800e2b4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	699b      	ldr	r3, [r3, #24]
 800e2a2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	619a      	str	r2, [r3, #24]
        }
        break;
 800e2aa:	e003      	b.n	800e2b4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800e2ac:	bf00      	nop
 800e2ae:	e002      	b.n	800e2b6 <USB_HC_StartXfer+0x4d2>
        break;
 800e2b0:	bf00      	nop
 800e2b2:	e000      	b.n	800e2b6 <USB_HC_StartXfer+0x4d2>
        break;
 800e2b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	6999      	ldr	r1, [r3, #24]
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	785a      	ldrb	r2, [r3, #1]
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	6a1b      	ldr	r3, [r3, #32]
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	9000      	str	r0, [sp, #0]
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	f7ff f9c9 	bl	800d660 <USB_WritePacket>
  }

  return HAL_OK;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3728      	adds	r7, #40	@ 0x28
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b085      	sub	sp, #20
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2ea:	695b      	ldr	r3, [r3, #20]
 800e2ec:	b29b      	uxth	r3, r3
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3714      	adds	r7, #20
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr

0800e2fa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e2fa:	b480      	push	{r7}
 800e2fc:	b089      	sub	sp, #36	@ 0x24
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
 800e302:	460b      	mov	r3, r1
 800e304:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800e30a:	78fb      	ldrb	r3, [r7, #3]
 800e30c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e30e:	2300      	movs	r3, #0
 800e310:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e312:	69bb      	ldr	r3, [r7, #24]
 800e314:	015a      	lsls	r2, r3, #5
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	4413      	add	r3, r2
 800e31a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	0c9b      	lsrs	r3, r3, #18
 800e322:	f003 0303 	and.w	r3, r3, #3
 800e326:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	015a      	lsls	r2, r3, #5
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	4413      	add	r3, r2
 800e330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	0fdb      	lsrs	r3, r3, #31
 800e338:	f003 0301 	and.w	r3, r3, #1
 800e33c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800e33e:	69bb      	ldr	r3, [r7, #24]
 800e340:	015a      	lsls	r2, r3, #5
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	4413      	add	r3, r2
 800e346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	0fdb      	lsrs	r3, r3, #31
 800e34e:	f003 0301 	and.w	r3, r3, #1
 800e352:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	f003 0320 	and.w	r3, r3, #32
 800e35c:	2b20      	cmp	r3, #32
 800e35e:	d10d      	bne.n	800e37c <USB_HC_Halt+0x82>
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10a      	bne.n	800e37c <USB_HC_Halt+0x82>
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d005      	beq.n	800e378 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d002      	beq.n	800e378 <USB_HC_Halt+0x7e>
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	2b03      	cmp	r3, #3
 800e376:	d101      	bne.n	800e37c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800e378:	2300      	movs	r3, #0
 800e37a:	e0d8      	b.n	800e52e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d002      	beq.n	800e388 <USB_HC_Halt+0x8e>
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	2b02      	cmp	r3, #2
 800e386:	d173      	bne.n	800e470 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e388:	69bb      	ldr	r3, [r7, #24]
 800e38a:	015a      	lsls	r2, r3, #5
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	4413      	add	r3, r2
 800e390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	69ba      	ldr	r2, [r7, #24]
 800e398:	0151      	lsls	r1, r2, #5
 800e39a:	69fa      	ldr	r2, [r7, #28]
 800e39c:	440a      	add	r2, r1
 800e39e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e3a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e3a6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	689b      	ldr	r3, [r3, #8]
 800e3ac:	f003 0320 	and.w	r3, r3, #32
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d14a      	bne.n	800e44a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d133      	bne.n	800e428 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	015a      	lsls	r2, r3, #5
 800e3c4:	69fb      	ldr	r3, [r7, #28]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	69ba      	ldr	r2, [r7, #24]
 800e3d0:	0151      	lsls	r1, r2, #5
 800e3d2:	69fa      	ldr	r2, [r7, #28]
 800e3d4:	440a      	add	r2, r1
 800e3d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e3da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e3de:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e3e0:	69bb      	ldr	r3, [r7, #24]
 800e3e2:	015a      	lsls	r2, r3, #5
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	4413      	add	r3, r2
 800e3e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	69ba      	ldr	r2, [r7, #24]
 800e3f0:	0151      	lsls	r1, r2, #5
 800e3f2:	69fa      	ldr	r2, [r7, #28]
 800e3f4:	440a      	add	r2, r1
 800e3f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e3fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e3fe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	3301      	adds	r3, #1
 800e404:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e40c:	d82e      	bhi.n	800e46c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	015a      	lsls	r2, r3, #5
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	4413      	add	r3, r2
 800e416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e420:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e424:	d0ec      	beq.n	800e400 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e426:	e081      	b.n	800e52c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	015a      	lsls	r2, r3, #5
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	4413      	add	r3, r2
 800e430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	69ba      	ldr	r2, [r7, #24]
 800e438:	0151      	lsls	r1, r2, #5
 800e43a:	69fa      	ldr	r2, [r7, #28]
 800e43c:	440a      	add	r2, r1
 800e43e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e442:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e446:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e448:	e070      	b.n	800e52c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e44a:	69bb      	ldr	r3, [r7, #24]
 800e44c:	015a      	lsls	r2, r3, #5
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	4413      	add	r3, r2
 800e452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	69ba      	ldr	r2, [r7, #24]
 800e45a:	0151      	lsls	r1, r2, #5
 800e45c:	69fa      	ldr	r2, [r7, #28]
 800e45e:	440a      	add	r2, r1
 800e460:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e464:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e468:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e46a:	e05f      	b.n	800e52c <USB_HC_Halt+0x232>
            break;
 800e46c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e46e:	e05d      	b.n	800e52c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	015a      	lsls	r2, r3, #5
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	4413      	add	r3, r2
 800e478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	69ba      	ldr	r2, [r7, #24]
 800e480:	0151      	lsls	r1, r2, #5
 800e482:	69fa      	ldr	r2, [r7, #28]
 800e484:	440a      	add	r2, r1
 800e486:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e48a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e48e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e496:	691b      	ldr	r3, [r3, #16]
 800e498:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d133      	bne.n	800e508 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e4a0:	69bb      	ldr	r3, [r7, #24]
 800e4a2:	015a      	lsls	r2, r3, #5
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	4413      	add	r3, r2
 800e4a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	69ba      	ldr	r2, [r7, #24]
 800e4b0:	0151      	lsls	r1, r2, #5
 800e4b2:	69fa      	ldr	r2, [r7, #28]
 800e4b4:	440a      	add	r2, r1
 800e4b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e4c0:	69bb      	ldr	r3, [r7, #24]
 800e4c2:	015a      	lsls	r2, r3, #5
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	69ba      	ldr	r2, [r7, #24]
 800e4d0:	0151      	lsls	r1, r2, #5
 800e4d2:	69fa      	ldr	r2, [r7, #28]
 800e4d4:	440a      	add	r2, r1
 800e4d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e4de:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e4ec:	d81d      	bhi.n	800e52a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	015a      	lsls	r2, r3, #5
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	4413      	add	r3, r2
 800e4f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e504:	d0ec      	beq.n	800e4e0 <USB_HC_Halt+0x1e6>
 800e506:	e011      	b.n	800e52c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	015a      	lsls	r2, r3, #5
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	4413      	add	r3, r2
 800e510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	69ba      	ldr	r2, [r7, #24]
 800e518:	0151      	lsls	r1, r2, #5
 800e51a:	69fa      	ldr	r2, [r7, #28]
 800e51c:	440a      	add	r2, r1
 800e51e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e522:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e526:	6013      	str	r3, [r2, #0]
 800e528:	e000      	b.n	800e52c <USB_HC_Halt+0x232>
          break;
 800e52a:	bf00      	nop
    }
  }

  return HAL_OK;
 800e52c:	2300      	movs	r3, #0
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3724      	adds	r7, #36	@ 0x24
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr
	...

0800e53c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b087      	sub	sp, #28
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	460b      	mov	r3, r1
 800e546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e54c:	78fb      	ldrb	r3, [r7, #3]
 800e54e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e550:	2301      	movs	r3, #1
 800e552:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	04da      	lsls	r2, r3, #19
 800e558:	4b15      	ldr	r3, [pc, #84]	@ (800e5b0 <USB_DoPing+0x74>)
 800e55a:	4013      	ands	r3, r2
 800e55c:	693a      	ldr	r2, [r7, #16]
 800e55e:	0151      	lsls	r1, r2, #5
 800e560:	697a      	ldr	r2, [r7, #20]
 800e562:	440a      	add	r2, r1
 800e564:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e568:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e56c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	015a      	lsls	r2, r3, #5
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	4413      	add	r3, r2
 800e576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e584:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e58c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	015a      	lsls	r2, r3, #5
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	4413      	add	r3, r2
 800e596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e59a:	461a      	mov	r2, r3
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e5a0:	2300      	movs	r3, #0
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	371c      	adds	r7, #28
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr
 800e5ae:	bf00      	nop
 800e5b0:	1ff80000 	.word	0x1ff80000

0800e5b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b088      	sub	sp, #32
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f7fe ff8c 	bl	800d4e6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e5ce:	2110      	movs	r1, #16
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f7fe ffe5 	bl	800d5a0 <USB_FlushTxFifo>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d001      	beq.n	800e5e0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f7ff f80f 	bl	800d604 <USB_FlushRxFifo>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d001      	beq.n	800e5f0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	61bb      	str	r3, [r7, #24]
 800e5f4:	e01f      	b.n	800e636 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	015a      	lsls	r2, r3, #5
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	4413      	add	r3, r2
 800e5fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e60c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e614:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e61c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e61e:	69bb      	ldr	r3, [r7, #24]
 800e620:	015a      	lsls	r2, r3, #5
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	4413      	add	r3, r2
 800e626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e62a:	461a      	mov	r2, r3
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	3301      	adds	r3, #1
 800e634:	61bb      	str	r3, [r7, #24]
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	2b0f      	cmp	r3, #15
 800e63a:	d9dc      	bls.n	800e5f6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e63c:	2300      	movs	r3, #0
 800e63e:	61bb      	str	r3, [r7, #24]
 800e640:	e034      	b.n	800e6ac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	015a      	lsls	r2, r3, #5
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	4413      	add	r3, r2
 800e64a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e658:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e660:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e668:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e66a:	69bb      	ldr	r3, [r7, #24]
 800e66c:	015a      	lsls	r2, r3, #5
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	4413      	add	r3, r2
 800e672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e676:	461a      	mov	r2, r3
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	3301      	adds	r3, #1
 800e680:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e688:	d80c      	bhi.n	800e6a4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e68a:	69bb      	ldr	r3, [r7, #24]
 800e68c:	015a      	lsls	r2, r3, #5
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	4413      	add	r3, r2
 800e692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e69c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e6a0:	d0ec      	beq.n	800e67c <USB_StopHost+0xc8>
 800e6a2:	e000      	b.n	800e6a6 <USB_StopHost+0xf2>
        break;
 800e6a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e6a6:	69bb      	ldr	r3, [r7, #24]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	61bb      	str	r3, [r7, #24]
 800e6ac:	69bb      	ldr	r3, [r7, #24]
 800e6ae:	2b0f      	cmp	r3, #15
 800e6b0:	d9c7      	bls.n	800e642 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e6be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f7fe fefb 	bl	800d4c4 <USB_EnableGlobalInt>

  return ret;
 800e6ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3720      	adds	r7, #32
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e6d8:	b590      	push	{r4, r7, lr}
 800e6da:	b08b      	sub	sp, #44	@ 0x2c
 800e6dc:	af04      	add	r7, sp, #16
 800e6de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e6ea:	7919      	ldrb	r1, [r3, #4]
 800e6ec:	23ff      	movs	r3, #255	@ 0xff
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f001 f879 	bl	800f7e8 <USBH_FindInterface>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e6fa:	7dbb      	ldrb	r3, [r7, #22]
 800e6fc:	2bff      	cmp	r3, #255	@ 0xff
 800e6fe:	d002      	beq.n	800e706 <USBH_HID_InterfaceInit+0x2e>
 800e700:	7dbb      	ldrb	r3, [r7, #22]
 800e702:	2b01      	cmp	r3, #1
 800e704:	d90f      	bls.n	800e726 <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800e706:	48a9      	ldr	r0, [pc, #676]	@ (800e9ac <USBH_HID_InterfaceInit+0x2d4>)
 800e708:	f003 fa5c 	bl	8011bc4 <iprintf>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4619      	mov	r1, r3
 800e716:	48a6      	ldr	r0, [pc, #664]	@ (800e9b0 <USBH_HID_InterfaceInit+0x2d8>)
 800e718:	f003 fa54 	bl	8011bc4 <iprintf>
 800e71c:	200a      	movs	r0, #10
 800e71e:	f003 fa63 	bl	8011be8 <putchar>
    return USBH_FAIL;
 800e722:	2302      	movs	r3, #2
 800e724:	e13d      	b.n	800e9a2 <USBH_HID_InterfaceInit+0x2ca>
  }

  status = USBH_SelectInterface(phost, interface);
 800e726:	7dbb      	ldrb	r3, [r7, #22]
 800e728:	4619      	mov	r1, r3
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f000 fff4 	bl	800f718 <USBH_SelectInterface>
 800e730:	4603      	mov	r3, r0
 800e732:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800e734:	7d7b      	ldrb	r3, [r7, #21]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d001      	beq.n	800e73e <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 800e73a:	2302      	movs	r3, #2
 800e73c:	e131      	b.n	800e9a2 <USBH_HID_InterfaceInit+0x2ca>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8d3 4d34 	ldr.w	r4, [r3, #3380]	@ 0xd34
 800e744:	2034      	movs	r0, #52	@ 0x34
 800e746:	f003 f8bd 	bl	80118c4 <malloc>
 800e74a:	4603      	mov	r3, r0
 800e74c:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e754:	69db      	ldr	r3, [r3, #28]
 800e756:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d10a      	bne.n	800e774 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 800e75e:	4893      	ldr	r0, [pc, #588]	@ (800e9ac <USBH_HID_InterfaceInit+0x2d4>)
 800e760:	f003 fa30 	bl	8011bc4 <iprintf>
 800e764:	4893      	ldr	r0, [pc, #588]	@ (800e9b4 <USBH_HID_InterfaceInit+0x2dc>)
 800e766:	f003 fa2d 	bl	8011bc4 <iprintf>
 800e76a:	200a      	movs	r0, #10
 800e76c:	f003 fa3c 	bl	8011be8 <putchar>
    return USBH_FAIL;
 800e770:	2302      	movs	r3, #2
 800e772:	e116      	b.n	800e9a2 <USBH_HID_InterfaceInit+0x2ca>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800e774:	2234      	movs	r2, #52	@ 0x34
 800e776:	2100      	movs	r1, #0
 800e778:	6938      	ldr	r0, [r7, #16]
 800e77a:	f003 fb93 	bl	8011ea4 <memset>

  HID_Handle->state = USBH_HID_ERROR;
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	2207      	movs	r2, #7
 800e782:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800e784:	7dbb      	ldrb	r3, [r7, #22]
 800e786:	687a      	ldr	r2, [r7, #4]
 800e788:	211a      	movs	r1, #26
 800e78a:	fb01 f303 	mul.w	r3, r1, r3
 800e78e:	4413      	add	r3, r2
 800e790:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	2b01      	cmp	r3, #1
 800e798:	d109      	bne.n	800e7ae <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 800e79a:	4887      	ldr	r0, [pc, #540]	@ (800e9b8 <USBH_HID_InterfaceInit+0x2e0>)
 800e79c:	f003 fa12 	bl	8011bc4 <iprintf>
 800e7a0:	200a      	movs	r0, #10
 800e7a2:	f003 fa21 	bl	8011be8 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	4a84      	ldr	r2, [pc, #528]	@ (800e9bc <USBH_HID_InterfaceInit+0x2e4>)
 800e7aa:	631a      	str	r2, [r3, #48]	@ 0x30
 800e7ac:	e01c      	b.n	800e7e8 <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800e7ae:	7dbb      	ldrb	r3, [r7, #22]
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	211a      	movs	r1, #26
 800e7b4:	fb01 f303 	mul.w	r3, r1, r3
 800e7b8:	4413      	add	r3, r2
 800e7ba:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	2b02      	cmp	r3, #2
 800e7c2:	d109      	bne.n	800e7d8 <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 800e7c4:	487e      	ldr	r0, [pc, #504]	@ (800e9c0 <USBH_HID_InterfaceInit+0x2e8>)
 800e7c6:	f003 f9fd 	bl	8011bc4 <iprintf>
 800e7ca:	200a      	movs	r0, #10
 800e7cc:	f003 fa0c 	bl	8011be8 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	4a7c      	ldr	r2, [pc, #496]	@ (800e9c4 <USBH_HID_InterfaceInit+0x2ec>)
 800e7d4:	631a      	str	r2, [r3, #48]	@ 0x30
 800e7d6:	e007      	b.n	800e7e8 <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 800e7d8:	487b      	ldr	r0, [pc, #492]	@ (800e9c8 <USBH_HID_InterfaceInit+0x2f0>)
 800e7da:	f003 f9f3 	bl	8011bc4 <iprintf>
 800e7de:	200a      	movs	r0, #10
 800e7e0:	f003 fa02 	bl	8011be8 <putchar>
    return USBH_FAIL;
 800e7e4:	2302      	movs	r3, #2
 800e7e6:	e0dc      	b.n	800e9a2 <USBH_HID_InterfaceInit+0x2ca>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e7f4:	7dbb      	ldrb	r3, [r7, #22]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	211a      	movs	r1, #26
 800e7fa:	fb01 f303 	mul.w	r3, r1, r3
 800e7fe:	4413      	add	r3, r2
 800e800:	f603 5306 	addw	r3, r3, #3334	@ 0xd06
 800e804:	781a      	ldrb	r2, [r3, #0]
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e80a:	7dbb      	ldrb	r3, [r7, #22]
 800e80c:	687a      	ldr	r2, [r7, #4]
 800e80e:	211a      	movs	r1, #26
 800e810:	fb01 f303 	mul.w	r3, r1, r3
 800e814:	4413      	add	r3, r2
 800e816:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 800e81a:	881a      	ldrh	r2, [r3, #0]
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800e820:	7dbb      	ldrb	r3, [r7, #22]
 800e822:	687a      	ldr	r2, [r7, #4]
 800e824:	211a      	movs	r1, #26
 800e826:	fb01 f303 	mul.w	r3, r1, r3
 800e82a:	4413      	add	r3, r2
 800e82c:	f603 530a 	addw	r3, r3, #3338	@ 0xd0a
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	461a      	mov	r2, r3
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	8b9b      	ldrh	r3, [r3, #28]
 800e83c:	2b09      	cmp	r3, #9
 800e83e:	d802      	bhi.n	800e846 <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	220a      	movs	r2, #10
 800e844:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800e846:	7dbb      	ldrb	r3, [r7, #22]
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	211a      	movs	r1, #26
 800e84c:	fb01 f303 	mul.w	r3, r1, r3
 800e850:	4413      	add	r3, r2
 800e852:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	2b02      	cmp	r3, #2
 800e85a:	bf28      	it	cs
 800e85c:	2302      	movcs	r3, #2
 800e85e:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800e860:	2300      	movs	r3, #0
 800e862:	75fb      	strb	r3, [r7, #23]
 800e864:	e097      	b.n	800e996 <USBH_HID_InterfaceInit+0x2be>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800e866:	7dbb      	ldrb	r3, [r7, #22]
 800e868:	7df9      	ldrb	r1, [r7, #23]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	3101      	adds	r1, #1
 800e86e:	00c9      	lsls	r1, r1, #3
 800e870:	201a      	movs	r0, #26
 800e872:	fb00 f303 	mul.w	r3, r0, r3
 800e876:	440b      	add	r3, r1
 800e878:	4413      	add	r3, r2
 800e87a:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	b25b      	sxtb	r3, r3
 800e882:	2b00      	cmp	r3, #0
 800e884:	da42      	bge.n	800e90c <USBH_HID_InterfaceInit+0x234>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800e886:	7dbb      	ldrb	r3, [r7, #22]
 800e888:	7df9      	ldrb	r1, [r7, #23]
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	3101      	adds	r1, #1
 800e88e:	00c9      	lsls	r1, r1, #3
 800e890:	201a      	movs	r0, #26
 800e892:	fb00 f303 	mul.w	r3, r0, r3
 800e896:	440b      	add	r3, r1
 800e898:	4413      	add	r3, r2
 800e89a:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e89e:	781a      	ldrb	r2, [r3, #0]
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	791b      	ldrb	r3, [r3, #4]
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f002 fc93 	bl	80111d6 <USBH_AllocPipe>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800e8b8:	7dbb      	ldrb	r3, [r7, #22]
 800e8ba:	7df9      	ldrb	r1, [r7, #23]
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	3101      	adds	r1, #1
 800e8c0:	00c9      	lsls	r1, r1, #3
 800e8c2:	201a      	movs	r0, #26
 800e8c4:	fb00 f303 	mul.w	r3, r0, r3
 800e8c8:	440b      	add	r3, r1
 800e8ca:	4413      	add	r3, r2
 800e8cc:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800e8d0:	881b      	ldrh	r3, [r3, #0]
 800e8d2:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	7859      	ldrb	r1, [r3, #1]
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	7918      	ldrb	r0, [r3, #4]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800e8e8:	89ba      	ldrh	r2, [r7, #12]
 800e8ea:	9202      	str	r2, [sp, #8]
 800e8ec:	2203      	movs	r2, #3
 800e8ee:	9201      	str	r2, [sp, #4]
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	4623      	mov	r3, r4
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f002 fc3e 	bl	8011178 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	785b      	ldrb	r3, [r3, #1]
 800e900:	2200      	movs	r2, #0
 800e902:	4619      	mov	r1, r3
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f002 ff57 	bl	80117b8 <USBH_LL_SetToggle>
 800e90a:	e041      	b.n	800e990 <USBH_HID_InterfaceInit+0x2b8>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800e90c:	7dbb      	ldrb	r3, [r7, #22]
 800e90e:	7df9      	ldrb	r1, [r7, #23]
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	3101      	adds	r1, #1
 800e914:	00c9      	lsls	r1, r1, #3
 800e916:	201a      	movs	r0, #26
 800e918:	fb00 f303 	mul.w	r3, r0, r3
 800e91c:	440b      	add	r3, r1
 800e91e:	4413      	add	r3, r2
 800e920:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e924:	781a      	ldrb	r2, [r3, #0]
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	78db      	ldrb	r3, [r3, #3]
 800e92e:	4619      	mov	r1, r3
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f002 fc50 	bl	80111d6 <USBH_AllocPipe>
 800e936:	4603      	mov	r3, r0
 800e938:	461a      	mov	r2, r3
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800e93e:	7dbb      	ldrb	r3, [r7, #22]
 800e940:	7df9      	ldrb	r1, [r7, #23]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	3101      	adds	r1, #1
 800e946:	00c9      	lsls	r1, r1, #3
 800e948:	201a      	movs	r0, #26
 800e94a:	fb00 f303 	mul.w	r3, r0, r3
 800e94e:	440b      	add	r3, r1
 800e950:	4413      	add	r3, r2
 800e952:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800e956:	881b      	ldrh	r3, [r3, #0]
 800e958:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	7819      	ldrb	r1, [r3, #0]
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	78d8      	ldrb	r0, [r3, #3]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800e96e:	89ba      	ldrh	r2, [r7, #12]
 800e970:	9202      	str	r2, [sp, #8]
 800e972:	2203      	movs	r2, #3
 800e974:	9201      	str	r2, [sp, #4]
 800e976:	9300      	str	r3, [sp, #0]
 800e978:	4623      	mov	r3, r4
 800e97a:	4602      	mov	r2, r0
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f002 fbfb 	bl	8011178 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	2200      	movs	r2, #0
 800e988:	4619      	mov	r1, r3
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f002 ff14 	bl	80117b8 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800e990:	7dfb      	ldrb	r3, [r7, #23]
 800e992:	3301      	adds	r3, #1
 800e994:	75fb      	strb	r3, [r7, #23]
 800e996:	7dfa      	ldrb	r2, [r7, #23]
 800e998:	7bfb      	ldrb	r3, [r7, #15]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	f4ff af63 	bcc.w	800e866 <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 800e9a0:	2300      	movs	r3, #0
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	371c      	adds	r7, #28
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd90      	pop	{r4, r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	08012d3c 	.word	0x08012d3c
 800e9b0:	08012d48 	.word	0x08012d48
 800e9b4:	08012d70 	.word	0x08012d70
 800e9b8:	08012d98 	.word	0x08012d98
 800e9bc:	0800f101 	.word	0x0800f101
 800e9c0:	08012db0 	.word	0x08012db0
 800e9c4:	0800f351 	.word	0x0800f351
 800e9c8:	08012dc4 	.word	0x08012dc4

0800e9cc <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e9da:	69db      	ldr	r3, [r3, #28]
 800e9dc:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	785b      	ldrb	r3, [r3, #1]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00e      	beq.n	800ea04 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	785b      	ldrb	r3, [r3, #1]
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f002 fbe2 	bl	80111b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	785b      	ldrb	r3, [r3, #1]
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f002 fc0e 	bl	801121a <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2200      	movs	r2, #0
 800ea02:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d00e      	beq.n	800ea2a <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	4619      	mov	r1, r3
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f002 fbcf 	bl	80111b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f002 fbfb 	bl	801121a <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2200      	movs	r2, #0
 800ea28:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ea30:	69db      	ldr	r3, [r3, #28]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00b      	beq.n	800ea4e <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ea3c:	69db      	ldr	r3, [r3, #28]
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f002 ff48 	bl	80118d4 <free>
    phost->pActiveClass->pData = 0U;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ea4e:	2300      	movs	r3, #0
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3710      	adds	r7, #16
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800ea60:	2301      	movs	r3, #1
 800ea62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800ea64:	2301      	movs	r3, #1
 800ea66:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ea6e:	69db      	ldr	r3, [r3, #28]
 800ea70:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	795b      	ldrb	r3, [r3, #5]
 800ea76:	2b05      	cmp	r3, #5
 800ea78:	d872      	bhi.n	800eb60 <USBH_HID_ClassRequest+0x108>
 800ea7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ea80 <USBH_HID_ClassRequest+0x28>)
 800ea7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea80:	0800ea99 	.word	0x0800ea99
 800ea84:	0800eb61 	.word	0x0800eb61
 800ea88:	0800eab3 	.word	0x0800eab3
 800ea8c:	0800ea99 	.word	0x0800ea99
 800ea90:	0800eaef 	.word	0x0800eaef
 800ea94:	0800eb19 	.word	0x0800eb19
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	331c      	adds	r3, #28
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	4610      	mov	r0, r2
 800eaa6:	f000 fa17 	bl	800eed8 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	2202      	movs	r2, #2
 800eaae:	715a      	strb	r2, [r3, #5]

      break;
 800eab0:	e05d      	b.n	800eb6e <USBH_HID_ClassRequest+0x116>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800eab6:	4619      	mov	r1, r3
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 f965 	bl	800ed88 <USBH_HID_GetHIDReportDescriptor>
 800eabe:	4603      	mov	r3, r0
 800eac0:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800eac2:	7bbb      	ldrb	r3, [r7, #14]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d103      	bne.n	800ead0 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	2204      	movs	r2, #4
 800eacc:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800eace:	e049      	b.n	800eb64 <USBH_HID_ClassRequest+0x10c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800ead0:	7bbb      	ldrb	r3, [r7, #14]
 800ead2:	2b03      	cmp	r3, #3
 800ead4:	d146      	bne.n	800eb64 <USBH_HID_ClassRequest+0x10c>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 800ead6:	4828      	ldr	r0, [pc, #160]	@ (800eb78 <USBH_HID_ClassRequest+0x120>)
 800ead8:	f003 f874 	bl	8011bc4 <iprintf>
 800eadc:	4827      	ldr	r0, [pc, #156]	@ (800eb7c <USBH_HID_ClassRequest+0x124>)
 800eade:	f003 f871 	bl	8011bc4 <iprintf>
 800eae2:	200a      	movs	r0, #10
 800eae4:	f003 f880 	bl	8011be8 <putchar>
        status = USBH_FAIL;
 800eae8:	2302      	movs	r3, #2
 800eaea:	73fb      	strb	r3, [r7, #15]
      break;
 800eaec:	e03a      	b.n	800eb64 <USBH_HID_ClassRequest+0x10c>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800eaee:	2200      	movs	r2, #0
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f000 f976 	bl	800ede4 <USBH_HID_SetIdle>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800eafc:	7bbb      	ldrb	r3, [r7, #14]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d103      	bne.n	800eb0a <USBH_HID_ClassRequest+0xb2>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	2205      	movs	r2, #5
 800eb06:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800eb08:	e02e      	b.n	800eb68 <USBH_HID_ClassRequest+0x110>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800eb0a:	7bbb      	ldrb	r3, [r7, #14]
 800eb0c:	2b03      	cmp	r3, #3
 800eb0e:	d12b      	bne.n	800eb68 <USBH_HID_ClassRequest+0x110>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	2205      	movs	r2, #5
 800eb14:	715a      	strb	r2, [r3, #5]
      break;
 800eb16:	e027      	b.n	800eb68 <USBH_HID_ClassRequest+0x110>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800eb18:	2100      	movs	r1, #0
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 f9b6 	bl	800ee8c <USBH_HID_SetProtocol>
 800eb20:	4603      	mov	r3, r0
 800eb22:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800eb24:	7bbb      	ldrb	r3, [r7, #14]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d10b      	bne.n	800eb42 <USBH_HID_ClassRequest+0xea>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800eb36:	2102      	movs	r1, #2
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	4798      	blx	r3
        status = USBH_OK;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800eb40:	e014      	b.n	800eb6c <USBH_HID_ClassRequest+0x114>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800eb42:	7bbb      	ldrb	r3, [r7, #14]
 800eb44:	2b03      	cmp	r3, #3
 800eb46:	d111      	bne.n	800eb6c <USBH_HID_ClassRequest+0x114>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 800eb48:	480b      	ldr	r0, [pc, #44]	@ (800eb78 <USBH_HID_ClassRequest+0x120>)
 800eb4a:	f003 f83b 	bl	8011bc4 <iprintf>
 800eb4e:	480c      	ldr	r0, [pc, #48]	@ (800eb80 <USBH_HID_ClassRequest+0x128>)
 800eb50:	f003 f838 	bl	8011bc4 <iprintf>
 800eb54:	200a      	movs	r0, #10
 800eb56:	f003 f847 	bl	8011be8 <putchar>
        status = USBH_FAIL;
 800eb5a:	2302      	movs	r3, #2
 800eb5c:	73fb      	strb	r3, [r7, #15]
      break;
 800eb5e:	e005      	b.n	800eb6c <USBH_HID_ClassRequest+0x114>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 800eb60:	bf00      	nop
 800eb62:	e004      	b.n	800eb6e <USBH_HID_ClassRequest+0x116>
      break;
 800eb64:	bf00      	nop
 800eb66:	e002      	b.n	800eb6e <USBH_HID_ClassRequest+0x116>
      break;
 800eb68:	bf00      	nop
 800eb6a:	e000      	b.n	800eb6e <USBH_HID_ClassRequest+0x116>
      break;
 800eb6c:	bf00      	nop
  }

  return status;
 800eb6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	08012ddc 	.word	0x08012ddc
 800eb7c:	08012de4 	.word	0x08012de4
 800eb80:	08012e24 	.word	0x08012e24

0800eb84 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b088      	sub	sp, #32
 800eb88:	af02      	add	r7, sp, #8
 800eb8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800eb96:	69db      	ldr	r3, [r3, #28]
 800eb98:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	789b      	ldrb	r3, [r3, #2]
 800eb9e:	2b06      	cmp	r3, #6
 800eba0:	f200 80c1 	bhi.w	800ed26 <USBH_HID_Process+0x1a2>
 800eba4:	a201      	add	r2, pc, #4	@ (adr r2, 800ebac <USBH_HID_Process+0x28>)
 800eba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebaa:	bf00      	nop
 800ebac:	0800ebc9 	.word	0x0800ebc9
 800ebb0:	0800ec01 	.word	0x0800ec01
 800ebb4:	0800ed27 	.word	0x0800ed27
 800ebb8:	0800ed27 	.word	0x0800ed27
 800ebbc:	0800ec71 	.word	0x0800ec71
 800ebc0:	0800ec5b 	.word	0x0800ec5b
 800ebc4:	0800ec9f 	.word	0x0800ec9f
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	4798      	blx	r3
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800ebd4:	7dfb      	ldrb	r3, [r7, #23]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d103      	bne.n	800ebe2 <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ebe0:	e0a6      	b.n	800ed30 <USBH_HID_Process+0x1ac>
        USBH_ErrLog("HID Class Init failed");
 800ebe2:	4856      	ldr	r0, [pc, #344]	@ (800ed3c <USBH_HID_Process+0x1b8>)
 800ebe4:	f002 ffee 	bl	8011bc4 <iprintf>
 800ebe8:	4855      	ldr	r0, [pc, #340]	@ (800ed40 <USBH_HID_Process+0x1bc>)
 800ebea:	f002 ffeb 	bl	8011bc4 <iprintf>
 800ebee:	200a      	movs	r0, #10
 800ebf0:	f002 fffa 	bl	8011be8 <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	2207      	movs	r2, #7
 800ebf8:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800ebfa:	2302      	movs	r3, #2
 800ebfc:	75fb      	strb	r3, [r7, #23]
      break;
 800ebfe:	e097      	b.n	800ed30 <USBH_HID_Process+0x1ac>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	695a      	ldr	r2, [r3, #20]
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	8b1b      	ldrh	r3, [r3, #24]
 800ec08:	b2db      	uxtb	r3, r3
 800ec0a:	9300      	str	r3, [sp, #0]
 800ec0c:	4613      	mov	r3, r2
 800ec0e:	2200      	movs	r2, #0
 800ec10:	2101      	movs	r1, #1
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 f90e 	bl	800ee34 <USBH_HID_GetReport>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800ec1c:	7dfb      	ldrb	r3, [r7, #23]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d103      	bne.n	800ec2a <USBH_HID_Process+0xa6>
      {
        HID_Handle->state = USBH_HID_SYNC;
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	2205      	movs	r2, #5
 800ec26:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ec28:	e082      	b.n	800ed30 <USBH_HID_Process+0x1ac>
      else if (status == USBH_BUSY)
 800ec2a:	7dfb      	ldrb	r3, [r7, #23]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d105      	bne.n	800ec3c <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_IDLE;
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	2201      	movs	r2, #1
 800ec34:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800ec36:	2300      	movs	r3, #0
 800ec38:	75fb      	strb	r3, [r7, #23]
      break;
 800ec3a:	e079      	b.n	800ed30 <USBH_HID_Process+0x1ac>
      else if (status == USBH_NOT_SUPPORTED)
 800ec3c:	7dfb      	ldrb	r3, [r7, #23]
 800ec3e:	2b03      	cmp	r3, #3
 800ec40:	d105      	bne.n	800ec4e <USBH_HID_Process+0xca>
        HID_Handle->state = USBH_HID_SYNC;
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	2205      	movs	r2, #5
 800ec46:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	75fb      	strb	r3, [r7, #23]
      break;
 800ec4c:	e070      	b.n	800ed30 <USBH_HID_Process+0x1ac>
        HID_Handle->state = USBH_HID_ERROR;
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	2207      	movs	r2, #7
 800ec52:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800ec54:	2302      	movs	r3, #2
 800ec56:	75fb      	strb	r3, [r7, #23]
      break;
 800ec58:	e06a      	b.n	800ed30 <USBH_HID_Process+0x1ac>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800ec60:	f003 0301 	and.w	r3, r3, #1
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d060      	beq.n	800ed2a <USBH_HID_Process+0x1a6>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	2204      	movs	r2, #4
 800ec6c:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ec6e:	e05c      	b.n	800ed2a <USBH_HID_Process+0x1a6>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800ec78:	b2da      	uxtb	r2, r3
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	785b      	ldrb	r3, [r3, #1]
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f002 fa5b 	bl	801113a <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	2206      	movs	r2, #6
 800ec88:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	2200      	movs	r2, #0
 800ec98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 800ec9c:	e048      	b.n	800ed30 <USBH_HID_Process+0x1ac>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	785b      	ldrb	r3, [r3, #1]
 800eca2:	4619      	mov	r1, r3
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f002 fd5d 	bl	8011764 <USBH_LL_GetURBState>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d124      	bne.n	800ecfa <USBH_HID_Process+0x176>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	785b      	ldrb	r3, [r3, #1]
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f002 fcc2 	bl	8011640 <USBH_LL_GetLastXferSize>
 800ecbc:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d132      	bne.n	800ed2e <USBH_HID_Process+0x1aa>
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d02f      	beq.n	800ed2e <USBH_HID_Process+0x1aa>
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	689b      	ldr	r3, [r3, #8]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d02b      	beq.n	800ed2e <USBH_HID_Process+0x1aa>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	f103 0008 	add.w	r0, r3, #8
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	6959      	ldr	r1, [r3, #20]
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	8b1b      	ldrh	r3, [r3, #24]
 800ece4:	461a      	mov	r2, r3
 800ece6:	f000 f9b7 	bl	800f058 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	2201      	movs	r2, #1
 800ecee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f7f1 fc4c 	bl	8000590 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 800ecf8:	e019      	b.n	800ed2e <USBH_HID_Process+0x1aa>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	785b      	ldrb	r3, [r3, #1]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f002 fd2f 	bl	8011764 <USBH_LL_GetURBState>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b05      	cmp	r3, #5
 800ed0a:	d110      	bne.n	800ed2e <USBH_HID_Process+0x1aa>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	7e9b      	ldrb	r3, [r3, #26]
 800ed10:	4619      	mov	r1, r3
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f001 fcbe 	bl	8010694 <USBH_ClrFeature>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d107      	bne.n	800ed2e <USBH_HID_Process+0x1aa>
            HID_Handle->state = USBH_HID_GET_DATA;
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	2204      	movs	r2, #4
 800ed22:	709a      	strb	r2, [r3, #2]
      break;
 800ed24:	e003      	b.n	800ed2e <USBH_HID_Process+0x1aa>

    default:
      break;
 800ed26:	bf00      	nop
 800ed28:	e002      	b.n	800ed30 <USBH_HID_Process+0x1ac>
      break;
 800ed2a:	bf00      	nop
 800ed2c:	e000      	b.n	800ed30 <USBH_HID_Process+0x1ac>
      break;
 800ed2e:	bf00      	nop
  }

  return status;
 800ed30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3718      	adds	r7, #24
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	08012ddc 	.word	0x08012ddc
 800ed40:	08012e5c 	.word	0x08012e5c

0800ed44 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b085      	sub	sp, #20
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ed52:	69db      	ldr	r3, [r3, #28]
 800ed54:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	789b      	ldrb	r3, [r3, #2]
 800ed5a:	2b06      	cmp	r3, #6
 800ed5c:	d10c      	bne.n	800ed78 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	6a1b      	ldr	r3, [r3, #32]
 800ed68:	1ad3      	subs	r3, r2, r3
 800ed6a:	68fa      	ldr	r2, [r7, #12]
 800ed6c:	8b92      	ldrh	r2, [r2, #28]
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d302      	bcc.n	800ed78 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2204      	movs	r2, #4
 800ed76:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800ed78:	2300      	movs	r3, #0
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3714      	adds	r7, #20
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed84:	4770      	bx	lr
	...

0800ed88 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b086      	sub	sp, #24
 800ed8c:	af02      	add	r7, sp, #8
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	460b      	mov	r3, r1
 800ed92:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800ed94:	887b      	ldrh	r3, [r7, #2]
 800ed96:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d90a      	bls.n	800edb4 <USBH_HID_GetHIDReportDescriptor+0x2c>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 800ed9e:	480f      	ldr	r0, [pc, #60]	@ (800eddc <USBH_HID_GetHIDReportDescriptor+0x54>)
 800eda0:	f002 ff10 	bl	8011bc4 <iprintf>
 800eda4:	480e      	ldr	r0, [pc, #56]	@ (800ede0 <USBH_HID_GetHIDReportDescriptor+0x58>)
 800eda6:	f002 ff0d 	bl	8011bc4 <iprintf>
 800edaa:	200a      	movs	r0, #10
 800edac:	f002 ff1c 	bl	8011be8 <putchar>
    return USBH_NOT_SUPPORTED;
 800edb0:	2303      	movs	r3, #3
 800edb2:	e00e      	b.n	800edd2 <USBH_HID_GetHIDReportDescriptor+0x4a>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800edba:	887b      	ldrh	r3, [r7, #2]
 800edbc:	9300      	str	r3, [sp, #0]
 800edbe:	4613      	mov	r3, r2
 800edc0:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800edc4:	2101      	movs	r1, #1
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f001 fbc4 	bl	8010554 <USBH_GetDescriptor>
 800edcc:	4603      	mov	r3, r0
 800edce:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800edd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	08012ddc 	.word	0x08012ddc
 800ede0:	08012e74 	.word	0x08012e74

0800ede4 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	460b      	mov	r3, r1
 800edee:	70fb      	strb	r3, [r7, #3]
 800edf0:	4613      	mov	r3, r2
 800edf2:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2221      	movs	r2, #33	@ 0x21
 800edf8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	220a      	movs	r2, #10
 800edfe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800ee00:	78fb      	ldrb	r3, [r7, #3]
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	021b      	lsls	r3, r3, #8
 800ee06:	b29a      	uxth	r2, r3
 800ee08:	78bb      	ldrb	r3, [r7, #2]
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	4313      	orrs	r3, r2
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2200      	movs	r2, #0
 800ee18:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800ee20:	2200      	movs	r2, #0
 800ee22:	2100      	movs	r1, #0
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f001 ff6b 	bl	8010d00 <USBH_CtlReq>
 800ee2a:	4603      	mov	r3, r0
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3708      	adds	r7, #8
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b084      	sub	sp, #16
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	607b      	str	r3, [r7, #4]
 800ee3e:	460b      	mov	r3, r1
 800ee40:	72fb      	strb	r3, [r7, #11]
 800ee42:	4613      	mov	r3, r2
 800ee44:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	22a1      	movs	r2, #161	@ 0xa1
 800ee4a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800ee52:	7afb      	ldrb	r3, [r7, #11]
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	021b      	lsls	r3, r3, #8
 800ee58:	b29a      	uxth	r2, r3
 800ee5a:	7abb      	ldrb	r3, [r7, #10]
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	4313      	orrs	r3, r2
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800ee6c:	7e3b      	ldrb	r3, [r7, #24]
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800ee74:	7e3b      	ldrb	r3, [r7, #24]
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	461a      	mov	r2, r3
 800ee7a:	6879      	ldr	r1, [r7, #4]
 800ee7c:	68f8      	ldr	r0, [r7, #12]
 800ee7e:	f001 ff3f 	bl	8010d00 <USBH_CtlReq>
 800ee82:	4603      	mov	r3, r0
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3710      	adds	r7, #16
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	460b      	mov	r3, r1
 800ee96:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2221      	movs	r2, #33	@ 0x21
 800ee9c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	220b      	movs	r2, #11
 800eea2:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800eea4:	78fb      	ldrb	r3, [r7, #3]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d003      	beq.n	800eeb2 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2200      	movs	r2, #0
 800eeae:	825a      	strh	r2, [r3, #18]
 800eeb0:	e002      	b.n	800eeb8 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2200      	movs	r2, #0
 800eebc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2200      	movs	r2, #0
 800eec2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800eec4:	2200      	movs	r2, #0
 800eec6:	2100      	movs	r1, #0
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f001 ff19 	bl	8010d00 <USBH_CtlReq>
 800eece:	4603      	mov	r3, r0

}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	3302      	adds	r3, #2
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	461a      	mov	r2, r3
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	3303      	adds	r3, #3
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	021b      	lsls	r3, r3, #8
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	4313      	orrs	r3, r2
 800eefa:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800eefc:	897b      	ldrh	r3, [r7, #10]
 800eefe:	2b09      	cmp	r3, #9
 800ef00:	d941      	bls.n	800ef86 <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 800ef02:	2309      	movs	r3, #9
 800ef04:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800ef06:	e03a      	b.n	800ef7e <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ef08:	f107 0308 	add.w	r3, r7, #8
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f001 fedc 	bl	8010ccc <USBH_GetNextDesc>
 800ef14:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	785b      	ldrb	r3, [r3, #1]
 800ef1a:	2b21      	cmp	r3, #33	@ 0x21
 800ef1c:	d12f      	bne.n	800ef7e <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	781a      	ldrb	r2, [r3, #0]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	785a      	ldrb	r2, [r3, #1]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	3302      	adds	r3, #2
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	461a      	mov	r2, r3
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	3303      	adds	r3, #3
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	021b      	lsls	r3, r3, #8
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	4313      	orrs	r3, r2
 800ef42:	b29a      	uxth	r2, r3
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	791a      	ldrb	r2, [r3, #4]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	795a      	ldrb	r2, [r3, #5]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	799a      	ldrb	r2, [r3, #6]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	3307      	adds	r3, #7
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	461a      	mov	r2, r3
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	3308      	adds	r3, #8
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	021b      	lsls	r3, r3, #8
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	4313      	orrs	r3, r2
 800ef74:	b29a      	uxth	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	811a      	strh	r2, [r3, #8]
        break;
 800ef7a:	bf00      	nop
      }
    }
  }
}
 800ef7c:	e003      	b.n	800ef86 <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800ef7e:	893b      	ldrh	r3, [r7, #8]
 800ef80:	897a      	ldrh	r2, [r7, #10]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d8c0      	bhi.n	800ef08 <USBH_HID_ParseHIDDesc+0x30>
}
 800ef86:	bf00      	nop
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800ef8e:	b480      	push	{r7}
 800ef90:	b085      	sub	sp, #20
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	60f8      	str	r0, [r7, #12]
 800ef96:	60b9      	str	r1, [r7, #8]
 800ef98:	4613      	mov	r3, r2
 800ef9a:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2200      	movs	r2, #0
 800efa6:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2200      	movs	r2, #0
 800efac:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	88fa      	ldrh	r2, [r7, #6]
 800efb2:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	68ba      	ldr	r2, [r7, #8]
 800efb8:	601a      	str	r2, [r3, #0]
}
 800efba:	bf00      	nop
 800efbc:	3714      	adds	r7, #20
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr

0800efc6 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800efc6:	b480      	push	{r7}
 800efc8:	b087      	sub	sp, #28
 800efca:	af00      	add	r7, sp, #0
 800efcc:	60f8      	str	r0, [r7, #12]
 800efce:	60b9      	str	r1, [r7, #8]
 800efd0:	4613      	mov	r3, r2
 800efd2:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	7a9b      	ldrb	r3, [r3, #10]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d131      	bne.n	800f044 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	2201      	movs	r2, #1
 800efe4:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800efe6:	2300      	movs	r3, #0
 800efe8:	82fb      	strh	r3, [r7, #22]
 800efea:	e027      	b.n	800f03c <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	88da      	ldrh	r2, [r3, #6]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	889b      	ldrh	r3, [r3, #4]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d019      	beq.n	800f02c <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	68fa      	ldr	r2, [r7, #12]
 800effe:	88d2      	ldrh	r2, [r2, #6]
 800f000:	441a      	add	r2, r3
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	1c59      	adds	r1, r3, #1
 800f006:	6139      	str	r1, [r7, #16]
 800f008:	7812      	ldrb	r2, [r2, #0]
 800f00a:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	88db      	ldrh	r3, [r3, #6]
 800f010:	3301      	adds	r3, #1
 800f012:	b29a      	uxth	r2, r3
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	88da      	ldrh	r2, [r3, #6]
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	891b      	ldrh	r3, [r3, #8]
 800f020:	429a      	cmp	r2, r3
 800f022:	d108      	bne.n	800f036 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2200      	movs	r2, #0
 800f028:	80da      	strh	r2, [r3, #6]
 800f02a:	e004      	b.n	800f036 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2200      	movs	r2, #0
 800f030:	729a      	strb	r2, [r3, #10]
        return i;
 800f032:	8afb      	ldrh	r3, [r7, #22]
 800f034:	e00a      	b.n	800f04c <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800f036:	8afb      	ldrh	r3, [r7, #22]
 800f038:	3301      	adds	r3, #1
 800f03a:	82fb      	strh	r3, [r7, #22]
 800f03c:	8afa      	ldrh	r2, [r7, #22]
 800f03e:	88fb      	ldrh	r3, [r7, #6]
 800f040:	429a      	cmp	r2, r3
 800f042:	d3d3      	bcc.n	800efec <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2200      	movs	r2, #0
 800f048:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800f04a:	88fb      	ldrh	r3, [r7, #6]
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	371c      	adds	r7, #28
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800f058:	b480      	push	{r7}
 800f05a:	b087      	sub	sp, #28
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	4613      	mov	r3, r2
 800f064:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	7a9b      	ldrb	r3, [r3, #10]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d13c      	bne.n	800f0ec <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2201      	movs	r2, #1
 800f076:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800f078:	2300      	movs	r3, #0
 800f07a:	82fb      	strh	r3, [r7, #22]
 800f07c:	e032      	b.n	800f0e4 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	889b      	ldrh	r3, [r3, #4]
 800f082:	3301      	adds	r3, #1
 800f084:	68fa      	ldr	r2, [r7, #12]
 800f086:	88d2      	ldrh	r2, [r2, #6]
 800f088:	4293      	cmp	r3, r2
 800f08a:	d00a      	beq.n	800f0a2 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	889b      	ldrh	r3, [r3, #4]
 800f090:	3301      	adds	r3, #1
 800f092:	68fa      	ldr	r2, [r7, #12]
 800f094:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800f096:	4293      	cmp	r3, r2
 800f098:	d108      	bne.n	800f0ac <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	88db      	ldrh	r3, [r3, #6]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d104      	bne.n	800f0ac <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	729a      	strb	r2, [r3, #10]
        return i;
 800f0a8:	8afb      	ldrh	r3, [r7, #22]
 800f0aa:	e023      	b.n	800f0f4 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	1c5a      	adds	r2, r3, #1
 800f0b0:	613a      	str	r2, [r7, #16]
 800f0b2:	68fa      	ldr	r2, [r7, #12]
 800f0b4:	6812      	ldr	r2, [r2, #0]
 800f0b6:	68f9      	ldr	r1, [r7, #12]
 800f0b8:	8889      	ldrh	r1, [r1, #4]
 800f0ba:	440a      	add	r2, r1
 800f0bc:	781b      	ldrb	r3, [r3, #0]
 800f0be:	7013      	strb	r3, [r2, #0]
        f->head++;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	889b      	ldrh	r3, [r3, #4]
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	b29a      	uxth	r2, r3
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	889a      	ldrh	r2, [r3, #4]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	891b      	ldrh	r3, [r3, #8]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d102      	bne.n	800f0de <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800f0de:	8afb      	ldrh	r3, [r7, #22]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	82fb      	strh	r3, [r7, #22]
 800f0e4:	8afa      	ldrh	r2, [r7, #22]
 800f0e6:	88fb      	ldrh	r3, [r7, #6]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d3c8      	bcc.n	800f07e <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800f0f2:	88fb      	ldrh	r3, [r7, #6]
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	371c      	adds	r7, #28
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b084      	sub	sp, #16
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f10e:	69db      	ldr	r3, [r3, #28]
 800f110:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800f112:	4b22      	ldr	r3, [pc, #136]	@ (800f19c <USBH_HID_KeybdInit+0x9c>)
 800f114:	2200      	movs	r2, #0
 800f116:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800f118:	4b20      	ldr	r3, [pc, #128]	@ (800f19c <USBH_HID_KeybdInit+0x9c>)
 800f11a:	2200      	movs	r2, #0
 800f11c:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800f11e:	4b1f      	ldr	r3, [pc, #124]	@ (800f19c <USBH_HID_KeybdInit+0x9c>)
 800f120:	2200      	movs	r2, #0
 800f122:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800f124:	4b1d      	ldr	r3, [pc, #116]	@ (800f19c <USBH_HID_KeybdInit+0x9c>)
 800f126:	2200      	movs	r2, #0
 800f128:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800f12a:	4b1c      	ldr	r3, [pc, #112]	@ (800f19c <USBH_HID_KeybdInit+0x9c>)
 800f12c:	2200      	movs	r2, #0
 800f12e:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800f130:	4b1a      	ldr	r3, [pc, #104]	@ (800f19c <USBH_HID_KeybdInit+0x9c>)
 800f132:	2200      	movs	r2, #0
 800f134:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800f136:	4b19      	ldr	r3, [pc, #100]	@ (800f19c <USBH_HID_KeybdInit+0x9c>)
 800f138:	2200      	movs	r2, #0
 800f13a:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800f13c:	4b17      	ldr	r3, [pc, #92]	@ (800f19c <USBH_HID_KeybdInit+0x9c>)
 800f13e:	2200      	movs	r2, #0
 800f140:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800f142:	2300      	movs	r3, #0
 800f144:	60fb      	str	r3, [r7, #12]
 800f146:	e00c      	b.n	800f162 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800f148:	4a15      	ldr	r2, [pc, #84]	@ (800f1a0 <USBH_HID_KeybdInit+0xa0>)
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	4413      	add	r3, r2
 800f14e:	2200      	movs	r2, #0
 800f150:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 800f152:	4a14      	ldr	r2, [pc, #80]	@ (800f1a4 <USBH_HID_KeybdInit+0xa4>)
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	4413      	add	r3, r2
 800f158:	2200      	movs	r2, #0
 800f15a:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	3301      	adds	r3, #1
 800f160:	60fb      	str	r3, [r7, #12]
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2b07      	cmp	r3, #7
 800f166:	d9ef      	bls.n	800f148 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	8b1b      	ldrh	r3, [r3, #24]
 800f16c:	2b08      	cmp	r3, #8
 800f16e:	d902      	bls.n	800f176 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	2208      	movs	r2, #8
 800f174:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	4a0a      	ldr	r2, [pc, #40]	@ (800f1a4 <USBH_HID_KeybdInit+0xa4>)
 800f17a:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	f103 0008 	add.w	r0, r3, #8
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f188:	2250      	movs	r2, #80	@ 0x50
 800f18a:	4619      	mov	r1, r3
 800f18c:	f7ff feff 	bl	800ef8e <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800f190:	2300      	movs	r3, #0
}
 800f192:	4618      	mov	r0, r3
 800f194:	3710      	adds	r7, #16
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	200092cc 	.word	0x200092cc
 800f1a0:	200092e4 	.word	0x200092e4
 800f1a4:	200092dc 	.word	0x200092dc

0800f1a8 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f000 f80d 	bl	800f1d0 <USBH_HID_KeybdDecode>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d101      	bne.n	800f1c0 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800f1bc:	4b03      	ldr	r3, [pc, #12]	@ (800f1cc <USBH_HID_GetKeybdInfo+0x24>)
 800f1be:	e000      	b.n	800f1c2 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800f1c0:	2300      	movs	r3, #0
  }
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	200092cc 	.word	0x200092cc

0800f1d0 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f1de:	69db      	ldr	r3, [r3, #28]
 800f1e0:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	8b1b      	ldrh	r3, [r3, #24]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d003      	beq.n	800f1f2 <USBH_HID_KeybdDecode+0x22>
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	689b      	ldr	r3, [r3, #8]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d101      	bne.n	800f1f6 <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 800f1f2:	2302      	movs	r3, #2
 800f1f4:	e066      	b.n	800f2c4 <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	f103 0008 	add.w	r0, r3, #8
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	8b1b      	ldrh	r3, [r3, #24]
 800f200:	461a      	mov	r2, r3
 800f202:	4932      	ldr	r1, [pc, #200]	@ (800f2cc <USBH_HID_KeybdDecode+0xfc>)
 800f204:	f7ff fedf 	bl	800efc6 <USBH_HID_FifoRead>
 800f208:	4603      	mov	r3, r0
 800f20a:	461a      	mov	r2, r3
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	8b1b      	ldrh	r3, [r3, #24]
 800f210:	429a      	cmp	r2, r3
 800f212:	d156      	bne.n	800f2c2 <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800f214:	2100      	movs	r1, #0
 800f216:	482e      	ldr	r0, [pc, #184]	@ (800f2d0 <USBH_HID_KeybdDecode+0x100>)
 800f218:	f000 f8e4 	bl	800f3e4 <HID_ReadItem>
 800f21c:	4603      	mov	r3, r0
 800f21e:	b2da      	uxtb	r2, r3
 800f220:	4b2c      	ldr	r3, [pc, #176]	@ (800f2d4 <USBH_HID_KeybdDecode+0x104>)
 800f222:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800f224:	2100      	movs	r1, #0
 800f226:	482c      	ldr	r0, [pc, #176]	@ (800f2d8 <USBH_HID_KeybdDecode+0x108>)
 800f228:	f000 f8dc 	bl	800f3e4 <HID_ReadItem>
 800f22c:	4603      	mov	r3, r0
 800f22e:	b2da      	uxtb	r2, r3
 800f230:	4b28      	ldr	r3, [pc, #160]	@ (800f2d4 <USBH_HID_KeybdDecode+0x104>)
 800f232:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800f234:	2100      	movs	r1, #0
 800f236:	4829      	ldr	r0, [pc, #164]	@ (800f2dc <USBH_HID_KeybdDecode+0x10c>)
 800f238:	f000 f8d4 	bl	800f3e4 <HID_ReadItem>
 800f23c:	4603      	mov	r3, r0
 800f23e:	b2da      	uxtb	r2, r3
 800f240:	4b24      	ldr	r3, [pc, #144]	@ (800f2d4 <USBH_HID_KeybdDecode+0x104>)
 800f242:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800f244:	2100      	movs	r1, #0
 800f246:	4826      	ldr	r0, [pc, #152]	@ (800f2e0 <USBH_HID_KeybdDecode+0x110>)
 800f248:	f000 f8cc 	bl	800f3e4 <HID_ReadItem>
 800f24c:	4603      	mov	r3, r0
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	4b20      	ldr	r3, [pc, #128]	@ (800f2d4 <USBH_HID_KeybdDecode+0x104>)
 800f252:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800f254:	2100      	movs	r1, #0
 800f256:	4823      	ldr	r0, [pc, #140]	@ (800f2e4 <USBH_HID_KeybdDecode+0x114>)
 800f258:	f000 f8c4 	bl	800f3e4 <HID_ReadItem>
 800f25c:	4603      	mov	r3, r0
 800f25e:	b2da      	uxtb	r2, r3
 800f260:	4b1c      	ldr	r3, [pc, #112]	@ (800f2d4 <USBH_HID_KeybdDecode+0x104>)
 800f262:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800f264:	2100      	movs	r1, #0
 800f266:	4820      	ldr	r0, [pc, #128]	@ (800f2e8 <USBH_HID_KeybdDecode+0x118>)
 800f268:	f000 f8bc 	bl	800f3e4 <HID_ReadItem>
 800f26c:	4603      	mov	r3, r0
 800f26e:	b2da      	uxtb	r2, r3
 800f270:	4b18      	ldr	r3, [pc, #96]	@ (800f2d4 <USBH_HID_KeybdDecode+0x104>)
 800f272:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800f274:	2100      	movs	r1, #0
 800f276:	481d      	ldr	r0, [pc, #116]	@ (800f2ec <USBH_HID_KeybdDecode+0x11c>)
 800f278:	f000 f8b4 	bl	800f3e4 <HID_ReadItem>
 800f27c:	4603      	mov	r3, r0
 800f27e:	b2da      	uxtb	r2, r3
 800f280:	4b14      	ldr	r3, [pc, #80]	@ (800f2d4 <USBH_HID_KeybdDecode+0x104>)
 800f282:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800f284:	2100      	movs	r1, #0
 800f286:	481a      	ldr	r0, [pc, #104]	@ (800f2f0 <USBH_HID_KeybdDecode+0x120>)
 800f288:	f000 f8ac 	bl	800f3e4 <HID_ReadItem>
 800f28c:	4603      	mov	r3, r0
 800f28e:	b2da      	uxtb	r2, r3
 800f290:	4b10      	ldr	r3, [pc, #64]	@ (800f2d4 <USBH_HID_KeybdDecode+0x104>)
 800f292:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800f294:	2300      	movs	r3, #0
 800f296:	73fb      	strb	r3, [r7, #15]
 800f298:	e00e      	b.n	800f2b8 <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800f29a:	7bfb      	ldrb	r3, [r7, #15]
 800f29c:	4619      	mov	r1, r3
 800f29e:	4815      	ldr	r0, [pc, #84]	@ (800f2f4 <USBH_HID_KeybdDecode+0x124>)
 800f2a0:	f000 f8a0 	bl	800f3e4 <HID_ReadItem>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	7bfb      	ldrb	r3, [r7, #15]
 800f2a8:	b2d1      	uxtb	r1, r2
 800f2aa:	4a0a      	ldr	r2, [pc, #40]	@ (800f2d4 <USBH_HID_KeybdDecode+0x104>)
 800f2ac:	4413      	add	r3, r2
 800f2ae:	460a      	mov	r2, r1
 800f2b0:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800f2b2:	7bfb      	ldrb	r3, [r7, #15]
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	73fb      	strb	r3, [r7, #15]
 800f2b8:	7bfb      	ldrb	r3, [r7, #15]
 800f2ba:	2b05      	cmp	r3, #5
 800f2bc:	d9ed      	bls.n	800f29a <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	e000      	b.n	800f2c4 <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 800f2c2:	2302      	movs	r3, #2
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3710      	adds	r7, #16
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	200092e4 	.word	0x200092e4
 800f2d0:	080169f4 	.word	0x080169f4
 800f2d4:	200092cc 	.word	0x200092cc
 800f2d8:	08016a14 	.word	0x08016a14
 800f2dc:	08016a34 	.word	0x08016a34
 800f2e0:	08016a54 	.word	0x08016a54
 800f2e4:	08016a74 	.word	0x08016a74
 800f2e8:	08016a94 	.word	0x08016a94
 800f2ec:	08016ab4 	.word	0x08016ab4
 800f2f0:	08016ad4 	.word	0x08016ad4
 800f2f4:	08016af4 	.word	0x08016af4

0800f2f8 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b085      	sub	sp, #20
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	789b      	ldrb	r3, [r3, #2]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d103      	bne.n	800f310 <USBH_HID_GetASCIICode+0x18>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	799b      	ldrb	r3, [r3, #6]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d009      	beq.n	800f324 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	7a5b      	ldrb	r3, [r3, #9]
 800f314:	461a      	mov	r2, r3
 800f316:	4b0b      	ldr	r3, [pc, #44]	@ (800f344 <USBH_HID_GetASCIICode+0x4c>)
 800f318:	5c9b      	ldrb	r3, [r3, r2]
 800f31a:	461a      	mov	r2, r3
 800f31c:	4b0a      	ldr	r3, [pc, #40]	@ (800f348 <USBH_HID_GetASCIICode+0x50>)
 800f31e:	5c9b      	ldrb	r3, [r3, r2]
 800f320:	73fb      	strb	r3, [r7, #15]
 800f322:	e008      	b.n	800f336 <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	7a5b      	ldrb	r3, [r3, #9]
 800f328:	461a      	mov	r2, r3
 800f32a:	4b06      	ldr	r3, [pc, #24]	@ (800f344 <USBH_HID_GetASCIICode+0x4c>)
 800f32c:	5c9b      	ldrb	r3, [r3, r2]
 800f32e:	461a      	mov	r2, r3
 800f330:	4b06      	ldr	r3, [pc, #24]	@ (800f34c <USBH_HID_GetASCIICode+0x54>)
 800f332:	5c9b      	ldrb	r3, [r3, r2]
 800f334:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800f336:	7bfb      	ldrb	r3, [r7, #15]
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3714      	adds	r7, #20
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr
 800f344:	08016c1c 	.word	0x08016c1c
 800f348:	08016b98 	.word	0x08016b98
 800f34c:	08016b14 	.word	0x08016b14

0800f350 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b084      	sub	sp, #16
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f35e:	69db      	ldr	r3, [r3, #28]
 800f360:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800f362:	4b1d      	ldr	r3, [pc, #116]	@ (800f3d8 <USBH_HID_MouseInit+0x88>)
 800f364:	2200      	movs	r2, #0
 800f366:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800f368:	4b1b      	ldr	r3, [pc, #108]	@ (800f3d8 <USBH_HID_MouseInit+0x88>)
 800f36a:	2200      	movs	r2, #0
 800f36c:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800f36e:	4b1a      	ldr	r3, [pc, #104]	@ (800f3d8 <USBH_HID_MouseInit+0x88>)
 800f370:	2200      	movs	r2, #0
 800f372:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800f374:	4b18      	ldr	r3, [pc, #96]	@ (800f3d8 <USBH_HID_MouseInit+0x88>)
 800f376:	2200      	movs	r2, #0
 800f378:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800f37a:	4b17      	ldr	r3, [pc, #92]	@ (800f3d8 <USBH_HID_MouseInit+0x88>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800f380:	2300      	movs	r3, #0
 800f382:	60fb      	str	r3, [r7, #12]
 800f384:	e00c      	b.n	800f3a0 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800f386:	4a15      	ldr	r2, [pc, #84]	@ (800f3dc <USBH_HID_MouseInit+0x8c>)
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	4413      	add	r3, r2
 800f38c:	2200      	movs	r2, #0
 800f38e:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800f390:	4a13      	ldr	r2, [pc, #76]	@ (800f3e0 <USBH_HID_MouseInit+0x90>)
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	4413      	add	r3, r2
 800f396:	2200      	movs	r2, #0
 800f398:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	3301      	adds	r3, #1
 800f39e:	60fb      	str	r3, [r7, #12]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2b07      	cmp	r3, #7
 800f3a4:	d9ef      	bls.n	800f386 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	8b1b      	ldrh	r3, [r3, #24]
 800f3aa:	2b08      	cmp	r3, #8
 800f3ac:	d902      	bls.n	800f3b4 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	2208      	movs	r2, #8
 800f3b2:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	4a0a      	ldr	r2, [pc, #40]	@ (800f3e0 <USBH_HID_MouseInit+0x90>)
 800f3b8:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	f103 0008 	add.w	r0, r3, #8
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f3c6:	2250      	movs	r2, #80	@ 0x50
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	f7ff fde0 	bl	800ef8e <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800f3ce:	2300      	movs	r3, #0
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3710      	adds	r7, #16
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}
 800f3d8:	200092ec 	.word	0x200092ec
 800f3dc:	200092f4 	.word	0x200092f4
 800f3e0:	200092fc 	.word	0x200092fc

0800f3e4 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b089      	sub	sp, #36	@ 0x24
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	7a1b      	ldrb	r3, [r3, #8]
 800f402:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	7a5b      	ldrb	r3, [r3, #9]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d01a      	beq.n	800f442 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	7a5b      	ldrb	r3, [r3, #9]
 800f410:	78fa      	ldrb	r2, [r7, #3]
 800f412:	429a      	cmp	r2, r3
 800f414:	d301      	bcc.n	800f41a <HID_ReadItem+0x36>
    {
      return (0U);
 800f416:	2300      	movs	r3, #0
 800f418:	e078      	b.n	800f50c <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800f41a:	78fb      	ldrb	r3, [r7, #3]
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	6852      	ldr	r2, [r2, #4]
 800f420:	fb02 f303 	mul.w	r3, r2, r3
 800f424:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800f426:	7cfb      	ldrb	r3, [r7, #19]
 800f428:	68fa      	ldr	r2, [r7, #12]
 800f42a:	4413      	add	r3, r2
 800f42c:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	08db      	lsrs	r3, r3, #3
 800f432:	697a      	ldr	r2, [r7, #20]
 800f434:	4413      	add	r3, r2
 800f436:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	f003 0307 	and.w	r3, r3, #7
 800f440:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800f442:	2300      	movs	r3, #0
 800f444:	61bb      	str	r3, [r7, #24]
 800f446:	e00a      	b.n	800f45e <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	461a      	mov	r2, r3
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	00db      	lsls	r3, r3, #3
 800f452:	fa02 f303 	lsl.w	r3, r2, r3
 800f456:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	3301      	adds	r3, #1
 800f45c:	61bb      	str	r3, [r7, #24]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	f003 0307 	and.w	r3, r3, #7
 800f466:	2b00      	cmp	r3, #0
 800f468:	d004      	beq.n	800f474 <HID_ReadItem+0x90>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	685b      	ldr	r3, [r3, #4]
 800f46e:	08db      	lsrs	r3, r3, #3
 800f470:	3301      	adds	r3, #1
 800f472:	e002      	b.n	800f47a <HID_ReadItem+0x96>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	08db      	lsrs	r3, r3, #3
 800f47a:	69ba      	ldr	r2, [r7, #24]
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d8e3      	bhi.n	800f448 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800f480:	7cfb      	ldrb	r3, [r7, #19]
 800f482:	69fa      	ldr	r2, [r7, #28]
 800f484:	40da      	lsrs	r2, r3
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	f04f 31ff 	mov.w	r1, #4294967295
 800f48e:	fa01 f303 	lsl.w	r3, r1, r3
 800f492:	43db      	mvns	r3, r3
 800f494:	4013      	ands	r3, r2
 800f496:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	68db      	ldr	r3, [r3, #12]
 800f49c:	69fa      	ldr	r2, [r7, #28]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d304      	bcc.n	800f4ac <HID_ReadItem+0xc8>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	691b      	ldr	r3, [r3, #16]
 800f4a6:	69fa      	ldr	r2, [r7, #28]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d901      	bls.n	800f4b0 <HID_ReadItem+0xcc>
  {
    return (0U);
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	e02d      	b.n	800f50c <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	7a9b      	ldrb	r3, [r3, #10]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d01e      	beq.n	800f4f6 <HID_ReadItem+0x112>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	3b01      	subs	r3, #1
 800f4be:	69fa      	ldr	r2, [r7, #28]
 800f4c0:	fa22 f303 	lsr.w	r3, r2, r3
 800f4c4:	f003 0301 	and.w	r3, r3, #1
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d014      	beq.n	800f4f6 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f4d6:	425b      	negs	r3, r3
 800f4d8:	69fa      	ldr	r2, [r7, #28]
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	69db      	ldr	r3, [r3, #28]
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d101      	bne.n	800f4ea <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	e010      	b.n	800f50c <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	69db      	ldr	r3, [r3, #28]
 800f4ee:	68ba      	ldr	r2, [r7, #8]
 800f4f0:	fb02 f303 	mul.w	r3, r2, r3
 800f4f4:	e00a      	b.n	800f50c <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	69db      	ldr	r3, [r3, #28]
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d101      	bne.n	800f502 <HID_ReadItem+0x11e>
    {
      return (val);
 800f4fe:	69fb      	ldr	r3, [r7, #28]
 800f500:	e004      	b.n	800f50c <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	69db      	ldr	r3, [r3, #28]
 800f506:	69fa      	ldr	r2, [r7, #28]
 800f508:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3724      	adds	r7, #36	@ 0x24
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr

0800f518 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	4613      	mov	r3, r2
 800f524:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d10a      	bne.n	800f542 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800f52c:	481c      	ldr	r0, [pc, #112]	@ (800f5a0 <USBH_Init+0x88>)
 800f52e:	f002 fb49 	bl	8011bc4 <iprintf>
 800f532:	481c      	ldr	r0, [pc, #112]	@ (800f5a4 <USBH_Init+0x8c>)
 800f534:	f002 fb46 	bl	8011bc4 <iprintf>
 800f538:	200a      	movs	r0, #10
 800f53a:	f002 fb55 	bl	8011be8 <putchar>
    return USBH_FAIL;
 800f53e:	2302      	movs	r3, #2
 800f540:	e029      	b.n	800f596 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	79fa      	ldrb	r2, [r7, #7]
 800f546:	f883 2d84 	strb.w	r2, [r3, #3460]	@ 0xd84

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2200      	movs	r2, #0
 800f54e:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
  phost->ClassNumber = 0U;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2200      	movs	r2, #0
 800f556:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800f55a:	68f8      	ldr	r0, [r7, #12]
 800f55c:	f000 f824 	bl	800f5a8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2200      	movs	r2, #0
 800f564:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
  phost->device.is_connected = 0U;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2200      	movs	r2, #0
 800f56c:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2200      	movs	r2, #0
 800f574:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	2200      	movs	r2, #0
 800f57c:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d003      	beq.n	800f58e <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	68ba      	ldr	r2, [r7, #8]
 800f58a:	f8c3 2d8c 	str.w	r2, [r3, #3468]	@ 0xd8c

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800f58e:	68f8      	ldr	r0, [r7, #12]
 800f590:	f001 ff98 	bl	80114c4 <USBH_LL_Init>

  return USBH_OK;
 800f594:	2300      	movs	r3, #0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3710      	adds	r7, #16
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
 800f59e:	bf00      	nop
 800f5a0:	08012f00 	.word	0x08012f00
 800f5a4:	08012f08 	.word	0x08012f08

0800f5a8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b084      	sub	sp, #16
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	60fb      	str	r3, [r7, #12]
 800f5b8:	e00a      	b.n	800f5d0 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	4413      	add	r3, r2
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	60fb      	str	r3, [r7, #12]
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	2b0f      	cmp	r3, #15
 800f5d4:	d9f1      	bls.n	800f5ba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	60fb      	str	r3, [r7, #12]
 800f5da:	e009      	b.n	800f5f0 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	4413      	add	r3, r2
 800f5e2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	60fb      	str	r3, [r7, #12]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	d9f0      	bls.n	800f5dc <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2201      	movs	r2, #1
 800f60a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2200      	movs	r2, #0
 800f610:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c

  phost->Control.state = CTRL_SETUP;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2201      	movs	r2, #1
 800f618:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2240      	movs	r2, #64	@ 0x40
 800f61e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2200      	movs	r2, #0
 800f624:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2200      	movs	r2, #0
 800f62a:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2201      	movs	r2, #1
 800f632:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5
  phost->device.RstCnt = 0U;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2200      	movs	r2, #0
 800f63a:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
  phost->device.EnumCnt = 0U;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2200      	movs	r2, #0
 800f642:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	331c      	adds	r3, #28
 800f64a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f64e:	2100      	movs	r1, #0
 800f650:	4618      	mov	r0, r3
 800f652:	f002 fc27 	bl	8011ea4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f65c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f660:	2100      	movs	r1, #0
 800f662:	4618      	mov	r0, r3
 800f664:	f002 fc1e 	bl	8011ea4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 800f66e:	2212      	movs	r2, #18
 800f670:	2100      	movs	r1, #0
 800f672:	4618      	mov	r0, r3
 800f674:	f002 fc16 	bl	8011ea4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800f67e:	223e      	movs	r2, #62	@ 0x3e
 800f680:	2100      	movs	r1, #0
 800f682:	4618      	mov	r0, r3
 800f684:	f002 fc0e 	bl	8011ea4 <memset>

  return USBH_OK;
 800f688:	2300      	movs	r3, #0
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
	...

0800f694 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d020      	beq.n	800f6ea <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d10f      	bne.n	800f6d2 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800f6b8:	1c59      	adds	r1, r3, #1
 800f6ba:	687a      	ldr	r2, [r7, #4]
 800f6bc:	f8c2 1d38 	str.w	r1, [r2, #3384]	@ 0xd38
 800f6c0:	687a      	ldr	r2, [r7, #4]
 800f6c2:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800f6c6:	6839      	ldr	r1, [r7, #0]
 800f6c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	73fb      	strb	r3, [r7, #15]
 800f6d0:	e016      	b.n	800f700 <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800f6d2:	480e      	ldr	r0, [pc, #56]	@ (800f70c <USBH_RegisterClass+0x78>)
 800f6d4:	f002 fa76 	bl	8011bc4 <iprintf>
 800f6d8:	480d      	ldr	r0, [pc, #52]	@ (800f710 <USBH_RegisterClass+0x7c>)
 800f6da:	f002 fa73 	bl	8011bc4 <iprintf>
 800f6de:	200a      	movs	r0, #10
 800f6e0:	f002 fa82 	bl	8011be8 <putchar>
      status = USBH_FAIL;
 800f6e4:	2302      	movs	r3, #2
 800f6e6:	73fb      	strb	r3, [r7, #15]
 800f6e8:	e00a      	b.n	800f700 <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800f6ea:	4808      	ldr	r0, [pc, #32]	@ (800f70c <USBH_RegisterClass+0x78>)
 800f6ec:	f002 fa6a 	bl	8011bc4 <iprintf>
 800f6f0:	4808      	ldr	r0, [pc, #32]	@ (800f714 <USBH_RegisterClass+0x80>)
 800f6f2:	f002 fa67 	bl	8011bc4 <iprintf>
 800f6f6:	200a      	movs	r0, #10
 800f6f8:	f002 fa76 	bl	8011be8 <putchar>
    status = USBH_FAIL;
 800f6fc:	2302      	movs	r3, #2
 800f6fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f700:	7bfb      	ldrb	r3, [r7, #15]
}
 800f702:	4618      	mov	r0, r3
 800f704:	3710      	adds	r7, #16
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	08012f00 	.word	0x08012f00
 800f710:	08012f1c 	.word	0x08012f1c
 800f714:	08012f38 	.word	0x08012f38

0800f718 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	460b      	mov	r3, r1
 800f722:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f724:	2300      	movs	r3, #0
 800f726:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f893 3cf4 	ldrb.w	r3, [r3, #3316]	@ 0xcf4
 800f72e:	78fa      	ldrb	r2, [r7, #3]
 800f730:	429a      	cmp	r2, r3
 800f732:	d23c      	bcs.n	800f7ae <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	78fa      	ldrb	r2, [r7, #3]
 800f738:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800f73c:	78fb      	ldrb	r3, [r7, #3]
 800f73e:	4619      	mov	r1, r3
 800f740:	4823      	ldr	r0, [pc, #140]	@ (800f7d0 <USBH_SelectInterface+0xb8>)
 800f742:	f002 fa3f 	bl	8011bc4 <iprintf>
 800f746:	200a      	movs	r0, #10
 800f748:	f002 fa4e 	bl	8011be8 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800f74c:	78fb      	ldrb	r3, [r7, #3]
 800f74e:	687a      	ldr	r2, [r7, #4]
 800f750:	211a      	movs	r1, #26
 800f752:	fb01 f303 	mul.w	r3, r1, r3
 800f756:	4413      	add	r3, r2
 800f758:	f603 43ff 	addw	r3, r3, #3327	@ 0xcff
 800f75c:	781b      	ldrb	r3, [r3, #0]
 800f75e:	4619      	mov	r1, r3
 800f760:	481c      	ldr	r0, [pc, #112]	@ (800f7d4 <USBH_SelectInterface+0xbc>)
 800f762:	f002 fa2f 	bl	8011bc4 <iprintf>
 800f766:	200a      	movs	r0, #10
 800f768:	f002 fa3e 	bl	8011be8 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800f76c:	78fb      	ldrb	r3, [r7, #3]
 800f76e:	687a      	ldr	r2, [r7, #4]
 800f770:	211a      	movs	r1, #26
 800f772:	fb01 f303 	mul.w	r3, r1, r3
 800f776:	4413      	add	r3, r2
 800f778:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	4619      	mov	r1, r3
 800f780:	4815      	ldr	r0, [pc, #84]	@ (800f7d8 <USBH_SelectInterface+0xc0>)
 800f782:	f002 fa1f 	bl	8011bc4 <iprintf>
 800f786:	200a      	movs	r0, #10
 800f788:	f002 fa2e 	bl	8011be8 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800f78c:	78fb      	ldrb	r3, [r7, #3]
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	211a      	movs	r1, #26
 800f792:	fb01 f303 	mul.w	r3, r1, r3
 800f796:	4413      	add	r3, r2
 800f798:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	4619      	mov	r1, r3
 800f7a0:	480e      	ldr	r0, [pc, #56]	@ (800f7dc <USBH_SelectInterface+0xc4>)
 800f7a2:	f002 fa0f 	bl	8011bc4 <iprintf>
 800f7a6:	200a      	movs	r0, #10
 800f7a8:	f002 fa1e 	bl	8011be8 <putchar>
 800f7ac:	e00a      	b.n	800f7c4 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800f7ae:	480c      	ldr	r0, [pc, #48]	@ (800f7e0 <USBH_SelectInterface+0xc8>)
 800f7b0:	f002 fa08 	bl	8011bc4 <iprintf>
 800f7b4:	480b      	ldr	r0, [pc, #44]	@ (800f7e4 <USBH_SelectInterface+0xcc>)
 800f7b6:	f002 fa05 	bl	8011bc4 <iprintf>
 800f7ba:	200a      	movs	r0, #10
 800f7bc:	f002 fa14 	bl	8011be8 <putchar>
    status = USBH_FAIL;
 800f7c0:	2302      	movs	r3, #2
 800f7c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3710      	adds	r7, #16
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	08012f50 	.word	0x08012f50
 800f7d4:	08012f70 	.word	0x08012f70
 800f7d8:	08012f80 	.word	0x08012f80
 800f7dc:	08012f90 	.word	0x08012f90
 800f7e0:	08012f00 	.word	0x08012f00
 800f7e4:	08012fa0 	.word	0x08012fa0

0800f7e8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b087      	sub	sp, #28
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	4608      	mov	r0, r1
 800f7f2:	4611      	mov	r1, r2
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	70fb      	strb	r3, [r7, #3]
 800f7fa:	460b      	mov	r3, r1
 800f7fc:	70bb      	strb	r3, [r7, #2]
 800f7fe:	4613      	mov	r3, r2
 800f800:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f802:	2300      	movs	r3, #0
 800f804:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f806:	2300      	movs	r3, #0
 800f808:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800f810:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f812:	e025      	b.n	800f860 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f814:	7dfb      	ldrb	r3, [r7, #23]
 800f816:	221a      	movs	r2, #26
 800f818:	fb02 f303 	mul.w	r3, r2, r3
 800f81c:	3308      	adds	r3, #8
 800f81e:	68fa      	ldr	r2, [r7, #12]
 800f820:	4413      	add	r3, r2
 800f822:	3302      	adds	r3, #2
 800f824:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	795b      	ldrb	r3, [r3, #5]
 800f82a:	78fa      	ldrb	r2, [r7, #3]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d002      	beq.n	800f836 <USBH_FindInterface+0x4e>
 800f830:	78fb      	ldrb	r3, [r7, #3]
 800f832:	2bff      	cmp	r3, #255	@ 0xff
 800f834:	d111      	bne.n	800f85a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f83a:	78ba      	ldrb	r2, [r7, #2]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d002      	beq.n	800f846 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f840:	78bb      	ldrb	r3, [r7, #2]
 800f842:	2bff      	cmp	r3, #255	@ 0xff
 800f844:	d109      	bne.n	800f85a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f84a:	787a      	ldrb	r2, [r7, #1]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d002      	beq.n	800f856 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f850:	787b      	ldrb	r3, [r7, #1]
 800f852:	2bff      	cmp	r3, #255	@ 0xff
 800f854:	d101      	bne.n	800f85a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f856:	7dfb      	ldrb	r3, [r7, #23]
 800f858:	e006      	b.n	800f868 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f85a:	7dfb      	ldrb	r3, [r7, #23]
 800f85c:	3301      	adds	r3, #1
 800f85e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f860:	7dfb      	ldrb	r3, [r7, #23]
 800f862:	2b01      	cmp	r3, #1
 800f864:	d9d6      	bls.n	800f814 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f866:	23ff      	movs	r3, #255	@ 0xff
}
 800f868:	4618      	mov	r0, r3
 800f86a:	371c      	adds	r7, #28
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr

0800f874 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f001 fe67 	bl	8011550 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f882:	2101      	movs	r1, #1
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f001 ff80 	bl	801178a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f88a:	2300      	movs	r3, #0
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b088      	sub	sp, #32
 800f898:	af04      	add	r7, sp, #16
 800f89a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f89c:	2302      	movs	r3, #2
 800f89e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f893 3cd9 	ldrb.w	r3, [r3, #3289]	@ 0xcd9
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	d102      	bne.n	800f8b6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2203      	movs	r2, #3
 800f8b4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	2b0b      	cmp	r3, #11
 800f8be:	f200 8239 	bhi.w	800fd34 <USBH_Process+0x4a0>
 800f8c2:	a201      	add	r2, pc, #4	@ (adr r2, 800f8c8 <USBH_Process+0x34>)
 800f8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8c8:	0800f8f9 	.word	0x0800f8f9
 800f8cc:	0800f937 	.word	0x0800f937
 800f8d0:	0800f9b7 	.word	0x0800f9b7
 800f8d4:	0800fcc3 	.word	0x0800fcc3
 800f8d8:	0800fd35 	.word	0x0800fd35
 800f8dc:	0800fa57 	.word	0x0800fa57
 800f8e0:	0800fc45 	.word	0x0800fc45
 800f8e4:	0800faa5 	.word	0x0800faa5
 800f8e8:	0800fac5 	.word	0x0800fac5
 800f8ec:	0800faef 	.word	0x0800faef
 800f8f0:	0800fb4b 	.word	0x0800fb4b
 800f8f4:	0800fcab 	.word	0x0800fcab
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f893 3cd8 	ldrb.w	r3, [r3, #3288]	@ 0xcd8
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	2b00      	cmp	r3, #0
 800f902:	f000 8219 	beq.w	800fd38 <USBH_Process+0x4a4>
      {
        USBH_UsrLog("USB Device Connected");
 800f906:	48a5      	ldr	r0, [pc, #660]	@ (800fb9c <USBH_Process+0x308>)
 800f908:	f002 f95c 	bl	8011bc4 <iprintf>
 800f90c:	200a      	movs	r0, #10
 800f90e:	f002 f96b 	bl	8011be8 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2201      	movs	r2, #1
 800f916:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f918:	20c8      	movs	r0, #200	@ 0xc8
 800f91a:	f001 ff80 	bl	801181e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f001 fe73 	bl	801160a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2200      	movs	r2, #0
 800f928:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
        phost->Timeout = 0U;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f934:	e200      	b.n	800fd38 <USBH_Process+0x4a4>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f893 3cdb 	ldrb.w	r3, [r3, #3291]	@ 0xcdb
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d10d      	bne.n	800f95c <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800f940:	4897      	ldr	r0, [pc, #604]	@ (800fba0 <USBH_Process+0x30c>)
 800f942:	f002 f93f 	bl	8011bc4 <iprintf>
 800f946:	200a      	movs	r0, #10
 800f948:	f002 f94e 	bl	8011be8 <putchar>
        phost->device.RstCnt = 0U;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2200      	movs	r2, #0
 800f950:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
        phost->gState = HOST_DEV_ATTACHED;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2202      	movs	r2, #2
 800f958:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f95a:	e1fa      	b.n	800fd52 <USBH_Process+0x4be>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800f962:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f966:	d91a      	bls.n	800f99e <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800f96e:	3301      	adds	r3, #1
 800f970:	b2da      	uxtb	r2, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
          if (phost->device.RstCnt > 3U)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800f97e:	2b03      	cmp	r3, #3
 800f980:	d909      	bls.n	800f996 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800f982:	4888      	ldr	r0, [pc, #544]	@ (800fba4 <USBH_Process+0x310>)
 800f984:	f002 f91e 	bl	8011bc4 <iprintf>
 800f988:	200a      	movs	r0, #10
 800f98a:	f002 f92d 	bl	8011be8 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	220d      	movs	r2, #13
 800f992:	701a      	strb	r2, [r3, #0]
      break;
 800f994:	e1dd      	b.n	800fd52 <USBH_Process+0x4be>
            phost->gState = HOST_IDLE;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2200      	movs	r2, #0
 800f99a:	701a      	strb	r2, [r3, #0]
      break;
 800f99c:	e1d9      	b.n	800fd52 <USBH_Process+0x4be>
          phost->Timeout += 10U;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800f9a4:	f103 020a 	add.w	r2, r3, #10
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
          USBH_Delay(10U);
 800f9ae:	200a      	movs	r0, #10
 800f9b0:	f001 ff35 	bl	801181e <USBH_Delay>
      break;
 800f9b4:	e1cd      	b.n	800fd52 <USBH_Process+0x4be>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d005      	beq.n	800f9cc <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f9c6:	2104      	movs	r1, #4
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f9cc:	2064      	movs	r0, #100	@ 0x64
 800f9ce:	f001 ff26 	bl	801181e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f001 fdf2 	bl	80115bc <USBH_LL_GetSpeed>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	461a      	mov	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5

      phost->gState = HOST_ENUMERATION;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2205      	movs	r2, #5
 800f9e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f9e8:	2100      	movs	r1, #0
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f001 fbf3 	bl	80111d6 <USBH_AllocPipe>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f9f8:	2180      	movs	r1, #128	@ 0x80
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f001 fbeb 	bl	80111d6 <USBH_AllocPipe>
 800fa00:	4603      	mov	r3, r0
 800fa02:	461a      	mov	r2, r3
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	7919      	ldrb	r1, [r3, #4]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fa18:	687a      	ldr	r2, [r7, #4]
 800fa1a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fa1c:	9202      	str	r2, [sp, #8]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	9201      	str	r2, [sp, #4]
 800fa22:	9300      	str	r3, [sp, #0]
 800fa24:	4603      	mov	r3, r0
 800fa26:	2280      	movs	r2, #128	@ 0x80
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f001 fba5 	bl	8011178 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	7959      	ldrb	r1, [r3, #5]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fa42:	9202      	str	r2, [sp, #8]
 800fa44:	2200      	movs	r2, #0
 800fa46:	9201      	str	r2, [sp, #4]
 800fa48:	9300      	str	r3, [sp, #0]
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f001 fb92 	bl	8011178 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fa54:	e17d      	b.n	800fd52 <USBH_Process+0x4be>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f000 f98e 	bl	800fd78 <USBH_HandleEnum>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800fa60:	7bbb      	ldrb	r3, [r7, #14]
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	f040 8169 	bne.w	800fd3c <USBH_Process+0x4a8>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800fa6a:	484f      	ldr	r0, [pc, #316]	@ (800fba8 <USBH_Process+0x314>)
 800fa6c:	f002 f8aa 	bl	8011bc4 <iprintf>
 800fa70:	200a      	movs	r0, #10
 800fa72:	f002 f8b9 	bl	8011be8 <putchar>

        phost->device.current_interface = 0U;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f893 3cef 	ldrb.w	r3, [r3, #3311]	@ 0xcef
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d109      	bne.n	800fa9c <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800fa88:	4848      	ldr	r0, [pc, #288]	@ (800fbac <USBH_Process+0x318>)
 800fa8a:	f002 f89b 	bl	8011bc4 <iprintf>
 800fa8e:	200a      	movs	r0, #10
 800fa90:	f002 f8aa 	bl	8011be8 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2208      	movs	r2, #8
 800fa98:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fa9a:	e14f      	b.n	800fd3c <USBH_Process+0x4a8>
          phost->gState = HOST_INPUT;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2207      	movs	r2, #7
 800faa0:	701a      	strb	r2, [r3, #0]
      break;
 800faa2:	e14b      	b.n	800fd3c <USBH_Process+0x4a8>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800faaa:	2b00      	cmp	r3, #0
 800faac:	f000 8148 	beq.w	800fd40 <USBH_Process+0x4ac>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fab6:	2101      	movs	r1, #1
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2208      	movs	r2, #8
 800fac0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800fac2:	e13d      	b.n	800fd40 <USBH_Process+0x4ac>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f893 3cf5 	ldrb.w	r3, [r3, #3317]	@ 0xcf5
 800faca:	4619      	mov	r1, r3
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f000 fd9a 	bl	8010606 <USBH_SetCfg>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f040 8135 	bne.w	800fd44 <USBH_Process+0x4b0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2209      	movs	r2, #9
 800fade:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800fae0:	4833      	ldr	r0, [pc, #204]	@ (800fbb0 <USBH_Process+0x31c>)
 800fae2:	f002 f86f 	bl	8011bc4 <iprintf>
 800fae6:	200a      	movs	r0, #10
 800fae8:	f002 f87e 	bl	8011be8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800faec:	e12a      	b.n	800fd44 <USBH_Process+0x4b0>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f893 3cf7 	ldrb.w	r3, [r3, #3319]	@ 0xcf7
 800faf4:	f003 0320 	and.w	r3, r3, #32
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d022      	beq.n	800fb42 <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800fafc:	2101      	movs	r1, #1
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 fda4 	bl	801064c <USBH_SetFeature>
 800fb04:	4603      	mov	r3, r0
 800fb06:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fb08:	7bbb      	ldrb	r3, [r7, #14]
 800fb0a:	b2db      	uxtb	r3, r3
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d109      	bne.n	800fb24 <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800fb10:	4828      	ldr	r0, [pc, #160]	@ (800fbb4 <USBH_Process+0x320>)
 800fb12:	f002 f857 	bl	8011bc4 <iprintf>
 800fb16:	200a      	movs	r0, #10
 800fb18:	f002 f866 	bl	8011be8 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	220a      	movs	r2, #10
 800fb20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fb22:	e111      	b.n	800fd48 <USBH_Process+0x4b4>
        else if (status == USBH_NOT_SUPPORTED)
 800fb24:	7bbb      	ldrb	r3, [r7, #14]
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	2b03      	cmp	r3, #3
 800fb2a:	f040 810d 	bne.w	800fd48 <USBH_Process+0x4b4>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800fb2e:	4822      	ldr	r0, [pc, #136]	@ (800fbb8 <USBH_Process+0x324>)
 800fb30:	f002 f848 	bl	8011bc4 <iprintf>
 800fb34:	200a      	movs	r0, #10
 800fb36:	f002 f857 	bl	8011be8 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	220a      	movs	r2, #10
 800fb3e:	701a      	strb	r2, [r3, #0]
      break;
 800fb40:	e102      	b.n	800fd48 <USBH_Process+0x4b4>
        phost->gState = HOST_CHECK_CLASS;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	220a      	movs	r2, #10
 800fb46:	701a      	strb	r2, [r3, #0]
      break;
 800fb48:	e0fe      	b.n	800fd48 <USBH_Process+0x4b4>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d106      	bne.n	800fb62 <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 800fb54:	4819      	ldr	r0, [pc, #100]	@ (800fbbc <USBH_Process+0x328>)
 800fb56:	f002 f835 	bl	8011bc4 <iprintf>
 800fb5a:	200a      	movs	r0, #10
 800fb5c:	f002 f844 	bl	8011be8 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fb60:	e0f7      	b.n	800fd52 <USBH_Process+0x4be>
        phost->pActiveClass = NULL;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2200      	movs	r2, #0
 800fb66:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	73fb      	strb	r3, [r7, #15]
 800fb6e:	e02a      	b.n	800fbc6 <USBH_Process+0x332>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800fb70:	7bfa      	ldrb	r2, [r7, #15]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800fb78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb7c:	791a      	ldrb	r2, [r3, #4]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f893 3cff 	ldrb.w	r3, [r3, #3327]	@ 0xcff
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d11b      	bne.n	800fbc0 <USBH_Process+0x32c>
            phost->pActiveClass = phost->pClass[idx];
 800fb88:	7bfa      	ldrb	r2, [r7, #15]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800fb90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
            break;
 800fb9a:	e017      	b.n	800fbcc <USBH_Process+0x338>
 800fb9c:	08012fc0 	.word	0x08012fc0
 800fba0:	08012fd8 	.word	0x08012fd8
 800fba4:	08012ff4 	.word	0x08012ff4
 800fba8:	08013020 	.word	0x08013020
 800fbac:	08013034 	.word	0x08013034
 800fbb0:	0801305c 	.word	0x0801305c
 800fbb4:	08013078 	.word	0x08013078
 800fbb8:	08013098 	.word	0x08013098
 800fbbc:	080130c4 	.word	0x080130c4
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fbc0:	7bfb      	ldrb	r3, [r7, #15]
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	73fb      	strb	r3, [r7, #15]
 800fbc6:	7bfb      	ldrb	r3, [r7, #15]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d0d1      	beq.n	800fb70 <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d02c      	beq.n	800fc30 <USBH_Process+0x39c>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fbdc:	689b      	ldr	r3, [r3, #8]
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	4798      	blx	r3
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d114      	bne.n	800fc12 <USBH_Process+0x37e>
            phost->gState = HOST_CLASS_REQUEST;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2206      	movs	r2, #6
 800fbec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	4858      	ldr	r0, [pc, #352]	@ (800fd5c <USBH_Process+0x4c8>)
 800fbfa:	f001 ffe3 	bl	8011bc4 <iprintf>
 800fbfe:	200a      	movs	r0, #10
 800fc00:	f001 fff2 	bl	8011be8 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fc0a:	2103      	movs	r1, #3
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	4798      	blx	r3
      break;
 800fc10:	e09f      	b.n	800fd52 <USBH_Process+0x4be>
            phost->gState = HOST_ABORT_STATE;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	220d      	movs	r2, #13
 800fc16:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4619      	mov	r1, r3
 800fc22:	484f      	ldr	r0, [pc, #316]	@ (800fd60 <USBH_Process+0x4cc>)
 800fc24:	f001 ffce 	bl	8011bc4 <iprintf>
 800fc28:	200a      	movs	r0, #10
 800fc2a:	f001 ffdd 	bl	8011be8 <putchar>
      break;
 800fc2e:	e090      	b.n	800fd52 <USBH_Process+0x4be>
          phost->gState = HOST_ABORT_STATE;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	220d      	movs	r2, #13
 800fc34:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800fc36:	484b      	ldr	r0, [pc, #300]	@ (800fd64 <USBH_Process+0x4d0>)
 800fc38:	f001 ffc4 	bl	8011bc4 <iprintf>
 800fc3c:	200a      	movs	r0, #10
 800fc3e:	f001 ffd3 	bl	8011be8 <putchar>
      break;
 800fc42:	e086      	b.n	800fd52 <USBH_Process+0x4be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d020      	beq.n	800fc90 <USBH_Process+0x3fc>
      {
        status = phost->pActiveClass->Requests(phost);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fc54:	691b      	ldr	r3, [r3, #16]
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	4798      	blx	r3
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fc5e:	7bbb      	ldrb	r3, [r7, #14]
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d103      	bne.n	800fc6e <USBH_Process+0x3da>
        {
          phost->gState = HOST_CLASS;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	220b      	movs	r2, #11
 800fc6a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fc6c:	e06e      	b.n	800fd4c <USBH_Process+0x4b8>
        else if (status == USBH_FAIL)
 800fc6e:	7bbb      	ldrb	r3, [r7, #14]
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	2b02      	cmp	r3, #2
 800fc74:	d16a      	bne.n	800fd4c <USBH_Process+0x4b8>
          phost->gState = HOST_ABORT_STATE;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	220d      	movs	r2, #13
 800fc7a:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800fc7c:	483a      	ldr	r0, [pc, #232]	@ (800fd68 <USBH_Process+0x4d4>)
 800fc7e:	f001 ffa1 	bl	8011bc4 <iprintf>
 800fc82:	483a      	ldr	r0, [pc, #232]	@ (800fd6c <USBH_Process+0x4d8>)
 800fc84:	f001 ff9e 	bl	8011bc4 <iprintf>
 800fc88:	200a      	movs	r0, #10
 800fc8a:	f001 ffad 	bl	8011be8 <putchar>
      break;
 800fc8e:	e05d      	b.n	800fd4c <USBH_Process+0x4b8>
        phost->gState = HOST_ABORT_STATE;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	220d      	movs	r2, #13
 800fc94:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800fc96:	4834      	ldr	r0, [pc, #208]	@ (800fd68 <USBH_Process+0x4d4>)
 800fc98:	f001 ff94 	bl	8011bc4 <iprintf>
 800fc9c:	4834      	ldr	r0, [pc, #208]	@ (800fd70 <USBH_Process+0x4dc>)
 800fc9e:	f001 ff91 	bl	8011bc4 <iprintf>
 800fca2:	200a      	movs	r0, #10
 800fca4:	f001 ffa0 	bl	8011be8 <putchar>
      break;
 800fca8:	e050      	b.n	800fd4c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d04d      	beq.n	800fd50 <USBH_Process+0x4bc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fcba:	695b      	ldr	r3, [r3, #20]
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	4798      	blx	r3
      }
      break;
 800fcc0:	e046      	b.n	800fd50 <USBH_Process+0x4bc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9

      (void)DeInitStateMachine(phost);
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f7ff fc6c 	bl	800f5a8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d009      	beq.n	800fcee <USBH_Process+0x45a>
      {
        phost->pActiveClass->DeInit(phost);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2200      	movs	r2, #0
 800fcea:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
      }

      if (phost->pUser != NULL)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d005      	beq.n	800fd04 <USBH_Process+0x470>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fcfe:	2105      	movs	r1, #5
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800fd04:	481b      	ldr	r0, [pc, #108]	@ (800fd74 <USBH_Process+0x4e0>)
 800fd06:	f001 ff5d 	bl	8011bc4 <iprintf>
 800fd0a:	200a      	movs	r0, #10
 800fd0c:	f001 ff6c 	bl	8011be8 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f893 3cda 	ldrb.w	r3, [r3, #3290]	@ 0xcda
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d107      	bne.n	800fd2c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f7ff fda5 	bl	800f874 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fd2a:	e012      	b.n	800fd52 <USBH_Process+0x4be>
        (void)USBH_LL_Start(phost);
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f001 fc0f 	bl	8011550 <USBH_LL_Start>
      break;
 800fd32:	e00e      	b.n	800fd52 <USBH_Process+0x4be>

    case HOST_ABORT_STATE:
    default :
      break;
 800fd34:	bf00      	nop
 800fd36:	e00c      	b.n	800fd52 <USBH_Process+0x4be>
      break;
 800fd38:	bf00      	nop
 800fd3a:	e00a      	b.n	800fd52 <USBH_Process+0x4be>
      break;
 800fd3c:	bf00      	nop
 800fd3e:	e008      	b.n	800fd52 <USBH_Process+0x4be>
    break;
 800fd40:	bf00      	nop
 800fd42:	e006      	b.n	800fd52 <USBH_Process+0x4be>
      break;
 800fd44:	bf00      	nop
 800fd46:	e004      	b.n	800fd52 <USBH_Process+0x4be>
      break;
 800fd48:	bf00      	nop
 800fd4a:	e002      	b.n	800fd52 <USBH_Process+0x4be>
      break;
 800fd4c:	bf00      	nop
 800fd4e:	e000      	b.n	800fd52 <USBH_Process+0x4be>
      break;
 800fd50:	bf00      	nop
  }
  return USBH_OK;
 800fd52:	2300      	movs	r3, #0
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3710      	adds	r7, #16
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	080130e4 	.word	0x080130e4
 800fd60:	080130f8 	.word	0x080130f8
 800fd64:	08013118 	.word	0x08013118
 800fd68:	08012f00 	.word	0x08012f00
 800fd6c:	08013140 	.word	0x08013140
 800fd70:	08013168 	.word	0x08013168
 800fd74:	08013180 	.word	0x08013180

0800fd78 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b088      	sub	sp, #32
 800fd7c:	af04      	add	r7, sp, #16
 800fd7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fd80:	2301      	movs	r3, #1
 800fd82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800fd84:	2301      	movs	r3, #1
 800fd86:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	785b      	ldrb	r3, [r3, #1]
 800fd8c:	2b07      	cmp	r3, #7
 800fd8e:	f200 827b 	bhi.w	8010288 <USBH_HandleEnum+0x510>
 800fd92:	a201      	add	r2, pc, #4	@ (adr r2, 800fd98 <USBH_HandleEnum+0x20>)
 800fd94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd98:	0800fdb9 	.word	0x0800fdb9
 800fd9c:	0800fe91 	.word	0x0800fe91
 800fda0:	0800ff41 	.word	0x0800ff41
 800fda4:	0800fffd 	.word	0x0800fffd
 800fda8:	08010085 	.word	0x08010085
 800fdac:	08010137 	.word	0x08010137
 800fdb0:	080101ab 	.word	0x080101ab
 800fdb4:	0801021d 	.word	0x0801021d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800fdb8:	2108      	movs	r1, #8
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 fb16 	bl	80103ec <USBH_Get_DevDesc>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fdc4:	7bbb      	ldrb	r3, [r7, #14]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d12e      	bne.n	800fe28 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f893 2ce5 	ldrb.w	r2, [r3, #3301]	@ 0xce5
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	7919      	ldrb	r1, [r3, #4]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fdee:	9202      	str	r2, [sp, #8]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	9201      	str	r2, [sp, #4]
 800fdf4:	9300      	str	r3, [sp, #0]
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2280      	movs	r2, #128	@ 0x80
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f001 f9bc 	bl	8011178 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	7959      	ldrb	r1, [r3, #5]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fe14:	9202      	str	r2, [sp, #8]
 800fe16:	2200      	movs	r2, #0
 800fe18:	9201      	str	r2, [sp, #4]
 800fe1a:	9300      	str	r3, [sp, #0]
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2200      	movs	r2, #0
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f001 f9a9 	bl	8011178 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fe26:	e231      	b.n	801028c <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fe28:	7bbb      	ldrb	r3, [r7, #14]
 800fe2a:	2b03      	cmp	r3, #3
 800fe2c:	f040 822e 	bne.w	801028c <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800fe30:	48ae      	ldr	r0, [pc, #696]	@ (80100ec <USBH_HandleEnum+0x374>)
 800fe32:	f001 fec7 	bl	8011bc4 <iprintf>
 800fe36:	48ae      	ldr	r0, [pc, #696]	@ (80100f0 <USBH_HandleEnum+0x378>)
 800fe38:	f001 fec4 	bl	8011bc4 <iprintf>
 800fe3c:	200a      	movs	r0, #10
 800fe3e:	f001 fed3 	bl	8011be8 <putchar>
        phost->device.EnumCnt++;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800fe48:	3301      	adds	r3, #1
 800fe4a:	b2da      	uxtb	r2, r3
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800fe58:	2b03      	cmp	r3, #3
 800fe5a:	d909      	bls.n	800fe70 <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800fe5c:	48a5      	ldr	r0, [pc, #660]	@ (80100f4 <USBH_HandleEnum+0x37c>)
 800fe5e:	f001 feb1 	bl	8011bc4 <iprintf>
 800fe62:	200a      	movs	r0, #10
 800fe64:	f001 fec0 	bl	8011be8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	220d      	movs	r2, #13
 800fe6c:	701a      	strb	r2, [r3, #0]
      break;
 800fe6e:	e20d      	b.n	801028c <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	795b      	ldrb	r3, [r3, #5]
 800fe74:	4619      	mov	r1, r3
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f001 f9cf 	bl	801121a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	791b      	ldrb	r3, [r3, #4]
 800fe80:	4619      	mov	r1, r3
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f001 f9c9 	bl	801121a <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	701a      	strb	r2, [r3, #0]
      break;
 800fe8e:	e1fd      	b.n	801028c <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800fe90:	2112      	movs	r1, #18
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f000 faaa 	bl	80103ec <USBH_Get_DevDesc>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fe9c:	7bbb      	ldrb	r3, [r7, #14]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d117      	bne.n	800fed2 <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f8b3 3ce8 	ldrh.w	r3, [r3, #3304]	@ 0xce8
 800fea8:	4619      	mov	r1, r3
 800feaa:	4893      	ldr	r0, [pc, #588]	@ (80100f8 <USBH_HandleEnum+0x380>)
 800feac:	f001 fe8a 	bl	8011bc4 <iprintf>
 800feb0:	200a      	movs	r0, #10
 800feb2:	f001 fe99 	bl	8011be8 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8b3 3ce6 	ldrh.w	r3, [r3, #3302]	@ 0xce6
 800febc:	4619      	mov	r1, r3
 800febe:	488f      	ldr	r0, [pc, #572]	@ (80100fc <USBH_HandleEnum+0x384>)
 800fec0:	f001 fe80 	bl	8011bc4 <iprintf>
 800fec4:	200a      	movs	r0, #10
 800fec6:	f001 fe8f 	bl	8011be8 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2202      	movs	r2, #2
 800fece:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fed0:	e1de      	b.n	8010290 <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fed2:	7bbb      	ldrb	r3, [r7, #14]
 800fed4:	2b03      	cmp	r3, #3
 800fed6:	f040 81db 	bne.w	8010290 <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800feda:	4884      	ldr	r0, [pc, #528]	@ (80100ec <USBH_HandleEnum+0x374>)
 800fedc:	f001 fe72 	bl	8011bc4 <iprintf>
 800fee0:	4887      	ldr	r0, [pc, #540]	@ (8010100 <USBH_HandleEnum+0x388>)
 800fee2:	f001 fe6f 	bl	8011bc4 <iprintf>
 800fee6:	200a      	movs	r0, #10
 800fee8:	f001 fe7e 	bl	8011be8 <putchar>
        phost->device.EnumCnt++;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800fef2:	3301      	adds	r3, #1
 800fef4:	b2da      	uxtb	r2, r3
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800ff02:	2b03      	cmp	r3, #3
 800ff04:	d909      	bls.n	800ff1a <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ff06:	487b      	ldr	r0, [pc, #492]	@ (80100f4 <USBH_HandleEnum+0x37c>)
 800ff08:	f001 fe5c 	bl	8011bc4 <iprintf>
 800ff0c:	200a      	movs	r0, #10
 800ff0e:	f001 fe6b 	bl	8011be8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	220d      	movs	r2, #13
 800ff16:	701a      	strb	r2, [r3, #0]
      break;
 800ff18:	e1ba      	b.n	8010290 <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	795b      	ldrb	r3, [r3, #5]
 800ff1e:	4619      	mov	r1, r3
 800ff20:	6878      	ldr	r0, [r7, #4]
 800ff22:	f001 f97a 	bl	801121a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	791b      	ldrb	r3, [r3, #4]
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f001 f974 	bl	801121a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2200      	movs	r2, #0
 800ff36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	701a      	strb	r2, [r3, #0]
      break;
 800ff3e:	e1a7      	b.n	8010290 <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ff40:	2101      	movs	r1, #1
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 fb3b 	bl	80105be <USBH_SetAddress>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ff4c:	7bbb      	ldrb	r3, [r7, #14]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d13a      	bne.n	800ffc8 <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 800ff52:	2002      	movs	r0, #2
 800ff54:	f001 fc63 	bl	801181e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f893 3cd4 	ldrb.w	r3, [r3, #3284]	@ 0xcd4
 800ff66:	4619      	mov	r1, r3
 800ff68:	4866      	ldr	r0, [pc, #408]	@ (8010104 <USBH_HandleEnum+0x38c>)
 800ff6a:	f001 fe2b 	bl	8011bc4 <iprintf>
 800ff6e:	200a      	movs	r0, #10
 800ff70:	f001 fe3a 	bl	8011be8 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2203      	movs	r2, #3
 800ff78:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	7919      	ldrb	r1, [r3, #4]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ff8a:	687a      	ldr	r2, [r7, #4]
 800ff8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ff8e:	9202      	str	r2, [sp, #8]
 800ff90:	2200      	movs	r2, #0
 800ff92:	9201      	str	r2, [sp, #4]
 800ff94:	9300      	str	r3, [sp, #0]
 800ff96:	4603      	mov	r3, r0
 800ff98:	2280      	movs	r2, #128	@ 0x80
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f001 f8ec 	bl	8011178 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	7959      	ldrb	r1, [r3, #5]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ffb0:	687a      	ldr	r2, [r7, #4]
 800ffb2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ffb4:	9202      	str	r2, [sp, #8]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	9201      	str	r2, [sp, #4]
 800ffba:	9300      	str	r3, [sp, #0]
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f001 f8d9 	bl	8011178 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ffc6:	e165      	b.n	8010294 <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ffc8:	7bbb      	ldrb	r3, [r7, #14]
 800ffca:	2b03      	cmp	r3, #3
 800ffcc:	f040 8162 	bne.w	8010294 <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800ffd0:	4846      	ldr	r0, [pc, #280]	@ (80100ec <USBH_HandleEnum+0x374>)
 800ffd2:	f001 fdf7 	bl	8011bc4 <iprintf>
 800ffd6:	484c      	ldr	r0, [pc, #304]	@ (8010108 <USBH_HandleEnum+0x390>)
 800ffd8:	f001 fdf4 	bl	8011bc4 <iprintf>
 800ffdc:	200a      	movs	r0, #10
 800ffde:	f001 fe03 	bl	8011be8 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ffe2:	4844      	ldr	r0, [pc, #272]	@ (80100f4 <USBH_HandleEnum+0x37c>)
 800ffe4:	f001 fdee 	bl	8011bc4 <iprintf>
 800ffe8:	200a      	movs	r0, #10
 800ffea:	f001 fdfd 	bl	8011be8 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	220d      	movs	r2, #13
 800fff2:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2200      	movs	r2, #0
 800fff8:	705a      	strb	r2, [r3, #1]
      break;
 800fffa:	e14b      	b.n	8010294 <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800fffc:	2109      	movs	r1, #9
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f000 fa2e 	bl	8010460 <USBH_Get_CfgDesc>
 8010004:	4603      	mov	r3, r0
 8010006:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010008:	7bbb      	ldrb	r3, [r7, #14]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d103      	bne.n	8010016 <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2204      	movs	r2, #4
 8010012:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010014:	e140      	b.n	8010298 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010016:	7bbb      	ldrb	r3, [r7, #14]
 8010018:	2b03      	cmp	r3, #3
 801001a:	f040 813d 	bne.w	8010298 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 801001e:	4833      	ldr	r0, [pc, #204]	@ (80100ec <USBH_HandleEnum+0x374>)
 8010020:	f001 fdd0 	bl	8011bc4 <iprintf>
 8010024:	4839      	ldr	r0, [pc, #228]	@ (801010c <USBH_HandleEnum+0x394>)
 8010026:	f001 fdcd 	bl	8011bc4 <iprintf>
 801002a:	200a      	movs	r0, #10
 801002c:	f001 fddc 	bl	8011be8 <putchar>
        phost->device.EnumCnt++;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 8010036:	3301      	adds	r3, #1
 8010038:	b2da      	uxtb	r2, r3
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 8010046:	2b03      	cmp	r3, #3
 8010048:	d909      	bls.n	801005e <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 801004a:	482a      	ldr	r0, [pc, #168]	@ (80100f4 <USBH_HandleEnum+0x37c>)
 801004c:	f001 fdba 	bl	8011bc4 <iprintf>
 8010050:	200a      	movs	r0, #10
 8010052:	f001 fdc9 	bl	8011be8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	220d      	movs	r2, #13
 801005a:	701a      	strb	r2, [r3, #0]
      break;
 801005c:	e11c      	b.n	8010298 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	795b      	ldrb	r3, [r3, #5]
 8010062:	4619      	mov	r1, r3
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f001 f8d8 	bl	801121a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	791b      	ldrb	r3, [r3, #4]
 801006e:	4619      	mov	r1, r3
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f001 f8d2 	bl	801121a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2200      	movs	r2, #0
 801007a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2200      	movs	r2, #0
 8010080:	701a      	strb	r2, [r3, #0]
      break;
 8010082:	e109      	b.n	8010298 <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8b3 3cf2 	ldrh.w	r3, [r3, #3314]	@ 0xcf2
 801008a:	4619      	mov	r1, r3
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f000 f9e7 	bl	8010460 <USBH_Get_CfgDesc>
 8010092:	4603      	mov	r3, r0
 8010094:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010096:	7bbb      	ldrb	r3, [r7, #14]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d103      	bne.n	80100a4 <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2205      	movs	r2, #5
 80100a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80100a2:	e0fb      	b.n	801029c <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80100a4:	7bbb      	ldrb	r3, [r7, #14]
 80100a6:	2b03      	cmp	r3, #3
 80100a8:	f040 80f8 	bne.w	801029c <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 80100ac:	480f      	ldr	r0, [pc, #60]	@ (80100ec <USBH_HandleEnum+0x374>)
 80100ae:	f001 fd89 	bl	8011bc4 <iprintf>
 80100b2:	4816      	ldr	r0, [pc, #88]	@ (801010c <USBH_HandleEnum+0x394>)
 80100b4:	f001 fd86 	bl	8011bc4 <iprintf>
 80100b8:	200a      	movs	r0, #10
 80100ba:	f001 fd95 	bl	8011be8 <putchar>
        phost->device.EnumCnt++;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 80100c4:	3301      	adds	r3, #1
 80100c6:	b2da      	uxtb	r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 80100d4:	2b03      	cmp	r3, #3
 80100d6:	d91b      	bls.n	8010110 <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80100d8:	4806      	ldr	r0, [pc, #24]	@ (80100f4 <USBH_HandleEnum+0x37c>)
 80100da:	f001 fd73 	bl	8011bc4 <iprintf>
 80100de:	200a      	movs	r0, #10
 80100e0:	f001 fd82 	bl	8011be8 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	220d      	movs	r2, #13
 80100e8:	701a      	strb	r2, [r3, #0]
      break;
 80100ea:	e0d7      	b.n	801029c <USBH_HandleEnum+0x524>
 80100ec:	08012f00 	.word	0x08012f00
 80100f0:	08013198 	.word	0x08013198
 80100f4:	080131cc 	.word	0x080131cc
 80100f8:	0801320c 	.word	0x0801320c
 80100fc:	08013218 	.word	0x08013218
 8010100:	08013224 	.word	0x08013224
 8010104:	08013260 	.word	0x08013260
 8010108:	08013278 	.word	0x08013278
 801010c:	080132ac 	.word	0x080132ac
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	795b      	ldrb	r3, [r3, #5]
 8010114:	4619      	mov	r1, r3
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f001 f87f 	bl	801121a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	791b      	ldrb	r3, [r3, #4]
 8010120:	4619      	mov	r1, r3
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f001 f879 	bl	801121a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2200      	movs	r2, #0
 801012c:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2200      	movs	r2, #0
 8010132:	701a      	strb	r2, [r3, #0]
      break;
 8010134:	e0b2      	b.n	801029c <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f893 3cec 	ldrb.w	r3, [r3, #3308]	@ 0xcec
 801013c:	2b00      	cmp	r3, #0
 801013e:	d02a      	beq.n	8010196 <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f893 1cec 	ldrb.w	r1, [r3, #3308]	@ 0xcec
                                        phost->device.Data, 0xFFU);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801014c:	23ff      	movs	r3, #255	@ 0xff
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f000 f9be 	bl	80104d0 <USBH_Get_StringDesc>
 8010154:	4603      	mov	r3, r0
 8010156:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010158:	7bbb      	ldrb	r3, [r7, #14]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d10d      	bne.n	801017a <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010164:	4619      	mov	r1, r3
 8010166:	4853      	ldr	r0, [pc, #332]	@ (80102b4 <USBH_HandleEnum+0x53c>)
 8010168:	f001 fd2c 	bl	8011bc4 <iprintf>
 801016c:	200a      	movs	r0, #10
 801016e:	f001 fd3b 	bl	8011be8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2206      	movs	r2, #6
 8010176:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010178:	e092      	b.n	80102a0 <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801017a:	7bbb      	ldrb	r3, [r7, #14]
 801017c:	2b03      	cmp	r3, #3
 801017e:	f040 808f 	bne.w	80102a0 <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 8010182:	484d      	ldr	r0, [pc, #308]	@ (80102b8 <USBH_HandleEnum+0x540>)
 8010184:	f001 fd1e 	bl	8011bc4 <iprintf>
 8010188:	200a      	movs	r0, #10
 801018a:	f001 fd2d 	bl	8011be8 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2206      	movs	r2, #6
 8010192:	705a      	strb	r2, [r3, #1]
      break;
 8010194:	e084      	b.n	80102a0 <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 8010196:	4848      	ldr	r0, [pc, #288]	@ (80102b8 <USBH_HandleEnum+0x540>)
 8010198:	f001 fd14 	bl	8011bc4 <iprintf>
 801019c:	200a      	movs	r0, #10
 801019e:	f001 fd23 	bl	8011be8 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2206      	movs	r2, #6
 80101a6:	705a      	strb	r2, [r3, #1]
      break;
 80101a8:	e07a      	b.n	80102a0 <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f893 3ced 	ldrb.w	r3, [r3, #3309]	@ 0xced
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d029      	beq.n	8010208 <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f893 1ced 	ldrb.w	r1, [r3, #3309]	@ 0xced
                                        phost->device.Data, 0xFFU);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80101c0:	23ff      	movs	r3, #255	@ 0xff
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f000 f984 	bl	80104d0 <USBH_Get_StringDesc>
 80101c8:	4603      	mov	r3, r0
 80101ca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80101cc:	7bbb      	ldrb	r3, [r7, #14]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d10d      	bne.n	80101ee <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80101d8:	4619      	mov	r1, r3
 80101da:	4838      	ldr	r0, [pc, #224]	@ (80102bc <USBH_HandleEnum+0x544>)
 80101dc:	f001 fcf2 	bl	8011bc4 <iprintf>
 80101e0:	200a      	movs	r0, #10
 80101e2:	f001 fd01 	bl	8011be8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2207      	movs	r2, #7
 80101ea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80101ec:	e05a      	b.n	80102a4 <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80101ee:	7bbb      	ldrb	r3, [r7, #14]
 80101f0:	2b03      	cmp	r3, #3
 80101f2:	d157      	bne.n	80102a4 <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 80101f4:	4832      	ldr	r0, [pc, #200]	@ (80102c0 <USBH_HandleEnum+0x548>)
 80101f6:	f001 fce5 	bl	8011bc4 <iprintf>
 80101fa:	200a      	movs	r0, #10
 80101fc:	f001 fcf4 	bl	8011be8 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2207      	movs	r2, #7
 8010204:	705a      	strb	r2, [r3, #1]
      break;
 8010206:	e04d      	b.n	80102a4 <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 8010208:	482d      	ldr	r0, [pc, #180]	@ (80102c0 <USBH_HandleEnum+0x548>)
 801020a:	f001 fcdb 	bl	8011bc4 <iprintf>
 801020e:	200a      	movs	r0, #10
 8010210:	f001 fcea 	bl	8011be8 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2207      	movs	r2, #7
 8010218:	705a      	strb	r2, [r3, #1]
      break;
 801021a:	e043      	b.n	80102a4 <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f893 3cee 	ldrb.w	r3, [r3, #3310]	@ 0xcee
 8010222:	2b00      	cmp	r3, #0
 8010224:	d027      	beq.n	8010276 <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f893 1cee 	ldrb.w	r1, [r3, #3310]	@ 0xcee
                                        phost->device.Data, 0xFFU);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010232:	23ff      	movs	r3, #255	@ 0xff
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 f94b 	bl	80104d0 <USBH_Get_StringDesc>
 801023a:	4603      	mov	r3, r0
 801023c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801023e:	7bbb      	ldrb	r3, [r7, #14]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d10c      	bne.n	801025e <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801024a:	4619      	mov	r1, r3
 801024c:	481d      	ldr	r0, [pc, #116]	@ (80102c4 <USBH_HandleEnum+0x54c>)
 801024e:	f001 fcb9 	bl	8011bc4 <iprintf>
 8010252:	200a      	movs	r0, #10
 8010254:	f001 fcc8 	bl	8011be8 <putchar>
          Status = USBH_OK;
 8010258:	2300      	movs	r3, #0
 801025a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801025c:	e024      	b.n	80102a8 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801025e:	7bbb      	ldrb	r3, [r7, #14]
 8010260:	2b03      	cmp	r3, #3
 8010262:	d121      	bne.n	80102a8 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 8010264:	4818      	ldr	r0, [pc, #96]	@ (80102c8 <USBH_HandleEnum+0x550>)
 8010266:	f001 fcad 	bl	8011bc4 <iprintf>
 801026a:	200a      	movs	r0, #10
 801026c:	f001 fcbc 	bl	8011be8 <putchar>
          Status = USBH_OK;
 8010270:	2300      	movs	r3, #0
 8010272:	73fb      	strb	r3, [r7, #15]
      break;
 8010274:	e018      	b.n	80102a8 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 8010276:	4814      	ldr	r0, [pc, #80]	@ (80102c8 <USBH_HandleEnum+0x550>)
 8010278:	f001 fca4 	bl	8011bc4 <iprintf>
 801027c:	200a      	movs	r0, #10
 801027e:	f001 fcb3 	bl	8011be8 <putchar>
        Status = USBH_OK;
 8010282:	2300      	movs	r3, #0
 8010284:	73fb      	strb	r3, [r7, #15]
      break;
 8010286:	e00f      	b.n	80102a8 <USBH_HandleEnum+0x530>

    default:
      break;
 8010288:	bf00      	nop
 801028a:	e00e      	b.n	80102aa <USBH_HandleEnum+0x532>
      break;
 801028c:	bf00      	nop
 801028e:	e00c      	b.n	80102aa <USBH_HandleEnum+0x532>
      break;
 8010290:	bf00      	nop
 8010292:	e00a      	b.n	80102aa <USBH_HandleEnum+0x532>
      break;
 8010294:	bf00      	nop
 8010296:	e008      	b.n	80102aa <USBH_HandleEnum+0x532>
      break;
 8010298:	bf00      	nop
 801029a:	e006      	b.n	80102aa <USBH_HandleEnum+0x532>
      break;
 801029c:	bf00      	nop
 801029e:	e004      	b.n	80102aa <USBH_HandleEnum+0x532>
      break;
 80102a0:	bf00      	nop
 80102a2:	e002      	b.n	80102aa <USBH_HandleEnum+0x532>
      break;
 80102a4:	bf00      	nop
 80102a6:	e000      	b.n	80102aa <USBH_HandleEnum+0x532>
      break;
 80102a8:	bf00      	nop
  }
  return Status;
 80102aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	3710      	adds	r7, #16
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	080132f0 	.word	0x080132f0
 80102b8:	08013304 	.word	0x08013304
 80102bc:	08013318 	.word	0x08013318
 80102c0:	08013328 	.word	0x08013328
 80102c4:	08013338 	.word	0x08013338
 80102c8:	0801334c 	.word	0x0801334c

080102cc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	683a      	ldr	r2, [r7, #0]
 80102da:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
}
 80102de:	bf00      	nop
 80102e0:	370c      	adds	r7, #12
 80102e2:	46bd      	mov	sp, r7
 80102e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e8:	4770      	bx	lr

080102ea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b082      	sub	sp, #8
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 80102f8:	1c5a      	adds	r2, r3, #1
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
  USBH_HandleSof(phost);
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 f804 	bl	801030e <USBH_HandleSof>
}
 8010306:	bf00      	nop
 8010308:	3708      	adds	r7, #8
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}

0801030e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801030e:	b580      	push	{r7, lr}
 8010310:	b082      	sub	sp, #8
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	b2db      	uxtb	r3, r3
 801031c:	2b0b      	cmp	r3, #11
 801031e:	d10a      	bne.n	8010336 <USBH_HandleSof+0x28>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 8010326:	2b00      	cmp	r3, #0
 8010328:	d005      	beq.n	8010336 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 8010330:	699b      	ldr	r3, [r3, #24]
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	4798      	blx	r3
  }
}
 8010336:	bf00      	nop
 8010338:	3708      	adds	r7, #8
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}

0801033e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801033e:	b480      	push	{r7}
 8010340:	b083      	sub	sp, #12
 8010342:	af00      	add	r7, sp, #0
 8010344:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2201      	movs	r2, #1
 801034a:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 801034e:	bf00      	nop
}
 8010350:	370c      	adds	r7, #12
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr

0801035a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801035a:	b480      	push	{r7}
 801035c:	b083      	sub	sp, #12
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2200      	movs	r2, #0
 8010366:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  return;
 801036a:	bf00      	nop
}
 801036c:	370c      	adds	r7, #12
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr

08010376 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010376:	b480      	push	{r7}
 8010378:	b083      	sub	sp, #12
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2201      	movs	r2, #1
 8010382:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2200      	movs	r2, #0
 801038a:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2200      	movs	r2, #0
 8010392:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010396:	2300      	movs	r3, #0
}
 8010398:	4618      	mov	r0, r3
 801039a:	370c      	adds	r7, #12
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr

080103a4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2201      	movs	r2, #1
 80103b0:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_connected = 0U;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2200      	movs	r2, #0
 80103b8:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.PortEnabled = 0U;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2200      	movs	r2, #0
 80103c0:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f001 f8de 	bl	8011586 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	791b      	ldrb	r3, [r3, #4]
 80103ce:	4619      	mov	r1, r3
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f000 ff22 	bl	801121a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	795b      	ldrb	r3, [r3, #5]
 80103da:	4619      	mov	r1, r3
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f000 ff1c 	bl	801121a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80103e2:	2300      	movs	r3, #0
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3708      	adds	r7, #8
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b086      	sub	sp, #24
 80103f0:	af02      	add	r7, sp, #8
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	460b      	mov	r3, r1
 80103f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80103f8:	887b      	ldrh	r3, [r7, #2]
 80103fa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80103fe:	4293      	cmp	r3, r2
 8010400:	d90a      	bls.n	8010418 <USBH_Get_DevDesc+0x2c>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 8010402:	4815      	ldr	r0, [pc, #84]	@ (8010458 <USBH_Get_DevDesc+0x6c>)
 8010404:	f001 fbde 	bl	8011bc4 <iprintf>
 8010408:	4814      	ldr	r0, [pc, #80]	@ (801045c <USBH_Get_DevDesc+0x70>)
 801040a:	f001 fbdb 	bl	8011bc4 <iprintf>
 801040e:	200a      	movs	r0, #10
 8010410:	f001 fbea 	bl	8011be8 <putchar>
    return USBH_NOT_SUPPORTED;
 8010414:	2303      	movs	r3, #3
 8010416:	e01b      	b.n	8010450 <USBH_Get_DevDesc+0x64>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 801041e:	887b      	ldrh	r3, [r7, #2]
 8010420:	9300      	str	r3, [sp, #0]
 8010422:	4613      	mov	r3, r2
 8010424:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010428:	2100      	movs	r1, #0
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 f892 	bl	8010554 <USBH_GetDescriptor>
 8010430:	4603      	mov	r3, r0
 8010432:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8010434:	7bfb      	ldrb	r3, [r7, #15]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d109      	bne.n	801044e <USBH_Get_DevDesc+0x62>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010440:	887a      	ldrh	r2, [r7, #2]
 8010442:	4619      	mov	r1, r3
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f000 f949 	bl	80106dc <USBH_ParseDevDesc>
 801044a:	4603      	mov	r3, r0
 801044c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801044e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010450:	4618      	mov	r0, r3
 8010452:	3710      	adds	r7, #16
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	08013360 	.word	0x08013360
 801045c:	08013368 	.word	0x08013368

08010460 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b086      	sub	sp, #24
 8010464:	af02      	add	r7, sp, #8
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	460b      	mov	r3, r1
 801046a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	331c      	adds	r3, #28
 8010470:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8010472:	887b      	ldrh	r3, [r7, #2]
 8010474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010478:	d90a      	bls.n	8010490 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 801047a:	4813      	ldr	r0, [pc, #76]	@ (80104c8 <USBH_Get_CfgDesc+0x68>)
 801047c:	f001 fba2 	bl	8011bc4 <iprintf>
 8010480:	4812      	ldr	r0, [pc, #72]	@ (80104cc <USBH_Get_CfgDesc+0x6c>)
 8010482:	f001 fb9f 	bl	8011bc4 <iprintf>
 8010486:	200a      	movs	r0, #10
 8010488:	f001 fbae 	bl	8011be8 <putchar>
    return USBH_NOT_SUPPORTED;
 801048c:	2303      	movs	r3, #3
 801048e:	e016      	b.n	80104be <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8010490:	887b      	ldrh	r3, [r7, #2]
 8010492:	9300      	str	r3, [sp, #0]
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801049a:	2100      	movs	r1, #0
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 f859 	bl	8010554 <USBH_GetDescriptor>
 80104a2:	4603      	mov	r3, r0
 80104a4:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80104a6:	7bfb      	ldrb	r3, [r7, #15]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d107      	bne.n	80104bc <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80104ac:	887b      	ldrh	r3, [r7, #2]
 80104ae:	461a      	mov	r2, r3
 80104b0:	68b9      	ldr	r1, [r7, #8]
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 f9c2 	bl	801083c <USBH_ParseCfgDesc>
 80104b8:	4603      	mov	r3, r0
 80104ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80104bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3710      	adds	r7, #16
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	08013360 	.word	0x08013360
 80104cc:	080133ac 	.word	0x080133ac

080104d0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b088      	sub	sp, #32
 80104d4:	af02      	add	r7, sp, #8
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	607a      	str	r2, [r7, #4]
 80104da:	461a      	mov	r2, r3
 80104dc:	460b      	mov	r3, r1
 80104de:	72fb      	strb	r3, [r7, #11]
 80104e0:	4613      	mov	r3, r2
 80104e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80104e4:	893b      	ldrh	r3, [r7, #8]
 80104e6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d802      	bhi.n	80104f4 <USBH_Get_StringDesc+0x24>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d10a      	bne.n	801050a <USBH_Get_StringDesc+0x3a>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 80104f4:	4815      	ldr	r0, [pc, #84]	@ (801054c <USBH_Get_StringDesc+0x7c>)
 80104f6:	f001 fb65 	bl	8011bc4 <iprintf>
 80104fa:	4815      	ldr	r0, [pc, #84]	@ (8010550 <USBH_Get_StringDesc+0x80>)
 80104fc:	f001 fb62 	bl	8011bc4 <iprintf>
 8010500:	200a      	movs	r0, #10
 8010502:	f001 fb71 	bl	8011be8 <putchar>
    return USBH_NOT_SUPPORTED;
 8010506:	2303      	movs	r3, #3
 8010508:	e01c      	b.n	8010544 <USBH_Get_StringDesc+0x74>
  }

  status = USBH_GetDescriptor(phost,
 801050a:	7afb      	ldrb	r3, [r7, #11]
 801050c:	b29b      	uxth	r3, r3
 801050e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8010512:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 801051a:	893b      	ldrh	r3, [r7, #8]
 801051c:	9300      	str	r3, [sp, #0]
 801051e:	460b      	mov	r3, r1
 8010520:	2100      	movs	r1, #0
 8010522:	68f8      	ldr	r0, [r7, #12]
 8010524:	f000 f816 	bl	8010554 <USBH_GetDescriptor>
 8010528:	4603      	mov	r3, r0
 801052a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 801052c:	7dfb      	ldrb	r3, [r7, #23]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d107      	bne.n	8010542 <USBH_Get_StringDesc+0x72>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010538:	893a      	ldrh	r2, [r7, #8]
 801053a:	6879      	ldr	r1, [r7, #4]
 801053c:	4618      	mov	r0, r3
 801053e:	f000 fb92 	bl	8010c66 <USBH_ParseStringDesc>
  }

  return status;
 8010542:	7dfb      	ldrb	r3, [r7, #23]
}
 8010544:	4618      	mov	r0, r3
 8010546:	3718      	adds	r7, #24
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}
 801054c:	08013360 	.word	0x08013360
 8010550:	080133f8 	.word	0x080133f8

08010554 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	607b      	str	r3, [r7, #4]
 801055e:	460b      	mov	r3, r1
 8010560:	72fb      	strb	r3, [r7, #11]
 8010562:	4613      	mov	r3, r2
 8010564:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	789b      	ldrb	r3, [r3, #2]
 801056a:	2b01      	cmp	r3, #1
 801056c:	d11c      	bne.n	80105a8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801056e:	7afb      	ldrb	r3, [r7, #11]
 8010570:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010574:	b2da      	uxtb	r2, r3
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2206      	movs	r2, #6
 801057e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	893a      	ldrh	r2, [r7, #8]
 8010584:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010586:	893b      	ldrh	r3, [r7, #8]
 8010588:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801058c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010590:	d104      	bne.n	801059c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	f240 4209 	movw	r2, #1033	@ 0x409
 8010598:	829a      	strh	r2, [r3, #20]
 801059a:	e002      	b.n	80105a2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2200      	movs	r2, #0
 80105a0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	8b3a      	ldrh	r2, [r7, #24]
 80105a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80105a8:	8b3b      	ldrh	r3, [r7, #24]
 80105aa:	461a      	mov	r2, r3
 80105ac:	6879      	ldr	r1, [r7, #4]
 80105ae:	68f8      	ldr	r0, [r7, #12]
 80105b0:	f000 fba6 	bl	8010d00 <USBH_CtlReq>
 80105b4:	4603      	mov	r3, r0
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3710      	adds	r7, #16
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}

080105be <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80105be:	b580      	push	{r7, lr}
 80105c0:	b082      	sub	sp, #8
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
 80105c6:	460b      	mov	r3, r1
 80105c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	789b      	ldrb	r3, [r3, #2]
 80105ce:	2b01      	cmp	r3, #1
 80105d0:	d10f      	bne.n	80105f2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2200      	movs	r2, #0
 80105d6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2205      	movs	r2, #5
 80105dc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80105de:	78fb      	ldrb	r3, [r7, #3]
 80105e0:	b29a      	uxth	r2, r3
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2200      	movs	r2, #0
 80105ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2200      	movs	r2, #0
 80105f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80105f2:	2200      	movs	r2, #0
 80105f4:	2100      	movs	r1, #0
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 fb82 	bl	8010d00 <USBH_CtlReq>
 80105fc:	4603      	mov	r3, r0
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}

08010606 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010606:	b580      	push	{r7, lr}
 8010608:	b082      	sub	sp, #8
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
 801060e:	460b      	mov	r3, r1
 8010610:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	789b      	ldrb	r3, [r3, #2]
 8010616:	2b01      	cmp	r3, #1
 8010618:	d10e      	bne.n	8010638 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2209      	movs	r2, #9
 8010624:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	887a      	ldrh	r2, [r7, #2]
 801062a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2200      	movs	r2, #0
 8010630:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010638:	2200      	movs	r2, #0
 801063a:	2100      	movs	r1, #0
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f000 fb5f 	bl	8010d00 <USBH_CtlReq>
 8010642:	4603      	mov	r3, r0
}
 8010644:	4618      	mov	r0, r3
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	460b      	mov	r3, r1
 8010656:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	789b      	ldrb	r3, [r3, #2]
 801065c:	2b01      	cmp	r3, #1
 801065e:	d10f      	bne.n	8010680 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2203      	movs	r2, #3
 801066a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801066c:	78fb      	ldrb	r3, [r7, #3]
 801066e:	b29a      	uxth	r2, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2200      	movs	r2, #0
 8010678:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2200      	movs	r2, #0
 801067e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010680:	2200      	movs	r2, #0
 8010682:	2100      	movs	r1, #0
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f000 fb3b 	bl	8010d00 <USBH_CtlReq>
 801068a:	4603      	mov	r3, r0
}
 801068c:	4618      	mov	r0, r3
 801068e:	3708      	adds	r7, #8
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	460b      	mov	r3, r1
 801069e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	789b      	ldrb	r3, [r3, #2]
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d10f      	bne.n	80106c8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2202      	movs	r2, #2
 80106ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2201      	movs	r2, #1
 80106b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2200      	movs	r2, #0
 80106b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80106ba:	78fb      	ldrb	r3, [r7, #3]
 80106bc:	b29a      	uxth	r2, r3
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2200      	movs	r2, #0
 80106c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80106c8:	2200      	movs	r2, #0
 80106ca:	2100      	movs	r1, #0
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f000 fb17 	bl	8010d00 <USBH_CtlReq>
 80106d2:	4603      	mov	r3, r0
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3708      	adds	r7, #8
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80106dc:	b480      	push	{r7}
 80106de:	b087      	sub	sp, #28
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	60f8      	str	r0, [r7, #12]
 80106e4:	60b9      	str	r1, [r7, #8]
 80106e6:	4613      	mov	r3, r2
 80106e8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 80106f0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80106f2:	2300      	movs	r3, #0
 80106f4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d101      	bne.n	8010700 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80106fc:	2302      	movs	r3, #2
 80106fe:	e094      	b.n	801082a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	781a      	ldrb	r2, [r3, #0]
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	785a      	ldrb	r2, [r3, #1]
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	3302      	adds	r3, #2
 8010714:	781b      	ldrb	r3, [r3, #0]
 8010716:	461a      	mov	r2, r3
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	3303      	adds	r3, #3
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	021b      	lsls	r3, r3, #8
 8010720:	b29b      	uxth	r3, r3
 8010722:	4313      	orrs	r3, r2
 8010724:	b29a      	uxth	r2, r3
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	791a      	ldrb	r2, [r3, #4]
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	795a      	ldrb	r2, [r3, #5]
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	799a      	ldrb	r2, [r3, #6]
 801073e:	693b      	ldr	r3, [r7, #16]
 8010740:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	79da      	ldrb	r2, [r3, #7]
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010750:	2b00      	cmp	r3, #0
 8010752:	d004      	beq.n	801075e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801075a:	2b01      	cmp	r3, #1
 801075c:	d11b      	bne.n	8010796 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	79db      	ldrb	r3, [r3, #7]
 8010762:	2b20      	cmp	r3, #32
 8010764:	dc0f      	bgt.n	8010786 <USBH_ParseDevDesc+0xaa>
 8010766:	2b08      	cmp	r3, #8
 8010768:	db0f      	blt.n	801078a <USBH_ParseDevDesc+0xae>
 801076a:	3b08      	subs	r3, #8
 801076c:	4a32      	ldr	r2, [pc, #200]	@ (8010838 <USBH_ParseDevDesc+0x15c>)
 801076e:	fa22 f303 	lsr.w	r3, r2, r3
 8010772:	f003 0301 	and.w	r3, r3, #1
 8010776:	2b00      	cmp	r3, #0
 8010778:	bf14      	ite	ne
 801077a:	2301      	movne	r3, #1
 801077c:	2300      	moveq	r3, #0
 801077e:	b2db      	uxtb	r3, r3
 8010780:	2b00      	cmp	r3, #0
 8010782:	d106      	bne.n	8010792 <USBH_ParseDevDesc+0xb6>
 8010784:	e001      	b.n	801078a <USBH_ParseDevDesc+0xae>
 8010786:	2b40      	cmp	r3, #64	@ 0x40
 8010788:	d003      	beq.n	8010792 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	2208      	movs	r2, #8
 801078e:	71da      	strb	r2, [r3, #7]
        break;
 8010790:	e000      	b.n	8010794 <USBH_ParseDevDesc+0xb8>
        break;
 8010792:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8010794:	e00e      	b.n	80107b4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 801079c:	2b02      	cmp	r3, #2
 801079e:	d107      	bne.n	80107b0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	79db      	ldrb	r3, [r3, #7]
 80107a4:	2b08      	cmp	r3, #8
 80107a6:	d005      	beq.n	80107b4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	2208      	movs	r2, #8
 80107ac:	71da      	strb	r2, [r3, #7]
 80107ae:	e001      	b.n	80107b4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80107b0:	2303      	movs	r3, #3
 80107b2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80107b4:	88fb      	ldrh	r3, [r7, #6]
 80107b6:	2b08      	cmp	r3, #8
 80107b8:	d936      	bls.n	8010828 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	3308      	adds	r3, #8
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	461a      	mov	r2, r3
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	3309      	adds	r3, #9
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	021b      	lsls	r3, r3, #8
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	4313      	orrs	r3, r2
 80107ce:	b29a      	uxth	r2, r3
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	330a      	adds	r3, #10
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	461a      	mov	r2, r3
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	330b      	adds	r3, #11
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	021b      	lsls	r3, r3, #8
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	4313      	orrs	r3, r2
 80107e8:	b29a      	uxth	r2, r3
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	330c      	adds	r3, #12
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	461a      	mov	r2, r3
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	330d      	adds	r3, #13
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	021b      	lsls	r3, r3, #8
 80107fe:	b29b      	uxth	r3, r3
 8010800:	4313      	orrs	r3, r2
 8010802:	b29a      	uxth	r2, r3
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	7b9a      	ldrb	r2, [r3, #14]
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	7bda      	ldrb	r2, [r3, #15]
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	7c1a      	ldrb	r2, [r3, #16]
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	7c5a      	ldrb	r2, [r3, #17]
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8010828:	7dfb      	ldrb	r3, [r7, #23]
}
 801082a:	4618      	mov	r0, r3
 801082c:	371c      	adds	r7, #28
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr
 8010836:	bf00      	nop
 8010838:	01000101 	.word	0x01000101

0801083c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b08c      	sub	sp, #48	@ 0x30
 8010840:	af00      	add	r7, sp, #0
 8010842:	60f8      	str	r0, [r7, #12]
 8010844:	60b9      	str	r1, [r7, #8]
 8010846:	4613      	mov	r3, r2
 8010848:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 8010850:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8010852:	2300      	movs	r3, #0
 8010854:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010858:	2300      	movs	r3, #0
 801085a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 801085e:	2300      	movs	r3, #0
 8010860:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d101      	bne.n	801086e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 801086a:	2302      	movs	r3, #2
 801086c:	e0da      	b.n	8010a24 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8010872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010874:	781b      	ldrb	r3, [r3, #0]
 8010876:	2b09      	cmp	r3, #9
 8010878:	d002      	beq.n	8010880 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 801087a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801087c:	2209      	movs	r2, #9
 801087e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	781a      	ldrb	r2, [r3, #0]
 8010884:	6a3b      	ldr	r3, [r7, #32]
 8010886:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	785a      	ldrb	r2, [r3, #1]
 801088c:	6a3b      	ldr	r3, [r7, #32]
 801088e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	3302      	adds	r3, #2
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	461a      	mov	r2, r3
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	3303      	adds	r3, #3
 801089c:	781b      	ldrb	r3, [r3, #0]
 801089e:	021b      	lsls	r3, r3, #8
 80108a0:	b29b      	uxth	r3, r3
 80108a2:	4313      	orrs	r3, r2
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80108aa:	bf28      	it	cs
 80108ac:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	6a3b      	ldr	r3, [r7, #32]
 80108b4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	791a      	ldrb	r2, [r3, #4]
 80108ba:	6a3b      	ldr	r3, [r7, #32]
 80108bc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	795a      	ldrb	r2, [r3, #5]
 80108c2:	6a3b      	ldr	r3, [r7, #32]
 80108c4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	799a      	ldrb	r2, [r3, #6]
 80108ca:	6a3b      	ldr	r3, [r7, #32]
 80108cc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	79da      	ldrb	r2, [r3, #7]
 80108d2:	6a3b      	ldr	r3, [r7, #32]
 80108d4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	7a1a      	ldrb	r2, [r3, #8]
 80108da:	6a3b      	ldr	r3, [r7, #32]
 80108dc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80108de:	88fb      	ldrh	r3, [r7, #6]
 80108e0:	2b09      	cmp	r3, #9
 80108e2:	f240 809d 	bls.w	8010a20 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80108e6:	2309      	movs	r3, #9
 80108e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80108ea:	2300      	movs	r3, #0
 80108ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80108ee:	e081      	b.n	80109f4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80108f0:	f107 0316 	add.w	r3, r7, #22
 80108f4:	4619      	mov	r1, r3
 80108f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108f8:	f000 f9e8 	bl	8010ccc <USBH_GetNextDesc>
 80108fc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80108fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010900:	785b      	ldrb	r3, [r3, #1]
 8010902:	2b04      	cmp	r3, #4
 8010904:	d176      	bne.n	80109f4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8010906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	2b09      	cmp	r3, #9
 801090c:	d002      	beq.n	8010914 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 801090e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010910:	2209      	movs	r2, #9
 8010912:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8010914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010918:	221a      	movs	r2, #26
 801091a:	fb02 f303 	mul.w	r3, r2, r3
 801091e:	3308      	adds	r3, #8
 8010920:	6a3a      	ldr	r2, [r7, #32]
 8010922:	4413      	add	r3, r2
 8010924:	3302      	adds	r3, #2
 8010926:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010928:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801092a:	69f8      	ldr	r0, [r7, #28]
 801092c:	f000 f87e 	bl	8010a2c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010930:	2300      	movs	r3, #0
 8010932:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8010936:	2300      	movs	r3, #0
 8010938:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801093a:	e043      	b.n	80109c4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801093c:	f107 0316 	add.w	r3, r7, #22
 8010940:	4619      	mov	r1, r3
 8010942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010944:	f000 f9c2 	bl	8010ccc <USBH_GetNextDesc>
 8010948:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801094a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801094c:	785b      	ldrb	r3, [r3, #1]
 801094e:	2b05      	cmp	r3, #5
 8010950:	d138      	bne.n	80109c4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8010952:	69fb      	ldr	r3, [r7, #28]
 8010954:	795b      	ldrb	r3, [r3, #5]
 8010956:	2b01      	cmp	r3, #1
 8010958:	d113      	bne.n	8010982 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801095a:	69fb      	ldr	r3, [r7, #28]
 801095c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 801095e:	2b02      	cmp	r3, #2
 8010960:	d003      	beq.n	801096a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010962:	69fb      	ldr	r3, [r7, #28]
 8010964:	799b      	ldrb	r3, [r3, #6]
 8010966:	2b03      	cmp	r3, #3
 8010968:	d10b      	bne.n	8010982 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	79db      	ldrb	r3, [r3, #7]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d10b      	bne.n	801098a <USBH_ParseCfgDesc+0x14e>
 8010972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010974:	781b      	ldrb	r3, [r3, #0]
 8010976:	2b09      	cmp	r3, #9
 8010978:	d007      	beq.n	801098a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 801097a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801097c:	2209      	movs	r2, #9
 801097e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010980:	e003      	b.n	801098a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8010982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010984:	2207      	movs	r2, #7
 8010986:	701a      	strb	r2, [r3, #0]
 8010988:	e000      	b.n	801098c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801098a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801098c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010990:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010994:	3201      	adds	r2, #1
 8010996:	00d2      	lsls	r2, r2, #3
 8010998:	211a      	movs	r1, #26
 801099a:	fb01 f303 	mul.w	r3, r1, r3
 801099e:	4413      	add	r3, r2
 80109a0:	3308      	adds	r3, #8
 80109a2:	6a3a      	ldr	r2, [r7, #32]
 80109a4:	4413      	add	r3, r2
 80109a6:	3304      	adds	r3, #4
 80109a8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80109aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80109ac:	69b9      	ldr	r1, [r7, #24]
 80109ae:	68f8      	ldr	r0, [r7, #12]
 80109b0:	f000 f870 	bl	8010a94 <USBH_ParseEPDesc>
 80109b4:	4603      	mov	r3, r0
 80109b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80109ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80109be:	3301      	adds	r3, #1
 80109c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80109c4:	69fb      	ldr	r3, [r7, #28]
 80109c6:	791b      	ldrb	r3, [r3, #4]
 80109c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d204      	bcs.n	80109da <USBH_ParseCfgDesc+0x19e>
 80109d0:	6a3b      	ldr	r3, [r7, #32]
 80109d2:	885a      	ldrh	r2, [r3, #2]
 80109d4:	8afb      	ldrh	r3, [r7, #22]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d8b0      	bhi.n	801093c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80109da:	69fb      	ldr	r3, [r7, #28]
 80109dc:	791b      	ldrb	r3, [r3, #4]
 80109de:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80109e2:	429a      	cmp	r2, r3
 80109e4:	d201      	bcs.n	80109ea <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80109e6:	2303      	movs	r3, #3
 80109e8:	e01c      	b.n	8010a24 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80109ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109ee:	3301      	adds	r3, #1
 80109f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80109f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d805      	bhi.n	8010a08 <USBH_ParseCfgDesc+0x1cc>
 80109fc:	6a3b      	ldr	r3, [r7, #32]
 80109fe:	885a      	ldrh	r2, [r3, #2]
 8010a00:	8afb      	ldrh	r3, [r7, #22]
 8010a02:	429a      	cmp	r2, r3
 8010a04:	f63f af74 	bhi.w	80108f0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8010a08:	6a3b      	ldr	r3, [r7, #32]
 8010a0a:	791b      	ldrb	r3, [r3, #4]
 8010a0c:	2b02      	cmp	r3, #2
 8010a0e:	bf28      	it	cs
 8010a10:	2302      	movcs	r3, #2
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d201      	bcs.n	8010a20 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8010a1c:	2303      	movs	r3, #3
 8010a1e:	e001      	b.n	8010a24 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8010a20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3730      	adds	r7, #48	@ 0x30
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b083      	sub	sp, #12
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	781a      	ldrb	r2, [r3, #0]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	785a      	ldrb	r2, [r3, #1]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	789a      	ldrb	r2, [r3, #2]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	78da      	ldrb	r2, [r3, #3]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	3304      	adds	r3, #4
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	2b02      	cmp	r3, #2
 8010a5e:	bf28      	it	cs
 8010a60:	2302      	movcs	r3, #2
 8010a62:	b2da      	uxtb	r2, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	795a      	ldrb	r2, [r3, #5]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	799a      	ldrb	r2, [r3, #6]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	79da      	ldrb	r2, [r3, #7]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	7a1a      	ldrb	r2, [r3, #8]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	721a      	strb	r2, [r3, #8]
}
 8010a88:	bf00      	nop
 8010a8a:	370c      	adds	r7, #12
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a92:	4770      	bx	lr

08010a94 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8010a94:	b480      	push	{r7}
 8010a96:	b087      	sub	sp, #28
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	60f8      	str	r0, [r7, #12]
 8010a9c:	60b9      	str	r1, [r7, #8]
 8010a9e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	781a      	ldrb	r2, [r3, #0]
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	785a      	ldrb	r2, [r3, #1]
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	789a      	ldrb	r2, [r3, #2]
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	78da      	ldrb	r2, [r3, #3]
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	3304      	adds	r3, #4
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	461a      	mov	r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	3305      	adds	r3, #5
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	021b      	lsls	r3, r3, #8
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	b29a      	uxth	r2, r3
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	799a      	ldrb	r2, [r3, #6]
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	889b      	ldrh	r3, [r3, #4]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00a      	beq.n	8010b04 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010af6:	d805      	bhi.n	8010b04 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010afc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010b00:	4293      	cmp	r3, r2
 8010b02:	d901      	bls.n	8010b08 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8010b04:	2303      	movs	r3, #3
 8010b06:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d136      	bne.n	8010b80 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	78db      	ldrb	r3, [r3, #3]
 8010b16:	f003 0303 	and.w	r3, r3, #3
 8010b1a:	2b02      	cmp	r3, #2
 8010b1c:	d108      	bne.n	8010b30 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	889b      	ldrh	r3, [r3, #4]
 8010b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b26:	f240 8097 	bls.w	8010c58 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010b2a:	2303      	movs	r3, #3
 8010b2c:	75fb      	strb	r3, [r7, #23]
 8010b2e:	e093      	b.n	8010c58 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	78db      	ldrb	r3, [r3, #3]
 8010b34:	f003 0303 	and.w	r3, r3, #3
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d107      	bne.n	8010b4c <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	889b      	ldrh	r3, [r3, #4]
 8010b40:	2b40      	cmp	r3, #64	@ 0x40
 8010b42:	f240 8089 	bls.w	8010c58 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010b46:	2303      	movs	r3, #3
 8010b48:	75fb      	strb	r3, [r7, #23]
 8010b4a:	e085      	b.n	8010c58 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	78db      	ldrb	r3, [r3, #3]
 8010b50:	f003 0303 	and.w	r3, r3, #3
 8010b54:	2b01      	cmp	r3, #1
 8010b56:	d005      	beq.n	8010b64 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	78db      	ldrb	r3, [r3, #3]
 8010b5c:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010b60:	2b03      	cmp	r3, #3
 8010b62:	d10a      	bne.n	8010b7a <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	799b      	ldrb	r3, [r3, #6]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d003      	beq.n	8010b74 <USBH_ParseEPDesc+0xe0>
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	799b      	ldrb	r3, [r3, #6]
 8010b70:	2b10      	cmp	r3, #16
 8010b72:	d970      	bls.n	8010c56 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010b74:	2303      	movs	r3, #3
 8010b76:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010b78:	e06d      	b.n	8010c56 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010b7a:	2303      	movs	r3, #3
 8010b7c:	75fb      	strb	r3, [r7, #23]
 8010b7e:	e06b      	b.n	8010c58 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d13c      	bne.n	8010c04 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	78db      	ldrb	r3, [r3, #3]
 8010b8e:	f003 0303 	and.w	r3, r3, #3
 8010b92:	2b02      	cmp	r3, #2
 8010b94:	d005      	beq.n	8010ba2 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	78db      	ldrb	r3, [r3, #3]
 8010b9a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d106      	bne.n	8010bb0 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	889b      	ldrh	r3, [r3, #4]
 8010ba6:	2b40      	cmp	r3, #64	@ 0x40
 8010ba8:	d956      	bls.n	8010c58 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010baa:	2303      	movs	r3, #3
 8010bac:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010bae:	e053      	b.n	8010c58 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	78db      	ldrb	r3, [r3, #3]
 8010bb4:	f003 0303 	and.w	r3, r3, #3
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d10e      	bne.n	8010bda <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	799b      	ldrb	r3, [r3, #6]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d007      	beq.n	8010bd4 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8010bc8:	2b10      	cmp	r3, #16
 8010bca:	d803      	bhi.n	8010bd4 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8010bd0:	2b40      	cmp	r3, #64	@ 0x40
 8010bd2:	d941      	bls.n	8010c58 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010bd4:	2303      	movs	r3, #3
 8010bd6:	75fb      	strb	r3, [r7, #23]
 8010bd8:	e03e      	b.n	8010c58 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	78db      	ldrb	r3, [r3, #3]
 8010bde:	f003 0303 	and.w	r3, r3, #3
 8010be2:	2b03      	cmp	r3, #3
 8010be4:	d10b      	bne.n	8010bfe <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	799b      	ldrb	r3, [r3, #6]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d004      	beq.n	8010bf8 <USBH_ParseEPDesc+0x164>
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	889b      	ldrh	r3, [r3, #4]
 8010bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010bf6:	d32f      	bcc.n	8010c58 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010bf8:	2303      	movs	r3, #3
 8010bfa:	75fb      	strb	r3, [r7, #23]
 8010bfc:	e02c      	b.n	8010c58 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010bfe:	2303      	movs	r3, #3
 8010c00:	75fb      	strb	r3, [r7, #23]
 8010c02:	e029      	b.n	8010c58 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010c0a:	2b02      	cmp	r3, #2
 8010c0c:	d120      	bne.n	8010c50 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	78db      	ldrb	r3, [r3, #3]
 8010c12:	f003 0303 	and.w	r3, r3, #3
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d106      	bne.n	8010c28 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	889b      	ldrh	r3, [r3, #4]
 8010c1e:	2b08      	cmp	r3, #8
 8010c20:	d01a      	beq.n	8010c58 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010c22:	2303      	movs	r3, #3
 8010c24:	75fb      	strb	r3, [r7, #23]
 8010c26:	e017      	b.n	8010c58 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	78db      	ldrb	r3, [r3, #3]
 8010c2c:	f003 0303 	and.w	r3, r3, #3
 8010c30:	2b03      	cmp	r3, #3
 8010c32:	d10a      	bne.n	8010c4a <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	799b      	ldrb	r3, [r3, #6]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d003      	beq.n	8010c44 <USBH_ParseEPDesc+0x1b0>
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	889b      	ldrh	r3, [r3, #4]
 8010c40:	2b08      	cmp	r3, #8
 8010c42:	d909      	bls.n	8010c58 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010c44:	2303      	movs	r3, #3
 8010c46:	75fb      	strb	r3, [r7, #23]
 8010c48:	e006      	b.n	8010c58 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010c4a:	2303      	movs	r3, #3
 8010c4c:	75fb      	strb	r3, [r7, #23]
 8010c4e:	e003      	b.n	8010c58 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010c50:	2303      	movs	r3, #3
 8010c52:	75fb      	strb	r3, [r7, #23]
 8010c54:	e000      	b.n	8010c58 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010c56:	bf00      	nop
  }

  return status;
 8010c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	371c      	adds	r7, #28
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c64:	4770      	bx	lr

08010c66 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010c66:	b480      	push	{r7}
 8010c68:	b087      	sub	sp, #28
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	60f8      	str	r0, [r7, #12]
 8010c6e:	60b9      	str	r1, [r7, #8]
 8010c70:	4613      	mov	r3, r2
 8010c72:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	3301      	adds	r3, #1
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	2b03      	cmp	r3, #3
 8010c7c:	d120      	bne.n	8010cc0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	781b      	ldrb	r3, [r3, #0]
 8010c82:	1e9a      	subs	r2, r3, #2
 8010c84:	88fb      	ldrh	r3, [r7, #6]
 8010c86:	4293      	cmp	r3, r2
 8010c88:	bf28      	it	cs
 8010c8a:	4613      	movcs	r3, r2
 8010c8c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	3302      	adds	r3, #2
 8010c92:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8010c94:	2300      	movs	r3, #0
 8010c96:	82fb      	strh	r3, [r7, #22]
 8010c98:	e00b      	b.n	8010cb2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010c9a:	8afb      	ldrh	r3, [r7, #22]
 8010c9c:	68fa      	ldr	r2, [r7, #12]
 8010c9e:	4413      	add	r3, r2
 8010ca0:	781a      	ldrb	r2, [r3, #0]
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	701a      	strb	r2, [r3, #0]
      pdest++;
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010cac:	8afb      	ldrh	r3, [r7, #22]
 8010cae:	3302      	adds	r3, #2
 8010cb0:	82fb      	strh	r3, [r7, #22]
 8010cb2:	8afa      	ldrh	r2, [r7, #22]
 8010cb4:	8abb      	ldrh	r3, [r7, #20]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d3ef      	bcc.n	8010c9a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	701a      	strb	r2, [r3, #0]
  }
}
 8010cc0:	bf00      	nop
 8010cc2:	371c      	adds	r7, #28
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr

08010ccc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b085      	sub	sp, #20
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	881b      	ldrh	r3, [r3, #0]
 8010cda:	687a      	ldr	r2, [r7, #4]
 8010cdc:	7812      	ldrb	r2, [r2, #0]
 8010cde:	4413      	add	r3, r2
 8010ce0:	b29a      	uxth	r2, r3
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	4413      	add	r3, r2
 8010cf0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
}
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3714      	adds	r7, #20
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr

08010d00 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b086      	sub	sp, #24
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010d0e:	2301      	movs	r3, #1
 8010d10:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	789b      	ldrb	r3, [r3, #2]
 8010d16:	2b01      	cmp	r3, #1
 8010d18:	d002      	beq.n	8010d20 <USBH_CtlReq+0x20>
 8010d1a:	2b02      	cmp	r3, #2
 8010d1c:	d00f      	beq.n	8010d3e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8010d1e:	e027      	b.n	8010d70 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	68ba      	ldr	r2, [r7, #8]
 8010d24:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	88fa      	ldrh	r2, [r7, #6]
 8010d2a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2201      	movs	r2, #1
 8010d30:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	2202      	movs	r2, #2
 8010d36:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8010d3c:	e018      	b.n	8010d70 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8010d3e:	68f8      	ldr	r0, [r7, #12]
 8010d40:	f000 f81c 	bl	8010d7c <USBH_HandleControl>
 8010d44:	4603      	mov	r3, r0
 8010d46:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010d48:	7dfb      	ldrb	r3, [r7, #23]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d002      	beq.n	8010d54 <USBH_CtlReq+0x54>
 8010d4e:	7dfb      	ldrb	r3, [r7, #23]
 8010d50:	2b03      	cmp	r3, #3
 8010d52:	d106      	bne.n	8010d62 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	2201      	movs	r2, #1
 8010d58:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	761a      	strb	r2, [r3, #24]
      break;
 8010d60:	e005      	b.n	8010d6e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8010d62:	7dfb      	ldrb	r3, [r7, #23]
 8010d64:	2b02      	cmp	r3, #2
 8010d66:	d102      	bne.n	8010d6e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	709a      	strb	r2, [r3, #2]
      break;
 8010d6e:	bf00      	nop
  }
  return status;
 8010d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3718      	adds	r7, #24
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}
	...

08010d7c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b086      	sub	sp, #24
 8010d80:	af02      	add	r7, sp, #8
 8010d82:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010d84:	2301      	movs	r3, #1
 8010d86:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	7e1b      	ldrb	r3, [r3, #24]
 8010d90:	3b01      	subs	r3, #1
 8010d92:	2b0a      	cmp	r3, #10
 8010d94:	f200 815f 	bhi.w	8011056 <USBH_HandleControl+0x2da>
 8010d98:	a201      	add	r2, pc, #4	@ (adr r2, 8010da0 <USBH_HandleControl+0x24>)
 8010d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d9e:	bf00      	nop
 8010da0:	08010dcd 	.word	0x08010dcd
 8010da4:	08010de7 	.word	0x08010de7
 8010da8:	08010e51 	.word	0x08010e51
 8010dac:	08010e77 	.word	0x08010e77
 8010db0:	08010eaf 	.word	0x08010eaf
 8010db4:	08010ed9 	.word	0x08010ed9
 8010db8:	08010f2b 	.word	0x08010f2b
 8010dbc:	08010f4d 	.word	0x08010f4d
 8010dc0:	08010f89 	.word	0x08010f89
 8010dc4:	08010faf 	.word	0x08010faf
 8010dc8:	08010fed 	.word	0x08010fed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f103 0110 	add.w	r1, r3, #16
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	795b      	ldrb	r3, [r3, #5]
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f000 f951 	bl	8011080 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2202      	movs	r2, #2
 8010de2:	761a      	strb	r2, [r3, #24]
      break;
 8010de4:	e142      	b.n	801106c <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	795b      	ldrb	r3, [r3, #5]
 8010dea:	4619      	mov	r1, r3
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f000 fcb9 	bl	8011764 <USBH_LL_GetURBState>
 8010df2:	4603      	mov	r3, r0
 8010df4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010df6:	7bbb      	ldrb	r3, [r7, #14]
 8010df8:	2b01      	cmp	r3, #1
 8010dfa:	d11e      	bne.n	8010e3a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	7c1b      	ldrb	r3, [r3, #16]
 8010e00:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010e04:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	8adb      	ldrh	r3, [r3, #22]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d00a      	beq.n	8010e24 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010e0e:	7b7b      	ldrb	r3, [r7, #13]
 8010e10:	2b80      	cmp	r3, #128	@ 0x80
 8010e12:	d103      	bne.n	8010e1c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2203      	movs	r2, #3
 8010e18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010e1a:	e11e      	b.n	801105a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2205      	movs	r2, #5
 8010e20:	761a      	strb	r2, [r3, #24]
      break;
 8010e22:	e11a      	b.n	801105a <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 8010e24:	7b7b      	ldrb	r3, [r7, #13]
 8010e26:	2b80      	cmp	r3, #128	@ 0x80
 8010e28:	d103      	bne.n	8010e32 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2209      	movs	r2, #9
 8010e2e:	761a      	strb	r2, [r3, #24]
      break;
 8010e30:	e113      	b.n	801105a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2207      	movs	r2, #7
 8010e36:	761a      	strb	r2, [r3, #24]
      break;
 8010e38:	e10f      	b.n	801105a <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010e3a:	7bbb      	ldrb	r3, [r7, #14]
 8010e3c:	2b04      	cmp	r3, #4
 8010e3e:	d003      	beq.n	8010e48 <USBH_HandleControl+0xcc>
 8010e40:	7bbb      	ldrb	r3, [r7, #14]
 8010e42:	2b02      	cmp	r3, #2
 8010e44:	f040 8109 	bne.w	801105a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	220b      	movs	r2, #11
 8010e4c:	761a      	strb	r2, [r3, #24]
      break;
 8010e4e:	e104      	b.n	801105a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010e56:	b29a      	uxth	r2, r3
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6899      	ldr	r1, [r3, #8]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	899a      	ldrh	r2, [r3, #12]
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	791b      	ldrb	r3, [r3, #4]
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f000 f948 	bl	80110fe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2204      	movs	r2, #4
 8010e72:	761a      	strb	r2, [r3, #24]
      break;
 8010e74:	e0fa      	b.n	801106c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	791b      	ldrb	r3, [r3, #4]
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f000 fc71 	bl	8011764 <USBH_LL_GetURBState>
 8010e82:	4603      	mov	r3, r0
 8010e84:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010e86:	7bbb      	ldrb	r3, [r7, #14]
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	d102      	bne.n	8010e92 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2209      	movs	r2, #9
 8010e90:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010e92:	7bbb      	ldrb	r3, [r7, #14]
 8010e94:	2b05      	cmp	r3, #5
 8010e96:	d102      	bne.n	8010e9e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010e98:	2303      	movs	r3, #3
 8010e9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010e9c:	e0df      	b.n	801105e <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 8010e9e:	7bbb      	ldrb	r3, [r7, #14]
 8010ea0:	2b04      	cmp	r3, #4
 8010ea2:	f040 80dc 	bne.w	801105e <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	220b      	movs	r2, #11
 8010eaa:	761a      	strb	r2, [r3, #24]
      break;
 8010eac:	e0d7      	b.n	801105e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6899      	ldr	r1, [r3, #8]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	899a      	ldrh	r2, [r3, #12]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	795b      	ldrb	r3, [r3, #5]
 8010eba:	2001      	movs	r0, #1
 8010ebc:	9000      	str	r0, [sp, #0]
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 f8f8 	bl	80110b4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2206      	movs	r2, #6
 8010ed4:	761a      	strb	r2, [r3, #24]
      break;
 8010ed6:	e0c9      	b.n	801106c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	795b      	ldrb	r3, [r3, #5]
 8010edc:	4619      	mov	r1, r3
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f000 fc40 	bl	8011764 <USBH_LL_GetURBState>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010ee8:	7bbb      	ldrb	r3, [r7, #14]
 8010eea:	2b01      	cmp	r3, #1
 8010eec:	d103      	bne.n	8010ef6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2207      	movs	r2, #7
 8010ef2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010ef4:	e0b5      	b.n	8011062 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 8010ef6:	7bbb      	ldrb	r3, [r7, #14]
 8010ef8:	2b05      	cmp	r3, #5
 8010efa:	d105      	bne.n	8010f08 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	220c      	movs	r2, #12
 8010f00:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010f02:	2303      	movs	r3, #3
 8010f04:	73fb      	strb	r3, [r7, #15]
      break;
 8010f06:	e0ac      	b.n	8011062 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010f08:	7bbb      	ldrb	r3, [r7, #14]
 8010f0a:	2b02      	cmp	r3, #2
 8010f0c:	d103      	bne.n	8010f16 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2205      	movs	r2, #5
 8010f12:	761a      	strb	r2, [r3, #24]
      break;
 8010f14:	e0a5      	b.n	8011062 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 8010f16:	7bbb      	ldrb	r3, [r7, #14]
 8010f18:	2b04      	cmp	r3, #4
 8010f1a:	f040 80a2 	bne.w	8011062 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	220b      	movs	r2, #11
 8010f22:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010f24:	2302      	movs	r3, #2
 8010f26:	73fb      	strb	r3, [r7, #15]
      break;
 8010f28:	e09b      	b.n	8011062 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	791b      	ldrb	r3, [r3, #4]
 8010f2e:	2200      	movs	r2, #0
 8010f30:	2100      	movs	r1, #0
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f000 f8e3 	bl	80110fe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010f3e:	b29a      	uxth	r2, r3
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2208      	movs	r2, #8
 8010f48:	761a      	strb	r2, [r3, #24]

      break;
 8010f4a:	e08f      	b.n	801106c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	791b      	ldrb	r3, [r3, #4]
 8010f50:	4619      	mov	r1, r3
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f000 fc06 	bl	8011764 <USBH_LL_GetURBState>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010f5c:	7bbb      	ldrb	r3, [r7, #14]
 8010f5e:	2b01      	cmp	r3, #1
 8010f60:	d105      	bne.n	8010f6e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	220d      	movs	r2, #13
 8010f66:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010f6c:	e07b      	b.n	8011066 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 8010f6e:	7bbb      	ldrb	r3, [r7, #14]
 8010f70:	2b04      	cmp	r3, #4
 8010f72:	d103      	bne.n	8010f7c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	220b      	movs	r2, #11
 8010f78:	761a      	strb	r2, [r3, #24]
      break;
 8010f7a:	e074      	b.n	8011066 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 8010f7c:	7bbb      	ldrb	r3, [r7, #14]
 8010f7e:	2b05      	cmp	r3, #5
 8010f80:	d171      	bne.n	8011066 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 8010f82:	2303      	movs	r3, #3
 8010f84:	73fb      	strb	r3, [r7, #15]
      break;
 8010f86:	e06e      	b.n	8011066 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	795b      	ldrb	r3, [r3, #5]
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	9200      	str	r2, [sp, #0]
 8010f90:	2200      	movs	r2, #0
 8010f92:	2100      	movs	r1, #0
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f000 f88d 	bl	80110b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010fa0:	b29a      	uxth	r2, r3
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	220a      	movs	r2, #10
 8010faa:	761a      	strb	r2, [r3, #24]
      break;
 8010fac:	e05e      	b.n	801106c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	795b      	ldrb	r3, [r3, #5]
 8010fb2:	4619      	mov	r1, r3
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f000 fbd5 	bl	8011764 <USBH_LL_GetURBState>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010fbe:	7bbb      	ldrb	r3, [r7, #14]
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	d105      	bne.n	8010fd0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	220d      	movs	r2, #13
 8010fcc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010fce:	e04c      	b.n	801106a <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010fd0:	7bbb      	ldrb	r3, [r7, #14]
 8010fd2:	2b02      	cmp	r3, #2
 8010fd4:	d103      	bne.n	8010fde <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2209      	movs	r2, #9
 8010fda:	761a      	strb	r2, [r3, #24]
      break;
 8010fdc:	e045      	b.n	801106a <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 8010fde:	7bbb      	ldrb	r3, [r7, #14]
 8010fe0:	2b04      	cmp	r3, #4
 8010fe2:	d142      	bne.n	801106a <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	220b      	movs	r2, #11
 8010fe8:	761a      	strb	r2, [r3, #24]
      break;
 8010fea:	e03e      	b.n	801106a <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	7e5b      	ldrb	r3, [r3, #25]
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	b2da      	uxtb	r2, r3
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	765a      	strb	r2, [r3, #25]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	7e5b      	ldrb	r3, [r3, #25]
 8010ffc:	2b02      	cmp	r3, #2
 8010ffe:	d806      	bhi.n	801100e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2201      	movs	r2, #1
 8011004:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	2201      	movs	r2, #1
 801100a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801100c:	e02e      	b.n	801106c <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 8011014:	2106      	movs	r1, #6
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2200      	movs	r2, #0
 801101e:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 8011020:	4815      	ldr	r0, [pc, #84]	@ (8011078 <USBH_HandleControl+0x2fc>)
 8011022:	f000 fdcf 	bl	8011bc4 <iprintf>
 8011026:	4815      	ldr	r0, [pc, #84]	@ (801107c <USBH_HandleControl+0x300>)
 8011028:	f000 fdcc 	bl	8011bc4 <iprintf>
 801102c:	200a      	movs	r0, #10
 801102e:	f000 fddb 	bl	8011be8 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	795b      	ldrb	r3, [r3, #5]
 8011036:	4619      	mov	r1, r3
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f000 f8ee 	bl	801121a <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	791b      	ldrb	r3, [r3, #4]
 8011042:	4619      	mov	r1, r3
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 f8e8 	bl	801121a <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2200      	movs	r2, #0
 801104e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8011050:	2302      	movs	r3, #2
 8011052:	73fb      	strb	r3, [r7, #15]
      break;
 8011054:	e00a      	b.n	801106c <USBH_HandleControl+0x2f0>

    default:
      break;
 8011056:	bf00      	nop
 8011058:	e008      	b.n	801106c <USBH_HandleControl+0x2f0>
      break;
 801105a:	bf00      	nop
 801105c:	e006      	b.n	801106c <USBH_HandleControl+0x2f0>
      break;
 801105e:	bf00      	nop
 8011060:	e004      	b.n	801106c <USBH_HandleControl+0x2f0>
      break;
 8011062:	bf00      	nop
 8011064:	e002      	b.n	801106c <USBH_HandleControl+0x2f0>
      break;
 8011066:	bf00      	nop
 8011068:	e000      	b.n	801106c <USBH_HandleControl+0x2f0>
      break;
 801106a:	bf00      	nop
  }

  return status;
 801106c:	7bfb      	ldrb	r3, [r7, #15]
}
 801106e:	4618      	mov	r0, r3
 8011070:	3710      	adds	r7, #16
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	08013360 	.word	0x08013360
 801107c:	0801343c 	.word	0x0801343c

08011080 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b088      	sub	sp, #32
 8011084:	af04      	add	r7, sp, #16
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	60b9      	str	r1, [r7, #8]
 801108a:	4613      	mov	r3, r2
 801108c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801108e:	79f9      	ldrb	r1, [r7, #7]
 8011090:	2300      	movs	r3, #0
 8011092:	9303      	str	r3, [sp, #12]
 8011094:	2308      	movs	r3, #8
 8011096:	9302      	str	r3, [sp, #8]
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	9301      	str	r3, [sp, #4]
 801109c:	2300      	movs	r3, #0
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	2300      	movs	r3, #0
 80110a2:	2200      	movs	r2, #0
 80110a4:	68f8      	ldr	r0, [r7, #12]
 80110a6:	f000 fb2c 	bl	8011702 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80110aa:	2300      	movs	r3, #0
}
 80110ac:	4618      	mov	r0, r3
 80110ae:	3710      	adds	r7, #16
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}

080110b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b088      	sub	sp, #32
 80110b8:	af04      	add	r7, sp, #16
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	4611      	mov	r1, r2
 80110c0:	461a      	mov	r2, r3
 80110c2:	460b      	mov	r3, r1
 80110c4:	80fb      	strh	r3, [r7, #6]
 80110c6:	4613      	mov	r3, r2
 80110c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d001      	beq.n	80110d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80110d4:	2300      	movs	r3, #0
 80110d6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80110d8:	7979      	ldrb	r1, [r7, #5]
 80110da:	7e3b      	ldrb	r3, [r7, #24]
 80110dc:	9303      	str	r3, [sp, #12]
 80110de:	88fb      	ldrh	r3, [r7, #6]
 80110e0:	9302      	str	r3, [sp, #8]
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	9301      	str	r3, [sp, #4]
 80110e6:	2301      	movs	r3, #1
 80110e8:	9300      	str	r3, [sp, #0]
 80110ea:	2300      	movs	r3, #0
 80110ec:	2200      	movs	r2, #0
 80110ee:	68f8      	ldr	r0, [r7, #12]
 80110f0:	f000 fb07 	bl	8011702 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80110f4:	2300      	movs	r3, #0
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3710      	adds	r7, #16
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}

080110fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80110fe:	b580      	push	{r7, lr}
 8011100:	b088      	sub	sp, #32
 8011102:	af04      	add	r7, sp, #16
 8011104:	60f8      	str	r0, [r7, #12]
 8011106:	60b9      	str	r1, [r7, #8]
 8011108:	4611      	mov	r1, r2
 801110a:	461a      	mov	r2, r3
 801110c:	460b      	mov	r3, r1
 801110e:	80fb      	strh	r3, [r7, #6]
 8011110:	4613      	mov	r3, r2
 8011112:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011114:	7979      	ldrb	r1, [r7, #5]
 8011116:	2300      	movs	r3, #0
 8011118:	9303      	str	r3, [sp, #12]
 801111a:	88fb      	ldrh	r3, [r7, #6]
 801111c:	9302      	str	r3, [sp, #8]
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	9301      	str	r3, [sp, #4]
 8011122:	2301      	movs	r3, #1
 8011124:	9300      	str	r3, [sp, #0]
 8011126:	2300      	movs	r3, #0
 8011128:	2201      	movs	r2, #1
 801112a:	68f8      	ldr	r0, [r7, #12]
 801112c:	f000 fae9 	bl	8011702 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011130:	2300      	movs	r3, #0

}
 8011132:	4618      	mov	r0, r3
 8011134:	3710      	adds	r7, #16
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}

0801113a <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 801113a:	b580      	push	{r7, lr}
 801113c:	b088      	sub	sp, #32
 801113e:	af04      	add	r7, sp, #16
 8011140:	60f8      	str	r0, [r7, #12]
 8011142:	60b9      	str	r1, [r7, #8]
 8011144:	4611      	mov	r1, r2
 8011146:	461a      	mov	r2, r3
 8011148:	460b      	mov	r3, r1
 801114a:	71fb      	strb	r3, [r7, #7]
 801114c:	4613      	mov	r3, r2
 801114e:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011150:	79fb      	ldrb	r3, [r7, #7]
 8011152:	b29b      	uxth	r3, r3
 8011154:	79b9      	ldrb	r1, [r7, #6]
 8011156:	2200      	movs	r2, #0
 8011158:	9203      	str	r2, [sp, #12]
 801115a:	9302      	str	r3, [sp, #8]
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	9301      	str	r3, [sp, #4]
 8011160:	2301      	movs	r3, #1
 8011162:	9300      	str	r3, [sp, #0]
 8011164:	2303      	movs	r3, #3
 8011166:	2201      	movs	r2, #1
 8011168:	68f8      	ldr	r0, [r7, #12]
 801116a:	f000 faca 	bl	8011702 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 801116e:	2300      	movs	r3, #0
}
 8011170:	4618      	mov	r0, r3
 8011172:	3710      	adds	r7, #16
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}

08011178 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b086      	sub	sp, #24
 801117c:	af04      	add	r7, sp, #16
 801117e:	6078      	str	r0, [r7, #4]
 8011180:	4608      	mov	r0, r1
 8011182:	4611      	mov	r1, r2
 8011184:	461a      	mov	r2, r3
 8011186:	4603      	mov	r3, r0
 8011188:	70fb      	strb	r3, [r7, #3]
 801118a:	460b      	mov	r3, r1
 801118c:	70bb      	strb	r3, [r7, #2]
 801118e:	4613      	mov	r3, r2
 8011190:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8011192:	7878      	ldrb	r0, [r7, #1]
 8011194:	78ba      	ldrb	r2, [r7, #2]
 8011196:	78f9      	ldrb	r1, [r7, #3]
 8011198:	8b3b      	ldrh	r3, [r7, #24]
 801119a:	9302      	str	r3, [sp, #8]
 801119c:	7d3b      	ldrb	r3, [r7, #20]
 801119e:	9301      	str	r3, [sp, #4]
 80111a0:	7c3b      	ldrb	r3, [r7, #16]
 80111a2:	9300      	str	r3, [sp, #0]
 80111a4:	4603      	mov	r3, r0
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f000 fa5d 	bl	8011666 <USBH_LL_OpenPipe>

  return USBH_OK;
 80111ac:	2300      	movs	r3, #0
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	3708      	adds	r7, #8
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}

080111b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80111b6:	b580      	push	{r7, lr}
 80111b8:	b082      	sub	sp, #8
 80111ba:	af00      	add	r7, sp, #0
 80111bc:	6078      	str	r0, [r7, #4]
 80111be:	460b      	mov	r3, r1
 80111c0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80111c2:	78fb      	ldrb	r3, [r7, #3]
 80111c4:	4619      	mov	r1, r3
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f000 fa7c 	bl	80116c4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80111cc:	2300      	movs	r3, #0
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3708      	adds	r7, #8
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}

080111d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80111d6:	b580      	push	{r7, lr}
 80111d8:	b084      	sub	sp, #16
 80111da:	af00      	add	r7, sp, #0
 80111dc:	6078      	str	r0, [r7, #4]
 80111de:	460b      	mov	r3, r1
 80111e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f000 f839 	bl	801125a <USBH_GetFreePipe>
 80111e8:	4603      	mov	r3, r0
 80111ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80111ec:	89fb      	ldrh	r3, [r7, #14]
 80111ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80111f2:	4293      	cmp	r3, r2
 80111f4:	d00b      	beq.n	801120e <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80111f6:	78fa      	ldrb	r2, [r7, #3]
 80111f8:	89fb      	ldrh	r3, [r7, #14]
 80111fa:	f003 030f 	and.w	r3, r3, #15
 80111fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011202:	6879      	ldr	r1, [r7, #4]
 8011204:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011208:	009b      	lsls	r3, r3, #2
 801120a:	440b      	add	r3, r1
 801120c:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801120e:	89fb      	ldrh	r3, [r7, #14]
 8011210:	b2db      	uxtb	r3, r3
}
 8011212:	4618      	mov	r0, r3
 8011214:	3710      	adds	r7, #16
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801121a:	b480      	push	{r7}
 801121c:	b083      	sub	sp, #12
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
 8011222:	460b      	mov	r3, r1
 8011224:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8011226:	78fb      	ldrb	r3, [r7, #3]
 8011228:	2b0f      	cmp	r3, #15
 801122a:	d80f      	bhi.n	801124c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801122c:	78fb      	ldrb	r3, [r7, #3]
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011234:	009b      	lsls	r3, r3, #2
 8011236:	4413      	add	r3, r2
 8011238:	685a      	ldr	r2, [r3, #4]
 801123a:	78fb      	ldrb	r3, [r7, #3]
 801123c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011240:	6879      	ldr	r1, [r7, #4]
 8011242:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011246:	009b      	lsls	r3, r3, #2
 8011248:	440b      	add	r3, r1
 801124a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801124c:	2300      	movs	r3, #0
}
 801124e:	4618      	mov	r0, r3
 8011250:	370c      	adds	r7, #12
 8011252:	46bd      	mov	sp, r7
 8011254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011258:	4770      	bx	lr

0801125a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801125a:	b480      	push	{r7}
 801125c:	b085      	sub	sp, #20
 801125e:	af00      	add	r7, sp, #0
 8011260:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011262:	2300      	movs	r3, #0
 8011264:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011266:	2300      	movs	r3, #0
 8011268:	73fb      	strb	r3, [r7, #15]
 801126a:	e010      	b.n	801128e <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801126c:	7bfb      	ldrb	r3, [r7, #15]
 801126e:	687a      	ldr	r2, [r7, #4]
 8011270:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011274:	009b      	lsls	r3, r3, #2
 8011276:	4413      	add	r3, r2
 8011278:	685b      	ldr	r3, [r3, #4]
 801127a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801127e:	2b00      	cmp	r3, #0
 8011280:	d102      	bne.n	8011288 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8011282:	7bfb      	ldrb	r3, [r7, #15]
 8011284:	b29b      	uxth	r3, r3
 8011286:	e007      	b.n	8011298 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011288:	7bfb      	ldrb	r3, [r7, #15]
 801128a:	3301      	adds	r3, #1
 801128c:	73fb      	strb	r3, [r7, #15]
 801128e:	7bfb      	ldrb	r3, [r7, #15]
 8011290:	2b0f      	cmp	r3, #15
 8011292:	d9eb      	bls.n	801126c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011294:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8011298:	4618      	mov	r0, r3
 801129a:	3714      	adds	r7, #20
 801129c:	46bd      	mov	sp, r7
 801129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a2:	4770      	bx	lr

080112a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 80112a8:	2200      	movs	r2, #0
 80112aa:	490e      	ldr	r1, [pc, #56]	@ (80112e4 <MX_USB_HOST_Init+0x40>)
 80112ac:	480e      	ldr	r0, [pc, #56]	@ (80112e8 <MX_USB_HOST_Init+0x44>)
 80112ae:	f7fe f933 	bl	800f518 <USBH_Init>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d001      	beq.n	80112bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80112b8:	f7f1 fbe2 	bl	8002a80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASS) != USBH_OK)
 80112bc:	490b      	ldr	r1, [pc, #44]	@ (80112ec <MX_USB_HOST_Init+0x48>)
 80112be:	480a      	ldr	r0, [pc, #40]	@ (80112e8 <MX_USB_HOST_Init+0x44>)
 80112c0:	f7fe f9e8 	bl	800f694 <USBH_RegisterClass>
 80112c4:	4603      	mov	r3, r0
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d001      	beq.n	80112ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80112ca:	f7f1 fbd9 	bl	8002a80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80112ce:	4806      	ldr	r0, [pc, #24]	@ (80112e8 <MX_USB_HOST_Init+0x44>)
 80112d0:	f7fe fad0 	bl	800f874 <USBH_Start>
 80112d4:	4603      	mov	r3, r0
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d001      	beq.n	80112de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80112da:	f7f1 fbd1 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80112de:	bf00      	nop
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	08011305 	.word	0x08011305
 80112e8:	20009304 	.word	0x20009304
 80112ec:	20000270 	.word	0x20000270

080112f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 80112f4:	4802      	ldr	r0, [pc, #8]	@ (8011300 <MX_USB_HOST_Process+0x10>)
 80112f6:	f7fe facd 	bl	800f894 <USBH_Process>
}
 80112fa:	bf00      	nop
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	20009304 	.word	0x20009304

08011304 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011304:	b480      	push	{r7}
 8011306:	b083      	sub	sp, #12
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	460b      	mov	r3, r1
 801130e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011310:	78fb      	ldrb	r3, [r7, #3]
 8011312:	3b01      	subs	r3, #1
 8011314:	2b04      	cmp	r3, #4
 8011316:	d819      	bhi.n	801134c <USBH_UserProcess+0x48>
 8011318:	a201      	add	r2, pc, #4	@ (adr r2, 8011320 <USBH_UserProcess+0x1c>)
 801131a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801131e:	bf00      	nop
 8011320:	0801134d 	.word	0x0801134d
 8011324:	0801133d 	.word	0x0801133d
 8011328:	0801134d 	.word	0x0801134d
 801132c:	08011345 	.word	0x08011345
 8011330:	08011335 	.word	0x08011335
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011334:	4b09      	ldr	r3, [pc, #36]	@ (801135c <USBH_UserProcess+0x58>)
 8011336:	2203      	movs	r2, #3
 8011338:	701a      	strb	r2, [r3, #0]
  break;
 801133a:	e008      	b.n	801134e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801133c:	4b07      	ldr	r3, [pc, #28]	@ (801135c <USBH_UserProcess+0x58>)
 801133e:	2202      	movs	r2, #2
 8011340:	701a      	strb	r2, [r3, #0]
  break;
 8011342:	e004      	b.n	801134e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011344:	4b05      	ldr	r3, [pc, #20]	@ (801135c <USBH_UserProcess+0x58>)
 8011346:	2201      	movs	r2, #1
 8011348:	701a      	strb	r2, [r3, #0]
  break;
 801134a:	e000      	b.n	801134e <USBH_UserProcess+0x4a>

  default:
  break;
 801134c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801134e:	bf00      	nop
 8011350:	370c      	adds	r7, #12
 8011352:	46bd      	mov	sp, r7
 8011354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop
 801135c:	2000a094 	.word	0x2000a094

08011360 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b08a      	sub	sp, #40	@ 0x28
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011368:	f107 0314 	add.w	r3, r7, #20
 801136c:	2200      	movs	r2, #0
 801136e:	601a      	str	r2, [r3, #0]
 8011370:	605a      	str	r2, [r3, #4]
 8011372:	609a      	str	r2, [r3, #8]
 8011374:	60da      	str	r2, [r3, #12]
 8011376:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	4a24      	ldr	r2, [pc, #144]	@ (8011410 <HAL_HCD_MspInit+0xb0>)
 801137e:	4293      	cmp	r3, r2
 8011380:	d141      	bne.n	8011406 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011382:	2300      	movs	r3, #0
 8011384:	613b      	str	r3, [r7, #16]
 8011386:	4b23      	ldr	r3, [pc, #140]	@ (8011414 <HAL_HCD_MspInit+0xb4>)
 8011388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801138a:	4a22      	ldr	r2, [pc, #136]	@ (8011414 <HAL_HCD_MspInit+0xb4>)
 801138c:	f043 0302 	orr.w	r3, r3, #2
 8011390:	6313      	str	r3, [r2, #48]	@ 0x30
 8011392:	4b20      	ldr	r3, [pc, #128]	@ (8011414 <HAL_HCD_MspInit+0xb4>)
 8011394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011396:	f003 0302 	and.w	r3, r3, #2
 801139a:	613b      	str	r3, [r7, #16]
 801139c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 801139e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80113a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113a4:	2302      	movs	r3, #2
 80113a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113a8:	2300      	movs	r3, #0
 80113aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80113ac:	2300      	movs	r3, #0
 80113ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80113b0:	230c      	movs	r3, #12
 80113b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80113b4:	f107 0314 	add.w	r3, r7, #20
 80113b8:	4619      	mov	r1, r3
 80113ba:	4817      	ldr	r0, [pc, #92]	@ (8011418 <HAL_HCD_MspInit+0xb8>)
 80113bc:	f7f5 f8ea 	bl	8006594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80113c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80113c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80113c6:	2300      	movs	r3, #0
 80113c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113ca:	2300      	movs	r3, #0
 80113cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80113ce:	f107 0314 	add.w	r3, r7, #20
 80113d2:	4619      	mov	r1, r3
 80113d4:	4810      	ldr	r0, [pc, #64]	@ (8011418 <HAL_HCD_MspInit+0xb8>)
 80113d6:	f7f5 f8dd 	bl	8006594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80113da:	2300      	movs	r3, #0
 80113dc:	60fb      	str	r3, [r7, #12]
 80113de:	4b0d      	ldr	r3, [pc, #52]	@ (8011414 <HAL_HCD_MspInit+0xb4>)
 80113e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113e2:	4a0c      	ldr	r2, [pc, #48]	@ (8011414 <HAL_HCD_MspInit+0xb4>)
 80113e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80113e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80113ea:	4b0a      	ldr	r3, [pc, #40]	@ (8011414 <HAL_HCD_MspInit+0xb4>)
 80113ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80113f2:	60fb      	str	r3, [r7, #12]
 80113f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80113f6:	2200      	movs	r2, #0
 80113f8:	2100      	movs	r1, #0
 80113fa:	204d      	movs	r0, #77	@ 0x4d
 80113fc:	f7f4 f916 	bl	800562c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8011400:	204d      	movs	r0, #77	@ 0x4d
 8011402:	f7f4 f92f 	bl	8005664 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8011406:	bf00      	nop
 8011408:	3728      	adds	r7, #40	@ 0x28
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	40040000 	.word	0x40040000
 8011414:	40023800 	.word	0x40023800
 8011418:	40020400 	.word	0x40020400

0801141c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b082      	sub	sp, #8
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801142a:	4618      	mov	r0, r3
 801142c:	f7fe ff5d 	bl	80102ea <USBH_LL_IncTimer>
}
 8011430:	bf00      	nop
 8011432:	3708      	adds	r7, #8
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011446:	4618      	mov	r0, r3
 8011448:	f7fe ff95 	bl	8010376 <USBH_LL_Connect>
}
 801144c:	bf00      	nop
 801144e:	3708      	adds	r7, #8
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011462:	4618      	mov	r0, r3
 8011464:	f7fe ff9e 	bl	80103a4 <USBH_LL_Disconnect>
}
 8011468:	bf00      	nop
 801146a:	3708      	adds	r7, #8
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011470:	b480      	push	{r7}
 8011472:	b083      	sub	sp, #12
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	460b      	mov	r3, r1
 801147a:	70fb      	strb	r3, [r7, #3]
 801147c:	4613      	mov	r3, r2
 801147e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011480:	bf00      	nop
 8011482:	370c      	adds	r7, #12
 8011484:	46bd      	mov	sp, r7
 8011486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148a:	4770      	bx	lr

0801148c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b082      	sub	sp, #8
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801149a:	4618      	mov	r0, r3
 801149c:	f7fe ff4f 	bl	801033e <USBH_LL_PortEnabled>
}
 80114a0:	bf00      	nop
 80114a2:	3708      	adds	r7, #8
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}

080114a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7fe ff4f 	bl	801035a <USBH_LL_PortDisabled>
}
 80114bc:	bf00      	nop
 80114be:	3708      	adds	r7, #8
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b082      	sub	sp, #8
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d132      	bne.n	801153c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80114d6:	4a1c      	ldr	r2, [pc, #112]	@ (8011548 <USBH_LL_Init+0x84>)
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	4a19      	ldr	r2, [pc, #100]	@ (8011548 <USBH_LL_Init+0x84>)
 80114e2:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80114e6:	4b18      	ldr	r3, [pc, #96]	@ (8011548 <USBH_LL_Init+0x84>)
 80114e8:	4a18      	ldr	r2, [pc, #96]	@ (801154c <USBH_LL_Init+0x88>)
 80114ea:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80114ec:	4b16      	ldr	r3, [pc, #88]	@ (8011548 <USBH_LL_Init+0x84>)
 80114ee:	220c      	movs	r2, #12
 80114f0:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80114f2:	4b15      	ldr	r3, [pc, #84]	@ (8011548 <USBH_LL_Init+0x84>)
 80114f4:	2201      	movs	r2, #1
 80114f6:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80114f8:	4b13      	ldr	r3, [pc, #76]	@ (8011548 <USBH_LL_Init+0x84>)
 80114fa:	2200      	movs	r2, #0
 80114fc:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80114fe:	4b12      	ldr	r3, [pc, #72]	@ (8011548 <USBH_LL_Init+0x84>)
 8011500:	2202      	movs	r2, #2
 8011502:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8011504:	4b10      	ldr	r3, [pc, #64]	@ (8011548 <USBH_LL_Init+0x84>)
 8011506:	2200      	movs	r2, #0
 8011508:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801150a:	4b0f      	ldr	r3, [pc, #60]	@ (8011548 <USBH_LL_Init+0x84>)
 801150c:	2200      	movs	r2, #0
 801150e:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8011510:	4b0d      	ldr	r3, [pc, #52]	@ (8011548 <USBH_LL_Init+0x84>)
 8011512:	2200      	movs	r2, #0
 8011514:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8011516:	4b0c      	ldr	r3, [pc, #48]	@ (8011548 <USBH_LL_Init+0x84>)
 8011518:	2200      	movs	r2, #0
 801151a:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 801151c:	480a      	ldr	r0, [pc, #40]	@ (8011548 <USBH_LL_Init+0x84>)
 801151e:	f7f5 fb0a 	bl	8006b36 <HAL_HCD_Init>
 8011522:	4603      	mov	r3, r0
 8011524:	2b00      	cmp	r3, #0
 8011526:	d001      	beq.n	801152c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8011528:	f7f1 faaa 	bl	8002a80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 801152c:	4806      	ldr	r0, [pc, #24]	@ (8011548 <USBH_LL_Init+0x84>)
 801152e:	f7f5 ff6b 	bl	8007408 <HAL_HCD_GetCurrentFrame>
 8011532:	4603      	mov	r3, r0
 8011534:	4619      	mov	r1, r3
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f7fe fec8 	bl	80102cc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801153c:	2300      	movs	r3, #0
}
 801153e:	4618      	mov	r0, r3
 8011540:	3708      	adds	r7, #8
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}
 8011546:	bf00      	nop
 8011548:	2000a098 	.word	0x2000a098
 801154c:	40040000 	.word	0x40040000

08011550 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b084      	sub	sp, #16
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011558:	2300      	movs	r3, #0
 801155a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801155c:	2300      	movs	r3, #0
 801155e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8011566:	4618      	mov	r0, r3
 8011568:	f7f5 fed6 	bl	8007318 <HAL_HCD_Start>
 801156c:	4603      	mov	r3, r0
 801156e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011570:	7bfb      	ldrb	r3, [r7, #15]
 8011572:	4618      	mov	r0, r3
 8011574:	f000 f95e 	bl	8011834 <USBH_Get_USB_Status>
 8011578:	4603      	mov	r3, r0
 801157a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801157c:	7bbb      	ldrb	r3, [r7, #14]
}
 801157e:	4618      	mov	r0, r3
 8011580:	3710      	adds	r7, #16
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}

08011586 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011586:	b580      	push	{r7, lr}
 8011588:	b084      	sub	sp, #16
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801158e:	2300      	movs	r3, #0
 8011590:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011592:	2300      	movs	r3, #0
 8011594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 801159c:	4618      	mov	r0, r3
 801159e:	f7f5 fede 	bl	800735e <HAL_HCD_Stop>
 80115a2:	4603      	mov	r3, r0
 80115a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80115a6:	7bfb      	ldrb	r3, [r7, #15]
 80115a8:	4618      	mov	r0, r3
 80115aa:	f000 f943 	bl	8011834 <USBH_Get_USB_Status>
 80115ae:	4603      	mov	r3, r0
 80115b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	3710      	adds	r7, #16
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b084      	sub	sp, #16
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80115c4:	2301      	movs	r3, #1
 80115c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7f5 ff28 	bl	8007424 <HAL_HCD_GetCurrentSpeed>
 80115d4:	4603      	mov	r3, r0
 80115d6:	2b02      	cmp	r3, #2
 80115d8:	d00c      	beq.n	80115f4 <USBH_LL_GetSpeed+0x38>
 80115da:	2b02      	cmp	r3, #2
 80115dc:	d80d      	bhi.n	80115fa <USBH_LL_GetSpeed+0x3e>
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d002      	beq.n	80115e8 <USBH_LL_GetSpeed+0x2c>
 80115e2:	2b01      	cmp	r3, #1
 80115e4:	d003      	beq.n	80115ee <USBH_LL_GetSpeed+0x32>
 80115e6:	e008      	b.n	80115fa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80115e8:	2300      	movs	r3, #0
 80115ea:	73fb      	strb	r3, [r7, #15]
    break;
 80115ec:	e008      	b.n	8011600 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80115ee:	2301      	movs	r3, #1
 80115f0:	73fb      	strb	r3, [r7, #15]
    break;
 80115f2:	e005      	b.n	8011600 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80115f4:	2302      	movs	r3, #2
 80115f6:	73fb      	strb	r3, [r7, #15]
    break;
 80115f8:	e002      	b.n	8011600 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80115fa:	2301      	movs	r3, #1
 80115fc:	73fb      	strb	r3, [r7, #15]
    break;
 80115fe:	bf00      	nop
  }
  return  speed;
 8011600:	7bfb      	ldrb	r3, [r7, #15]
}
 8011602:	4618      	mov	r0, r3
 8011604:	3710      	adds	r7, #16
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}

0801160a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801160a:	b580      	push	{r7, lr}
 801160c:	b084      	sub	sp, #16
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011612:	2300      	movs	r3, #0
 8011614:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011616:	2300      	movs	r3, #0
 8011618:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8011620:	4618      	mov	r0, r3
 8011622:	f7f5 feb9 	bl	8007398 <HAL_HCD_ResetPort>
 8011626:	4603      	mov	r3, r0
 8011628:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801162a:	7bfb      	ldrb	r3, [r7, #15]
 801162c:	4618      	mov	r0, r3
 801162e:	f000 f901 	bl	8011834 <USBH_Get_USB_Status>
 8011632:	4603      	mov	r3, r0
 8011634:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011636:	7bbb      	ldrb	r3, [r7, #14]
}
 8011638:	4618      	mov	r0, r3
 801163a:	3710      	adds	r7, #16
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b082      	sub	sp, #8
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	460b      	mov	r3, r1
 801164a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8011652:	78fa      	ldrb	r2, [r7, #3]
 8011654:	4611      	mov	r1, r2
 8011656:	4618      	mov	r0, r3
 8011658:	f7f5 fec1 	bl	80073de <HAL_HCD_HC_GetXferCount>
 801165c:	4603      	mov	r3, r0
}
 801165e:	4618      	mov	r0, r3
 8011660:	3708      	adds	r7, #8
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}

08011666 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011666:	b590      	push	{r4, r7, lr}
 8011668:	b089      	sub	sp, #36	@ 0x24
 801166a:	af04      	add	r7, sp, #16
 801166c:	6078      	str	r0, [r7, #4]
 801166e:	4608      	mov	r0, r1
 8011670:	4611      	mov	r1, r2
 8011672:	461a      	mov	r2, r3
 8011674:	4603      	mov	r3, r0
 8011676:	70fb      	strb	r3, [r7, #3]
 8011678:	460b      	mov	r3, r1
 801167a:	70bb      	strb	r3, [r7, #2]
 801167c:	4613      	mov	r3, r2
 801167e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011680:	2300      	movs	r3, #0
 8011682:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011684:	2300      	movs	r3, #0
 8011686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 801168e:	787c      	ldrb	r4, [r7, #1]
 8011690:	78ba      	ldrb	r2, [r7, #2]
 8011692:	78f9      	ldrb	r1, [r7, #3]
 8011694:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011696:	9302      	str	r3, [sp, #8]
 8011698:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801169c:	9301      	str	r3, [sp, #4]
 801169e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80116a2:	9300      	str	r3, [sp, #0]
 80116a4:	4623      	mov	r3, r4
 80116a6:	f7f5 faad 	bl	8006c04 <HAL_HCD_HC_Init>
 80116aa:	4603      	mov	r3, r0
 80116ac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80116ae:	7bfb      	ldrb	r3, [r7, #15]
 80116b0:	4618      	mov	r0, r3
 80116b2:	f000 f8bf 	bl	8011834 <USBH_Get_USB_Status>
 80116b6:	4603      	mov	r3, r0
 80116b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3714      	adds	r7, #20
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd90      	pop	{r4, r7, pc}

080116c4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b084      	sub	sp, #16
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	460b      	mov	r3, r1
 80116ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116d0:	2300      	movs	r3, #0
 80116d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80116d4:	2300      	movs	r3, #0
 80116d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 80116de:	78fa      	ldrb	r2, [r7, #3]
 80116e0:	4611      	mov	r1, r2
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7f5 fb46 	bl	8006d74 <HAL_HCD_HC_Halt>
 80116e8:	4603      	mov	r3, r0
 80116ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80116ec:	7bfb      	ldrb	r3, [r7, #15]
 80116ee:	4618      	mov	r0, r3
 80116f0:	f000 f8a0 	bl	8011834 <USBH_Get_USB_Status>
 80116f4:	4603      	mov	r3, r0
 80116f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}

08011702 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011702:	b590      	push	{r4, r7, lr}
 8011704:	b089      	sub	sp, #36	@ 0x24
 8011706:	af04      	add	r7, sp, #16
 8011708:	6078      	str	r0, [r7, #4]
 801170a:	4608      	mov	r0, r1
 801170c:	4611      	mov	r1, r2
 801170e:	461a      	mov	r2, r3
 8011710:	4603      	mov	r3, r0
 8011712:	70fb      	strb	r3, [r7, #3]
 8011714:	460b      	mov	r3, r1
 8011716:	70bb      	strb	r3, [r7, #2]
 8011718:	4613      	mov	r3, r2
 801171a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801171c:	2300      	movs	r3, #0
 801171e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011720:	2300      	movs	r3, #0
 8011722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 801172a:	787c      	ldrb	r4, [r7, #1]
 801172c:	78ba      	ldrb	r2, [r7, #2]
 801172e:	78f9      	ldrb	r1, [r7, #3]
 8011730:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011734:	9303      	str	r3, [sp, #12]
 8011736:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011738:	9302      	str	r3, [sp, #8]
 801173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801173c:	9301      	str	r3, [sp, #4]
 801173e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011742:	9300      	str	r3, [sp, #0]
 8011744:	4623      	mov	r3, r4
 8011746:	f7f5 fb39 	bl	8006dbc <HAL_HCD_HC_SubmitRequest>
 801174a:	4603      	mov	r3, r0
 801174c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801174e:	7bfb      	ldrb	r3, [r7, #15]
 8011750:	4618      	mov	r0, r3
 8011752:	f000 f86f 	bl	8011834 <USBH_Get_USB_Status>
 8011756:	4603      	mov	r3, r0
 8011758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801175a:	7bbb      	ldrb	r3, [r7, #14]
}
 801175c:	4618      	mov	r0, r3
 801175e:	3714      	adds	r7, #20
 8011760:	46bd      	mov	sp, r7
 8011762:	bd90      	pop	{r4, r7, pc}

08011764 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	460b      	mov	r3, r1
 801176e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8011776:	78fa      	ldrb	r2, [r7, #3]
 8011778:	4611      	mov	r1, r2
 801177a:	4618      	mov	r0, r3
 801177c:	f7f5 fe1a 	bl	80073b4 <HAL_HCD_HC_GetURBState>
 8011780:	4603      	mov	r3, r0
}
 8011782:	4618      	mov	r0, r3
 8011784:	3708      	adds	r7, #8
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}

0801178a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801178a:	b580      	push	{r7, lr}
 801178c:	b082      	sub	sp, #8
 801178e:	af00      	add	r7, sp, #0
 8011790:	6078      	str	r0, [r7, #4]
 8011792:	460b      	mov	r3, r1
 8011794:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 801179c:	2b00      	cmp	r3, #0
 801179e:	d103      	bne.n	80117a8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 80117a0:	78fb      	ldrb	r3, [r7, #3]
 80117a2:	4618      	mov	r0, r3
 80117a4:	f000 f872 	bl	801188c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80117a8:	20c8      	movs	r0, #200	@ 0xc8
 80117aa:	f7f3 fe63 	bl	8005474 <HAL_Delay>
  return USBH_OK;
 80117ae:	2300      	movs	r3, #0
}
 80117b0:	4618      	mov	r0, r3
 80117b2:	3708      	adds	r7, #8
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}

080117b8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b085      	sub	sp, #20
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	460b      	mov	r3, r1
 80117c2:	70fb      	strb	r3, [r7, #3]
 80117c4:	4613      	mov	r3, r2
 80117c6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 80117ce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80117d0:	78fa      	ldrb	r2, [r7, #3]
 80117d2:	68f9      	ldr	r1, [r7, #12]
 80117d4:	4613      	mov	r3, r2
 80117d6:	011b      	lsls	r3, r3, #4
 80117d8:	1a9b      	subs	r3, r3, r2
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	440b      	add	r3, r1
 80117de:	3317      	adds	r3, #23
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d00a      	beq.n	80117fc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80117e6:	78fa      	ldrb	r2, [r7, #3]
 80117e8:	68f9      	ldr	r1, [r7, #12]
 80117ea:	4613      	mov	r3, r2
 80117ec:	011b      	lsls	r3, r3, #4
 80117ee:	1a9b      	subs	r3, r3, r2
 80117f0:	009b      	lsls	r3, r3, #2
 80117f2:	440b      	add	r3, r1
 80117f4:	333c      	adds	r3, #60	@ 0x3c
 80117f6:	78ba      	ldrb	r2, [r7, #2]
 80117f8:	701a      	strb	r2, [r3, #0]
 80117fa:	e009      	b.n	8011810 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80117fc:	78fa      	ldrb	r2, [r7, #3]
 80117fe:	68f9      	ldr	r1, [r7, #12]
 8011800:	4613      	mov	r3, r2
 8011802:	011b      	lsls	r3, r3, #4
 8011804:	1a9b      	subs	r3, r3, r2
 8011806:	009b      	lsls	r3, r3, #2
 8011808:	440b      	add	r3, r1
 801180a:	333d      	adds	r3, #61	@ 0x3d
 801180c:	78ba      	ldrb	r2, [r7, #2]
 801180e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011810:	2300      	movs	r3, #0
}
 8011812:	4618      	mov	r0, r3
 8011814:	3714      	adds	r7, #20
 8011816:	46bd      	mov	sp, r7
 8011818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181c:	4770      	bx	lr

0801181e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801181e:	b580      	push	{r7, lr}
 8011820:	b082      	sub	sp, #8
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f7f3 fe24 	bl	8005474 <HAL_Delay>
}
 801182c:	bf00      	nop
 801182e:	3708      	adds	r7, #8
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}

08011834 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011834:	b480      	push	{r7}
 8011836:	b085      	sub	sp, #20
 8011838:	af00      	add	r7, sp, #0
 801183a:	4603      	mov	r3, r0
 801183c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801183e:	2300      	movs	r3, #0
 8011840:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011842:	79fb      	ldrb	r3, [r7, #7]
 8011844:	2b03      	cmp	r3, #3
 8011846:	d817      	bhi.n	8011878 <USBH_Get_USB_Status+0x44>
 8011848:	a201      	add	r2, pc, #4	@ (adr r2, 8011850 <USBH_Get_USB_Status+0x1c>)
 801184a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801184e:	bf00      	nop
 8011850:	08011861 	.word	0x08011861
 8011854:	08011867 	.word	0x08011867
 8011858:	0801186d 	.word	0x0801186d
 801185c:	08011873 	.word	0x08011873
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011860:	2300      	movs	r3, #0
 8011862:	73fb      	strb	r3, [r7, #15]
    break;
 8011864:	e00b      	b.n	801187e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011866:	2302      	movs	r3, #2
 8011868:	73fb      	strb	r3, [r7, #15]
    break;
 801186a:	e008      	b.n	801187e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801186c:	2301      	movs	r3, #1
 801186e:	73fb      	strb	r3, [r7, #15]
    break;
 8011870:	e005      	b.n	801187e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011872:	2302      	movs	r3, #2
 8011874:	73fb      	strb	r3, [r7, #15]
    break;
 8011876:	e002      	b.n	801187e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011878:	2302      	movs	r3, #2
 801187a:	73fb      	strb	r3, [r7, #15]
    break;
 801187c:	bf00      	nop
  }
  return usb_status;
 801187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011880:	4618      	mov	r0, r3
 8011882:	3714      	adds	r7, #20
 8011884:	46bd      	mov	sp, r7
 8011886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188a:	4770      	bx	lr

0801188c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
 8011892:	4603      	mov	r3, r0
 8011894:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011896:	79fb      	ldrb	r3, [r7, #7]
 8011898:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 801189a:	79fb      	ldrb	r3, [r7, #7]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d102      	bne.n	80118a6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80118a0:	2301      	movs	r3, #1
 80118a2:	73fb      	strb	r3, [r7, #15]
 80118a4:	e001      	b.n	80118aa <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80118a6:	2300      	movs	r3, #0
 80118a8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 80118aa:	7bfb      	ldrb	r3, [r7, #15]
 80118ac:	461a      	mov	r2, r3
 80118ae:	2110      	movs	r1, #16
 80118b0:	4803      	ldr	r0, [pc, #12]	@ (80118c0 <MX_DriverVbusHS+0x34>)
 80118b2:	f7f5 f927 	bl	8006b04 <HAL_GPIO_WritePin>
}
 80118b6:	bf00      	nop
 80118b8:	3710      	adds	r7, #16
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
 80118be:	bf00      	nop
 80118c0:	40020800 	.word	0x40020800

080118c4 <malloc>:
 80118c4:	4b02      	ldr	r3, [pc, #8]	@ (80118d0 <malloc+0xc>)
 80118c6:	4601      	mov	r1, r0
 80118c8:	6818      	ldr	r0, [r3, #0]
 80118ca:	f000 b82d 	b.w	8011928 <_malloc_r>
 80118ce:	bf00      	nop
 80118d0:	2000029c 	.word	0x2000029c

080118d4 <free>:
 80118d4:	4b02      	ldr	r3, [pc, #8]	@ (80118e0 <free+0xc>)
 80118d6:	4601      	mov	r1, r0
 80118d8:	6818      	ldr	r0, [r3, #0]
 80118da:	f000 bb77 	b.w	8011fcc <_free_r>
 80118de:	bf00      	nop
 80118e0:	2000029c 	.word	0x2000029c

080118e4 <sbrk_aligned>:
 80118e4:	b570      	push	{r4, r5, r6, lr}
 80118e6:	4e0f      	ldr	r6, [pc, #60]	@ (8011924 <sbrk_aligned+0x40>)
 80118e8:	460c      	mov	r4, r1
 80118ea:	6831      	ldr	r1, [r6, #0]
 80118ec:	4605      	mov	r5, r0
 80118ee:	b911      	cbnz	r1, 80118f6 <sbrk_aligned+0x12>
 80118f0:	f000 fb14 	bl	8011f1c <_sbrk_r>
 80118f4:	6030      	str	r0, [r6, #0]
 80118f6:	4621      	mov	r1, r4
 80118f8:	4628      	mov	r0, r5
 80118fa:	f000 fb0f 	bl	8011f1c <_sbrk_r>
 80118fe:	1c43      	adds	r3, r0, #1
 8011900:	d103      	bne.n	801190a <sbrk_aligned+0x26>
 8011902:	f04f 34ff 	mov.w	r4, #4294967295
 8011906:	4620      	mov	r0, r4
 8011908:	bd70      	pop	{r4, r5, r6, pc}
 801190a:	1cc4      	adds	r4, r0, #3
 801190c:	f024 0403 	bic.w	r4, r4, #3
 8011910:	42a0      	cmp	r0, r4
 8011912:	d0f8      	beq.n	8011906 <sbrk_aligned+0x22>
 8011914:	1a21      	subs	r1, r4, r0
 8011916:	4628      	mov	r0, r5
 8011918:	f000 fb00 	bl	8011f1c <_sbrk_r>
 801191c:	3001      	adds	r0, #1
 801191e:	d1f2      	bne.n	8011906 <sbrk_aligned+0x22>
 8011920:	e7ef      	b.n	8011902 <sbrk_aligned+0x1e>
 8011922:	bf00      	nop
 8011924:	2000a478 	.word	0x2000a478

08011928 <_malloc_r>:
 8011928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801192c:	1ccd      	adds	r5, r1, #3
 801192e:	f025 0503 	bic.w	r5, r5, #3
 8011932:	3508      	adds	r5, #8
 8011934:	2d0c      	cmp	r5, #12
 8011936:	bf38      	it	cc
 8011938:	250c      	movcc	r5, #12
 801193a:	2d00      	cmp	r5, #0
 801193c:	4606      	mov	r6, r0
 801193e:	db01      	blt.n	8011944 <_malloc_r+0x1c>
 8011940:	42a9      	cmp	r1, r5
 8011942:	d904      	bls.n	801194e <_malloc_r+0x26>
 8011944:	230c      	movs	r3, #12
 8011946:	6033      	str	r3, [r6, #0]
 8011948:	2000      	movs	r0, #0
 801194a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801194e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011a24 <_malloc_r+0xfc>
 8011952:	f000 f869 	bl	8011a28 <__malloc_lock>
 8011956:	f8d8 3000 	ldr.w	r3, [r8]
 801195a:	461c      	mov	r4, r3
 801195c:	bb44      	cbnz	r4, 80119b0 <_malloc_r+0x88>
 801195e:	4629      	mov	r1, r5
 8011960:	4630      	mov	r0, r6
 8011962:	f7ff ffbf 	bl	80118e4 <sbrk_aligned>
 8011966:	1c43      	adds	r3, r0, #1
 8011968:	4604      	mov	r4, r0
 801196a:	d158      	bne.n	8011a1e <_malloc_r+0xf6>
 801196c:	f8d8 4000 	ldr.w	r4, [r8]
 8011970:	4627      	mov	r7, r4
 8011972:	2f00      	cmp	r7, #0
 8011974:	d143      	bne.n	80119fe <_malloc_r+0xd6>
 8011976:	2c00      	cmp	r4, #0
 8011978:	d04b      	beq.n	8011a12 <_malloc_r+0xea>
 801197a:	6823      	ldr	r3, [r4, #0]
 801197c:	4639      	mov	r1, r7
 801197e:	4630      	mov	r0, r6
 8011980:	eb04 0903 	add.w	r9, r4, r3
 8011984:	f000 faca 	bl	8011f1c <_sbrk_r>
 8011988:	4581      	cmp	r9, r0
 801198a:	d142      	bne.n	8011a12 <_malloc_r+0xea>
 801198c:	6821      	ldr	r1, [r4, #0]
 801198e:	1a6d      	subs	r5, r5, r1
 8011990:	4629      	mov	r1, r5
 8011992:	4630      	mov	r0, r6
 8011994:	f7ff ffa6 	bl	80118e4 <sbrk_aligned>
 8011998:	3001      	adds	r0, #1
 801199a:	d03a      	beq.n	8011a12 <_malloc_r+0xea>
 801199c:	6823      	ldr	r3, [r4, #0]
 801199e:	442b      	add	r3, r5
 80119a0:	6023      	str	r3, [r4, #0]
 80119a2:	f8d8 3000 	ldr.w	r3, [r8]
 80119a6:	685a      	ldr	r2, [r3, #4]
 80119a8:	bb62      	cbnz	r2, 8011a04 <_malloc_r+0xdc>
 80119aa:	f8c8 7000 	str.w	r7, [r8]
 80119ae:	e00f      	b.n	80119d0 <_malloc_r+0xa8>
 80119b0:	6822      	ldr	r2, [r4, #0]
 80119b2:	1b52      	subs	r2, r2, r5
 80119b4:	d420      	bmi.n	80119f8 <_malloc_r+0xd0>
 80119b6:	2a0b      	cmp	r2, #11
 80119b8:	d917      	bls.n	80119ea <_malloc_r+0xc2>
 80119ba:	1961      	adds	r1, r4, r5
 80119bc:	42a3      	cmp	r3, r4
 80119be:	6025      	str	r5, [r4, #0]
 80119c0:	bf18      	it	ne
 80119c2:	6059      	strne	r1, [r3, #4]
 80119c4:	6863      	ldr	r3, [r4, #4]
 80119c6:	bf08      	it	eq
 80119c8:	f8c8 1000 	streq.w	r1, [r8]
 80119cc:	5162      	str	r2, [r4, r5]
 80119ce:	604b      	str	r3, [r1, #4]
 80119d0:	4630      	mov	r0, r6
 80119d2:	f000 f82f 	bl	8011a34 <__malloc_unlock>
 80119d6:	f104 000b 	add.w	r0, r4, #11
 80119da:	1d23      	adds	r3, r4, #4
 80119dc:	f020 0007 	bic.w	r0, r0, #7
 80119e0:	1ac2      	subs	r2, r0, r3
 80119e2:	bf1c      	itt	ne
 80119e4:	1a1b      	subne	r3, r3, r0
 80119e6:	50a3      	strne	r3, [r4, r2]
 80119e8:	e7af      	b.n	801194a <_malloc_r+0x22>
 80119ea:	6862      	ldr	r2, [r4, #4]
 80119ec:	42a3      	cmp	r3, r4
 80119ee:	bf0c      	ite	eq
 80119f0:	f8c8 2000 	streq.w	r2, [r8]
 80119f4:	605a      	strne	r2, [r3, #4]
 80119f6:	e7eb      	b.n	80119d0 <_malloc_r+0xa8>
 80119f8:	4623      	mov	r3, r4
 80119fa:	6864      	ldr	r4, [r4, #4]
 80119fc:	e7ae      	b.n	801195c <_malloc_r+0x34>
 80119fe:	463c      	mov	r4, r7
 8011a00:	687f      	ldr	r7, [r7, #4]
 8011a02:	e7b6      	b.n	8011972 <_malloc_r+0x4a>
 8011a04:	461a      	mov	r2, r3
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	42a3      	cmp	r3, r4
 8011a0a:	d1fb      	bne.n	8011a04 <_malloc_r+0xdc>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	6053      	str	r3, [r2, #4]
 8011a10:	e7de      	b.n	80119d0 <_malloc_r+0xa8>
 8011a12:	230c      	movs	r3, #12
 8011a14:	6033      	str	r3, [r6, #0]
 8011a16:	4630      	mov	r0, r6
 8011a18:	f000 f80c 	bl	8011a34 <__malloc_unlock>
 8011a1c:	e794      	b.n	8011948 <_malloc_r+0x20>
 8011a1e:	6005      	str	r5, [r0, #0]
 8011a20:	e7d6      	b.n	80119d0 <_malloc_r+0xa8>
 8011a22:	bf00      	nop
 8011a24:	2000a47c 	.word	0x2000a47c

08011a28 <__malloc_lock>:
 8011a28:	4801      	ldr	r0, [pc, #4]	@ (8011a30 <__malloc_lock+0x8>)
 8011a2a:	f000 bac4 	b.w	8011fb6 <__retarget_lock_acquire_recursive>
 8011a2e:	bf00      	nop
 8011a30:	2000a5c0 	.word	0x2000a5c0

08011a34 <__malloc_unlock>:
 8011a34:	4801      	ldr	r0, [pc, #4]	@ (8011a3c <__malloc_unlock+0x8>)
 8011a36:	f000 babf 	b.w	8011fb8 <__retarget_lock_release_recursive>
 8011a3a:	bf00      	nop
 8011a3c:	2000a5c0 	.word	0x2000a5c0

08011a40 <std>:
 8011a40:	2300      	movs	r3, #0
 8011a42:	b510      	push	{r4, lr}
 8011a44:	4604      	mov	r4, r0
 8011a46:	e9c0 3300 	strd	r3, r3, [r0]
 8011a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a4e:	6083      	str	r3, [r0, #8]
 8011a50:	8181      	strh	r1, [r0, #12]
 8011a52:	6643      	str	r3, [r0, #100]	@ 0x64
 8011a54:	81c2      	strh	r2, [r0, #14]
 8011a56:	6183      	str	r3, [r0, #24]
 8011a58:	4619      	mov	r1, r3
 8011a5a:	2208      	movs	r2, #8
 8011a5c:	305c      	adds	r0, #92	@ 0x5c
 8011a5e:	f000 fa21 	bl	8011ea4 <memset>
 8011a62:	4b0d      	ldr	r3, [pc, #52]	@ (8011a98 <std+0x58>)
 8011a64:	6263      	str	r3, [r4, #36]	@ 0x24
 8011a66:	4b0d      	ldr	r3, [pc, #52]	@ (8011a9c <std+0x5c>)
 8011a68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8011aa0 <std+0x60>)
 8011a6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8011aa4 <std+0x64>)
 8011a70:	6323      	str	r3, [r4, #48]	@ 0x30
 8011a72:	4b0d      	ldr	r3, [pc, #52]	@ (8011aa8 <std+0x68>)
 8011a74:	6224      	str	r4, [r4, #32]
 8011a76:	429c      	cmp	r4, r3
 8011a78:	d006      	beq.n	8011a88 <std+0x48>
 8011a7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011a7e:	4294      	cmp	r4, r2
 8011a80:	d002      	beq.n	8011a88 <std+0x48>
 8011a82:	33d0      	adds	r3, #208	@ 0xd0
 8011a84:	429c      	cmp	r4, r3
 8011a86:	d105      	bne.n	8011a94 <std+0x54>
 8011a88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a90:	f000 ba90 	b.w	8011fb4 <__retarget_lock_init_recursive>
 8011a94:	bd10      	pop	{r4, pc}
 8011a96:	bf00      	nop
 8011a98:	08011cf5 	.word	0x08011cf5
 8011a9c:	08011d17 	.word	0x08011d17
 8011aa0:	08011d4f 	.word	0x08011d4f
 8011aa4:	08011d73 	.word	0x08011d73
 8011aa8:	2000a480 	.word	0x2000a480

08011aac <stdio_exit_handler>:
 8011aac:	4a02      	ldr	r2, [pc, #8]	@ (8011ab8 <stdio_exit_handler+0xc>)
 8011aae:	4903      	ldr	r1, [pc, #12]	@ (8011abc <stdio_exit_handler+0x10>)
 8011ab0:	4803      	ldr	r0, [pc, #12]	@ (8011ac0 <stdio_exit_handler+0x14>)
 8011ab2:	f000 b869 	b.w	8011b88 <_fwalk_sglue>
 8011ab6:	bf00      	nop
 8011ab8:	20000290 	.word	0x20000290
 8011abc:	080129b9 	.word	0x080129b9
 8011ac0:	200002a0 	.word	0x200002a0

08011ac4 <cleanup_stdio>:
 8011ac4:	6841      	ldr	r1, [r0, #4]
 8011ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8011af8 <cleanup_stdio+0x34>)
 8011ac8:	4299      	cmp	r1, r3
 8011aca:	b510      	push	{r4, lr}
 8011acc:	4604      	mov	r4, r0
 8011ace:	d001      	beq.n	8011ad4 <cleanup_stdio+0x10>
 8011ad0:	f000 ff72 	bl	80129b8 <_fflush_r>
 8011ad4:	68a1      	ldr	r1, [r4, #8]
 8011ad6:	4b09      	ldr	r3, [pc, #36]	@ (8011afc <cleanup_stdio+0x38>)
 8011ad8:	4299      	cmp	r1, r3
 8011ada:	d002      	beq.n	8011ae2 <cleanup_stdio+0x1e>
 8011adc:	4620      	mov	r0, r4
 8011ade:	f000 ff6b 	bl	80129b8 <_fflush_r>
 8011ae2:	68e1      	ldr	r1, [r4, #12]
 8011ae4:	4b06      	ldr	r3, [pc, #24]	@ (8011b00 <cleanup_stdio+0x3c>)
 8011ae6:	4299      	cmp	r1, r3
 8011ae8:	d004      	beq.n	8011af4 <cleanup_stdio+0x30>
 8011aea:	4620      	mov	r0, r4
 8011aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011af0:	f000 bf62 	b.w	80129b8 <_fflush_r>
 8011af4:	bd10      	pop	{r4, pc}
 8011af6:	bf00      	nop
 8011af8:	2000a480 	.word	0x2000a480
 8011afc:	2000a4e8 	.word	0x2000a4e8
 8011b00:	2000a550 	.word	0x2000a550

08011b04 <global_stdio_init.part.0>:
 8011b04:	b510      	push	{r4, lr}
 8011b06:	4b0b      	ldr	r3, [pc, #44]	@ (8011b34 <global_stdio_init.part.0+0x30>)
 8011b08:	4c0b      	ldr	r4, [pc, #44]	@ (8011b38 <global_stdio_init.part.0+0x34>)
 8011b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8011b3c <global_stdio_init.part.0+0x38>)
 8011b0c:	601a      	str	r2, [r3, #0]
 8011b0e:	4620      	mov	r0, r4
 8011b10:	2200      	movs	r2, #0
 8011b12:	2104      	movs	r1, #4
 8011b14:	f7ff ff94 	bl	8011a40 <std>
 8011b18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	2109      	movs	r1, #9
 8011b20:	f7ff ff8e 	bl	8011a40 <std>
 8011b24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011b28:	2202      	movs	r2, #2
 8011b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b2e:	2112      	movs	r1, #18
 8011b30:	f7ff bf86 	b.w	8011a40 <std>
 8011b34:	2000a5b8 	.word	0x2000a5b8
 8011b38:	2000a480 	.word	0x2000a480
 8011b3c:	08011aad 	.word	0x08011aad

08011b40 <__sfp_lock_acquire>:
 8011b40:	4801      	ldr	r0, [pc, #4]	@ (8011b48 <__sfp_lock_acquire+0x8>)
 8011b42:	f000 ba38 	b.w	8011fb6 <__retarget_lock_acquire_recursive>
 8011b46:	bf00      	nop
 8011b48:	2000a5c1 	.word	0x2000a5c1

08011b4c <__sfp_lock_release>:
 8011b4c:	4801      	ldr	r0, [pc, #4]	@ (8011b54 <__sfp_lock_release+0x8>)
 8011b4e:	f000 ba33 	b.w	8011fb8 <__retarget_lock_release_recursive>
 8011b52:	bf00      	nop
 8011b54:	2000a5c1 	.word	0x2000a5c1

08011b58 <__sinit>:
 8011b58:	b510      	push	{r4, lr}
 8011b5a:	4604      	mov	r4, r0
 8011b5c:	f7ff fff0 	bl	8011b40 <__sfp_lock_acquire>
 8011b60:	6a23      	ldr	r3, [r4, #32]
 8011b62:	b11b      	cbz	r3, 8011b6c <__sinit+0x14>
 8011b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b68:	f7ff bff0 	b.w	8011b4c <__sfp_lock_release>
 8011b6c:	4b04      	ldr	r3, [pc, #16]	@ (8011b80 <__sinit+0x28>)
 8011b6e:	6223      	str	r3, [r4, #32]
 8011b70:	4b04      	ldr	r3, [pc, #16]	@ (8011b84 <__sinit+0x2c>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d1f5      	bne.n	8011b64 <__sinit+0xc>
 8011b78:	f7ff ffc4 	bl	8011b04 <global_stdio_init.part.0>
 8011b7c:	e7f2      	b.n	8011b64 <__sinit+0xc>
 8011b7e:	bf00      	nop
 8011b80:	08011ac5 	.word	0x08011ac5
 8011b84:	2000a5b8 	.word	0x2000a5b8

08011b88 <_fwalk_sglue>:
 8011b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b8c:	4607      	mov	r7, r0
 8011b8e:	4688      	mov	r8, r1
 8011b90:	4614      	mov	r4, r2
 8011b92:	2600      	movs	r6, #0
 8011b94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b98:	f1b9 0901 	subs.w	r9, r9, #1
 8011b9c:	d505      	bpl.n	8011baa <_fwalk_sglue+0x22>
 8011b9e:	6824      	ldr	r4, [r4, #0]
 8011ba0:	2c00      	cmp	r4, #0
 8011ba2:	d1f7      	bne.n	8011b94 <_fwalk_sglue+0xc>
 8011ba4:	4630      	mov	r0, r6
 8011ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011baa:	89ab      	ldrh	r3, [r5, #12]
 8011bac:	2b01      	cmp	r3, #1
 8011bae:	d907      	bls.n	8011bc0 <_fwalk_sglue+0x38>
 8011bb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	d003      	beq.n	8011bc0 <_fwalk_sglue+0x38>
 8011bb8:	4629      	mov	r1, r5
 8011bba:	4638      	mov	r0, r7
 8011bbc:	47c0      	blx	r8
 8011bbe:	4306      	orrs	r6, r0
 8011bc0:	3568      	adds	r5, #104	@ 0x68
 8011bc2:	e7e9      	b.n	8011b98 <_fwalk_sglue+0x10>

08011bc4 <iprintf>:
 8011bc4:	b40f      	push	{r0, r1, r2, r3}
 8011bc6:	b507      	push	{r0, r1, r2, lr}
 8011bc8:	4906      	ldr	r1, [pc, #24]	@ (8011be4 <iprintf+0x20>)
 8011bca:	ab04      	add	r3, sp, #16
 8011bcc:	6808      	ldr	r0, [r1, #0]
 8011bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bd2:	6881      	ldr	r1, [r0, #8]
 8011bd4:	9301      	str	r3, [sp, #4]
 8011bd6:	f000 fbc5 	bl	8012364 <_vfiprintf_r>
 8011bda:	b003      	add	sp, #12
 8011bdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011be0:	b004      	add	sp, #16
 8011be2:	4770      	bx	lr
 8011be4:	2000029c 	.word	0x2000029c

08011be8 <putchar>:
 8011be8:	4b02      	ldr	r3, [pc, #8]	@ (8011bf4 <putchar+0xc>)
 8011bea:	4601      	mov	r1, r0
 8011bec:	6818      	ldr	r0, [r3, #0]
 8011bee:	6882      	ldr	r2, [r0, #8]
 8011bf0:	f000 bf6c 	b.w	8012acc <_putc_r>
 8011bf4:	2000029c 	.word	0x2000029c

08011bf8 <_puts_r>:
 8011bf8:	6a03      	ldr	r3, [r0, #32]
 8011bfa:	b570      	push	{r4, r5, r6, lr}
 8011bfc:	6884      	ldr	r4, [r0, #8]
 8011bfe:	4605      	mov	r5, r0
 8011c00:	460e      	mov	r6, r1
 8011c02:	b90b      	cbnz	r3, 8011c08 <_puts_r+0x10>
 8011c04:	f7ff ffa8 	bl	8011b58 <__sinit>
 8011c08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c0a:	07db      	lsls	r3, r3, #31
 8011c0c:	d405      	bmi.n	8011c1a <_puts_r+0x22>
 8011c0e:	89a3      	ldrh	r3, [r4, #12]
 8011c10:	0598      	lsls	r0, r3, #22
 8011c12:	d402      	bmi.n	8011c1a <_puts_r+0x22>
 8011c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c16:	f000 f9ce 	bl	8011fb6 <__retarget_lock_acquire_recursive>
 8011c1a:	89a3      	ldrh	r3, [r4, #12]
 8011c1c:	0719      	lsls	r1, r3, #28
 8011c1e:	d502      	bpl.n	8011c26 <_puts_r+0x2e>
 8011c20:	6923      	ldr	r3, [r4, #16]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d135      	bne.n	8011c92 <_puts_r+0x9a>
 8011c26:	4621      	mov	r1, r4
 8011c28:	4628      	mov	r0, r5
 8011c2a:	f000 f8e5 	bl	8011df8 <__swsetup_r>
 8011c2e:	b380      	cbz	r0, 8011c92 <_puts_r+0x9a>
 8011c30:	f04f 35ff 	mov.w	r5, #4294967295
 8011c34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c36:	07da      	lsls	r2, r3, #31
 8011c38:	d405      	bmi.n	8011c46 <_puts_r+0x4e>
 8011c3a:	89a3      	ldrh	r3, [r4, #12]
 8011c3c:	059b      	lsls	r3, r3, #22
 8011c3e:	d402      	bmi.n	8011c46 <_puts_r+0x4e>
 8011c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c42:	f000 f9b9 	bl	8011fb8 <__retarget_lock_release_recursive>
 8011c46:	4628      	mov	r0, r5
 8011c48:	bd70      	pop	{r4, r5, r6, pc}
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	da04      	bge.n	8011c58 <_puts_r+0x60>
 8011c4e:	69a2      	ldr	r2, [r4, #24]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	dc17      	bgt.n	8011c84 <_puts_r+0x8c>
 8011c54:	290a      	cmp	r1, #10
 8011c56:	d015      	beq.n	8011c84 <_puts_r+0x8c>
 8011c58:	6823      	ldr	r3, [r4, #0]
 8011c5a:	1c5a      	adds	r2, r3, #1
 8011c5c:	6022      	str	r2, [r4, #0]
 8011c5e:	7019      	strb	r1, [r3, #0]
 8011c60:	68a3      	ldr	r3, [r4, #8]
 8011c62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011c66:	3b01      	subs	r3, #1
 8011c68:	60a3      	str	r3, [r4, #8]
 8011c6a:	2900      	cmp	r1, #0
 8011c6c:	d1ed      	bne.n	8011c4a <_puts_r+0x52>
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	da11      	bge.n	8011c96 <_puts_r+0x9e>
 8011c72:	4622      	mov	r2, r4
 8011c74:	210a      	movs	r1, #10
 8011c76:	4628      	mov	r0, r5
 8011c78:	f000 f87f 	bl	8011d7a <__swbuf_r>
 8011c7c:	3001      	adds	r0, #1
 8011c7e:	d0d7      	beq.n	8011c30 <_puts_r+0x38>
 8011c80:	250a      	movs	r5, #10
 8011c82:	e7d7      	b.n	8011c34 <_puts_r+0x3c>
 8011c84:	4622      	mov	r2, r4
 8011c86:	4628      	mov	r0, r5
 8011c88:	f000 f877 	bl	8011d7a <__swbuf_r>
 8011c8c:	3001      	adds	r0, #1
 8011c8e:	d1e7      	bne.n	8011c60 <_puts_r+0x68>
 8011c90:	e7ce      	b.n	8011c30 <_puts_r+0x38>
 8011c92:	3e01      	subs	r6, #1
 8011c94:	e7e4      	b.n	8011c60 <_puts_r+0x68>
 8011c96:	6823      	ldr	r3, [r4, #0]
 8011c98:	1c5a      	adds	r2, r3, #1
 8011c9a:	6022      	str	r2, [r4, #0]
 8011c9c:	220a      	movs	r2, #10
 8011c9e:	701a      	strb	r2, [r3, #0]
 8011ca0:	e7ee      	b.n	8011c80 <_puts_r+0x88>
	...

08011ca4 <puts>:
 8011ca4:	4b02      	ldr	r3, [pc, #8]	@ (8011cb0 <puts+0xc>)
 8011ca6:	4601      	mov	r1, r0
 8011ca8:	6818      	ldr	r0, [r3, #0]
 8011caa:	f7ff bfa5 	b.w	8011bf8 <_puts_r>
 8011cae:	bf00      	nop
 8011cb0:	2000029c 	.word	0x2000029c

08011cb4 <siprintf>:
 8011cb4:	b40e      	push	{r1, r2, r3}
 8011cb6:	b500      	push	{lr}
 8011cb8:	b09c      	sub	sp, #112	@ 0x70
 8011cba:	ab1d      	add	r3, sp, #116	@ 0x74
 8011cbc:	9002      	str	r0, [sp, #8]
 8011cbe:	9006      	str	r0, [sp, #24]
 8011cc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011cc4:	4809      	ldr	r0, [pc, #36]	@ (8011cec <siprintf+0x38>)
 8011cc6:	9107      	str	r1, [sp, #28]
 8011cc8:	9104      	str	r1, [sp, #16]
 8011cca:	4909      	ldr	r1, [pc, #36]	@ (8011cf0 <siprintf+0x3c>)
 8011ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cd0:	9105      	str	r1, [sp, #20]
 8011cd2:	6800      	ldr	r0, [r0, #0]
 8011cd4:	9301      	str	r3, [sp, #4]
 8011cd6:	a902      	add	r1, sp, #8
 8011cd8:	f000 fa1e 	bl	8012118 <_svfiprintf_r>
 8011cdc:	9b02      	ldr	r3, [sp, #8]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	701a      	strb	r2, [r3, #0]
 8011ce2:	b01c      	add	sp, #112	@ 0x70
 8011ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ce8:	b003      	add	sp, #12
 8011cea:	4770      	bx	lr
 8011cec:	2000029c 	.word	0x2000029c
 8011cf0:	ffff0208 	.word	0xffff0208

08011cf4 <__sread>:
 8011cf4:	b510      	push	{r4, lr}
 8011cf6:	460c      	mov	r4, r1
 8011cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cfc:	f000 f8fc 	bl	8011ef8 <_read_r>
 8011d00:	2800      	cmp	r0, #0
 8011d02:	bfab      	itete	ge
 8011d04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011d06:	89a3      	ldrhlt	r3, [r4, #12]
 8011d08:	181b      	addge	r3, r3, r0
 8011d0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011d0e:	bfac      	ite	ge
 8011d10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011d12:	81a3      	strhlt	r3, [r4, #12]
 8011d14:	bd10      	pop	{r4, pc}

08011d16 <__swrite>:
 8011d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d1a:	461f      	mov	r7, r3
 8011d1c:	898b      	ldrh	r3, [r1, #12]
 8011d1e:	05db      	lsls	r3, r3, #23
 8011d20:	4605      	mov	r5, r0
 8011d22:	460c      	mov	r4, r1
 8011d24:	4616      	mov	r6, r2
 8011d26:	d505      	bpl.n	8011d34 <__swrite+0x1e>
 8011d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d2c:	2302      	movs	r3, #2
 8011d2e:	2200      	movs	r2, #0
 8011d30:	f000 f8d0 	bl	8011ed4 <_lseek_r>
 8011d34:	89a3      	ldrh	r3, [r4, #12]
 8011d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011d3e:	81a3      	strh	r3, [r4, #12]
 8011d40:	4632      	mov	r2, r6
 8011d42:	463b      	mov	r3, r7
 8011d44:	4628      	mov	r0, r5
 8011d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d4a:	f000 b8f7 	b.w	8011f3c <_write_r>

08011d4e <__sseek>:
 8011d4e:	b510      	push	{r4, lr}
 8011d50:	460c      	mov	r4, r1
 8011d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d56:	f000 f8bd 	bl	8011ed4 <_lseek_r>
 8011d5a:	1c43      	adds	r3, r0, #1
 8011d5c:	89a3      	ldrh	r3, [r4, #12]
 8011d5e:	bf15      	itete	ne
 8011d60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011d62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011d66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011d6a:	81a3      	strheq	r3, [r4, #12]
 8011d6c:	bf18      	it	ne
 8011d6e:	81a3      	strhne	r3, [r4, #12]
 8011d70:	bd10      	pop	{r4, pc}

08011d72 <__sclose>:
 8011d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d76:	f000 b89d 	b.w	8011eb4 <_close_r>

08011d7a <__swbuf_r>:
 8011d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d7c:	460e      	mov	r6, r1
 8011d7e:	4614      	mov	r4, r2
 8011d80:	4605      	mov	r5, r0
 8011d82:	b118      	cbz	r0, 8011d8c <__swbuf_r+0x12>
 8011d84:	6a03      	ldr	r3, [r0, #32]
 8011d86:	b90b      	cbnz	r3, 8011d8c <__swbuf_r+0x12>
 8011d88:	f7ff fee6 	bl	8011b58 <__sinit>
 8011d8c:	69a3      	ldr	r3, [r4, #24]
 8011d8e:	60a3      	str	r3, [r4, #8]
 8011d90:	89a3      	ldrh	r3, [r4, #12]
 8011d92:	071a      	lsls	r2, r3, #28
 8011d94:	d501      	bpl.n	8011d9a <__swbuf_r+0x20>
 8011d96:	6923      	ldr	r3, [r4, #16]
 8011d98:	b943      	cbnz	r3, 8011dac <__swbuf_r+0x32>
 8011d9a:	4621      	mov	r1, r4
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	f000 f82b 	bl	8011df8 <__swsetup_r>
 8011da2:	b118      	cbz	r0, 8011dac <__swbuf_r+0x32>
 8011da4:	f04f 37ff 	mov.w	r7, #4294967295
 8011da8:	4638      	mov	r0, r7
 8011daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dac:	6823      	ldr	r3, [r4, #0]
 8011dae:	6922      	ldr	r2, [r4, #16]
 8011db0:	1a98      	subs	r0, r3, r2
 8011db2:	6963      	ldr	r3, [r4, #20]
 8011db4:	b2f6      	uxtb	r6, r6
 8011db6:	4283      	cmp	r3, r0
 8011db8:	4637      	mov	r7, r6
 8011dba:	dc05      	bgt.n	8011dc8 <__swbuf_r+0x4e>
 8011dbc:	4621      	mov	r1, r4
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	f000 fdfa 	bl	80129b8 <_fflush_r>
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	d1ed      	bne.n	8011da4 <__swbuf_r+0x2a>
 8011dc8:	68a3      	ldr	r3, [r4, #8]
 8011dca:	3b01      	subs	r3, #1
 8011dcc:	60a3      	str	r3, [r4, #8]
 8011dce:	6823      	ldr	r3, [r4, #0]
 8011dd0:	1c5a      	adds	r2, r3, #1
 8011dd2:	6022      	str	r2, [r4, #0]
 8011dd4:	701e      	strb	r6, [r3, #0]
 8011dd6:	6962      	ldr	r2, [r4, #20]
 8011dd8:	1c43      	adds	r3, r0, #1
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d004      	beq.n	8011de8 <__swbuf_r+0x6e>
 8011dde:	89a3      	ldrh	r3, [r4, #12]
 8011de0:	07db      	lsls	r3, r3, #31
 8011de2:	d5e1      	bpl.n	8011da8 <__swbuf_r+0x2e>
 8011de4:	2e0a      	cmp	r6, #10
 8011de6:	d1df      	bne.n	8011da8 <__swbuf_r+0x2e>
 8011de8:	4621      	mov	r1, r4
 8011dea:	4628      	mov	r0, r5
 8011dec:	f000 fde4 	bl	80129b8 <_fflush_r>
 8011df0:	2800      	cmp	r0, #0
 8011df2:	d0d9      	beq.n	8011da8 <__swbuf_r+0x2e>
 8011df4:	e7d6      	b.n	8011da4 <__swbuf_r+0x2a>
	...

08011df8 <__swsetup_r>:
 8011df8:	b538      	push	{r3, r4, r5, lr}
 8011dfa:	4b29      	ldr	r3, [pc, #164]	@ (8011ea0 <__swsetup_r+0xa8>)
 8011dfc:	4605      	mov	r5, r0
 8011dfe:	6818      	ldr	r0, [r3, #0]
 8011e00:	460c      	mov	r4, r1
 8011e02:	b118      	cbz	r0, 8011e0c <__swsetup_r+0x14>
 8011e04:	6a03      	ldr	r3, [r0, #32]
 8011e06:	b90b      	cbnz	r3, 8011e0c <__swsetup_r+0x14>
 8011e08:	f7ff fea6 	bl	8011b58 <__sinit>
 8011e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e10:	0719      	lsls	r1, r3, #28
 8011e12:	d422      	bmi.n	8011e5a <__swsetup_r+0x62>
 8011e14:	06da      	lsls	r2, r3, #27
 8011e16:	d407      	bmi.n	8011e28 <__swsetup_r+0x30>
 8011e18:	2209      	movs	r2, #9
 8011e1a:	602a      	str	r2, [r5, #0]
 8011e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e20:	81a3      	strh	r3, [r4, #12]
 8011e22:	f04f 30ff 	mov.w	r0, #4294967295
 8011e26:	e033      	b.n	8011e90 <__swsetup_r+0x98>
 8011e28:	0758      	lsls	r0, r3, #29
 8011e2a:	d512      	bpl.n	8011e52 <__swsetup_r+0x5a>
 8011e2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e2e:	b141      	cbz	r1, 8011e42 <__swsetup_r+0x4a>
 8011e30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e34:	4299      	cmp	r1, r3
 8011e36:	d002      	beq.n	8011e3e <__swsetup_r+0x46>
 8011e38:	4628      	mov	r0, r5
 8011e3a:	f000 f8c7 	bl	8011fcc <_free_r>
 8011e3e:	2300      	movs	r3, #0
 8011e40:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e42:	89a3      	ldrh	r3, [r4, #12]
 8011e44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011e48:	81a3      	strh	r3, [r4, #12]
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	6063      	str	r3, [r4, #4]
 8011e4e:	6923      	ldr	r3, [r4, #16]
 8011e50:	6023      	str	r3, [r4, #0]
 8011e52:	89a3      	ldrh	r3, [r4, #12]
 8011e54:	f043 0308 	orr.w	r3, r3, #8
 8011e58:	81a3      	strh	r3, [r4, #12]
 8011e5a:	6923      	ldr	r3, [r4, #16]
 8011e5c:	b94b      	cbnz	r3, 8011e72 <__swsetup_r+0x7a>
 8011e5e:	89a3      	ldrh	r3, [r4, #12]
 8011e60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e68:	d003      	beq.n	8011e72 <__swsetup_r+0x7a>
 8011e6a:	4621      	mov	r1, r4
 8011e6c:	4628      	mov	r0, r5
 8011e6e:	f000 fdf1 	bl	8012a54 <__smakebuf_r>
 8011e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e76:	f013 0201 	ands.w	r2, r3, #1
 8011e7a:	d00a      	beq.n	8011e92 <__swsetup_r+0x9a>
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	60a2      	str	r2, [r4, #8]
 8011e80:	6962      	ldr	r2, [r4, #20]
 8011e82:	4252      	negs	r2, r2
 8011e84:	61a2      	str	r2, [r4, #24]
 8011e86:	6922      	ldr	r2, [r4, #16]
 8011e88:	b942      	cbnz	r2, 8011e9c <__swsetup_r+0xa4>
 8011e8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011e8e:	d1c5      	bne.n	8011e1c <__swsetup_r+0x24>
 8011e90:	bd38      	pop	{r3, r4, r5, pc}
 8011e92:	0799      	lsls	r1, r3, #30
 8011e94:	bf58      	it	pl
 8011e96:	6962      	ldrpl	r2, [r4, #20]
 8011e98:	60a2      	str	r2, [r4, #8]
 8011e9a:	e7f4      	b.n	8011e86 <__swsetup_r+0x8e>
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	e7f7      	b.n	8011e90 <__swsetup_r+0x98>
 8011ea0:	2000029c 	.word	0x2000029c

08011ea4 <memset>:
 8011ea4:	4402      	add	r2, r0
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	4293      	cmp	r3, r2
 8011eaa:	d100      	bne.n	8011eae <memset+0xa>
 8011eac:	4770      	bx	lr
 8011eae:	f803 1b01 	strb.w	r1, [r3], #1
 8011eb2:	e7f9      	b.n	8011ea8 <memset+0x4>

08011eb4 <_close_r>:
 8011eb4:	b538      	push	{r3, r4, r5, lr}
 8011eb6:	4d06      	ldr	r5, [pc, #24]	@ (8011ed0 <_close_r+0x1c>)
 8011eb8:	2300      	movs	r3, #0
 8011eba:	4604      	mov	r4, r0
 8011ebc:	4608      	mov	r0, r1
 8011ebe:	602b      	str	r3, [r5, #0]
 8011ec0:	f7f1 fafd 	bl	80034be <_close>
 8011ec4:	1c43      	adds	r3, r0, #1
 8011ec6:	d102      	bne.n	8011ece <_close_r+0x1a>
 8011ec8:	682b      	ldr	r3, [r5, #0]
 8011eca:	b103      	cbz	r3, 8011ece <_close_r+0x1a>
 8011ecc:	6023      	str	r3, [r4, #0]
 8011ece:	bd38      	pop	{r3, r4, r5, pc}
 8011ed0:	2000a5bc 	.word	0x2000a5bc

08011ed4 <_lseek_r>:
 8011ed4:	b538      	push	{r3, r4, r5, lr}
 8011ed6:	4d07      	ldr	r5, [pc, #28]	@ (8011ef4 <_lseek_r+0x20>)
 8011ed8:	4604      	mov	r4, r0
 8011eda:	4608      	mov	r0, r1
 8011edc:	4611      	mov	r1, r2
 8011ede:	2200      	movs	r2, #0
 8011ee0:	602a      	str	r2, [r5, #0]
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	f7f1 fb12 	bl	800350c <_lseek>
 8011ee8:	1c43      	adds	r3, r0, #1
 8011eea:	d102      	bne.n	8011ef2 <_lseek_r+0x1e>
 8011eec:	682b      	ldr	r3, [r5, #0]
 8011eee:	b103      	cbz	r3, 8011ef2 <_lseek_r+0x1e>
 8011ef0:	6023      	str	r3, [r4, #0]
 8011ef2:	bd38      	pop	{r3, r4, r5, pc}
 8011ef4:	2000a5bc 	.word	0x2000a5bc

08011ef8 <_read_r>:
 8011ef8:	b538      	push	{r3, r4, r5, lr}
 8011efa:	4d07      	ldr	r5, [pc, #28]	@ (8011f18 <_read_r+0x20>)
 8011efc:	4604      	mov	r4, r0
 8011efe:	4608      	mov	r0, r1
 8011f00:	4611      	mov	r1, r2
 8011f02:	2200      	movs	r2, #0
 8011f04:	602a      	str	r2, [r5, #0]
 8011f06:	461a      	mov	r2, r3
 8011f08:	f7f1 fabc 	bl	8003484 <_read>
 8011f0c:	1c43      	adds	r3, r0, #1
 8011f0e:	d102      	bne.n	8011f16 <_read_r+0x1e>
 8011f10:	682b      	ldr	r3, [r5, #0]
 8011f12:	b103      	cbz	r3, 8011f16 <_read_r+0x1e>
 8011f14:	6023      	str	r3, [r4, #0]
 8011f16:	bd38      	pop	{r3, r4, r5, pc}
 8011f18:	2000a5bc 	.word	0x2000a5bc

08011f1c <_sbrk_r>:
 8011f1c:	b538      	push	{r3, r4, r5, lr}
 8011f1e:	4d06      	ldr	r5, [pc, #24]	@ (8011f38 <_sbrk_r+0x1c>)
 8011f20:	2300      	movs	r3, #0
 8011f22:	4604      	mov	r4, r0
 8011f24:	4608      	mov	r0, r1
 8011f26:	602b      	str	r3, [r5, #0]
 8011f28:	f7f1 fafe 	bl	8003528 <_sbrk>
 8011f2c:	1c43      	adds	r3, r0, #1
 8011f2e:	d102      	bne.n	8011f36 <_sbrk_r+0x1a>
 8011f30:	682b      	ldr	r3, [r5, #0]
 8011f32:	b103      	cbz	r3, 8011f36 <_sbrk_r+0x1a>
 8011f34:	6023      	str	r3, [r4, #0]
 8011f36:	bd38      	pop	{r3, r4, r5, pc}
 8011f38:	2000a5bc 	.word	0x2000a5bc

08011f3c <_write_r>:
 8011f3c:	b538      	push	{r3, r4, r5, lr}
 8011f3e:	4d07      	ldr	r5, [pc, #28]	@ (8011f5c <_write_r+0x20>)
 8011f40:	4604      	mov	r4, r0
 8011f42:	4608      	mov	r0, r1
 8011f44:	4611      	mov	r1, r2
 8011f46:	2200      	movs	r2, #0
 8011f48:	602a      	str	r2, [r5, #0]
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	f7ee ffe4 	bl	8000f18 <_write>
 8011f50:	1c43      	adds	r3, r0, #1
 8011f52:	d102      	bne.n	8011f5a <_write_r+0x1e>
 8011f54:	682b      	ldr	r3, [r5, #0]
 8011f56:	b103      	cbz	r3, 8011f5a <_write_r+0x1e>
 8011f58:	6023      	str	r3, [r4, #0]
 8011f5a:	bd38      	pop	{r3, r4, r5, pc}
 8011f5c:	2000a5bc 	.word	0x2000a5bc

08011f60 <__errno>:
 8011f60:	4b01      	ldr	r3, [pc, #4]	@ (8011f68 <__errno+0x8>)
 8011f62:	6818      	ldr	r0, [r3, #0]
 8011f64:	4770      	bx	lr
 8011f66:	bf00      	nop
 8011f68:	2000029c 	.word	0x2000029c

08011f6c <__libc_init_array>:
 8011f6c:	b570      	push	{r4, r5, r6, lr}
 8011f6e:	4d0d      	ldr	r5, [pc, #52]	@ (8011fa4 <__libc_init_array+0x38>)
 8011f70:	4c0d      	ldr	r4, [pc, #52]	@ (8011fa8 <__libc_init_array+0x3c>)
 8011f72:	1b64      	subs	r4, r4, r5
 8011f74:	10a4      	asrs	r4, r4, #2
 8011f76:	2600      	movs	r6, #0
 8011f78:	42a6      	cmp	r6, r4
 8011f7a:	d109      	bne.n	8011f90 <__libc_init_array+0x24>
 8011f7c:	4d0b      	ldr	r5, [pc, #44]	@ (8011fac <__libc_init_array+0x40>)
 8011f7e:	4c0c      	ldr	r4, [pc, #48]	@ (8011fb0 <__libc_init_array+0x44>)
 8011f80:	f000 fe58 	bl	8012c34 <_init>
 8011f84:	1b64      	subs	r4, r4, r5
 8011f86:	10a4      	asrs	r4, r4, #2
 8011f88:	2600      	movs	r6, #0
 8011f8a:	42a6      	cmp	r6, r4
 8011f8c:	d105      	bne.n	8011f9a <__libc_init_array+0x2e>
 8011f8e:	bd70      	pop	{r4, r5, r6, pc}
 8011f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f94:	4798      	blx	r3
 8011f96:	3601      	adds	r6, #1
 8011f98:	e7ee      	b.n	8011f78 <__libc_init_array+0xc>
 8011f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f9e:	4798      	blx	r3
 8011fa0:	3601      	adds	r6, #1
 8011fa2:	e7f2      	b.n	8011f8a <__libc_init_array+0x1e>
 8011fa4:	08016d40 	.word	0x08016d40
 8011fa8:	08016d40 	.word	0x08016d40
 8011fac:	08016d40 	.word	0x08016d40
 8011fb0:	08016d44 	.word	0x08016d44

08011fb4 <__retarget_lock_init_recursive>:
 8011fb4:	4770      	bx	lr

08011fb6 <__retarget_lock_acquire_recursive>:
 8011fb6:	4770      	bx	lr

08011fb8 <__retarget_lock_release_recursive>:
 8011fb8:	4770      	bx	lr

08011fba <strcpy>:
 8011fba:	4603      	mov	r3, r0
 8011fbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011fc0:	f803 2b01 	strb.w	r2, [r3], #1
 8011fc4:	2a00      	cmp	r2, #0
 8011fc6:	d1f9      	bne.n	8011fbc <strcpy+0x2>
 8011fc8:	4770      	bx	lr
	...

08011fcc <_free_r>:
 8011fcc:	b538      	push	{r3, r4, r5, lr}
 8011fce:	4605      	mov	r5, r0
 8011fd0:	2900      	cmp	r1, #0
 8011fd2:	d041      	beq.n	8012058 <_free_r+0x8c>
 8011fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fd8:	1f0c      	subs	r4, r1, #4
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	bfb8      	it	lt
 8011fde:	18e4      	addlt	r4, r4, r3
 8011fe0:	f7ff fd22 	bl	8011a28 <__malloc_lock>
 8011fe4:	4a1d      	ldr	r2, [pc, #116]	@ (801205c <_free_r+0x90>)
 8011fe6:	6813      	ldr	r3, [r2, #0]
 8011fe8:	b933      	cbnz	r3, 8011ff8 <_free_r+0x2c>
 8011fea:	6063      	str	r3, [r4, #4]
 8011fec:	6014      	str	r4, [r2, #0]
 8011fee:	4628      	mov	r0, r5
 8011ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ff4:	f7ff bd1e 	b.w	8011a34 <__malloc_unlock>
 8011ff8:	42a3      	cmp	r3, r4
 8011ffa:	d908      	bls.n	801200e <_free_r+0x42>
 8011ffc:	6820      	ldr	r0, [r4, #0]
 8011ffe:	1821      	adds	r1, r4, r0
 8012000:	428b      	cmp	r3, r1
 8012002:	bf01      	itttt	eq
 8012004:	6819      	ldreq	r1, [r3, #0]
 8012006:	685b      	ldreq	r3, [r3, #4]
 8012008:	1809      	addeq	r1, r1, r0
 801200a:	6021      	streq	r1, [r4, #0]
 801200c:	e7ed      	b.n	8011fea <_free_r+0x1e>
 801200e:	461a      	mov	r2, r3
 8012010:	685b      	ldr	r3, [r3, #4]
 8012012:	b10b      	cbz	r3, 8012018 <_free_r+0x4c>
 8012014:	42a3      	cmp	r3, r4
 8012016:	d9fa      	bls.n	801200e <_free_r+0x42>
 8012018:	6811      	ldr	r1, [r2, #0]
 801201a:	1850      	adds	r0, r2, r1
 801201c:	42a0      	cmp	r0, r4
 801201e:	d10b      	bne.n	8012038 <_free_r+0x6c>
 8012020:	6820      	ldr	r0, [r4, #0]
 8012022:	4401      	add	r1, r0
 8012024:	1850      	adds	r0, r2, r1
 8012026:	4283      	cmp	r3, r0
 8012028:	6011      	str	r1, [r2, #0]
 801202a:	d1e0      	bne.n	8011fee <_free_r+0x22>
 801202c:	6818      	ldr	r0, [r3, #0]
 801202e:	685b      	ldr	r3, [r3, #4]
 8012030:	6053      	str	r3, [r2, #4]
 8012032:	4408      	add	r0, r1
 8012034:	6010      	str	r0, [r2, #0]
 8012036:	e7da      	b.n	8011fee <_free_r+0x22>
 8012038:	d902      	bls.n	8012040 <_free_r+0x74>
 801203a:	230c      	movs	r3, #12
 801203c:	602b      	str	r3, [r5, #0]
 801203e:	e7d6      	b.n	8011fee <_free_r+0x22>
 8012040:	6820      	ldr	r0, [r4, #0]
 8012042:	1821      	adds	r1, r4, r0
 8012044:	428b      	cmp	r3, r1
 8012046:	bf04      	itt	eq
 8012048:	6819      	ldreq	r1, [r3, #0]
 801204a:	685b      	ldreq	r3, [r3, #4]
 801204c:	6063      	str	r3, [r4, #4]
 801204e:	bf04      	itt	eq
 8012050:	1809      	addeq	r1, r1, r0
 8012052:	6021      	streq	r1, [r4, #0]
 8012054:	6054      	str	r4, [r2, #4]
 8012056:	e7ca      	b.n	8011fee <_free_r+0x22>
 8012058:	bd38      	pop	{r3, r4, r5, pc}
 801205a:	bf00      	nop
 801205c:	2000a47c 	.word	0x2000a47c

08012060 <__ssputs_r>:
 8012060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012064:	688e      	ldr	r6, [r1, #8]
 8012066:	461f      	mov	r7, r3
 8012068:	42be      	cmp	r6, r7
 801206a:	680b      	ldr	r3, [r1, #0]
 801206c:	4682      	mov	sl, r0
 801206e:	460c      	mov	r4, r1
 8012070:	4690      	mov	r8, r2
 8012072:	d82d      	bhi.n	80120d0 <__ssputs_r+0x70>
 8012074:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012078:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801207c:	d026      	beq.n	80120cc <__ssputs_r+0x6c>
 801207e:	6965      	ldr	r5, [r4, #20]
 8012080:	6909      	ldr	r1, [r1, #16]
 8012082:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012086:	eba3 0901 	sub.w	r9, r3, r1
 801208a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801208e:	1c7b      	adds	r3, r7, #1
 8012090:	444b      	add	r3, r9
 8012092:	106d      	asrs	r5, r5, #1
 8012094:	429d      	cmp	r5, r3
 8012096:	bf38      	it	cc
 8012098:	461d      	movcc	r5, r3
 801209a:	0553      	lsls	r3, r2, #21
 801209c:	d527      	bpl.n	80120ee <__ssputs_r+0x8e>
 801209e:	4629      	mov	r1, r5
 80120a0:	f7ff fc42 	bl	8011928 <_malloc_r>
 80120a4:	4606      	mov	r6, r0
 80120a6:	b360      	cbz	r0, 8012102 <__ssputs_r+0xa2>
 80120a8:	6921      	ldr	r1, [r4, #16]
 80120aa:	464a      	mov	r2, r9
 80120ac:	f000 fd7e 	bl	8012bac <memcpy>
 80120b0:	89a3      	ldrh	r3, [r4, #12]
 80120b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80120b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120ba:	81a3      	strh	r3, [r4, #12]
 80120bc:	6126      	str	r6, [r4, #16]
 80120be:	6165      	str	r5, [r4, #20]
 80120c0:	444e      	add	r6, r9
 80120c2:	eba5 0509 	sub.w	r5, r5, r9
 80120c6:	6026      	str	r6, [r4, #0]
 80120c8:	60a5      	str	r5, [r4, #8]
 80120ca:	463e      	mov	r6, r7
 80120cc:	42be      	cmp	r6, r7
 80120ce:	d900      	bls.n	80120d2 <__ssputs_r+0x72>
 80120d0:	463e      	mov	r6, r7
 80120d2:	6820      	ldr	r0, [r4, #0]
 80120d4:	4632      	mov	r2, r6
 80120d6:	4641      	mov	r1, r8
 80120d8:	f000 fd2c 	bl	8012b34 <memmove>
 80120dc:	68a3      	ldr	r3, [r4, #8]
 80120de:	1b9b      	subs	r3, r3, r6
 80120e0:	60a3      	str	r3, [r4, #8]
 80120e2:	6823      	ldr	r3, [r4, #0]
 80120e4:	4433      	add	r3, r6
 80120e6:	6023      	str	r3, [r4, #0]
 80120e8:	2000      	movs	r0, #0
 80120ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120ee:	462a      	mov	r2, r5
 80120f0:	f000 fd6a 	bl	8012bc8 <_realloc_r>
 80120f4:	4606      	mov	r6, r0
 80120f6:	2800      	cmp	r0, #0
 80120f8:	d1e0      	bne.n	80120bc <__ssputs_r+0x5c>
 80120fa:	6921      	ldr	r1, [r4, #16]
 80120fc:	4650      	mov	r0, sl
 80120fe:	f7ff ff65 	bl	8011fcc <_free_r>
 8012102:	230c      	movs	r3, #12
 8012104:	f8ca 3000 	str.w	r3, [sl]
 8012108:	89a3      	ldrh	r3, [r4, #12]
 801210a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801210e:	81a3      	strh	r3, [r4, #12]
 8012110:	f04f 30ff 	mov.w	r0, #4294967295
 8012114:	e7e9      	b.n	80120ea <__ssputs_r+0x8a>
	...

08012118 <_svfiprintf_r>:
 8012118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801211c:	4698      	mov	r8, r3
 801211e:	898b      	ldrh	r3, [r1, #12]
 8012120:	061b      	lsls	r3, r3, #24
 8012122:	b09d      	sub	sp, #116	@ 0x74
 8012124:	4607      	mov	r7, r0
 8012126:	460d      	mov	r5, r1
 8012128:	4614      	mov	r4, r2
 801212a:	d510      	bpl.n	801214e <_svfiprintf_r+0x36>
 801212c:	690b      	ldr	r3, [r1, #16]
 801212e:	b973      	cbnz	r3, 801214e <_svfiprintf_r+0x36>
 8012130:	2140      	movs	r1, #64	@ 0x40
 8012132:	f7ff fbf9 	bl	8011928 <_malloc_r>
 8012136:	6028      	str	r0, [r5, #0]
 8012138:	6128      	str	r0, [r5, #16]
 801213a:	b930      	cbnz	r0, 801214a <_svfiprintf_r+0x32>
 801213c:	230c      	movs	r3, #12
 801213e:	603b      	str	r3, [r7, #0]
 8012140:	f04f 30ff 	mov.w	r0, #4294967295
 8012144:	b01d      	add	sp, #116	@ 0x74
 8012146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801214a:	2340      	movs	r3, #64	@ 0x40
 801214c:	616b      	str	r3, [r5, #20]
 801214e:	2300      	movs	r3, #0
 8012150:	9309      	str	r3, [sp, #36]	@ 0x24
 8012152:	2320      	movs	r3, #32
 8012154:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012158:	f8cd 800c 	str.w	r8, [sp, #12]
 801215c:	2330      	movs	r3, #48	@ 0x30
 801215e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80122fc <_svfiprintf_r+0x1e4>
 8012162:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012166:	f04f 0901 	mov.w	r9, #1
 801216a:	4623      	mov	r3, r4
 801216c:	469a      	mov	sl, r3
 801216e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012172:	b10a      	cbz	r2, 8012178 <_svfiprintf_r+0x60>
 8012174:	2a25      	cmp	r2, #37	@ 0x25
 8012176:	d1f9      	bne.n	801216c <_svfiprintf_r+0x54>
 8012178:	ebba 0b04 	subs.w	fp, sl, r4
 801217c:	d00b      	beq.n	8012196 <_svfiprintf_r+0x7e>
 801217e:	465b      	mov	r3, fp
 8012180:	4622      	mov	r2, r4
 8012182:	4629      	mov	r1, r5
 8012184:	4638      	mov	r0, r7
 8012186:	f7ff ff6b 	bl	8012060 <__ssputs_r>
 801218a:	3001      	adds	r0, #1
 801218c:	f000 80a7 	beq.w	80122de <_svfiprintf_r+0x1c6>
 8012190:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012192:	445a      	add	r2, fp
 8012194:	9209      	str	r2, [sp, #36]	@ 0x24
 8012196:	f89a 3000 	ldrb.w	r3, [sl]
 801219a:	2b00      	cmp	r3, #0
 801219c:	f000 809f 	beq.w	80122de <_svfiprintf_r+0x1c6>
 80121a0:	2300      	movs	r3, #0
 80121a2:	f04f 32ff 	mov.w	r2, #4294967295
 80121a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121aa:	f10a 0a01 	add.w	sl, sl, #1
 80121ae:	9304      	str	r3, [sp, #16]
 80121b0:	9307      	str	r3, [sp, #28]
 80121b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80121b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80121b8:	4654      	mov	r4, sl
 80121ba:	2205      	movs	r2, #5
 80121bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121c0:	484e      	ldr	r0, [pc, #312]	@ (80122fc <_svfiprintf_r+0x1e4>)
 80121c2:	f7ee f81d 	bl	8000200 <memchr>
 80121c6:	9a04      	ldr	r2, [sp, #16]
 80121c8:	b9d8      	cbnz	r0, 8012202 <_svfiprintf_r+0xea>
 80121ca:	06d0      	lsls	r0, r2, #27
 80121cc:	bf44      	itt	mi
 80121ce:	2320      	movmi	r3, #32
 80121d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121d4:	0711      	lsls	r1, r2, #28
 80121d6:	bf44      	itt	mi
 80121d8:	232b      	movmi	r3, #43	@ 0x2b
 80121da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121de:	f89a 3000 	ldrb.w	r3, [sl]
 80121e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80121e4:	d015      	beq.n	8012212 <_svfiprintf_r+0xfa>
 80121e6:	9a07      	ldr	r2, [sp, #28]
 80121e8:	4654      	mov	r4, sl
 80121ea:	2000      	movs	r0, #0
 80121ec:	f04f 0c0a 	mov.w	ip, #10
 80121f0:	4621      	mov	r1, r4
 80121f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121f6:	3b30      	subs	r3, #48	@ 0x30
 80121f8:	2b09      	cmp	r3, #9
 80121fa:	d94b      	bls.n	8012294 <_svfiprintf_r+0x17c>
 80121fc:	b1b0      	cbz	r0, 801222c <_svfiprintf_r+0x114>
 80121fe:	9207      	str	r2, [sp, #28]
 8012200:	e014      	b.n	801222c <_svfiprintf_r+0x114>
 8012202:	eba0 0308 	sub.w	r3, r0, r8
 8012206:	fa09 f303 	lsl.w	r3, r9, r3
 801220a:	4313      	orrs	r3, r2
 801220c:	9304      	str	r3, [sp, #16]
 801220e:	46a2      	mov	sl, r4
 8012210:	e7d2      	b.n	80121b8 <_svfiprintf_r+0xa0>
 8012212:	9b03      	ldr	r3, [sp, #12]
 8012214:	1d19      	adds	r1, r3, #4
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	9103      	str	r1, [sp, #12]
 801221a:	2b00      	cmp	r3, #0
 801221c:	bfbb      	ittet	lt
 801221e:	425b      	neglt	r3, r3
 8012220:	f042 0202 	orrlt.w	r2, r2, #2
 8012224:	9307      	strge	r3, [sp, #28]
 8012226:	9307      	strlt	r3, [sp, #28]
 8012228:	bfb8      	it	lt
 801222a:	9204      	strlt	r2, [sp, #16]
 801222c:	7823      	ldrb	r3, [r4, #0]
 801222e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012230:	d10a      	bne.n	8012248 <_svfiprintf_r+0x130>
 8012232:	7863      	ldrb	r3, [r4, #1]
 8012234:	2b2a      	cmp	r3, #42	@ 0x2a
 8012236:	d132      	bne.n	801229e <_svfiprintf_r+0x186>
 8012238:	9b03      	ldr	r3, [sp, #12]
 801223a:	1d1a      	adds	r2, r3, #4
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	9203      	str	r2, [sp, #12]
 8012240:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012244:	3402      	adds	r4, #2
 8012246:	9305      	str	r3, [sp, #20]
 8012248:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801230c <_svfiprintf_r+0x1f4>
 801224c:	7821      	ldrb	r1, [r4, #0]
 801224e:	2203      	movs	r2, #3
 8012250:	4650      	mov	r0, sl
 8012252:	f7ed ffd5 	bl	8000200 <memchr>
 8012256:	b138      	cbz	r0, 8012268 <_svfiprintf_r+0x150>
 8012258:	9b04      	ldr	r3, [sp, #16]
 801225a:	eba0 000a 	sub.w	r0, r0, sl
 801225e:	2240      	movs	r2, #64	@ 0x40
 8012260:	4082      	lsls	r2, r0
 8012262:	4313      	orrs	r3, r2
 8012264:	3401      	adds	r4, #1
 8012266:	9304      	str	r3, [sp, #16]
 8012268:	f814 1b01 	ldrb.w	r1, [r4], #1
 801226c:	4824      	ldr	r0, [pc, #144]	@ (8012300 <_svfiprintf_r+0x1e8>)
 801226e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012272:	2206      	movs	r2, #6
 8012274:	f7ed ffc4 	bl	8000200 <memchr>
 8012278:	2800      	cmp	r0, #0
 801227a:	d036      	beq.n	80122ea <_svfiprintf_r+0x1d2>
 801227c:	4b21      	ldr	r3, [pc, #132]	@ (8012304 <_svfiprintf_r+0x1ec>)
 801227e:	bb1b      	cbnz	r3, 80122c8 <_svfiprintf_r+0x1b0>
 8012280:	9b03      	ldr	r3, [sp, #12]
 8012282:	3307      	adds	r3, #7
 8012284:	f023 0307 	bic.w	r3, r3, #7
 8012288:	3308      	adds	r3, #8
 801228a:	9303      	str	r3, [sp, #12]
 801228c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801228e:	4433      	add	r3, r6
 8012290:	9309      	str	r3, [sp, #36]	@ 0x24
 8012292:	e76a      	b.n	801216a <_svfiprintf_r+0x52>
 8012294:	fb0c 3202 	mla	r2, ip, r2, r3
 8012298:	460c      	mov	r4, r1
 801229a:	2001      	movs	r0, #1
 801229c:	e7a8      	b.n	80121f0 <_svfiprintf_r+0xd8>
 801229e:	2300      	movs	r3, #0
 80122a0:	3401      	adds	r4, #1
 80122a2:	9305      	str	r3, [sp, #20]
 80122a4:	4619      	mov	r1, r3
 80122a6:	f04f 0c0a 	mov.w	ip, #10
 80122aa:	4620      	mov	r0, r4
 80122ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122b0:	3a30      	subs	r2, #48	@ 0x30
 80122b2:	2a09      	cmp	r2, #9
 80122b4:	d903      	bls.n	80122be <_svfiprintf_r+0x1a6>
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d0c6      	beq.n	8012248 <_svfiprintf_r+0x130>
 80122ba:	9105      	str	r1, [sp, #20]
 80122bc:	e7c4      	b.n	8012248 <_svfiprintf_r+0x130>
 80122be:	fb0c 2101 	mla	r1, ip, r1, r2
 80122c2:	4604      	mov	r4, r0
 80122c4:	2301      	movs	r3, #1
 80122c6:	e7f0      	b.n	80122aa <_svfiprintf_r+0x192>
 80122c8:	ab03      	add	r3, sp, #12
 80122ca:	9300      	str	r3, [sp, #0]
 80122cc:	462a      	mov	r2, r5
 80122ce:	4b0e      	ldr	r3, [pc, #56]	@ (8012308 <_svfiprintf_r+0x1f0>)
 80122d0:	a904      	add	r1, sp, #16
 80122d2:	4638      	mov	r0, r7
 80122d4:	f3af 8000 	nop.w
 80122d8:	1c42      	adds	r2, r0, #1
 80122da:	4606      	mov	r6, r0
 80122dc:	d1d6      	bne.n	801228c <_svfiprintf_r+0x174>
 80122de:	89ab      	ldrh	r3, [r5, #12]
 80122e0:	065b      	lsls	r3, r3, #25
 80122e2:	f53f af2d 	bmi.w	8012140 <_svfiprintf_r+0x28>
 80122e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122e8:	e72c      	b.n	8012144 <_svfiprintf_r+0x2c>
 80122ea:	ab03      	add	r3, sp, #12
 80122ec:	9300      	str	r3, [sp, #0]
 80122ee:	462a      	mov	r2, r5
 80122f0:	4b05      	ldr	r3, [pc, #20]	@ (8012308 <_svfiprintf_r+0x1f0>)
 80122f2:	a904      	add	r1, sp, #16
 80122f4:	4638      	mov	r0, r7
 80122f6:	f000 f9bb 	bl	8012670 <_printf_i>
 80122fa:	e7ed      	b.n	80122d8 <_svfiprintf_r+0x1c0>
 80122fc:	08016d04 	.word	0x08016d04
 8012300:	08016d0e 	.word	0x08016d0e
 8012304:	00000000 	.word	0x00000000
 8012308:	08012061 	.word	0x08012061
 801230c:	08016d0a 	.word	0x08016d0a

08012310 <__sfputc_r>:
 8012310:	6893      	ldr	r3, [r2, #8]
 8012312:	3b01      	subs	r3, #1
 8012314:	2b00      	cmp	r3, #0
 8012316:	b410      	push	{r4}
 8012318:	6093      	str	r3, [r2, #8]
 801231a:	da08      	bge.n	801232e <__sfputc_r+0x1e>
 801231c:	6994      	ldr	r4, [r2, #24]
 801231e:	42a3      	cmp	r3, r4
 8012320:	db01      	blt.n	8012326 <__sfputc_r+0x16>
 8012322:	290a      	cmp	r1, #10
 8012324:	d103      	bne.n	801232e <__sfputc_r+0x1e>
 8012326:	f85d 4b04 	ldr.w	r4, [sp], #4
 801232a:	f7ff bd26 	b.w	8011d7a <__swbuf_r>
 801232e:	6813      	ldr	r3, [r2, #0]
 8012330:	1c58      	adds	r0, r3, #1
 8012332:	6010      	str	r0, [r2, #0]
 8012334:	7019      	strb	r1, [r3, #0]
 8012336:	4608      	mov	r0, r1
 8012338:	f85d 4b04 	ldr.w	r4, [sp], #4
 801233c:	4770      	bx	lr

0801233e <__sfputs_r>:
 801233e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012340:	4606      	mov	r6, r0
 8012342:	460f      	mov	r7, r1
 8012344:	4614      	mov	r4, r2
 8012346:	18d5      	adds	r5, r2, r3
 8012348:	42ac      	cmp	r4, r5
 801234a:	d101      	bne.n	8012350 <__sfputs_r+0x12>
 801234c:	2000      	movs	r0, #0
 801234e:	e007      	b.n	8012360 <__sfputs_r+0x22>
 8012350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012354:	463a      	mov	r2, r7
 8012356:	4630      	mov	r0, r6
 8012358:	f7ff ffda 	bl	8012310 <__sfputc_r>
 801235c:	1c43      	adds	r3, r0, #1
 801235e:	d1f3      	bne.n	8012348 <__sfputs_r+0xa>
 8012360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012364 <_vfiprintf_r>:
 8012364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012368:	460d      	mov	r5, r1
 801236a:	b09d      	sub	sp, #116	@ 0x74
 801236c:	4614      	mov	r4, r2
 801236e:	4698      	mov	r8, r3
 8012370:	4606      	mov	r6, r0
 8012372:	b118      	cbz	r0, 801237c <_vfiprintf_r+0x18>
 8012374:	6a03      	ldr	r3, [r0, #32]
 8012376:	b90b      	cbnz	r3, 801237c <_vfiprintf_r+0x18>
 8012378:	f7ff fbee 	bl	8011b58 <__sinit>
 801237c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801237e:	07d9      	lsls	r1, r3, #31
 8012380:	d405      	bmi.n	801238e <_vfiprintf_r+0x2a>
 8012382:	89ab      	ldrh	r3, [r5, #12]
 8012384:	059a      	lsls	r2, r3, #22
 8012386:	d402      	bmi.n	801238e <_vfiprintf_r+0x2a>
 8012388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801238a:	f7ff fe14 	bl	8011fb6 <__retarget_lock_acquire_recursive>
 801238e:	89ab      	ldrh	r3, [r5, #12]
 8012390:	071b      	lsls	r3, r3, #28
 8012392:	d501      	bpl.n	8012398 <_vfiprintf_r+0x34>
 8012394:	692b      	ldr	r3, [r5, #16]
 8012396:	b99b      	cbnz	r3, 80123c0 <_vfiprintf_r+0x5c>
 8012398:	4629      	mov	r1, r5
 801239a:	4630      	mov	r0, r6
 801239c:	f7ff fd2c 	bl	8011df8 <__swsetup_r>
 80123a0:	b170      	cbz	r0, 80123c0 <_vfiprintf_r+0x5c>
 80123a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80123a4:	07dc      	lsls	r4, r3, #31
 80123a6:	d504      	bpl.n	80123b2 <_vfiprintf_r+0x4e>
 80123a8:	f04f 30ff 	mov.w	r0, #4294967295
 80123ac:	b01d      	add	sp, #116	@ 0x74
 80123ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b2:	89ab      	ldrh	r3, [r5, #12]
 80123b4:	0598      	lsls	r0, r3, #22
 80123b6:	d4f7      	bmi.n	80123a8 <_vfiprintf_r+0x44>
 80123b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80123ba:	f7ff fdfd 	bl	8011fb8 <__retarget_lock_release_recursive>
 80123be:	e7f3      	b.n	80123a8 <_vfiprintf_r+0x44>
 80123c0:	2300      	movs	r3, #0
 80123c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80123c4:	2320      	movs	r3, #32
 80123c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80123ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80123ce:	2330      	movs	r3, #48	@ 0x30
 80123d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012580 <_vfiprintf_r+0x21c>
 80123d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80123d8:	f04f 0901 	mov.w	r9, #1
 80123dc:	4623      	mov	r3, r4
 80123de:	469a      	mov	sl, r3
 80123e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123e4:	b10a      	cbz	r2, 80123ea <_vfiprintf_r+0x86>
 80123e6:	2a25      	cmp	r2, #37	@ 0x25
 80123e8:	d1f9      	bne.n	80123de <_vfiprintf_r+0x7a>
 80123ea:	ebba 0b04 	subs.w	fp, sl, r4
 80123ee:	d00b      	beq.n	8012408 <_vfiprintf_r+0xa4>
 80123f0:	465b      	mov	r3, fp
 80123f2:	4622      	mov	r2, r4
 80123f4:	4629      	mov	r1, r5
 80123f6:	4630      	mov	r0, r6
 80123f8:	f7ff ffa1 	bl	801233e <__sfputs_r>
 80123fc:	3001      	adds	r0, #1
 80123fe:	f000 80a7 	beq.w	8012550 <_vfiprintf_r+0x1ec>
 8012402:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012404:	445a      	add	r2, fp
 8012406:	9209      	str	r2, [sp, #36]	@ 0x24
 8012408:	f89a 3000 	ldrb.w	r3, [sl]
 801240c:	2b00      	cmp	r3, #0
 801240e:	f000 809f 	beq.w	8012550 <_vfiprintf_r+0x1ec>
 8012412:	2300      	movs	r3, #0
 8012414:	f04f 32ff 	mov.w	r2, #4294967295
 8012418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801241c:	f10a 0a01 	add.w	sl, sl, #1
 8012420:	9304      	str	r3, [sp, #16]
 8012422:	9307      	str	r3, [sp, #28]
 8012424:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012428:	931a      	str	r3, [sp, #104]	@ 0x68
 801242a:	4654      	mov	r4, sl
 801242c:	2205      	movs	r2, #5
 801242e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012432:	4853      	ldr	r0, [pc, #332]	@ (8012580 <_vfiprintf_r+0x21c>)
 8012434:	f7ed fee4 	bl	8000200 <memchr>
 8012438:	9a04      	ldr	r2, [sp, #16]
 801243a:	b9d8      	cbnz	r0, 8012474 <_vfiprintf_r+0x110>
 801243c:	06d1      	lsls	r1, r2, #27
 801243e:	bf44      	itt	mi
 8012440:	2320      	movmi	r3, #32
 8012442:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012446:	0713      	lsls	r3, r2, #28
 8012448:	bf44      	itt	mi
 801244a:	232b      	movmi	r3, #43	@ 0x2b
 801244c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012450:	f89a 3000 	ldrb.w	r3, [sl]
 8012454:	2b2a      	cmp	r3, #42	@ 0x2a
 8012456:	d015      	beq.n	8012484 <_vfiprintf_r+0x120>
 8012458:	9a07      	ldr	r2, [sp, #28]
 801245a:	4654      	mov	r4, sl
 801245c:	2000      	movs	r0, #0
 801245e:	f04f 0c0a 	mov.w	ip, #10
 8012462:	4621      	mov	r1, r4
 8012464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012468:	3b30      	subs	r3, #48	@ 0x30
 801246a:	2b09      	cmp	r3, #9
 801246c:	d94b      	bls.n	8012506 <_vfiprintf_r+0x1a2>
 801246e:	b1b0      	cbz	r0, 801249e <_vfiprintf_r+0x13a>
 8012470:	9207      	str	r2, [sp, #28]
 8012472:	e014      	b.n	801249e <_vfiprintf_r+0x13a>
 8012474:	eba0 0308 	sub.w	r3, r0, r8
 8012478:	fa09 f303 	lsl.w	r3, r9, r3
 801247c:	4313      	orrs	r3, r2
 801247e:	9304      	str	r3, [sp, #16]
 8012480:	46a2      	mov	sl, r4
 8012482:	e7d2      	b.n	801242a <_vfiprintf_r+0xc6>
 8012484:	9b03      	ldr	r3, [sp, #12]
 8012486:	1d19      	adds	r1, r3, #4
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	9103      	str	r1, [sp, #12]
 801248c:	2b00      	cmp	r3, #0
 801248e:	bfbb      	ittet	lt
 8012490:	425b      	neglt	r3, r3
 8012492:	f042 0202 	orrlt.w	r2, r2, #2
 8012496:	9307      	strge	r3, [sp, #28]
 8012498:	9307      	strlt	r3, [sp, #28]
 801249a:	bfb8      	it	lt
 801249c:	9204      	strlt	r2, [sp, #16]
 801249e:	7823      	ldrb	r3, [r4, #0]
 80124a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80124a2:	d10a      	bne.n	80124ba <_vfiprintf_r+0x156>
 80124a4:	7863      	ldrb	r3, [r4, #1]
 80124a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80124a8:	d132      	bne.n	8012510 <_vfiprintf_r+0x1ac>
 80124aa:	9b03      	ldr	r3, [sp, #12]
 80124ac:	1d1a      	adds	r2, r3, #4
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	9203      	str	r2, [sp, #12]
 80124b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80124b6:	3402      	adds	r4, #2
 80124b8:	9305      	str	r3, [sp, #20]
 80124ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012590 <_vfiprintf_r+0x22c>
 80124be:	7821      	ldrb	r1, [r4, #0]
 80124c0:	2203      	movs	r2, #3
 80124c2:	4650      	mov	r0, sl
 80124c4:	f7ed fe9c 	bl	8000200 <memchr>
 80124c8:	b138      	cbz	r0, 80124da <_vfiprintf_r+0x176>
 80124ca:	9b04      	ldr	r3, [sp, #16]
 80124cc:	eba0 000a 	sub.w	r0, r0, sl
 80124d0:	2240      	movs	r2, #64	@ 0x40
 80124d2:	4082      	lsls	r2, r0
 80124d4:	4313      	orrs	r3, r2
 80124d6:	3401      	adds	r4, #1
 80124d8:	9304      	str	r3, [sp, #16]
 80124da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124de:	4829      	ldr	r0, [pc, #164]	@ (8012584 <_vfiprintf_r+0x220>)
 80124e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80124e4:	2206      	movs	r2, #6
 80124e6:	f7ed fe8b 	bl	8000200 <memchr>
 80124ea:	2800      	cmp	r0, #0
 80124ec:	d03f      	beq.n	801256e <_vfiprintf_r+0x20a>
 80124ee:	4b26      	ldr	r3, [pc, #152]	@ (8012588 <_vfiprintf_r+0x224>)
 80124f0:	bb1b      	cbnz	r3, 801253a <_vfiprintf_r+0x1d6>
 80124f2:	9b03      	ldr	r3, [sp, #12]
 80124f4:	3307      	adds	r3, #7
 80124f6:	f023 0307 	bic.w	r3, r3, #7
 80124fa:	3308      	adds	r3, #8
 80124fc:	9303      	str	r3, [sp, #12]
 80124fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012500:	443b      	add	r3, r7
 8012502:	9309      	str	r3, [sp, #36]	@ 0x24
 8012504:	e76a      	b.n	80123dc <_vfiprintf_r+0x78>
 8012506:	fb0c 3202 	mla	r2, ip, r2, r3
 801250a:	460c      	mov	r4, r1
 801250c:	2001      	movs	r0, #1
 801250e:	e7a8      	b.n	8012462 <_vfiprintf_r+0xfe>
 8012510:	2300      	movs	r3, #0
 8012512:	3401      	adds	r4, #1
 8012514:	9305      	str	r3, [sp, #20]
 8012516:	4619      	mov	r1, r3
 8012518:	f04f 0c0a 	mov.w	ip, #10
 801251c:	4620      	mov	r0, r4
 801251e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012522:	3a30      	subs	r2, #48	@ 0x30
 8012524:	2a09      	cmp	r2, #9
 8012526:	d903      	bls.n	8012530 <_vfiprintf_r+0x1cc>
 8012528:	2b00      	cmp	r3, #0
 801252a:	d0c6      	beq.n	80124ba <_vfiprintf_r+0x156>
 801252c:	9105      	str	r1, [sp, #20]
 801252e:	e7c4      	b.n	80124ba <_vfiprintf_r+0x156>
 8012530:	fb0c 2101 	mla	r1, ip, r1, r2
 8012534:	4604      	mov	r4, r0
 8012536:	2301      	movs	r3, #1
 8012538:	e7f0      	b.n	801251c <_vfiprintf_r+0x1b8>
 801253a:	ab03      	add	r3, sp, #12
 801253c:	9300      	str	r3, [sp, #0]
 801253e:	462a      	mov	r2, r5
 8012540:	4b12      	ldr	r3, [pc, #72]	@ (801258c <_vfiprintf_r+0x228>)
 8012542:	a904      	add	r1, sp, #16
 8012544:	4630      	mov	r0, r6
 8012546:	f3af 8000 	nop.w
 801254a:	4607      	mov	r7, r0
 801254c:	1c78      	adds	r0, r7, #1
 801254e:	d1d6      	bne.n	80124fe <_vfiprintf_r+0x19a>
 8012550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012552:	07d9      	lsls	r1, r3, #31
 8012554:	d405      	bmi.n	8012562 <_vfiprintf_r+0x1fe>
 8012556:	89ab      	ldrh	r3, [r5, #12]
 8012558:	059a      	lsls	r2, r3, #22
 801255a:	d402      	bmi.n	8012562 <_vfiprintf_r+0x1fe>
 801255c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801255e:	f7ff fd2b 	bl	8011fb8 <__retarget_lock_release_recursive>
 8012562:	89ab      	ldrh	r3, [r5, #12]
 8012564:	065b      	lsls	r3, r3, #25
 8012566:	f53f af1f 	bmi.w	80123a8 <_vfiprintf_r+0x44>
 801256a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801256c:	e71e      	b.n	80123ac <_vfiprintf_r+0x48>
 801256e:	ab03      	add	r3, sp, #12
 8012570:	9300      	str	r3, [sp, #0]
 8012572:	462a      	mov	r2, r5
 8012574:	4b05      	ldr	r3, [pc, #20]	@ (801258c <_vfiprintf_r+0x228>)
 8012576:	a904      	add	r1, sp, #16
 8012578:	4630      	mov	r0, r6
 801257a:	f000 f879 	bl	8012670 <_printf_i>
 801257e:	e7e4      	b.n	801254a <_vfiprintf_r+0x1e6>
 8012580:	08016d04 	.word	0x08016d04
 8012584:	08016d0e 	.word	0x08016d0e
 8012588:	00000000 	.word	0x00000000
 801258c:	0801233f 	.word	0x0801233f
 8012590:	08016d0a 	.word	0x08016d0a

08012594 <_printf_common>:
 8012594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012598:	4616      	mov	r6, r2
 801259a:	4698      	mov	r8, r3
 801259c:	688a      	ldr	r2, [r1, #8]
 801259e:	690b      	ldr	r3, [r1, #16]
 80125a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80125a4:	4293      	cmp	r3, r2
 80125a6:	bfb8      	it	lt
 80125a8:	4613      	movlt	r3, r2
 80125aa:	6033      	str	r3, [r6, #0]
 80125ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80125b0:	4607      	mov	r7, r0
 80125b2:	460c      	mov	r4, r1
 80125b4:	b10a      	cbz	r2, 80125ba <_printf_common+0x26>
 80125b6:	3301      	adds	r3, #1
 80125b8:	6033      	str	r3, [r6, #0]
 80125ba:	6823      	ldr	r3, [r4, #0]
 80125bc:	0699      	lsls	r1, r3, #26
 80125be:	bf42      	ittt	mi
 80125c0:	6833      	ldrmi	r3, [r6, #0]
 80125c2:	3302      	addmi	r3, #2
 80125c4:	6033      	strmi	r3, [r6, #0]
 80125c6:	6825      	ldr	r5, [r4, #0]
 80125c8:	f015 0506 	ands.w	r5, r5, #6
 80125cc:	d106      	bne.n	80125dc <_printf_common+0x48>
 80125ce:	f104 0a19 	add.w	sl, r4, #25
 80125d2:	68e3      	ldr	r3, [r4, #12]
 80125d4:	6832      	ldr	r2, [r6, #0]
 80125d6:	1a9b      	subs	r3, r3, r2
 80125d8:	42ab      	cmp	r3, r5
 80125da:	dc26      	bgt.n	801262a <_printf_common+0x96>
 80125dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80125e0:	6822      	ldr	r2, [r4, #0]
 80125e2:	3b00      	subs	r3, #0
 80125e4:	bf18      	it	ne
 80125e6:	2301      	movne	r3, #1
 80125e8:	0692      	lsls	r2, r2, #26
 80125ea:	d42b      	bmi.n	8012644 <_printf_common+0xb0>
 80125ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80125f0:	4641      	mov	r1, r8
 80125f2:	4638      	mov	r0, r7
 80125f4:	47c8      	blx	r9
 80125f6:	3001      	adds	r0, #1
 80125f8:	d01e      	beq.n	8012638 <_printf_common+0xa4>
 80125fa:	6823      	ldr	r3, [r4, #0]
 80125fc:	6922      	ldr	r2, [r4, #16]
 80125fe:	f003 0306 	and.w	r3, r3, #6
 8012602:	2b04      	cmp	r3, #4
 8012604:	bf02      	ittt	eq
 8012606:	68e5      	ldreq	r5, [r4, #12]
 8012608:	6833      	ldreq	r3, [r6, #0]
 801260a:	1aed      	subeq	r5, r5, r3
 801260c:	68a3      	ldr	r3, [r4, #8]
 801260e:	bf0c      	ite	eq
 8012610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012614:	2500      	movne	r5, #0
 8012616:	4293      	cmp	r3, r2
 8012618:	bfc4      	itt	gt
 801261a:	1a9b      	subgt	r3, r3, r2
 801261c:	18ed      	addgt	r5, r5, r3
 801261e:	2600      	movs	r6, #0
 8012620:	341a      	adds	r4, #26
 8012622:	42b5      	cmp	r5, r6
 8012624:	d11a      	bne.n	801265c <_printf_common+0xc8>
 8012626:	2000      	movs	r0, #0
 8012628:	e008      	b.n	801263c <_printf_common+0xa8>
 801262a:	2301      	movs	r3, #1
 801262c:	4652      	mov	r2, sl
 801262e:	4641      	mov	r1, r8
 8012630:	4638      	mov	r0, r7
 8012632:	47c8      	blx	r9
 8012634:	3001      	adds	r0, #1
 8012636:	d103      	bne.n	8012640 <_printf_common+0xac>
 8012638:	f04f 30ff 	mov.w	r0, #4294967295
 801263c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012640:	3501      	adds	r5, #1
 8012642:	e7c6      	b.n	80125d2 <_printf_common+0x3e>
 8012644:	18e1      	adds	r1, r4, r3
 8012646:	1c5a      	adds	r2, r3, #1
 8012648:	2030      	movs	r0, #48	@ 0x30
 801264a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801264e:	4422      	add	r2, r4
 8012650:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012654:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012658:	3302      	adds	r3, #2
 801265a:	e7c7      	b.n	80125ec <_printf_common+0x58>
 801265c:	2301      	movs	r3, #1
 801265e:	4622      	mov	r2, r4
 8012660:	4641      	mov	r1, r8
 8012662:	4638      	mov	r0, r7
 8012664:	47c8      	blx	r9
 8012666:	3001      	adds	r0, #1
 8012668:	d0e6      	beq.n	8012638 <_printf_common+0xa4>
 801266a:	3601      	adds	r6, #1
 801266c:	e7d9      	b.n	8012622 <_printf_common+0x8e>
	...

08012670 <_printf_i>:
 8012670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012674:	7e0f      	ldrb	r7, [r1, #24]
 8012676:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012678:	2f78      	cmp	r7, #120	@ 0x78
 801267a:	4691      	mov	r9, r2
 801267c:	4680      	mov	r8, r0
 801267e:	460c      	mov	r4, r1
 8012680:	469a      	mov	sl, r3
 8012682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012686:	d807      	bhi.n	8012698 <_printf_i+0x28>
 8012688:	2f62      	cmp	r7, #98	@ 0x62
 801268a:	d80a      	bhi.n	80126a2 <_printf_i+0x32>
 801268c:	2f00      	cmp	r7, #0
 801268e:	f000 80d2 	beq.w	8012836 <_printf_i+0x1c6>
 8012692:	2f58      	cmp	r7, #88	@ 0x58
 8012694:	f000 80b9 	beq.w	801280a <_printf_i+0x19a>
 8012698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801269c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80126a0:	e03a      	b.n	8012718 <_printf_i+0xa8>
 80126a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80126a6:	2b15      	cmp	r3, #21
 80126a8:	d8f6      	bhi.n	8012698 <_printf_i+0x28>
 80126aa:	a101      	add	r1, pc, #4	@ (adr r1, 80126b0 <_printf_i+0x40>)
 80126ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80126b0:	08012709 	.word	0x08012709
 80126b4:	0801271d 	.word	0x0801271d
 80126b8:	08012699 	.word	0x08012699
 80126bc:	08012699 	.word	0x08012699
 80126c0:	08012699 	.word	0x08012699
 80126c4:	08012699 	.word	0x08012699
 80126c8:	0801271d 	.word	0x0801271d
 80126cc:	08012699 	.word	0x08012699
 80126d0:	08012699 	.word	0x08012699
 80126d4:	08012699 	.word	0x08012699
 80126d8:	08012699 	.word	0x08012699
 80126dc:	0801281d 	.word	0x0801281d
 80126e0:	08012747 	.word	0x08012747
 80126e4:	080127d7 	.word	0x080127d7
 80126e8:	08012699 	.word	0x08012699
 80126ec:	08012699 	.word	0x08012699
 80126f0:	0801283f 	.word	0x0801283f
 80126f4:	08012699 	.word	0x08012699
 80126f8:	08012747 	.word	0x08012747
 80126fc:	08012699 	.word	0x08012699
 8012700:	08012699 	.word	0x08012699
 8012704:	080127df 	.word	0x080127df
 8012708:	6833      	ldr	r3, [r6, #0]
 801270a:	1d1a      	adds	r2, r3, #4
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	6032      	str	r2, [r6, #0]
 8012710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012718:	2301      	movs	r3, #1
 801271a:	e09d      	b.n	8012858 <_printf_i+0x1e8>
 801271c:	6833      	ldr	r3, [r6, #0]
 801271e:	6820      	ldr	r0, [r4, #0]
 8012720:	1d19      	adds	r1, r3, #4
 8012722:	6031      	str	r1, [r6, #0]
 8012724:	0606      	lsls	r6, r0, #24
 8012726:	d501      	bpl.n	801272c <_printf_i+0xbc>
 8012728:	681d      	ldr	r5, [r3, #0]
 801272a:	e003      	b.n	8012734 <_printf_i+0xc4>
 801272c:	0645      	lsls	r5, r0, #25
 801272e:	d5fb      	bpl.n	8012728 <_printf_i+0xb8>
 8012730:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012734:	2d00      	cmp	r5, #0
 8012736:	da03      	bge.n	8012740 <_printf_i+0xd0>
 8012738:	232d      	movs	r3, #45	@ 0x2d
 801273a:	426d      	negs	r5, r5
 801273c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012740:	4859      	ldr	r0, [pc, #356]	@ (80128a8 <_printf_i+0x238>)
 8012742:	230a      	movs	r3, #10
 8012744:	e011      	b.n	801276a <_printf_i+0xfa>
 8012746:	6821      	ldr	r1, [r4, #0]
 8012748:	6833      	ldr	r3, [r6, #0]
 801274a:	0608      	lsls	r0, r1, #24
 801274c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012750:	d402      	bmi.n	8012758 <_printf_i+0xe8>
 8012752:	0649      	lsls	r1, r1, #25
 8012754:	bf48      	it	mi
 8012756:	b2ad      	uxthmi	r5, r5
 8012758:	2f6f      	cmp	r7, #111	@ 0x6f
 801275a:	4853      	ldr	r0, [pc, #332]	@ (80128a8 <_printf_i+0x238>)
 801275c:	6033      	str	r3, [r6, #0]
 801275e:	bf14      	ite	ne
 8012760:	230a      	movne	r3, #10
 8012762:	2308      	moveq	r3, #8
 8012764:	2100      	movs	r1, #0
 8012766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801276a:	6866      	ldr	r6, [r4, #4]
 801276c:	60a6      	str	r6, [r4, #8]
 801276e:	2e00      	cmp	r6, #0
 8012770:	bfa2      	ittt	ge
 8012772:	6821      	ldrge	r1, [r4, #0]
 8012774:	f021 0104 	bicge.w	r1, r1, #4
 8012778:	6021      	strge	r1, [r4, #0]
 801277a:	b90d      	cbnz	r5, 8012780 <_printf_i+0x110>
 801277c:	2e00      	cmp	r6, #0
 801277e:	d04b      	beq.n	8012818 <_printf_i+0x1a8>
 8012780:	4616      	mov	r6, r2
 8012782:	fbb5 f1f3 	udiv	r1, r5, r3
 8012786:	fb03 5711 	mls	r7, r3, r1, r5
 801278a:	5dc7      	ldrb	r7, [r0, r7]
 801278c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012790:	462f      	mov	r7, r5
 8012792:	42bb      	cmp	r3, r7
 8012794:	460d      	mov	r5, r1
 8012796:	d9f4      	bls.n	8012782 <_printf_i+0x112>
 8012798:	2b08      	cmp	r3, #8
 801279a:	d10b      	bne.n	80127b4 <_printf_i+0x144>
 801279c:	6823      	ldr	r3, [r4, #0]
 801279e:	07df      	lsls	r7, r3, #31
 80127a0:	d508      	bpl.n	80127b4 <_printf_i+0x144>
 80127a2:	6923      	ldr	r3, [r4, #16]
 80127a4:	6861      	ldr	r1, [r4, #4]
 80127a6:	4299      	cmp	r1, r3
 80127a8:	bfde      	ittt	le
 80127aa:	2330      	movle	r3, #48	@ 0x30
 80127ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80127b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80127b4:	1b92      	subs	r2, r2, r6
 80127b6:	6122      	str	r2, [r4, #16]
 80127b8:	f8cd a000 	str.w	sl, [sp]
 80127bc:	464b      	mov	r3, r9
 80127be:	aa03      	add	r2, sp, #12
 80127c0:	4621      	mov	r1, r4
 80127c2:	4640      	mov	r0, r8
 80127c4:	f7ff fee6 	bl	8012594 <_printf_common>
 80127c8:	3001      	adds	r0, #1
 80127ca:	d14a      	bne.n	8012862 <_printf_i+0x1f2>
 80127cc:	f04f 30ff 	mov.w	r0, #4294967295
 80127d0:	b004      	add	sp, #16
 80127d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127d6:	6823      	ldr	r3, [r4, #0]
 80127d8:	f043 0320 	orr.w	r3, r3, #32
 80127dc:	6023      	str	r3, [r4, #0]
 80127de:	4833      	ldr	r0, [pc, #204]	@ (80128ac <_printf_i+0x23c>)
 80127e0:	2778      	movs	r7, #120	@ 0x78
 80127e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80127e6:	6823      	ldr	r3, [r4, #0]
 80127e8:	6831      	ldr	r1, [r6, #0]
 80127ea:	061f      	lsls	r7, r3, #24
 80127ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80127f0:	d402      	bmi.n	80127f8 <_printf_i+0x188>
 80127f2:	065f      	lsls	r7, r3, #25
 80127f4:	bf48      	it	mi
 80127f6:	b2ad      	uxthmi	r5, r5
 80127f8:	6031      	str	r1, [r6, #0]
 80127fa:	07d9      	lsls	r1, r3, #31
 80127fc:	bf44      	itt	mi
 80127fe:	f043 0320 	orrmi.w	r3, r3, #32
 8012802:	6023      	strmi	r3, [r4, #0]
 8012804:	b11d      	cbz	r5, 801280e <_printf_i+0x19e>
 8012806:	2310      	movs	r3, #16
 8012808:	e7ac      	b.n	8012764 <_printf_i+0xf4>
 801280a:	4827      	ldr	r0, [pc, #156]	@ (80128a8 <_printf_i+0x238>)
 801280c:	e7e9      	b.n	80127e2 <_printf_i+0x172>
 801280e:	6823      	ldr	r3, [r4, #0]
 8012810:	f023 0320 	bic.w	r3, r3, #32
 8012814:	6023      	str	r3, [r4, #0]
 8012816:	e7f6      	b.n	8012806 <_printf_i+0x196>
 8012818:	4616      	mov	r6, r2
 801281a:	e7bd      	b.n	8012798 <_printf_i+0x128>
 801281c:	6833      	ldr	r3, [r6, #0]
 801281e:	6825      	ldr	r5, [r4, #0]
 8012820:	6961      	ldr	r1, [r4, #20]
 8012822:	1d18      	adds	r0, r3, #4
 8012824:	6030      	str	r0, [r6, #0]
 8012826:	062e      	lsls	r6, r5, #24
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	d501      	bpl.n	8012830 <_printf_i+0x1c0>
 801282c:	6019      	str	r1, [r3, #0]
 801282e:	e002      	b.n	8012836 <_printf_i+0x1c6>
 8012830:	0668      	lsls	r0, r5, #25
 8012832:	d5fb      	bpl.n	801282c <_printf_i+0x1bc>
 8012834:	8019      	strh	r1, [r3, #0]
 8012836:	2300      	movs	r3, #0
 8012838:	6123      	str	r3, [r4, #16]
 801283a:	4616      	mov	r6, r2
 801283c:	e7bc      	b.n	80127b8 <_printf_i+0x148>
 801283e:	6833      	ldr	r3, [r6, #0]
 8012840:	1d1a      	adds	r2, r3, #4
 8012842:	6032      	str	r2, [r6, #0]
 8012844:	681e      	ldr	r6, [r3, #0]
 8012846:	6862      	ldr	r2, [r4, #4]
 8012848:	2100      	movs	r1, #0
 801284a:	4630      	mov	r0, r6
 801284c:	f7ed fcd8 	bl	8000200 <memchr>
 8012850:	b108      	cbz	r0, 8012856 <_printf_i+0x1e6>
 8012852:	1b80      	subs	r0, r0, r6
 8012854:	6060      	str	r0, [r4, #4]
 8012856:	6863      	ldr	r3, [r4, #4]
 8012858:	6123      	str	r3, [r4, #16]
 801285a:	2300      	movs	r3, #0
 801285c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012860:	e7aa      	b.n	80127b8 <_printf_i+0x148>
 8012862:	6923      	ldr	r3, [r4, #16]
 8012864:	4632      	mov	r2, r6
 8012866:	4649      	mov	r1, r9
 8012868:	4640      	mov	r0, r8
 801286a:	47d0      	blx	sl
 801286c:	3001      	adds	r0, #1
 801286e:	d0ad      	beq.n	80127cc <_printf_i+0x15c>
 8012870:	6823      	ldr	r3, [r4, #0]
 8012872:	079b      	lsls	r3, r3, #30
 8012874:	d413      	bmi.n	801289e <_printf_i+0x22e>
 8012876:	68e0      	ldr	r0, [r4, #12]
 8012878:	9b03      	ldr	r3, [sp, #12]
 801287a:	4298      	cmp	r0, r3
 801287c:	bfb8      	it	lt
 801287e:	4618      	movlt	r0, r3
 8012880:	e7a6      	b.n	80127d0 <_printf_i+0x160>
 8012882:	2301      	movs	r3, #1
 8012884:	4632      	mov	r2, r6
 8012886:	4649      	mov	r1, r9
 8012888:	4640      	mov	r0, r8
 801288a:	47d0      	blx	sl
 801288c:	3001      	adds	r0, #1
 801288e:	d09d      	beq.n	80127cc <_printf_i+0x15c>
 8012890:	3501      	adds	r5, #1
 8012892:	68e3      	ldr	r3, [r4, #12]
 8012894:	9903      	ldr	r1, [sp, #12]
 8012896:	1a5b      	subs	r3, r3, r1
 8012898:	42ab      	cmp	r3, r5
 801289a:	dcf2      	bgt.n	8012882 <_printf_i+0x212>
 801289c:	e7eb      	b.n	8012876 <_printf_i+0x206>
 801289e:	2500      	movs	r5, #0
 80128a0:	f104 0619 	add.w	r6, r4, #25
 80128a4:	e7f5      	b.n	8012892 <_printf_i+0x222>
 80128a6:	bf00      	nop
 80128a8:	08016d15 	.word	0x08016d15
 80128ac:	08016d26 	.word	0x08016d26

080128b0 <__sflush_r>:
 80128b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80128b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128b8:	0716      	lsls	r6, r2, #28
 80128ba:	4605      	mov	r5, r0
 80128bc:	460c      	mov	r4, r1
 80128be:	d454      	bmi.n	801296a <__sflush_r+0xba>
 80128c0:	684b      	ldr	r3, [r1, #4]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	dc02      	bgt.n	80128cc <__sflush_r+0x1c>
 80128c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	dd48      	ble.n	801295e <__sflush_r+0xae>
 80128cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80128ce:	2e00      	cmp	r6, #0
 80128d0:	d045      	beq.n	801295e <__sflush_r+0xae>
 80128d2:	2300      	movs	r3, #0
 80128d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80128d8:	682f      	ldr	r7, [r5, #0]
 80128da:	6a21      	ldr	r1, [r4, #32]
 80128dc:	602b      	str	r3, [r5, #0]
 80128de:	d030      	beq.n	8012942 <__sflush_r+0x92>
 80128e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80128e2:	89a3      	ldrh	r3, [r4, #12]
 80128e4:	0759      	lsls	r1, r3, #29
 80128e6:	d505      	bpl.n	80128f4 <__sflush_r+0x44>
 80128e8:	6863      	ldr	r3, [r4, #4]
 80128ea:	1ad2      	subs	r2, r2, r3
 80128ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80128ee:	b10b      	cbz	r3, 80128f4 <__sflush_r+0x44>
 80128f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80128f2:	1ad2      	subs	r2, r2, r3
 80128f4:	2300      	movs	r3, #0
 80128f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80128f8:	6a21      	ldr	r1, [r4, #32]
 80128fa:	4628      	mov	r0, r5
 80128fc:	47b0      	blx	r6
 80128fe:	1c43      	adds	r3, r0, #1
 8012900:	89a3      	ldrh	r3, [r4, #12]
 8012902:	d106      	bne.n	8012912 <__sflush_r+0x62>
 8012904:	6829      	ldr	r1, [r5, #0]
 8012906:	291d      	cmp	r1, #29
 8012908:	d82b      	bhi.n	8012962 <__sflush_r+0xb2>
 801290a:	4a2a      	ldr	r2, [pc, #168]	@ (80129b4 <__sflush_r+0x104>)
 801290c:	410a      	asrs	r2, r1
 801290e:	07d6      	lsls	r6, r2, #31
 8012910:	d427      	bmi.n	8012962 <__sflush_r+0xb2>
 8012912:	2200      	movs	r2, #0
 8012914:	6062      	str	r2, [r4, #4]
 8012916:	04d9      	lsls	r1, r3, #19
 8012918:	6922      	ldr	r2, [r4, #16]
 801291a:	6022      	str	r2, [r4, #0]
 801291c:	d504      	bpl.n	8012928 <__sflush_r+0x78>
 801291e:	1c42      	adds	r2, r0, #1
 8012920:	d101      	bne.n	8012926 <__sflush_r+0x76>
 8012922:	682b      	ldr	r3, [r5, #0]
 8012924:	b903      	cbnz	r3, 8012928 <__sflush_r+0x78>
 8012926:	6560      	str	r0, [r4, #84]	@ 0x54
 8012928:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801292a:	602f      	str	r7, [r5, #0]
 801292c:	b1b9      	cbz	r1, 801295e <__sflush_r+0xae>
 801292e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012932:	4299      	cmp	r1, r3
 8012934:	d002      	beq.n	801293c <__sflush_r+0x8c>
 8012936:	4628      	mov	r0, r5
 8012938:	f7ff fb48 	bl	8011fcc <_free_r>
 801293c:	2300      	movs	r3, #0
 801293e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012940:	e00d      	b.n	801295e <__sflush_r+0xae>
 8012942:	2301      	movs	r3, #1
 8012944:	4628      	mov	r0, r5
 8012946:	47b0      	blx	r6
 8012948:	4602      	mov	r2, r0
 801294a:	1c50      	adds	r0, r2, #1
 801294c:	d1c9      	bne.n	80128e2 <__sflush_r+0x32>
 801294e:	682b      	ldr	r3, [r5, #0]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d0c6      	beq.n	80128e2 <__sflush_r+0x32>
 8012954:	2b1d      	cmp	r3, #29
 8012956:	d001      	beq.n	801295c <__sflush_r+0xac>
 8012958:	2b16      	cmp	r3, #22
 801295a:	d11e      	bne.n	801299a <__sflush_r+0xea>
 801295c:	602f      	str	r7, [r5, #0]
 801295e:	2000      	movs	r0, #0
 8012960:	e022      	b.n	80129a8 <__sflush_r+0xf8>
 8012962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012966:	b21b      	sxth	r3, r3
 8012968:	e01b      	b.n	80129a2 <__sflush_r+0xf2>
 801296a:	690f      	ldr	r7, [r1, #16]
 801296c:	2f00      	cmp	r7, #0
 801296e:	d0f6      	beq.n	801295e <__sflush_r+0xae>
 8012970:	0793      	lsls	r3, r2, #30
 8012972:	680e      	ldr	r6, [r1, #0]
 8012974:	bf08      	it	eq
 8012976:	694b      	ldreq	r3, [r1, #20]
 8012978:	600f      	str	r7, [r1, #0]
 801297a:	bf18      	it	ne
 801297c:	2300      	movne	r3, #0
 801297e:	eba6 0807 	sub.w	r8, r6, r7
 8012982:	608b      	str	r3, [r1, #8]
 8012984:	f1b8 0f00 	cmp.w	r8, #0
 8012988:	dde9      	ble.n	801295e <__sflush_r+0xae>
 801298a:	6a21      	ldr	r1, [r4, #32]
 801298c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801298e:	4643      	mov	r3, r8
 8012990:	463a      	mov	r2, r7
 8012992:	4628      	mov	r0, r5
 8012994:	47b0      	blx	r6
 8012996:	2800      	cmp	r0, #0
 8012998:	dc08      	bgt.n	80129ac <__sflush_r+0xfc>
 801299a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801299e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129a2:	81a3      	strh	r3, [r4, #12]
 80129a4:	f04f 30ff 	mov.w	r0, #4294967295
 80129a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ac:	4407      	add	r7, r0
 80129ae:	eba8 0800 	sub.w	r8, r8, r0
 80129b2:	e7e7      	b.n	8012984 <__sflush_r+0xd4>
 80129b4:	dfbffffe 	.word	0xdfbffffe

080129b8 <_fflush_r>:
 80129b8:	b538      	push	{r3, r4, r5, lr}
 80129ba:	690b      	ldr	r3, [r1, #16]
 80129bc:	4605      	mov	r5, r0
 80129be:	460c      	mov	r4, r1
 80129c0:	b913      	cbnz	r3, 80129c8 <_fflush_r+0x10>
 80129c2:	2500      	movs	r5, #0
 80129c4:	4628      	mov	r0, r5
 80129c6:	bd38      	pop	{r3, r4, r5, pc}
 80129c8:	b118      	cbz	r0, 80129d2 <_fflush_r+0x1a>
 80129ca:	6a03      	ldr	r3, [r0, #32]
 80129cc:	b90b      	cbnz	r3, 80129d2 <_fflush_r+0x1a>
 80129ce:	f7ff f8c3 	bl	8011b58 <__sinit>
 80129d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d0f3      	beq.n	80129c2 <_fflush_r+0xa>
 80129da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80129dc:	07d0      	lsls	r0, r2, #31
 80129de:	d404      	bmi.n	80129ea <_fflush_r+0x32>
 80129e0:	0599      	lsls	r1, r3, #22
 80129e2:	d402      	bmi.n	80129ea <_fflush_r+0x32>
 80129e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80129e6:	f7ff fae6 	bl	8011fb6 <__retarget_lock_acquire_recursive>
 80129ea:	4628      	mov	r0, r5
 80129ec:	4621      	mov	r1, r4
 80129ee:	f7ff ff5f 	bl	80128b0 <__sflush_r>
 80129f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80129f4:	07da      	lsls	r2, r3, #31
 80129f6:	4605      	mov	r5, r0
 80129f8:	d4e4      	bmi.n	80129c4 <_fflush_r+0xc>
 80129fa:	89a3      	ldrh	r3, [r4, #12]
 80129fc:	059b      	lsls	r3, r3, #22
 80129fe:	d4e1      	bmi.n	80129c4 <_fflush_r+0xc>
 8012a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a02:	f7ff fad9 	bl	8011fb8 <__retarget_lock_release_recursive>
 8012a06:	e7dd      	b.n	80129c4 <_fflush_r+0xc>

08012a08 <__swhatbuf_r>:
 8012a08:	b570      	push	{r4, r5, r6, lr}
 8012a0a:	460c      	mov	r4, r1
 8012a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a10:	2900      	cmp	r1, #0
 8012a12:	b096      	sub	sp, #88	@ 0x58
 8012a14:	4615      	mov	r5, r2
 8012a16:	461e      	mov	r6, r3
 8012a18:	da0d      	bge.n	8012a36 <__swhatbuf_r+0x2e>
 8012a1a:	89a3      	ldrh	r3, [r4, #12]
 8012a1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012a20:	f04f 0100 	mov.w	r1, #0
 8012a24:	bf14      	ite	ne
 8012a26:	2340      	movne	r3, #64	@ 0x40
 8012a28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012a2c:	2000      	movs	r0, #0
 8012a2e:	6031      	str	r1, [r6, #0]
 8012a30:	602b      	str	r3, [r5, #0]
 8012a32:	b016      	add	sp, #88	@ 0x58
 8012a34:	bd70      	pop	{r4, r5, r6, pc}
 8012a36:	466a      	mov	r2, sp
 8012a38:	f000 f896 	bl	8012b68 <_fstat_r>
 8012a3c:	2800      	cmp	r0, #0
 8012a3e:	dbec      	blt.n	8012a1a <__swhatbuf_r+0x12>
 8012a40:	9901      	ldr	r1, [sp, #4]
 8012a42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012a46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012a4a:	4259      	negs	r1, r3
 8012a4c:	4159      	adcs	r1, r3
 8012a4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012a52:	e7eb      	b.n	8012a2c <__swhatbuf_r+0x24>

08012a54 <__smakebuf_r>:
 8012a54:	898b      	ldrh	r3, [r1, #12]
 8012a56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a58:	079d      	lsls	r5, r3, #30
 8012a5a:	4606      	mov	r6, r0
 8012a5c:	460c      	mov	r4, r1
 8012a5e:	d507      	bpl.n	8012a70 <__smakebuf_r+0x1c>
 8012a60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012a64:	6023      	str	r3, [r4, #0]
 8012a66:	6123      	str	r3, [r4, #16]
 8012a68:	2301      	movs	r3, #1
 8012a6a:	6163      	str	r3, [r4, #20]
 8012a6c:	b003      	add	sp, #12
 8012a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a70:	ab01      	add	r3, sp, #4
 8012a72:	466a      	mov	r2, sp
 8012a74:	f7ff ffc8 	bl	8012a08 <__swhatbuf_r>
 8012a78:	9f00      	ldr	r7, [sp, #0]
 8012a7a:	4605      	mov	r5, r0
 8012a7c:	4639      	mov	r1, r7
 8012a7e:	4630      	mov	r0, r6
 8012a80:	f7fe ff52 	bl	8011928 <_malloc_r>
 8012a84:	b948      	cbnz	r0, 8012a9a <__smakebuf_r+0x46>
 8012a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a8a:	059a      	lsls	r2, r3, #22
 8012a8c:	d4ee      	bmi.n	8012a6c <__smakebuf_r+0x18>
 8012a8e:	f023 0303 	bic.w	r3, r3, #3
 8012a92:	f043 0302 	orr.w	r3, r3, #2
 8012a96:	81a3      	strh	r3, [r4, #12]
 8012a98:	e7e2      	b.n	8012a60 <__smakebuf_r+0xc>
 8012a9a:	89a3      	ldrh	r3, [r4, #12]
 8012a9c:	6020      	str	r0, [r4, #0]
 8012a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012aa2:	81a3      	strh	r3, [r4, #12]
 8012aa4:	9b01      	ldr	r3, [sp, #4]
 8012aa6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012aaa:	b15b      	cbz	r3, 8012ac4 <__smakebuf_r+0x70>
 8012aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ab0:	4630      	mov	r0, r6
 8012ab2:	f000 f86b 	bl	8012b8c <_isatty_r>
 8012ab6:	b128      	cbz	r0, 8012ac4 <__smakebuf_r+0x70>
 8012ab8:	89a3      	ldrh	r3, [r4, #12]
 8012aba:	f023 0303 	bic.w	r3, r3, #3
 8012abe:	f043 0301 	orr.w	r3, r3, #1
 8012ac2:	81a3      	strh	r3, [r4, #12]
 8012ac4:	89a3      	ldrh	r3, [r4, #12]
 8012ac6:	431d      	orrs	r5, r3
 8012ac8:	81a5      	strh	r5, [r4, #12]
 8012aca:	e7cf      	b.n	8012a6c <__smakebuf_r+0x18>

08012acc <_putc_r>:
 8012acc:	b570      	push	{r4, r5, r6, lr}
 8012ace:	460d      	mov	r5, r1
 8012ad0:	4614      	mov	r4, r2
 8012ad2:	4606      	mov	r6, r0
 8012ad4:	b118      	cbz	r0, 8012ade <_putc_r+0x12>
 8012ad6:	6a03      	ldr	r3, [r0, #32]
 8012ad8:	b90b      	cbnz	r3, 8012ade <_putc_r+0x12>
 8012ada:	f7ff f83d 	bl	8011b58 <__sinit>
 8012ade:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012ae0:	07d8      	lsls	r0, r3, #31
 8012ae2:	d405      	bmi.n	8012af0 <_putc_r+0x24>
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	0599      	lsls	r1, r3, #22
 8012ae8:	d402      	bmi.n	8012af0 <_putc_r+0x24>
 8012aea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012aec:	f7ff fa63 	bl	8011fb6 <__retarget_lock_acquire_recursive>
 8012af0:	68a3      	ldr	r3, [r4, #8]
 8012af2:	3b01      	subs	r3, #1
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	60a3      	str	r3, [r4, #8]
 8012af8:	da05      	bge.n	8012b06 <_putc_r+0x3a>
 8012afa:	69a2      	ldr	r2, [r4, #24]
 8012afc:	4293      	cmp	r3, r2
 8012afe:	db12      	blt.n	8012b26 <_putc_r+0x5a>
 8012b00:	b2eb      	uxtb	r3, r5
 8012b02:	2b0a      	cmp	r3, #10
 8012b04:	d00f      	beq.n	8012b26 <_putc_r+0x5a>
 8012b06:	6823      	ldr	r3, [r4, #0]
 8012b08:	1c5a      	adds	r2, r3, #1
 8012b0a:	6022      	str	r2, [r4, #0]
 8012b0c:	701d      	strb	r5, [r3, #0]
 8012b0e:	b2ed      	uxtb	r5, r5
 8012b10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012b12:	07da      	lsls	r2, r3, #31
 8012b14:	d405      	bmi.n	8012b22 <_putc_r+0x56>
 8012b16:	89a3      	ldrh	r3, [r4, #12]
 8012b18:	059b      	lsls	r3, r3, #22
 8012b1a:	d402      	bmi.n	8012b22 <_putc_r+0x56>
 8012b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b1e:	f7ff fa4b 	bl	8011fb8 <__retarget_lock_release_recursive>
 8012b22:	4628      	mov	r0, r5
 8012b24:	bd70      	pop	{r4, r5, r6, pc}
 8012b26:	4629      	mov	r1, r5
 8012b28:	4622      	mov	r2, r4
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	f7ff f925 	bl	8011d7a <__swbuf_r>
 8012b30:	4605      	mov	r5, r0
 8012b32:	e7ed      	b.n	8012b10 <_putc_r+0x44>

08012b34 <memmove>:
 8012b34:	4288      	cmp	r0, r1
 8012b36:	b510      	push	{r4, lr}
 8012b38:	eb01 0402 	add.w	r4, r1, r2
 8012b3c:	d902      	bls.n	8012b44 <memmove+0x10>
 8012b3e:	4284      	cmp	r4, r0
 8012b40:	4623      	mov	r3, r4
 8012b42:	d807      	bhi.n	8012b54 <memmove+0x20>
 8012b44:	1e43      	subs	r3, r0, #1
 8012b46:	42a1      	cmp	r1, r4
 8012b48:	d008      	beq.n	8012b5c <memmove+0x28>
 8012b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b52:	e7f8      	b.n	8012b46 <memmove+0x12>
 8012b54:	4402      	add	r2, r0
 8012b56:	4601      	mov	r1, r0
 8012b58:	428a      	cmp	r2, r1
 8012b5a:	d100      	bne.n	8012b5e <memmove+0x2a>
 8012b5c:	bd10      	pop	{r4, pc}
 8012b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b66:	e7f7      	b.n	8012b58 <memmove+0x24>

08012b68 <_fstat_r>:
 8012b68:	b538      	push	{r3, r4, r5, lr}
 8012b6a:	4d07      	ldr	r5, [pc, #28]	@ (8012b88 <_fstat_r+0x20>)
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	4604      	mov	r4, r0
 8012b70:	4608      	mov	r0, r1
 8012b72:	4611      	mov	r1, r2
 8012b74:	602b      	str	r3, [r5, #0]
 8012b76:	f7f0 fcae 	bl	80034d6 <_fstat>
 8012b7a:	1c43      	adds	r3, r0, #1
 8012b7c:	d102      	bne.n	8012b84 <_fstat_r+0x1c>
 8012b7e:	682b      	ldr	r3, [r5, #0]
 8012b80:	b103      	cbz	r3, 8012b84 <_fstat_r+0x1c>
 8012b82:	6023      	str	r3, [r4, #0]
 8012b84:	bd38      	pop	{r3, r4, r5, pc}
 8012b86:	bf00      	nop
 8012b88:	2000a5bc 	.word	0x2000a5bc

08012b8c <_isatty_r>:
 8012b8c:	b538      	push	{r3, r4, r5, lr}
 8012b8e:	4d06      	ldr	r5, [pc, #24]	@ (8012ba8 <_isatty_r+0x1c>)
 8012b90:	2300      	movs	r3, #0
 8012b92:	4604      	mov	r4, r0
 8012b94:	4608      	mov	r0, r1
 8012b96:	602b      	str	r3, [r5, #0]
 8012b98:	f7f0 fcad 	bl	80034f6 <_isatty>
 8012b9c:	1c43      	adds	r3, r0, #1
 8012b9e:	d102      	bne.n	8012ba6 <_isatty_r+0x1a>
 8012ba0:	682b      	ldr	r3, [r5, #0]
 8012ba2:	b103      	cbz	r3, 8012ba6 <_isatty_r+0x1a>
 8012ba4:	6023      	str	r3, [r4, #0]
 8012ba6:	bd38      	pop	{r3, r4, r5, pc}
 8012ba8:	2000a5bc 	.word	0x2000a5bc

08012bac <memcpy>:
 8012bac:	440a      	add	r2, r1
 8012bae:	4291      	cmp	r1, r2
 8012bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8012bb4:	d100      	bne.n	8012bb8 <memcpy+0xc>
 8012bb6:	4770      	bx	lr
 8012bb8:	b510      	push	{r4, lr}
 8012bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012bc2:	4291      	cmp	r1, r2
 8012bc4:	d1f9      	bne.n	8012bba <memcpy+0xe>
 8012bc6:	bd10      	pop	{r4, pc}

08012bc8 <_realloc_r>:
 8012bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bcc:	4680      	mov	r8, r0
 8012bce:	4615      	mov	r5, r2
 8012bd0:	460c      	mov	r4, r1
 8012bd2:	b921      	cbnz	r1, 8012bde <_realloc_r+0x16>
 8012bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd8:	4611      	mov	r1, r2
 8012bda:	f7fe bea5 	b.w	8011928 <_malloc_r>
 8012bde:	b92a      	cbnz	r2, 8012bec <_realloc_r+0x24>
 8012be0:	f7ff f9f4 	bl	8011fcc <_free_r>
 8012be4:	2400      	movs	r4, #0
 8012be6:	4620      	mov	r0, r4
 8012be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bec:	f000 f81a 	bl	8012c24 <_malloc_usable_size_r>
 8012bf0:	4285      	cmp	r5, r0
 8012bf2:	4606      	mov	r6, r0
 8012bf4:	d802      	bhi.n	8012bfc <_realloc_r+0x34>
 8012bf6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012bfa:	d8f4      	bhi.n	8012be6 <_realloc_r+0x1e>
 8012bfc:	4629      	mov	r1, r5
 8012bfe:	4640      	mov	r0, r8
 8012c00:	f7fe fe92 	bl	8011928 <_malloc_r>
 8012c04:	4607      	mov	r7, r0
 8012c06:	2800      	cmp	r0, #0
 8012c08:	d0ec      	beq.n	8012be4 <_realloc_r+0x1c>
 8012c0a:	42b5      	cmp	r5, r6
 8012c0c:	462a      	mov	r2, r5
 8012c0e:	4621      	mov	r1, r4
 8012c10:	bf28      	it	cs
 8012c12:	4632      	movcs	r2, r6
 8012c14:	f7ff ffca 	bl	8012bac <memcpy>
 8012c18:	4621      	mov	r1, r4
 8012c1a:	4640      	mov	r0, r8
 8012c1c:	f7ff f9d6 	bl	8011fcc <_free_r>
 8012c20:	463c      	mov	r4, r7
 8012c22:	e7e0      	b.n	8012be6 <_realloc_r+0x1e>

08012c24 <_malloc_usable_size_r>:
 8012c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c28:	1f18      	subs	r0, r3, #4
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	bfbc      	itt	lt
 8012c2e:	580b      	ldrlt	r3, [r1, r0]
 8012c30:	18c0      	addlt	r0, r0, r3
 8012c32:	4770      	bx	lr

08012c34 <_init>:
 8012c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c36:	bf00      	nop
 8012c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c3a:	bc08      	pop	{r3}
 8012c3c:	469e      	mov	lr, r3
 8012c3e:	4770      	bx	lr

08012c40 <_fini>:
 8012c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c42:	bf00      	nop
 8012c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c46:	bc08      	pop	{r3}
 8012c48:	469e      	mov	lr, r3
 8012c4a:	4770      	bx	lr
