
usb_AND_touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a4c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004100  08012bfc  08012bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016cfc  08016cfc  000182ec  2**0
                  CONTENTS
  4 .ARM          00000008  08016cfc  08016cfc  00017cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d04  08016d04  000182ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016d04  08016d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016d08  08016d08  00017d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ec  20000000  08016d0c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000182ec  2**0
                  CONTENTS
 10 .bss          0000a2d8  200002ec  200002ec  000182ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a5c4  2000a5c4  000182ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000182ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d827  00000000  00000000  0001831c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a34  00000000  00000000  00045b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025c8  00000000  00000000  0004c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d39  00000000  00000000  0004eb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d8c3  00000000  00000000  00050879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000308f7  00000000  00000000  0007e13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4c46  00000000  00000000  000aea33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a3679  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a92c  00000000  00000000  001a36bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001adfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012be4 	.word	0x08012be4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002f0 	.word	0x200002f0
 80001ec:	08012be4 	.word	0x08012be4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <USBH_HID_EventCallback>:
static uint8_t USB_BUSY = 0;
char qr_code_data[MAX_LINES][MAX_LINE_LENGTH] = { { '\0' } }; //static initializes strings with all null characters
HID_KEYBD_Info_TypeDef *Keyboard_Info;

/***DORJEE YOU HAVE TO CHANGE USBH_HID.H WHEN YOU GENERATE CODE****/
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) { //2.6s for 54 lines
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f00e fddd 	bl	800f158 <USBH_HID_GetKeybdInfo>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a41      	ldr	r2, [pc, #260]	@ (80006a8 <USBH_HID_EventCallback+0x118>)
 80005a2:	6013      	str	r3, [r2, #0]
	char key = USBH_HID_GetASCIICode(Keyboard_Info);
 80005a4:	4b40      	ldr	r3, [pc, #256]	@ (80006a8 <USBH_HID_EventCallback+0x118>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f00e fe7d 	bl	800f2a8 <USBH_HID_GetASCIICode>
 80005ae:	4603      	mov	r3, r0
 80005b0:	72fb      	strb	r3, [r7, #11]
	//disable the touchscreen interrupt functionality when usb transmission starts
	//after tab it calls itself one more time, so disable after i=0
	if (i == 1) {
 80005b2:	4b3e      	ldr	r3, [pc, #248]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d102      	bne.n	80005c0 <USBH_HID_EventCallback+0x30>
		USB_BUSY = 1;
 80005ba:	4b3d      	ldr	r3, [pc, #244]	@ (80006b0 <USBH_HID_EventCallback+0x120>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
	}

	//store incoming chars. ignore null characters that come in for some reason
	if ((key != NULL_CHAR) && (key != SOH)) {
 80005c0:	7afb      	ldrb	r3, [r7, #11]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d011      	beq.n	80005ea <USBH_HID_EventCallback+0x5a>
 80005c6:	7afb      	ldrb	r3, [r7, #11]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d00e      	beq.n	80005ea <USBH_HID_EventCallback+0x5a>
		qr_code_data[i][j] = key;
 80005cc:	4b37      	ldr	r3, [pc, #220]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b38      	ldr	r3, [pc, #224]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4938      	ldr	r1, [pc, #224]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 80005d6:	0152      	lsls	r2, r2, #5
 80005d8:	440a      	add	r2, r1
 80005da:	4413      	add	r3, r2
 80005dc:	7afa      	ldrb	r2, [r7, #11]
 80005de:	701a      	strb	r2, [r3, #0]
		j++;
 80005e0:	4b34      	ldr	r3, [pc, #208]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a33      	ldr	r2, [pc, #204]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005e8:	6013      	str	r3, [r2, #0]
	}
	//handle new line
	if (key == NEWLINE_CHAR) {
 80005ea:	7afb      	ldrb	r3, [r7, #11]
 80005ec:	2b0a      	cmp	r3, #10
 80005ee:	d107      	bne.n	8000600 <USBH_HID_EventCallback+0x70>
		j = 0;
 80005f0:	4b30      	ldr	r3, [pc, #192]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
		i++;
 80005f6:	4b2d      	ldr	r3, [pc, #180]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	4a2b      	ldr	r2, [pc, #172]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005fe:	6013      	str	r3, [r2, #0]
	}
	//tab is the end of the qr code
	if (key == TAB) {
 8000600:	7afb      	ldrb	r3, [r7, #11]
 8000602:	2b09      	cmp	r3, #9
 8000604:	d14c      	bne.n	80006a0 <USBH_HID_EventCallback+0x110>
		for (int a=0; a<15; a++) {
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e002      	b.n	8000612 <USBH_HID_EventCallback+0x82>
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	3301      	adds	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b0e      	cmp	r3, #14
 8000616:	ddf9      	ble.n	800060c <USBH_HID_EventCallback+0x7c>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
			//printf("%s", qr_code_data[a]);
		}
		__disable_irq();
		//output_protocol(qr_code_data, i + 1);
		//check if the title is (10 chars + newline char) or less
		if (strlen(qr_code_data[0]) < (MAX_TITLE_SIZE + 1)) {
 800061c:	4826      	ldr	r0, [pc, #152]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 800061e:	f7ff fde7 	bl	80001f0 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	2b0c      	cmp	r3, #12
 8000626:	d835      	bhi.n	8000694 <USBH_HID_EventCallback+0x104>
			uint8_t freeSectorNumber = getFreeSector();
 8000628:	f000 fed2 	bl	80013d0 <getFreeSector>
 800062c:	4603      	mov	r3, r0
 800062e:	72bb      	strb	r3, [r7, #10]
			//printf("free sector is %d\n", freeSectorNumber);
			//only store the protocol if all memory isnt full
			if (freeSectorNumber <= 10) { //i only got 10 pages rn
 8000630:	7abb      	ldrb	r3, [r7, #10]
 8000632:	2b0a      	cmp	r3, #10
 8000634:	d829      	bhi.n	800068a <USBH_HID_EventCallback+0xfa>
				//printf("why\n");
				storeProtocol(qr_code_data, freeSectorNumber);
 8000636:	7abb      	ldrb	r3, [r7, #10]
 8000638:	4619      	mov	r1, r3
 800063a:	481f      	ldr	r0, [pc, #124]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 800063c:	f000 fcf4 	bl	8001028 <storeProtocol>
				//go to the page num the new protocol is on
				pageNum = freeSectorNumber;
 8000640:	4a1e      	ldr	r2, [pc, #120]	@ (80006bc <USBH_HID_EventCallback+0x12c>)
 8000642:	7abb      	ldrb	r3, [r7, #10]
 8000644:	7013      	strb	r3, [r2, #0]
				DrawMainPage(pageNum);
 8000646:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <USBH_HID_EventCallback+0x12c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f001 f944 	bl	80018d8 <DrawMainPage>
				currentPage = PAGE_MAIN;
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <USBH_HID_EventCallback+0x130>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < MAX_LINES; a++) {
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	e013      	b.n	8000684 <USBH_HID_EventCallback+0xf4>
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e00a      	b.n	8000678 <USBH_HID_EventCallback+0xe8>
						qr_code_data[a][b] = '\0';
 8000662:	4a15      	ldr	r2, [pc, #84]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	015b      	lsls	r3, r3, #5
 8000668:	441a      	add	r2, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4413      	add	r3, r2
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2b1f      	cmp	r3, #31
 800067c:	ddf1      	ble.n	8000662 <USBH_HID_EventCallback+0xd2>
				for (int a = 0; a < MAX_LINES; a++) {
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	3301      	adds	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	2b63      	cmp	r3, #99	@ 0x63
 8000688:	dde8      	ble.n	800065c <USBH_HID_EventCallback+0xcc>
  __ASM volatile ("cpsie i" : : : "memory");
 800068a:	b662      	cpsie	i
}
 800068c:	bf00      	nop
					}
				}

			}
			__enable_irq();
			USB_BUSY = 0;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <USBH_HID_EventCallback+0x120>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
		j = 0;
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
	}

}
 80006a0:	bf00      	nop
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20008f94 	.word	0x20008f94
 80006ac:	20000608 	.word	0x20000608
 80006b0:	20008311 	.word	0x20008311
 80006b4:	2000060c 	.word	0x2000060c
 80006b8:	20008314 	.word	0x20008314
 80006bc:	200001de 	.word	0x200001de
 80006c0:	20000605 	.word	0x20000605

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f004 fe6a 	bl	80053a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f846 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 fb02 	bl	8000cd8 <MX_GPIO_Init>
  MX_CRC_Init();
 80006d4:	f000 f8ac 	bl	8000830 <MX_CRC_Init>
  MX_DMA2D_Init();
 80006d8:	f000 f8be 	bl	8000858 <MX_DMA2D_Init>
  MX_FMC_Init();
 80006dc:	f000 faac 	bl	8000c38 <MX_FMC_Init>
  MX_I2C3_Init();
 80006e0:	f000 f8ec 	bl	80008bc <MX_I2C3_Init>
  MX_LTDC_Init();
 80006e4:	f000 f92a 	bl	800093c <MX_LTDC_Init>
  MX_SPI5_Init();
 80006e8:	f000 f9a8 	bl	8000a3c <MX_SPI5_Init>
  MX_TIM1_Init();
 80006ec:	f000 f9dc 	bl	8000aa8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80006f0:	f000 fa78 	bl	8000be4 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80006f4:	f010 fdae 	bl	8011254 <MX_USB_HOST_Init>
  MX_TIM10_Init();
 80006f8:	f000 fa26 	bl	8000b48 <MX_TIM10_Init>
  MX_UART5_Init();
 80006fc:	f000 fa48 	bl	8000b90 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	printf("USB and Touchscreen Test\n");
 8000700:	4812      	ldr	r0, [pc, #72]	@ (800074c <main+0x88>)
 8000702:	f011 faa7 	bl	8011c54 <puts>
//	erase_sector(6);
//	erase_sector(7);
//	erase_sector(8);
//	erase_sector(9);
//	erase_sector(10);
	printf("Sectors may have been erased\n");
 8000706:	4812      	ldr	r0, [pc, #72]	@ (8000750 <main+0x8c>)
 8000708:	f011 faa4 	bl	8011c54 <puts>

	/******* TOUCHSCREEN INIT**********/
	BSP_LCD_Init();
 800070c:	f003 feee 	bl	80044ec <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 8000710:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000714:	2000      	movs	r0, #0
 8000716:	f003 ff6b 	bl	80045f0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800071a:	f04f 30ff 	mov.w	r0, #4294967295
 800071e:	f004 f817 	bl	8004750 <BSP_LCD_Clear>
	Touch_Init();
 8000722:	f001 f8b1 	bl	8001888 <Touch_Init>

	/******** START PROGRAM ************/
	DrawMainPage(1);
 8000726:	2001      	movs	r0, #1
 8000728:	f001 f8d6 	bl	80018d8 <DrawMainPage>
	HAL_TIM_Base_Start_IT(&htim10);   //start Interrupt Timer
 800072c:	4809      	ldr	r0, [pc, #36]	@ (8000754 <main+0x90>)
 800072e:	f00b fcf1 	bl	800c114 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000732:	f010 fdb5 	bl	80112a0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

		if (checkTouchFlag) {
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <main+0x94>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d0f9      	beq.n	8000732 <main+0x6e>
			HandleTouch();
 800073e:	f001 fcef 	bl	8002120 <HandleTouch>
			checkTouchFlag = 0;
 8000742:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <main+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8000748:	e7f3      	b.n	8000732 <main+0x6e>
 800074a:	bf00      	nop
 800074c:	08012bfc 	.word	0x08012bfc
 8000750:	08012c18 	.word	0x08012c18
 8000754:	200004ec 	.word	0x200004ec
 8000758:	20000604 	.word	0x20000604

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	@ 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	2230      	movs	r2, #48	@ 0x30
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f011 fb72 	bl	8011e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <SystemClock_Config+0xcc>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	4a27      	ldr	r2, [pc, #156]	@ (8000828 <SystemClock_Config+0xcc>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000790:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <SystemClock_Config+0xcc>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	4b22      	ldr	r3, [pc, #136]	@ (800082c <SystemClock_Config+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a21      	ldr	r2, [pc, #132]	@ (800082c <SystemClock_Config+0xd0>)
 80007a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <SystemClock_Config+0xd0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007da:	2307      	movs	r3, #7
 80007dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f009 ff24 	bl	800a630 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ee:	f002 f91f 	bl	8002a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000808:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2105      	movs	r1, #5
 8000810:	4618      	mov	r0, r3
 8000812:	f00a f985 	bl	800ab20 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800081c:	f002 f908 	bl	8002a30 <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	@ 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_CRC_Init+0x20>)
 8000836:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <MX_CRC_Init+0x24>)
 8000838:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_CRC_Init+0x20>)
 800083c:	f004 fef8 	bl	8005630 <HAL_CRC_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000846:	f002 f8f3 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000308 	.word	0x20000308
 8000854:	40023000 	.word	0x40023000

08000858 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800085c:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 800085e:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <MX_DMA2D_Init+0x60>)
 8000860:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000876:	2200      	movs	r2, #0
 8000878:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 800087c:	2200      	movs	r2, #0
 800087e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000882:	2200      	movs	r2, #0
 8000884:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000888:	2200      	movs	r2, #0
 800088a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800088c:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 800088e:	f005 f8a9 	bl	80059e4 <HAL_DMA2D_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000898:	f002 f8ca 	bl	8002a30 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800089c:	2101      	movs	r1, #1
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 80008a0:	f005 fb0e 	bl	8005ec0 <HAL_DMA2D_ConfigLayer>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008aa:	f002 f8c1 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000310 	.word	0x20000310
 80008b8:	4002b000 	.word	0x4002b000

080008bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000934 <MX_I2C3_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000938 <MX_I2C3_Init+0x7c>)
 80008ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008cc:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d8:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80008e6:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ec:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008f8:	480d      	ldr	r0, [pc, #52]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008fa:	f008 fa29 	bl	8008d50 <HAL_I2C_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000904:	f002 f894 	bl	8002a30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000908:	2100      	movs	r1, #0
 800090a:	4809      	ldr	r0, [pc, #36]	@ (8000930 <MX_I2C3_Init+0x74>)
 800090c:	f009 fa82 	bl	8009e14 <HAL_I2CEx_ConfigAnalogFilter>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000916:	f002 f88b 	bl	8002a30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_I2C3_Init+0x74>)
 800091e:	f009 fab5 	bl	8009e8c <HAL_I2CEx_ConfigDigitalFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000928:	f002 f882 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000350 	.word	0x20000350
 8000934:	40005c00 	.word	0x40005c00
 8000938:	000186a0 	.word	0x000186a0

0800093c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	@ 0x38
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2234      	movs	r2, #52	@ 0x34
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f011 fa83 	bl	8011e54 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800094e:	4b39      	ldr	r3, [pc, #228]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000950:	4a39      	ldr	r2, [pc, #228]	@ (8000a38 <MX_LTDC_Init+0xfc>)
 8000952:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000954:	4b37      	ldr	r3, [pc, #220]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800095a:	4b36      	ldr	r3, [pc, #216]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000960:	4b34      	ldr	r3, [pc, #208]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000966:	4b33      	ldr	r3, [pc, #204]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800096c:	4b31      	ldr	r3, [pc, #196]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800096e:	2209      	movs	r2, #9
 8000970:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000972:	4b30      	ldr	r3, [pc, #192]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000974:	2201      	movs	r2, #1
 8000976:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000978:	4b2e      	ldr	r3, [pc, #184]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800097a:	221d      	movs	r2, #29
 800097c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800097e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000980:	2203      	movs	r2, #3
 8000982:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000984:	4b2b      	ldr	r3, [pc, #172]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000986:	f240 120d 	movw	r2, #269	@ 0x10d
 800098a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800098c:	4b29      	ldr	r3, [pc, #164]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800098e:	f240 1243 	movw	r2, #323	@ 0x143
 8000992:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000994:	4b27      	ldr	r3, [pc, #156]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000996:	f240 1217 	movw	r2, #279	@ 0x117
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800099e:	f240 1247 	movw	r2, #327	@ 0x147
 80009a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80009a4:	4b23      	ldr	r3, [pc, #140]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80009ac:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009bc:	481d      	ldr	r0, [pc, #116]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 80009be:	f009 faa5 	bl	8009f0c <HAL_LTDC_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80009c8:	f002 f832 	bl	8002a30 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80009d0:	23f0      	movs	r3, #240	@ 0xf0
 80009d2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80009d8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009dc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009de:	2302      	movs	r3, #2
 80009e0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80009e2:	23ff      	movs	r3, #255	@ 0xff
 80009e4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009ee:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009f0:	2307      	movs	r3, #7
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80009f4:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 80009fa:	23f0      	movs	r3, #240	@ 0xf0
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 80009fe:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a02:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000a1e:	f009 fc07 	bl	800a230 <HAL_LTDC_ConfigLayer>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000a28:	f002 f802 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	3738      	adds	r7, #56	@ 0x38
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200003a4 	.word	0x200003a4
 8000a38:	40016800 	.word	0x40016800

08000a3c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a42:	4a18      	ldr	r2, [pc, #96]	@ (8000aa4 <MX_SPI5_Init+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a4c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a6c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a70:	2218      	movs	r2, #24
 8000a72:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a88:	220a      	movs	r2, #10
 8000a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a8e:	f00a fcea 	bl	800b466 <HAL_SPI_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a98:	f001 ffca 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000044c 	.word	0x2000044c
 8000aa4:	40015000 	.word	0x40015000

08000aa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b44 <MX_TIM1_Init+0x9c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000acc:	22a7      	movs	r2, #167	@ 0xa7
 8000ace:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000adc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af0:	4813      	ldr	r0, [pc, #76]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000af2:	f00b fabf 	bl	800c074 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000afc:	f001 ff98 	bl	8002a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000b0e:	f00b fc61 	bl	800c3d4 <HAL_TIM_ConfigClockSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b18:	f001 ff8a 	bl	8002a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000b2a:	f00b fe89 	bl	800c840 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b34:	f001 ff7c 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200004a4 	.word	0x200004a4
 8000b44:	40010000 	.word	0x40010000

08000b48 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <MX_TIM10_Init+0x44>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1680-1;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b54:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000b58:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000b66:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b70:	2280      	movs	r2, #128	@ 0x80
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b76:	f00b fa7d 	bl	800c074 <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000b80:	f001 ff56 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200004ec 	.word	0x200004ec
 8000b8c:	40014400 	.word	0x40014400

08000b90 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <MX_UART5_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bc8:	f00b feca 	bl	800c960 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f001 ff2d 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000534 	.word	0x20000534
 8000be0:	40005000 	.word	0x40005000

08000be4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <MX_USART1_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c1c:	f00b fea0 	bl	800c960 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f001 ff03 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000057c 	.word	0x2000057c
 8000c34:	40011000 	.word	0x40011000

08000c38 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
 8000c4c:	615a      	str	r2, [r3, #20]
 8000c4e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c52:	4a20      	ldr	r2, [pc, #128]	@ (8000cd4 <MX_FMC_Init+0x9c>)
 8000c54:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c64:	2204      	movs	r2, #4
 8000c66:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c6a:	2210      	movs	r2, #16
 8000c6c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c70:	2240      	movs	r2, #64	@ 0x40
 8000c72:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c76:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000c7a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c88:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000cba:	f00a fb43 	bl	800b344 <HAL_SDRAM_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000cc4:	f001 feb4 	bl	8002a30 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200005c4 	.word	0x200005c4
 8000cd4:	a0000140 	.word	0xa0000140

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	@ 0x38
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
 8000cf2:	4b83      	ldr	r3, [pc, #524]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a82      	ldr	r2, [pc, #520]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b80      	ldr	r3, [pc, #512]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	623b      	str	r3, [r7, #32]
 8000d08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a7b      	ldr	r2, [pc, #492]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d14:	f043 0320 	orr.w	r3, r3, #32
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b79      	ldr	r3, [pc, #484]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0320 	and.w	r3, r3, #32
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	4b75      	ldr	r3, [pc, #468]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a74      	ldr	r2, [pc, #464]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b72      	ldr	r3, [pc, #456]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	4b6e      	ldr	r3, [pc, #440]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a6d      	ldr	r2, [pc, #436]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b6b      	ldr	r3, [pc, #428]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b67      	ldr	r3, [pc, #412]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a66      	ldr	r2, [pc, #408]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b64      	ldr	r3, [pc, #400]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b60      	ldr	r3, [pc, #384]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a5f      	ldr	r2, [pc, #380]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b59      	ldr	r3, [pc, #356]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a58      	ldr	r2, [pc, #352]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000da0:	f043 0310 	orr.w	r3, r3, #16
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b56      	ldr	r3, [pc, #344]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b52      	ldr	r3, [pc, #328]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a51      	ldr	r2, [pc, #324]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b4f      	ldr	r3, [pc, #316]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2116      	movs	r1, #22
 8000dd2:	484c      	ldr	r0, [pc, #304]	@ (8000f04 <MX_GPIO_Init+0x22c>)
 8000dd4:	f005 fe6e 	bl	8006ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2180      	movs	r1, #128	@ 0x80
 8000ddc:	484a      	ldr	r0, [pc, #296]	@ (8000f08 <MX_GPIO_Init+0x230>)
 8000dde:	f005 fe69 	bl	8006ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000de8:	4848      	ldr	r0, [pc, #288]	@ (8000f0c <MX_GPIO_Init+0x234>)
 8000dea:	f005 fe63 	bl	8006ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000df4:	4846      	ldr	r0, [pc, #280]	@ (8000f10 <MX_GPIO_Init+0x238>)
 8000df6:	f005 fe5d 	bl	8006ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000dfa:	2316      	movs	r3, #22
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	483c      	ldr	r0, [pc, #240]	@ (8000f04 <MX_GPIO_Init+0x22c>)
 8000e12:	f005 fb97 	bl	8006544 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000e16:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e1c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4836      	ldr	r0, [pc, #216]	@ (8000f08 <MX_GPIO_Init+0x230>)
 8000e2e:	f005 fb89 	bl	8006544 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e32:	2380      	movs	r3, #128	@ 0x80
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	482f      	ldr	r0, [pc, #188]	@ (8000f08 <MX_GPIO_Init+0x230>)
 8000e4a:	f005 fb7b 	bl	8006544 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e52:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4828      	ldr	r0, [pc, #160]	@ (8000f04 <MX_GPIO_Init+0x22c>)
 8000e64:	f005 fb6e 	bl	8006544 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4826      	ldr	r0, [pc, #152]	@ (8000f14 <MX_GPIO_Init+0x23c>)
 8000e7c:	f005 fb62 	bl	8006544 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000e80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	481d      	ldr	r0, [pc, #116]	@ (8000f0c <MX_GPIO_Init+0x234>)
 8000e96:	f005 fb55 	bl	8006544 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e9a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4816      	ldr	r0, [pc, #88]	@ (8000f0c <MX_GPIO_Init+0x234>)
 8000eb4:	f005 fb46 	bl	8006544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000eb8:	2320      	movs	r3, #32
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480e      	ldr	r0, [pc, #56]	@ (8000f0c <MX_GPIO_Init+0x234>)
 8000ed4:	f005 fb36 	bl	8006544 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ed8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <MX_GPIO_Init+0x238>)
 8000ef2:	f005 fb27 	bl	8006544 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3738      	adds	r7, #56	@ 0x38
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020c00 	.word	0x40020c00
 8000f10:	40021800 	.word	0x40021800
 8000f14:	40020400 	.word	0x40020400

08000f18 <_write>:
void output_protocol(char line[MAX_LINES][MAX_LINE_LENGTH], int lines) {
	for (int i = 0; i < lines; i++) {
		printf("%s\n", line[i]);
	}
}
int _write(int file, char *ptr, int len) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <_write+0x28>)
 8000f30:	f00b fd66 	bl	800ca00 <HAL_UART_Transmit>
	return len;
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000057c 	.word	0x2000057c

08000f44 <erase_sector>:
/**
 * @brief: Erase the memory from an entire sector
 * @param Sector: The sector number
 * @retval: none
 */
void erase_sector(uint32_t Sector) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();  // Unlock flash to enable erasing
 8000f4c:	f005 f93a 	bl	80061c4 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(sector_mapping(Sector), VOLTAGE_RANGE_3);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 fcf3 	bl	800293c <sector_mapping>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f005 faa4 	bl	80064a8 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();  // Lock flash after erasing
 8000f60:	f005 f952 	bl	8006208 <HAL_FLASH_Lock>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <write_to_flash>:
 * @param flash_address: address of string in flash memory that will be stored
 * @retval: none
 * Note: PLEASE UNLOCK AND LOCK FLASH BEFORE AND AFTER USING THIS FUNCTION,
 * IT DOES NOT DO IT ITSELF
 */
void write_to_flash(const char *data, uint32_t flash_address) {
 8000f6c:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();  // Unlock flash for writing

	for (uint8_t i = 0; i < strlen(data); i++) {
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e012      	b.n	8000fa4 <write_to_flash+0x38>
		//printf("%c", data[i]);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address + i, data[i]); // Write to flash
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	18d1      	adds	r1, r2, r3
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4698      	mov	r8, r3
 8000f92:	4691      	mov	r9, r2
 8000f94:	4642      	mov	r2, r8
 8000f96:	464b      	mov	r3, r9
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f005 f8bf 	bl	800611c <HAL_FLASH_Program>
	for (uint8_t i = 0; i < strlen(data); i++) {
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	7bfc      	ldrb	r4, [r7, #15]
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff f922 	bl	80001f0 <strlen>
 8000fac:	4603      	mov	r3, r0
 8000fae:	429c      	cmp	r4, r3
 8000fb0:	d3e5      	bcc.n	8000f7e <write_to_flash+0x12>
	}

	//HAL_FLASH_Lock();  // Lock flash after writing
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08000fbe <read_from_flash>:
 * @param flash_address: address of string in flash memory that will be read
 * @retval: failure if its reading trash from flash memory.
 * it literally does not read from flash btw if it detects 0xFF at the start
 * that means your output buffer will not be updated
 */
uint8_t read_from_flash(char *output, uint32_t flash_address) {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
	// Read byte by byte from flash memory, get a whole string in output variable
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e014      	b.n	8000ff8 <read_from_flash+0x3a>
		char key = *(char*) (flash_address + i);
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	73bb      	strb	r3, [r7, #14]
		//check if reading trash (0xFF) from flash memory
		if (key == 0xFF) {
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	2bff      	cmp	r3, #255	@ 0xff
 8000fdc:	d104      	bne.n	8000fe8 <read_from_flash+0x2a>
			if (i == 0) {
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d106      	bne.n	8000ff2 <read_from_flash+0x34>
				return 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e01b      	b.n	8001020 <read_from_flash+0x62>
			}
		} else {
			output[i] = key;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	7bba      	ldrb	r2, [r7, #14]
 8000ff0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	2b1f      	cmp	r3, #31
 8000ffc:	d9e7      	bls.n	8000fce <read_from_flash+0x10>
		}
	}
	output[strlen(output)] = '\0'; //add null to the end of string for printing
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff f8f6 	bl	80001f0 <strlen>
 8001004:	4602      	mov	r2, r0
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
	//printf("output is %s and strlen: %d\n", output, strlen(output));

	//error handling. G-codes are less than 32 chars, anything more is trash
	if (strlen(output) < MAX_LINE_LENGTH) {
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff f8ee 	bl	80001f0 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	2b1f      	cmp	r3, #31
 8001018:	d801      	bhi.n	800101e <read_from_flash+0x60>
		return 1;
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <read_from_flash+0x62>
	} else {
		return 0;
 800101e:	2300      	movs	r3, #0
	}

}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <storeProtocol>:
 * @param gcode_file: array of G-code commands
 * @param sector: which sector to store protocol in
 * @retval: failure if sector is "full"
 */
uint8_t storeProtocol(char new_protocol[MAX_LINES][MAX_LINE_LENGTH],
		uint32_t sector) {
 8001028:	b580      	push	{r7, lr}
 800102a:	f5ad 5d16 	sub.w	sp, sp, #9600	@ 0x2580
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8001036:	f2a3 539c 	subw	r3, r3, #1436	@ 0x59c
 800103a:	6018      	str	r0, [r3, #0]
 800103c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8001040:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 8001044:	6019      	str	r1, [r3, #0]

	//initialize variables
	int i = 0;  //protocol index
 8001046:	2300      	movs	r3, #0
 8001048:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800104c:	f102 021c 	add.w	r2, r2, #28
 8001050:	6013      	str	r3, [r2, #0]
	int j = 0;  //line index
 8001052:	2300      	movs	r3, #0
 8001054:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001058:	f102 0218 	add.w	r2, r2, #24
 800105c:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 800105e:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8001062:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 8001066:	4618      	mov	r0, r3
 8001068:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800106c:	461a      	mov	r2, r3
 800106e:	2100      	movs	r1, #0
 8001070:	f010 fef0 	bl	8011e54 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 8001074:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8001078:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f001 fbf5 	bl	800286c <get_sector_address>
 8001082:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001086:	f103 0314 	add.w	r3, r3, #20
 800108a:	6018      	str	r0, [r3, #0]

	//check if all sectors are full before storing a protocol
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 800108c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8001090:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f000 f971 	bl	800137c <get_num_protocols_in_sector>
 800109a:	4603      	mov	r3, r0
 800109c:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80010a0:	f102 0213 	add.w	r2, r2, #19
 80010a4:	7013      	strb	r3, [r2, #0]
	printf("num_protocols: %d\n", num_protocols);
 80010a6:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80010aa:	f103 0313 	add.w	r3, r3, #19
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	48b1      	ldr	r0, [pc, #708]	@ (8001378 <storeProtocol+0x350>)
 80010b4:	f010 fd5e 	bl	8011b74 <iprintf>
	if (num_protocols == MAX_PROTOCOLS_IN_SECTOR) {
 80010b8:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80010bc:	f103 0313 	add.w	r3, r3, #19
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d101      	bne.n	80010ca <storeProtocol+0xa2>
		return 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e150      	b.n	800136c <storeProtocol+0x344>
	}

	//read existing protocols in sector and put into the temp protocol storage
	for (i = 0; i < num_protocols; i++) {
 80010ca:	2300      	movs	r3, #0
 80010cc:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80010d0:	f102 021c 	add.w	r2, r2, #28
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e05a      	b.n	800118e <storeProtocol+0x166>
		for (j = 0; j < MAX_LINES; j++) {
 80010d8:	2300      	movs	r3, #0
 80010da:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80010de:	f102 0218 	add.w	r2, r2, #24
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	e041      	b.n	800116a <storeProtocol+0x142>
			//get the address for the current line in the current protocol
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80010e6:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80010ea:	f103 031c 	add.w	r3, r3, #28
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80010f4:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 80010f8:	461a      	mov	r2, r3
 80010fa:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80010fe:	f103 0318 	add.w	r3, r3, #24
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	015b      	lsls	r3, r3, #5
 8001106:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8001108:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800110c:	f102 0214 	add.w	r2, r2, #20
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	4413      	add	r3, r2
 8001114:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001118:	f102 0208 	add.w	r2, r2, #8
 800111c:	6013      	str	r3, [r2, #0]
			//read lines from memory into buffer until you reach garbage
			read_from_flash(protocolStorage[i][j], temp_address); //only updates protocolStorage if its a valid line from memory
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	3b18      	subs	r3, #24
 8001124:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001128:	f102 021c 	add.w	r2, r2, #28
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	2164      	movs	r1, #100	@ 0x64
 8001130:	fb02 f101 	mul.w	r1, r2, r1
 8001134:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001138:	f102 0218 	add.w	r2, r2, #24
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	440a      	add	r2, r1
 8001140:	0152      	lsls	r2, r2, #5
 8001142:	4413      	add	r3, r2
 8001144:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001148:	f102 0208 	add.w	r2, r2, #8
 800114c:	6811      	ldr	r1, [r2, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff35 	bl	8000fbe <read_from_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8001154:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001158:	f103 0318 	add.w	r3, r3, #24
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001164:	f102 0218 	add.w	r2, r2, #24
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800116e:	f103 0318 	add.w	r3, r3, #24
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b63      	cmp	r3, #99	@ 0x63
 8001176:	ddb6      	ble.n	80010e6 <storeProtocol+0xbe>
	for (i = 0; i < num_protocols; i++) {
 8001178:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800117c:	f103 031c 	add.w	r3, r3, #28
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001188:	f102 021c 	add.w	r2, r2, #28
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001192:	f103 0313 	add.w	r3, r3, #19
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800119c:	f102 021c 	add.w	r2, r2, #28
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	db98      	blt.n	80010d8 <storeProtocol+0xb0>
	}
	//output: we now have the existing protocols in the buffer.
	//they only have their first number of lines in. the rest of lines are null

	//put the new protocol into the temp protocol storage
	for (j = 0; j < MAX_LINES; j++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80011ac:	f102 0218 	add.w	r2, r2, #24
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e03b      	b.n	800122c <storeProtocol+0x204>
		//copy each line into the buffer from new protocol, should be null terminated from qr scanner
		if (new_protocol[j][0] != '\0') {
 80011b4:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80011b8:	f103 0318 	add.w	r3, r3, #24
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	015b      	lsls	r3, r3, #5
 80011c0:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 80011c4:	f2a2 529c 	subw	r2, r2, #1436	@ 0x59c
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d021      	beq.n	8001216 <storeProtocol+0x1ee>
			strcpy(protocolStorage[i][j], new_protocol[j]);
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	3b18      	subs	r3, #24
 80011d8:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80011dc:	f102 021c 	add.w	r2, r2, #28
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	2164      	movs	r1, #100	@ 0x64
 80011e4:	fb02 f101 	mul.w	r1, r2, r1
 80011e8:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80011ec:	f102 0218 	add.w	r2, r2, #24
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	440a      	add	r2, r1
 80011f4:	0152      	lsls	r2, r2, #5
 80011f6:	1898      	adds	r0, r3, r2
 80011f8:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80011fc:	f103 0318 	add.w	r3, r3, #24
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	015b      	lsls	r3, r3, #5
 8001204:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 8001208:	f2a2 529c 	subw	r2, r2, #1436	@ 0x59c
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f010 feaa 	bl	8011f6a <strcpy>
	for (j = 0; j < MAX_LINES; j++) {
 8001216:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800121a:	f103 0318 	add.w	r3, r3, #24
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001226:	f102 0218 	add.w	r2, r2, #24
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001230:	f103 0318 	add.w	r3, r3, #24
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b63      	cmp	r3, #99	@ 0x63
 8001238:	ddbc      	ble.n	80011b4 <storeProtocol+0x18c>
	}
	//we now have the new protocol in the buffer.
	//it only has the first number of lines in. the rest of lines are null

	//write existing protocols and new protocol to flash memory, string-by-string
	erase_sector(sector); //erase sector before writing
 800123a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 800123e:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	f7ff fe7e 	bl	8000f44 <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 8001248:	f004 ffbc 	bl	80061c4 <HAL_FLASH_Unlock>
	for (i = 0; i < (num_protocols + 1); i++) {
 800124c:	2300      	movs	r3, #0
 800124e:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001252:	f102 021c 	add.w	r2, r2, #28
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e078      	b.n	800134c <storeProtocol+0x324>
		for (j = 0; j < MAX_LINES; j++) {
 800125a:	2300      	movs	r3, #0
 800125c:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001260:	f102 0218 	add.w	r2, r2, #24
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e05f      	b.n	8001328 <storeProtocol+0x300>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			if ((new_protocol[j][0] != '\0') && (new_protocol[j][0] != 0xFF)) {
 8001268:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800126c:	f103 0318 	add.w	r3, r3, #24
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	015b      	lsls	r3, r3, #5
 8001274:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 8001278:	f2a2 529c 	subw	r2, r2, #1436	@ 0x59c
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d045      	beq.n	8001312 <storeProtocol+0x2ea>
 8001286:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800128a:	f103 0318 	add.w	r3, r3, #24
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	015b      	lsls	r3, r3, #5
 8001292:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 8001296:	f2a2 529c 	subw	r2, r2, #1436	@ 0x59c
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2bff      	cmp	r3, #255	@ 0xff
 80012a2:	d036      	beq.n	8001312 <storeProtocol+0x2ea>
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80012a4:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80012a8:	f103 031c 	add.w	r3, r3, #28
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80012b2:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 80012b6:	461a      	mov	r2, r3
 80012b8:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80012bc:	f103 0318 	add.w	r3, r3, #24
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	015b      	lsls	r3, r3, #5
 80012c4:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80012c6:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80012ca:	f102 0214 	add.w	r2, r2, #20
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80012d6:	f102 020c 	add.w	r2, r2, #12
 80012da:	6013      	str	r3, [r2, #0]
				//printf("len: %d and data: %s", strlen(protocolStorage[i][j]), protocolStorage[i][j]);
				write_to_flash(protocolStorage[i][j], temp_address);
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	3b18      	subs	r3, #24
 80012e2:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80012e6:	f102 021c 	add.w	r2, r2, #28
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	2164      	movs	r1, #100	@ 0x64
 80012ee:	fb02 f101 	mul.w	r1, r2, r1
 80012f2:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80012f6:	f102 0218 	add.w	r2, r2, #24
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	440a      	add	r2, r1
 80012fe:	0152      	lsls	r2, r2, #5
 8001300:	4413      	add	r3, r2
 8001302:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001306:	f102 020c 	add.w	r2, r2, #12
 800130a:	6811      	ldr	r1, [r2, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe2d 	bl	8000f6c <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8001312:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001316:	f103 0318 	add.w	r3, r3, #24
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001322:	f102 0218 	add.w	r2, r2, #24
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800132c:	f103 0318 	add.w	r3, r3, #24
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b63      	cmp	r3, #99	@ 0x63
 8001334:	dd98      	ble.n	8001268 <storeProtocol+0x240>
	for (i = 0; i < (num_protocols + 1); i++) {
 8001336:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800133a:	f103 031c 	add.w	r3, r3, #28
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001346:	f102 021c 	add.w	r2, r2, #28
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001350:	f103 0313 	add.w	r3, r3, #19
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800135a:	f102 021c 	add.w	r2, r2, #28
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	f77f af7a 	ble.w	800125a <storeProtocol+0x232>
			}
		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 8001366:	f004 ff4f 	bl	8006208 <HAL_FLASH_Lock>

	//output:flash memory now has the lines of protocol storage in there
	//the remaining space is still 0xFF in flash
	return 1;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	f507 5716 	add.w	r7, r7, #9600	@ 0x2580
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	08012c38 	.word	0x08012c38

0800137c <get_num_protocols_in_sector>:

//return number of protocols in the sector
uint8_t get_num_protocols_in_sector(uint32_t sector) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	uint32_t flash_address = get_sector_address(sector);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f001 fa71 	bl	800286c <get_sector_address>
 800138a:	6138      	str	r0, [r7, #16]

	uint8_t count = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]
	uint8_t i = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8001394:	2300      	movs	r3, #0
 8001396:	75bb      	strb	r3, [r7, #22]
 8001398:	e012      	b.n	80013c0 <get_num_protocols_in_sector+0x44>
		uint8_t first_char = *(uint8_t*) (flash_address + i * PROTOCOL_SIZE);
 800139a:	7dbb      	ldrb	r3, [r7, #22]
 800139c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80013a0:	fb02 f303 	mul.w	r3, r2, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	73fb      	strb	r3, [r7, #15]
		//memory in flash is default 0xFF
		if (first_char != 0xFF) {
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	2bff      	cmp	r3, #255	@ 0xff
 80013b2:	d002      	beq.n	80013ba <get_num_protocols_in_sector+0x3e>
			count++;
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	3301      	adds	r3, #1
 80013b8:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80013ba:	7dbb      	ldrb	r3, [r7, #22]
 80013bc:	3301      	adds	r3, #1
 80013be:	75bb      	strb	r3, [r7, #22]
 80013c0:	7dbb      	ldrb	r3, [r7, #22]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d9e9      	bls.n	800139a <get_num_protocols_in_sector+0x1e>
			//return i;
		}
	}
	return count;
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <getFreeSector>:

//check each sector sequentially for any space.
//return the first sector number you find that has space
uint8_t getFreeSector(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
	uint8_t i = 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
	//check every sector starting at 1
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e01f      	b.n	8001420 <getFreeSector+0x50>
		//check each potential protocol slot in the current sector
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 80013e0:	2300      	movs	r3, #0
 80013e2:	73bb      	strb	r3, [r7, #14]
 80013e4:	e016      	b.n	8001414 <getFreeSector+0x44>
			//check first char of the given protocol in the current sector
			uint32_t flash_address = get_sector_address(i) + j * PROTOCOL_SIZE;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 fa3f 	bl	800286c <get_sector_address>
 80013ee:	4602      	mov	r2, r0
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80013f6:	fb01 f303 	mul.w	r3, r1, r3
 80013fa:	4413      	add	r3, r2
 80013fc:	60bb      	str	r3, [r7, #8]
			char first_char = *(char*) (flash_address);
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
			//if memory address is empty, this sector is free
			if (first_char == 0xFF) {
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2bff      	cmp	r3, #255	@ 0xff
 8001408:	d101      	bne.n	800140e <getFreeSector+0x3e>
				return i;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	e00e      	b.n	800142c <getFreeSector+0x5c>
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 800140e:	7bbb      	ldrb	r3, [r7, #14]
 8001410:	3301      	adds	r3, #1
 8001412:	73bb      	strb	r3, [r7, #14]
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d9e5      	bls.n	80013e6 <getFreeSector+0x16>
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	3301      	adds	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b0e      	cmp	r3, #14
 8001424:	d9dc      	bls.n	80013e0 <getFreeSector+0x10>
			}
		}
	}
	//if somehow all sectors are full, return 15 or higher (16 in this case)
	return i + 1;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	3301      	adds	r3, #1
 800142a:	b2db      	uxtb	r3, r3
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <transmitProtocol>:

/**
 * @brief: Transmit protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 */
void transmitProtocol(uint32_t sector, uint32_t offset) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	@ 0x30
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
 8001452:	615a      	str	r2, [r3, #20]
 8001454:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f001 fa08 	bl	800286c <get_sector_address>
 800145c:	4602      	mov	r2, r0
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001464:	fb01 f303 	mul.w	r3, r1, r3
 8001468:	4413      	add	r3, r2
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28

	//printf("\nNew Protocol\n"); //just for debugging

	//we need to process up to 1028 G-code commands
	//but if we run into an invalid string, gcode file is over
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 800146c:	2300      	movs	r3, #0
 800146e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001472:	e028      	b.n	80014c6 <transmitProtocol+0x92>
		//an alternative to resetting the temp buffer is to only read up to newline
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	2220      	movs	r2, #32
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f010 fce9 	bl	8011e54 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 8001482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001486:	015b      	lsls	r3, r3, #5
 8001488:	461a      	mov	r2, r3
 800148a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148c:	441a      	add	r2, r3
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fd92 	bl	8000fbe <read_from_flash>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00d      	beq.n	80014bc <transmitProtocol+0x88>
			//printf("%s", output);
//			HAL_UART_Transmit(&huart1, (uint8_t*) output, strlen(output),
//					HAL_MAX_DELAY);
			HAL_UART_Transmit(&huart5, (uint8_t*) output, strlen(output),
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe fea3 	bl	80001f0 <strlen>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	f107 0108 	add.w	r1, r7, #8
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	4808      	ldr	r0, [pc, #32]	@ (80014d8 <transmitProtocol+0xa4>)
 80014b8:	f00b faa2 	bl	800ca00 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80014bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014c0:	3301      	adds	r3, #1
 80014c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80014c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014ca:	2b63      	cmp	r3, #99	@ 0x63
 80014cc:	d9d2      	bls.n	8001474 <transmitProtocol+0x40>
								HAL_MAX_DELAY);
		}
	}
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	3730      	adds	r7, #48	@ 0x30
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000534 	.word	0x20000534

080014dc <queueProtocol>:

/**
 * @brief: Queue protocol from flash memory to RAM buffer
 * @param sector: which sector the protocol is stored in
 */
void queueProtocol(uint32_t sector, uint32_t offset) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	@ 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]
 80014fa:	615a      	str	r2, [r3, #20]
 80014fc:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f001 f9b4 	bl	800286c <get_sector_address>
 8001504:	4602      	mov	r2, r0
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	4413      	add	r3, r2
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28

	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8001514:	2300      	movs	r3, #0
 8001516:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800151a:	e02c      	b.n	8001576 <queueProtocol+0x9a>
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	2220      	movs	r2, #32
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f010 fc95 	bl	8011e54 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 800152a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800152e:	015b      	lsls	r3, r3, #5
 8001530:	461a      	mov	r2, r3
 8001532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001534:	441a      	add	r2, r3
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fd3e 	bl	8000fbe <read_from_flash>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d011      	beq.n	800156c <queueProtocol+0x90>
			strcpy(queueBuffer[queueSize][i], output);
 8001548:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <queueProtocol+0xac>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001552:	2264      	movs	r2, #100	@ 0x64
 8001554:	fb01 f202 	mul.w	r2, r1, r2
 8001558:	4413      	add	r3, r2
 800155a:	015b      	lsls	r3, r3, #5
 800155c:	4a0b      	ldr	r2, [pc, #44]	@ (800158c <queueProtocol+0xb0>)
 800155e:	4413      	add	r3, r2
 8001560:	f107 0208 	add.w	r2, r7, #8
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f010 fcff 	bl	8011f6a <strcpy>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 800156c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001570:	3301      	adds	r3, #1
 8001572:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001576:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800157a:	2b63      	cmp	r3, #99	@ 0x63
 800157c:	d9ce      	bls.n	800151c <queueProtocol+0x40>
		}
	}
}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	3730      	adds	r7, #48	@ 0x30
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20008310 	.word	0x20008310
 800158c:	20000610 	.word	0x20000610

08001590 <transmitQueuedProtocols>:

/**
 * @brief: Transmit queued protocols from RAM buffer to ESP32 via UART string-by-string
 * @param queueSize:
 */
void transmitQueuedProtocols(uint8_t queueSize) {
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < queueSize; i++) {
 800159a:	2300      	movs	r3, #0
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	e028      	b.n	80015f2 <transmitQueuedProtocols+0x62>
		for (uint8_t j = 0; j < MAX_LINES; j++) {
 80015a0:	2300      	movs	r3, #0
 80015a2:	73bb      	strb	r3, [r7, #14]
 80015a4:	e01f      	b.n	80015e6 <transmitQueuedProtocols+0x56>
			HAL_UART_Transmit(&huart1, (uint8_t*) queueBuffer[i][j],
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	7bbb      	ldrb	r3, [r7, #14]
 80015aa:	2164      	movs	r1, #100	@ 0x64
 80015ac:	fb01 f202 	mul.w	r2, r1, r2
 80015b0:	4413      	add	r3, r2
 80015b2:	015b      	lsls	r3, r3, #5
 80015b4:	4a13      	ldr	r2, [pc, #76]	@ (8001604 <transmitQueuedProtocols+0x74>)
 80015b6:	189c      	adds	r4, r3, r2
					strlen(queueBuffer[i][j]), HAL_MAX_DELAY);
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	7bbb      	ldrb	r3, [r7, #14]
 80015bc:	2164      	movs	r1, #100	@ 0x64
 80015be:	fb01 f202 	mul.w	r2, r1, r2
 80015c2:	4413      	add	r3, r2
 80015c4:	015b      	lsls	r3, r3, #5
 80015c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001604 <transmitQueuedProtocols+0x74>)
 80015c8:	4413      	add	r3, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe fe10 	bl	80001f0 <strlen>
 80015d0:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) queueBuffer[i][j],
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
 80015d8:	4621      	mov	r1, r4
 80015da:	480b      	ldr	r0, [pc, #44]	@ (8001608 <transmitQueuedProtocols+0x78>)
 80015dc:	f00b fa10 	bl	800ca00 <HAL_UART_Transmit>
		for (uint8_t j = 0; j < MAX_LINES; j++) {
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	3301      	adds	r3, #1
 80015e4:	73bb      	strb	r3, [r7, #14]
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	2b63      	cmp	r3, #99	@ 0x63
 80015ea:	d9dc      	bls.n	80015a6 <transmitQueuedProtocols+0x16>
	for (uint8_t i = 0; i < queueSize; i++) {
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	3301      	adds	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3d2      	bcc.n	80015a0 <transmitQueuedProtocols+0x10>
		}
	}
}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	20000610 	.word	0x20000610
 8001608:	2000057c 	.word	0x2000057c

0800160c <deleteProtocol>:
 * @brief: Delete protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 * @param offset: the exact slot in the sector the protocol is stored in
 * @retval: none
 */
void deleteProtocol(uint32_t sector, uint32_t offset) {
 800160c:	b580      	push	{r7, lr}
 800160e:	f5ad 5d17 	sub.w	sp, sp, #9664	@ 0x25c0
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 800161a:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800161e:	6018      	str	r0, [r3, #0]
 8001620:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8001624:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 8001628:	6019      	str	r1, [r3, #0]
	//initialize variables
	int i = 0;  //protocol index
 800162a:	2300      	movs	r3, #0
 800162c:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001630:	f102 021c 	add.w	r2, r2, #28
 8001634:	6013      	str	r3, [r2, #0]
	int j = 0;  //line index
 8001636:	2300      	movs	r3, #0
 8001638:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 800163c:	f102 0218 	add.w	r2, r2, #24
 8001640:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 8001642:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8001646:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 800164a:	4618      	mov	r0, r3
 800164c:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001650:	461a      	mov	r2, r3
 8001652:	2100      	movs	r1, #0
 8001654:	f010 fbfe 	bl	8011e54 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 8001658:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 800165c:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	f001 f903 	bl	800286c <get_sector_address>
 8001666:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 800166a:	f103 0314 	add.w	r3, r3, #20
 800166e:	6018      	str	r0, [r3, #0]
	char trashLine[MAX_LINE_LENGTH];
	memset(trashLine, 0xFF, sizeof(trashLine));
 8001670:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001674:	3b38      	subs	r3, #56	@ 0x38
 8001676:	2220      	movs	r2, #32
 8001678:	21ff      	movs	r1, #255	@ 0xff
 800167a:	4618      	mov	r0, r3
 800167c:	f010 fbea 	bl	8011e54 <memset>
	char nullLine[MAX_LINE_LENGTH];
	memset(nullLine, 0x00, sizeof(nullLine));
 8001680:	f107 0320 	add.w	r3, r7, #32
 8001684:	3b18      	subs	r3, #24
 8001686:	2220      	movs	r2, #32
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f010 fbe2 	bl	8011e54 <memset>
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 8001690:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8001694:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001698:	6818      	ldr	r0, [r3, #0]
 800169a:	f7ff fe6f 	bl	800137c <get_num_protocols_in_sector>
 800169e:	4603      	mov	r3, r0
 80016a0:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80016a4:	f102 0213 	add.w	r2, r2, #19
 80016a8:	7013      	strb	r3, [r2, #0]

	//copy all protocols in sector to local buffer
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80016b0:	f102 021c 	add.w	r2, r2, #28
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e05a      	b.n	800176e <deleteProtocol+0x162>
		for (j = 0; j < MAX_LINES; j++) {
 80016b8:	2300      	movs	r3, #0
 80016ba:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80016be:	f102 0218 	add.w	r2, r2, #24
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e041      	b.n	800174a <deleteProtocol+0x13e>
			//get the address for the current line in the current protocol
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80016c6:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80016ca:	f103 031c 	add.w	r3, r3, #28
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80016d4:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 80016d8:	461a      	mov	r2, r3
 80016da:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80016de:	f103 0318 	add.w	r3, r3, #24
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	015b      	lsls	r3, r3, #5
 80016e6:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80016e8:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80016ec:	f102 0214 	add.w	r2, r2, #20
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80016f8:	f102 0208 	add.w	r2, r2, #8
 80016fc:	6013      	str	r3, [r2, #0]
			//read lines from memory into buffer until you reach garbage
			read_from_flash(protocolStorage[i][j], temp_address); //only updates protocolStorage if its a valid line from memory
 80016fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001702:	3b18      	subs	r3, #24
 8001704:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001708:	f102 021c 	add.w	r2, r2, #28
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	2164      	movs	r1, #100	@ 0x64
 8001710:	fb02 f101 	mul.w	r1, r2, r1
 8001714:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001718:	f102 0218 	add.w	r2, r2, #24
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	440a      	add	r2, r1
 8001720:	0152      	lsls	r2, r2, #5
 8001722:	4413      	add	r3, r2
 8001724:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001728:	f102 0208 	add.w	r2, r2, #8
 800172c:	6811      	ldr	r1, [r2, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fc45 	bl	8000fbe <read_from_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8001734:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001738:	f103 0318 	add.w	r3, r3, #24
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001744:	f102 0218 	add.w	r2, r2, #24
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 800174e:	f103 0318 	add.w	r3, r3, #24
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b63      	cmp	r3, #99	@ 0x63
 8001756:	ddb6      	ble.n	80016c6 <deleteProtocol+0xba>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8001758:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 800175c:	f103 031c 	add.w	r3, r3, #28
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001768:	f102 021c 	add.w	r2, r2, #28
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001772:	f103 031c 	add.w	r3, r3, #28
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b02      	cmp	r3, #2
 800177a:	dd9d      	ble.n	80016b8 <deleteProtocol+0xac>
		}
	}


	//write existing protocols except the one to be deleted back to flash
	erase_sector(sector); //erase sector before writing
 800177c:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8001780:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	f7ff fbdd 	bl	8000f44 <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 800178a:	f004 fd1b 	bl	80061c4 <HAL_FLASH_Unlock>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 800178e:	2300      	movs	r3, #0
 8001790:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001794:	f102 021c 	add.w	r2, r2, #28
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e066      	b.n	800186a <deleteProtocol+0x25e>
		for (j = 0; j < MAX_LINES; j++) {
 800179c:	2300      	movs	r3, #0
 800179e:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80017a2:	f102 0218 	add.w	r2, r2, #24
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e04d      	b.n	8001846 <deleteProtocol+0x23a>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80017aa:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80017ae:	f103 031c 	add.w	r3, r3, #28
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80017b8:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 80017bc:	461a      	mov	r2, r3
 80017be:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80017c2:	f103 0318 	add.w	r3, r3, #24
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	015b      	lsls	r3, r3, #5
 80017ca:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80017cc:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80017d0:	f102 0214 	add.w	r2, r2, #20
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80017dc:	f102 020c 	add.w	r2, r2, #12
 80017e0:	6013      	str	r3, [r2, #0]
				if (i != offset)
 80017e2:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80017e6:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80017f0:	f102 021c 	add.w	r2, r2, #28
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d01a      	beq.n	8001830 <deleteProtocol+0x224>
				{
					//printf("len: %d and data: %s", strlen(protocolStorage[i][j]), protocolStorage[i][j]);
					write_to_flash(protocolStorage[i][j], temp_address);
 80017fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017fe:	3b18      	subs	r3, #24
 8001800:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001804:	f102 021c 	add.w	r2, r2, #28
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	2164      	movs	r1, #100	@ 0x64
 800180c:	fb02 f101 	mul.w	r1, r2, r1
 8001810:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001814:	f102 0218 	add.w	r2, r2, #24
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	440a      	add	r2, r1
 800181c:	0152      	lsls	r2, r2, #5
 800181e:	4413      	add	r3, r2
 8001820:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001824:	f102 020c 	add.w	r2, r2, #12
 8001828:	6811      	ldr	r1, [r2, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fb9e 	bl	8000f6c <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8001830:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001834:	f103 0318 	add.w	r3, r3, #24
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001840:	f102 0218 	add.w	r2, r2, #24
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 800184a:	f103 0318 	add.w	r3, r3, #24
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b63      	cmp	r3, #99	@ 0x63
 8001852:	ddaa      	ble.n	80017aa <deleteProtocol+0x19e>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8001854:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001858:	f103 031c 	add.w	r3, r3, #28
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001864:	f102 021c 	add.w	r2, r2, #28
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 800186e:	f103 031c 	add.w	r3, r3, #28
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b02      	cmp	r3, #2
 8001876:	dd91      	ble.n	800179c <deleteProtocol+0x190>
				}

		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 8001878:	f004 fcc6 	bl	8006208 <HAL_FLASH_Lock>
}
 800187c:	bf00      	nop
 800187e:	f507 5717 	add.w	r7, r7, #9664	@ 0x25c0
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <Touch_Init>:
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, number);
}

/******************** Touchscreen *********************/

void Touch_Init(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	if (BSP_TS_Init(240, 320) != TS_OK) {
 800188c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001890:	20f0      	movs	r0, #240	@ 0xf0
 8001892:	f003 fc99 	bl	80051c8 <BSP_TS_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d009      	beq.n	80018b0 <Touch_Init+0x28>
		BSP_LCD_DisplayStringAt(0, 10, (uint8_t*) "Failure", CENTER_MODE);
 800189c:	2301      	movs	r3, #1
 800189e:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <Touch_Init+0x40>)
 80018a0:	210a      	movs	r1, #10
 80018a2:	2000      	movs	r0, #0
 80018a4:	f002 ffc0 	bl	8004828 <BSP_LCD_DisplayStringAt>
		printf("Touchscreen Initialization failure\n");
 80018a8:	4808      	ldr	r0, [pc, #32]	@ (80018cc <Touch_Init+0x44>)
 80018aa:	f010 f9d3 	bl	8011c54 <puts>
	} else {
		BSP_LCD_DisplayStringAt(0, 300, (uint8_t*) "Success", CENTER_MODE);
		printf("Touchscreen Initialization success\n");
	}
}
 80018ae:	e009      	b.n	80018c4 <Touch_Init+0x3c>
		BSP_LCD_DisplayStringAt(0, 300, (uint8_t*) "Success", CENTER_MODE);
 80018b0:	2301      	movs	r3, #1
 80018b2:	4a07      	ldr	r2, [pc, #28]	@ (80018d0 <Touch_Init+0x48>)
 80018b4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80018b8:	2000      	movs	r0, #0
 80018ba:	f002 ffb5 	bl	8004828 <BSP_LCD_DisplayStringAt>
		printf("Touchscreen Initialization success\n");
 80018be:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <Touch_Init+0x4c>)
 80018c0:	f010 f9c8 	bl	8011c54 <puts>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	08012c4c 	.word	0x08012c4c
 80018cc:	08012c54 	.word	0x08012c54
 80018d0:	08012c78 	.word	0x08012c78
 80018d4:	08012c80 	.word	0x08012c80

080018d8 <DrawMainPage>:
/**
 * @brief: Draw main page and handle button label and status updates
 * @param: page_num: determines which page should be drawn from 1-10
 * @retval: none
 */
void DrawMainPage(uint8_t page_num) {
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b0a6      	sub	sp, #152	@ 0x98
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
	//Draw "Protocol Title" box
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80018e2:	f04f 30ff 	mov.w	r0, #4294967295
 80018e6:	f002 ff33 	bl	8004750 <BSP_LCD_Clear>
	char empty[20] = "Empty\n"; //strings from flash memory come with newline at end
 80018ea:	4a66      	ldr	r2, [pc, #408]	@ (8001a84 <DrawMainPage+0x1ac>)
 80018ec:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80018f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018f4:	6018      	str	r0, [r3, #0]
 80018f6:	3304      	adds	r3, #4
 80018f8:	8019      	strh	r1, [r3, #0]
 80018fa:	3302      	adds	r3, #2
 80018fc:	0c0a      	lsrs	r2, r1, #16
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	f107 0387 	add.w	r3, r7, #135	@ 0x87
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	731a      	strb	r2, [r3, #12]
	char pageTitle[20] = "";
 800190e:	2300      	movs	r3, #0
 8001910:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001912:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Page %d", page_num);
 8001920:	79fa      	ldrb	r2, [r7, #7]
 8001922:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001926:	4958      	ldr	r1, [pc, #352]	@ (8001a88 <DrawMainPage+0x1b0>)
 8001928:	4618      	mov	r0, r3
 800192a:	f010 f99b 	bl	8011c64 <siprintf>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800192e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001932:	f002 fec1 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 8001936:	4855      	ldr	r0, [pc, #340]	@ (8001a8c <DrawMainPage+0x1b4>)
 8001938:	f002 fef0 	bl	800471c <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800193c:	4854      	ldr	r0, [pc, #336]	@ (8001a90 <DrawMainPage+0x1b8>)
 800193e:	f002 fed3 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) pageTitle, CENTER_MODE);
 8001942:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001946:	2301      	movs	r3, #1
 8001948:	210a      	movs	r1, #10
 800194a:	200a      	movs	r0, #10
 800194c:	f002 ff6c 	bl	8004828 <BSP_LCD_DisplayStringAt>

	//get button label info from flash memory
	char readBuffer1[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001950:	2300      	movs	r3, #0
 8001952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001954:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
 8001964:	615a      	str	r2, [r3, #20]
 8001966:	619a      	str	r2, [r3, #24]
	char readBuffer2[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800196c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
 800197c:	615a      	str	r2, [r3, #20]
 800197e:	619a      	str	r2, [r3, #24]
	char readBuffer3[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	615a      	str	r2, [r3, #20]
 8001996:	619a      	str	r2, [r3, #24]

	//if the protocol exists, read from it. else, name it empty
	if (read_from_flash(readBuffer1, get_sector_address(page_num))) {
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 ff66 	bl	800286c <get_sector_address>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fb08 	bl	8000fbe <read_from_flash>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00a      	beq.n	80019ca <DrawMainPage+0xf2>
		strcpy(buttons[0].label, readBuffer1);
 80019b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019b8:	4619      	mov	r1, r3
 80019ba:	4836      	ldr	r0, [pc, #216]	@ (8001a94 <DrawMainPage+0x1bc>)
 80019bc:	f010 fad5 	bl	8011f6a <strcpy>
		buttons[0].status = NOT_EMPTY;
 80019c0:	4b35      	ldr	r3, [pc, #212]	@ (8001a98 <DrawMainPage+0x1c0>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80019c8:	e009      	b.n	80019de <DrawMainPage+0x106>
	} else {
		strcpy(buttons[0].label, empty);
 80019ca:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80019ce:	4619      	mov	r1, r3
 80019d0:	4830      	ldr	r0, [pc, #192]	@ (8001a94 <DrawMainPage+0x1bc>)
 80019d2:	f010 faca 	bl	8011f6a <strcpy>
		buttons[0].status = EMPTY;
 80019d6:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <DrawMainPage+0x1c0>)
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	if (read_from_flash(readBuffer2,
			get_sector_address(page_num) + PROTOCOL_SIZE)) {
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 ff43 	bl	800286c <get_sector_address>
 80019e6:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer2,
 80019e8:	f603 32b8 	addw	r2, r3, #3000	@ 0xbb8
 80019ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fae3 	bl	8000fbe <read_from_flash>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <DrawMainPage+0x13c>
		strcpy(buttons[1].label, readBuffer2);
 80019fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a02:	4619      	mov	r1, r3
 8001a04:	4825      	ldr	r0, [pc, #148]	@ (8001a9c <DrawMainPage+0x1c4>)
 8001a06:	f010 fab0 	bl	8011f6a <strcpy>
		buttons[1].status = NOT_EMPTY;
 8001a0a:	4b23      	ldr	r3, [pc, #140]	@ (8001a98 <DrawMainPage+0x1c0>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8001a12:	e009      	b.n	8001a28 <DrawMainPage+0x150>
	} else {
		strcpy(buttons[1].label, empty);
 8001a14:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4820      	ldr	r0, [pc, #128]	@ (8001a9c <DrawMainPage+0x1c4>)
 8001a1c:	f010 faa5 	bl	8011f6a <strcpy>
		buttons[1].status = EMPTY;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	@ (8001a98 <DrawMainPage+0x1c0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	}
	if (read_from_flash(readBuffer3,
			get_sector_address(page_num) + 2 * PROTOCOL_SIZE)) {
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 ff1e 	bl	800286c <get_sector_address>
 8001a30:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer3,
 8001a32:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8001a36:	3310      	adds	r3, #16
 8001a38:	f107 020c 	add.w	r2, r7, #12
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f7ff fabd 	bl	8000fbe <read_from_flash>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00a      	beq.n	8001a60 <DrawMainPage+0x188>
		strcpy(buttons[2].label, readBuffer3);
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4813      	ldr	r0, [pc, #76]	@ (8001aa0 <DrawMainPage+0x1c8>)
 8001a52:	f010 fa8a 	bl	8011f6a <strcpy>
		buttons[2].status = NOT_EMPTY;
 8001a56:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <DrawMainPage+0x1c0>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8001a5e:	e009      	b.n	8001a74 <DrawMainPage+0x19c>
	} else {
		strcpy(buttons[2].label, empty);
 8001a60:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001a64:	4619      	mov	r1, r3
 8001a66:	480e      	ldr	r0, [pc, #56]	@ (8001aa0 <DrawMainPage+0x1c8>)
 8001a68:	f010 fa7f 	bl	8011f6a <strcpy>
		buttons[2].status = EMPTY;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <DrawMainPage+0x1c0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	}

	// Draw buttons
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001a74:	480b      	ldr	r0, [pc, #44]	@ (8001aa4 <DrawMainPage+0x1cc>)
 8001a76:	f002 fe1f 	bl	80046b8 <BSP_LCD_SetTextColor>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a80:	e07e      	b.n	8001b80 <DrawMainPage+0x2a8>
 8001a82:	bf00      	nop
 8001a84:	08012cac 	.word	0x08012cac
 8001a88:	08012ca4 	.word	0x08012ca4
 8001a8c:	20000254 	.word	0x20000254
 8001a90:	ffff0000 	.word	0xffff0000
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000032 	.word	0x20000032
 8001aa0:	2000005c 	.word	0x2000005c
 8001aa4:	ff0000ff 	.word	0xff0000ff
		BSP_LCD_FillRect(buttons[i].x, buttons[i].y, buttons[i].w,
 8001aa8:	4a6f      	ldr	r2, [pc, #444]	@ (8001c68 <DrawMainPage+0x390>)
 8001aaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001aae:	212a      	movs	r1, #42	@ 0x2a
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	8818      	ldrh	r0, [r3, #0]
 8001ab8:	4a6b      	ldr	r2, [pc, #428]	@ (8001c68 <DrawMainPage+0x390>)
 8001aba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001abe:	212a      	movs	r1, #42	@ 0x2a
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	8819      	ldrh	r1, [r3, #0]
 8001aca:	4a67      	ldr	r2, [pc, #412]	@ (8001c68 <DrawMainPage+0x390>)
 8001acc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ad0:	242a      	movs	r4, #42	@ 0x2a
 8001ad2:	fb04 f303 	mul.w	r3, r4, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3304      	adds	r3, #4
 8001ada:	881a      	ldrh	r2, [r3, #0]
 8001adc:	4c62      	ldr	r4, [pc, #392]	@ (8001c68 <DrawMainPage+0x390>)
 8001ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ae2:	252a      	movs	r5, #42	@ 0x2a
 8001ae4:	fb05 f303 	mul.w	r3, r5, r3
 8001ae8:	4423      	add	r3, r4
 8001aea:	3306      	adds	r3, #6
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	f002 ff59 	bl	80049a4 <BSP_LCD_FillRect>
				buttons[i].h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001af2:	f04f 30ff 	mov.w	r0, #4294967295
 8001af6:	f002 fddf 	bl	80046b8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001afa:	485c      	ldr	r0, [pc, #368]	@ (8001c6c <DrawMainPage+0x394>)
 8001afc:	f002 fdf4 	bl	80046e8 <BSP_LCD_SetBackColor>
		if (buttons[i].label[10] == NEWLINE_CHAR) {
		}
		buttons[i].label[strlen(buttons[i].label) - 1] = ' '; //dont display null terminator
 8001b00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b04:	222a      	movs	r2, #42	@ 0x2a
 8001b06:	fb02 f303 	mul.w	r3, r2, r3
 8001b0a:	3308      	adds	r3, #8
 8001b0c:	4a56      	ldr	r2, [pc, #344]	@ (8001c68 <DrawMainPage+0x390>)
 8001b0e:	4413      	add	r3, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fb6d 	bl	80001f0 <strlen>
 8001b16:	4603      	mov	r3, r0
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	4953      	ldr	r1, [pc, #332]	@ (8001c68 <DrawMainPage+0x390>)
 8001b1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b20:	202a      	movs	r0, #42	@ 0x2a
 8001b22:	fb00 f202 	mul.w	r2, r0, r2
 8001b26:	440a      	add	r2, r1
 8001b28:	4413      	add	r3, r2
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	701a      	strb	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(buttons[i].x + 10, buttons[i].y + 10,
 8001b30:	4a4d      	ldr	r2, [pc, #308]	@ (8001c68 <DrawMainPage+0x390>)
 8001b32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b36:	212a      	movs	r1, #42	@ 0x2a
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	330a      	adds	r3, #10
 8001b42:	b298      	uxth	r0, r3
 8001b44:	4a48      	ldr	r2, [pc, #288]	@ (8001c68 <DrawMainPage+0x390>)
 8001b46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b4a:	212a      	movs	r1, #42	@ 0x2a
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	3302      	adds	r3, #2
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	330a      	adds	r3, #10
 8001b58:	b299      	uxth	r1, r3
				(uint8_t*) buttons[i].label, LEFT_MODE);
 8001b5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b5e:	222a      	movs	r2, #42	@ 0x2a
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	3308      	adds	r3, #8
 8001b66:	4a40      	ldr	r2, [pc, #256]	@ (8001c68 <DrawMainPage+0x390>)
 8001b68:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(buttons[i].x + 10, buttons[i].y + 10,
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	f002 fe5c 	bl	8004828 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001b70:	483e      	ldr	r0, [pc, #248]	@ (8001c6c <DrawMainPage+0x394>)
 8001b72:	f002 fda1 	bl	80046b8 <BSP_LCD_SetTextColor>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001b76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	dd8f      	ble.n	8001aa8 <DrawMainPage+0x1d0>
	}

	// Draw "Next" button
	if (page_num != 10) {
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	2b0a      	cmp	r3, #10
 8001b8c:	d01f      	beq.n	8001bce <DrawMainPage+0x2f6>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001b8e:	4838      	ldr	r0, [pc, #224]	@ (8001c70 <DrawMainPage+0x398>)
 8001b90:	f002 fd92 	bl	80046b8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(nextButton.x, nextButton.y, nextButton.w,
 8001b94:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <DrawMainPage+0x39c>)
 8001b96:	8818      	ldrh	r0, [r3, #0]
 8001b98:	4b36      	ldr	r3, [pc, #216]	@ (8001c74 <DrawMainPage+0x39c>)
 8001b9a:	8859      	ldrh	r1, [r3, #2]
 8001b9c:	4b35      	ldr	r3, [pc, #212]	@ (8001c74 <DrawMainPage+0x39c>)
 8001b9e:	889a      	ldrh	r2, [r3, #4]
 8001ba0:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <DrawMainPage+0x39c>)
 8001ba2:	88db      	ldrh	r3, [r3, #6]
 8001ba4:	f002 fefe 	bl	80049a4 <BSP_LCD_FillRect>
				nextButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f002 fd84 	bl	80046b8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001bb0:	482f      	ldr	r0, [pc, #188]	@ (8001c70 <DrawMainPage+0x398>)
 8001bb2:	f002 fd99 	bl	80046e8 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(nextButton.x + 10, nextButton.y + 10,
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c74 <DrawMainPage+0x39c>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	330a      	adds	r3, #10
 8001bbc:	b298      	uxth	r0, r3
 8001bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001c74 <DrawMainPage+0x39c>)
 8001bc0:	885b      	ldrh	r3, [r3, #2]
 8001bc2:	330a      	adds	r3, #10
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c78 <DrawMainPage+0x3a0>)
 8001bca:	f002 fe2d 	bl	8004828 <BSP_LCD_DisplayStringAt>
				(uint8_t*) nextButton.label, LEFT_MODE);
	}

	// Draw "Back" button
	if (page_num != 1) {
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d01f      	beq.n	8001c14 <DrawMainPage+0x33c>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001bd4:	4826      	ldr	r0, [pc, #152]	@ (8001c70 <DrawMainPage+0x398>)
 8001bd6:	f002 fd6f 	bl	80046b8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w,
 8001bda:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <DrawMainPage+0x3a4>)
 8001bdc:	8818      	ldrh	r0, [r3, #0]
 8001bde:	4b27      	ldr	r3, [pc, #156]	@ (8001c7c <DrawMainPage+0x3a4>)
 8001be0:	8859      	ldrh	r1, [r3, #2]
 8001be2:	4b26      	ldr	r3, [pc, #152]	@ (8001c7c <DrawMainPage+0x3a4>)
 8001be4:	889a      	ldrh	r2, [r3, #4]
 8001be6:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <DrawMainPage+0x3a4>)
 8001be8:	88db      	ldrh	r3, [r3, #6]
 8001bea:	f002 fedb 	bl	80049a4 <BSP_LCD_FillRect>
				backButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001bee:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf2:	f002 fd61 	bl	80046b8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001bf6:	481e      	ldr	r0, [pc, #120]	@ (8001c70 <DrawMainPage+0x398>)
 8001bf8:	f002 fd76 	bl	80046e8 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <DrawMainPage+0x3a4>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	330a      	adds	r3, #10
 8001c02:	b298      	uxth	r0, r3
 8001c04:	4b1d      	ldr	r3, [pc, #116]	@ (8001c7c <DrawMainPage+0x3a4>)
 8001c06:	885b      	ldrh	r3, [r3, #2]
 8001c08:	330a      	adds	r3, #10
 8001c0a:	b299      	uxth	r1, r3
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c80 <DrawMainPage+0x3a8>)
 8001c10:	f002 fe0a 	bl	8004828 <BSP_LCD_DisplayStringAt>
				(uint8_t*) backButton.label, LEFT_MODE);
	}

	//draw "Queue" button on page 1
	if (page_num == 1) {
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d121      	bne.n	8001c5e <DrawMainPage+0x386>
		BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001c1a:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8001c1e:	f002 fd4b 	bl	80046b8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(queueButton.x, queueButton.y, queueButton.w,
 8001c22:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <DrawMainPage+0x3ac>)
 8001c24:	8818      	ldrh	r0, [r3, #0]
 8001c26:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <DrawMainPage+0x3ac>)
 8001c28:	8859      	ldrh	r1, [r3, #2]
 8001c2a:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <DrawMainPage+0x3ac>)
 8001c2c:	889a      	ldrh	r2, [r3, #4]
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <DrawMainPage+0x3ac>)
 8001c30:	88db      	ldrh	r3, [r3, #6]
 8001c32:	f002 feb7 	bl	80049a4 <BSP_LCD_FillRect>
				queueButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001c36:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001c3a:	f002 fd3d 	bl	80046b8 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_YELLOW);
 8001c3e:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8001c42:	f002 fd51 	bl	80046e8 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(queueButton.x + 10, queueButton.y + 10,
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <DrawMainPage+0x3ac>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	330a      	adds	r3, #10
 8001c4c:	b298      	uxth	r0, r3
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <DrawMainPage+0x3ac>)
 8001c50:	885b      	ldrh	r3, [r3, #2]
 8001c52:	330a      	adds	r3, #10
 8001c54:	b299      	uxth	r1, r3
 8001c56:	2303      	movs	r3, #3
 8001c58:	4a0b      	ldr	r2, [pc, #44]	@ (8001c88 <DrawMainPage+0x3b0>)
 8001c5a:	f002 fde5 	bl	8004828 <BSP_LCD_DisplayStringAt>
				(uint8_t*) queueButton.label, LEFT_MODE);
	}
}
 8001c5e:	bf00      	nop
 8001c60:	3798      	adds	r7, #152	@ 0x98
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bdb0      	pop	{r4, r5, r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	ff0000ff 	.word	0xff0000ff
 8001c70:	ffff0000 	.word	0xffff0000
 8001c74:	200000d8 	.word	0x200000d8
 8001c78:	200000e0 	.word	0x200000e0
 8001c7c:	200000ac 	.word	0x200000ac
 8001c80:	200000b4 	.word	0x200000b4
 8001c84:	20000080 	.word	0x20000080
 8001c88:	20000088 	.word	0x20000088

08001c8c <DrawInfoPage>:

void DrawInfoPage(char protocolTitle[MAX_LINE_LENGTH]) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f002 fd5a 	bl	8004750 <BSP_LCD_Clear>
	//Display protocol name at top of screen
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001c9c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001ca0:	f002 fd0a 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001ca4:	4846      	ldr	r0, [pc, #280]	@ (8001dc0 <DrawInfoPage+0x134>)
 8001ca6:	f002 fd1f 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) protocolTitle, CENTER_MODE);
 8001caa:	2301      	movs	r3, #1
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	210a      	movs	r1, #10
 8001cb0:	200a      	movs	r0, #10
 8001cb2:	f002 fdb9 	bl	8004828 <BSP_LCD_DisplayStringAt>

	//Draw "QueueSelect" button on select page
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001cb6:	4843      	ldr	r0, [pc, #268]	@ (8001dc4 <DrawInfoPage+0x138>)
 8001cb8:	f002 fcfe 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(queueSelectButton.x, queueSelectButton.y,
 8001cbc:	4b42      	ldr	r3, [pc, #264]	@ (8001dc8 <DrawInfoPage+0x13c>)
 8001cbe:	8818      	ldrh	r0, [r3, #0]
 8001cc0:	4b41      	ldr	r3, [pc, #260]	@ (8001dc8 <DrawInfoPage+0x13c>)
 8001cc2:	8859      	ldrh	r1, [r3, #2]
 8001cc4:	4b40      	ldr	r3, [pc, #256]	@ (8001dc8 <DrawInfoPage+0x13c>)
 8001cc6:	889a      	ldrh	r2, [r3, #4]
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc8 <DrawInfoPage+0x13c>)
 8001cca:	88db      	ldrh	r3, [r3, #6]
 8001ccc:	f002 fe6a 	bl	80049a4 <BSP_LCD_FillRect>
			queueSelectButton.w, queueSelectButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f002 fcf0 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001cd8:	483a      	ldr	r0, [pc, #232]	@ (8001dc4 <DrawInfoPage+0x138>)
 8001cda:	f002 fd05 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(queueSelectButton.x + 10, queueSelectButton.y + 10,
 8001cde:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc8 <DrawInfoPage+0x13c>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	330a      	adds	r3, #10
 8001ce4:	b298      	uxth	r0, r3
 8001ce6:	4b38      	ldr	r3, [pc, #224]	@ (8001dc8 <DrawInfoPage+0x13c>)
 8001ce8:	885b      	ldrh	r3, [r3, #2]
 8001cea:	330a      	adds	r3, #10
 8001cec:	b299      	uxth	r1, r3
 8001cee:	2303      	movs	r3, #3
 8001cf0:	4a36      	ldr	r2, [pc, #216]	@ (8001dcc <DrawInfoPage+0x140>)
 8001cf2:	f002 fd99 	bl	8004828 <BSP_LCD_DisplayStringAt>
			(uint8_t*) queueSelectButton.label, LEFT_MODE);

	//Draw "Select" button
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001cf6:	4833      	ldr	r0, [pc, #204]	@ (8001dc4 <DrawInfoPage+0x138>)
 8001cf8:	f002 fcde 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(selectButton.x, selectButton.y, selectButton.w,
 8001cfc:	4b34      	ldr	r3, [pc, #208]	@ (8001dd0 <DrawInfoPage+0x144>)
 8001cfe:	8818      	ldrh	r0, [r3, #0]
 8001d00:	4b33      	ldr	r3, [pc, #204]	@ (8001dd0 <DrawInfoPage+0x144>)
 8001d02:	8859      	ldrh	r1, [r3, #2]
 8001d04:	4b32      	ldr	r3, [pc, #200]	@ (8001dd0 <DrawInfoPage+0x144>)
 8001d06:	889a      	ldrh	r2, [r3, #4]
 8001d08:	4b31      	ldr	r3, [pc, #196]	@ (8001dd0 <DrawInfoPage+0x144>)
 8001d0a:	88db      	ldrh	r3, [r3, #6]
 8001d0c:	f002 fe4a 	bl	80049a4 <BSP_LCD_FillRect>
			selectButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f002 fcd0 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001d18:	482a      	ldr	r0, [pc, #168]	@ (8001dc4 <DrawInfoPage+0x138>)
 8001d1a:	f002 fce5 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(selectButton.x + 10, selectButton.y + 10,
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd0 <DrawInfoPage+0x144>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	330a      	adds	r3, #10
 8001d24:	b298      	uxth	r0, r3
 8001d26:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <DrawInfoPage+0x144>)
 8001d28:	885b      	ldrh	r3, [r3, #2]
 8001d2a:	330a      	adds	r3, #10
 8001d2c:	b299      	uxth	r1, r3
 8001d2e:	2303      	movs	r3, #3
 8001d30:	4a28      	ldr	r2, [pc, #160]	@ (8001dd4 <DrawInfoPage+0x148>)
 8001d32:	f002 fd79 	bl	8004828 <BSP_LCD_DisplayStringAt>
			(uint8_t*) selectButton.label, LEFT_MODE);

	//Draw "Delete" button
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d36:	4823      	ldr	r0, [pc, #140]	@ (8001dc4 <DrawInfoPage+0x138>)
 8001d38:	f002 fcbe 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(deleteButton.x, deleteButton.y, deleteButton.w,
 8001d3c:	4b26      	ldr	r3, [pc, #152]	@ (8001dd8 <DrawInfoPage+0x14c>)
 8001d3e:	8818      	ldrh	r0, [r3, #0]
 8001d40:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <DrawInfoPage+0x14c>)
 8001d42:	8859      	ldrh	r1, [r3, #2]
 8001d44:	4b24      	ldr	r3, [pc, #144]	@ (8001dd8 <DrawInfoPage+0x14c>)
 8001d46:	889a      	ldrh	r2, [r3, #4]
 8001d48:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <DrawInfoPage+0x14c>)
 8001d4a:	88db      	ldrh	r3, [r3, #6]
 8001d4c:	f002 fe2a 	bl	80049a4 <BSP_LCD_FillRect>
			deleteButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f002 fcb0 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001d58:	481a      	ldr	r0, [pc, #104]	@ (8001dc4 <DrawInfoPage+0x138>)
 8001d5a:	f002 fcc5 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(deleteButton.x + 10, deleteButton.y + 10,
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd8 <DrawInfoPage+0x14c>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	330a      	adds	r3, #10
 8001d64:	b298      	uxth	r0, r3
 8001d66:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd8 <DrawInfoPage+0x14c>)
 8001d68:	885b      	ldrh	r3, [r3, #2]
 8001d6a:	330a      	adds	r3, #10
 8001d6c:	b299      	uxth	r1, r3
 8001d6e:	2303      	movs	r3, #3
 8001d70:	4a1a      	ldr	r2, [pc, #104]	@ (8001ddc <DrawInfoPage+0x150>)
 8001d72:	f002 fd59 	bl	8004828 <BSP_LCD_DisplayStringAt>
			(uint8_t*) deleteButton.label, LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001d76:	4812      	ldr	r0, [pc, #72]	@ (8001dc0 <DrawInfoPage+0x134>)
 8001d78:	f002 fc9e 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 8001d7c:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <DrawInfoPage+0x154>)
 8001d7e:	8818      	ldrh	r0, [r3, #0]
 8001d80:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <DrawInfoPage+0x154>)
 8001d82:	8859      	ldrh	r1, [r3, #2]
 8001d84:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <DrawInfoPage+0x154>)
 8001d86:	889a      	ldrh	r2, [r3, #4]
 8001d88:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <DrawInfoPage+0x154>)
 8001d8a:	88db      	ldrh	r3, [r3, #6]
 8001d8c:	f002 fe0a 	bl	80049a4 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f002 fc90 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001d98:	4809      	ldr	r0, [pc, #36]	@ (8001dc0 <DrawInfoPage+0x134>)
 8001d9a:	f002 fca5 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <DrawInfoPage+0x154>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	330a      	adds	r3, #10
 8001da4:	b298      	uxth	r0, r3
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <DrawInfoPage+0x154>)
 8001da8:	885b      	ldrh	r3, [r3, #2]
 8001daa:	330a      	adds	r3, #10
 8001dac:	b299      	uxth	r1, r3
 8001dae:	2303      	movs	r3, #3
 8001db0:	4a0c      	ldr	r2, [pc, #48]	@ (8001de4 <DrawInfoPage+0x158>)
 8001db2:	f002 fd39 	bl	8004828 <BSP_LCD_DisplayStringAt>
			(uint8_t*) backButton.label, LEFT_MODE);
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	ffff0000 	.word	0xffff0000
 8001dc4:	ff0000ff 	.word	0xff0000ff
 8001dc8:	2000015c 	.word	0x2000015c
 8001dcc:	20000164 	.word	0x20000164
 8001dd0:	20000188 	.word	0x20000188
 8001dd4:	20000190 	.word	0x20000190
 8001dd8:	200001b4 	.word	0x200001b4
 8001ddc:	200001bc 	.word	0x200001bc
 8001de0:	200000ac 	.word	0x200000ac
 8001de4:	200000b4 	.word	0x200000b4

08001de8 <DrawQueuePage>:

void DrawQueuePage(uint8_t queueSize) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08e      	sub	sp, #56	@ 0x38
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001df2:	f04f 30ff 	mov.w	r0, #4294967295
 8001df6:	f002 fcab 	bl	8004750 <BSP_LCD_Clear>
	char pageTitle[20] = "";
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
 8001dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Queue Size: %d", queueSize);
 8001e0c:	79fa      	ldrb	r2, [r7, #7]
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	4956      	ldr	r1, [pc, #344]	@ (8001f6c <DrawQueuePage+0x184>)
 8001e14:	4618      	mov	r0, r3
 8001e16:	f00f ff25 	bl	8011c64 <siprintf>
	//Display Queue at top of the screen
	BSP_LCD_SetFont(&Font20);
 8001e1a:	4855      	ldr	r0, [pc, #340]	@ (8001f70 <DrawQueuePage+0x188>)
 8001e1c:	f002 fc7e 	bl	800471c <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e20:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001e24:	f002 fc48 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001e28:	4852      	ldr	r0, [pc, #328]	@ (8001f74 <DrawQueuePage+0x18c>)
 8001e2a:	f002 fc5d 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) pageTitle, CENTER_MODE);
 8001e2e:	f107 0220 	add.w	r2, r7, #32
 8001e32:	2301      	movs	r3, #1
 8001e34:	210a      	movs	r1, #10
 8001e36:	200a      	movs	r0, #10
 8001e38:	f002 fcf6 	bl	8004828 <BSP_LCD_DisplayStringAt>

	//display protocols in queue here
	BSP_LCD_SetFont(&Font16);
 8001e3c:	484e      	ldr	r0, [pc, #312]	@ (8001f78 <DrawQueuePage+0x190>)
 8001e3e:	f002 fc6d 	bl	800471c <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e42:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001e46:	f002 fc37 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4e:	f002 fc4b 	bl	80046e8 <BSP_LCD_SetBackColor>
	char format[20] = "";
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	f107 0310 	add.w	r3, r7, #16
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
	for (uint8_t i = 0; i < queueSize; i++) {
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001e6a:	e033      	b.n	8001ed4 <DrawQueuePage+0xec>
		sprintf(format, "%d.) ", i + 1);
 8001e6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	4941      	ldr	r1, [pc, #260]	@ (8001f7c <DrawQueuePage+0x194>)
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00f fef3 	bl	8011c64 <siprintf>
		BSP_LCD_DisplayStringAt(10, 50 + i * 20, (uint8_t*) format, LEFT_MODE);
 8001e7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	3332      	adds	r3, #50	@ 0x32
 8001e90:	b299      	uxth	r1, r3
 8001e92:	f107 020c 	add.w	r2, r7, #12
 8001e96:	2303      	movs	r3, #3
 8001e98:	200a      	movs	r0, #10
 8001e9a:	f002 fcc5 	bl	8004828 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(60, 50 + i * 20, (uint8_t*) queueBuffer[i][0],
 8001e9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	0092      	lsls	r2, r2, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3332      	adds	r3, #50	@ 0x32
 8001eb0:	b299      	uxth	r1, r3
 8001eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001eb6:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	4a30      	ldr	r2, [pc, #192]	@ (8001f80 <DrawQueuePage+0x198>)
 8001ec0:	441a      	add	r2, r3
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	203c      	movs	r0, #60	@ 0x3c
 8001ec6:	f002 fcaf 	bl	8004828 <BSP_LCD_DisplayStringAt>
	for (uint8_t i = 0; i < queueSize; i++) {
 8001eca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001ed4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d3c6      	bcc.n	8001e6c <DrawQueuePage+0x84>
				LEFT_MODE);
	}
	BSP_LCD_SetFont(&Font20);
 8001ede:	4824      	ldr	r0, [pc, #144]	@ (8001f70 <DrawQueuePage+0x188>)
 8001ee0:	f002 fc1c 	bl	800471c <BSP_LCD_SetFont>

	//Draw "Run" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001ee4:	4823      	ldr	r0, [pc, #140]	@ (8001f74 <DrawQueuePage+0x18c>)
 8001ee6:	f002 fbe7 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(runButton.x, runButton.y, runButton.w, runButton.h);
 8001eea:	4b26      	ldr	r3, [pc, #152]	@ (8001f84 <DrawQueuePage+0x19c>)
 8001eec:	8818      	ldrh	r0, [r3, #0]
 8001eee:	4b25      	ldr	r3, [pc, #148]	@ (8001f84 <DrawQueuePage+0x19c>)
 8001ef0:	8859      	ldrh	r1, [r3, #2]
 8001ef2:	4b24      	ldr	r3, [pc, #144]	@ (8001f84 <DrawQueuePage+0x19c>)
 8001ef4:	889a      	ldrh	r2, [r3, #4]
 8001ef6:	4b23      	ldr	r3, [pc, #140]	@ (8001f84 <DrawQueuePage+0x19c>)
 8001ef8:	88db      	ldrh	r3, [r3, #6]
 8001efa:	f002 fd53 	bl	80049a4 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001efe:	f04f 30ff 	mov.w	r0, #4294967295
 8001f02:	f002 fbd9 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001f06:	481b      	ldr	r0, [pc, #108]	@ (8001f74 <DrawQueuePage+0x18c>)
 8001f08:	f002 fbee 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(runButton.x + 10, runButton.y + 10,
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f84 <DrawQueuePage+0x19c>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	330a      	adds	r3, #10
 8001f12:	b298      	uxth	r0, r3
 8001f14:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <DrawQueuePage+0x19c>)
 8001f16:	885b      	ldrh	r3, [r3, #2]
 8001f18:	330a      	adds	r3, #10
 8001f1a:	b299      	uxth	r1, r3
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8001f88 <DrawQueuePage+0x1a0>)
 8001f20:	f002 fc82 	bl	8004828 <BSP_LCD_DisplayStringAt>
			(uint8_t*) runButton.label, LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001f24:	4813      	ldr	r0, [pc, #76]	@ (8001f74 <DrawQueuePage+0x18c>)
 8001f26:	f002 fbc7 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 8001f2a:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <DrawQueuePage+0x1a4>)
 8001f2c:	8818      	ldrh	r0, [r3, #0]
 8001f2e:	4b17      	ldr	r3, [pc, #92]	@ (8001f8c <DrawQueuePage+0x1a4>)
 8001f30:	8859      	ldrh	r1, [r3, #2]
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <DrawQueuePage+0x1a4>)
 8001f34:	889a      	ldrh	r2, [r3, #4]
 8001f36:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <DrawQueuePage+0x1a4>)
 8001f38:	88db      	ldrh	r3, [r3, #6]
 8001f3a:	f002 fd33 	bl	80049a4 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f42:	f002 fbb9 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001f46:	480b      	ldr	r0, [pc, #44]	@ (8001f74 <DrawQueuePage+0x18c>)
 8001f48:	f002 fbce 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <DrawQueuePage+0x1a4>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	330a      	adds	r3, #10
 8001f52:	b298      	uxth	r0, r3
 8001f54:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <DrawQueuePage+0x1a4>)
 8001f56:	885b      	ldrh	r3, [r3, #2]
 8001f58:	330a      	adds	r3, #10
 8001f5a:	b299      	uxth	r1, r3
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f90 <DrawQueuePage+0x1a8>)
 8001f60:	f002 fc62 	bl	8004828 <BSP_LCD_DisplayStringAt>
			(uint8_t*) backButton.label, LEFT_MODE);
}
 8001f64:	bf00      	nop
 8001f66:	3738      	adds	r7, #56	@ 0x38
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	08012cc0 	.word	0x08012cc0
 8001f70:	20000254 	.word	0x20000254
 8001f74:	ffff0000 	.word	0xffff0000
 8001f78:	2000025c 	.word	0x2000025c
 8001f7c:	08012cd0 	.word	0x08012cd0
 8001f80:	20000610 	.word	0x20000610
 8001f84:	20000104 	.word	0x20000104
 8001f88:	2000010c 	.word	0x2000010c
 8001f8c:	200000ac 	.word	0x200000ac
 8001f90:	200000b4 	.word	0x200000b4

08001f94 <DrawConfirmationPage>:

void DrawConfirmationPage(uint32_t sector, uint32_t offset) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa2:	f002 fbd5 	bl	8004750 <BSP_LCD_Clear>

	//display confirmation text
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001fa6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001faa:	f002 fb85 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001fae:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb2:	f002 fb99 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) "Confirm Delete:", LEFT_MODE);
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8002074 <DrawConfirmationPage+0xe0>)
 8001fba:	210a      	movs	r1, #10
 8001fbc:	200a      	movs	r0, #10
 8001fbe:	f002 fc33 	bl	8004828 <BSP_LCD_DisplayStringAt>

	//Display protocol name for deletion
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001fc2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001fc6:	f002 fb77 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001fca:	f04f 30ff 	mov.w	r0, #4294967295
 8001fce:	f002 fb8b 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 30, (uint8_t*) buttons[offset].label,
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	222a      	movs	r2, #42	@ 0x2a
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	3308      	adds	r3, #8
 8001fdc:	4a26      	ldr	r2, [pc, #152]	@ (8002078 <DrawConfirmationPage+0xe4>)
 8001fde:	441a      	add	r2, r3
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	211e      	movs	r1, #30
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f002 fc1f 	bl	8004828 <BSP_LCD_DisplayStringAt>
			CENTER_MODE);

	//Draw "Confirm" button
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001fea:	4824      	ldr	r0, [pc, #144]	@ (800207c <DrawConfirmationPage+0xe8>)
 8001fec:	f002 fb64 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(confirmButton.x, confirmButton.y, confirmButton.w,
 8001ff0:	4b23      	ldr	r3, [pc, #140]	@ (8002080 <DrawConfirmationPage+0xec>)
 8001ff2:	8818      	ldrh	r0, [r3, #0]
 8001ff4:	4b22      	ldr	r3, [pc, #136]	@ (8002080 <DrawConfirmationPage+0xec>)
 8001ff6:	8859      	ldrh	r1, [r3, #2]
 8001ff8:	4b21      	ldr	r3, [pc, #132]	@ (8002080 <DrawConfirmationPage+0xec>)
 8001ffa:	889a      	ldrh	r2, [r3, #4]
 8001ffc:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <DrawConfirmationPage+0xec>)
 8001ffe:	88db      	ldrh	r3, [r3, #6]
 8002000:	f002 fcd0 	bl	80049a4 <BSP_LCD_FillRect>
			confirmButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f002 fb56 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800200c:	481b      	ldr	r0, [pc, #108]	@ (800207c <DrawConfirmationPage+0xe8>)
 800200e:	f002 fb6b 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(confirmButton.x + 10, confirmButton.y + 10,
 8002012:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <DrawConfirmationPage+0xec>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	330a      	adds	r3, #10
 8002018:	b298      	uxth	r0, r3
 800201a:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <DrawConfirmationPage+0xec>)
 800201c:	885b      	ldrh	r3, [r3, #2]
 800201e:	330a      	adds	r3, #10
 8002020:	b299      	uxth	r1, r3
 8002022:	2303      	movs	r3, #3
 8002024:	4a17      	ldr	r2, [pc, #92]	@ (8002084 <DrawConfirmationPage+0xf0>)
 8002026:	f002 fbff 	bl	8004828 <BSP_LCD_DisplayStringAt>
			(uint8_t*) confirmButton.label, LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800202a:	4817      	ldr	r0, [pc, #92]	@ (8002088 <DrawConfirmationPage+0xf4>)
 800202c:	f002 fb44 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 8002030:	4b16      	ldr	r3, [pc, #88]	@ (800208c <DrawConfirmationPage+0xf8>)
 8002032:	8818      	ldrh	r0, [r3, #0]
 8002034:	4b15      	ldr	r3, [pc, #84]	@ (800208c <DrawConfirmationPage+0xf8>)
 8002036:	8859      	ldrh	r1, [r3, #2]
 8002038:	4b14      	ldr	r3, [pc, #80]	@ (800208c <DrawConfirmationPage+0xf8>)
 800203a:	889a      	ldrh	r2, [r3, #4]
 800203c:	4b13      	ldr	r3, [pc, #76]	@ (800208c <DrawConfirmationPage+0xf8>)
 800203e:	88db      	ldrh	r3, [r3, #6]
 8002040:	f002 fcb0 	bl	80049a4 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f002 fb36 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800204c:	480e      	ldr	r0, [pc, #56]	@ (8002088 <DrawConfirmationPage+0xf4>)
 800204e:	f002 fb4b 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8002052:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <DrawConfirmationPage+0xf8>)
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	330a      	adds	r3, #10
 8002058:	b298      	uxth	r0, r3
 800205a:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <DrawConfirmationPage+0xf8>)
 800205c:	885b      	ldrh	r3, [r3, #2]
 800205e:	330a      	adds	r3, #10
 8002060:	b299      	uxth	r1, r3
 8002062:	2303      	movs	r3, #3
 8002064:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <DrawConfirmationPage+0xfc>)
 8002066:	f002 fbdf 	bl	8004828 <BSP_LCD_DisplayStringAt>
			(uint8_t*) backButton.label, LEFT_MODE);
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	08012cd8 	.word	0x08012cd8
 8002078:	20000000 	.word	0x20000000
 800207c:	ff0000ff 	.word	0xff0000ff
 8002080:	20000130 	.word	0x20000130
 8002084:	20000138 	.word	0x20000138
 8002088:	ffff0000 	.word	0xffff0000
 800208c:	200000ac 	.word	0x200000ac
 8002090:	200000b4 	.word	0x200000b4

08002094 <DrawPageFinish>:

void DrawPageFinish() {
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f002 fb58 	bl	8004750 <BSP_LCD_Clear>

	//Draw "Success!" box
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80020a0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80020a4:	f002 fb08 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80020a8:	4818      	ldr	r0, [pc, #96]	@ (800210c <DrawPageFinish+0x78>)
 80020aa:	f002 fb1d 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(selectButton.x + 10, selectButton.y + 10,
 80020ae:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <DrawPageFinish+0x7c>)
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	330a      	adds	r3, #10
 80020b4:	b298      	uxth	r0, r3
 80020b6:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <DrawPageFinish+0x7c>)
 80020b8:	885b      	ldrh	r3, [r3, #2]
 80020ba:	330a      	adds	r3, #10
 80020bc:	b299      	uxth	r1, r3
 80020be:	2303      	movs	r3, #3
 80020c0:	4a14      	ldr	r2, [pc, #80]	@ (8002114 <DrawPageFinish+0x80>)
 80020c2:	f002 fbb1 	bl	8004828 <BSP_LCD_DisplayStringAt>
			(uint8_t*) "Success!", LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80020c6:	4811      	ldr	r0, [pc, #68]	@ (800210c <DrawPageFinish+0x78>)
 80020c8:	f002 faf6 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 80020cc:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <DrawPageFinish+0x84>)
 80020ce:	8818      	ldrh	r0, [r3, #0]
 80020d0:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <DrawPageFinish+0x84>)
 80020d2:	8859      	ldrh	r1, [r3, #2]
 80020d4:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <DrawPageFinish+0x84>)
 80020d6:	889a      	ldrh	r2, [r3, #4]
 80020d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <DrawPageFinish+0x84>)
 80020da:	88db      	ldrh	r3, [r3, #6]
 80020dc:	f002 fc62 	bl	80049a4 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
 80020e4:	f002 fae8 	bl	80046b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80020e8:	4808      	ldr	r0, [pc, #32]	@ (800210c <DrawPageFinish+0x78>)
 80020ea:	f002 fafd 	bl	80046e8 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 80020ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002118 <DrawPageFinish+0x84>)
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	330a      	adds	r3, #10
 80020f4:	b298      	uxth	r0, r3
 80020f6:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <DrawPageFinish+0x84>)
 80020f8:	885b      	ldrh	r3, [r3, #2]
 80020fa:	330a      	adds	r3, #10
 80020fc:	b299      	uxth	r1, r3
 80020fe:	2303      	movs	r3, #3
 8002100:	4a06      	ldr	r2, [pc, #24]	@ (800211c <DrawPageFinish+0x88>)
 8002102:	f002 fb91 	bl	8004828 <BSP_LCD_DisplayStringAt>
			(uint8_t*) "Done", LEFT_MODE);
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	ffff0000 	.word	0xffff0000
 8002110:	20000188 	.word	0x20000188
 8002114:	08012ce8 	.word	0x08012ce8
 8002118:	200000ac 	.word	0x200000ac
 800211c:	08012cf4 	.word	0x08012cf4

08002120 <HandleTouch>:

//fix this function and give it a description
uint8_t HandleTouch(void) {
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
	//store the coordinates of the user touch in "TS_State"
	BSP_TS_GetState(&TS_State);
 8002126:	489e      	ldr	r0, [pc, #632]	@ (80023a0 <HandleTouch+0x280>)
 8002128:	f003 f888 	bl	800523c <BSP_TS_GetState>
	//do nothing if no touch detect
	if (!TS_State.TouchDetected) {
 800212c:	4b9c      	ldr	r3, [pc, #624]	@ (80023a0 <HandleTouch+0x280>)
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HandleTouch+0x18>
		return 0;
 8002134:	2300      	movs	r3, #0
 8002136:	e381      	b.n	800283c <HandleTouch+0x71c>
	}

	//init variables if a touch is detected
	char Empty_str[20] = "Empty\n"; //strings from flash memory come with newline at end
 8002138:	4a9a      	ldr	r2, [pc, #616]	@ (80023a4 <HandleTouch+0x284>)
 800213a:	463b      	mov	r3, r7
 800213c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002140:	6018      	str	r0, [r3, #0]
 8002142:	3304      	adds	r3, #4
 8002144:	8019      	strh	r1, [r3, #0]
 8002146:	3302      	adds	r3, #2
 8002148:	0c0a      	lsrs	r2, r1, #16
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	1dfb      	adds	r3, r7, #7
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	731a      	strb	r2, [r3, #12]
	static uint8_t protocol_num;
	static uint8_t protocol_offset = 0;
	//the y value has issues of being flipped and also needing to click below button
	TS_State.Y = (BSP_LCD_GetYSize() - TS_State.Y) - Y_OFFSET;
 8002158:	f002 fa3e 	bl	80045d8 <BSP_LCD_GetYSize>
 800215c:	4603      	mov	r3, r0
 800215e:	b29a      	uxth	r2, r3
 8002160:	4b8f      	ldr	r3, [pc, #572]	@ (80023a0 <HandleTouch+0x280>)
 8002162:	889b      	ldrh	r3, [r3, #4]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b14      	subs	r3, #20
 800216a:	b29a      	uxth	r2, r3
 800216c:	4b8c      	ldr	r3, [pc, #560]	@ (80023a0 <HandleTouch+0x280>)
 800216e:	809a      	strh	r2, [r3, #4]

	//start state machine for touch handling
	switch (currentPage) {
 8002170:	4b8d      	ldr	r3, [pc, #564]	@ (80023a8 <HandleTouch+0x288>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b04      	cmp	r3, #4
 8002176:	f200 8361 	bhi.w	800283c <HandleTouch+0x71c>
 800217a:	a201      	add	r2, pc, #4	@ (adr r2, 8002180 <HandleTouch+0x60>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	08002195 	.word	0x08002195
 8002184:	08002449 	.word	0x08002449
 8002188:	08002625 	.word	0x08002625
 800218c:	080026fd 	.word	0x080026fd
 8002190:	080027e1 	.word	0x080027e1
	case PAGE_MAIN:
		//back button
		if (TS_State.X >= backButton.x
 8002194:	4b82      	ldr	r3, [pc, #520]	@ (80023a0 <HandleTouch+0x280>)
 8002196:	885a      	ldrh	r2, [r3, #2]
 8002198:	4b84      	ldr	r3, [pc, #528]	@ (80023ac <HandleTouch+0x28c>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d33c      	bcc.n	800221a <HandleTouch+0xfa>
				&& TS_State.X <= (backButton.x + backButton.w)
 80021a0:	4b7f      	ldr	r3, [pc, #508]	@ (80023a0 <HandleTouch+0x280>)
 80021a2:	885b      	ldrh	r3, [r3, #2]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b81      	ldr	r3, [pc, #516]	@ (80023ac <HandleTouch+0x28c>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	4b7f      	ldr	r3, [pc, #508]	@ (80023ac <HandleTouch+0x28c>)
 80021ae:	889b      	ldrh	r3, [r3, #4]
 80021b0:	440b      	add	r3, r1
 80021b2:	429a      	cmp	r2, r3
 80021b4:	dc31      	bgt.n	800221a <HandleTouch+0xfa>
				&& TS_State.Y >= backButton.y
 80021b6:	4b7a      	ldr	r3, [pc, #488]	@ (80023a0 <HandleTouch+0x280>)
 80021b8:	889a      	ldrh	r2, [r3, #4]
 80021ba:	4b7c      	ldr	r3, [pc, #496]	@ (80023ac <HandleTouch+0x28c>)
 80021bc:	885b      	ldrh	r3, [r3, #2]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d32b      	bcc.n	800221a <HandleTouch+0xfa>
				&& TS_State.Y <= (backButton.y + backButton.h)
 80021c2:	4b77      	ldr	r3, [pc, #476]	@ (80023a0 <HandleTouch+0x280>)
 80021c4:	889b      	ldrh	r3, [r3, #4]
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b78      	ldr	r3, [pc, #480]	@ (80023ac <HandleTouch+0x28c>)
 80021ca:	885b      	ldrh	r3, [r3, #2]
 80021cc:	4619      	mov	r1, r3
 80021ce:	4b77      	ldr	r3, [pc, #476]	@ (80023ac <HandleTouch+0x28c>)
 80021d0:	88db      	ldrh	r3, [r3, #6]
 80021d2:	440b      	add	r3, r1
 80021d4:	429a      	cmp	r2, r3
 80021d6:	dc20      	bgt.n	800221a <HandleTouch+0xfa>
				&& (pageNum != 1)) {
 80021d8:	4b75      	ldr	r3, [pc, #468]	@ (80023b0 <HandleTouch+0x290>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d01c      	beq.n	800221a <HandleTouch+0xfa>
			pageNum--;
 80021e0:	4b73      	ldr	r3, [pc, #460]	@ (80023b0 <HandleTouch+0x290>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	4b71      	ldr	r3, [pc, #452]	@ (80023b0 <HandleTouch+0x290>)
 80021ea:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 80021ec:	4b70      	ldr	r3, [pc, #448]	@ (80023b0 <HandleTouch+0x290>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fb71 	bl	80018d8 <DrawMainPage>
			if (pageNum == 1) {
 80021f6:	4b6e      	ldr	r3, [pc, #440]	@ (80023b0 <HandleTouch+0x290>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d10a      	bne.n	8002214 <HandleTouch+0xf4>
				//next page wont register touch until you let go
				while (TS_State.TouchDetected) {
 80021fe:	e005      	b.n	800220c <HandleTouch+0xec>
					BSP_TS_GetState(&TS_State);
 8002200:	4867      	ldr	r0, [pc, #412]	@ (80023a0 <HandleTouch+0x280>)
 8002202:	f003 f81b 	bl	800523c <BSP_TS_GetState>
					if (!TS_State.TouchDetected) {
					}
					HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8002206:	2014      	movs	r0, #20
 8002208:	f003 f90c 	bl	8005424 <HAL_Delay>
				while (TS_State.TouchDetected) {
 800220c:	4b64      	ldr	r3, [pc, #400]	@ (80023a0 <HandleTouch+0x280>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f5      	bne.n	8002200 <HandleTouch+0xe0>
				}
			}
			HAL_Delay(SCREEN_DELAY);
 8002214:	2032      	movs	r0, #50	@ 0x32
 8002216:	f003 f905 	bl	8005424 <HAL_Delay>
		}
		//next button
		if (TS_State.X >= nextButton.x
 800221a:	4b61      	ldr	r3, [pc, #388]	@ (80023a0 <HandleTouch+0x280>)
 800221c:	885a      	ldrh	r2, [r3, #2]
 800221e:	4b65      	ldr	r3, [pc, #404]	@ (80023b4 <HandleTouch+0x294>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d32d      	bcc.n	8002282 <HandleTouch+0x162>
				&& TS_State.X <= (nextButton.x + nextButton.w)
 8002226:	4b5e      	ldr	r3, [pc, #376]	@ (80023a0 <HandleTouch+0x280>)
 8002228:	885b      	ldrh	r3, [r3, #2]
 800222a:	461a      	mov	r2, r3
 800222c:	4b61      	ldr	r3, [pc, #388]	@ (80023b4 <HandleTouch+0x294>)
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	4b60      	ldr	r3, [pc, #384]	@ (80023b4 <HandleTouch+0x294>)
 8002234:	889b      	ldrh	r3, [r3, #4]
 8002236:	440b      	add	r3, r1
 8002238:	429a      	cmp	r2, r3
 800223a:	dc22      	bgt.n	8002282 <HandleTouch+0x162>
				&& TS_State.Y >= nextButton.y
 800223c:	4b58      	ldr	r3, [pc, #352]	@ (80023a0 <HandleTouch+0x280>)
 800223e:	889a      	ldrh	r2, [r3, #4]
 8002240:	4b5c      	ldr	r3, [pc, #368]	@ (80023b4 <HandleTouch+0x294>)
 8002242:	885b      	ldrh	r3, [r3, #2]
 8002244:	429a      	cmp	r2, r3
 8002246:	d31c      	bcc.n	8002282 <HandleTouch+0x162>
				&& TS_State.Y <= (nextButton.y + nextButton.h)
 8002248:	4b55      	ldr	r3, [pc, #340]	@ (80023a0 <HandleTouch+0x280>)
 800224a:	889b      	ldrh	r3, [r3, #4]
 800224c:	461a      	mov	r2, r3
 800224e:	4b59      	ldr	r3, [pc, #356]	@ (80023b4 <HandleTouch+0x294>)
 8002250:	885b      	ldrh	r3, [r3, #2]
 8002252:	4619      	mov	r1, r3
 8002254:	4b57      	ldr	r3, [pc, #348]	@ (80023b4 <HandleTouch+0x294>)
 8002256:	88db      	ldrh	r3, [r3, #6]
 8002258:	440b      	add	r3, r1
 800225a:	429a      	cmp	r2, r3
 800225c:	dc11      	bgt.n	8002282 <HandleTouch+0x162>
				&& (pageNum != 10)) {
 800225e:	4b54      	ldr	r3, [pc, #336]	@ (80023b0 <HandleTouch+0x290>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b0a      	cmp	r3, #10
 8002264:	d00d      	beq.n	8002282 <HandleTouch+0x162>
			pageNum++;
 8002266:	4b52      	ldr	r3, [pc, #328]	@ (80023b0 <HandleTouch+0x290>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b50      	ldr	r3, [pc, #320]	@ (80023b0 <HandleTouch+0x290>)
 8002270:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8002272:	4b4f      	ldr	r3, [pc, #316]	@ (80023b0 <HandleTouch+0x290>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fb2e 	bl	80018d8 <DrawMainPage>
			HAL_Delay(SCREEN_DELAY);
 800227c:	2032      	movs	r0, #50	@ 0x32
 800227e:	f003 f8d1 	bl	8005424 <HAL_Delay>
		}
		//queue button
		if (TS_State.X >= queueButton.x
 8002282:	4b47      	ldr	r3, [pc, #284]	@ (80023a0 <HandleTouch+0x280>)
 8002284:	885a      	ldrh	r2, [r3, #2]
 8002286:	4b4c      	ldr	r3, [pc, #304]	@ (80023b8 <HandleTouch+0x298>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d335      	bcc.n	80022fa <HandleTouch+0x1da>
				&& TS_State.X <= (queueButton.x + queueButton.w)
 800228e:	4b44      	ldr	r3, [pc, #272]	@ (80023a0 <HandleTouch+0x280>)
 8002290:	885b      	ldrh	r3, [r3, #2]
 8002292:	461a      	mov	r2, r3
 8002294:	4b48      	ldr	r3, [pc, #288]	@ (80023b8 <HandleTouch+0x298>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	4b47      	ldr	r3, [pc, #284]	@ (80023b8 <HandleTouch+0x298>)
 800229c:	889b      	ldrh	r3, [r3, #4]
 800229e:	440b      	add	r3, r1
 80022a0:	429a      	cmp	r2, r3
 80022a2:	dc2a      	bgt.n	80022fa <HandleTouch+0x1da>
				&& TS_State.Y >= queueButton.y
 80022a4:	4b3e      	ldr	r3, [pc, #248]	@ (80023a0 <HandleTouch+0x280>)
 80022a6:	889a      	ldrh	r2, [r3, #4]
 80022a8:	4b43      	ldr	r3, [pc, #268]	@ (80023b8 <HandleTouch+0x298>)
 80022aa:	885b      	ldrh	r3, [r3, #2]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d324      	bcc.n	80022fa <HandleTouch+0x1da>
				&& TS_State.Y <= (queueButton.y + queueButton.h)
 80022b0:	4b3b      	ldr	r3, [pc, #236]	@ (80023a0 <HandleTouch+0x280>)
 80022b2:	889b      	ldrh	r3, [r3, #4]
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b40      	ldr	r3, [pc, #256]	@ (80023b8 <HandleTouch+0x298>)
 80022b8:	885b      	ldrh	r3, [r3, #2]
 80022ba:	4619      	mov	r1, r3
 80022bc:	4b3e      	ldr	r3, [pc, #248]	@ (80023b8 <HandleTouch+0x298>)
 80022be:	88db      	ldrh	r3, [r3, #6]
 80022c0:	440b      	add	r3, r1
 80022c2:	429a      	cmp	r2, r3
 80022c4:	dc19      	bgt.n	80022fa <HandleTouch+0x1da>
				&& (pageNum == 1)) {
 80022c6:	4b3a      	ldr	r3, [pc, #232]	@ (80023b0 <HandleTouch+0x290>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d115      	bne.n	80022fa <HandleTouch+0x1da>
			DrawQueuePage(queueSize);
 80022ce:	4b3b      	ldr	r3, [pc, #236]	@ (80023bc <HandleTouch+0x29c>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fd88 	bl	8001de8 <DrawQueuePage>
			currentPage = PAGE_QUEUE;
 80022d8:	4b33      	ldr	r3, [pc, #204]	@ (80023a8 <HandleTouch+0x288>)
 80022da:	2202      	movs	r2, #2
 80022dc:	701a      	strb	r2, [r3, #0]
			//next page wont register touch until you let go
			while (TS_State.TouchDetected) {
 80022de:	e005      	b.n	80022ec <HandleTouch+0x1cc>
				BSP_TS_GetState(&TS_State);
 80022e0:	482f      	ldr	r0, [pc, #188]	@ (80023a0 <HandleTouch+0x280>)
 80022e2:	f002 ffab 	bl	800523c <BSP_TS_GetState>
				if (!TS_State.TouchDetected) {
				}
				HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 80022e6:	2014      	movs	r0, #20
 80022e8:	f003 f89c 	bl	8005424 <HAL_Delay>
			while (TS_State.TouchDetected) {
 80022ec:	4b2c      	ldr	r3, [pc, #176]	@ (80023a0 <HandleTouch+0x280>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f5      	bne.n	80022e0 <HandleTouch+0x1c0>
			}
			HAL_Delay(SCREEN_DELAY);
 80022f4:	2032      	movs	r0, #50	@ 0x32
 80022f6:	f003 f895 	bl	8005424 <HAL_Delay>
		}
		//3 protocol buttons
		for (int i = 0; i < NUM_BUTTONS; i++) {
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e09e      	b.n	800243e <HandleTouch+0x31e>
			if (TS_State.X >= buttons[i].x
 8002300:	4b27      	ldr	r3, [pc, #156]	@ (80023a0 <HandleTouch+0x280>)
 8002302:	885a      	ldrh	r2, [r3, #2]
 8002304:	492e      	ldr	r1, [pc, #184]	@ (80023c0 <HandleTouch+0x2a0>)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	202a      	movs	r0, #42	@ 0x2a
 800230a:	fb00 f303 	mul.w	r3, r0, r3
 800230e:	440b      	add	r3, r1
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	f0c0 8090 	bcc.w	8002438 <HandleTouch+0x318>
					&& TS_State.X <= (buttons[i].x + buttons[i].w)
 8002318:	4b21      	ldr	r3, [pc, #132]	@ (80023a0 <HandleTouch+0x280>)
 800231a:	885b      	ldrh	r3, [r3, #2]
 800231c:	4618      	mov	r0, r3
 800231e:	4a28      	ldr	r2, [pc, #160]	@ (80023c0 <HandleTouch+0x2a0>)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	212a      	movs	r1, #42	@ 0x2a
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	461c      	mov	r4, r3
 800232e:	4a24      	ldr	r2, [pc, #144]	@ (80023c0 <HandleTouch+0x2a0>)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	212a      	movs	r1, #42	@ 0x2a
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3304      	adds	r3, #4
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	4423      	add	r3, r4
 8002340:	4298      	cmp	r0, r3
 8002342:	dc79      	bgt.n	8002438 <HandleTouch+0x318>
					&& TS_State.Y >= buttons[i].y
 8002344:	4b16      	ldr	r3, [pc, #88]	@ (80023a0 <HandleTouch+0x280>)
 8002346:	889a      	ldrh	r2, [r3, #4]
 8002348:	491d      	ldr	r1, [pc, #116]	@ (80023c0 <HandleTouch+0x2a0>)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	202a      	movs	r0, #42	@ 0x2a
 800234e:	fb00 f303 	mul.w	r3, r0, r3
 8002352:	440b      	add	r3, r1
 8002354:	3302      	adds	r3, #2
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d36d      	bcc.n	8002438 <HandleTouch+0x318>
					&& TS_State.Y <= (buttons[i].y + buttons[i].h)) {
 800235c:	4b10      	ldr	r3, [pc, #64]	@ (80023a0 <HandleTouch+0x280>)
 800235e:	889b      	ldrh	r3, [r3, #4]
 8002360:	4618      	mov	r0, r3
 8002362:	4a17      	ldr	r2, [pc, #92]	@ (80023c0 <HandleTouch+0x2a0>)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	212a      	movs	r1, #42	@ 0x2a
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	3302      	adds	r3, #2
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	461c      	mov	r4, r3
 8002374:	4a12      	ldr	r2, [pc, #72]	@ (80023c0 <HandleTouch+0x2a0>)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	212a      	movs	r1, #42	@ 0x2a
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	3306      	adds	r3, #6
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	4423      	add	r3, r4
 8002386:	4298      	cmp	r0, r3
 8002388:	dc56      	bgt.n	8002438 <HandleTouch+0x318>
				//check which button has been pressed
				if (i == 0) {
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d11d      	bne.n	80023cc <HandleTouch+0x2ac>
					protocol_num = 1;
 8002390:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <HandleTouch+0x2a4>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
					protocol_offset = 0;
 8002396:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <HandleTouch+0x2a8>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	e029      	b.n	80023f2 <HandleTouch+0x2d2>
 800239e:	bf00      	nop
 80023a0:	200005f8 	.word	0x200005f8
 80023a4:	08012cac 	.word	0x08012cac
 80023a8:	20000605 	.word	0x20000605
 80023ac:	200000ac 	.word	0x200000ac
 80023b0:	200001de 	.word	0x200001de
 80023b4:	200000d8 	.word	0x200000d8
 80023b8:	20000080 	.word	0x20000080
 80023bc:	20008310 	.word	0x20008310
 80023c0:	20000000 	.word	0x20000000
 80023c4:	20008f98 	.word	0x20008f98
 80023c8:	20008f99 	.word	0x20008f99
				} else if (i == 1) {
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d106      	bne.n	80023e0 <HandleTouch+0x2c0>
					protocol_num = 1;
 80023d2:	4b89      	ldr	r3, [pc, #548]	@ (80025f8 <HandleTouch+0x4d8>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
					protocol_offset = 1;
 80023d8:	4b88      	ldr	r3, [pc, #544]	@ (80025fc <HandleTouch+0x4dc>)
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e008      	b.n	80023f2 <HandleTouch+0x2d2>
				} else if (i == 2) {
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d105      	bne.n	80023f2 <HandleTouch+0x2d2>
					protocol_num = 1;
 80023e6:	4b84      	ldr	r3, [pc, #528]	@ (80025f8 <HandleTouch+0x4d8>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
					protocol_offset = 2;
 80023ec:	4b83      	ldr	r3, [pc, #524]	@ (80025fc <HandleTouch+0x4dc>)
 80023ee:	2202      	movs	r2, #2
 80023f0:	701a      	strb	r2, [r3, #0]
				}
				//dont draw next page if the button says "Empty"
				if (buttons[i].status == NOT_EMPTY) {
 80023f2:	4a83      	ldr	r2, [pc, #524]	@ (8002600 <HandleTouch+0x4e0>)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	212a      	movs	r1, #42	@ 0x2a
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3328      	adds	r3, #40	@ 0x28
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d113      	bne.n	800242e <HandleTouch+0x30e>
					currentPage = PAGE_SELECT;
 8002406:	4b7f      	ldr	r3, [pc, #508]	@ (8002604 <HandleTouch+0x4e4>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
					DrawInfoPage(buttons[i].label);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	222a      	movs	r2, #42	@ 0x2a
 8002410:	fb02 f303 	mul.w	r3, r2, r3
 8002414:	3308      	adds	r3, #8
 8002416:	4a7a      	ldr	r2, [pc, #488]	@ (8002600 <HandleTouch+0x4e0>)
 8002418:	4413      	add	r3, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fc36 	bl	8001c8c <DrawInfoPage>
				}
				//next page wont register touch until you let go
				while (TS_State.TouchDetected) {
 8002420:	e005      	b.n	800242e <HandleTouch+0x30e>
					BSP_TS_GetState(&TS_State);
 8002422:	4879      	ldr	r0, [pc, #484]	@ (8002608 <HandleTouch+0x4e8>)
 8002424:	f002 ff0a 	bl	800523c <BSP_TS_GetState>
					if (!TS_State.TouchDetected) {
					}
					HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8002428:	2014      	movs	r0, #20
 800242a:	f002 fffb 	bl	8005424 <HAL_Delay>
				while (TS_State.TouchDetected) {
 800242e:	4b76      	ldr	r3, [pc, #472]	@ (8002608 <HandleTouch+0x4e8>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f5      	bne.n	8002422 <HandleTouch+0x302>
				}
				return;
 8002436:	e201      	b.n	800283c <HandleTouch+0x71c>
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b02      	cmp	r3, #2
 8002442:	f77f af5d 	ble.w	8002300 <HandleTouch+0x1e0>
			}
		}
		break;
 8002446:	e1f9      	b.n	800283c <HandleTouch+0x71c>
	case PAGE_SELECT:
		//back button
		if (TS_State.X >= backButton.x
 8002448:	4b6f      	ldr	r3, [pc, #444]	@ (8002608 <HandleTouch+0x4e8>)
 800244a:	885a      	ldrh	r2, [r3, #2]
 800244c:	4b6f      	ldr	r3, [pc, #444]	@ (800260c <HandleTouch+0x4ec>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d323      	bcc.n	800249c <HandleTouch+0x37c>
				&& TS_State.X <= (backButton.x + backButton.w)
 8002454:	4b6c      	ldr	r3, [pc, #432]	@ (8002608 <HandleTouch+0x4e8>)
 8002456:	885b      	ldrh	r3, [r3, #2]
 8002458:	461a      	mov	r2, r3
 800245a:	4b6c      	ldr	r3, [pc, #432]	@ (800260c <HandleTouch+0x4ec>)
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	4b6a      	ldr	r3, [pc, #424]	@ (800260c <HandleTouch+0x4ec>)
 8002462:	889b      	ldrh	r3, [r3, #4]
 8002464:	440b      	add	r3, r1
 8002466:	429a      	cmp	r2, r3
 8002468:	dc18      	bgt.n	800249c <HandleTouch+0x37c>
				&& TS_State.Y >= backButton.y
 800246a:	4b67      	ldr	r3, [pc, #412]	@ (8002608 <HandleTouch+0x4e8>)
 800246c:	889a      	ldrh	r2, [r3, #4]
 800246e:	4b67      	ldr	r3, [pc, #412]	@ (800260c <HandleTouch+0x4ec>)
 8002470:	885b      	ldrh	r3, [r3, #2]
 8002472:	429a      	cmp	r2, r3
 8002474:	d312      	bcc.n	800249c <HandleTouch+0x37c>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 8002476:	4b64      	ldr	r3, [pc, #400]	@ (8002608 <HandleTouch+0x4e8>)
 8002478:	889b      	ldrh	r3, [r3, #4]
 800247a:	461a      	mov	r2, r3
 800247c:	4b63      	ldr	r3, [pc, #396]	@ (800260c <HandleTouch+0x4ec>)
 800247e:	885b      	ldrh	r3, [r3, #2]
 8002480:	4619      	mov	r1, r3
 8002482:	4b62      	ldr	r3, [pc, #392]	@ (800260c <HandleTouch+0x4ec>)
 8002484:	88db      	ldrh	r3, [r3, #6]
 8002486:	440b      	add	r3, r1
 8002488:	429a      	cmp	r2, r3
 800248a:	dc07      	bgt.n	800249c <HandleTouch+0x37c>
			currentPage = PAGE_MAIN;
 800248c:	4b5d      	ldr	r3, [pc, #372]	@ (8002604 <HandleTouch+0x4e4>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8002492:	4b5f      	ldr	r3, [pc, #380]	@ (8002610 <HandleTouch+0x4f0>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fa1e 	bl	80018d8 <DrawMainPage>
		}
		//queueSelect button
		if (TS_State.X >= queueSelectButton.x
 800249c:	4b5a      	ldr	r3, [pc, #360]	@ (8002608 <HandleTouch+0x4e8>)
 800249e:	885a      	ldrh	r2, [r3, #2]
 80024a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002614 <HandleTouch+0x4f4>)
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d339      	bcc.n	800251c <HandleTouch+0x3fc>
				&& TS_State.X <= (queueSelectButton.x + queueSelectButton.w)
 80024a8:	4b57      	ldr	r3, [pc, #348]	@ (8002608 <HandleTouch+0x4e8>)
 80024aa:	885b      	ldrh	r3, [r3, #2]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b59      	ldr	r3, [pc, #356]	@ (8002614 <HandleTouch+0x4f4>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	4b57      	ldr	r3, [pc, #348]	@ (8002614 <HandleTouch+0x4f4>)
 80024b6:	889b      	ldrh	r3, [r3, #4]
 80024b8:	440b      	add	r3, r1
 80024ba:	429a      	cmp	r2, r3
 80024bc:	dc2e      	bgt.n	800251c <HandleTouch+0x3fc>
				&& TS_State.Y >= queueSelectButton.y
 80024be:	4b52      	ldr	r3, [pc, #328]	@ (8002608 <HandleTouch+0x4e8>)
 80024c0:	889a      	ldrh	r2, [r3, #4]
 80024c2:	4b54      	ldr	r3, [pc, #336]	@ (8002614 <HandleTouch+0x4f4>)
 80024c4:	885b      	ldrh	r3, [r3, #2]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d328      	bcc.n	800251c <HandleTouch+0x3fc>
				&& TS_State.Y <= (queueSelectButton.y + queueSelectButton.h)) {
 80024ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002608 <HandleTouch+0x4e8>)
 80024cc:	889b      	ldrh	r3, [r3, #4]
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b50      	ldr	r3, [pc, #320]	@ (8002614 <HandleTouch+0x4f4>)
 80024d2:	885b      	ldrh	r3, [r3, #2]
 80024d4:	4619      	mov	r1, r3
 80024d6:	4b4f      	ldr	r3, [pc, #316]	@ (8002614 <HandleTouch+0x4f4>)
 80024d8:	88db      	ldrh	r3, [r3, #6]
 80024da:	440b      	add	r3, r1
 80024dc:	429a      	cmp	r2, r3
 80024de:	dc1d      	bgt.n	800251c <HandleTouch+0x3fc>
			HAL_Delay(20);
 80024e0:	2014      	movs	r0, #20
 80024e2:	f002 ff9f 	bl	8005424 <HAL_Delay>
			//store the protocol in queueBuffer
			if (queueSize < MAX_QUEUE_SIZE) {
 80024e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002618 <HandleTouch+0x4f8>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	d816      	bhi.n	800251c <HandleTouch+0x3fc>
				queueProtocol(pageNum, protocol_offset);
 80024ee:	4b48      	ldr	r3, [pc, #288]	@ (8002610 <HandleTouch+0x4f0>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b41      	ldr	r3, [pc, #260]	@ (80025fc <HandleTouch+0x4dc>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f7fe ffee 	bl	80014dc <queueProtocol>
				queueSize++;
 8002500:	4b45      	ldr	r3, [pc, #276]	@ (8002618 <HandleTouch+0x4f8>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	3301      	adds	r3, #1
 8002506:	b2da      	uxtb	r2, r3
 8002508:	4b43      	ldr	r3, [pc, #268]	@ (8002618 <HandleTouch+0x4f8>)
 800250a:	701a      	strb	r2, [r3, #0]
				currentPage = PAGE_QUEUE;
 800250c:	4b3d      	ldr	r3, [pc, #244]	@ (8002604 <HandleTouch+0x4e4>)
 800250e:	2202      	movs	r2, #2
 8002510:	701a      	strb	r2, [r3, #0]
				DrawQueuePage(queueSize);
 8002512:	4b41      	ldr	r3, [pc, #260]	@ (8002618 <HandleTouch+0x4f8>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fc66 	bl	8001de8 <DrawQueuePage>
			} else {
				//handle queue buffer being full
			}
		}
		//select button
		if (TS_State.X >= selectButton.x
 800251c:	4b3a      	ldr	r3, [pc, #232]	@ (8002608 <HandleTouch+0x4e8>)
 800251e:	885a      	ldrh	r2, [r3, #2]
 8002520:	4b3e      	ldr	r3, [pc, #248]	@ (800261c <HandleTouch+0x4fc>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d32c      	bcc.n	8002582 <HandleTouch+0x462>
				&& TS_State.X <= (selectButton.x + selectButton.w)
 8002528:	4b37      	ldr	r3, [pc, #220]	@ (8002608 <HandleTouch+0x4e8>)
 800252a:	885b      	ldrh	r3, [r3, #2]
 800252c:	461a      	mov	r2, r3
 800252e:	4b3b      	ldr	r3, [pc, #236]	@ (800261c <HandleTouch+0x4fc>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	4619      	mov	r1, r3
 8002534:	4b39      	ldr	r3, [pc, #228]	@ (800261c <HandleTouch+0x4fc>)
 8002536:	889b      	ldrh	r3, [r3, #4]
 8002538:	440b      	add	r3, r1
 800253a:	429a      	cmp	r2, r3
 800253c:	dc21      	bgt.n	8002582 <HandleTouch+0x462>
				&& TS_State.Y >= selectButton.y
 800253e:	4b32      	ldr	r3, [pc, #200]	@ (8002608 <HandleTouch+0x4e8>)
 8002540:	889a      	ldrh	r2, [r3, #4]
 8002542:	4b36      	ldr	r3, [pc, #216]	@ (800261c <HandleTouch+0x4fc>)
 8002544:	885b      	ldrh	r3, [r3, #2]
 8002546:	429a      	cmp	r2, r3
 8002548:	d31b      	bcc.n	8002582 <HandleTouch+0x462>
				&& TS_State.Y <= (selectButton.y + selectButton.h)) {
 800254a:	4b2f      	ldr	r3, [pc, #188]	@ (8002608 <HandleTouch+0x4e8>)
 800254c:	889b      	ldrh	r3, [r3, #4]
 800254e:	461a      	mov	r2, r3
 8002550:	4b32      	ldr	r3, [pc, #200]	@ (800261c <HandleTouch+0x4fc>)
 8002552:	885b      	ldrh	r3, [r3, #2]
 8002554:	4619      	mov	r1, r3
 8002556:	4b31      	ldr	r3, [pc, #196]	@ (800261c <HandleTouch+0x4fc>)
 8002558:	88db      	ldrh	r3, [r3, #6]
 800255a:	440b      	add	r3, r1
 800255c:	429a      	cmp	r2, r3
 800255e:	dc10      	bgt.n	8002582 <HandleTouch+0x462>
			HAL_Delay(20);
 8002560:	2014      	movs	r0, #20
 8002562:	f002 ff5f 	bl	8005424 <HAL_Delay>
			//transmit protocol and move to finish page
			transmitProtocol(pageNum, protocol_offset);
 8002566:	4b2a      	ldr	r3, [pc, #168]	@ (8002610 <HandleTouch+0x4f0>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4b23      	ldr	r3, [pc, #140]	@ (80025fc <HandleTouch+0x4dc>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	4610      	mov	r0, r2
 8002574:	f7fe ff5e 	bl	8001434 <transmitProtocol>
			currentPage = PAGE_FINISH;
 8002578:	4b22      	ldr	r3, [pc, #136]	@ (8002604 <HandleTouch+0x4e4>)
 800257a:	2204      	movs	r2, #4
 800257c:	701a      	strb	r2, [r3, #0]
			DrawPageFinish();
 800257e:	f7ff fd89 	bl	8002094 <DrawPageFinish>
		}
		//delete button
		if (TS_State.X >= deleteButton.x
 8002582:	4b21      	ldr	r3, [pc, #132]	@ (8002608 <HandleTouch+0x4e8>)
 8002584:	885a      	ldrh	r2, [r3, #2]
 8002586:	4b26      	ldr	r3, [pc, #152]	@ (8002620 <HandleTouch+0x500>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d32e      	bcc.n	80025ec <HandleTouch+0x4cc>
				&& TS_State.X <= (deleteButton.x + deleteButton.w)
 800258e:	4b1e      	ldr	r3, [pc, #120]	@ (8002608 <HandleTouch+0x4e8>)
 8002590:	885b      	ldrh	r3, [r3, #2]
 8002592:	461a      	mov	r2, r3
 8002594:	4b22      	ldr	r3, [pc, #136]	@ (8002620 <HandleTouch+0x500>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	4619      	mov	r1, r3
 800259a:	4b21      	ldr	r3, [pc, #132]	@ (8002620 <HandleTouch+0x500>)
 800259c:	889b      	ldrh	r3, [r3, #4]
 800259e:	440b      	add	r3, r1
 80025a0:	429a      	cmp	r2, r3
 80025a2:	dc23      	bgt.n	80025ec <HandleTouch+0x4cc>
				&& TS_State.Y >= deleteButton.y
 80025a4:	4b18      	ldr	r3, [pc, #96]	@ (8002608 <HandleTouch+0x4e8>)
 80025a6:	889a      	ldrh	r2, [r3, #4]
 80025a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <HandleTouch+0x500>)
 80025aa:	885b      	ldrh	r3, [r3, #2]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d31d      	bcc.n	80025ec <HandleTouch+0x4cc>
				&& TS_State.Y <= (deleteButton.y + deleteButton.h)) {
 80025b0:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <HandleTouch+0x4e8>)
 80025b2:	889b      	ldrh	r3, [r3, #4]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <HandleTouch+0x500>)
 80025b8:	885b      	ldrh	r3, [r3, #2]
 80025ba:	4619      	mov	r1, r3
 80025bc:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <HandleTouch+0x500>)
 80025be:	88db      	ldrh	r3, [r3, #6]
 80025c0:	440b      	add	r3, r1
 80025c2:	429a      	cmp	r2, r3
 80025c4:	dc12      	bgt.n	80025ec <HandleTouch+0x4cc>
			//move to delete confirmation page
			currentPage = PAGE_CONFIRMATION;
 80025c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002604 <HandleTouch+0x4e4>)
 80025c8:	2203      	movs	r2, #3
 80025ca:	701a      	strb	r2, [r3, #0]
			DrawConfirmationPage(pageNum, protocol_offset);
 80025cc:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <HandleTouch+0x4f0>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b0a      	ldr	r3, [pc, #40]	@ (80025fc <HandleTouch+0x4dc>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	4619      	mov	r1, r3
 80025d8:	4610      	mov	r0, r2
 80025da:	f7ff fcdb 	bl	8001f94 <DrawConfirmationPage>
		}
		//next page wont register touch until you let go
		while (TS_State.TouchDetected) {
 80025de:	e005      	b.n	80025ec <HandleTouch+0x4cc>
			BSP_TS_GetState(&TS_State);
 80025e0:	4809      	ldr	r0, [pc, #36]	@ (8002608 <HandleTouch+0x4e8>)
 80025e2:	f002 fe2b 	bl	800523c <BSP_TS_GetState>
			if (!TS_State.TouchDetected) {
			}
			HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 80025e6:	2014      	movs	r0, #20
 80025e8:	f002 ff1c 	bl	8005424 <HAL_Delay>
		while (TS_State.TouchDetected) {
 80025ec:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HandleTouch+0x4e8>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f5      	bne.n	80025e0 <HandleTouch+0x4c0>
		}
		break;
 80025f4:	e122      	b.n	800283c <HandleTouch+0x71c>
 80025f6:	bf00      	nop
 80025f8:	20008f98 	.word	0x20008f98
 80025fc:	20008f99 	.word	0x20008f99
 8002600:	20000000 	.word	0x20000000
 8002604:	20000605 	.word	0x20000605
 8002608:	200005f8 	.word	0x200005f8
 800260c:	200000ac 	.word	0x200000ac
 8002610:	200001de 	.word	0x200001de
 8002614:	2000015c 	.word	0x2000015c
 8002618:	20008310 	.word	0x20008310
 800261c:	20000188 	.word	0x20000188
 8002620:	200001b4 	.word	0x200001b4
	case PAGE_QUEUE:
		//back button
		if (TS_State.X >= backButton.x
 8002624:	4b87      	ldr	r3, [pc, #540]	@ (8002844 <HandleTouch+0x724>)
 8002626:	885a      	ldrh	r2, [r3, #2]
 8002628:	4b87      	ldr	r3, [pc, #540]	@ (8002848 <HandleTouch+0x728>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d32e      	bcc.n	800268e <HandleTouch+0x56e>
				&& TS_State.X <= (backButton.x + backButton.w)
 8002630:	4b84      	ldr	r3, [pc, #528]	@ (8002844 <HandleTouch+0x724>)
 8002632:	885b      	ldrh	r3, [r3, #2]
 8002634:	461a      	mov	r2, r3
 8002636:	4b84      	ldr	r3, [pc, #528]	@ (8002848 <HandleTouch+0x728>)
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	4b82      	ldr	r3, [pc, #520]	@ (8002848 <HandleTouch+0x728>)
 800263e:	889b      	ldrh	r3, [r3, #4]
 8002640:	440b      	add	r3, r1
 8002642:	429a      	cmp	r2, r3
 8002644:	dc23      	bgt.n	800268e <HandleTouch+0x56e>
				&& TS_State.Y >= backButton.y
 8002646:	4b7f      	ldr	r3, [pc, #508]	@ (8002844 <HandleTouch+0x724>)
 8002648:	889a      	ldrh	r2, [r3, #4]
 800264a:	4b7f      	ldr	r3, [pc, #508]	@ (8002848 <HandleTouch+0x728>)
 800264c:	885b      	ldrh	r3, [r3, #2]
 800264e:	429a      	cmp	r2, r3
 8002650:	d31d      	bcc.n	800268e <HandleTouch+0x56e>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 8002652:	4b7c      	ldr	r3, [pc, #496]	@ (8002844 <HandleTouch+0x724>)
 8002654:	889b      	ldrh	r3, [r3, #4]
 8002656:	461a      	mov	r2, r3
 8002658:	4b7b      	ldr	r3, [pc, #492]	@ (8002848 <HandleTouch+0x728>)
 800265a:	885b      	ldrh	r3, [r3, #2]
 800265c:	4619      	mov	r1, r3
 800265e:	4b7a      	ldr	r3, [pc, #488]	@ (8002848 <HandleTouch+0x728>)
 8002660:	88db      	ldrh	r3, [r3, #6]
 8002662:	440b      	add	r3, r1
 8002664:	429a      	cmp	r2, r3
 8002666:	dc12      	bgt.n	800268e <HandleTouch+0x56e>
			currentPage = PAGE_MAIN;
 8002668:	4b78      	ldr	r3, [pc, #480]	@ (800284c <HandleTouch+0x72c>)
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 800266e:	4b78      	ldr	r3, [pc, #480]	@ (8002850 <HandleTouch+0x730>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff f930 	bl	80018d8 <DrawMainPage>
			//next page wont register touch until you let go
			while (TS_State.TouchDetected) {
 8002678:	e005      	b.n	8002686 <HandleTouch+0x566>
				BSP_TS_GetState(&TS_State);
 800267a:	4872      	ldr	r0, [pc, #456]	@ (8002844 <HandleTouch+0x724>)
 800267c:	f002 fdde 	bl	800523c <BSP_TS_GetState>
				if (!TS_State.TouchDetected) {
				}
				HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8002680:	2014      	movs	r0, #20
 8002682:	f002 fecf 	bl	8005424 <HAL_Delay>
			while (TS_State.TouchDetected) {
 8002686:	4b6f      	ldr	r3, [pc, #444]	@ (8002844 <HandleTouch+0x724>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f5      	bne.n	800267a <HandleTouch+0x55a>
			}
		}
		//run button
		if (TS_State.X >= runButton.x
 800268e:	4b6d      	ldr	r3, [pc, #436]	@ (8002844 <HandleTouch+0x724>)
 8002690:	885a      	ldrh	r2, [r3, #2]
 8002692:	4b70      	ldr	r3, [pc, #448]	@ (8002854 <HandleTouch+0x734>)
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	f0c0 80cd 	bcc.w	8002836 <HandleTouch+0x716>
				&& TS_State.X <= (runButton.x + runButton.w)
 800269c:	4b69      	ldr	r3, [pc, #420]	@ (8002844 <HandleTouch+0x724>)
 800269e:	885b      	ldrh	r3, [r3, #2]
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002854 <HandleTouch+0x734>)
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	4619      	mov	r1, r3
 80026a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002854 <HandleTouch+0x734>)
 80026aa:	889b      	ldrh	r3, [r3, #4]
 80026ac:	440b      	add	r3, r1
 80026ae:	429a      	cmp	r2, r3
 80026b0:	f300 80c1 	bgt.w	8002836 <HandleTouch+0x716>
				&& TS_State.Y >= runButton.y
 80026b4:	4b63      	ldr	r3, [pc, #396]	@ (8002844 <HandleTouch+0x724>)
 80026b6:	889a      	ldrh	r2, [r3, #4]
 80026b8:	4b66      	ldr	r3, [pc, #408]	@ (8002854 <HandleTouch+0x734>)
 80026ba:	885b      	ldrh	r3, [r3, #2]
 80026bc:	429a      	cmp	r2, r3
 80026be:	f0c0 80ba 	bcc.w	8002836 <HandleTouch+0x716>
				&& TS_State.Y <= (runButton.y + runButton.h)) {
 80026c2:	4b60      	ldr	r3, [pc, #384]	@ (8002844 <HandleTouch+0x724>)
 80026c4:	889b      	ldrh	r3, [r3, #4]
 80026c6:	461a      	mov	r2, r3
 80026c8:	4b62      	ldr	r3, [pc, #392]	@ (8002854 <HandleTouch+0x734>)
 80026ca:	885b      	ldrh	r3, [r3, #2]
 80026cc:	4619      	mov	r1, r3
 80026ce:	4b61      	ldr	r3, [pc, #388]	@ (8002854 <HandleTouch+0x734>)
 80026d0:	88db      	ldrh	r3, [r3, #6]
 80026d2:	440b      	add	r3, r1
 80026d4:	429a      	cmp	r2, r3
 80026d6:	f300 80ae 	bgt.w	8002836 <HandleTouch+0x716>
			HAL_Delay(20);
 80026da:	2014      	movs	r0, #20
 80026dc:	f002 fea2 	bl	8005424 <HAL_Delay>
			//handle queue functionality here dorjee
			transmitQueuedProtocols(queueSize);
 80026e0:	4b5d      	ldr	r3, [pc, #372]	@ (8002858 <HandleTouch+0x738>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe ff53 	bl	8001590 <transmitQueuedProtocols>
			queueSize = 0;
 80026ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002858 <HandleTouch+0x738>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
			currentPage = PAGE_FINISH;
 80026f0:	4b56      	ldr	r3, [pc, #344]	@ (800284c <HandleTouch+0x72c>)
 80026f2:	2204      	movs	r2, #4
 80026f4:	701a      	strb	r2, [r3, #0]
			DrawPageFinish();
 80026f6:	f7ff fccd 	bl	8002094 <DrawPageFinish>
		}
		break;
 80026fa:	e09c      	b.n	8002836 <HandleTouch+0x716>
	case PAGE_CONFIRMATION:
		//back button
		if (TS_State.X >= backButton.x
 80026fc:	4b51      	ldr	r3, [pc, #324]	@ (8002844 <HandleTouch+0x724>)
 80026fe:	885a      	ldrh	r2, [r3, #2]
 8002700:	4b51      	ldr	r3, [pc, #324]	@ (8002848 <HandleTouch+0x728>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d329      	bcc.n	800275c <HandleTouch+0x63c>
				&& TS_State.X <= (backButton.x + backButton.w)
 8002708:	4b4e      	ldr	r3, [pc, #312]	@ (8002844 <HandleTouch+0x724>)
 800270a:	885b      	ldrh	r3, [r3, #2]
 800270c:	461a      	mov	r2, r3
 800270e:	4b4e      	ldr	r3, [pc, #312]	@ (8002848 <HandleTouch+0x728>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	4619      	mov	r1, r3
 8002714:	4b4c      	ldr	r3, [pc, #304]	@ (8002848 <HandleTouch+0x728>)
 8002716:	889b      	ldrh	r3, [r3, #4]
 8002718:	440b      	add	r3, r1
 800271a:	429a      	cmp	r2, r3
 800271c:	dc1e      	bgt.n	800275c <HandleTouch+0x63c>
				&& TS_State.Y >= backButton.y
 800271e:	4b49      	ldr	r3, [pc, #292]	@ (8002844 <HandleTouch+0x724>)
 8002720:	889a      	ldrh	r2, [r3, #4]
 8002722:	4b49      	ldr	r3, [pc, #292]	@ (8002848 <HandleTouch+0x728>)
 8002724:	885b      	ldrh	r3, [r3, #2]
 8002726:	429a      	cmp	r2, r3
 8002728:	d318      	bcc.n	800275c <HandleTouch+0x63c>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 800272a:	4b46      	ldr	r3, [pc, #280]	@ (8002844 <HandleTouch+0x724>)
 800272c:	889b      	ldrh	r3, [r3, #4]
 800272e:	461a      	mov	r2, r3
 8002730:	4b45      	ldr	r3, [pc, #276]	@ (8002848 <HandleTouch+0x728>)
 8002732:	885b      	ldrh	r3, [r3, #2]
 8002734:	4619      	mov	r1, r3
 8002736:	4b44      	ldr	r3, [pc, #272]	@ (8002848 <HandleTouch+0x728>)
 8002738:	88db      	ldrh	r3, [r3, #6]
 800273a:	440b      	add	r3, r1
 800273c:	429a      	cmp	r2, r3
 800273e:	dc0d      	bgt.n	800275c <HandleTouch+0x63c>
			currentPage = PAGE_SELECT;
 8002740:	4b42      	ldr	r3, [pc, #264]	@ (800284c <HandleTouch+0x72c>)
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
			DrawInfoPage(buttons[i].label);
 8002746:	4b45      	ldr	r3, [pc, #276]	@ (800285c <HandleTouch+0x73c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	222a      	movs	r2, #42	@ 0x2a
 800274c:	fb02 f303 	mul.w	r3, r2, r3
 8002750:	3308      	adds	r3, #8
 8002752:	4a43      	ldr	r2, [pc, #268]	@ (8002860 <HandleTouch+0x740>)
 8002754:	4413      	add	r3, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fa98 	bl	8001c8c <DrawInfoPage>
		}
		//confirm button
		if (TS_State.X >= confirmButton.x
 800275c:	4b39      	ldr	r3, [pc, #228]	@ (8002844 <HandleTouch+0x724>)
 800275e:	885a      	ldrh	r2, [r3, #2]
 8002760:	4b40      	ldr	r3, [pc, #256]	@ (8002864 <HandleTouch+0x744>)
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d336      	bcc.n	80027d6 <HandleTouch+0x6b6>
				&& TS_State.X <= (confirmButton.x + confirmButton.w)
 8002768:	4b36      	ldr	r3, [pc, #216]	@ (8002844 <HandleTouch+0x724>)
 800276a:	885b      	ldrh	r3, [r3, #2]
 800276c:	461a      	mov	r2, r3
 800276e:	4b3d      	ldr	r3, [pc, #244]	@ (8002864 <HandleTouch+0x744>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	4619      	mov	r1, r3
 8002774:	4b3b      	ldr	r3, [pc, #236]	@ (8002864 <HandleTouch+0x744>)
 8002776:	889b      	ldrh	r3, [r3, #4]
 8002778:	440b      	add	r3, r1
 800277a:	429a      	cmp	r2, r3
 800277c:	dc2b      	bgt.n	80027d6 <HandleTouch+0x6b6>
				&& TS_State.Y >= confirmButton.y
 800277e:	4b31      	ldr	r3, [pc, #196]	@ (8002844 <HandleTouch+0x724>)
 8002780:	889a      	ldrh	r2, [r3, #4]
 8002782:	4b38      	ldr	r3, [pc, #224]	@ (8002864 <HandleTouch+0x744>)
 8002784:	885b      	ldrh	r3, [r3, #2]
 8002786:	429a      	cmp	r2, r3
 8002788:	d325      	bcc.n	80027d6 <HandleTouch+0x6b6>
				&& TS_State.Y <= (confirmButton.y + confirmButton.h)) {
 800278a:	4b2e      	ldr	r3, [pc, #184]	@ (8002844 <HandleTouch+0x724>)
 800278c:	889b      	ldrh	r3, [r3, #4]
 800278e:	461a      	mov	r2, r3
 8002790:	4b34      	ldr	r3, [pc, #208]	@ (8002864 <HandleTouch+0x744>)
 8002792:	885b      	ldrh	r3, [r3, #2]
 8002794:	4619      	mov	r1, r3
 8002796:	4b33      	ldr	r3, [pc, #204]	@ (8002864 <HandleTouch+0x744>)
 8002798:	88db      	ldrh	r3, [r3, #6]
 800279a:	440b      	add	r3, r1
 800279c:	429a      	cmp	r2, r3
 800279e:	dc1a      	bgt.n	80027d6 <HandleTouch+0x6b6>
			HAL_Delay(20);
 80027a0:	2014      	movs	r0, #20
 80027a2:	f002 fe3f 	bl	8005424 <HAL_Delay>
			//delete protocol and go back to main page
			deleteProtocol(pageNum, protocol_offset);
 80027a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002850 <HandleTouch+0x730>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002868 <HandleTouch+0x748>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f7fe ff2a 	bl	800160c <deleteProtocol>
			currentPage = PAGE_MAIN;
 80027b8:	4b24      	ldr	r3, [pc, #144]	@ (800284c <HandleTouch+0x72c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 80027be:	4b24      	ldr	r3, [pc, #144]	@ (8002850 <HandleTouch+0x730>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff f888 	bl	80018d8 <DrawMainPage>
		}
		//next page wont register touch until you let go
		while (TS_State.TouchDetected) {
 80027c8:	e005      	b.n	80027d6 <HandleTouch+0x6b6>
			BSP_TS_GetState(&TS_State);
 80027ca:	481e      	ldr	r0, [pc, #120]	@ (8002844 <HandleTouch+0x724>)
 80027cc:	f002 fd36 	bl	800523c <BSP_TS_GetState>
			if (!TS_State.TouchDetected) {
			}
			HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 80027d0:	2014      	movs	r0, #20
 80027d2:	f002 fe27 	bl	8005424 <HAL_Delay>
		while (TS_State.TouchDetected) {
 80027d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <HandleTouch+0x724>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f5      	bne.n	80027ca <HandleTouch+0x6aa>
		}
		break;
 80027de:	e02d      	b.n	800283c <HandleTouch+0x71c>
	case PAGE_FINISH:
		if (TS_State.X >= backButton.x
 80027e0:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <HandleTouch+0x724>)
 80027e2:	885a      	ldrh	r2, [r3, #2]
 80027e4:	4b18      	ldr	r3, [pc, #96]	@ (8002848 <HandleTouch+0x728>)
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d326      	bcc.n	800283a <HandleTouch+0x71a>
				&& TS_State.X <= (backButton.x + backButton.w)
 80027ec:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <HandleTouch+0x724>)
 80027ee:	885b      	ldrh	r3, [r3, #2]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b15      	ldr	r3, [pc, #84]	@ (8002848 <HandleTouch+0x728>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	4619      	mov	r1, r3
 80027f8:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <HandleTouch+0x728>)
 80027fa:	889b      	ldrh	r3, [r3, #4]
 80027fc:	440b      	add	r3, r1
 80027fe:	429a      	cmp	r2, r3
 8002800:	dc1b      	bgt.n	800283a <HandleTouch+0x71a>
				&& TS_State.Y >= backButton.y
 8002802:	4b10      	ldr	r3, [pc, #64]	@ (8002844 <HandleTouch+0x724>)
 8002804:	889a      	ldrh	r2, [r3, #4]
 8002806:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <HandleTouch+0x728>)
 8002808:	885b      	ldrh	r3, [r3, #2]
 800280a:	429a      	cmp	r2, r3
 800280c:	d315      	bcc.n	800283a <HandleTouch+0x71a>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 800280e:	4b0d      	ldr	r3, [pc, #52]	@ (8002844 <HandleTouch+0x724>)
 8002810:	889b      	ldrh	r3, [r3, #4]
 8002812:	461a      	mov	r2, r3
 8002814:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <HandleTouch+0x728>)
 8002816:	885b      	ldrh	r3, [r3, #2]
 8002818:	4619      	mov	r1, r3
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HandleTouch+0x728>)
 800281c:	88db      	ldrh	r3, [r3, #6]
 800281e:	440b      	add	r3, r1
 8002820:	429a      	cmp	r2, r3
 8002822:	dc0a      	bgt.n	800283a <HandleTouch+0x71a>
			currentPage = PAGE_MAIN;
 8002824:	4b09      	ldr	r3, [pc, #36]	@ (800284c <HandleTouch+0x72c>)
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 800282a:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <HandleTouch+0x730>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff f852 	bl	80018d8 <DrawMainPage>
		}
		break;
 8002834:	e001      	b.n	800283a <HandleTouch+0x71a>
		break;
 8002836:	bf00      	nop
 8002838:	e000      	b.n	800283c <HandleTouch+0x71c>
		break;
 800283a:	bf00      	nop
	}
}
 800283c:	4618      	mov	r0, r3
 800283e:	371c      	adds	r7, #28
 8002840:	46bd      	mov	sp, r7
 8002842:	bd90      	pop	{r4, r7, pc}
 8002844:	200005f8 	.word	0x200005f8
 8002848:	200000ac 	.word	0x200000ac
 800284c:	20000605 	.word	0x20000605
 8002850:	200001de 	.word	0x200001de
 8002854:	20000104 	.word	0x20000104
 8002858:	20008310 	.word	0x20008310
 800285c:	20000608 	.word	0x20000608
 8002860:	20000000 	.word	0x20000000
 8002864:	20000130 	.word	0x20000130
 8002868:	20008f99 	.word	0x20008f99

0800286c <get_sector_address>:

//I name sectors from 1-14. the actual sectors are from 5-23. this functions maps them
uint32_t get_sector_address(uint32_t sector) {
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	2b0d      	cmp	r3, #13
 800287a:	d83b      	bhi.n	80028f4 <get_sector_address+0x88>
 800287c:	a201      	add	r2, pc, #4	@ (adr r2, 8002884 <get_sector_address+0x18>)
 800287e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002882:	bf00      	nop
 8002884:	080028bd 	.word	0x080028bd
 8002888:	080028c1 	.word	0x080028c1
 800288c:	080028c5 	.word	0x080028c5
 8002890:	080028c9 	.word	0x080028c9
 8002894:	080028cd 	.word	0x080028cd
 8002898:	080028d1 	.word	0x080028d1
 800289c:	080028d5 	.word	0x080028d5
 80028a0:	080028d9 	.word	0x080028d9
 80028a4:	080028dd 	.word	0x080028dd
 80028a8:	080028e1 	.word	0x080028e1
 80028ac:	080028e5 	.word	0x080028e5
 80028b0:	080028e9 	.word	0x080028e9
 80028b4:	080028ed 	.word	0x080028ed
 80028b8:	080028f1 	.word	0x080028f1
	case 1:
		return SECTOR_5;
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <get_sector_address+0x98>)
 80028be:	e01a      	b.n	80028f6 <get_sector_address+0x8a>
	case 2:
		return SECTOR_6;
 80028c0:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <get_sector_address+0x9c>)
 80028c2:	e018      	b.n	80028f6 <get_sector_address+0x8a>
	case 3:
		return SECTOR_7;
 80028c4:	4b11      	ldr	r3, [pc, #68]	@ (800290c <get_sector_address+0xa0>)
 80028c6:	e016      	b.n	80028f6 <get_sector_address+0x8a>
	case 4:
		return SECTOR_8;
 80028c8:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <get_sector_address+0xa4>)
 80028ca:	e014      	b.n	80028f6 <get_sector_address+0x8a>
	case 5:
		return SECTOR_9;
 80028cc:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <get_sector_address+0xa8>)
 80028ce:	e012      	b.n	80028f6 <get_sector_address+0x8a>
	case 6:
		return SECTOR_10;
 80028d0:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <get_sector_address+0xac>)
 80028d2:	e010      	b.n	80028f6 <get_sector_address+0x8a>
	case 7:
		return SECTOR_11;
 80028d4:	4b11      	ldr	r3, [pc, #68]	@ (800291c <get_sector_address+0xb0>)
 80028d6:	e00e      	b.n	80028f6 <get_sector_address+0x8a>
	case 8:
		return SECTOR_17;
 80028d8:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <get_sector_address+0xb4>)
 80028da:	e00c      	b.n	80028f6 <get_sector_address+0x8a>
	case 9:
		return SECTOR_18;
 80028dc:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <get_sector_address+0xb8>)
 80028de:	e00a      	b.n	80028f6 <get_sector_address+0x8a>
	case 10:
		return SECTOR_19;
 80028e0:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <get_sector_address+0xbc>)
 80028e2:	e008      	b.n	80028f6 <get_sector_address+0x8a>
	case 11:
		return SECTOR_20;
 80028e4:	4b11      	ldr	r3, [pc, #68]	@ (800292c <get_sector_address+0xc0>)
 80028e6:	e006      	b.n	80028f6 <get_sector_address+0x8a>
	case 12:
		return SECTOR_21;
 80028e8:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <get_sector_address+0xc4>)
 80028ea:	e004      	b.n	80028f6 <get_sector_address+0x8a>
	case 13:
		return SECTOR_22;
 80028ec:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <get_sector_address+0xc8>)
 80028ee:	e002      	b.n	80028f6 <get_sector_address+0x8a>
	case 14:
		return SECTOR_23;
 80028f0:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <get_sector_address+0xcc>)
 80028f2:	e000      	b.n	80028f6 <get_sector_address+0x8a>
	default:
		break;
 80028f4:	bf00      	nop
	}
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	08020000 	.word	0x08020000
 8002908:	08040000 	.word	0x08040000
 800290c:	08060000 	.word	0x08060000
 8002910:	08080000 	.word	0x08080000
 8002914:	080a0000 	.word	0x080a0000
 8002918:	080c0000 	.word	0x080c0000
 800291c:	080e0000 	.word	0x080e0000
 8002920:	08120000 	.word	0x08120000
 8002924:	08140000 	.word	0x08140000
 8002928:	08160000 	.word	0x08160000
 800292c:	08180000 	.word	0x08180000
 8002930:	081a0000 	.word	0x081a0000
 8002934:	081c0000 	.word	0x081c0000
 8002938:	081e0000 	.word	0x081e0000

0800293c <sector_mapping>:

uint32_t sector_mapping(uint32_t sector) {
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	2b0d      	cmp	r3, #13
 800294a:	d83b      	bhi.n	80029c4 <sector_mapping+0x88>
 800294c:	a201      	add	r2, pc, #4	@ (adr r2, 8002954 <sector_mapping+0x18>)
 800294e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002952:	bf00      	nop
 8002954:	0800298d 	.word	0x0800298d
 8002958:	08002991 	.word	0x08002991
 800295c:	08002995 	.word	0x08002995
 8002960:	08002999 	.word	0x08002999
 8002964:	0800299d 	.word	0x0800299d
 8002968:	080029a1 	.word	0x080029a1
 800296c:	080029a5 	.word	0x080029a5
 8002970:	080029a9 	.word	0x080029a9
 8002974:	080029ad 	.word	0x080029ad
 8002978:	080029b1 	.word	0x080029b1
 800297c:	080029b5 	.word	0x080029b5
 8002980:	080029b9 	.word	0x080029b9
 8002984:	080029bd 	.word	0x080029bd
 8002988:	080029c1 	.word	0x080029c1
	case 1:
		return 5;
 800298c:	2305      	movs	r3, #5
 800298e:	e019      	b.n	80029c4 <sector_mapping+0x88>
	case 2:
		return 6;
 8002990:	2306      	movs	r3, #6
 8002992:	e017      	b.n	80029c4 <sector_mapping+0x88>
	case 3:
		return 7;
 8002994:	2307      	movs	r3, #7
 8002996:	e015      	b.n	80029c4 <sector_mapping+0x88>
	case 4:
		return 8;
 8002998:	2308      	movs	r3, #8
 800299a:	e013      	b.n	80029c4 <sector_mapping+0x88>
	case 5:
		return 9;
 800299c:	2309      	movs	r3, #9
 800299e:	e011      	b.n	80029c4 <sector_mapping+0x88>
	case 6:
		return 10;
 80029a0:	230a      	movs	r3, #10
 80029a2:	e00f      	b.n	80029c4 <sector_mapping+0x88>
	case 7:
		return 11;
 80029a4:	230b      	movs	r3, #11
 80029a6:	e00d      	b.n	80029c4 <sector_mapping+0x88>
	case 8:
		return 17;
 80029a8:	2311      	movs	r3, #17
 80029aa:	e00b      	b.n	80029c4 <sector_mapping+0x88>
	case 9:
		return 18;
 80029ac:	2312      	movs	r3, #18
 80029ae:	e009      	b.n	80029c4 <sector_mapping+0x88>
	case 10:
		return 19;
 80029b0:	2313      	movs	r3, #19
 80029b2:	e007      	b.n	80029c4 <sector_mapping+0x88>
	case 11:
		return 20;
 80029b4:	2314      	movs	r3, #20
 80029b6:	e005      	b.n	80029c4 <sector_mapping+0x88>
	case 12:
		return 21;
 80029b8:	2315      	movs	r3, #21
 80029ba:	e003      	b.n	80029c4 <sector_mapping+0x88>
	case 13:
		return 22;
 80029bc:	2316      	movs	r3, #22
 80029be:	e001      	b.n	80029c4 <sector_mapping+0x88>
	case 14:
		return 23;
 80029c0:	2317      	movs	r3, #23
 80029c2:	e7ff      	b.n	80029c4 <sector_mapping+0x88>
	}
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0f      	ldr	r2, [pc, #60]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029e2:	f002 fcff 	bl	80053e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	//10 hz interrupt
	if (htim == &htim10) {
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d10b      	bne.n	8002a06 <HAL_TIM_PeriodElapsedCallback+0x36>
		if (!USB_BUSY) {
 80029ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <HAL_TIM_PeriodElapsedCallback+0x2c>
			checkTouchFlag = 1;
 80029f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
		}
		count++;
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	4a0a      	ldr	r2, [pc, #40]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a04:	6013      	str	r3, [r2, #0]
	}

	//use this for a slower frequency application
	if (count == 5) {
 8002a06:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d102      	bne.n	8002a14 <HAL_TIM_PeriodElapsedCallback+0x44>
		//checkTouchFlag = 1;
		count = 0;
 8002a0e:	4b07      	ldr	r3, [pc, #28]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END Callback 1 */
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40001000 	.word	0x40001000
 8002a20:	200004ec 	.word	0x200004ec
 8002a24:	20008311 	.word	0x20008311
 8002a28:	20000604 	.word	0x20000604
 8002a2c:	20000600 	.word	0x20000600

08002a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a34:	b672      	cpsid	i
}
 8002a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <Error_Handler+0x8>

08002a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	4b10      	ldr	r3, [pc, #64]	@ (8002a88 <HAL_MspInit+0x4c>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a88 <HAL_MspInit+0x4c>)
 8002a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a52:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <HAL_MspInit+0x4c>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	603b      	str	r3, [r7, #0]
 8002a62:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <HAL_MspInit+0x4c>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	4a08      	ldr	r2, [pc, #32]	@ (8002a88 <HAL_MspInit+0x4c>)
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <HAL_MspInit+0x4c>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800

08002a8c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac8 <HAL_CRC_MspInit+0x3c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d10d      	bne.n	8002aba <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <HAL_CRC_MspInit+0x40>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	4a09      	ldr	r2, [pc, #36]	@ (8002acc <HAL_CRC_MspInit+0x40>)
 8002aa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aae:	4b07      	ldr	r3, [pc, #28]	@ (8002acc <HAL_CRC_MspInit+0x40>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40023000 	.word	0x40023000
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0e      	ldr	r2, [pc, #56]	@ (8002b18 <HAL_DMA2D_MspInit+0x48>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d115      	bne.n	8002b0e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <HAL_DMA2D_MspInit+0x4c>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	4a0c      	ldr	r2, [pc, #48]	@ (8002b1c <HAL_DMA2D_MspInit+0x4c>)
 8002aec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <HAL_DMA2D_MspInit+0x4c>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2105      	movs	r1, #5
 8002b02:	205a      	movs	r0, #90	@ 0x5a
 8002b04:	f002 fd6a 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002b08:	205a      	movs	r0, #90	@ 0x5a
 8002b0a:	f002 fd83 	bl	8005614 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	4002b000 	.word	0x4002b000
 8002b1c:	40023800 	.word	0x40023800

08002b20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	@ 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a29      	ldr	r2, [pc, #164]	@ (8002be4 <HAL_I2C_MspInit+0xc4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d14b      	bne.n	8002bda <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	4b28      	ldr	r3, [pc, #160]	@ (8002be8 <HAL_I2C_MspInit+0xc8>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	4a27      	ldr	r2, [pc, #156]	@ (8002be8 <HAL_I2C_MspInit+0xc8>)
 8002b4c:	f043 0304 	orr.w	r3, r3, #4
 8002b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b52:	4b25      	ldr	r3, [pc, #148]	@ (8002be8 <HAL_I2C_MspInit+0xc8>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b21      	ldr	r3, [pc, #132]	@ (8002be8 <HAL_I2C_MspInit+0xc8>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	4a20      	ldr	r2, [pc, #128]	@ (8002be8 <HAL_I2C_MspInit+0xc8>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002be8 <HAL_I2C_MspInit+0xc8>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002b7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b80:	2312      	movs	r3, #18
 8002b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b84:	2301      	movs	r3, #1
 8002b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	4619      	mov	r1, r3
 8002b96:	4815      	ldr	r0, [pc, #84]	@ (8002bec <HAL_I2C_MspInit+0xcc>)
 8002b98:	f003 fcd4 	bl	8006544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002b9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ba2:	2312      	movs	r3, #18
 8002ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bae:	2304      	movs	r3, #4
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	480d      	ldr	r0, [pc, #52]	@ (8002bf0 <HAL_I2C_MspInit+0xd0>)
 8002bba:	f003 fcc3 	bl	8006544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <HAL_I2C_MspInit+0xc8>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	4a08      	ldr	r2, [pc, #32]	@ (8002be8 <HAL_I2C_MspInit+0xc8>)
 8002bc8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_I2C_MspInit+0xc8>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002bda:	bf00      	nop
 8002bdc:	3728      	adds	r7, #40	@ 0x28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40005c00 	.word	0x40005c00
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40020800 	.word	0x40020800
 8002bf0:	40020000 	.word	0x40020000

08002bf4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0b      	ldr	r2, [pc, #44]	@ (8002c30 <HAL_I2C_MspDeInit+0x3c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10f      	bne.n	8002c26 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002c06:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <HAL_I2C_MspDeInit+0x40>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c34 <HAL_I2C_MspDeInit+0x40>)
 8002c0c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002c10:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8002c12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c16:	4808      	ldr	r0, [pc, #32]	@ (8002c38 <HAL_I2C_MspDeInit+0x44>)
 8002c18:	f003 fe40 	bl	800689c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8002c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c20:	4806      	ldr	r0, [pc, #24]	@ (8002c3c <HAL_I2C_MspDeInit+0x48>)
 8002c22:	f003 fe3b 	bl	800689c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40005c00 	.word	0x40005c00
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40020800 	.word	0x40020800
 8002c3c:	40020000 	.word	0x40020000

08002c40 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b09a      	sub	sp, #104	@ 0x68
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c5c:	2230      	movs	r2, #48	@ 0x30
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f00f f8f7 	bl	8011e54 <memset>
  if(hltdc->Instance==LTDC)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a85      	ldr	r2, [pc, #532]	@ (8002e80 <HAL_LTDC_MspInit+0x240>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	f040 8103 	bne.w	8002e78 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002c72:	2308      	movs	r3, #8
 8002c74:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002c76:	23c0      	movs	r3, #192	@ 0xc0
 8002c78:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002c7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c82:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f008 f99b 	bl	800afc4 <HAL_RCCEx_PeriphCLKConfig>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002c94:	f7ff fecc 	bl	8002a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002c98:	2300      	movs	r3, #0
 8002c9a:	623b      	str	r3, [r7, #32]
 8002c9c:	4b79      	ldr	r3, [pc, #484]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca0:	4a78      	ldr	r2, [pc, #480]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002ca2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ca6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca8:	4b76      	ldr	r3, [pc, #472]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	4b72      	ldr	r3, [pc, #456]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbc:	4a71      	ldr	r2, [pc, #452]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002cbe:	f043 0320 	orr.w	r3, r3, #32
 8002cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	4b6b      	ldr	r3, [pc, #428]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce0:	4b68      	ldr	r3, [pc, #416]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	4b64      	ldr	r3, [pc, #400]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf4:	4a63      	ldr	r2, [pc, #396]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002cf6:	f043 0302 	orr.w	r3, r3, #2
 8002cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfc:	4b61      	ldr	r3, [pc, #388]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	4b5d      	ldr	r3, [pc, #372]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	4a5c      	ldr	r2, [pc, #368]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d18:	4b5a      	ldr	r3, [pc, #360]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	4b56      	ldr	r3, [pc, #344]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2c:	4a55      	ldr	r2, [pc, #340]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d34:	4b53      	ldr	r3, [pc, #332]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d40:	2300      	movs	r3, #0
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	4b4f      	ldr	r3, [pc, #316]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d48:	4a4e      	ldr	r2, [pc, #312]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002d4a:	f043 0308 	orr.w	r3, r3, #8
 8002d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d50:	4b4c      	ldr	r3, [pc, #304]	@ (8002e84 <HAL_LTDC_MspInit+0x244>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d60:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d6e:	230e      	movs	r3, #14
 8002d70:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002d72:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d76:	4619      	mov	r1, r3
 8002d78:	4843      	ldr	r0, [pc, #268]	@ (8002e88 <HAL_LTDC_MspInit+0x248>)
 8002d7a:	f003 fbe3 	bl	8006544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002d7e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002d82:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d90:	230e      	movs	r3, #14
 8002d92:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d98:	4619      	mov	r1, r3
 8002d9a:	483c      	ldr	r0, [pc, #240]	@ (8002e8c <HAL_LTDC_MspInit+0x24c>)
 8002d9c:	f003 fbd2 	bl	8006544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002da0:	2303      	movs	r3, #3
 8002da2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002db0:	2309      	movs	r3, #9
 8002db2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002db8:	4619      	mov	r1, r3
 8002dba:	4835      	ldr	r0, [pc, #212]	@ (8002e90 <HAL_LTDC_MspInit+0x250>)
 8002dbc:	f003 fbc2 	bl	8006544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002dc0:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002dc4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002dd2:	230e      	movs	r3, #14
 8002dd4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dda:	4619      	mov	r1, r3
 8002ddc:	482c      	ldr	r0, [pc, #176]	@ (8002e90 <HAL_LTDC_MspInit+0x250>)
 8002dde:	f003 fbb1 	bl	8006544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002de2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002de6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df0:	2300      	movs	r3, #0
 8002df2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002df4:	230e      	movs	r3, #14
 8002df6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002df8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4825      	ldr	r0, [pc, #148]	@ (8002e94 <HAL_LTDC_MspInit+0x254>)
 8002e00:	f003 fba0 	bl	8006544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002e04:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002e08:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e12:	2300      	movs	r3, #0
 8002e14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e16:	230e      	movs	r3, #14
 8002e18:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e1e:	4619      	mov	r1, r3
 8002e20:	481d      	ldr	r0, [pc, #116]	@ (8002e98 <HAL_LTDC_MspInit+0x258>)
 8002e22:	f003 fb8f 	bl	8006544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002e26:	2348      	movs	r3, #72	@ 0x48
 8002e28:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e32:	2300      	movs	r3, #0
 8002e34:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e36:	230e      	movs	r3, #14
 8002e38:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e3a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4816      	ldr	r0, [pc, #88]	@ (8002e9c <HAL_LTDC_MspInit+0x25c>)
 8002e42:	f003 fb7f 	bl	8006544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002e46:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002e4a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e54:	2300      	movs	r3, #0
 8002e56:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e58:	2309      	movs	r3, #9
 8002e5a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e60:	4619      	mov	r1, r3
 8002e62:	480c      	ldr	r0, [pc, #48]	@ (8002e94 <HAL_LTDC_MspInit+0x254>)
 8002e64:	f003 fb6e 	bl	8006544 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2105      	movs	r1, #5
 8002e6c:	2058      	movs	r0, #88	@ 0x58
 8002e6e:	f002 fbb5 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002e72:	2058      	movs	r0, #88	@ 0x58
 8002e74:	f002 fbce 	bl	8005614 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002e78:	bf00      	nop
 8002e7a:	3768      	adds	r7, #104	@ 0x68
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40016800 	.word	0x40016800
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40021400 	.word	0x40021400
 8002e8c:	40020000 	.word	0x40020000
 8002e90:	40020400 	.word	0x40020400
 8002e94:	40021800 	.word	0x40021800
 8002e98:	40020800 	.word	0x40020800
 8002e9c:	40020c00 	.word	0x40020c00

08002ea0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08a      	sub	sp, #40	@ 0x28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	@ (8002f24 <HAL_SPI_MspInit+0x84>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d12c      	bne.n	8002f1c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	4b18      	ldr	r3, [pc, #96]	@ (8002f28 <HAL_SPI_MspInit+0x88>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	4a17      	ldr	r2, [pc, #92]	@ (8002f28 <HAL_SPI_MspInit+0x88>)
 8002ecc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ed2:	4b15      	ldr	r3, [pc, #84]	@ (8002f28 <HAL_SPI_MspInit+0x88>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <HAL_SPI_MspInit+0x88>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	4a10      	ldr	r2, [pc, #64]	@ (8002f28 <HAL_SPI_MspInit+0x88>)
 8002ee8:	f043 0320 	orr.w	r3, r3, #32
 8002eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eee:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <HAL_SPI_MspInit+0x88>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002efa:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	2302      	movs	r3, #2
 8002f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002f0c:	2305      	movs	r3, #5
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	4619      	mov	r1, r3
 8002f16:	4805      	ldr	r0, [pc, #20]	@ (8002f2c <HAL_SPI_MspInit+0x8c>)
 8002f18:	f003 fb14 	bl	8006544 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002f1c:	bf00      	nop
 8002f1e:	3728      	adds	r7, #40	@ 0x28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40015000 	.word	0x40015000
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40021400 	.word	0x40021400

08002f30 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a08      	ldr	r2, [pc, #32]	@ (8002f60 <HAL_SPI_MspDeInit+0x30>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10a      	bne.n	8002f58 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002f42:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <HAL_SPI_MspDeInit+0x34>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	4a07      	ldr	r2, [pc, #28]	@ (8002f64 <HAL_SPI_MspDeInit+0x34>)
 8002f48:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002f4c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002f4e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002f52:	4805      	ldr	r0, [pc, #20]	@ (8002f68 <HAL_SPI_MspDeInit+0x38>)
 8002f54:	f003 fca2 	bl	800689c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40015000 	.word	0x40015000
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40021400 	.word	0x40021400

08002f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	@ (8002fec <HAL_TIM_Base_MspInit+0x80>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d116      	bne.n	8002fac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x84>)
 8002f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f86:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x84>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f8e:	4b18      	ldr	r3, [pc, #96]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x84>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2019      	movs	r0, #25
 8002fa0:	f002 fb1c 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002fa4:	2019      	movs	r0, #25
 8002fa6:	f002 fb35 	bl	8005614 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002faa:	e01a      	b.n	8002fe2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a10      	ldr	r2, [pc, #64]	@ (8002ff4 <HAL_TIM_Base_MspInit+0x88>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d115      	bne.n	8002fe2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x84>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x84>)
 8002fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x84>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2019      	movs	r0, #25
 8002fd8:	f002 fb00 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002fdc:	2019      	movs	r0, #25
 8002fde:	f002 fb19 	bl	8005614 <HAL_NVIC_EnableIRQ>
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40014400 	.word	0x40014400

08002ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	@ 0x30
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 031c 	add.w	r3, r7, #28
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a42      	ldr	r2, [pc, #264]	@ (8003120 <HAL_UART_MspInit+0x128>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d14b      	bne.n	80030b2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	4b41      	ldr	r3, [pc, #260]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	4a40      	ldr	r2, [pc, #256]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 8003024:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003028:	6413      	str	r3, [r2, #64]	@ 0x40
 800302a:	4b3e      	ldr	r3, [pc, #248]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003032:	61bb      	str	r3, [r7, #24]
 8003034:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	4b3a      	ldr	r3, [pc, #232]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	4a39      	ldr	r2, [pc, #228]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 8003040:	f043 0304 	orr.w	r3, r3, #4
 8003044:	6313      	str	r3, [r2, #48]	@ 0x30
 8003046:	4b37      	ldr	r3, [pc, #220]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	4b33      	ldr	r3, [pc, #204]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	4a32      	ldr	r2, [pc, #200]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 800305c:	f043 0308 	orr.w	r3, r3, #8
 8003060:	6313      	str	r3, [r2, #48]	@ 0x30
 8003062:	4b30      	ldr	r3, [pc, #192]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800306e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	2302      	movs	r3, #2
 8003076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307c:	2303      	movs	r3, #3
 800307e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003080:	2308      	movs	r3, #8
 8003082:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003084:	f107 031c 	add.w	r3, r7, #28
 8003088:	4619      	mov	r1, r3
 800308a:	4827      	ldr	r0, [pc, #156]	@ (8003128 <HAL_UART_MspInit+0x130>)
 800308c:	f003 fa5a 	bl	8006544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003090:	2304      	movs	r3, #4
 8003092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309c:	2303      	movs	r3, #3
 800309e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80030a0:	2308      	movs	r3, #8
 80030a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030a4:	f107 031c 	add.w	r3, r7, #28
 80030a8:	4619      	mov	r1, r3
 80030aa:	4820      	ldr	r0, [pc, #128]	@ (800312c <HAL_UART_MspInit+0x134>)
 80030ac:	f003 fa4a 	bl	8006544 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80030b0:	e031      	b.n	8003116 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003130 <HAL_UART_MspInit+0x138>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d12c      	bne.n	8003116 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	4b18      	ldr	r3, [pc, #96]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 80030c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c4:	4a17      	ldr	r2, [pc, #92]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 80030c6:	f043 0310 	orr.w	r3, r3, #16
 80030ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80030cc:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 80030ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d8:	2300      	movs	r3, #0
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e0:	4a10      	ldr	r2, [pc, #64]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003124 <HAL_UART_MspInit+0x12c>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80030f4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80030f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fa:	2302      	movs	r3, #2
 80030fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003102:	2303      	movs	r3, #3
 8003104:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003106:	2307      	movs	r3, #7
 8003108:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310a:	f107 031c 	add.w	r3, r7, #28
 800310e:	4619      	mov	r1, r3
 8003110:	4808      	ldr	r0, [pc, #32]	@ (8003134 <HAL_UART_MspInit+0x13c>)
 8003112:	f003 fa17 	bl	8006544 <HAL_GPIO_Init>
}
 8003116:	bf00      	nop
 8003118:	3730      	adds	r7, #48	@ 0x30
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40005000 	.word	0x40005000
 8003124:	40023800 	.word	0x40023800
 8003128:	40020800 	.word	0x40020800
 800312c:	40020c00 	.word	0x40020c00
 8003130:	40011000 	.word	0x40011000
 8003134:	40020000 	.word	0x40020000

08003138 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800314c:	4b3b      	ldr	r3, [pc, #236]	@ (800323c <HAL_FMC_MspInit+0x104>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d16f      	bne.n	8003234 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8003154:	4b39      	ldr	r3, [pc, #228]	@ (800323c <HAL_FMC_MspInit+0x104>)
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	603b      	str	r3, [r7, #0]
 800315e:	4b38      	ldr	r3, [pc, #224]	@ (8003240 <HAL_FMC_MspInit+0x108>)
 8003160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003162:	4a37      	ldr	r2, [pc, #220]	@ (8003240 <HAL_FMC_MspInit+0x108>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6393      	str	r3, [r2, #56]	@ 0x38
 800316a:	4b35      	ldr	r3, [pc, #212]	@ (8003240 <HAL_FMC_MspInit+0x108>)
 800316c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003176:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800317a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003184:	2303      	movs	r3, #3
 8003186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003188:	230c      	movs	r3, #12
 800318a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800318c:	1d3b      	adds	r3, r7, #4
 800318e:	4619      	mov	r1, r3
 8003190:	482c      	ldr	r0, [pc, #176]	@ (8003244 <HAL_FMC_MspInit+0x10c>)
 8003192:	f003 f9d7 	bl	8006544 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003196:	2301      	movs	r3, #1
 8003198:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a2:	2303      	movs	r3, #3
 80031a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80031a6:	230c      	movs	r3, #12
 80031a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	4619      	mov	r1, r3
 80031ae:	4826      	ldr	r0, [pc, #152]	@ (8003248 <HAL_FMC_MspInit+0x110>)
 80031b0:	f003 f9c8 	bl	8006544 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80031b4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80031b8:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c2:	2303      	movs	r3, #3
 80031c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80031c6:	230c      	movs	r3, #12
 80031c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031ca:	1d3b      	adds	r3, r7, #4
 80031cc:	4619      	mov	r1, r3
 80031ce:	481f      	ldr	r0, [pc, #124]	@ (800324c <HAL_FMC_MspInit+0x114>)
 80031d0:	f003 f9b8 	bl	8006544 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80031d4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80031d8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e2:	2303      	movs	r3, #3
 80031e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80031e6:	230c      	movs	r3, #12
 80031e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	4818      	ldr	r0, [pc, #96]	@ (8003250 <HAL_FMC_MspInit+0x118>)
 80031f0:	f003 f9a8 	bl	8006544 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80031f4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80031f8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003202:	2303      	movs	r3, #3
 8003204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003206:	230c      	movs	r3, #12
 8003208:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800320a:	1d3b      	adds	r3, r7, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4811      	ldr	r0, [pc, #68]	@ (8003254 <HAL_FMC_MspInit+0x11c>)
 8003210:	f003 f998 	bl	8006544 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003214:	2360      	movs	r3, #96	@ 0x60
 8003216:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003220:	2303      	movs	r3, #3
 8003222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003224:	230c      	movs	r3, #12
 8003226:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	4619      	mov	r1, r3
 800322c:	480a      	ldr	r0, [pc, #40]	@ (8003258 <HAL_FMC_MspInit+0x120>)
 800322e:	f003 f989 	bl	8006544 <HAL_GPIO_Init>
 8003232:	e000      	b.n	8003236 <HAL_FMC_MspInit+0xfe>
    return;
 8003234:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20008f9c 	.word	0x20008f9c
 8003240:	40023800 	.word	0x40023800
 8003244:	40021400 	.word	0x40021400
 8003248:	40020800 	.word	0x40020800
 800324c:	40021800 	.word	0x40021800
 8003250:	40021000 	.word	0x40021000
 8003254:	40020c00 	.word	0x40020c00
 8003258:	40020400 	.word	0x40020400

0800325c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003264:	f7ff ff68 	bl	8003138 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08e      	sub	sp, #56	@ 0x38
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	4b33      	ldr	r3, [pc, #204]	@ (8003354 <HAL_InitTick+0xe4>)
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	4a32      	ldr	r2, [pc, #200]	@ (8003354 <HAL_InitTick+0xe4>)
 800328a:	f043 0310 	orr.w	r3, r3, #16
 800328e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003290:	4b30      	ldr	r3, [pc, #192]	@ (8003354 <HAL_InitTick+0xe4>)
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800329c:	f107 0210 	add.w	r2, r7, #16
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	4611      	mov	r1, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f007 fe5a 	bl	800af60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80032b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80032b6:	f007 fe2b 	bl	800af10 <HAL_RCC_GetPCLK1Freq>
 80032ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80032bc:	e004      	b.n	80032c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032be:	f007 fe27 	bl	800af10 <HAL_RCC_GetPCLK1Freq>
 80032c2:	4603      	mov	r3, r0
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ca:	4a23      	ldr	r2, [pc, #140]	@ (8003358 <HAL_InitTick+0xe8>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	0c9b      	lsrs	r3, r3, #18
 80032d2:	3b01      	subs	r3, #1
 80032d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80032d6:	4b21      	ldr	r3, [pc, #132]	@ (800335c <HAL_InitTick+0xec>)
 80032d8:	4a21      	ldr	r2, [pc, #132]	@ (8003360 <HAL_InitTick+0xf0>)
 80032da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032dc:	4b1f      	ldr	r3, [pc, #124]	@ (800335c <HAL_InitTick+0xec>)
 80032de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80032e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032e4:	4a1d      	ldr	r2, [pc, #116]	@ (800335c <HAL_InitTick+0xec>)
 80032e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80032ea:	4b1c      	ldr	r3, [pc, #112]	@ (800335c <HAL_InitTick+0xec>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f0:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <HAL_InitTick+0xec>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032f6:	4b19      	ldr	r3, [pc, #100]	@ (800335c <HAL_InitTick+0xec>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80032fc:	4817      	ldr	r0, [pc, #92]	@ (800335c <HAL_InitTick+0xec>)
 80032fe:	f008 feb9 	bl	800c074 <HAL_TIM_Base_Init>
 8003302:	4603      	mov	r3, r0
 8003304:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003308:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800330c:	2b00      	cmp	r3, #0
 800330e:	d11b      	bne.n	8003348 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003310:	4812      	ldr	r0, [pc, #72]	@ (800335c <HAL_InitTick+0xec>)
 8003312:	f008 feff 	bl	800c114 <HAL_TIM_Base_Start_IT>
 8003316:	4603      	mov	r3, r0
 8003318:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800331c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003320:	2b00      	cmp	r3, #0
 8003322:	d111      	bne.n	8003348 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003324:	2036      	movs	r0, #54	@ 0x36
 8003326:	f002 f975 	bl	8005614 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b0f      	cmp	r3, #15
 800332e:	d808      	bhi.n	8003342 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003330:	2200      	movs	r2, #0
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	2036      	movs	r0, #54	@ 0x36
 8003336:	f002 f951 	bl	80055dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800333a:	4a0a      	ldr	r2, [pc, #40]	@ (8003364 <HAL_InitTick+0xf4>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	e002      	b.n	8003348 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003348:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800334c:	4618      	mov	r0, r3
 800334e:	3738      	adds	r7, #56	@ 0x38
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40023800 	.word	0x40023800
 8003358:	431bde83 	.word	0x431bde83
 800335c:	20008fa0 	.word	0x20008fa0
 8003360:	40001000 	.word	0x40001000
 8003364:	20000268 	.word	0x20000268

08003368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <NMI_Handler+0x4>

08003370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <HardFault_Handler+0x4>

08003378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <MemManage_Handler+0x4>

08003380 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <BusFault_Handler+0x4>

08003388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <UsageFault_Handler+0x4>

08003390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800339e:	b480      	push	{r7}
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033ba:	b480      	push	{r7}
 80033bc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033cc:	4803      	ldr	r0, [pc, #12]	@ (80033dc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80033ce:	f008 ff11 	bl	800c1f4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80033d2:	4803      	ldr	r0, [pc, #12]	@ (80033e0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80033d4:	f008 ff0e 	bl	800c1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	200004a4 	.word	0x200004a4
 80033e0:	200004ec 	.word	0x200004ec

080033e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033e8:	4802      	ldr	r0, [pc, #8]	@ (80033f4 <TIM6_DAC_IRQHandler+0x10>)
 80033ea:	f008 ff03 	bl	800c1f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20008fa0 	.word	0x20008fa0

080033f8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80033fc:	4802      	ldr	r0, [pc, #8]	@ (8003408 <OTG_HS_IRQHandler+0x10>)
 80033fe:	f003 fe53 	bl	80070a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	2000a098 	.word	0x2000a098

0800340c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003410:	4802      	ldr	r0, [pc, #8]	@ (800341c <LTDC_IRQHandler+0x10>)
 8003412:	f006 fe4b 	bl	800a0ac <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200003a4 	.word	0x200003a4

08003420 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003424:	4802      	ldr	r0, [pc, #8]	@ (8003430 <DMA2D_IRQHandler+0x10>)
 8003426:	f002 fc3a 	bl	8005c9e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000310 	.word	0x20000310

08003434 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e00a      	b.n	800345c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003446:	f3af 8000 	nop.w
 800344a:	4601      	mov	r1, r0
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	60ba      	str	r2, [r7, #8]
 8003452:	b2ca      	uxtb	r2, r1
 8003454:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	3301      	adds	r3, #1
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	dbf0      	blt.n	8003446 <_read+0x12>
  }

  return len;
 8003464:	687b      	ldr	r3, [r7, #4]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <_close>:
  }
  return len;
}

int _close(int file)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003476:	f04f 33ff 	mov.w	r3, #4294967295
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003496:	605a      	str	r2, [r3, #4]
  return 0;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <_isatty>:

int _isatty(int file)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034ae:	2301      	movs	r3, #1
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034e0:	4a14      	ldr	r2, [pc, #80]	@ (8003534 <_sbrk+0x5c>)
 80034e2:	4b15      	ldr	r3, [pc, #84]	@ (8003538 <_sbrk+0x60>)
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034ec:	4b13      	ldr	r3, [pc, #76]	@ (800353c <_sbrk+0x64>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <_sbrk+0x64>)
 80034f6:	4a12      	ldr	r2, [pc, #72]	@ (8003540 <_sbrk+0x68>)
 80034f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034fa:	4b10      	ldr	r3, [pc, #64]	@ (800353c <_sbrk+0x64>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	429a      	cmp	r2, r3
 8003506:	d207      	bcs.n	8003518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003508:	f00e fd02 	bl	8011f10 <__errno>
 800350c:	4603      	mov	r3, r0
 800350e:	220c      	movs	r2, #12
 8003510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	e009      	b.n	800352c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003518:	4b08      	ldr	r3, [pc, #32]	@ (800353c <_sbrk+0x64>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800351e:	4b07      	ldr	r3, [pc, #28]	@ (800353c <_sbrk+0x64>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	4a05      	ldr	r2, [pc, #20]	@ (800353c <_sbrk+0x64>)
 8003528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800352a:	68fb      	ldr	r3, [r7, #12]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20030000 	.word	0x20030000
 8003538:	00000400 	.word	0x00000400
 800353c:	20008fe8 	.word	0x20008fe8
 8003540:	2000a5c8 	.word	0x2000a5c8

08003544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003548:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <SystemInit+0x20>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354e:	4a05      	ldr	r2, [pc, #20]	@ (8003564 <SystemInit+0x20>)
 8003550:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003554:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003568:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800356c:	f7ff ffea 	bl	8003544 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003570:	480c      	ldr	r0, [pc, #48]	@ (80035a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003572:	490d      	ldr	r1, [pc, #52]	@ (80035a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003574:	4a0d      	ldr	r2, [pc, #52]	@ (80035ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003578:	e002      	b.n	8003580 <LoopCopyDataInit>

0800357a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800357a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800357c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800357e:	3304      	adds	r3, #4

08003580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003584:	d3f9      	bcc.n	800357a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003586:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003588:	4c0a      	ldr	r4, [pc, #40]	@ (80035b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800358a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800358c:	e001      	b.n	8003592 <LoopFillZerobss>

0800358e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800358e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003590:	3204      	adds	r2, #4

08003592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003594:	d3fb      	bcc.n	800358e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003596:	f00e fcc1 	bl	8011f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800359a:	f7fd f893 	bl	80006c4 <main>
  bx  lr    
 800359e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80035a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80035a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a8:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 80035ac:	08016d0c 	.word	0x08016d0c
  ldr r2, =_sbss
 80035b0:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 80035b4:	2000a5c4 	.word	0x2000a5c4

080035b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035b8:	e7fe      	b.n	80035b8 <ADC_IRQHandler>

080035ba <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80035be:	f000 fe49 	bl	8004254 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80035c2:	20ca      	movs	r0, #202	@ 0xca
 80035c4:	f000 f95d 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80035c8:	20c3      	movs	r0, #195	@ 0xc3
 80035ca:	f000 f967 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80035ce:	2008      	movs	r0, #8
 80035d0:	f000 f964 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80035d4:	2050      	movs	r0, #80	@ 0x50
 80035d6:	f000 f961 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80035da:	20cf      	movs	r0, #207	@ 0xcf
 80035dc:	f000 f951 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80035e0:	2000      	movs	r0, #0
 80035e2:	f000 f95b 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80035e6:	20c1      	movs	r0, #193	@ 0xc1
 80035e8:	f000 f958 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80035ec:	2030      	movs	r0, #48	@ 0x30
 80035ee:	f000 f955 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80035f2:	20ed      	movs	r0, #237	@ 0xed
 80035f4:	f000 f945 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80035f8:	2064      	movs	r0, #100	@ 0x64
 80035fa:	f000 f94f 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80035fe:	2003      	movs	r0, #3
 8003600:	f000 f94c 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8003604:	2012      	movs	r0, #18
 8003606:	f000 f949 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800360a:	2081      	movs	r0, #129	@ 0x81
 800360c:	f000 f946 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8003610:	20e8      	movs	r0, #232	@ 0xe8
 8003612:	f000 f936 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8003616:	2085      	movs	r0, #133	@ 0x85
 8003618:	f000 f940 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800361c:	2000      	movs	r0, #0
 800361e:	f000 f93d 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8003622:	2078      	movs	r0, #120	@ 0x78
 8003624:	f000 f93a 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8003628:	20cb      	movs	r0, #203	@ 0xcb
 800362a:	f000 f92a 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800362e:	2039      	movs	r0, #57	@ 0x39
 8003630:	f000 f934 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8003634:	202c      	movs	r0, #44	@ 0x2c
 8003636:	f000 f931 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800363a:	2000      	movs	r0, #0
 800363c:	f000 f92e 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8003640:	2034      	movs	r0, #52	@ 0x34
 8003642:	f000 f92b 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8003646:	2002      	movs	r0, #2
 8003648:	f000 f928 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800364c:	20f7      	movs	r0, #247	@ 0xf7
 800364e:	f000 f918 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8003652:	2020      	movs	r0, #32
 8003654:	f000 f922 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8003658:	20ea      	movs	r0, #234	@ 0xea
 800365a:	f000 f912 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800365e:	2000      	movs	r0, #0
 8003660:	f000 f91c 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003664:	2000      	movs	r0, #0
 8003666:	f000 f919 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800366a:	20b1      	movs	r0, #177	@ 0xb1
 800366c:	f000 f909 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003670:	2000      	movs	r0, #0
 8003672:	f000 f913 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003676:	201b      	movs	r0, #27
 8003678:	f000 f910 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800367c:	20b6      	movs	r0, #182	@ 0xb6
 800367e:	f000 f900 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8003682:	200a      	movs	r0, #10
 8003684:	f000 f90a 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8003688:	20a2      	movs	r0, #162	@ 0xa2
 800368a:	f000 f907 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800368e:	20c0      	movs	r0, #192	@ 0xc0
 8003690:	f000 f8f7 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003694:	2010      	movs	r0, #16
 8003696:	f000 f901 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800369a:	20c1      	movs	r0, #193	@ 0xc1
 800369c:	f000 f8f1 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80036a0:	2010      	movs	r0, #16
 80036a2:	f000 f8fb 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80036a6:	20c5      	movs	r0, #197	@ 0xc5
 80036a8:	f000 f8eb 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80036ac:	2045      	movs	r0, #69	@ 0x45
 80036ae:	f000 f8f5 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80036b2:	2015      	movs	r0, #21
 80036b4:	f000 f8f2 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80036b8:	20c7      	movs	r0, #199	@ 0xc7
 80036ba:	f000 f8e2 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80036be:	2090      	movs	r0, #144	@ 0x90
 80036c0:	f000 f8ec 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80036c4:	2036      	movs	r0, #54	@ 0x36
 80036c6:	f000 f8dc 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80036ca:	20c8      	movs	r0, #200	@ 0xc8
 80036cc:	f000 f8e6 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80036d0:	20f2      	movs	r0, #242	@ 0xf2
 80036d2:	f000 f8d6 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80036d6:	2000      	movs	r0, #0
 80036d8:	f000 f8e0 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80036dc:	20b0      	movs	r0, #176	@ 0xb0
 80036de:	f000 f8d0 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80036e2:	20c2      	movs	r0, #194	@ 0xc2
 80036e4:	f000 f8da 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80036e8:	20b6      	movs	r0, #182	@ 0xb6
 80036ea:	f000 f8ca 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80036ee:	200a      	movs	r0, #10
 80036f0:	f000 f8d4 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80036f4:	20a7      	movs	r0, #167	@ 0xa7
 80036f6:	f000 f8d1 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80036fa:	2027      	movs	r0, #39	@ 0x27
 80036fc:	f000 f8ce 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003700:	2004      	movs	r0, #4
 8003702:	f000 f8cb 	bl	800389c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8003706:	202a      	movs	r0, #42	@ 0x2a
 8003708:	f000 f8bb 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800370c:	2000      	movs	r0, #0
 800370e:	f000 f8c5 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003712:	2000      	movs	r0, #0
 8003714:	f000 f8c2 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003718:	2000      	movs	r0, #0
 800371a:	f000 f8bf 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800371e:	20ef      	movs	r0, #239	@ 0xef
 8003720:	f000 f8bc 	bl	800389c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8003724:	202b      	movs	r0, #43	@ 0x2b
 8003726:	f000 f8ac 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800372a:	2000      	movs	r0, #0
 800372c:	f000 f8b6 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003730:	2000      	movs	r0, #0
 8003732:	f000 f8b3 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8003736:	2001      	movs	r0, #1
 8003738:	f000 f8b0 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800373c:	203f      	movs	r0, #63	@ 0x3f
 800373e:	f000 f8ad 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8003742:	20f6      	movs	r0, #246	@ 0xf6
 8003744:	f000 f89d 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003748:	2001      	movs	r0, #1
 800374a:	f000 f8a7 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800374e:	2000      	movs	r0, #0
 8003750:	f000 f8a4 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8003754:	2006      	movs	r0, #6
 8003756:	f000 f8a1 	bl	800389c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800375a:	202c      	movs	r0, #44	@ 0x2c
 800375c:	f000 f891 	bl	8003882 <ili9341_WriteReg>
  LCD_Delay(200);
 8003760:	20c8      	movs	r0, #200	@ 0xc8
 8003762:	f000 fe65 	bl	8004430 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8003766:	2026      	movs	r0, #38	@ 0x26
 8003768:	f000 f88b 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800376c:	2001      	movs	r0, #1
 800376e:	f000 f895 	bl	800389c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8003772:	20e0      	movs	r0, #224	@ 0xe0
 8003774:	f000 f885 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8003778:	200f      	movs	r0, #15
 800377a:	f000 f88f 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800377e:	2029      	movs	r0, #41	@ 0x29
 8003780:	f000 f88c 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8003784:	2024      	movs	r0, #36	@ 0x24
 8003786:	f000 f889 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800378a:	200c      	movs	r0, #12
 800378c:	f000 f886 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8003790:	200e      	movs	r0, #14
 8003792:	f000 f883 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003796:	2009      	movs	r0, #9
 8003798:	f000 f880 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800379c:	204e      	movs	r0, #78	@ 0x4e
 800379e:	f000 f87d 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80037a2:	2078      	movs	r0, #120	@ 0x78
 80037a4:	f000 f87a 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80037a8:	203c      	movs	r0, #60	@ 0x3c
 80037aa:	f000 f877 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80037ae:	2009      	movs	r0, #9
 80037b0:	f000 f874 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80037b4:	2013      	movs	r0, #19
 80037b6:	f000 f871 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80037ba:	2005      	movs	r0, #5
 80037bc:	f000 f86e 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80037c0:	2017      	movs	r0, #23
 80037c2:	f000 f86b 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80037c6:	2011      	movs	r0, #17
 80037c8:	f000 f868 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80037cc:	2000      	movs	r0, #0
 80037ce:	f000 f865 	bl	800389c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80037d2:	20e1      	movs	r0, #225	@ 0xe1
 80037d4:	f000 f855 	bl	8003882 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80037d8:	2000      	movs	r0, #0
 80037da:	f000 f85f 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80037de:	2016      	movs	r0, #22
 80037e0:	f000 f85c 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80037e4:	201b      	movs	r0, #27
 80037e6:	f000 f859 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80037ea:	2004      	movs	r0, #4
 80037ec:	f000 f856 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80037f0:	2011      	movs	r0, #17
 80037f2:	f000 f853 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80037f6:	2007      	movs	r0, #7
 80037f8:	f000 f850 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80037fc:	2031      	movs	r0, #49	@ 0x31
 80037fe:	f000 f84d 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8003802:	2033      	movs	r0, #51	@ 0x33
 8003804:	f000 f84a 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003808:	2042      	movs	r0, #66	@ 0x42
 800380a:	f000 f847 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800380e:	2005      	movs	r0, #5
 8003810:	f000 f844 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003814:	200c      	movs	r0, #12
 8003816:	f000 f841 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800381a:	200a      	movs	r0, #10
 800381c:	f000 f83e 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003820:	2028      	movs	r0, #40	@ 0x28
 8003822:	f000 f83b 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8003826:	202f      	movs	r0, #47	@ 0x2f
 8003828:	f000 f838 	bl	800389c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800382c:	200f      	movs	r0, #15
 800382e:	f000 f835 	bl	800389c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8003832:	2011      	movs	r0, #17
 8003834:	f000 f825 	bl	8003882 <ili9341_WriteReg>
  LCD_Delay(200);
 8003838:	20c8      	movs	r0, #200	@ 0xc8
 800383a:	f000 fdf9 	bl	8004430 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800383e:	2029      	movs	r0, #41	@ 0x29
 8003840:	f000 f81f 	bl	8003882 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8003844:	202c      	movs	r0, #44	@ 0x2c
 8003846:	f000 f81c 	bl	8003882 <ili9341_WriteReg>
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}

0800384e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8003852:	f000 fcff 	bl	8004254 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8003856:	2103      	movs	r1, #3
 8003858:	20d3      	movs	r0, #211	@ 0xd3
 800385a:	f000 f82c 	bl	80038b6 <ili9341_ReadData>
 800385e:	4603      	mov	r3, r0
 8003860:	b29b      	uxth	r3, r3
}
 8003862:	4618      	mov	r0, r3
 8003864:	bd80      	pop	{r7, pc}

08003866 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800386a:	2029      	movs	r0, #41	@ 0x29
 800386c:	f000 f809 	bl	8003882 <ili9341_WriteReg>
}
 8003870:	bf00      	nop
 8003872:	bd80      	pop	{r7, pc}

08003874 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8003878:	2028      	movs	r0, #40	@ 0x28
 800387a:	f000 f802 	bl	8003882 <ili9341_WriteReg>
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}

08003882 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	4603      	mov	r3, r0
 800388a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fd7a 	bl	8004388 <LCD_IO_WriteReg>
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fd4b 	bl	8004344 <LCD_IO_WriteData>
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	4603      	mov	r3, r0
 80038be:	460a      	mov	r2, r1
 80038c0:	80fb      	strh	r3, [r7, #6]
 80038c2:	4613      	mov	r3, r2
 80038c4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80038c6:	797a      	ldrb	r2, [r7, #5]
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fd7d 	bl	80043cc <LCD_IO_ReadData>
 80038d2:	4603      	mov	r3, r0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80038e0:	23f0      	movs	r3, #240	@ 0xf0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80038f0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fa59 	bl	8003dc4 <stmpe811_GetInstance>
 8003912:	4603      	mov	r3, r0
 8003914:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	2bff      	cmp	r3, #255	@ 0xff
 800391a:	d112      	bne.n	8003942 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 800391c:	2000      	movs	r0, #0
 800391e:	f000 fa51 	bl	8003dc4 <stmpe811_GetInstance>
 8003922:	4603      	mov	r3, r0
 8003924:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8003926:	7bbb      	ldrb	r3, [r7, #14]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d80a      	bhi.n	8003942 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800392c:	7bbb      	ldrb	r3, [r7, #14]
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	b2d1      	uxtb	r1, r2
 8003932:	4a06      	ldr	r2, [pc, #24]	@ (800394c <stmpe811_Init+0x4c>)
 8003934:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8003936:	f000 fd86 	bl	8004446 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f807 	bl	8003950 <stmpe811_Reset>
    }
  }
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20008fec 	.word	0x20008fec

08003950 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2202      	movs	r2, #2
 8003960:	2103      	movs	r1, #3
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fd7b 	bl	800445e <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8003968:	200a      	movs	r0, #10
 800396a:	f000 fdb4 	bl	80044d6 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2200      	movs	r2, #0
 8003974:	2103      	movs	r1, #3
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fd71 	bl	800445e <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 800397c:	2002      	movs	r0, #2
 800397e:	f000 fdaa 	bl	80044d6 <IOE_Delay>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800398a:	b590      	push	{r4, r7, lr}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	4603      	mov	r3, r0
 8003992:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8003994:	f000 fd57 	bl	8004446 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fd70 	bl	8004484 <IOE_Read>
 80039a4:	4603      	mov	r3, r0
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2101      	movs	r1, #1
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fd67 	bl	8004484 <IOE_Read>
 80039b6:	4603      	mov	r3, r0
 80039b8:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80039ba:	4323      	orrs	r3, r4
 80039bc:	b21b      	sxth	r3, r3
 80039be:	b29b      	uxth	r3, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd90      	pop	{r4, r7, pc}

080039c8 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2109      	movs	r1, #9
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fd51 	bl	8004484 <IOE_Read>
 80039e2:	4603      	mov	r3, r0
 80039e4:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	7bfa      	ldrb	r2, [r7, #15]
 80039f4:	2109      	movs	r1, #9
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fd31 	bl	800445e <IOE_Write>
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2109      	movs	r1, #9
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fd33 	bl	8004484 <IOE_Read>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	7bfa      	ldrb	r2, [r7, #15]
 8003a30:	2109      	movs	r1, #9
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fd13 	bl	800445e <IOE_Write>
    
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	460a      	mov	r2, r1
 8003a4a:	80fb      	strh	r3, [r7, #6]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	210a      	movs	r1, #10
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fd12 	bl	8004484 <IOE_Read>
 8003a60:	4603      	mov	r3, r0
 8003a62:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	797b      	ldrb	r3, [r7, #5]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	210a      	movs	r1, #10
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fcf2 	bl	800445e <IOE_Write>
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	460a      	mov	r2, r1
 8003a8c:	80fb      	strh	r3, [r7, #6]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	210a      	movs	r1, #10
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fcf1 	bl	8004484 <IOE_Read>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8003aa6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	b25a      	sxtb	r2, r3
 8003aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	b25b      	sxtb	r3, r3
 8003ab6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	210a      	movs	r1, #10
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fccc 	bl	800445e <IOE_Write>
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	460a      	mov	r2, r1
 8003ad8:	80fb      	strh	r3, [r7, #6]
 8003ada:	4613      	mov	r3, r2
 8003adc:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	210b      	movs	r1, #11
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fccd 	bl	8004484 <IOE_Read>
 8003aea:	4603      	mov	r3, r0
 8003aec:	461a      	mov	r2, r3
 8003aee:	797b      	ldrb	r3, [r7, #5]
 8003af0:	4013      	ands	r3, r2
 8003af2:	b2db      	uxtb	r3, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	460a      	mov	r2, r1
 8003b06:	80fb      	strh	r3, [r7, #6]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	797a      	ldrb	r2, [r7, #5]
 8003b12:	210b      	movs	r1, #11
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fca2 	bl	800445e <IOE_Write>
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	4603      	mov	r3, r0
 8003b2a:	6039      	str	r1, [r7, #0]
 8003b2c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2117      	movs	r1, #23
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fca3 	bl	8004484 <IOE_Read>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	b25b      	sxtb	r3, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	b25a      	sxtb	r2, r3
 8003b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	b25b      	sxtb	r3, r3
 8003b52:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	7bfa      	ldrb	r2, [r7, #15]
 8003b5a:	2117      	movs	r1, #23
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fc7e 	bl	800445e <IOE_Write>
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	4603      	mov	r3, r0
 8003b72:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2104      	movs	r1, #4
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fc82 	bl	8004484 <IOE_Read>
 8003b80:	4603      	mov	r3, r0
 8003b82:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	f023 0304 	bic.w	r3, r3, #4
 8003b8a:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	2104      	movs	r1, #4
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fc62 	bl	800445e <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	21f0      	movs	r1, #240	@ 0xf0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff ffbf 	bl	8003b22 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	f023 0303 	bic.w	r3, r3, #3
 8003baa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003bac:	88fb      	ldrh	r3, [r7, #6]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	2104      	movs	r1, #4
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 fc52 	bl	800445e <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2249      	movs	r2, #73	@ 0x49
 8003bc0:	2120      	movs	r1, #32
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fc4b 	bl	800445e <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8003bc8:	2002      	movs	r0, #2
 8003bca:	f000 fc84 	bl	80044d6 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	2121      	movs	r1, #33	@ 0x21
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fc41 	bl	800445e <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	229a      	movs	r2, #154	@ 0x9a
 8003be2:	2141      	movs	r1, #65	@ 0x41
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fc3a 	bl	800445e <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2201      	movs	r2, #1
 8003bf0:	214a      	movs	r1, #74	@ 0x4a
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fc33 	bl	800445e <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	214b      	movs	r1, #75	@ 0x4b
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fc2c 	bl	800445e <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	214b      	movs	r1, #75	@ 0x4b
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fc25 	bl	800445e <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2201      	movs	r2, #1
 8003c1a:	2156      	movs	r1, #86	@ 0x56
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fc1e 	bl	800445e <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2201      	movs	r2, #1
 8003c28:	2158      	movs	r1, #88	@ 0x58
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fc17 	bl	800445e <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003c30:	88fb      	ldrh	r3, [r7, #6]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2201      	movs	r2, #1
 8003c36:	2140      	movs	r1, #64	@ 0x40
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fc10 	bl	800445e <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	22ff      	movs	r2, #255	@ 0xff
 8003c44:	210b      	movs	r1, #11
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fc09 	bl	800445e <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8003c4c:	2002      	movs	r0, #2
 8003c4e:	f000 fc42 	bl	80044d6 <IOE_Delay>
}
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	4603      	mov	r3, r0
 8003c62:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2140      	movs	r1, #64	@ 0x40
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fc08 	bl	8004484 <IOE_Read>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7a:	2b80      	cmp	r3, #128	@ 0x80
 8003c7c:	bf0c      	ite	eq
 8003c7e:	2301      	moveq	r3, #1
 8003c80:	2300      	movne	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8003c86:	7bbb      	ldrb	r3, [r7, #14]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	214c      	movs	r1, #76	@ 0x4c
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fbf6 	bl	8004484 <IOE_Read>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d010      	beq.n	8003cc0 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
 8003ca2:	e00d      	b.n	8003cc0 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2201      	movs	r2, #1
 8003caa:	214b      	movs	r1, #75	@ 0x4b
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fbd6 	bl	800445e <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	214b      	movs	r1, #75	@ 0x4b
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fbcf 	bl	800445e <IOE_Write>
  }
  
  return ret;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003cd8:	89fb      	ldrh	r3, [r7, #14]
 8003cda:	b2d8      	uxtb	r0, r3
 8003cdc:	f107 0210 	add.w	r2, r7, #16
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	21d7      	movs	r1, #215	@ 0xd7
 8003ce4:	f000 fbe1 	bl	80044aa <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8003ce8:	7c3b      	ldrb	r3, [r7, #16]
 8003cea:	061a      	lsls	r2, r3, #24
 8003cec:	7c7b      	ldrb	r3, [r7, #17]
 8003cee:	041b      	lsls	r3, r3, #16
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	7cbb      	ldrb	r3, [r7, #18]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	7cfa      	ldrb	r2, [r7, #19]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	0d1b      	lsrs	r3, r3, #20
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003d18:	89fb      	ldrh	r3, [r7, #14]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	214b      	movs	r1, #75	@ 0x4b
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fb9c 	bl	800445e <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003d26:	89fb      	ldrh	r3, [r7, #14]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	214b      	movs	r1, #75	@ 0x4b
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fb95 	bl	800445e <IOE_Write>
}
 8003d34:	bf00      	nop
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8003d46:	f000 fb84 	bl	8004452 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	211f      	movs	r1, #31
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fe76 	bl	8003a40 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fe36 	bl	80039c8 <stmpe811_EnableGlobalIT>
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fe47 	bl	8003a04 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	211f      	movs	r1, #31
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fe81 	bl	8003a82 <stmpe811_DisableITSource>
}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	211f      	movs	r1, #31
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fe99 	bl	8003ace <stmpe811_ReadGITStatus>
 8003d9c:	4603      	mov	r3, r0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8003db0:	88fb      	ldrh	r3, [r7, #6]
 8003db2:	211f      	movs	r1, #31
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff fea1 	bl	8003afc <stmpe811_ClearGlobalIT>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
 8003dd6:	e00b      	b.n	8003df0 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <stmpe811_GetInstance+0x40>)
 8003ddc:	5cd3      	ldrb	r3, [r2, r3]
 8003dde:	461a      	mov	r2, r3
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	e006      	b.n	8003df8 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	3301      	adds	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d9f0      	bls.n	8003dd8 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8003df6:	23ff      	movs	r3, #255	@ 0xff
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	20008fec 	.word	0x20008fec

08003e08 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	@ 0x28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a33      	ldr	r2, [pc, #204]	@ (8003ee4 <I2Cx_MspInit+0xdc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d15f      	bne.n	8003eda <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	4b32      	ldr	r3, [pc, #200]	@ (8003ee8 <I2Cx_MspInit+0xe0>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	4a31      	ldr	r2, [pc, #196]	@ (8003ee8 <I2Cx_MspInit+0xe0>)
 8003e24:	f043 0304 	orr.w	r3, r3, #4
 8003e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee8 <I2Cx_MspInit+0xe0>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee8 <I2Cx_MspInit+0xe0>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ee8 <I2Cx_MspInit+0xe0>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e46:	4b28      	ldr	r3, [pc, #160]	@ (8003ee8 <I2Cx_MspInit+0xe0>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8003e52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003e58:	2312      	movs	r3, #18
 8003e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003e60:	2302      	movs	r3, #2
 8003e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003e64:	2304      	movs	r3, #4
 8003e66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	481f      	ldr	r0, [pc, #124]	@ (8003eec <I2Cx_MspInit+0xe4>)
 8003e70:	f002 fb68 	bl	8006544 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8003e74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e78:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003e7a:	f107 0314 	add.w	r3, r7, #20
 8003e7e:	4619      	mov	r1, r3
 8003e80:	481b      	ldr	r0, [pc, #108]	@ (8003ef0 <I2Cx_MspInit+0xe8>)
 8003e82:	f002 fb5f 	bl	8006544 <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	4b17      	ldr	r3, [pc, #92]	@ (8003ee8 <I2Cx_MspInit+0xe0>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	4a16      	ldr	r2, [pc, #88]	@ (8003ee8 <I2Cx_MspInit+0xe0>)
 8003e90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e96:	4b14      	ldr	r3, [pc, #80]	@ (8003ee8 <I2Cx_MspInit+0xe0>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 8003ea2:	4b11      	ldr	r3, [pc, #68]	@ (8003ee8 <I2Cx_MspInit+0xe0>)
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	4a10      	ldr	r2, [pc, #64]	@ (8003ee8 <I2Cx_MspInit+0xe0>)
 8003ea8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003eac:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 8003eae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee8 <I2Cx_MspInit+0xe0>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee8 <I2Cx_MspInit+0xe0>)
 8003eb4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003eb8:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003eba:	2200      	movs	r2, #0
 8003ebc:	210f      	movs	r1, #15
 8003ebe:	2048      	movs	r0, #72	@ 0x48
 8003ec0:	f001 fb8c 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003ec4:	2048      	movs	r0, #72	@ 0x48
 8003ec6:	f001 fba5 	bl	8005614 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	210f      	movs	r1, #15
 8003ece:	2049      	movs	r0, #73	@ 0x49
 8003ed0:	f001 fb84 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003ed4:	2049      	movs	r0, #73	@ 0x49
 8003ed6:	f001 fb9d 	bl	8005614 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8003eda:	bf00      	nop
 8003edc:	3728      	adds	r7, #40	@ 0x28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40005c00 	.word	0x40005c00
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40020000 	.word	0x40020000
 8003ef0:	40020800 	.word	0x40020800

08003ef4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003ef8:	4814      	ldr	r0, [pc, #80]	@ (8003f4c <I2Cx_Init+0x58>)
 8003efa:	f005 fbc9 	bl	8009690 <HAL_I2C_GetState>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d121      	bne.n	8003f48 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8003f04:	4b11      	ldr	r3, [pc, #68]	@ (8003f4c <I2Cx_Init+0x58>)
 8003f06:	4a12      	ldr	r2, [pc, #72]	@ (8003f50 <I2Cx_Init+0x5c>)
 8003f08:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8003f0a:	4b10      	ldr	r3, [pc, #64]	@ (8003f4c <I2Cx_Init+0x58>)
 8003f0c:	4a11      	ldr	r2, [pc, #68]	@ (8003f54 <I2Cx_Init+0x60>)
 8003f0e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003f10:	4b0e      	ldr	r3, [pc, #56]	@ (8003f4c <I2Cx_Init+0x58>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8003f16:	4b0d      	ldr	r3, [pc, #52]	@ (8003f4c <I2Cx_Init+0x58>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f4c <I2Cx_Init+0x58>)
 8003f1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f22:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003f24:	4b09      	ldr	r3, [pc, #36]	@ (8003f4c <I2Cx_Init+0x58>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8003f2a:	4b08      	ldr	r3, [pc, #32]	@ (8003f4c <I2Cx_Init+0x58>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003f30:	4b06      	ldr	r3, [pc, #24]	@ (8003f4c <I2Cx_Init+0x58>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 8003f36:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <I2Cx_Init+0x58>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8003f3c:	4803      	ldr	r0, [pc, #12]	@ (8003f4c <I2Cx_Init+0x58>)
 8003f3e:	f7ff ff63 	bl	8003e08 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8003f42:	4802      	ldr	r0, [pc, #8]	@ (8003f4c <I2Cx_Init+0x58>)
 8003f44:	f004 ff04 	bl	8008d50 <HAL_I2C_Init>
  }
}
 8003f48:	bf00      	nop
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20008ff0 	.word	0x20008ff0
 8003f50:	40005c00 	.word	0x40005c00
 8003f54:	000186a0 	.word	0x000186a0

08003f58 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <I2Cx_ITConfig+0x58>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f66:	4a12      	ldr	r2, [pc, #72]	@ (8003fb0 <I2Cx_ITConfig+0x58>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f6e:	4b10      	ldr	r3, [pc, #64]	@ (8003fb0 <I2Cx_ITConfig+0x58>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8003f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003f80:	2301      	movs	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003f84:	2300      	movs	r3, #0
 8003f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8003f88:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003f8c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4808      	ldr	r0, [pc, #32]	@ (8003fb4 <I2Cx_ITConfig+0x5c>)
 8003f94:	f002 fad6 	bl	8006544 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8003f98:	2200      	movs	r2, #0
 8003f9a:	210f      	movs	r1, #15
 8003f9c:	2028      	movs	r0, #40	@ 0x28
 8003f9e:	f001 fb1d 	bl	80055dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8003fa2:	2028      	movs	r0, #40	@ 0x28
 8003fa4:	f001 fb36 	bl	8005614 <HAL_NVIC_EnableIRQ>
}
 8003fa8:	bf00      	nop
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40020000 	.word	0x40020000

08003fb8 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af04      	add	r7, sp, #16
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	71fb      	strb	r3, [r7, #7]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	71bb      	strb	r3, [r7, #6]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	b299      	uxth	r1, r3
 8003fd2:	79bb      	ldrb	r3, [r7, #6]
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <I2Cx_WriteData+0x4c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	9302      	str	r3, [sp, #8]
 8003fdc:	2301      	movs	r3, #1
 8003fde:	9301      	str	r3, [sp, #4]
 8003fe0:	1d7b      	adds	r3, r7, #5
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	4808      	ldr	r0, [pc, #32]	@ (8004008 <I2Cx_WriteData+0x50>)
 8003fe8:	f005 f826 	bl	8009038 <HAL_I2C_Mem_Write>
 8003fec:	4603      	mov	r3, r0
 8003fee:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003ff6:	f000 f863 	bl	80040c0 <I2Cx_Error>
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000244 	.word	0x20000244
 8004008:	20008ff0 	.word	0x20008ff0

0800400c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af04      	add	r7, sp, #16
 8004012:	4603      	mov	r3, r0
 8004014:	460a      	mov	r2, r1
 8004016:	71fb      	strb	r3, [r7, #7]
 8004018:	4613      	mov	r3, r2
 800401a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	b299      	uxth	r1, r3
 8004028:	79bb      	ldrb	r3, [r7, #6]
 800402a:	b29a      	uxth	r2, r3
 800402c:	4b0b      	ldr	r3, [pc, #44]	@ (800405c <I2Cx_ReadData+0x50>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	9302      	str	r3, [sp, #8]
 8004032:	2301      	movs	r3, #1
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	f107 030e 	add.w	r3, r7, #14
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	2301      	movs	r3, #1
 800403e:	4808      	ldr	r0, [pc, #32]	@ (8004060 <I2Cx_ReadData+0x54>)
 8004040:	f005 f8f4 	bl	800922c <HAL_I2C_Mem_Read>
 8004044:	4603      	mov	r3, r0
 8004046:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800404e:	f000 f837 	bl	80040c0 <I2Cx_Error>

  }
  return value;
 8004052:	7bbb      	ldrb	r3, [r7, #14]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20000244 	.word	0x20000244
 8004060:	20008ff0 	.word	0x20008ff0

08004064 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af04      	add	r7, sp, #16
 800406a:	603a      	str	r2, [r7, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	4603      	mov	r3, r0
 8004070:	71fb      	strb	r3, [r7, #7]
 8004072:	460b      	mov	r3, r1
 8004074:	71bb      	strb	r3, [r7, #6]
 8004076:	4613      	mov	r3, r2
 8004078:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	b299      	uxth	r1, r3
 8004082:	79bb      	ldrb	r3, [r7, #6]
 8004084:	b29a      	uxth	r2, r3
 8004086:	4b0c      	ldr	r3, [pc, #48]	@ (80040b8 <I2Cx_ReadBuffer+0x54>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	9302      	str	r3, [sp, #8]
 800408c:	88bb      	ldrh	r3, [r7, #4]
 800408e:	9301      	str	r3, [sp, #4]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	2301      	movs	r3, #1
 8004096:	4809      	ldr	r0, [pc, #36]	@ (80040bc <I2Cx_ReadBuffer+0x58>)
 8004098:	f005 f8c8 	bl	800922c <HAL_I2C_Mem_Read>
 800409c:	4603      	mov	r3, r0
 800409e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e002      	b.n	80040b0 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80040aa:	f000 f809 	bl	80040c0 <I2Cx_Error>

    return 1;
 80040ae:	2301      	movs	r3, #1
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000244 	.word	0x20000244
 80040bc:	20008ff0 	.word	0x20008ff0

080040c0 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80040c4:	4803      	ldr	r0, [pc, #12]	@ (80040d4 <I2Cx_Error+0x14>)
 80040c6:	f004 ff87 	bl	8008fd8 <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80040ca:	f7ff ff13 	bl	8003ef4 <I2Cx_Init>
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20008ff0 	.word	0x20008ff0

080040d8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80040dc:	4819      	ldr	r0, [pc, #100]	@ (8004144 <SPIx_Init+0x6c>)
 80040de:	f007 fe79 	bl	800bdd4 <HAL_SPI_GetState>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d12b      	bne.n	8004140 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80040e8:	4b16      	ldr	r3, [pc, #88]	@ (8004144 <SPIx_Init+0x6c>)
 80040ea:	4a17      	ldr	r2, [pc, #92]	@ (8004148 <SPIx_Init+0x70>)
 80040ec:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80040ee:	4b15      	ldr	r3, [pc, #84]	@ (8004144 <SPIx_Init+0x6c>)
 80040f0:	2218      	movs	r2, #24
 80040f2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80040f4:	4b13      	ldr	r3, [pc, #76]	@ (8004144 <SPIx_Init+0x6c>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80040fa:	4b12      	ldr	r3, [pc, #72]	@ (8004144 <SPIx_Init+0x6c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8004100:	4b10      	ldr	r3, [pc, #64]	@ (8004144 <SPIx_Init+0x6c>)
 8004102:	2200      	movs	r2, #0
 8004104:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8004106:	4b0f      	ldr	r3, [pc, #60]	@ (8004144 <SPIx_Init+0x6c>)
 8004108:	2200      	movs	r2, #0
 800410a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800410c:	4b0d      	ldr	r3, [pc, #52]	@ (8004144 <SPIx_Init+0x6c>)
 800410e:	2207      	movs	r2, #7
 8004110:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8004112:	4b0c      	ldr	r3, [pc, #48]	@ (8004144 <SPIx_Init+0x6c>)
 8004114:	2200      	movs	r2, #0
 8004116:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8004118:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <SPIx_Init+0x6c>)
 800411a:	2200      	movs	r2, #0
 800411c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800411e:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <SPIx_Init+0x6c>)
 8004120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004124:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8004126:	4b07      	ldr	r3, [pc, #28]	@ (8004144 <SPIx_Init+0x6c>)
 8004128:	2200      	movs	r2, #0
 800412a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800412c:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <SPIx_Init+0x6c>)
 800412e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004132:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8004134:	4803      	ldr	r0, [pc, #12]	@ (8004144 <SPIx_Init+0x6c>)
 8004136:	f000 f853 	bl	80041e0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800413a:	4802      	ldr	r0, [pc, #8]	@ (8004144 <SPIx_Init+0x6c>)
 800413c:	f007 f993 	bl	800b466 <HAL_SPI_Init>
  }
}
 8004140:	bf00      	nop
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20009044 	.word	0x20009044
 8004148:	40015000 	.word	0x40015000

0800414c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	b29a      	uxth	r2, r3
 800415e:	4b09      	ldr	r3, [pc, #36]	@ (8004184 <SPIx_Read+0x38>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f107 0108 	add.w	r1, r7, #8
 8004166:	4808      	ldr	r0, [pc, #32]	@ (8004188 <SPIx_Read+0x3c>)
 8004168:	f007 fb72 	bl	800b850 <HAL_SPI_Receive>
 800416c:	4603      	mov	r3, r0
 800416e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8004176:	f000 f827 	bl	80041c8 <SPIx_Error>
  }

  return readvalue;
 800417a:	68bb      	ldr	r3, [r7, #8]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000248 	.word	0x20000248
 8004188:	20009044 	.word	0x20009044

0800418c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 800419a:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <SPIx_Write+0x34>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	1db9      	adds	r1, r7, #6
 80041a0:	2201      	movs	r2, #1
 80041a2:	4808      	ldr	r0, [pc, #32]	@ (80041c4 <SPIx_Write+0x38>)
 80041a4:	f007 fa10 	bl	800b5c8 <HAL_SPI_Transmit>
 80041a8:	4603      	mov	r3, r0
 80041aa:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80041b2:	f000 f809 	bl	80041c8 <SPIx_Error>
  }
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000248 	.word	0x20000248
 80041c4:	20009044 	.word	0x20009044

080041c8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80041cc:	4803      	ldr	r0, [pc, #12]	@ (80041dc <SPIx_Error+0x14>)
 80041ce:	f007 f9d3 	bl	800b578 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80041d2:	f7ff ff81 	bl	80040d8 <SPIx_Init>
}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20009044 	.word	0x20009044

080041e0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	@ 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	4b17      	ldr	r3, [pc, #92]	@ (800424c <SPIx_MspInit+0x6c>)
 80041ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f0:	4a16      	ldr	r2, [pc, #88]	@ (800424c <SPIx_MspInit+0x6c>)
 80041f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80041f8:	4b14      	ldr	r3, [pc, #80]	@ (800424c <SPIx_MspInit+0x6c>)
 80041fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	4b10      	ldr	r3, [pc, #64]	@ (800424c <SPIx_MspInit+0x6c>)
 800420a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420c:	4a0f      	ldr	r2, [pc, #60]	@ (800424c <SPIx_MspInit+0x6c>)
 800420e:	f043 0320 	orr.w	r3, r3, #32
 8004212:	6313      	str	r3, [r2, #48]	@ 0x30
 8004214:	4b0d      	ldr	r3, [pc, #52]	@ (800424c <SPIx_MspInit+0x6c>)
 8004216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8004220:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8004224:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8004226:	2302      	movs	r3, #2
 8004228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800422a:	2302      	movs	r3, #2
 800422c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800422e:	2301      	movs	r3, #1
 8004230:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8004232:	2305      	movs	r3, #5
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8004236:	f107 0314 	add.w	r3, r7, #20
 800423a:	4619      	mov	r1, r3
 800423c:	4804      	ldr	r0, [pc, #16]	@ (8004250 <SPIx_MspInit+0x70>)
 800423e:	f002 f981 	bl	8006544 <HAL_GPIO_Init>
}
 8004242:	bf00      	nop
 8004244:	3728      	adds	r7, #40	@ 0x28
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800
 8004250:	40021400 	.word	0x40021400

08004254 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 800425a:	4b36      	ldr	r3, [pc, #216]	@ (8004334 <LCD_IO_Init+0xe0>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d164      	bne.n	800432c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8004262:	4b34      	ldr	r3, [pc, #208]	@ (8004334 <LCD_IO_Init+0xe0>)
 8004264:	2201      	movs	r2, #1
 8004266:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8004268:	2300      	movs	r3, #0
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	4b32      	ldr	r3, [pc, #200]	@ (8004338 <LCD_IO_Init+0xe4>)
 800426e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004270:	4a31      	ldr	r2, [pc, #196]	@ (8004338 <LCD_IO_Init+0xe4>)
 8004272:	f043 0308 	orr.w	r3, r3, #8
 8004276:	6313      	str	r3, [r2, #48]	@ 0x30
 8004278:	4b2f      	ldr	r3, [pc, #188]	@ (8004338 <LCD_IO_Init+0xe4>)
 800427a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8004284:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004288:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800428a:	2301      	movs	r3, #1
 800428c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004292:	2302      	movs	r3, #2
 8004294:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8004296:	f107 030c 	add.w	r3, r7, #12
 800429a:	4619      	mov	r1, r3
 800429c:	4827      	ldr	r0, [pc, #156]	@ (800433c <LCD_IO_Init+0xe8>)
 800429e:	f002 f951 	bl	8006544 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	607b      	str	r3, [r7, #4]
 80042a6:	4b24      	ldr	r3, [pc, #144]	@ (8004338 <LCD_IO_Init+0xe4>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042aa:	4a23      	ldr	r2, [pc, #140]	@ (8004338 <LCD_IO_Init+0xe4>)
 80042ac:	f043 0308 	orr.w	r3, r3, #8
 80042b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042b2:	4b21      	ldr	r3, [pc, #132]	@ (8004338 <LCD_IO_Init+0xe4>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	607b      	str	r3, [r7, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80042be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80042c4:	2301      	movs	r3, #1
 80042c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80042cc:	2302      	movs	r3, #2
 80042ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	4619      	mov	r1, r3
 80042d6:	4819      	ldr	r0, [pc, #100]	@ (800433c <LCD_IO_Init+0xe8>)
 80042d8:	f002 f934 	bl	8006544 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80042dc:	2300      	movs	r3, #0
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4b15      	ldr	r3, [pc, #84]	@ (8004338 <LCD_IO_Init+0xe4>)
 80042e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e4:	4a14      	ldr	r2, [pc, #80]	@ (8004338 <LCD_IO_Init+0xe4>)
 80042e6:	f043 0304 	orr.w	r3, r3, #4
 80042ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ec:	4b12      	ldr	r3, [pc, #72]	@ (8004338 <LCD_IO_Init+0xe4>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80042f8:	2304      	movs	r3, #4
 80042fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80042fc:	2301      	movs	r3, #1
 80042fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004304:	2302      	movs	r3, #2
 8004306:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8004308:	f107 030c 	add.w	r3, r7, #12
 800430c:	4619      	mov	r1, r3
 800430e:	480c      	ldr	r0, [pc, #48]	@ (8004340 <LCD_IO_Init+0xec>)
 8004310:	f002 f918 	bl	8006544 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8004314:	2200      	movs	r2, #0
 8004316:	2104      	movs	r1, #4
 8004318:	4809      	ldr	r0, [pc, #36]	@ (8004340 <LCD_IO_Init+0xec>)
 800431a:	f002 fbcb 	bl	8006ab4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800431e:	2201      	movs	r2, #1
 8004320:	2104      	movs	r1, #4
 8004322:	4807      	ldr	r0, [pc, #28]	@ (8004340 <LCD_IO_Init+0xec>)
 8004324:	f002 fbc6 	bl	8006ab4 <HAL_GPIO_WritePin>

    SPIx_Init();
 8004328:	f7ff fed6 	bl	80040d8 <SPIx_Init>
  }
}
 800432c:	bf00      	nop
 800432e:	3720      	adds	r7, #32
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	2000909c 	.word	0x2000909c
 8004338:	40023800 	.word	0x40023800
 800433c:	40020c00 	.word	0x40020c00
 8004340:	40020800 	.word	0x40020800

08004344 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800434e:	2201      	movs	r2, #1
 8004350:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004354:	480a      	ldr	r0, [pc, #40]	@ (8004380 <LCD_IO_WriteData+0x3c>)
 8004356:	f002 fbad 	bl	8006ab4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800435a:	2200      	movs	r2, #0
 800435c:	2104      	movs	r1, #4
 800435e:	4809      	ldr	r0, [pc, #36]	@ (8004384 <LCD_IO_WriteData+0x40>)
 8004360:	f002 fba8 	bl	8006ab4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff ff10 	bl	800418c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800436c:	2201      	movs	r2, #1
 800436e:	2104      	movs	r1, #4
 8004370:	4804      	ldr	r0, [pc, #16]	@ (8004384 <LCD_IO_WriteData+0x40>)
 8004372:	f002 fb9f 	bl	8006ab4 <HAL_GPIO_WritePin>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40020c00 	.word	0x40020c00
 8004384:	40020800 	.word	0x40020800

08004388 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8004392:	2200      	movs	r2, #0
 8004394:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004398:	480a      	ldr	r0, [pc, #40]	@ (80043c4 <LCD_IO_WriteReg+0x3c>)
 800439a:	f002 fb8b 	bl	8006ab4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800439e:	2200      	movs	r2, #0
 80043a0:	2104      	movs	r1, #4
 80043a2:	4809      	ldr	r0, [pc, #36]	@ (80043c8 <LCD_IO_WriteReg+0x40>)
 80043a4:	f002 fb86 	bl	8006ab4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff feed 	bl	800418c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80043b2:	2201      	movs	r2, #1
 80043b4:	2104      	movs	r1, #4
 80043b6:	4804      	ldr	r0, [pc, #16]	@ (80043c8 <LCD_IO_WriteReg+0x40>)
 80043b8:	f002 fb7c 	bl	8006ab4 <HAL_GPIO_WritePin>
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40020c00 	.word	0x40020c00
 80043c8:	40020800 	.word	0x40020800

080043cc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	460a      	mov	r2, r1
 80043d6:	80fb      	strh	r3, [r7, #6]
 80043d8:	4613      	mov	r3, r2
 80043da:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80043e0:	2200      	movs	r2, #0
 80043e2:	2104      	movs	r1, #4
 80043e4:	4810      	ldr	r0, [pc, #64]	@ (8004428 <LCD_IO_ReadData+0x5c>)
 80043e6:	f002 fb65 	bl	8006ab4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80043ea:	2200      	movs	r2, #0
 80043ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043f0:	480e      	ldr	r0, [pc, #56]	@ (800442c <LCD_IO_ReadData+0x60>)
 80043f2:	f002 fb5f 	bl	8006ab4 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fec7 	bl	800418c <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 80043fe:	797b      	ldrb	r3, [r7, #5]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fea3 	bl	800414c <SPIx_Read>
 8004406:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004408:	2201      	movs	r2, #1
 800440a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800440e:	4807      	ldr	r0, [pc, #28]	@ (800442c <LCD_IO_ReadData+0x60>)
 8004410:	f002 fb50 	bl	8006ab4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004414:	2201      	movs	r2, #1
 8004416:	2104      	movs	r1, #4
 8004418:	4803      	ldr	r0, [pc, #12]	@ (8004428 <LCD_IO_ReadData+0x5c>)
 800441a:	f002 fb4b 	bl	8006ab4 <HAL_GPIO_WritePin>

  return readvalue;
 800441e:	68fb      	ldr	r3, [r7, #12]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40020800 	.word	0x40020800
 800442c:	40020c00 	.word	0x40020c00

08004430 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fff3 	bl	8005424 <HAL_Delay>
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800444a:	f7ff fd53 	bl	8003ef4 <I2Cx_Init>
}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}

08004452 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8004456:	f7ff fd7f 	bl	8003f58 <I2Cx_ITConfig>
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}

0800445e <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	4603      	mov	r3, r0
 8004466:	71fb      	strb	r3, [r7, #7]
 8004468:	460b      	mov	r3, r1
 800446a:	71bb      	strb	r3, [r7, #6]
 800446c:	4613      	mov	r3, r2
 800446e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8004470:	797a      	ldrb	r2, [r7, #5]
 8004472:	79b9      	ldrb	r1, [r7, #6]
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fd9e 	bl	8003fb8 <I2Cx_WriteData>
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	460a      	mov	r2, r1
 800448e:	71fb      	strb	r3, [r7, #7]
 8004490:	4613      	mov	r3, r2
 8004492:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8004494:	79ba      	ldrb	r2, [r7, #6]
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fdb6 	bl	800400c <I2Cx_ReadData>
 80044a0:	4603      	mov	r3, r0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	603a      	str	r2, [r7, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	4603      	mov	r3, r0
 80044b6:	71fb      	strb	r3, [r7, #7]
 80044b8:	460b      	mov	r3, r1
 80044ba:	71bb      	strb	r3, [r7, #6]
 80044bc:	4613      	mov	r3, r2
 80044be:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80044c0:	88bb      	ldrh	r3, [r7, #4]
 80044c2:	79b9      	ldrb	r1, [r7, #6]
 80044c4:	79f8      	ldrb	r0, [r7, #7]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	f7ff fdcc 	bl	8004064 <I2Cx_ReadBuffer>
 80044cc:	4603      	mov	r3, r0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 ffa0 	bl	8005424 <HAL_Delay>
}
 80044e4:	bf00      	nop
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 80044f0:	4b2d      	ldr	r3, [pc, #180]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 80044f2:	4a2e      	ldr	r2, [pc, #184]	@ (80045ac <BSP_LCD_Init+0xc0>)
 80044f4:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80044f6:	4b2c      	ldr	r3, [pc, #176]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 80044f8:	2209      	movs	r2, #9
 80044fa:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80044fc:	4b2a      	ldr	r3, [pc, #168]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 80044fe:	2201      	movs	r2, #1
 8004500:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8004502:	4b29      	ldr	r3, [pc, #164]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 8004504:	221d      	movs	r2, #29
 8004506:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8004508:	4b27      	ldr	r3, [pc, #156]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 800450a:	2203      	movs	r2, #3
 800450c:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 800450e:	4b26      	ldr	r3, [pc, #152]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 8004510:	f240 120d 	movw	r2, #269	@ 0x10d
 8004514:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8004516:	4b24      	ldr	r3, [pc, #144]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 8004518:	f240 1243 	movw	r2, #323	@ 0x143
 800451c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 800451e:	4b22      	ldr	r3, [pc, #136]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 8004520:	f240 1217 	movw	r2, #279	@ 0x117
 8004524:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8004526:	4b20      	ldr	r3, [pc, #128]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 8004528:	f240 1247 	movw	r2, #327	@ 0x147
 800452c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 800452e:	4b1e      	ldr	r3, [pc, #120]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8004536:	4b1c      	ldr	r3, [pc, #112]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 800453e:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004546:	4b1a      	ldr	r3, [pc, #104]	@ (80045b0 <BSP_LCD_Init+0xc4>)
 8004548:	2208      	movs	r2, #8
 800454a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800454c:	4b18      	ldr	r3, [pc, #96]	@ (80045b0 <BSP_LCD_Init+0xc4>)
 800454e:	22c0      	movs	r2, #192	@ 0xc0
 8004550:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8004552:	4b17      	ldr	r3, [pc, #92]	@ (80045b0 <BSP_LCD_Init+0xc4>)
 8004554:	2204      	movs	r2, #4
 8004556:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004558:	4b15      	ldr	r3, [pc, #84]	@ (80045b0 <BSP_LCD_Init+0xc4>)
 800455a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800455e:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004560:	4813      	ldr	r0, [pc, #76]	@ (80045b0 <BSP_LCD_Init+0xc4>)
 8004562:	f006 fd2f 	bl	800afc4 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004566:	4b10      	ldr	r3, [pc, #64]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 8004568:	2200      	movs	r2, #0
 800456a:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800456c:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 800456e:	2200      	movs	r2, #0
 8004570:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004572:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 8004574:	2200      	movs	r2, #0
 8004576:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004578:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 800457a:	2200      	movs	r2, #0
 800457c:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 800457e:	f000 fa6b 	bl	8004a58 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8004582:	4809      	ldr	r0, [pc, #36]	@ (80045a8 <BSP_LCD_Init+0xbc>)
 8004584:	f005 fcc2 	bl	8009f0c <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8004588:	4b0a      	ldr	r3, [pc, #40]	@ (80045b4 <BSP_LCD_Init+0xc8>)
 800458a:	4a0b      	ldr	r2, [pc, #44]	@ (80045b8 <BSP_LCD_Init+0xcc>)
 800458c:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 800458e:	4b09      	ldr	r3, [pc, #36]	@ (80045b4 <BSP_LCD_Init+0xc8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004596:	f000 fc4d 	bl	8004e34 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800459a:	4808      	ldr	r0, [pc, #32]	@ (80045bc <BSP_LCD_Init+0xd0>)
 800459c:	f000 f8be 	bl	800471c <BSP_LCD_SetFont>

  return LCD_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	200090a0 	.word	0x200090a0
 80045ac:	40016800 	.word	0x40016800
 80045b0:	20009188 	.word	0x20009188
 80045b4:	200091d4 	.word	0x200091d4
 80045b8:	200001e4 	.word	0x200001e4
 80045bc:	2000024c 	.word	0x2000024c

080045c0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80045c4:	4b03      	ldr	r3, [pc, #12]	@ (80045d4 <BSP_LCD_GetXSize+0x14>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ca:	4798      	blx	r3
 80045cc:	4603      	mov	r3, r0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200091d4 	.word	0x200091d4

080045d8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80045dc:	4b03      	ldr	r3, [pc, #12]	@ (80045ec <BSP_LCD_GetYSize+0x14>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	4798      	blx	r3
 80045e4:	4603      	mov	r3, r0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	200091d4 	.word	0x200091d4

080045f0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b090      	sub	sp, #64	@ 0x40
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	6039      	str	r1, [r7, #0]
 80045fa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8004600:	f7ff ffde 	bl	80045c0 <BSP_LCD_GetXSize>
 8004604:	4603      	mov	r3, r0
 8004606:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 800460c:	f7ff ffe4 	bl	80045d8 <BSP_LCD_GetYSize>
 8004610:	4603      	mov	r3, r0
 8004612:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 800461c:	23ff      	movs	r3, #255	@ 0xff
 800461e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004636:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800463a:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800463c:	2307      	movs	r3, #7
 800463e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8004640:	f7ff ffbe 	bl	80045c0 <BSP_LCD_GetXSize>
 8004644:	4603      	mov	r3, r0
 8004646:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8004648:	f7ff ffc6 	bl	80045d8 <BSP_LCD_GetYSize>
 800464c:	4603      	mov	r3, r0
 800464e:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8004650:	88fa      	ldrh	r2, [r7, #6]
 8004652:	f107 030c 	add.w	r3, r7, #12
 8004656:	4619      	mov	r1, r3
 8004658:	4814      	ldr	r0, [pc, #80]	@ (80046ac <BSP_LCD_LayerDefaultInit+0xbc>)
 800465a:	f005 fde9 	bl	800a230 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	4913      	ldr	r1, [pc, #76]	@ (80046b0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004662:	4613      	mov	r3, r2
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	3304      	adds	r3, #4
 800466e:	f04f 32ff 	mov.w	r2, #4294967295
 8004672:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004674:	88fa      	ldrh	r2, [r7, #6]
 8004676:	490e      	ldr	r1, [pc, #56]	@ (80046b0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004678:	4613      	mov	r3, r2
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	3308      	adds	r3, #8
 8004684:	4a0b      	ldr	r2, [pc, #44]	@ (80046b4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8004686:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8004688:	88fa      	ldrh	r2, [r7, #6]
 800468a:	4909      	ldr	r1, [pc, #36]	@ (80046b0 <BSP_LCD_LayerDefaultInit+0xc0>)
 800468c:	4613      	mov	r3, r2
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800469a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800469c:	4803      	ldr	r0, [pc, #12]	@ (80046ac <BSP_LCD_LayerDefaultInit+0xbc>)
 800469e:	f005 fe05 	bl	800a2ac <HAL_LTDC_EnableDither>
}
 80046a2:	bf00      	nop
 80046a4:	3740      	adds	r7, #64	@ 0x40
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	200090a0 	.word	0x200090a0
 80046b0:	200091bc 	.word	0x200091bc
 80046b4:	2000024c 	.word	0x2000024c

080046b8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80046c0:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <BSP_LCD_SetTextColor+0x28>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4907      	ldr	r1, [pc, #28]	@ (80046e4 <BSP_LCD_SetTextColor+0x2c>)
 80046c6:	4613      	mov	r3, r2
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	200091b8 	.word	0x200091b8
 80046e4:	200091bc 	.word	0x200091bc

080046e8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80046f0:	4b08      	ldr	r3, [pc, #32]	@ (8004714 <BSP_LCD_SetBackColor+0x2c>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4908      	ldr	r1, [pc, #32]	@ (8004718 <BSP_LCD_SetBackColor+0x30>)
 80046f6:	4613      	mov	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	3304      	adds	r3, #4
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	601a      	str	r2, [r3, #0]
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	200091b8 	.word	0x200091b8
 8004718:	200091bc 	.word	0x200091bc

0800471c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8004724:	4b08      	ldr	r3, [pc, #32]	@ (8004748 <BSP_LCD_SetFont+0x2c>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	4908      	ldr	r1, [pc, #32]	@ (800474c <BSP_LCD_SetFont+0x30>)
 800472a:	4613      	mov	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	3308      	adds	r3, #8
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	200091b8 	.word	0x200091b8
 800474c:	200091bc 	.word	0x200091bc

08004750 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8004750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004752:	b085      	sub	sp, #20
 8004754:	af02      	add	r7, sp, #8
 8004756:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8004758:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <BSP_LCD_Clear+0x48>)
 800475a:	681c      	ldr	r4, [r3, #0]
 800475c:	4b0e      	ldr	r3, [pc, #56]	@ (8004798 <BSP_LCD_Clear+0x48>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a0e      	ldr	r2, [pc, #56]	@ (800479c <BSP_LCD_Clear+0x4c>)
 8004762:	2134      	movs	r1, #52	@ 0x34
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	335c      	adds	r3, #92	@ 0x5c
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	461e      	mov	r6, r3
 8004770:	f7ff ff26 	bl	80045c0 <BSP_LCD_GetXSize>
 8004774:	4605      	mov	r5, r0
 8004776:	f7ff ff2f 	bl	80045d8 <BSP_LCD_GetYSize>
 800477a:	4602      	mov	r2, r0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	9301      	str	r3, [sp, #4]
 8004780:	2300      	movs	r3, #0
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	462a      	mov	r2, r5
 8004788:	4631      	mov	r1, r6
 800478a:	4620      	mov	r0, r4
 800478c:	f000 fb1a 	bl	8004dc4 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004798:	200091b8 	.word	0x200091b8
 800479c:	200090a0 	.word	0x200090a0

080047a0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	80fb      	strh	r3, [r7, #6]
 80047aa:	460b      	mov	r3, r1
 80047ac:	80bb      	strh	r3, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80047b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004820 <BSP_LCD_DisplayChar+0x80>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	491b      	ldr	r1, [pc, #108]	@ (8004824 <BSP_LCD_DisplayChar+0x84>)
 80047b8:	4613      	mov	r3, r2
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	3308      	adds	r3, #8
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6819      	ldr	r1, [r3, #0]
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80047ce:	4b14      	ldr	r3, [pc, #80]	@ (8004820 <BSP_LCD_DisplayChar+0x80>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4c14      	ldr	r4, [pc, #80]	@ (8004824 <BSP_LCD_DisplayChar+0x84>)
 80047d4:	4613      	mov	r3, r2
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4423      	add	r3, r4
 80047de:	3308      	adds	r3, #8
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80047e4:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80047e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <BSP_LCD_DisplayChar+0x80>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004824 <BSP_LCD_DisplayChar+0x84>)
 80047ee:	4613      	mov	r3, r2
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4423      	add	r3, r4
 80047f8:	3308      	adds	r3, #8
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	889b      	ldrh	r3, [r3, #4]
 80047fe:	3307      	adds	r3, #7
 8004800:	2b00      	cmp	r3, #0
 8004802:	da00      	bge.n	8004806 <BSP_LCD_DisplayChar+0x66>
 8004804:	3307      	adds	r3, #7
 8004806:	10db      	asrs	r3, r3, #3
 8004808:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800480c:	18ca      	adds	r2, r1, r3
 800480e:	88b9      	ldrh	r1, [r7, #4]
 8004810:	88fb      	ldrh	r3, [r7, #6]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fa1c 	bl	8004c50 <DrawChar>
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	bd90      	pop	{r4, r7, pc}
 8004820:	200091b8 	.word	0x200091b8
 8004824:	200091bc 	.word	0x200091bc

08004828 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8004828:	b5b0      	push	{r4, r5, r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	60ba      	str	r2, [r7, #8]
 8004830:	461a      	mov	r2, r3
 8004832:	4603      	mov	r3, r0
 8004834:	81fb      	strh	r3, [r7, #14]
 8004836:	460b      	mov	r3, r1
 8004838:	81bb      	strh	r3, [r7, #12]
 800483a:	4613      	mov	r3, r2
 800483c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800483e:	2301      	movs	r3, #1
 8004840:	83fb      	strh	r3, [r7, #30]
 8004842:	2300      	movs	r3, #0
 8004844:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	2300      	movs	r3, #0
 800484c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8004852:	e002      	b.n	800485a <BSP_LCD_DisplayStringAt+0x32>
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	3301      	adds	r3, #1
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	617a      	str	r2, [r7, #20]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f6      	bne.n	8004854 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8004866:	f7ff feab 	bl	80045c0 <BSP_LCD_GetXSize>
 800486a:	4601      	mov	r1, r0
 800486c:	4b4b      	ldr	r3, [pc, #300]	@ (800499c <BSP_LCD_DisplayStringAt+0x174>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	484b      	ldr	r0, [pc, #300]	@ (80049a0 <BSP_LCD_DisplayStringAt+0x178>)
 8004872:	4613      	mov	r3, r2
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4403      	add	r3, r0
 800487c:	3308      	adds	r3, #8
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	889b      	ldrh	r3, [r3, #4]
 8004882:	fbb1 f3f3 	udiv	r3, r1, r3
 8004886:	613b      	str	r3, [r7, #16]

  switch (mode)
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	2b03      	cmp	r3, #3
 800488c:	d01c      	beq.n	80048c8 <BSP_LCD_DisplayStringAt+0xa0>
 800488e:	2b03      	cmp	r3, #3
 8004890:	dc33      	bgt.n	80048fa <BSP_LCD_DisplayStringAt+0xd2>
 8004892:	2b01      	cmp	r3, #1
 8004894:	d002      	beq.n	800489c <BSP_LCD_DisplayStringAt+0x74>
 8004896:	2b02      	cmp	r3, #2
 8004898:	d019      	beq.n	80048ce <BSP_LCD_DisplayStringAt+0xa6>
 800489a:	e02e      	b.n	80048fa <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	1ad1      	subs	r1, r2, r3
 80048a2:	4b3e      	ldr	r3, [pc, #248]	@ (800499c <BSP_LCD_DisplayStringAt+0x174>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	483e      	ldr	r0, [pc, #248]	@ (80049a0 <BSP_LCD_DisplayStringAt+0x178>)
 80048a8:	4613      	mov	r3, r2
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4403      	add	r3, r0
 80048b2:	3308      	adds	r3, #8
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	889b      	ldrh	r3, [r3, #4]
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	89fb      	ldrh	r3, [r7, #14]
 80048c2:	4413      	add	r3, r2
 80048c4:	83fb      	strh	r3, [r7, #30]
      break;
 80048c6:	e01b      	b.n	8004900 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 80048c8:	89fb      	ldrh	r3, [r7, #14]
 80048ca:	83fb      	strh	r3, [r7, #30]
      break;
 80048cc:	e018      	b.n	8004900 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	b299      	uxth	r1, r3
 80048d6:	4b31      	ldr	r3, [pc, #196]	@ (800499c <BSP_LCD_DisplayStringAt+0x174>)
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	4831      	ldr	r0, [pc, #196]	@ (80049a0 <BSP_LCD_DisplayStringAt+0x178>)
 80048dc:	4613      	mov	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4403      	add	r3, r0
 80048e6:	3308      	adds	r3, #8
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	889b      	ldrh	r3, [r3, #4]
 80048ec:	fb11 f303 	smulbb	r3, r1, r3
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	89fb      	ldrh	r3, [r7, #14]
 80048f4:	4413      	add	r3, r2
 80048f6:	83fb      	strh	r3, [r7, #30]
      break;
 80048f8:	e002      	b.n	8004900 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 80048fa:	89fb      	ldrh	r3, [r7, #14]
 80048fc:	83fb      	strh	r3, [r7, #30]
      break;
 80048fe:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8004900:	e01a      	b.n	8004938 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	781a      	ldrb	r2, [r3, #0]
 8004906:	89b9      	ldrh	r1, [r7, #12]
 8004908:	8bfb      	ldrh	r3, [r7, #30]
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff ff48 	bl	80047a0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8004910:	4b22      	ldr	r3, [pc, #136]	@ (800499c <BSP_LCD_DisplayStringAt+0x174>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4922      	ldr	r1, [pc, #136]	@ (80049a0 <BSP_LCD_DisplayStringAt+0x178>)
 8004916:	4613      	mov	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	3308      	adds	r3, #8
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	889a      	ldrh	r2, [r3, #4]
 8004926:	8bfb      	ldrh	r3, [r7, #30]
 8004928:	4413      	add	r3, r2
 800492a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	3301      	adds	r3, #1
 8004930:	60bb      	str	r3, [r7, #8]
    i++;
 8004932:	8bbb      	ldrh	r3, [r7, #28]
 8004934:	3301      	adds	r3, #1
 8004936:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2dc      	uxtb	r4, r3
 8004946:	f7ff fe3b 	bl	80045c0 <BSP_LCD_GetXSize>
 800494a:	8bb9      	ldrh	r1, [r7, #28]
 800494c:	4b13      	ldr	r3, [pc, #76]	@ (800499c <BSP_LCD_DisplayStringAt+0x174>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	4d13      	ldr	r5, [pc, #76]	@ (80049a0 <BSP_LCD_DisplayStringAt+0x178>)
 8004952:	4613      	mov	r3, r2
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4413      	add	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	442b      	add	r3, r5
 800495c:	3308      	adds	r3, #8
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	889b      	ldrh	r3, [r3, #4]
 8004962:	fb01 f303 	mul.w	r3, r1, r3
 8004966:	1ac3      	subs	r3, r0, r3
 8004968:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 800496a:	4b0c      	ldr	r3, [pc, #48]	@ (800499c <BSP_LCD_DisplayStringAt+0x174>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	480c      	ldr	r0, [pc, #48]	@ (80049a0 <BSP_LCD_DisplayStringAt+0x178>)
 8004970:	4613      	mov	r3, r2
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4403      	add	r3, r0
 800497a:	3308      	adds	r3, #8
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8004980:	4299      	cmp	r1, r3
 8004982:	bf2c      	ite	cs
 8004984:	2301      	movcs	r3, #1
 8004986:	2300      	movcc	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	4023      	ands	r3, r4
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1b7      	bne.n	8004902 <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8004992:	bf00      	nop
 8004994:	bf00      	nop
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bdb0      	pop	{r4, r5, r7, pc}
 800499c:	200091b8 	.word	0x200091b8
 80049a0:	200091bc 	.word	0x200091bc

080049a4 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80049a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af02      	add	r7, sp, #8
 80049ac:	4604      	mov	r4, r0
 80049ae:	4608      	mov	r0, r1
 80049b0:	4611      	mov	r1, r2
 80049b2:	461a      	mov	r2, r3
 80049b4:	4623      	mov	r3, r4
 80049b6:	80fb      	strh	r3, [r7, #6]
 80049b8:	4603      	mov	r3, r0
 80049ba:	80bb      	strh	r3, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	807b      	strh	r3, [r7, #2]
 80049c0:	4613      	mov	r3, r2
 80049c2:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80049c8:	4b20      	ldr	r3, [pc, #128]	@ (8004a4c <BSP_LCD_FillRect+0xa8>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4920      	ldr	r1, [pc, #128]	@ (8004a50 <BSP_LCD_FillRect+0xac>)
 80049ce:	4613      	mov	r3, r2
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fe6c 	bl	80046b8 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 80049e0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a4c <BSP_LCD_FillRect+0xa8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a54 <BSP_LCD_FillRect+0xb0>)
 80049e6:	2134      	movs	r1, #52	@ 0x34
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	335c      	adds	r3, #92	@ 0x5c
 80049f0:	681c      	ldr	r4, [r3, #0]
 80049f2:	f7ff fde5 	bl	80045c0 <BSP_LCD_GetXSize>
 80049f6:	4602      	mov	r2, r0
 80049f8:	88bb      	ldrh	r3, [r7, #4]
 80049fa:	fb03 f202 	mul.w	r2, r3, r2
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4423      	add	r3, r4
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 8004a08:	4b10      	ldr	r3, [pc, #64]	@ (8004a4c <BSP_LCD_FillRect+0xa8>)
 8004a0a:	681c      	ldr	r4, [r3, #0]
 8004a0c:	68fd      	ldr	r5, [r7, #12]
 8004a0e:	887e      	ldrh	r6, [r7, #2]
 8004a10:	f8b7 8000 	ldrh.w	r8, [r7]
 8004a14:	f7ff fdd4 	bl	80045c0 <BSP_LCD_GetXSize>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	887b      	ldrh	r3, [r7, #2]
 8004a1c:	1ad1      	subs	r1, r2, r3
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <BSP_LCD_FillRect+0xa8>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	480b      	ldr	r0, [pc, #44]	@ (8004a50 <BSP_LCD_FillRect+0xac>)
 8004a24:	4613      	mov	r3, r2
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4403      	add	r3, r0
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	9100      	str	r1, [sp, #0]
 8004a34:	4643      	mov	r3, r8
 8004a36:	4632      	mov	r2, r6
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	f000 f9c2 	bl	8004dc4 <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 8004a40:	bf00      	nop
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a4a:	bf00      	nop
 8004a4c:	200091b8 	.word	0x200091b8
 8004a50:	200091bc 	.word	0x200091bc
 8004a54:	200090a0 	.word	0x200090a0

08004a58 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08e      	sub	sp, #56	@ 0x38
 8004a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	623b      	str	r3, [r7, #32]
 8004a62:	4b61      	ldr	r3, [pc, #388]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a66:	4a60      	ldr	r2, [pc, #384]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004a68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a6e:	4b5e      	ldr	r3, [pc, #376]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a76:	623b      	str	r3, [r7, #32]
 8004a78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a82:	4a59      	ldr	r2, [pc, #356]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004a84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a8a:	4b57      	ldr	r3, [pc, #348]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a92:	61fb      	str	r3, [r7, #28]
 8004a94:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a96:	2300      	movs	r3, #0
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	4b53      	ldr	r3, [pc, #332]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	4a52      	ldr	r2, [pc, #328]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aa6:	4b50      	ldr	r3, [pc, #320]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	4b4c      	ldr	r3, [pc, #304]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aba:	4a4b      	ldr	r2, [pc, #300]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004abc:	f043 0302 	orr.w	r3, r3, #2
 8004ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ac2:	4b49      	ldr	r3, [pc, #292]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	4b45      	ldr	r3, [pc, #276]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	4a44      	ldr	r2, [pc, #272]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004ad8:	f043 0304 	orr.w	r3, r3, #4
 8004adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ade:	4b42      	ldr	r3, [pc, #264]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	4b3e      	ldr	r3, [pc, #248]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	4a3d      	ldr	r2, [pc, #244]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004af4:	f043 0308 	orr.w	r3, r3, #8
 8004af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004afa:	4b3b      	ldr	r3, [pc, #236]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	4b37      	ldr	r3, [pc, #220]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0e:	4a36      	ldr	r2, [pc, #216]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004b10:	f043 0320 	orr.w	r3, r3, #32
 8004b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b16:	4b34      	ldr	r3, [pc, #208]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	4b30      	ldr	r3, [pc, #192]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b32:	4b2d      	ldr	r3, [pc, #180]	@ (8004be8 <BSP_LCD_MspInit+0x190>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8004b3e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004b44:	2302      	movs	r3, #2
 8004b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8004b50:	230e      	movs	r3, #14
 8004b52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4824      	ldr	r0, [pc, #144]	@ (8004bec <BSP_LCD_MspInit+0x194>)
 8004b5c:	f001 fcf2 	bl	8006544 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004b60:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8004b64:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4820      	ldr	r0, [pc, #128]	@ (8004bf0 <BSP_LCD_MspInit+0x198>)
 8004b6e:	f001 fce9 	bl	8006544 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004b72:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	481d      	ldr	r0, [pc, #116]	@ (8004bf4 <BSP_LCD_MspInit+0x19c>)
 8004b80:	f001 fce0 	bl	8006544 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004b84:	2348      	movs	r3, #72	@ 0x48
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	481a      	ldr	r0, [pc, #104]	@ (8004bf8 <BSP_LCD_MspInit+0x1a0>)
 8004b90:	f001 fcd8 	bl	8006544 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004b94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4816      	ldr	r0, [pc, #88]	@ (8004bfc <BSP_LCD_MspInit+0x1a4>)
 8004ba2:	f001 fccf 	bl	8006544 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004ba6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8004baa:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4813      	ldr	r0, [pc, #76]	@ (8004c00 <BSP_LCD_MspInit+0x1a8>)
 8004bb4:	f001 fcc6 	bl	8006544 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8004bbc:	2309      	movs	r3, #9
 8004bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	480a      	ldr	r0, [pc, #40]	@ (8004bf0 <BSP_LCD_MspInit+0x198>)
 8004bc8:	f001 fcbc 	bl	8006544 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004bcc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4809      	ldr	r0, [pc, #36]	@ (8004c00 <BSP_LCD_MspInit+0x1a8>)
 8004bda:	f001 fcb3 	bl	8006544 <HAL_GPIO_Init>
}
 8004bde:	bf00      	nop
 8004be0:	3738      	adds	r7, #56	@ 0x38
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40023800 	.word	0x40023800
 8004bec:	40020000 	.word	0x40020000
 8004bf0:	40020400 	.word	0x40020400
 8004bf4:	40020800 	.word	0x40020800
 8004bf8:	40020c00 	.word	0x40020c00
 8004bfc:	40021400 	.word	0x40021400
 8004c00:	40021800 	.word	0x40021800

08004c04 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004c04:	b5b0      	push	{r4, r5, r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	603a      	str	r2, [r7, #0]
 8004c0e:	80fb      	strh	r3, [r7, #6]
 8004c10:	460b      	mov	r3, r1
 8004c12:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004c14:	4b0c      	ldr	r3, [pc, #48]	@ (8004c48 <BSP_LCD_DrawPixel+0x44>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a0c      	ldr	r2, [pc, #48]	@ (8004c4c <BSP_LCD_DrawPixel+0x48>)
 8004c1a:	2134      	movs	r1, #52	@ 0x34
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	4413      	add	r3, r2
 8004c22:	335c      	adds	r3, #92	@ 0x5c
 8004c24:	681c      	ldr	r4, [r3, #0]
 8004c26:	88bd      	ldrh	r5, [r7, #4]
 8004c28:	f7ff fcca 	bl	80045c0 <BSP_LCD_GetXSize>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	fb03 f205 	mul.w	r2, r3, r5
 8004c32:	88fb      	ldrh	r3, [r7, #6]
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4423      	add	r3, r4
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6013      	str	r3, [r2, #0]
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bdb0      	pop	{r4, r5, r7, pc}
 8004c48:	200091b8 	.word	0x200091b8
 8004c4c:	200090a0 	.word	0x200090a0

08004c50 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	4603      	mov	r3, r0
 8004c58:	603a      	str	r2, [r7, #0]
 8004c5a:	80fb      	strh	r3, [r7, #6]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	2300      	movs	r3, #0
 8004c66:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004c6c:	4b53      	ldr	r3, [pc, #332]	@ (8004dbc <DrawChar+0x16c>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4953      	ldr	r1, [pc, #332]	@ (8004dc0 <DrawChar+0x170>)
 8004c72:	4613      	mov	r3, r2
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	88db      	ldrh	r3, [r3, #6]
 8004c82:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004c84:	4b4d      	ldr	r3, [pc, #308]	@ (8004dbc <DrawChar+0x16c>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	494d      	ldr	r1, [pc, #308]	@ (8004dc0 <DrawChar+0x170>)
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	3308      	adds	r3, #8
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	889b      	ldrh	r3, [r3, #4]
 8004c9a:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 8004c9c:	8a3b      	ldrh	r3, [r7, #16]
 8004c9e:	3307      	adds	r3, #7
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	da00      	bge.n	8004ca6 <DrawChar+0x56>
 8004ca4:	3307      	adds	r3, #7
 8004ca6:	10db      	asrs	r3, r3, #3
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	8a3b      	ldrh	r3, [r7, #16]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	e076      	b.n	8004daa <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8004cbc:	8a3b      	ldrh	r3, [r7, #16]
 8004cbe:	3307      	adds	r3, #7
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	da00      	bge.n	8004cc6 <DrawChar+0x76>
 8004cc4:	3307      	adds	r3, #7
 8004cc6:	10db      	asrs	r3, r3, #3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 8004cd6:	8a3b      	ldrh	r3, [r7, #16]
 8004cd8:	3307      	adds	r3, #7
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	da00      	bge.n	8004ce0 <DrawChar+0x90>
 8004cde:	3307      	adds	r3, #7
 8004ce0:	10db      	asrs	r3, r3, #3
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d002      	beq.n	8004cec <DrawChar+0x9c>
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d004      	beq.n	8004cf4 <DrawChar+0xa4>
 8004cea:	e00c      	b.n	8004d06 <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	617b      	str	r3, [r7, #20]
        break;
 8004cf2:	e016      	b.n	8004d22 <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	3201      	adds	r2, #1
 8004cfe:	7812      	ldrb	r2, [r2, #0]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
        break;
 8004d04:	e00d      	b.n	8004d22 <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	041a      	lsls	r2, r3, #16
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	4313      	orrs	r3, r2
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	3202      	adds	r2, #2
 8004d1a:	7812      	ldrb	r2, [r2, #0]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
        break;
 8004d20:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	e036      	b.n	8004d96 <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8004d28:	8a3a      	ldrh	r2, [r7, #16]
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	1ad2      	subs	r2, r2, r3
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	4413      	add	r3, r2
 8004d32:	3b01      	subs	r3, #1
 8004d34:	2201      	movs	r2, #1
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d012      	beq.n	8004d6a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	b298      	uxth	r0, r3
 8004d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dbc <DrawChar+0x16c>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	491b      	ldr	r1, [pc, #108]	@ (8004dc0 <DrawChar+0x170>)
 8004d54:	4613      	mov	r3, r2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	88bb      	ldrh	r3, [r7, #4]
 8004d62:	4619      	mov	r1, r3
 8004d64:	f7ff ff4e 	bl	8004c04 <BSP_LCD_DrawPixel>
 8004d68:	e012      	b.n	8004d90 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	4413      	add	r3, r2
 8004d72:	b298      	uxth	r0, r3
 8004d74:	4b11      	ldr	r3, [pc, #68]	@ (8004dbc <DrawChar+0x16c>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4911      	ldr	r1, [pc, #68]	@ (8004dc0 <DrawChar+0x170>)
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	3304      	adds	r3, #4
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	88bb      	ldrh	r3, [r7, #4]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	f7ff ff3a 	bl	8004c04 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	3301      	adds	r3, #1
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	8a3b      	ldrh	r3, [r7, #16]
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d3c4      	bcc.n	8004d28 <DrawChar+0xd8>
      }
    }
    Ypos++;
 8004d9e:	88bb      	ldrh	r3, [r7, #4]
 8004da0:	3301      	adds	r3, #1
 8004da2:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	3301      	adds	r3, #1
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	8a7b      	ldrh	r3, [r7, #18]
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d384      	bcc.n	8004cbc <DrawChar+0x6c>
  }
}
 8004db2:	bf00      	nop
 8004db4:	bf00      	nop
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	200091b8 	.word	0x200091b8
 8004dc0:	200091bc 	.word	0x200091bc

08004dc4 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004dd2:	4b16      	ldr	r3, [pc, #88]	@ (8004e2c <FillBuffer+0x68>)
 8004dd4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004dd8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004dda:	4b14      	ldr	r3, [pc, #80]	@ (8004e2c <FillBuffer+0x68>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8004de0:	4a12      	ldr	r2, [pc, #72]	@ (8004e2c <FillBuffer+0x68>)
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 8004de6:	4b11      	ldr	r3, [pc, #68]	@ (8004e2c <FillBuffer+0x68>)
 8004de8:	4a11      	ldr	r2, [pc, #68]	@ (8004e30 <FillBuffer+0x6c>)
 8004dea:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8004dec:	480f      	ldr	r0, [pc, #60]	@ (8004e2c <FillBuffer+0x68>)
 8004dee:	f000 fdf9 	bl	80059e4 <HAL_DMA2D_Init>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d115      	bne.n	8004e24 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8004df8:	68f9      	ldr	r1, [r7, #12]
 8004dfa:	480c      	ldr	r0, [pc, #48]	@ (8004e2c <FillBuffer+0x68>)
 8004dfc:	f001 f860 	bl	8005ec0 <HAL_DMA2D_ConfigLayer>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10e      	bne.n	8004e24 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69f9      	ldr	r1, [r7, #28]
 8004e10:	4806      	ldr	r0, [pc, #24]	@ (8004e2c <FillBuffer+0x68>)
 8004e12:	f000 fe30 	bl	8005a76 <HAL_DMA2D_Start>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d103      	bne.n	8004e24 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004e1c:	210a      	movs	r1, #10
 8004e1e:	4803      	ldr	r0, [pc, #12]	@ (8004e2c <FillBuffer+0x68>)
 8004e20:	f000 fe54 	bl	8005acc <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8004e24:	bf00      	nop
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20009148 	.word	0x20009148
 8004e30:	4002b000 	.word	0x4002b000

08004e34 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004e38:	4b29      	ldr	r3, [pc, #164]	@ (8004ee0 <BSP_SDRAM_Init+0xac>)
 8004e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ee4 <BSP_SDRAM_Init+0xb0>)
 8004e3c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ee8 <BSP_SDRAM_Init+0xb4>)
 8004e40:	2202      	movs	r2, #2
 8004e42:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004e44:	4b28      	ldr	r3, [pc, #160]	@ (8004ee8 <BSP_SDRAM_Init+0xb4>)
 8004e46:	2207      	movs	r2, #7
 8004e48:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004e4a:	4b27      	ldr	r3, [pc, #156]	@ (8004ee8 <BSP_SDRAM_Init+0xb4>)
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004e50:	4b25      	ldr	r3, [pc, #148]	@ (8004ee8 <BSP_SDRAM_Init+0xb4>)
 8004e52:	2207      	movs	r2, #7
 8004e54:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004e56:	4b24      	ldr	r3, [pc, #144]	@ (8004ee8 <BSP_SDRAM_Init+0xb4>)
 8004e58:	2202      	movs	r2, #2
 8004e5a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004e5c:	4b22      	ldr	r3, [pc, #136]	@ (8004ee8 <BSP_SDRAM_Init+0xb4>)
 8004e5e:	2202      	movs	r2, #2
 8004e60:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004e62:	4b21      	ldr	r3, [pc, #132]	@ (8004ee8 <BSP_SDRAM_Init+0xb4>)
 8004e64:	2202      	movs	r2, #2
 8004e66:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004e68:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee0 <BSP_SDRAM_Init+0xac>)
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ee0 <BSP_SDRAM_Init+0xac>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004e74:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee0 <BSP_SDRAM_Init+0xac>)
 8004e76:	2204      	movs	r2, #4
 8004e78:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004e7a:	4b19      	ldr	r3, [pc, #100]	@ (8004ee0 <BSP_SDRAM_Init+0xac>)
 8004e7c:	2210      	movs	r2, #16
 8004e7e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004e80:	4b17      	ldr	r3, [pc, #92]	@ (8004ee0 <BSP_SDRAM_Init+0xac>)
 8004e82:	2240      	movs	r2, #64	@ 0x40
 8004e84:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004e86:	4b16      	ldr	r3, [pc, #88]	@ (8004ee0 <BSP_SDRAM_Init+0xac>)
 8004e88:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004e8c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004e8e:	4b14      	ldr	r3, [pc, #80]	@ (8004ee0 <BSP_SDRAM_Init+0xac>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004e94:	4b12      	ldr	r3, [pc, #72]	@ (8004ee0 <BSP_SDRAM_Init+0xac>)
 8004e96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e9a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004e9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ee0 <BSP_SDRAM_Init+0xac>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee0 <BSP_SDRAM_Init+0xac>)
 8004ea4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ea8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004eaa:	2100      	movs	r1, #0
 8004eac:	480c      	ldr	r0, [pc, #48]	@ (8004ee0 <BSP_SDRAM_Init+0xac>)
 8004eae:	f000 f87f 	bl	8004fb0 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004eb2:	490d      	ldr	r1, [pc, #52]	@ (8004ee8 <BSP_SDRAM_Init+0xb4>)
 8004eb4:	480a      	ldr	r0, [pc, #40]	@ (8004ee0 <BSP_SDRAM_Init+0xac>)
 8004eb6:	f006 fa45 	bl	800b344 <HAL_SDRAM_Init>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <BSP_SDRAM_Init+0xb8>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004ec8:	4b08      	ldr	r3, [pc, #32]	@ (8004eec <BSP_SDRAM_Init+0xb8>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004ece:	f240 506a 	movw	r0, #1386	@ 0x56a
 8004ed2:	f000 f80d 	bl	8004ef0 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8004ed6:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <BSP_SDRAM_Init+0xb8>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200091d8 	.word	0x200091d8
 8004ee4:	a0000140 	.word	0xa0000140
 8004ee8:	2000920c 	.word	0x2000920c
 8004eec:	20000264 	.word	0x20000264

08004ef0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004efc:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004f02:	4b29      	ldr	r3, [pc, #164]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f04:	2208      	movs	r2, #8
 8004f06:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004f08:	4b27      	ldr	r3, [pc, #156]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004f0e:	4b26      	ldr	r3, [pc, #152]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004f14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f18:	4923      	ldr	r1, [pc, #140]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f1a:	4824      	ldr	r0, [pc, #144]	@ (8004fac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004f1c:	f006 fa46 	bl	800b3ac <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004f20:	2001      	movs	r0, #1
 8004f22:	f000 fa7f 	bl	8005424 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004f26:	4b20      	ldr	r3, [pc, #128]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f28:	2202      	movs	r2, #2
 8004f2a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f2e:	2208      	movs	r2, #8
 8004f30:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004f32:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004f38:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004f3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f42:	4919      	ldr	r1, [pc, #100]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f44:	4819      	ldr	r0, [pc, #100]	@ (8004fac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004f46:	f006 fa31 	bl	800b3ac <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004f4a:	4b17      	ldr	r3, [pc, #92]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004f50:	4b15      	ldr	r3, [pc, #84]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f52:	2208      	movs	r2, #8
 8004f54:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004f56:	4b14      	ldr	r3, [pc, #80]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f58:	2204      	movs	r2, #4
 8004f5a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004f5c:	4b12      	ldr	r3, [pc, #72]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004f62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f66:	4910      	ldr	r1, [pc, #64]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f68:	4810      	ldr	r0, [pc, #64]	@ (8004fac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004f6a:	f006 fa1f 	bl	800b3ac <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004f6e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8004f72:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004f74:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f76:	2204      	movs	r2, #4
 8004f78:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004f80:	4b09      	ldr	r3, [pc, #36]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4a07      	ldr	r2, [pc, #28]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f8a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004f8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f90:	4905      	ldr	r1, [pc, #20]	@ (8004fa8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004f92:	4806      	ldr	r0, [pc, #24]	@ (8004fac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004f94:	f006 fa0a 	bl	800b3ac <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	4804      	ldr	r0, [pc, #16]	@ (8004fac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004f9c:	f006 fa3b 	bl	800b416 <HAL_SDRAM_ProgramRefreshRate>
}
 8004fa0:	bf00      	nop
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20009228 	.word	0x20009228
 8004fac:	200091d8 	.word	0x200091d8

08004fb0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b090      	sub	sp, #64	@ 0x40
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80ec 	beq.w	800519a <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fc6:	4b77      	ldr	r3, [pc, #476]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fca:	4a76      	ldr	r2, [pc, #472]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	6393      	str	r3, [r2, #56]	@ 0x38
 8004fd2:	4b74      	ldr	r3, [pc, #464]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe2:	4b70      	ldr	r3, [pc, #448]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe6:	4a6f      	ldr	r2, [pc, #444]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004fe8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fee:	4b6d      	ldr	r3, [pc, #436]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	4b69      	ldr	r3, [pc, #420]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8005000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005002:	4a68      	ldr	r2, [pc, #416]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8005004:	f043 0302 	orr.w	r3, r3, #2
 8005008:	6313      	str	r3, [r2, #48]	@ 0x30
 800500a:	4b66      	ldr	r3, [pc, #408]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	623b      	str	r3, [r7, #32]
 8005014:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	4b62      	ldr	r3, [pc, #392]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501e:	4a61      	ldr	r2, [pc, #388]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8005020:	f043 0304 	orr.w	r3, r3, #4
 8005024:	6313      	str	r3, [r2, #48]	@ 0x30
 8005026:	4b5f      	ldr	r3, [pc, #380]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	61fb      	str	r3, [r7, #28]
 8005030:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005032:	2300      	movs	r3, #0
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	4b5b      	ldr	r3, [pc, #364]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8005038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503a:	4a5a      	ldr	r2, [pc, #360]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 800503c:	f043 0308 	orr.w	r3, r3, #8
 8005040:	6313      	str	r3, [r2, #48]	@ 0x30
 8005042:	4b58      	ldr	r3, [pc, #352]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	61bb      	str	r3, [r7, #24]
 800504c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	4b54      	ldr	r3, [pc, #336]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8005054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005056:	4a53      	ldr	r2, [pc, #332]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8005058:	f043 0310 	orr.w	r3, r3, #16
 800505c:	6313      	str	r3, [r2, #48]	@ 0x30
 800505e:	4b51      	ldr	r3, [pc, #324]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8005060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	4b4d      	ldr	r3, [pc, #308]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005072:	4a4c      	ldr	r2, [pc, #304]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8005074:	f043 0320 	orr.w	r3, r3, #32
 8005078:	6313      	str	r3, [r2, #48]	@ 0x30
 800507a:	4b4a      	ldr	r3, [pc, #296]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	4b46      	ldr	r3, [pc, #280]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508e:	4a45      	ldr	r2, [pc, #276]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8005090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005094:	6313      	str	r3, [r2, #48]	@ 0x30
 8005096:	4b43      	ldr	r3, [pc, #268]	@ (80051a4 <BSP_SDRAM_MspInit+0x1f4>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80050a2:	2302      	movs	r3, #2
 80050a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80050a6:	2302      	movs	r3, #2
 80050a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80050ae:	230c      	movs	r3, #12
 80050b0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80050b2:	2360      	movs	r3, #96	@ 0x60
 80050b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80050b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050ba:	4619      	mov	r1, r3
 80050bc:	483a      	ldr	r0, [pc, #232]	@ (80051a8 <BSP_SDRAM_MspInit+0x1f8>)
 80050be:	f001 fa41 	bl	8006544 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 80050c2:	2301      	movs	r3, #1
 80050c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80050c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050ca:	4619      	mov	r1, r3
 80050cc:	4837      	ldr	r0, [pc, #220]	@ (80051ac <BSP_SDRAM_MspInit+0x1fc>)
 80050ce:	f001 fa39 	bl	8006544 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80050d2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80050d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80050d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050dc:	4619      	mov	r1, r3
 80050de:	4834      	ldr	r0, [pc, #208]	@ (80051b0 <BSP_SDRAM_MspInit+0x200>)
 80050e0:	f001 fa30 	bl	8006544 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80050e4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80050e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80050ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80050ee:	4619      	mov	r1, r3
 80050f0:	4830      	ldr	r0, [pc, #192]	@ (80051b4 <BSP_SDRAM_MspInit+0x204>)
 80050f2:	f001 fa27 	bl	8006544 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 80050f6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80050fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80050fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005100:	4619      	mov	r1, r3
 8005102:	482d      	ldr	r0, [pc, #180]	@ (80051b8 <BSP_SDRAM_MspInit+0x208>)
 8005104:	f001 fa1e 	bl	8006544 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8005108:	f248 1333 	movw	r3, #33075	@ 0x8133
 800510c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800510e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005112:	4619      	mov	r1, r3
 8005114:	4829      	ldr	r0, [pc, #164]	@ (80051bc <BSP_SDRAM_MspInit+0x20c>)
 8005116:	f001 fa15 	bl	8006544 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800511a:	4b29      	ldr	r3, [pc, #164]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 800511c:	2200      	movs	r2, #0
 800511e:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005120:	4b27      	ldr	r3, [pc, #156]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 8005122:	2280      	movs	r2, #128	@ 0x80
 8005124:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005126:	4b26      	ldr	r3, [pc, #152]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 8005128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800512c:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800512e:	4b24      	ldr	r3, [pc, #144]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 8005130:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005134:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005136:	4b22      	ldr	r3, [pc, #136]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 8005138:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800513c:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800513e:	4b20      	ldr	r3, [pc, #128]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 8005140:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005144:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8005146:	4b1e      	ldr	r3, [pc, #120]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 8005148:	2200      	movs	r2, #0
 800514a:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800514c:	4b1c      	ldr	r3, [pc, #112]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 800514e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005152:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8005154:	4b1a      	ldr	r3, [pc, #104]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 8005156:	2200      	movs	r2, #0
 8005158:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800515a:	4b19      	ldr	r3, [pc, #100]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 800515c:	2203      	movs	r2, #3
 800515e:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005160:	4b17      	ldr	r3, [pc, #92]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 8005162:	2200      	movs	r2, #0
 8005164:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8005166:	4b16      	ldr	r3, [pc, #88]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800516c:	4b14      	ldr	r3, [pc, #80]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 800516e:	4a15      	ldr	r2, [pc, #84]	@ (80051c4 <BSP_SDRAM_MspInit+0x214>)
 8005170:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a12      	ldr	r2, [pc, #72]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 8005176:	631a      	str	r2, [r3, #48]	@ 0x30
 8005178:	4a11      	ldr	r2, [pc, #68]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 800517e:	4810      	ldr	r0, [pc, #64]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 8005180:	f000 fb20 	bl	80057c4 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8005184:	480e      	ldr	r0, [pc, #56]	@ (80051c0 <BSP_SDRAM_MspInit+0x210>)
 8005186:	f000 fa6f 	bl	8005668 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800518a:	2200      	movs	r2, #0
 800518c:	210f      	movs	r1, #15
 800518e:	2038      	movs	r0, #56	@ 0x38
 8005190:	f000 fa24 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005194:	2038      	movs	r0, #56	@ 0x38
 8005196:	f000 fa3d 	bl	8005614 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800519a:	bf00      	nop
 800519c:	3740      	adds	r7, #64	@ 0x40
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40023800 	.word	0x40023800
 80051a8:	40020400 	.word	0x40020400
 80051ac:	40020800 	.word	0x40020800
 80051b0:	40020c00 	.word	0x40020c00
 80051b4:	40021000 	.word	0x40021000
 80051b8:	40021400 	.word	0x40021400
 80051bc:	40021800 	.word	0x40021800
 80051c0:	20009238 	.word	0x20009238
 80051c4:	40026410 	.word	0x40026410

080051c8 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	460a      	mov	r2, r1
 80051d2:	80fb      	strh	r3, [r7, #6]
 80051d4:	4613      	mov	r3, r2
 80051d6:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80051dc:	4a13      	ldr	r2, [pc, #76]	@ (800522c <BSP_TS_Init+0x64>)
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80051e2:	4a13      	ldr	r2, [pc, #76]	@ (8005230 <BSP_TS_Init+0x68>)
 80051e4:	88bb      	ldrh	r3, [r7, #4]
 80051e6:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80051e8:	4b12      	ldr	r3, [pc, #72]	@ (8005234 <BSP_TS_Init+0x6c>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2082      	movs	r0, #130	@ 0x82
 80051ee:	4798      	blx	r3
 80051f0:	4603      	mov	r3, r0
 80051f2:	461a      	mov	r2, r3
 80051f4:	f640 0311 	movw	r3, #2065	@ 0x811
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d104      	bne.n	8005206 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80051fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005238 <BSP_TS_Init+0x70>)
 80051fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005234 <BSP_TS_Init+0x6c>)
 8005200:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d109      	bne.n	8005220 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800520c:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <BSP_TS_Init+0x70>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2082      	movs	r0, #130	@ 0x82
 8005214:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8005216:	4b08      	ldr	r3, [pc, #32]	@ (8005238 <BSP_TS_Init+0x70>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2082      	movs	r0, #130	@ 0x82
 800521e:	4798      	blx	r3
  }

  return ret;
 8005220:	7bfb      	ldrb	r3, [r7, #15]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	2000929c 	.word	0x2000929c
 8005230:	2000929e 	.word	0x2000929e
 8005234:	2000021c 	.word	0x2000021c
 8005238:	20009298 	.word	0x20009298

0800523c <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef *TsState)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff, x, y, xr, yr;

  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8005244:	4b4f      	ldr	r3, [pc, #316]	@ (8005384 <BSP_TS_GetState+0x148>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	2082      	movs	r0, #130	@ 0x82
 800524c:	4798      	blx	r3
 800524e:	4603      	mov	r3, r0
 8005250:	461a      	mov	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	801a      	strh	r2, [r3, #0]

  if (TsState->TouchDetected)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 808d 	beq.w	800537a <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8005260:	4b48      	ldr	r3, [pc, #288]	@ (8005384 <BSP_TS_GetState+0x148>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f107 020c 	add.w	r2, r7, #12
 800526a:	f107 010e 	add.w	r1, r7, #14
 800526e:	2082      	movs	r0, #130	@ 0x82
 8005270:	4798      	blx	r3
    /* Y value first correction */
    y = 3700 - y;
#else

    /* Y value first correction */
    y -= 360;
 8005272:	89bb      	ldrh	r3, [r7, #12]
 8005274:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005278:	b29b      	uxth	r3, r3
 800527a:	81bb      	strh	r3, [r7, #12]

#endif

    /* Y value second correction */
    yr = y / 11;
 800527c:	89bb      	ldrh	r3, [r7, #12]
 800527e:	4a42      	ldr	r2, [pc, #264]	@ (8005388 <BSP_TS_GetState+0x14c>)
 8005280:	fba2 2303 	umull	r2, r3, r2, r3
 8005284:	08db      	lsrs	r3, r3, #3
 8005286:	82bb      	strh	r3, [r7, #20]

    /* Return y position value */
    if (yr <= 0)
 8005288:	8abb      	ldrh	r3, [r7, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	82bb      	strh	r3, [r7, #20]
 8005292:	e008      	b.n	80052a6 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8005294:	4b3d      	ldr	r3, [pc, #244]	@ (800538c <BSP_TS_GetState+0x150>)
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	8aba      	ldrh	r2, [r7, #20]
 800529a:	429a      	cmp	r2, r3
 800529c:	d903      	bls.n	80052a6 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 800529e:	4b3b      	ldr	r3, [pc, #236]	@ (800538c <BSP_TS_GetState+0x150>)
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80052a6:	8abb      	ldrh	r3, [r7, #20]
 80052a8:	81bb      	strh	r3, [r7, #12]

    /* X value first correction */
    if (x <= 3000)
 80052aa:	89fb      	ldrh	r3, [r7, #14]
 80052ac:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d806      	bhi.n	80052c2 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80052b4:	89fb      	ldrh	r3, [r7, #14]
 80052b6:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 80052ba:	330e      	adds	r3, #14
 80052bc:	b29b      	uxth	r3, r3
 80052be:	81fb      	strh	r3, [r7, #14]
 80052c0:	e005      	b.n	80052ce <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80052c2:	89fb      	ldrh	r3, [r7, #14]
 80052c4:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80052c8:	3308      	adds	r3, #8
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	81fb      	strh	r3, [r7, #14]
    }

    /* X value second correction */
    xr = x / 15;
 80052ce:	89fb      	ldrh	r3, [r7, #14]
 80052d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005390 <BSP_TS_GetState+0x154>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	08db      	lsrs	r3, r3, #3
 80052d8:	82fb      	strh	r3, [r7, #22]

    /* Return X position value */
    if (xr <= 0)
 80052da:	8afb      	ldrh	r3, [r7, #22]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d102      	bne.n	80052e6 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	82fb      	strh	r3, [r7, #22]
 80052e4:	e008      	b.n	80052f8 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80052e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005394 <BSP_TS_GetState+0x158>)
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	8afa      	ldrh	r2, [r7, #22]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d903      	bls.n	80052f8 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 80052f0:	4b28      	ldr	r3, [pc, #160]	@ (8005394 <BSP_TS_GetState+0x158>)
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	82fb      	strh	r3, [r7, #22]
    }
    else
    {}

    x = xr;
 80052f8:	8afb      	ldrh	r3, [r7, #22]
 80052fa:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x ? (x - _x): (_x - x);
 80052fc:	89fb      	ldrh	r3, [r7, #14]
 80052fe:	461a      	mov	r2, r3
 8005300:	4b25      	ldr	r3, [pc, #148]	@ (8005398 <BSP_TS_GetState+0x15c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d906      	bls.n	8005316 <BSP_TS_GetState+0xda>
 8005308:	89fa      	ldrh	r2, [r7, #14]
 800530a:	4b23      	ldr	r3, [pc, #140]	@ (8005398 <BSP_TS_GetState+0x15c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	b29b      	uxth	r3, r3
 8005314:	e005      	b.n	8005322 <BSP_TS_GetState+0xe6>
 8005316:	4b20      	ldr	r3, [pc, #128]	@ (8005398 <BSP_TS_GetState+0x15c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	b29a      	uxth	r2, r3
 800531c:	89fb      	ldrh	r3, [r7, #14]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	b29b      	uxth	r3, r3
 8005322:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y ? (y - _y) : (_y - y);
 8005324:	89bb      	ldrh	r3, [r7, #12]
 8005326:	461a      	mov	r2, r3
 8005328:	4b1c      	ldr	r3, [pc, #112]	@ (800539c <BSP_TS_GetState+0x160>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d906      	bls.n	800533e <BSP_TS_GetState+0x102>
 8005330:	89ba      	ldrh	r2, [r7, #12]
 8005332:	4b1a      	ldr	r3, [pc, #104]	@ (800539c <BSP_TS_GetState+0x160>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	b29b      	uxth	r3, r3
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	b29b      	uxth	r3, r3
 800533c:	e005      	b.n	800534a <BSP_TS_GetState+0x10e>
 800533e:	4b17      	ldr	r3, [pc, #92]	@ (800539c <BSP_TS_GetState+0x160>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	b29a      	uxth	r2, r3
 8005344:	89bb      	ldrh	r3, [r7, #12]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	b29b      	uxth	r3, r3
 800534a:	823b      	strh	r3, [r7, #16]

    if (xDiff + yDiff > 5)
 800534c:	8a7a      	ldrh	r2, [r7, #18]
 800534e:	8a3b      	ldrh	r3, [r7, #16]
 8005350:	4413      	add	r3, r2
 8005352:	2b05      	cmp	r3, #5
 8005354:	dd07      	ble.n	8005366 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8005356:	89fb      	ldrh	r3, [r7, #14]
 8005358:	461a      	mov	r2, r3
 800535a:	4b0f      	ldr	r3, [pc, #60]	@ (8005398 <BSP_TS_GetState+0x15c>)
 800535c:	601a      	str	r2, [r3, #0]
      _y = y;
 800535e:	89bb      	ldrh	r3, [r7, #12]
 8005360:	461a      	mov	r2, r3
 8005362:	4b0e      	ldr	r3, [pc, #56]	@ (800539c <BSP_TS_GetState+0x160>)
 8005364:	601a      	str	r2, [r3, #0]
    }

    /* Update the X position */
    TsState->X = _x;
 8005366:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <BSP_TS_GetState+0x15c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	b29a      	uxth	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	805a      	strh	r2, [r3, #2]

    /* Update the Y position */
    TsState->Y = _y;
 8005370:	4b0a      	ldr	r3, [pc, #40]	@ (800539c <BSP_TS_GetState+0x160>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	809a      	strh	r2, [r3, #4]
  }
}
 800537a:	bf00      	nop
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20009298 	.word	0x20009298
 8005388:	ba2e8ba3 	.word	0xba2e8ba3
 800538c:	2000929e 	.word	0x2000929e
 8005390:	88888889 	.word	0x88888889
 8005394:	2000929c 	.word	0x2000929c
 8005398:	200092a0 	.word	0x200092a0
 800539c:	200092a4 	.word	0x200092a4

080053a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053a4:	4b0e      	ldr	r3, [pc, #56]	@ (80053e0 <HAL_Init+0x40>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a0d      	ldr	r2, [pc, #52]	@ (80053e0 <HAL_Init+0x40>)
 80053aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053b0:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <HAL_Init+0x40>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a0a      	ldr	r2, [pc, #40]	@ (80053e0 <HAL_Init+0x40>)
 80053b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053bc:	4b08      	ldr	r3, [pc, #32]	@ (80053e0 <HAL_Init+0x40>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a07      	ldr	r2, [pc, #28]	@ (80053e0 <HAL_Init+0x40>)
 80053c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053c8:	2003      	movs	r0, #3
 80053ca:	f000 f8fc 	bl	80055c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053ce:	200f      	movs	r0, #15
 80053d0:	f7fd ff4e 	bl	8003270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053d4:	f7fd fb32 	bl	8002a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40023c00 	.word	0x40023c00

080053e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053e8:	4b06      	ldr	r3, [pc, #24]	@ (8005404 <HAL_IncTick+0x20>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	461a      	mov	r2, r3
 80053ee:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <HAL_IncTick+0x24>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4413      	add	r3, r2
 80053f4:	4a04      	ldr	r2, [pc, #16]	@ (8005408 <HAL_IncTick+0x24>)
 80053f6:	6013      	str	r3, [r2, #0]
}
 80053f8:	bf00      	nop
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	2000026c 	.word	0x2000026c
 8005408:	200092a8 	.word	0x200092a8

0800540c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return uwTick;
 8005410:	4b03      	ldr	r3, [pc, #12]	@ (8005420 <HAL_GetTick+0x14>)
 8005412:	681b      	ldr	r3, [r3, #0]
}
 8005414:	4618      	mov	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	200092a8 	.word	0x200092a8

08005424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800542c:	f7ff ffee 	bl	800540c <HAL_GetTick>
 8005430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543c:	d005      	beq.n	800544a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800543e:	4b0a      	ldr	r3, [pc, #40]	@ (8005468 <HAL_Delay+0x44>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800544a:	bf00      	nop
 800544c:	f7ff ffde 	bl	800540c <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	429a      	cmp	r2, r3
 800545a:	d8f7      	bhi.n	800544c <HAL_Delay+0x28>
  {
  }
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	2000026c 	.word	0x2000026c

0800546c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800547c:	4b0c      	ldr	r3, [pc, #48]	@ (80054b0 <__NVIC_SetPriorityGrouping+0x44>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005488:	4013      	ands	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005494:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800549c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800549e:	4a04      	ldr	r2, [pc, #16]	@ (80054b0 <__NVIC_SetPriorityGrouping+0x44>)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	60d3      	str	r3, [r2, #12]
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	e000ed00 	.word	0xe000ed00

080054b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054b8:	4b04      	ldr	r3, [pc, #16]	@ (80054cc <__NVIC_GetPriorityGrouping+0x18>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	0a1b      	lsrs	r3, r3, #8
 80054be:	f003 0307 	and.w	r3, r3, #7
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	e000ed00 	.word	0xe000ed00

080054d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	db0b      	blt.n	80054fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	f003 021f 	and.w	r2, r3, #31
 80054e8:	4907      	ldr	r1, [pc, #28]	@ (8005508 <__NVIC_EnableIRQ+0x38>)
 80054ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	2001      	movs	r0, #1
 80054f2:	fa00 f202 	lsl.w	r2, r0, r2
 80054f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	e000e100 	.word	0xe000e100

0800550c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	6039      	str	r1, [r7, #0]
 8005516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551c:	2b00      	cmp	r3, #0
 800551e:	db0a      	blt.n	8005536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	b2da      	uxtb	r2, r3
 8005524:	490c      	ldr	r1, [pc, #48]	@ (8005558 <__NVIC_SetPriority+0x4c>)
 8005526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552a:	0112      	lsls	r2, r2, #4
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	440b      	add	r3, r1
 8005530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005534:	e00a      	b.n	800554c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	b2da      	uxtb	r2, r3
 800553a:	4908      	ldr	r1, [pc, #32]	@ (800555c <__NVIC_SetPriority+0x50>)
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	3b04      	subs	r3, #4
 8005544:	0112      	lsls	r2, r2, #4
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	440b      	add	r3, r1
 800554a:	761a      	strb	r2, [r3, #24]
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	e000e100 	.word	0xe000e100
 800555c:	e000ed00 	.word	0xe000ed00

08005560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005560:	b480      	push	{r7}
 8005562:	b089      	sub	sp, #36	@ 0x24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f1c3 0307 	rsb	r3, r3, #7
 800557a:	2b04      	cmp	r3, #4
 800557c:	bf28      	it	cs
 800557e:	2304      	movcs	r3, #4
 8005580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	3304      	adds	r3, #4
 8005586:	2b06      	cmp	r3, #6
 8005588:	d902      	bls.n	8005590 <NVIC_EncodePriority+0x30>
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	3b03      	subs	r3, #3
 800558e:	e000      	b.n	8005592 <NVIC_EncodePriority+0x32>
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005594:	f04f 32ff 	mov.w	r2, #4294967295
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43da      	mvns	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	401a      	ands	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055a8:	f04f 31ff 	mov.w	r1, #4294967295
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	fa01 f303 	lsl.w	r3, r1, r3
 80055b2:	43d9      	mvns	r1, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055b8:	4313      	orrs	r3, r2
         );
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3724      	adds	r7, #36	@ 0x24
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff ff4c 	bl	800546c <__NVIC_SetPriorityGrouping>
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055ee:	f7ff ff61 	bl	80054b4 <__NVIC_GetPriorityGrouping>
 80055f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	6978      	ldr	r0, [r7, #20]
 80055fa:	f7ff ffb1 	bl	8005560 <NVIC_EncodePriority>
 80055fe:	4602      	mov	r2, r0
 8005600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff ff80 	bl	800550c <__NVIC_SetPriority>
}
 800560c:	bf00      	nop
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	4603      	mov	r3, r0
 800561c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800561e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff ff54 	bl	80054d0 <__NVIC_EnableIRQ>
}
 8005628:	bf00      	nop
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e00e      	b.n	8005660 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	795b      	ldrb	r3, [r3, #5]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d105      	bne.n	8005658 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fd fa1a 	bl	8002a8c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005674:	f7ff feca 	bl	800540c <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e099      	b.n	80057b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0201 	bic.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056a4:	e00f      	b.n	80056c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056a6:	f7ff feb1 	bl	800540c <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b05      	cmp	r3, #5
 80056b2:	d908      	bls.n	80056c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2220      	movs	r2, #32
 80056b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2203      	movs	r2, #3
 80056be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e078      	b.n	80057b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1e8      	bne.n	80056a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4b38      	ldr	r3, [pc, #224]	@ (80057c0 <HAL_DMA_Init+0x158>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800570a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571c:	2b04      	cmp	r3, #4
 800571e:	d107      	bne.n	8005730 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005728:	4313      	orrs	r3, r2
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f023 0307 	bic.w	r3, r3, #7
 8005746:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005756:	2b04      	cmp	r3, #4
 8005758:	d117      	bne.n	800578a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00e      	beq.n	800578a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f8bd 	bl	80058ec <DMA_CheckFifoParam>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d008      	beq.n	800578a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2240      	movs	r2, #64	@ 0x40
 800577c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005786:	2301      	movs	r3, #1
 8005788:	e016      	b.n	80057b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f874 	bl	8005880 <DMA_CalcBaseAndBitshift>
 8005798:	4603      	mov	r3, r0
 800579a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a0:	223f      	movs	r2, #63	@ 0x3f
 80057a2:	409a      	lsls	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	f010803f 	.word	0xf010803f

080057c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e050      	b.n	8005878 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d101      	bne.n	80057e6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80057e2:	2302      	movs	r3, #2
 80057e4:	e048      	b.n	8005878 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0201 	bic.w	r2, r2, #1
 80057f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2200      	movs	r2, #0
 8005804:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2200      	movs	r2, #0
 800580c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2221      	movs	r2, #33	@ 0x21
 8005824:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f82a 	bl	8005880 <DMA_CalcBaseAndBitshift>
 800582c:	4603      	mov	r3, r0
 800582e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005858:	223f      	movs	r2, #63	@ 0x3f
 800585a:	409a      	lsls	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	3b10      	subs	r3, #16
 8005890:	4a14      	ldr	r2, [pc, #80]	@ (80058e4 <DMA_CalcBaseAndBitshift+0x64>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	091b      	lsrs	r3, r3, #4
 8005898:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800589a:	4a13      	ldr	r2, [pc, #76]	@ (80058e8 <DMA_CalcBaseAndBitshift+0x68>)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d909      	bls.n	80058c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	1d1a      	adds	r2, r3, #4
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	659a      	str	r2, [r3, #88]	@ 0x58
 80058c0:	e007      	b.n	80058d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80058ca:	f023 0303 	bic.w	r3, r3, #3
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	aaaaaaab 	.word	0xaaaaaaab
 80058e8:	080169b0 	.word	0x080169b0

080058ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d11f      	bne.n	8005946 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d856      	bhi.n	80059ba <DMA_CheckFifoParam+0xce>
 800590c:	a201      	add	r2, pc, #4	@ (adr r2, 8005914 <DMA_CheckFifoParam+0x28>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005925 	.word	0x08005925
 8005918:	08005937 	.word	0x08005937
 800591c:	08005925 	.word	0x08005925
 8005920:	080059bb 	.word	0x080059bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005928:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d046      	beq.n	80059be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005934:	e043      	b.n	80059be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800593e:	d140      	bne.n	80059c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005944:	e03d      	b.n	80059c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800594e:	d121      	bne.n	8005994 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b03      	cmp	r3, #3
 8005954:	d837      	bhi.n	80059c6 <DMA_CheckFifoParam+0xda>
 8005956:	a201      	add	r2, pc, #4	@ (adr r2, 800595c <DMA_CheckFifoParam+0x70>)
 8005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595c:	0800596d 	.word	0x0800596d
 8005960:	08005973 	.word	0x08005973
 8005964:	0800596d 	.word	0x0800596d
 8005968:	08005985 	.word	0x08005985
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
      break;
 8005970:	e030      	b.n	80059d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005976:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d025      	beq.n	80059ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005982:	e022      	b.n	80059ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005988:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800598c:	d11f      	bne.n	80059ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005992:	e01c      	b.n	80059ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b02      	cmp	r3, #2
 8005998:	d903      	bls.n	80059a2 <DMA_CheckFifoParam+0xb6>
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2b03      	cmp	r3, #3
 800599e:	d003      	beq.n	80059a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80059a0:	e018      	b.n	80059d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	73fb      	strb	r3, [r7, #15]
      break;
 80059a6:	e015      	b.n	80059d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00e      	beq.n	80059d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	73fb      	strb	r3, [r7, #15]
      break;
 80059b8:	e00b      	b.n	80059d2 <DMA_CheckFifoParam+0xe6>
      break;
 80059ba:	bf00      	nop
 80059bc:	e00a      	b.n	80059d4 <DMA_CheckFifoParam+0xe8>
      break;
 80059be:	bf00      	nop
 80059c0:	e008      	b.n	80059d4 <DMA_CheckFifoParam+0xe8>
      break;
 80059c2:	bf00      	nop
 80059c4:	e006      	b.n	80059d4 <DMA_CheckFifoParam+0xe8>
      break;
 80059c6:	bf00      	nop
 80059c8:	e004      	b.n	80059d4 <DMA_CheckFifoParam+0xe8>
      break;
 80059ca:	bf00      	nop
 80059cc:	e002      	b.n	80059d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80059ce:	bf00      	nop
 80059d0:	e000      	b.n	80059d4 <DMA_CheckFifoParam+0xe8>
      break;
 80059d2:	bf00      	nop
    }
  } 
  
  return status; 
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop

080059e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e03b      	b.n	8005a6e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fd f860 	bl	8002ad0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a34:	f023 0107 	bic.w	r1, r3, #7
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005a4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	68d1      	ldr	r1, [r2, #12]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b086      	sub	sp, #24
 8005a7a:	af02      	add	r7, sp, #8
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	607a      	str	r2, [r7, #4]
 8005a82:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_DMA2D_Start+0x1c>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e018      	b.n	8005ac4 <HAL_DMA2D_Start+0x4e>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fa99 	bl	8005fe4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d056      	beq.n	8005b96 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae8:	f7ff fc90 	bl	800540c <HAL_GetTick>
 8005aec:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005aee:	e04b      	b.n	8005b88 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d023      	beq.n	8005b4a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b10:	f043 0202 	orr.w	r2, r3, #2
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b26:	f043 0201 	orr.w	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2221      	movs	r2, #33	@ 0x21
 8005b34:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e0a5      	b.n	8005c96 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d01a      	beq.n	8005b88 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b52:	f7ff fc5b 	bl	800540c <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <HAL_DMA2D_PollForTransfer+0x9c>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10f      	bne.n	8005b88 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6c:	f043 0220 	orr.w	r2, r3, #32
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2203      	movs	r2, #3
 8005b78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e086      	b.n	8005c96 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0ac      	beq.n	8005af0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d061      	beq.n	8005c7c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bb8:	f7ff fc28 	bl	800540c <HAL_GetTick>
 8005bbc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005bbe:	e056      	b.n	8005c6e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d02e      	beq.n	8005c30 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be0:	f043 0204 	orr.w	r2, r3, #4
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d005      	beq.n	8005bfe <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf6:	f043 0202 	orr.w	r2, r3, #2
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0c:	f043 0201 	orr.w	r2, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2229      	movs	r2, #41	@ 0x29
 8005c1a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2204      	movs	r2, #4
 8005c20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e032      	b.n	8005c96 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c36:	d01a      	beq.n	8005c6e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c38:	f7ff fbe8 	bl	800540c <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d302      	bcc.n	8005c4e <HAL_DMA2D_PollForTransfer+0x182>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10f      	bne.n	8005c6e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c52:	f043 0220 	orr.w	r2, r3, #32
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e013      	b.n	8005c96 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0a1      	beq.n	8005bc0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2212      	movs	r2, #18
 8005c82:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d026      	beq.n	8005d0e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d021      	beq.n	8005d0e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cd8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cde:	f043 0201 	orr.w	r2, r3, #1
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2201      	movs	r2, #1
 8005cec:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d026      	beq.n	8005d66 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d021      	beq.n	8005d66 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d30:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2220      	movs	r2, #32
 8005d38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3e:	f043 0202 	orr.w	r2, r3, #2
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2204      	movs	r2, #4
 8005d4a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d026      	beq.n	8005dbe <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d021      	beq.n	8005dbe <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d88:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2208      	movs	r2, #8
 8005d90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d96:	f043 0204 	orr.w	r2, r3, #4
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2204      	movs	r2, #4
 8005da2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d013      	beq.n	8005df0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00e      	beq.n	8005df0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005de0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2204      	movs	r2, #4
 8005de8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f853 	bl	8005e96 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d024      	beq.n	8005e44 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01f      	beq.n	8005e44 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005e12:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 0310 	and.w	r3, r3, #16
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01f      	beq.n	8005e8e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d01a      	beq.n	8005e8e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e66:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2210      	movs	r2, #16
 8005e6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f80e 	bl	8005eaa <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005e8e:	bf00      	nop
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_DMA2D_ConfigLayer+0x20>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e079      	b.n	8005fd4 <HAL_DMA2D_ConfigLayer+0x114>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	3318      	adds	r3, #24
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	4413      	add	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	041b      	lsls	r3, r3, #16
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005f0a:	4b35      	ldr	r3, [pc, #212]	@ (8005fe0 <HAL_DMA2D_ConfigLayer+0x120>)
 8005f0c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b0a      	cmp	r3, #10
 8005f14:	d003      	beq.n	8005f1e <HAL_DMA2D_ConfigLayer+0x5e>
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b09      	cmp	r3, #9
 8005f1c:	d107      	bne.n	8005f2e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e005      	b.n	8005f3a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	061b      	lsls	r3, r3, #24
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d120      	bne.n	8005f82 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	ea02 0103 	and.w	r1, r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b0a      	cmp	r3, #10
 8005f68:	d003      	beq.n	8005f72 <HAL_DMA2D_ConfigLayer+0xb2>
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b09      	cmp	r3, #9
 8005f70:	d127      	bne.n	8005fc2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005f7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f80:	e01f      	b.n	8005fc2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	ea02 0103 	and.w	r1, r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b0a      	cmp	r3, #10
 8005faa:	d003      	beq.n	8005fb4 <HAL_DMA2D_ConfigLayer+0xf4>
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b09      	cmp	r3, #9
 8005fb2:	d106      	bne.n	8005fc2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005fc0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	ff03000f 	.word	0xff03000f

08005fe4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b08b      	sub	sp, #44	@ 0x2c
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	041a      	lsls	r2, r3, #16
 8006000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006002:	431a      	orrs	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800601c:	d174      	bne.n	8006108 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006024:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800602c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006034:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d108      	bne.n	8006056 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	431a      	orrs	r2, r3
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	4313      	orrs	r3, r2
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24
 8006054:	e053      	b.n	80060fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d106      	bne.n	800606c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	4313      	orrs	r3, r2
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	627b      	str	r3, [r7, #36]	@ 0x24
 800606a:	e048      	b.n	80060fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b02      	cmp	r3, #2
 8006072:	d111      	bne.n	8006098 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	0cdb      	lsrs	r3, r3, #19
 8006078:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	0a9b      	lsrs	r3, r3, #10
 800607e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	08db      	lsrs	r3, r3, #3
 8006084:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	02db      	lsls	r3, r3, #11
 800608e:	4313      	orrs	r3, r2
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	627b      	str	r3, [r7, #36]	@ 0x24
 8006096:	e032      	b.n	80060fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	2b03      	cmp	r3, #3
 800609e:	d117      	bne.n	80060d0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	0fdb      	lsrs	r3, r3, #31
 80060a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	0cdb      	lsrs	r3, r3, #19
 80060aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	0adb      	lsrs	r3, r3, #11
 80060b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	08db      	lsrs	r3, r3, #3
 80060b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	029b      	lsls	r3, r3, #10
 80060c0:	431a      	orrs	r2, r3
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	03db      	lsls	r3, r3, #15
 80060c6:	4313      	orrs	r3, r2
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ce:	e016      	b.n	80060fe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	0f1b      	lsrs	r3, r3, #28
 80060d4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	0d1b      	lsrs	r3, r3, #20
 80060da:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	0b1b      	lsrs	r3, r3, #12
 80060e0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	091b      	lsrs	r3, r3, #4
 80060e6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	011a      	lsls	r2, r3, #4
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	021b      	lsls	r3, r3, #8
 80060f0:	431a      	orrs	r2, r3
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	031b      	lsls	r3, r3, #12
 80060f6:	4313      	orrs	r3, r2
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006104:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006106:	e003      	b.n	8006110 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	60da      	str	r2, [r3, #12]
}
 8006110:	bf00      	nop
 8006112:	372c      	adds	r7, #44	@ 0x2c
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800612e:	4b23      	ldr	r3, [pc, #140]	@ (80061bc <HAL_FLASH_Program+0xa0>)
 8006130:	7e1b      	ldrb	r3, [r3, #24]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_FLASH_Program+0x1e>
 8006136:	2302      	movs	r3, #2
 8006138:	e03b      	b.n	80061b2 <HAL_FLASH_Program+0x96>
 800613a:	4b20      	ldr	r3, [pc, #128]	@ (80061bc <HAL_FLASH_Program+0xa0>)
 800613c:	2201      	movs	r2, #1
 800613e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006140:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006144:	f000 f870 	bl	8006228 <FLASH_WaitForLastOperation>
 8006148:	4603      	mov	r3, r0
 800614a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800614c:	7dfb      	ldrb	r3, [r7, #23]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d12b      	bne.n	80061aa <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006158:	783b      	ldrb	r3, [r7, #0]
 800615a:	4619      	mov	r1, r3
 800615c:	68b8      	ldr	r0, [r7, #8]
 800615e:	f000 f91b 	bl	8006398 <FLASH_Program_Byte>
 8006162:	e016      	b.n	8006192 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d105      	bne.n	8006176 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800616a:	883b      	ldrh	r3, [r7, #0]
 800616c:	4619      	mov	r1, r3
 800616e:	68b8      	ldr	r0, [r7, #8]
 8006170:	f000 f8ee 	bl	8006350 <FLASH_Program_HalfWord>
 8006174:	e00d      	b.n	8006192 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d105      	bne.n	8006188 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	4619      	mov	r1, r3
 8006180:	68b8      	ldr	r0, [r7, #8]
 8006182:	f000 f8c3 	bl	800630c <FLASH_Program_Word>
 8006186:	e004      	b.n	8006192 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800618c:	68b8      	ldr	r0, [r7, #8]
 800618e:	f000 f88b 	bl	80062a8 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006192:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006196:	f000 f847 	bl	8006228 <FLASH_WaitForLastOperation>
 800619a:	4603      	mov	r3, r0
 800619c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800619e:	4b08      	ldr	r3, [pc, #32]	@ (80061c0 <HAL_FLASH_Program+0xa4>)
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	4a07      	ldr	r2, [pc, #28]	@ (80061c0 <HAL_FLASH_Program+0xa4>)
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80061aa:	4b04      	ldr	r3, [pc, #16]	@ (80061bc <HAL_FLASH_Program+0xa0>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	761a      	strb	r2, [r3, #24]

  return status;
 80061b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	200092ac 	.word	0x200092ac
 80061c0:	40023c00 	.word	0x40023c00

080061c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80061ce:	4b0b      	ldr	r3, [pc, #44]	@ (80061fc <HAL_FLASH_Unlock+0x38>)
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	da0b      	bge.n	80061ee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80061d6:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <HAL_FLASH_Unlock+0x38>)
 80061d8:	4a09      	ldr	r2, [pc, #36]	@ (8006200 <HAL_FLASH_Unlock+0x3c>)
 80061da:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80061dc:	4b07      	ldr	r3, [pc, #28]	@ (80061fc <HAL_FLASH_Unlock+0x38>)
 80061de:	4a09      	ldr	r2, [pc, #36]	@ (8006204 <HAL_FLASH_Unlock+0x40>)
 80061e0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80061e2:	4b06      	ldr	r3, [pc, #24]	@ (80061fc <HAL_FLASH_Unlock+0x38>)
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da01      	bge.n	80061ee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80061ee:	79fb      	ldrb	r3, [r7, #7]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	40023c00 	.word	0x40023c00
 8006200:	45670123 	.word	0x45670123
 8006204:	cdef89ab 	.word	0xcdef89ab

08006208 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006208:	b480      	push	{r7}
 800620a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800620c:	4b05      	ldr	r3, [pc, #20]	@ (8006224 <HAL_FLASH_Lock+0x1c>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	4a04      	ldr	r2, [pc, #16]	@ (8006224 <HAL_FLASH_Lock+0x1c>)
 8006212:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006216:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	40023c00 	.word	0x40023c00

08006228 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006234:	4b1a      	ldr	r3, [pc, #104]	@ (80062a0 <FLASH_WaitForLastOperation+0x78>)
 8006236:	2200      	movs	r2, #0
 8006238:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800623a:	f7ff f8e7 	bl	800540c <HAL_GetTick>
 800623e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8006240:	e010      	b.n	8006264 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d00c      	beq.n	8006264 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d007      	beq.n	8006260 <FLASH_WaitForLastOperation+0x38>
 8006250:	f7ff f8dc 	bl	800540c <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	429a      	cmp	r2, r3
 800625e:	d201      	bcs.n	8006264 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e019      	b.n	8006298 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8006264:	4b0f      	ldr	r3, [pc, #60]	@ (80062a4 <FLASH_WaitForLastOperation+0x7c>)
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e8      	bne.n	8006242 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006270:	4b0c      	ldr	r3, [pc, #48]	@ (80062a4 <FLASH_WaitForLastOperation+0x7c>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800627c:	4b09      	ldr	r3, [pc, #36]	@ (80062a4 <FLASH_WaitForLastOperation+0x7c>)
 800627e:	2201      	movs	r2, #1
 8006280:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006282:	4b08      	ldr	r3, [pc, #32]	@ (80062a4 <FLASH_WaitForLastOperation+0x7c>)
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800628e:	f000 f8a5 	bl	80063dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006296:	2300      	movs	r3, #0

}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	200092ac 	.word	0x200092ac
 80062a4:	40023c00 	.word	0x40023c00

080062a8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80062b4:	4b14      	ldr	r3, [pc, #80]	@ (8006308 <FLASH_Program_DoubleWord+0x60>)
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	4a13      	ldr	r2, [pc, #76]	@ (8006308 <FLASH_Program_DoubleWord+0x60>)
 80062ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80062c0:	4b11      	ldr	r3, [pc, #68]	@ (8006308 <FLASH_Program_DoubleWord+0x60>)
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	4a10      	ldr	r2, [pc, #64]	@ (8006308 <FLASH_Program_DoubleWord+0x60>)
 80062c6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80062ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80062cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006308 <FLASH_Program_DoubleWord+0x60>)
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006308 <FLASH_Program_DoubleWord+0x60>)
 80062d2:	f043 0301 	orr.w	r3, r3, #1
 80062d6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80062de:	f3bf 8f6f 	isb	sy
}
 80062e2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80062e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062e8:	f04f 0200 	mov.w	r2, #0
 80062ec:	f04f 0300 	mov.w	r3, #0
 80062f0:	000a      	movs	r2, r1
 80062f2:	2300      	movs	r3, #0
 80062f4:	68f9      	ldr	r1, [r7, #12]
 80062f6:	3104      	adds	r1, #4
 80062f8:	4613      	mov	r3, r2
 80062fa:	600b      	str	r3, [r1, #0]
}
 80062fc:	bf00      	nop
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40023c00 	.word	0x40023c00

0800630c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006316:	4b0d      	ldr	r3, [pc, #52]	@ (800634c <FLASH_Program_Word+0x40>)
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	4a0c      	ldr	r2, [pc, #48]	@ (800634c <FLASH_Program_Word+0x40>)
 800631c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006320:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006322:	4b0a      	ldr	r3, [pc, #40]	@ (800634c <FLASH_Program_Word+0x40>)
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	4a09      	ldr	r2, [pc, #36]	@ (800634c <FLASH_Program_Word+0x40>)
 8006328:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800632c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800632e:	4b07      	ldr	r3, [pc, #28]	@ (800634c <FLASH_Program_Word+0x40>)
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	4a06      	ldr	r2, [pc, #24]	@ (800634c <FLASH_Program_Word+0x40>)
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	601a      	str	r2, [r3, #0]
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	40023c00 	.word	0x40023c00

08006350 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800635c:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <FLASH_Program_HalfWord+0x44>)
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	4a0c      	ldr	r2, [pc, #48]	@ (8006394 <FLASH_Program_HalfWord+0x44>)
 8006362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006366:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006368:	4b0a      	ldr	r3, [pc, #40]	@ (8006394 <FLASH_Program_HalfWord+0x44>)
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	4a09      	ldr	r2, [pc, #36]	@ (8006394 <FLASH_Program_HalfWord+0x44>)
 800636e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006372:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006374:	4b07      	ldr	r3, [pc, #28]	@ (8006394 <FLASH_Program_HalfWord+0x44>)
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	4a06      	ldr	r2, [pc, #24]	@ (8006394 <FLASH_Program_HalfWord+0x44>)
 800637a:	f043 0301 	orr.w	r3, r3, #1
 800637e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	887a      	ldrh	r2, [r7, #2]
 8006384:	801a      	strh	r2, [r3, #0]
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40023c00 	.word	0x40023c00

08006398 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063a4:	4b0c      	ldr	r3, [pc, #48]	@ (80063d8 <FLASH_Program_Byte+0x40>)
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	4a0b      	ldr	r2, [pc, #44]	@ (80063d8 <FLASH_Program_Byte+0x40>)
 80063aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80063b0:	4b09      	ldr	r3, [pc, #36]	@ (80063d8 <FLASH_Program_Byte+0x40>)
 80063b2:	4a09      	ldr	r2, [pc, #36]	@ (80063d8 <FLASH_Program_Byte+0x40>)
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80063b8:	4b07      	ldr	r3, [pc, #28]	@ (80063d8 <FLASH_Program_Byte+0x40>)
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	4a06      	ldr	r2, [pc, #24]	@ (80063d8 <FLASH_Program_Byte+0x40>)
 80063be:	f043 0301 	orr.w	r3, r3, #1
 80063c2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	701a      	strb	r2, [r3, #0]
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40023c00 	.word	0x40023c00

080063dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80063e0:	4b2f      	ldr	r3, [pc, #188]	@ (80064a0 <FLASH_SetErrorCode+0xc4>)
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0310 	and.w	r3, r3, #16
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d008      	beq.n	80063fe <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80063ec:	4b2d      	ldr	r3, [pc, #180]	@ (80064a4 <FLASH_SetErrorCode+0xc8>)
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	f043 0310 	orr.w	r3, r3, #16
 80063f4:	4a2b      	ldr	r2, [pc, #172]	@ (80064a4 <FLASH_SetErrorCode+0xc8>)
 80063f6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80063f8:	4b29      	ldr	r3, [pc, #164]	@ (80064a0 <FLASH_SetErrorCode+0xc4>)
 80063fa:	2210      	movs	r2, #16
 80063fc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80063fe:	4b28      	ldr	r3, [pc, #160]	@ (80064a0 <FLASH_SetErrorCode+0xc4>)
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d008      	beq.n	800641c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800640a:	4b26      	ldr	r3, [pc, #152]	@ (80064a4 <FLASH_SetErrorCode+0xc8>)
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	f043 0308 	orr.w	r3, r3, #8
 8006412:	4a24      	ldr	r2, [pc, #144]	@ (80064a4 <FLASH_SetErrorCode+0xc8>)
 8006414:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006416:	4b22      	ldr	r3, [pc, #136]	@ (80064a0 <FLASH_SetErrorCode+0xc4>)
 8006418:	2220      	movs	r2, #32
 800641a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800641c:	4b20      	ldr	r3, [pc, #128]	@ (80064a0 <FLASH_SetErrorCode+0xc4>)
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d008      	beq.n	800643a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006428:	4b1e      	ldr	r3, [pc, #120]	@ (80064a4 <FLASH_SetErrorCode+0xc8>)
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	f043 0304 	orr.w	r3, r3, #4
 8006430:	4a1c      	ldr	r2, [pc, #112]	@ (80064a4 <FLASH_SetErrorCode+0xc8>)
 8006432:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006434:	4b1a      	ldr	r3, [pc, #104]	@ (80064a0 <FLASH_SetErrorCode+0xc4>)
 8006436:	2240      	movs	r2, #64	@ 0x40
 8006438:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800643a:	4b19      	ldr	r3, [pc, #100]	@ (80064a0 <FLASH_SetErrorCode+0xc4>)
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006442:	2b00      	cmp	r3, #0
 8006444:	d008      	beq.n	8006458 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006446:	4b17      	ldr	r3, [pc, #92]	@ (80064a4 <FLASH_SetErrorCode+0xc8>)
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f043 0302 	orr.w	r3, r3, #2
 800644e:	4a15      	ldr	r2, [pc, #84]	@ (80064a4 <FLASH_SetErrorCode+0xc8>)
 8006450:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006452:	4b13      	ldr	r3, [pc, #76]	@ (80064a0 <FLASH_SetErrorCode+0xc4>)
 8006454:	2280      	movs	r2, #128	@ 0x80
 8006456:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006458:	4b11      	ldr	r3, [pc, #68]	@ (80064a0 <FLASH_SetErrorCode+0xc4>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006460:	2b00      	cmp	r3, #0
 8006462:	d009      	beq.n	8006478 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006464:	4b0f      	ldr	r3, [pc, #60]	@ (80064a4 <FLASH_SetErrorCode+0xc8>)
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	4a0d      	ldr	r2, [pc, #52]	@ (80064a4 <FLASH_SetErrorCode+0xc8>)
 800646e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006470:	4b0b      	ldr	r3, [pc, #44]	@ (80064a0 <FLASH_SetErrorCode+0xc4>)
 8006472:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006476:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006478:	4b09      	ldr	r3, [pc, #36]	@ (80064a0 <FLASH_SetErrorCode+0xc4>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006484:	4b07      	ldr	r3, [pc, #28]	@ (80064a4 <FLASH_SetErrorCode+0xc8>)
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f043 0320 	orr.w	r3, r3, #32
 800648c:	4a05      	ldr	r2, [pc, #20]	@ (80064a4 <FLASH_SetErrorCode+0xc8>)
 800648e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006490:	4b03      	ldr	r3, [pc, #12]	@ (80064a0 <FLASH_SetErrorCode+0xc4>)
 8006492:	2202      	movs	r2, #2
 8006494:	60da      	str	r2, [r3, #12]
  }
}
 8006496:	bf00      	nop
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	40023c00 	.word	0x40023c00
 80064a4:	200092ac 	.word	0x200092ac

080064a8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80064b8:	78fb      	ldrb	r3, [r7, #3]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d102      	bne.n	80064c4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	e010      	b.n	80064e6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d103      	bne.n	80064d2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80064ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	e009      	b.n	80064e6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80064d2:	78fb      	ldrb	r3, [r7, #3]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d103      	bne.n	80064e0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80064d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	e002      	b.n	80064e6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80064e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80064e4:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b0b      	cmp	r3, #11
 80064ea:	d902      	bls.n	80064f2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3304      	adds	r3, #4
 80064f0:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80064f2:	4b13      	ldr	r3, [pc, #76]	@ (8006540 <FLASH_Erase_Sector+0x98>)
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	4a12      	ldr	r2, [pc, #72]	@ (8006540 <FLASH_Erase_Sector+0x98>)
 80064f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80064fe:	4b10      	ldr	r3, [pc, #64]	@ (8006540 <FLASH_Erase_Sector+0x98>)
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	490f      	ldr	r1, [pc, #60]	@ (8006540 <FLASH_Erase_Sector+0x98>)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800650a:	4b0d      	ldr	r3, [pc, #52]	@ (8006540 <FLASH_Erase_Sector+0x98>)
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	4a0c      	ldr	r2, [pc, #48]	@ (8006540 <FLASH_Erase_Sector+0x98>)
 8006510:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006514:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006516:	4b0a      	ldr	r3, [pc, #40]	@ (8006540 <FLASH_Erase_Sector+0x98>)
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	4313      	orrs	r3, r2
 8006520:	4a07      	ldr	r2, [pc, #28]	@ (8006540 <FLASH_Erase_Sector+0x98>)
 8006522:	f043 0302 	orr.w	r3, r3, #2
 8006526:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006528:	4b05      	ldr	r3, [pc, #20]	@ (8006540 <FLASH_Erase_Sector+0x98>)
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	4a04      	ldr	r2, [pc, #16]	@ (8006540 <FLASH_Erase_Sector+0x98>)
 800652e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006532:	6113      	str	r3, [r2, #16]
}
 8006534:	bf00      	nop
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	40023c00 	.word	0x40023c00

08006544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006544:	b480      	push	{r7}
 8006546:	b089      	sub	sp, #36	@ 0x24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006552:	2300      	movs	r3, #0
 8006554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006556:	2300      	movs	r3, #0
 8006558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800655a:	2300      	movs	r3, #0
 800655c:	61fb      	str	r3, [r7, #28]
 800655e:	e177      	b.n	8006850 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006560:	2201      	movs	r2, #1
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4013      	ands	r3, r2
 8006572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	429a      	cmp	r2, r3
 800657a:	f040 8166 	bne.w	800684a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	2b01      	cmp	r3, #1
 8006588:	d005      	beq.n	8006596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006592:	2b02      	cmp	r3, #2
 8006594:	d130      	bne.n	80065f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	2203      	movs	r2, #3
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	43db      	mvns	r3, r3
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	4013      	ands	r3, r2
 80065ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	4313      	orrs	r3, r2
 80065be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065cc:	2201      	movs	r2, #1
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	43db      	mvns	r3, r3
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	4013      	ands	r3, r2
 80065da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	091b      	lsrs	r3, r3, #4
 80065e2:	f003 0201 	and.w	r2, r3, #1
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	2b03      	cmp	r3, #3
 8006602:	d017      	beq.n	8006634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	2203      	movs	r2, #3
 8006610:	fa02 f303 	lsl.w	r3, r2, r3
 8006614:	43db      	mvns	r3, r3
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	4013      	ands	r3, r2
 800661a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	4313      	orrs	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f003 0303 	and.w	r3, r3, #3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d123      	bne.n	8006688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	08da      	lsrs	r2, r3, #3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3208      	adds	r2, #8
 8006648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	220f      	movs	r2, #15
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	43db      	mvns	r3, r3
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	4013      	ands	r3, r2
 8006662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	fa02 f303 	lsl.w	r3, r2, r3
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	4313      	orrs	r3, r2
 8006678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	08da      	lsrs	r2, r3, #3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3208      	adds	r2, #8
 8006682:	69b9      	ldr	r1, [r7, #24]
 8006684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	2203      	movs	r2, #3
 8006694:	fa02 f303 	lsl.w	r3, r2, r3
 8006698:	43db      	mvns	r3, r3
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	4013      	ands	r3, r2
 800669e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f003 0203 	and.w	r2, r3, #3
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	fa02 f303 	lsl.w	r3, r2, r3
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 80c0 	beq.w	800684a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	4b66      	ldr	r3, [pc, #408]	@ (8006868 <HAL_GPIO_Init+0x324>)
 80066d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d2:	4a65      	ldr	r2, [pc, #404]	@ (8006868 <HAL_GPIO_Init+0x324>)
 80066d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80066da:	4b63      	ldr	r3, [pc, #396]	@ (8006868 <HAL_GPIO_Init+0x324>)
 80066dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066e6:	4a61      	ldr	r2, [pc, #388]	@ (800686c <HAL_GPIO_Init+0x328>)
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	089b      	lsrs	r3, r3, #2
 80066ec:	3302      	adds	r3, #2
 80066ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	220f      	movs	r2, #15
 80066fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006702:	43db      	mvns	r3, r3
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	4013      	ands	r3, r2
 8006708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a58      	ldr	r2, [pc, #352]	@ (8006870 <HAL_GPIO_Init+0x32c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d037      	beq.n	8006782 <HAL_GPIO_Init+0x23e>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a57      	ldr	r2, [pc, #348]	@ (8006874 <HAL_GPIO_Init+0x330>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d031      	beq.n	800677e <HAL_GPIO_Init+0x23a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a56      	ldr	r2, [pc, #344]	@ (8006878 <HAL_GPIO_Init+0x334>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d02b      	beq.n	800677a <HAL_GPIO_Init+0x236>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a55      	ldr	r2, [pc, #340]	@ (800687c <HAL_GPIO_Init+0x338>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d025      	beq.n	8006776 <HAL_GPIO_Init+0x232>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a54      	ldr	r2, [pc, #336]	@ (8006880 <HAL_GPIO_Init+0x33c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d01f      	beq.n	8006772 <HAL_GPIO_Init+0x22e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a53      	ldr	r2, [pc, #332]	@ (8006884 <HAL_GPIO_Init+0x340>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d019      	beq.n	800676e <HAL_GPIO_Init+0x22a>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a52      	ldr	r2, [pc, #328]	@ (8006888 <HAL_GPIO_Init+0x344>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d013      	beq.n	800676a <HAL_GPIO_Init+0x226>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a51      	ldr	r2, [pc, #324]	@ (800688c <HAL_GPIO_Init+0x348>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00d      	beq.n	8006766 <HAL_GPIO_Init+0x222>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a50      	ldr	r2, [pc, #320]	@ (8006890 <HAL_GPIO_Init+0x34c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d007      	beq.n	8006762 <HAL_GPIO_Init+0x21e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a4f      	ldr	r2, [pc, #316]	@ (8006894 <HAL_GPIO_Init+0x350>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d101      	bne.n	800675e <HAL_GPIO_Init+0x21a>
 800675a:	2309      	movs	r3, #9
 800675c:	e012      	b.n	8006784 <HAL_GPIO_Init+0x240>
 800675e:	230a      	movs	r3, #10
 8006760:	e010      	b.n	8006784 <HAL_GPIO_Init+0x240>
 8006762:	2308      	movs	r3, #8
 8006764:	e00e      	b.n	8006784 <HAL_GPIO_Init+0x240>
 8006766:	2307      	movs	r3, #7
 8006768:	e00c      	b.n	8006784 <HAL_GPIO_Init+0x240>
 800676a:	2306      	movs	r3, #6
 800676c:	e00a      	b.n	8006784 <HAL_GPIO_Init+0x240>
 800676e:	2305      	movs	r3, #5
 8006770:	e008      	b.n	8006784 <HAL_GPIO_Init+0x240>
 8006772:	2304      	movs	r3, #4
 8006774:	e006      	b.n	8006784 <HAL_GPIO_Init+0x240>
 8006776:	2303      	movs	r3, #3
 8006778:	e004      	b.n	8006784 <HAL_GPIO_Init+0x240>
 800677a:	2302      	movs	r3, #2
 800677c:	e002      	b.n	8006784 <HAL_GPIO_Init+0x240>
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <HAL_GPIO_Init+0x240>
 8006782:	2300      	movs	r3, #0
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	f002 0203 	and.w	r2, r2, #3
 800678a:	0092      	lsls	r2, r2, #2
 800678c:	4093      	lsls	r3, r2
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	4313      	orrs	r3, r2
 8006792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006794:	4935      	ldr	r1, [pc, #212]	@ (800686c <HAL_GPIO_Init+0x328>)
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	089b      	lsrs	r3, r3, #2
 800679a:	3302      	adds	r3, #2
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067a2:	4b3d      	ldr	r3, [pc, #244]	@ (8006898 <HAL_GPIO_Init+0x354>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	43db      	mvns	r3, r3
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	4013      	ands	r3, r2
 80067b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067c6:	4a34      	ldr	r2, [pc, #208]	@ (8006898 <HAL_GPIO_Init+0x354>)
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067cc:	4b32      	ldr	r3, [pc, #200]	@ (8006898 <HAL_GPIO_Init+0x354>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	43db      	mvns	r3, r3
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	4013      	ands	r3, r2
 80067da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067f0:	4a29      	ldr	r2, [pc, #164]	@ (8006898 <HAL_GPIO_Init+0x354>)
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80067f6:	4b28      	ldr	r3, [pc, #160]	@ (8006898 <HAL_GPIO_Init+0x354>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	43db      	mvns	r3, r3
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	4013      	ands	r3, r2
 8006804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800681a:	4a1f      	ldr	r2, [pc, #124]	@ (8006898 <HAL_GPIO_Init+0x354>)
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006820:	4b1d      	ldr	r3, [pc, #116]	@ (8006898 <HAL_GPIO_Init+0x354>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	43db      	mvns	r3, r3
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	4013      	ands	r3, r2
 800682e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006844:	4a14      	ldr	r2, [pc, #80]	@ (8006898 <HAL_GPIO_Init+0x354>)
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	3301      	adds	r3, #1
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	2b0f      	cmp	r3, #15
 8006854:	f67f ae84 	bls.w	8006560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	3724      	adds	r7, #36	@ 0x24
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40023800 	.word	0x40023800
 800686c:	40013800 	.word	0x40013800
 8006870:	40020000 	.word	0x40020000
 8006874:	40020400 	.word	0x40020400
 8006878:	40020800 	.word	0x40020800
 800687c:	40020c00 	.word	0x40020c00
 8006880:	40021000 	.word	0x40021000
 8006884:	40021400 	.word	0x40021400
 8006888:	40021800 	.word	0x40021800
 800688c:	40021c00 	.word	0x40021c00
 8006890:	40022000 	.word	0x40022000
 8006894:	40022400 	.word	0x40022400
 8006898:	40013c00 	.word	0x40013c00

0800689c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068b2:	2300      	movs	r3, #0
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	e0d9      	b.n	8006a6c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80068b8:	2201      	movs	r2, #1
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	fa02 f303 	lsl.w	r3, r2, r3
 80068c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4013      	ands	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	f040 80c9 	bne.w	8006a66 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80068d4:	4a6b      	ldr	r2, [pc, #428]	@ (8006a84 <HAL_GPIO_DeInit+0x1e8>)
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	089b      	lsrs	r3, r3, #2
 80068da:	3302      	adds	r3, #2
 80068dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	220f      	movs	r2, #15
 80068ec:	fa02 f303 	lsl.w	r3, r2, r3
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	4013      	ands	r3, r2
 80068f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a63      	ldr	r2, [pc, #396]	@ (8006a88 <HAL_GPIO_DeInit+0x1ec>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d037      	beq.n	800696e <HAL_GPIO_DeInit+0xd2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a62      	ldr	r2, [pc, #392]	@ (8006a8c <HAL_GPIO_DeInit+0x1f0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d031      	beq.n	800696a <HAL_GPIO_DeInit+0xce>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a61      	ldr	r2, [pc, #388]	@ (8006a90 <HAL_GPIO_DeInit+0x1f4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d02b      	beq.n	8006966 <HAL_GPIO_DeInit+0xca>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a60      	ldr	r2, [pc, #384]	@ (8006a94 <HAL_GPIO_DeInit+0x1f8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d025      	beq.n	8006962 <HAL_GPIO_DeInit+0xc6>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a5f      	ldr	r2, [pc, #380]	@ (8006a98 <HAL_GPIO_DeInit+0x1fc>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d01f      	beq.n	800695e <HAL_GPIO_DeInit+0xc2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a5e      	ldr	r2, [pc, #376]	@ (8006a9c <HAL_GPIO_DeInit+0x200>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d019      	beq.n	800695a <HAL_GPIO_DeInit+0xbe>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a5d      	ldr	r2, [pc, #372]	@ (8006aa0 <HAL_GPIO_DeInit+0x204>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d013      	beq.n	8006956 <HAL_GPIO_DeInit+0xba>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a5c      	ldr	r2, [pc, #368]	@ (8006aa4 <HAL_GPIO_DeInit+0x208>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00d      	beq.n	8006952 <HAL_GPIO_DeInit+0xb6>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a5b      	ldr	r2, [pc, #364]	@ (8006aa8 <HAL_GPIO_DeInit+0x20c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <HAL_GPIO_DeInit+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a5a      	ldr	r2, [pc, #360]	@ (8006aac <HAL_GPIO_DeInit+0x210>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d101      	bne.n	800694a <HAL_GPIO_DeInit+0xae>
 8006946:	2309      	movs	r3, #9
 8006948:	e012      	b.n	8006970 <HAL_GPIO_DeInit+0xd4>
 800694a:	230a      	movs	r3, #10
 800694c:	e010      	b.n	8006970 <HAL_GPIO_DeInit+0xd4>
 800694e:	2308      	movs	r3, #8
 8006950:	e00e      	b.n	8006970 <HAL_GPIO_DeInit+0xd4>
 8006952:	2307      	movs	r3, #7
 8006954:	e00c      	b.n	8006970 <HAL_GPIO_DeInit+0xd4>
 8006956:	2306      	movs	r3, #6
 8006958:	e00a      	b.n	8006970 <HAL_GPIO_DeInit+0xd4>
 800695a:	2305      	movs	r3, #5
 800695c:	e008      	b.n	8006970 <HAL_GPIO_DeInit+0xd4>
 800695e:	2304      	movs	r3, #4
 8006960:	e006      	b.n	8006970 <HAL_GPIO_DeInit+0xd4>
 8006962:	2303      	movs	r3, #3
 8006964:	e004      	b.n	8006970 <HAL_GPIO_DeInit+0xd4>
 8006966:	2302      	movs	r3, #2
 8006968:	e002      	b.n	8006970 <HAL_GPIO_DeInit+0xd4>
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <HAL_GPIO_DeInit+0xd4>
 800696e:	2300      	movs	r3, #0
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	f002 0203 	and.w	r2, r2, #3
 8006976:	0092      	lsls	r2, r2, #2
 8006978:	4093      	lsls	r3, r2
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	429a      	cmp	r2, r3
 800697e:	d132      	bne.n	80069e6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006980:	4b4b      	ldr	r3, [pc, #300]	@ (8006ab0 <HAL_GPIO_DeInit+0x214>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	43db      	mvns	r3, r3
 8006988:	4949      	ldr	r1, [pc, #292]	@ (8006ab0 <HAL_GPIO_DeInit+0x214>)
 800698a:	4013      	ands	r3, r2
 800698c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800698e:	4b48      	ldr	r3, [pc, #288]	@ (8006ab0 <HAL_GPIO_DeInit+0x214>)
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	43db      	mvns	r3, r3
 8006996:	4946      	ldr	r1, [pc, #280]	@ (8006ab0 <HAL_GPIO_DeInit+0x214>)
 8006998:	4013      	ands	r3, r2
 800699a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800699c:	4b44      	ldr	r3, [pc, #272]	@ (8006ab0 <HAL_GPIO_DeInit+0x214>)
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	43db      	mvns	r3, r3
 80069a4:	4942      	ldr	r1, [pc, #264]	@ (8006ab0 <HAL_GPIO_DeInit+0x214>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80069aa:	4b41      	ldr	r3, [pc, #260]	@ (8006ab0 <HAL_GPIO_DeInit+0x214>)
 80069ac:	689a      	ldr	r2, [r3, #8]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	43db      	mvns	r3, r3
 80069b2:	493f      	ldr	r1, [pc, #252]	@ (8006ab0 <HAL_GPIO_DeInit+0x214>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	220f      	movs	r2, #15
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80069c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006a84 <HAL_GPIO_DeInit+0x1e8>)
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	089b      	lsrs	r3, r3, #2
 80069ce:	3302      	adds	r3, #2
 80069d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	43da      	mvns	r2, r3
 80069d8:	482a      	ldr	r0, [pc, #168]	@ (8006a84 <HAL_GPIO_DeInit+0x1e8>)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	089b      	lsrs	r3, r3, #2
 80069de:	400a      	ands	r2, r1
 80069e0:	3302      	adds	r3, #2
 80069e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	2103      	movs	r1, #3
 80069f0:	fa01 f303 	lsl.w	r3, r1, r3
 80069f4:	43db      	mvns	r3, r3
 80069f6:	401a      	ands	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	08da      	lsrs	r2, r3, #3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3208      	adds	r2, #8
 8006a04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	220f      	movs	r2, #15
 8006a12:	fa02 f303 	lsl.w	r3, r2, r3
 8006a16:	43db      	mvns	r3, r3
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	08d2      	lsrs	r2, r2, #3
 8006a1c:	4019      	ands	r1, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3208      	adds	r2, #8
 8006a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	2103      	movs	r1, #3
 8006a30:	fa01 f303 	lsl.w	r3, r1, r3
 8006a34:	43db      	mvns	r3, r3
 8006a36:	401a      	ands	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	2101      	movs	r1, #1
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	fa01 f303 	lsl.w	r3, r1, r3
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	401a      	ands	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	2103      	movs	r1, #3
 8006a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5e:	43db      	mvns	r3, r3
 8006a60:	401a      	ands	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	2b0f      	cmp	r3, #15
 8006a70:	f67f af22 	bls.w	80068b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	40013800 	.word	0x40013800
 8006a88:	40020000 	.word	0x40020000
 8006a8c:	40020400 	.word	0x40020400
 8006a90:	40020800 	.word	0x40020800
 8006a94:	40020c00 	.word	0x40020c00
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	40021400 	.word	0x40021400
 8006aa0:	40021800 	.word	0x40021800
 8006aa4:	40021c00 	.word	0x40021c00
 8006aa8:	40022000 	.word	0x40022000
 8006aac:	40022400 	.word	0x40022400
 8006ab0:	40013c00 	.word	0x40013c00

08006ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	807b      	strh	r3, [r7, #2]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ac4:	787b      	ldrb	r3, [r7, #1]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006aca:	887a      	ldrh	r2, [r7, #2]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006ad0:	e003      	b.n	8006ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006ad2:	887b      	ldrh	r3, [r7, #2]
 8006ad4:	041a      	lsls	r2, r3, #16
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	619a      	str	r2, [r3, #24]
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b086      	sub	sp, #24
 8006aea:	af02      	add	r7, sp, #8
 8006aec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e059      	b.n	8006bac <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f00a fbfc 	bl	8011310 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b26:	d102      	bne.n	8006b2e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f006 fcaf 	bl	800d496 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	7c1a      	ldrb	r2, [r3, #16]
 8006b40:	f88d 2000 	strb.w	r2, [sp]
 8006b44:	3304      	adds	r3, #4
 8006b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b48:	f006 fc30 	bl	800d3ac <USB_CoreInit>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e026      	b.n	8006bac <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2101      	movs	r1, #1
 8006b64:	4618      	mov	r0, r3
 8006b66:	f006 fca7 	bl	800d4b8 <USB_SetCurrentMode>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e017      	b.n	8006bac <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	7c1a      	ldrb	r2, [r3, #16]
 8006b84:	f88d 2000 	strb.w	r2, [sp]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b8c:	f006 fe4a 	bl	800d824 <USB_HostInit>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e004      	b.n	8006bac <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006bb4:	b590      	push	{r4, r7, lr}
 8006bb6:	b08b      	sub	sp, #44	@ 0x2c
 8006bb8:	af04      	add	r7, sp, #16
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	70fb      	strb	r3, [r7, #3]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	70bb      	strb	r3, [r7, #2]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8006bce:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006bd0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_HCD_HC_Init+0x2c>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e09d      	b.n	8006d1c <HAL_HCD_HC_Init+0x168>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8006be8:	78fa      	ldrb	r2, [r7, #3]
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	4613      	mov	r3, r2
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	1a9b      	subs	r3, r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	3319      	adds	r3, #25
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006bfc:	78fa      	ldrb	r2, [r7, #3]
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	4613      	mov	r3, r2
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	1a9b      	subs	r3, r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	440b      	add	r3, r1
 8006c0a:	3314      	adds	r3, #20
 8006c0c:	787a      	ldrb	r2, [r7, #1]
 8006c0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006c10:	78fa      	ldrb	r2, [r7, #3]
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	1a9b      	subs	r3, r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	440b      	add	r3, r1
 8006c1e:	3315      	adds	r3, #21
 8006c20:	78fa      	ldrb	r2, [r7, #3]
 8006c22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	3326      	adds	r3, #38	@ 0x26
 8006c34:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8006c38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	78bb      	ldrb	r3, [r7, #2]
 8006c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c42:	b2d8      	uxtb	r0, r3
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	4613      	mov	r3, r2
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	1a9b      	subs	r3, r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	440b      	add	r3, r1
 8006c50:	3316      	adds	r3, #22
 8006c52:	4602      	mov	r2, r0
 8006c54:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fbc8 	bl	80073f0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8006c60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	da0a      	bge.n	8006c7e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006c68:	78fa      	ldrb	r2, [r7, #3]
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	1a9b      	subs	r3, r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	3317      	adds	r3, #23
 8006c78:	2201      	movs	r2, #1
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	e009      	b.n	8006c92 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006c7e:	78fa      	ldrb	r2, [r7, #3]
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	1a9b      	subs	r3, r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	440b      	add	r3, r1
 8006c8c:	3317      	adds	r3, #23
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f006 ff28 	bl	800daec <USB_GetHostSpeed>
 8006c9c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8006c9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d10b      	bne.n	8006cbe <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8006ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d107      	bne.n	8006cbe <HAL_HCD_HC_Init+0x10a>
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d104      	bne.n	8006cbe <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2bbc      	cmp	r3, #188	@ 0xbc
 8006cb8:	d901      	bls.n	8006cbe <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8006cba:	23bc      	movs	r3, #188	@ 0xbc
 8006cbc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8006cbe:	78fa      	ldrb	r2, [r7, #3]
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	1a9b      	subs	r3, r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	3318      	adds	r3, #24
 8006cce:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006cd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8006cd4:	78fa      	ldrb	r2, [r7, #3]
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	b298      	uxth	r0, r3
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	3328      	adds	r3, #40	@ 0x28
 8006ce8:	4602      	mov	r2, r0
 8006cea:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6818      	ldr	r0, [r3, #0]
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	787c      	ldrb	r4, [r7, #1]
 8006cf6:	78ba      	ldrb	r2, [r7, #2]
 8006cf8:	78f9      	ldrb	r1, [r7, #3]
 8006cfa:	9302      	str	r3, [sp, #8]
 8006cfc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	4623      	mov	r3, r4
 8006d0a:	f006 ff17 	bl	800db3c <USB_HC_Init>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd90      	pop	{r4, r7, pc}

08006d24 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <HAL_HCD_HC_Halt+0x1e>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e00f      	b.n	8006d62 <HAL_HCD_HC_Halt+0x3e>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	4611      	mov	r1, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f007 faa9 	bl	800e2aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	4608      	mov	r0, r1
 8006d76:	4611      	mov	r1, r2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	70fb      	strb	r3, [r7, #3]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	70bb      	strb	r3, [r7, #2]
 8006d82:	4613      	mov	r3, r2
 8006d84:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006d86:	78fa      	ldrb	r2, [r7, #3]
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	1a9b      	subs	r3, r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	440b      	add	r3, r1
 8006d94:	3317      	adds	r3, #23
 8006d96:	78ba      	ldrb	r2, [r7, #2]
 8006d98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006d9a:	78fa      	ldrb	r2, [r7, #3]
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	1a9b      	subs	r3, r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	440b      	add	r3, r1
 8006da8:	3326      	adds	r3, #38	@ 0x26
 8006daa:	787a      	ldrb	r2, [r7, #1]
 8006dac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006dae:	7c3b      	ldrb	r3, [r7, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d114      	bne.n	8006dde <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006db4:	78fa      	ldrb	r2, [r7, #3]
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	4613      	mov	r3, r2
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	1a9b      	subs	r3, r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	440b      	add	r3, r1
 8006dc2:	332a      	adds	r3, #42	@ 0x2a
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006dc8:	78fa      	ldrb	r2, [r7, #3]
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	3319      	adds	r3, #25
 8006dd8:	7f3a      	ldrb	r2, [r7, #28]
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	e009      	b.n	8006df2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006dde:	78fa      	ldrb	r2, [r7, #3]
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	1a9b      	subs	r3, r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	332a      	adds	r3, #42	@ 0x2a
 8006dee:	2202      	movs	r2, #2
 8006df0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006df2:	787b      	ldrb	r3, [r7, #1]
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	f200 8102 	bhi.w	8006ffe <HAL_HCD_HC_SubmitRequest+0x292>
 8006dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8006e00 <HAL_HCD_HC_SubmitRequest+0x94>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e11 	.word	0x08006e11
 8006e04:	08006fe9 	.word	0x08006fe9
 8006e08:	08006ed5 	.word	0x08006ed5
 8006e0c:	08006f5f 	.word	0x08006f5f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8006e10:	7c3b      	ldrb	r3, [r7, #16]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	f040 80f5 	bne.w	8007002 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8006e18:	78bb      	ldrb	r3, [r7, #2]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d12d      	bne.n	8006e7a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8006e1e:	8b3b      	ldrh	r3, [r7, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8006e24:	78fa      	ldrb	r2, [r7, #3]
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	011b      	lsls	r3, r3, #4
 8006e2c:	1a9b      	subs	r3, r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	440b      	add	r3, r1
 8006e32:	333d      	adds	r3, #61	@ 0x3d
 8006e34:	2201      	movs	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	1a9b      	subs	r3, r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	333d      	adds	r3, #61	@ 0x3d
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006e4e:	78fa      	ldrb	r2, [r7, #3]
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	4613      	mov	r3, r2
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	1a9b      	subs	r3, r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	332a      	adds	r3, #42	@ 0x2a
 8006e5e:	2200      	movs	r2, #0
 8006e60:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8006e62:	e0ce      	b.n	8007002 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006e64:	78fa      	ldrb	r2, [r7, #3]
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	1a9b      	subs	r3, r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	440b      	add	r3, r1
 8006e72:	332a      	adds	r3, #42	@ 0x2a
 8006e74:	2202      	movs	r2, #2
 8006e76:	701a      	strb	r2, [r3, #0]
      break;
 8006e78:	e0c3      	b.n	8007002 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8006e7a:	78fa      	ldrb	r2, [r7, #3]
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	011b      	lsls	r3, r3, #4
 8006e82:	1a9b      	subs	r3, r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	440b      	add	r3, r1
 8006e88:	331a      	adds	r3, #26
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	f040 80b8 	bne.w	8007002 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8006e92:	78fa      	ldrb	r2, [r7, #3]
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	4613      	mov	r3, r2
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	1a9b      	subs	r3, r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	440b      	add	r3, r1
 8006ea0:	333c      	adds	r3, #60	@ 0x3c
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006ea8:	78fa      	ldrb	r2, [r7, #3]
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	4613      	mov	r3, r2
 8006eae:	011b      	lsls	r3, r3, #4
 8006eb0:	1a9b      	subs	r3, r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	332a      	adds	r3, #42	@ 0x2a
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
      break;
 8006ebc:	e0a1      	b.n	8007002 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006ebe:	78fa      	ldrb	r2, [r7, #3]
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	332a      	adds	r3, #42	@ 0x2a
 8006ece:	2202      	movs	r2, #2
 8006ed0:	701a      	strb	r2, [r3, #0]
      break;
 8006ed2:	e096      	b.n	8007002 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006ed4:	78bb      	ldrb	r3, [r7, #2]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d120      	bne.n	8006f1c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006eda:	78fa      	ldrb	r2, [r7, #3]
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	011b      	lsls	r3, r3, #4
 8006ee2:	1a9b      	subs	r3, r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	333d      	adds	r3, #61	@ 0x3d
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006ef0:	78fa      	ldrb	r2, [r7, #3]
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	011b      	lsls	r3, r3, #4
 8006ef8:	1a9b      	subs	r3, r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	332a      	adds	r3, #42	@ 0x2a
 8006f00:	2200      	movs	r2, #0
 8006f02:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006f04:	e07e      	b.n	8007004 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006f06:	78fa      	ldrb	r2, [r7, #3]
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	011b      	lsls	r3, r3, #4
 8006f0e:	1a9b      	subs	r3, r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	332a      	adds	r3, #42	@ 0x2a
 8006f16:	2202      	movs	r2, #2
 8006f18:	701a      	strb	r2, [r3, #0]
      break;
 8006f1a:	e073      	b.n	8007004 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006f1c:	78fa      	ldrb	r2, [r7, #3]
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	4613      	mov	r3, r2
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	1a9b      	subs	r3, r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	333c      	adds	r3, #60	@ 0x3c
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10a      	bne.n	8006f48 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006f32:	78fa      	ldrb	r2, [r7, #3]
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	332a      	adds	r3, #42	@ 0x2a
 8006f42:	2200      	movs	r2, #0
 8006f44:	701a      	strb	r2, [r3, #0]
      break;
 8006f46:	e05d      	b.n	8007004 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006f48:	78fa      	ldrb	r2, [r7, #3]
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	011b      	lsls	r3, r3, #4
 8006f50:	1a9b      	subs	r3, r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	332a      	adds	r3, #42	@ 0x2a
 8006f58:	2202      	movs	r2, #2
 8006f5a:	701a      	strb	r2, [r3, #0]
      break;
 8006f5c:	e052      	b.n	8007004 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006f5e:	78bb      	ldrb	r3, [r7, #2]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d120      	bne.n	8006fa6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006f64:	78fa      	ldrb	r2, [r7, #3]
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	011b      	lsls	r3, r3, #4
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	333d      	adds	r3, #61	@ 0x3d
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006f7a:	78fa      	ldrb	r2, [r7, #3]
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	011b      	lsls	r3, r3, #4
 8006f82:	1a9b      	subs	r3, r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	440b      	add	r3, r1
 8006f88:	332a      	adds	r3, #42	@ 0x2a
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006f8e:	e039      	b.n	8007004 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006f90:	78fa      	ldrb	r2, [r7, #3]
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	4613      	mov	r3, r2
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	1a9b      	subs	r3, r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	440b      	add	r3, r1
 8006f9e:	332a      	adds	r3, #42	@ 0x2a
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	701a      	strb	r2, [r3, #0]
      break;
 8006fa4:	e02e      	b.n	8007004 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006fa6:	78fa      	ldrb	r2, [r7, #3]
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	4613      	mov	r3, r2
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	1a9b      	subs	r3, r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	440b      	add	r3, r1
 8006fb4:	333c      	adds	r3, #60	@ 0x3c
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10a      	bne.n	8006fd2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006fbc:	78fa      	ldrb	r2, [r7, #3]
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	1a9b      	subs	r3, r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	440b      	add	r3, r1
 8006fca:	332a      	adds	r3, #42	@ 0x2a
 8006fcc:	2200      	movs	r2, #0
 8006fce:	701a      	strb	r2, [r3, #0]
      break;
 8006fd0:	e018      	b.n	8007004 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006fd2:	78fa      	ldrb	r2, [r7, #3]
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	1a9b      	subs	r3, r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	332a      	adds	r3, #42	@ 0x2a
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	701a      	strb	r2, [r3, #0]
      break;
 8006fe6:	e00d      	b.n	8007004 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006fe8:	78fa      	ldrb	r2, [r7, #3]
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	4613      	mov	r3, r2
 8006fee:	011b      	lsls	r3, r3, #4
 8006ff0:	1a9b      	subs	r3, r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	332a      	adds	r3, #42	@ 0x2a
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
      break;
 8006ffc:	e002      	b.n	8007004 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8006ffe:	bf00      	nop
 8007000:	e000      	b.n	8007004 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8007002:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8007004:	78fa      	ldrb	r2, [r7, #3]
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	4613      	mov	r3, r2
 800700a:	011b      	lsls	r3, r3, #4
 800700c:	1a9b      	subs	r3, r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	332c      	adds	r3, #44	@ 0x2c
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8007018:	78fa      	ldrb	r2, [r7, #3]
 800701a:	8b39      	ldrh	r1, [r7, #24]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4403      	add	r3, r0
 8007028:	3334      	adds	r3, #52	@ 0x34
 800702a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800702c:	78fa      	ldrb	r2, [r7, #3]
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	4613      	mov	r3, r2
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	1a9b      	subs	r3, r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	334c      	adds	r3, #76	@ 0x4c
 800703c:	2200      	movs	r2, #0
 800703e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8007040:	78fa      	ldrb	r2, [r7, #3]
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4613      	mov	r3, r2
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	1a9b      	subs	r3, r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	3338      	adds	r3, #56	@ 0x38
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8007054:	78fa      	ldrb	r2, [r7, #3]
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	3315      	adds	r3, #21
 8007064:	78fa      	ldrb	r2, [r7, #3]
 8007066:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007068:	78fa      	ldrb	r2, [r7, #3]
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	334d      	adds	r3, #77	@ 0x4d
 8007078:	2200      	movs	r2, #0
 800707a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	4613      	mov	r3, r2
 8007084:	011b      	lsls	r3, r3, #4
 8007086:	1a9b      	subs	r3, r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	3310      	adds	r3, #16
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	4413      	add	r3, r2
 8007090:	1d19      	adds	r1, r3, #4
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	799b      	ldrb	r3, [r3, #6]
 8007096:	461a      	mov	r2, r3
 8007098:	f006 fe7c 	bl	800dd94 <USB_HC_StartXfer>
 800709c:	4603      	mov	r3, r0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop

080070a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f006 fb70 	bl	800d7a4 <USB_GetMode>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	f040 80fb 	bne.w	80072c2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f006 fb33 	bl	800d73c <USB_ReadInterrupts>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 80f1 	beq.w	80072c0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f006 fb2a 	bl	800d73c <USB_ReadInterrupts>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070f2:	d104      	bne.n	80070fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80070fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f006 fb1a 	bl	800d73c <USB_ReadInterrupts>
 8007108:	4603      	mov	r3, r0
 800710a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800710e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007112:	d104      	bne.n	800711e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800711c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f006 fb0a 	bl	800d73c <USB_ReadInterrupts>
 8007128:	4603      	mov	r3, r0
 800712a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800712e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007132:	d104      	bne.n	800713e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800713c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4618      	mov	r0, r3
 8007144:	f006 fafa 	bl	800d73c <USB_ReadInterrupts>
 8007148:	4603      	mov	r3, r0
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b02      	cmp	r3, #2
 8007150:	d103      	bne.n	800715a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2202      	movs	r2, #2
 8007158:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4618      	mov	r0, r3
 8007160:	f006 faec 	bl	800d73c <USB_ReadInterrupts>
 8007164:	4603      	mov	r3, r0
 8007166:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800716a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800716e:	d120      	bne.n	80071b2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007178:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d113      	bne.n	80071b2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800718a:	2110      	movs	r1, #16
 800718c:	6938      	ldr	r0, [r7, #16]
 800718e:	f006 f9df 	bl	800d550 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8007192:	6938      	ldr	r0, [r7, #16]
 8007194:	f006 fa0e 	bl	800d5b4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	7a5b      	ldrb	r3, [r3, #9]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d105      	bne.n	80071ac <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2101      	movs	r1, #1
 80071a6:	4618      	mov	r0, r3
 80071a8:	f006 fc00 	bl	800d9ac <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f00a f929 	bl	8011404 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f006 fac0 	bl	800d73c <USB_ReadInterrupts>
 80071bc:	4603      	mov	r3, r0
 80071be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071c6:	d102      	bne.n	80071ce <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 fd4d 	bl	8008c68 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f006 fab2 	bl	800d73c <USB_ReadInterrupts>
 80071d8:	4603      	mov	r3, r0
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b08      	cmp	r3, #8
 80071e0:	d106      	bne.n	80071f0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f00a f8f2 	bl	80113cc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2208      	movs	r2, #8
 80071ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f006 faa1 	bl	800d73c <USB_ReadInterrupts>
 80071fa:	4603      	mov	r3, r0
 80071fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007200:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007204:	d139      	bne.n	800727a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4618      	mov	r0, r3
 800720c:	f007 f83c 	bl	800e288 <USB_HC_ReadInterrupt>
 8007210:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]
 8007216:	e025      	b.n	8007264 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	fa22 f303 	lsr.w	r3, r2, r3
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d018      	beq.n	800725e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4413      	add	r3, r2
 8007234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800723e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007242:	d106      	bne.n	8007252 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f905 	bl	800745a <HCD_HC_IN_IRQHandler>
 8007250:	e005      	b.n	800725e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	b2db      	uxtb	r3, r3
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 ff67 	bl	800812c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	3301      	adds	r3, #1
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	795b      	ldrb	r3, [r3, #5]
 8007268:	461a      	mov	r2, r3
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	4293      	cmp	r3, r2
 800726e:	d3d3      	bcc.n	8007218 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4618      	mov	r0, r3
 8007280:	f006 fa5c 	bl	800d73c <USB_ReadInterrupts>
 8007284:	4603      	mov	r3, r0
 8007286:	f003 0310 	and.w	r3, r3, #16
 800728a:	2b10      	cmp	r3, #16
 800728c:	d101      	bne.n	8007292 <HAL_HCD_IRQHandler+0x1ea>
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <HAL_HCD_IRQHandler+0x1ec>
 8007292:	2300      	movs	r3, #0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d014      	beq.n	80072c2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0210 	bic.w	r2, r2, #16
 80072a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 fbfe 	bl	8008aaa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	699a      	ldr	r2, [r3, #24]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f042 0210 	orr.w	r2, r2, #16
 80072bc:	619a      	str	r2, [r3, #24]
 80072be:	e000      	b.n	80072c2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80072c0:	bf00      	nop
    }
  }
}
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_HCD_Start+0x16>
 80072da:	2302      	movs	r3, #2
 80072dc:	e013      	b.n	8007306 <HAL_HCD_Start+0x3e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2101      	movs	r1, #1
 80072ec:	4618      	mov	r0, r3
 80072ee:	f006 fbc4 	bl	800da7a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f006 f8bc 	bl	800d474 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_HCD_Stop+0x16>
 8007320:	2302      	movs	r3, #2
 8007322:	e00d      	b.n	8007340 <HAL_HCD_Stop+0x32>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4618      	mov	r0, r3
 8007332:	f007 f917 	bl	800e564 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4618      	mov	r0, r3
 8007356:	f006 fb66 	bl	800da26 <USB_ResetPort>
 800735a:	4603      	mov	r3, r0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007370:	78fa      	ldrb	r2, [r7, #3]
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	4613      	mov	r3, r2
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	1a9b      	subs	r3, r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	440b      	add	r3, r1
 800737e:	334c      	adds	r3, #76	@ 0x4c
 8007380:	781b      	ldrb	r3, [r3, #0]
}
 8007382:	4618      	mov	r0, r3
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800738e:	b480      	push	{r7}
 8007390:	b083      	sub	sp, #12
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	460b      	mov	r3, r1
 8007398:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800739a:	78fa      	ldrb	r2, [r7, #3]
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	4613      	mov	r3, r2
 80073a0:	011b      	lsls	r3, r3, #4
 80073a2:	1a9b      	subs	r3, r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	3338      	adds	r3, #56	@ 0x38
 80073aa:	681b      	ldr	r3, [r3, #0]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f006 fba8 	bl	800db1a <USB_GetCurrentFrame>
 80073ca:	4603      	mov	r3, r0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f006 fb83 	bl	800daec <USB_GetHostSpeed>
 80073e6:	4603      	mov	r3, r0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80073fc:	78fa      	ldrb	r2, [r7, #3]
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	4613      	mov	r3, r2
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	1a9b      	subs	r3, r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	331a      	adds	r3, #26
 800740c:	2200      	movs	r2, #0
 800740e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8007410:	78fa      	ldrb	r2, [r7, #3]
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	4613      	mov	r3, r2
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	1a9b      	subs	r3, r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	331b      	adds	r3, #27
 8007420:	2200      	movs	r2, #0
 8007422:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8007424:	78fa      	ldrb	r2, [r7, #3]
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4613      	mov	r3, r2
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	1a9b      	subs	r3, r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	440b      	add	r3, r1
 8007432:	3325      	adds	r3, #37	@ 0x25
 8007434:	2200      	movs	r2, #0
 8007436:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8007438:	78fa      	ldrb	r2, [r7, #3]
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	4613      	mov	r3, r2
 800743e:	011b      	lsls	r3, r3, #4
 8007440:	1a9b      	subs	r3, r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	3324      	adds	r3, #36	@ 0x24
 8007448:	2200      	movs	r2, #0
 800744a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b086      	sub	sp, #24
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	460b      	mov	r3, r1
 8007464:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	78fa      	ldrb	r2, [r7, #3]
 8007476:	4611      	mov	r1, r2
 8007478:	4618      	mov	r0, r3
 800747a:	f006 f972 	bl	800d762 <USB_ReadChInterrupts>
 800747e:	4603      	mov	r3, r0
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b04      	cmp	r3, #4
 8007486:	d11a      	bne.n	80074be <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	4413      	add	r3, r2
 8007490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007494:	461a      	mov	r2, r3
 8007496:	2304      	movs	r3, #4
 8007498:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800749a:	78fa      	ldrb	r2, [r7, #3]
 800749c:	6879      	ldr	r1, [r7, #4]
 800749e:	4613      	mov	r3, r2
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	1a9b      	subs	r3, r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	440b      	add	r3, r1
 80074a8:	334d      	adds	r3, #77	@ 0x4d
 80074aa:	2207      	movs	r2, #7
 80074ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	78fa      	ldrb	r2, [r7, #3]
 80074b4:	4611      	mov	r1, r2
 80074b6:	4618      	mov	r0, r3
 80074b8:	f006 fef7 	bl	800e2aa <USB_HC_Halt>
 80074bc:	e09e      	b.n	80075fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	78fa      	ldrb	r2, [r7, #3]
 80074c4:	4611      	mov	r1, r2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f006 f94b 	bl	800d762 <USB_ReadChInterrupts>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074d6:	d11b      	bne.n	8007510 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80074d8:	78fb      	ldrb	r3, [r7, #3]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074e4:	461a      	mov	r2, r3
 80074e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80074ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	4613      	mov	r3, r2
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	334d      	adds	r3, #77	@ 0x4d
 80074fc:	2208      	movs	r2, #8
 80074fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	78fa      	ldrb	r2, [r7, #3]
 8007506:	4611      	mov	r1, r2
 8007508:	4618      	mov	r0, r3
 800750a:	f006 fece 	bl	800e2aa <USB_HC_Halt>
 800750e:	e075      	b.n	80075fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	78fa      	ldrb	r2, [r7, #3]
 8007516:	4611      	mov	r1, r2
 8007518:	4618      	mov	r0, r3
 800751a:	f006 f922 	bl	800d762 <USB_ReadChInterrupts>
 800751e:	4603      	mov	r3, r0
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b08      	cmp	r3, #8
 8007526:	d11a      	bne.n	800755e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	4413      	add	r3, r2
 8007530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007534:	461a      	mov	r2, r3
 8007536:	2308      	movs	r3, #8
 8007538:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800753a:	78fa      	ldrb	r2, [r7, #3]
 800753c:	6879      	ldr	r1, [r7, #4]
 800753e:	4613      	mov	r3, r2
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	1a9b      	subs	r3, r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	440b      	add	r3, r1
 8007548:	334d      	adds	r3, #77	@ 0x4d
 800754a:	2206      	movs	r2, #6
 800754c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	78fa      	ldrb	r2, [r7, #3]
 8007554:	4611      	mov	r1, r2
 8007556:	4618      	mov	r0, r3
 8007558:	f006 fea7 	bl	800e2aa <USB_HC_Halt>
 800755c:	e04e      	b.n	80075fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f006 f8fb 	bl	800d762 <USB_ReadChInterrupts>
 800756c:	4603      	mov	r3, r0
 800756e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007576:	d11b      	bne.n	80075b0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007578:	78fb      	ldrb	r3, [r7, #3]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	4413      	add	r3, r2
 8007580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007584:	461a      	mov	r2, r3
 8007586:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800758a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800758c:	78fa      	ldrb	r2, [r7, #3]
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	4613      	mov	r3, r2
 8007592:	011b      	lsls	r3, r3, #4
 8007594:	1a9b      	subs	r3, r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	334d      	adds	r3, #77	@ 0x4d
 800759c:	2209      	movs	r2, #9
 800759e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f006 fe7e 	bl	800e2aa <USB_HC_Halt>
 80075ae:	e025      	b.n	80075fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	78fa      	ldrb	r2, [r7, #3]
 80075b6:	4611      	mov	r1, r2
 80075b8:	4618      	mov	r0, r3
 80075ba:	f006 f8d2 	bl	800d762 <USB_ReadChInterrupts>
 80075be:	4603      	mov	r3, r0
 80075c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c4:	2b80      	cmp	r3, #128	@ 0x80
 80075c6:	d119      	bne.n	80075fc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80075c8:	78fb      	ldrb	r3, [r7, #3]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075d4:	461a      	mov	r2, r3
 80075d6:	2380      	movs	r3, #128	@ 0x80
 80075d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80075da:	78fa      	ldrb	r2, [r7, #3]
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	011b      	lsls	r3, r3, #4
 80075e2:	1a9b      	subs	r3, r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	440b      	add	r3, r1
 80075e8:	334d      	adds	r3, #77	@ 0x4d
 80075ea:	2207      	movs	r2, #7
 80075ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	78fa      	ldrb	r2, [r7, #3]
 80075f4:	4611      	mov	r1, r2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f006 fe57 	bl	800e2aa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	78fa      	ldrb	r2, [r7, #3]
 8007602:	4611      	mov	r1, r2
 8007604:	4618      	mov	r0, r3
 8007606:	f006 f8ac 	bl	800d762 <USB_ReadChInterrupts>
 800760a:	4603      	mov	r3, r0
 800760c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007614:	d112      	bne.n	800763c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f006 fe43 	bl	800e2aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007624:	78fb      	ldrb	r3, [r7, #3]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	4413      	add	r3, r2
 800762c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007630:	461a      	mov	r2, r3
 8007632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007636:	6093      	str	r3, [r2, #8]
 8007638:	f000 bd75 	b.w	8008126 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	78fa      	ldrb	r2, [r7, #3]
 8007642:	4611      	mov	r1, r2
 8007644:	4618      	mov	r0, r3
 8007646:	f006 f88c 	bl	800d762 <USB_ReadChInterrupts>
 800764a:	4603      	mov	r3, r0
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b01      	cmp	r3, #1
 8007652:	f040 8128 	bne.w	80078a6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007656:	78fb      	ldrb	r3, [r7, #3]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4413      	add	r3, r2
 800765e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007662:	461a      	mov	r2, r3
 8007664:	2320      	movs	r3, #32
 8007666:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	4613      	mov	r3, r2
 800766e:	011b      	lsls	r3, r3, #4
 8007670:	1a9b      	subs	r3, r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	440b      	add	r3, r1
 8007676:	331b      	adds	r3, #27
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d119      	bne.n	80076b2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800767e:	78fa      	ldrb	r2, [r7, #3]
 8007680:	6879      	ldr	r1, [r7, #4]
 8007682:	4613      	mov	r3, r2
 8007684:	011b      	lsls	r3, r3, #4
 8007686:	1a9b      	subs	r3, r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	440b      	add	r3, r1
 800768c:	331b      	adds	r3, #27
 800768e:	2200      	movs	r2, #0
 8007690:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4413      	add	r3, r2
 800769a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	78fa      	ldrb	r2, [r7, #3]
 80076a2:	0151      	lsls	r1, r2, #5
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	440a      	add	r2, r1
 80076a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076b0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	799b      	ldrb	r3, [r3, #6]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01b      	beq.n	80076f2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80076ba:	78fa      	ldrb	r2, [r7, #3]
 80076bc:	6879      	ldr	r1, [r7, #4]
 80076be:	4613      	mov	r3, r2
 80076c0:	011b      	lsls	r3, r3, #4
 80076c2:	1a9b      	subs	r3, r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	440b      	add	r3, r1
 80076c8:	3330      	adds	r3, #48	@ 0x30
 80076ca:	6819      	ldr	r1, [r3, #0]
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076de:	78fa      	ldrb	r2, [r7, #3]
 80076e0:	1ac9      	subs	r1, r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4613      	mov	r3, r2
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	1a9b      	subs	r3, r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4403      	add	r3, r0
 80076ee:	3338      	adds	r3, #56	@ 0x38
 80076f0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80076f2:	78fa      	ldrb	r2, [r7, #3]
 80076f4:	6879      	ldr	r1, [r7, #4]
 80076f6:	4613      	mov	r3, r2
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	1a9b      	subs	r3, r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	440b      	add	r3, r1
 8007700:	334d      	adds	r3, #77	@ 0x4d
 8007702:	2201      	movs	r2, #1
 8007704:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8007706:	78fa      	ldrb	r2, [r7, #3]
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	4613      	mov	r3, r2
 800770c:	011b      	lsls	r3, r3, #4
 800770e:	1a9b      	subs	r3, r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	3344      	adds	r3, #68	@ 0x44
 8007716:	2200      	movs	r2, #0
 8007718:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	4413      	add	r3, r2
 8007722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007726:	461a      	mov	r2, r3
 8007728:	2301      	movs	r3, #1
 800772a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800772c:	78fa      	ldrb	r2, [r7, #3]
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	4613      	mov	r3, r2
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	1a9b      	subs	r3, r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	440b      	add	r3, r1
 800773a:	3326      	adds	r3, #38	@ 0x26
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007742:	78fa      	ldrb	r2, [r7, #3]
 8007744:	6879      	ldr	r1, [r7, #4]
 8007746:	4613      	mov	r3, r2
 8007748:	011b      	lsls	r3, r3, #4
 800774a:	1a9b      	subs	r3, r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	440b      	add	r3, r1
 8007750:	3326      	adds	r3, #38	@ 0x26
 8007752:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007754:	2b02      	cmp	r3, #2
 8007756:	d110      	bne.n	800777a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	78fa      	ldrb	r2, [r7, #3]
 800775e:	4611      	mov	r1, r2
 8007760:	4618      	mov	r0, r3
 8007762:	f006 fda2 	bl	800e2aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007766:	78fb      	ldrb	r3, [r7, #3]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	4413      	add	r3, r2
 800776e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007772:	461a      	mov	r2, r3
 8007774:	2310      	movs	r3, #16
 8007776:	6093      	str	r3, [r2, #8]
 8007778:	e03d      	b.n	80077f6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800777a:	78fa      	ldrb	r2, [r7, #3]
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	4613      	mov	r3, r2
 8007780:	011b      	lsls	r3, r3, #4
 8007782:	1a9b      	subs	r3, r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	440b      	add	r3, r1
 8007788:	3326      	adds	r3, #38	@ 0x26
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b03      	cmp	r3, #3
 800778e:	d00a      	beq.n	80077a6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8007790:	78fa      	ldrb	r2, [r7, #3]
 8007792:	6879      	ldr	r1, [r7, #4]
 8007794:	4613      	mov	r3, r2
 8007796:	011b      	lsls	r3, r3, #4
 8007798:	1a9b      	subs	r3, r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	3326      	adds	r3, #38	@ 0x26
 80077a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d127      	bne.n	80077f6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80077a6:	78fb      	ldrb	r3, [r7, #3]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	78fa      	ldrb	r2, [r7, #3]
 80077b6:	0151      	lsls	r1, r2, #5
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	440a      	add	r2, r1
 80077bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80077c4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80077c6:	78fa      	ldrb	r2, [r7, #3]
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	4613      	mov	r3, r2
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	1a9b      	subs	r3, r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	440b      	add	r3, r1
 80077d4:	334c      	adds	r3, #76	@ 0x4c
 80077d6:	2201      	movs	r2, #1
 80077d8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80077da:	78fa      	ldrb	r2, [r7, #3]
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4613      	mov	r3, r2
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	1a9b      	subs	r3, r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	334c      	adds	r3, #76	@ 0x4c
 80077ea:	781a      	ldrb	r2, [r3, #0]
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f009 fe15 	bl	8011420 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	799b      	ldrb	r3, [r3, #6]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d13b      	bne.n	8007876 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80077fe:	78fa      	ldrb	r2, [r7, #3]
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4613      	mov	r3, r2
 8007804:	011b      	lsls	r3, r3, #4
 8007806:	1a9b      	subs	r3, r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	440b      	add	r3, r1
 800780c:	3338      	adds	r3, #56	@ 0x38
 800780e:	6819      	ldr	r1, [r3, #0]
 8007810:	78fa      	ldrb	r2, [r7, #3]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4613      	mov	r3, r2
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	1a9b      	subs	r3, r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4403      	add	r3, r0
 800781e:	3328      	adds	r3, #40	@ 0x28
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	440b      	add	r3, r1
 8007824:	1e59      	subs	r1, r3, #1
 8007826:	78fa      	ldrb	r2, [r7, #3]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	1a9b      	subs	r3, r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4403      	add	r3, r0
 8007834:	3328      	adds	r3, #40	@ 0x28
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	fbb1 f3f3 	udiv	r3, r1, r3
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 8470 	beq.w	8008126 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8007846:	78fa      	ldrb	r2, [r7, #3]
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	4613      	mov	r3, r2
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	1a9b      	subs	r3, r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	440b      	add	r3, r1
 8007854:	333c      	adds	r3, #60	@ 0x3c
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	78fa      	ldrb	r2, [r7, #3]
 800785a:	f083 0301 	eor.w	r3, r3, #1
 800785e:	b2d8      	uxtb	r0, r3
 8007860:	6879      	ldr	r1, [r7, #4]
 8007862:	4613      	mov	r3, r2
 8007864:	011b      	lsls	r3, r3, #4
 8007866:	1a9b      	subs	r3, r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	440b      	add	r3, r1
 800786c:	333c      	adds	r3, #60	@ 0x3c
 800786e:	4602      	mov	r2, r0
 8007870:	701a      	strb	r2, [r3, #0]
 8007872:	f000 bc58 	b.w	8008126 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8007876:	78fa      	ldrb	r2, [r7, #3]
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	4613      	mov	r3, r2
 800787c:	011b      	lsls	r3, r3, #4
 800787e:	1a9b      	subs	r3, r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	440b      	add	r3, r1
 8007884:	333c      	adds	r3, #60	@ 0x3c
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	78fa      	ldrb	r2, [r7, #3]
 800788a:	f083 0301 	eor.w	r3, r3, #1
 800788e:	b2d8      	uxtb	r0, r3
 8007890:	6879      	ldr	r1, [r7, #4]
 8007892:	4613      	mov	r3, r2
 8007894:	011b      	lsls	r3, r3, #4
 8007896:	1a9b      	subs	r3, r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	440b      	add	r3, r1
 800789c:	333c      	adds	r3, #60	@ 0x3c
 800789e:	4602      	mov	r2, r0
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	f000 bc40 	b.w	8008126 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	78fa      	ldrb	r2, [r7, #3]
 80078ac:	4611      	mov	r1, r2
 80078ae:	4618      	mov	r0, r3
 80078b0:	f005 ff57 	bl	800d762 <USB_ReadChInterrupts>
 80078b4:	4603      	mov	r3, r0
 80078b6:	f003 0320 	and.w	r3, r3, #32
 80078ba:	2b20      	cmp	r3, #32
 80078bc:	d131      	bne.n	8007922 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ca:	461a      	mov	r2, r3
 80078cc:	2320      	movs	r3, #32
 80078ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80078d0:	78fa      	ldrb	r2, [r7, #3]
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	4613      	mov	r3, r2
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	1a9b      	subs	r3, r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	440b      	add	r3, r1
 80078de:	331a      	adds	r3, #26
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	f040 841f 	bne.w	8008126 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80078e8:	78fa      	ldrb	r2, [r7, #3]
 80078ea:	6879      	ldr	r1, [r7, #4]
 80078ec:	4613      	mov	r3, r2
 80078ee:	011b      	lsls	r3, r3, #4
 80078f0:	1a9b      	subs	r3, r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	440b      	add	r3, r1
 80078f6:	331b      	adds	r3, #27
 80078f8:	2201      	movs	r2, #1
 80078fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80078fc:	78fa      	ldrb	r2, [r7, #3]
 80078fe:	6879      	ldr	r1, [r7, #4]
 8007900:	4613      	mov	r3, r2
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	440b      	add	r3, r1
 800790a:	334d      	adds	r3, #77	@ 0x4d
 800790c:	2203      	movs	r2, #3
 800790e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	78fa      	ldrb	r2, [r7, #3]
 8007916:	4611      	mov	r1, r2
 8007918:	4618      	mov	r0, r3
 800791a:	f006 fcc6 	bl	800e2aa <USB_HC_Halt>
 800791e:	f000 bc02 	b.w	8008126 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	78fa      	ldrb	r2, [r7, #3]
 8007928:	4611      	mov	r1, r2
 800792a:	4618      	mov	r0, r3
 800792c:	f005 ff19 	bl	800d762 <USB_ReadChInterrupts>
 8007930:	4603      	mov	r3, r0
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b02      	cmp	r3, #2
 8007938:	f040 8305 	bne.w	8007f46 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800793c:	78fb      	ldrb	r3, [r7, #3]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	4413      	add	r3, r2
 8007944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007948:	461a      	mov	r2, r3
 800794a:	2302      	movs	r3, #2
 800794c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800794e:	78fa      	ldrb	r2, [r7, #3]
 8007950:	6879      	ldr	r1, [r7, #4]
 8007952:	4613      	mov	r3, r2
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	1a9b      	subs	r3, r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	440b      	add	r3, r1
 800795c:	334d      	adds	r3, #77	@ 0x4d
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d114      	bne.n	800798e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007964:	78fa      	ldrb	r2, [r7, #3]
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	4613      	mov	r3, r2
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	1a9b      	subs	r3, r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	440b      	add	r3, r1
 8007972:	334d      	adds	r3, #77	@ 0x4d
 8007974:	2202      	movs	r2, #2
 8007976:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007978:	78fa      	ldrb	r2, [r7, #3]
 800797a:	6879      	ldr	r1, [r7, #4]
 800797c:	4613      	mov	r3, r2
 800797e:	011b      	lsls	r3, r3, #4
 8007980:	1a9b      	subs	r3, r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	440b      	add	r3, r1
 8007986:	334c      	adds	r3, #76	@ 0x4c
 8007988:	2201      	movs	r2, #1
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	e2cc      	b.n	8007f28 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800798e:	78fa      	ldrb	r2, [r7, #3]
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	4613      	mov	r3, r2
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	1a9b      	subs	r3, r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	334d      	adds	r3, #77	@ 0x4d
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b06      	cmp	r3, #6
 80079a2:	d114      	bne.n	80079ce <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80079a4:	78fa      	ldrb	r2, [r7, #3]
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	4613      	mov	r3, r2
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	1a9b      	subs	r3, r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	334d      	adds	r3, #77	@ 0x4d
 80079b4:	2202      	movs	r2, #2
 80079b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80079b8:	78fa      	ldrb	r2, [r7, #3]
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	4613      	mov	r3, r2
 80079be:	011b      	lsls	r3, r3, #4
 80079c0:	1a9b      	subs	r3, r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	440b      	add	r3, r1
 80079c6:	334c      	adds	r3, #76	@ 0x4c
 80079c8:	2205      	movs	r2, #5
 80079ca:	701a      	strb	r2, [r3, #0]
 80079cc:	e2ac      	b.n	8007f28 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	4613      	mov	r3, r2
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	334d      	adds	r3, #77	@ 0x4d
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	2b07      	cmp	r3, #7
 80079e2:	d00b      	beq.n	80079fc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80079e4:	78fa      	ldrb	r2, [r7, #3]
 80079e6:	6879      	ldr	r1, [r7, #4]
 80079e8:	4613      	mov	r3, r2
 80079ea:	011b      	lsls	r3, r3, #4
 80079ec:	1a9b      	subs	r3, r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	440b      	add	r3, r1
 80079f2:	334d      	adds	r3, #77	@ 0x4d
 80079f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80079f6:	2b09      	cmp	r3, #9
 80079f8:	f040 80a6 	bne.w	8007b48 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80079fc:	78fa      	ldrb	r2, [r7, #3]
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	4613      	mov	r3, r2
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	1a9b      	subs	r3, r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	440b      	add	r3, r1
 8007a0a:	334d      	adds	r3, #77	@ 0x4d
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007a10:	78fa      	ldrb	r2, [r7, #3]
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4613      	mov	r3, r2
 8007a16:	011b      	lsls	r3, r3, #4
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	3344      	adds	r3, #68	@ 0x44
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	1c59      	adds	r1, r3, #1
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	011b      	lsls	r3, r3, #4
 8007a2a:	1a9b      	subs	r3, r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4403      	add	r3, r0
 8007a30:	3344      	adds	r3, #68	@ 0x44
 8007a32:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007a34:	78fa      	ldrb	r2, [r7, #3]
 8007a36:	6879      	ldr	r1, [r7, #4]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	3344      	adds	r3, #68	@ 0x44
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d943      	bls.n	8007ad2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007a4a:	78fa      	ldrb	r2, [r7, #3]
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	1a9b      	subs	r3, r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	440b      	add	r3, r1
 8007a58:	3344      	adds	r3, #68	@ 0x44
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8007a5e:	78fa      	ldrb	r2, [r7, #3]
 8007a60:	6879      	ldr	r1, [r7, #4]
 8007a62:	4613      	mov	r3, r2
 8007a64:	011b      	lsls	r3, r3, #4
 8007a66:	1a9b      	subs	r3, r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	440b      	add	r3, r1
 8007a6c:	331a      	adds	r3, #26
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d123      	bne.n	8007abc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8007a74:	78fa      	ldrb	r2, [r7, #3]
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	1a9b      	subs	r3, r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	440b      	add	r3, r1
 8007a82:	331b      	adds	r3, #27
 8007a84:	2200      	movs	r2, #0
 8007a86:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8007a88:	78fa      	ldrb	r2, [r7, #3]
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	1a9b      	subs	r3, r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	440b      	add	r3, r1
 8007a96:	331c      	adds	r3, #28
 8007a98:	2200      	movs	r2, #0
 8007a9a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	78fa      	ldrb	r2, [r7, #3]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aba:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007abc:	78fa      	ldrb	r2, [r7, #3]
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	011b      	lsls	r3, r3, #4
 8007ac4:	1a9b      	subs	r3, r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	440b      	add	r3, r1
 8007aca:	334c      	adds	r3, #76	@ 0x4c
 8007acc:	2204      	movs	r2, #4
 8007ace:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007ad0:	e229      	b.n	8007f26 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007ad2:	78fa      	ldrb	r2, [r7, #3]
 8007ad4:	6879      	ldr	r1, [r7, #4]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	1a9b      	subs	r3, r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	440b      	add	r3, r1
 8007ae0:	334c      	adds	r3, #76	@ 0x4c
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007ae6:	78fa      	ldrb	r2, [r7, #3]
 8007ae8:	6879      	ldr	r1, [r7, #4]
 8007aea:	4613      	mov	r3, r2
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	1a9b      	subs	r3, r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	440b      	add	r3, r1
 8007af4:	3326      	adds	r3, #38	@ 0x26
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007afc:	78fa      	ldrb	r2, [r7, #3]
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	4613      	mov	r3, r2
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	440b      	add	r3, r1
 8007b0a:	3326      	adds	r3, #38	@ 0x26
 8007b0c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	f040 8209 	bne.w	8007f26 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b2a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b32:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b40:	461a      	mov	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007b46:	e1ee      	b.n	8007f26 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007b48:	78fa      	ldrb	r2, [r7, #3]
 8007b4a:	6879      	ldr	r1, [r7, #4]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	1a9b      	subs	r3, r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	440b      	add	r3, r1
 8007b56:	334d      	adds	r3, #77	@ 0x4d
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b05      	cmp	r3, #5
 8007b5c:	f040 80c8 	bne.w	8007cf0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	4613      	mov	r3, r2
 8007b66:	011b      	lsls	r3, r3, #4
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	440b      	add	r3, r1
 8007b6e:	334d      	adds	r3, #77	@ 0x4d
 8007b70:	2202      	movs	r2, #2
 8007b72:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	1a9b      	subs	r3, r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	331b      	adds	r3, #27
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	f040 81ce 	bne.w	8007f28 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	4613      	mov	r3, r2
 8007b92:	011b      	lsls	r3, r3, #4
 8007b94:	1a9b      	subs	r3, r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	440b      	add	r3, r1
 8007b9a:	3326      	adds	r3, #38	@ 0x26
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d16b      	bne.n	8007c7a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8007ba2:	78fa      	ldrb	r2, [r7, #3]
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	011b      	lsls	r3, r3, #4
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	3348      	adds	r3, #72	@ 0x48
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	1c59      	adds	r1, r3, #1
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	1a9b      	subs	r3, r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4403      	add	r3, r0
 8007bc2:	3348      	adds	r3, #72	@ 0x48
 8007bc4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8007bc6:	78fa      	ldrb	r2, [r7, #3]
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	011b      	lsls	r3, r3, #4
 8007bce:	1a9b      	subs	r3, r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	440b      	add	r3, r1
 8007bd4:	3348      	adds	r3, #72	@ 0x48
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d943      	bls.n	8007c64 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8007bdc:	78fa      	ldrb	r2, [r7, #3]
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	4613      	mov	r3, r2
 8007be2:	011b      	lsls	r3, r3, #4
 8007be4:	1a9b      	subs	r3, r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	440b      	add	r3, r1
 8007bea:	3348      	adds	r3, #72	@ 0x48
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	1a9b      	subs	r3, r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	331b      	adds	r3, #27
 8007c00:	2200      	movs	r2, #0
 8007c02:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8007c04:	78fa      	ldrb	r2, [r7, #3]
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	1a9b      	subs	r3, r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	440b      	add	r3, r1
 8007c12:	3344      	adds	r3, #68	@ 0x44
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d809      	bhi.n	8007c2e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	011b      	lsls	r3, r3, #4
 8007c22:	1a9b      	subs	r3, r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	331c      	adds	r3, #28
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	78fa      	ldrb	r2, [r7, #3]
 8007c3e:	0151      	lsls	r1, r2, #5
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	440a      	add	r2, r1
 8007c44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c4c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8007c4e:	78fa      	ldrb	r2, [r7, #3]
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	4613      	mov	r3, r2
 8007c54:	011b      	lsls	r3, r3, #4
 8007c56:	1a9b      	subs	r3, r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	334c      	adds	r3, #76	@ 0x4c
 8007c5e:	2204      	movs	r2, #4
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e014      	b.n	8007c8e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007c64:	78fa      	ldrb	r2, [r7, #3]
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	1a9b      	subs	r3, r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	334c      	adds	r3, #76	@ 0x4c
 8007c74:	2202      	movs	r2, #2
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	e009      	b.n	8007c8e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	011b      	lsls	r3, r3, #4
 8007c82:	1a9b      	subs	r3, r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	440b      	add	r3, r1
 8007c88:	334c      	adds	r3, #76	@ 0x4c
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007c8e:	78fa      	ldrb	r2, [r7, #3]
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	4613      	mov	r3, r2
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	1a9b      	subs	r3, r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	3326      	adds	r3, #38	@ 0x26
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00b      	beq.n	8007cbc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007ca4:	78fa      	ldrb	r2, [r7, #3]
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	011b      	lsls	r3, r3, #4
 8007cac:	1a9b      	subs	r3, r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	440b      	add	r3, r1
 8007cb2:	3326      	adds	r3, #38	@ 0x26
 8007cb4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	f040 8136 	bne.w	8007f28 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007cbc:	78fb      	ldrb	r3, [r7, #3]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007cd2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cda:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007cdc:	78fb      	ldrb	r3, [r7, #3]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ce8:	461a      	mov	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	e11b      	b.n	8007f28 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007cf0:	78fa      	ldrb	r2, [r7, #3]
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	1a9b      	subs	r3, r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	440b      	add	r3, r1
 8007cfe:	334d      	adds	r3, #77	@ 0x4d
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	f040 8081 	bne.w	8007e0a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007d08:	78fa      	ldrb	r2, [r7, #3]
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	011b      	lsls	r3, r3, #4
 8007d10:	1a9b      	subs	r3, r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	440b      	add	r3, r1
 8007d16:	334d      	adds	r3, #77	@ 0x4d
 8007d18:	2202      	movs	r2, #2
 8007d1a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	6879      	ldr	r1, [r7, #4]
 8007d20:	4613      	mov	r3, r2
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	1a9b      	subs	r3, r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	440b      	add	r3, r1
 8007d2a:	331b      	adds	r3, #27
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	f040 80fa 	bne.w	8007f28 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	1a9b      	subs	r3, r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	334c      	adds	r3, #76	@ 0x4c
 8007d44:	2202      	movs	r2, #2
 8007d46:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	78fa      	ldrb	r2, [r7, #3]
 8007d58:	0151      	lsls	r1, r2, #5
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	440a      	add	r2, r1
 8007d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d66:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007d68:	78fb      	ldrb	r3, [r7, #3]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	78fa      	ldrb	r2, [r7, #3]
 8007d78:	0151      	lsls	r1, r2, #5
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	440a      	add	r2, r1
 8007d7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d86:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	78fa      	ldrb	r2, [r7, #3]
 8007d98:	0151      	lsls	r1, r2, #5
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	440a      	add	r2, r1
 8007d9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007da2:	f023 0320 	bic.w	r3, r3, #32
 8007da6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007da8:	78fa      	ldrb	r2, [r7, #3]
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	4613      	mov	r3, r2
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	3326      	adds	r3, #38	@ 0x26
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007dbe:	78fa      	ldrb	r2, [r7, #3]
 8007dc0:	6879      	ldr	r1, [r7, #4]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	011b      	lsls	r3, r3, #4
 8007dc6:	1a9b      	subs	r3, r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	440b      	add	r3, r1
 8007dcc:	3326      	adds	r3, #38	@ 0x26
 8007dce:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	f040 80a9 	bne.w	8007f28 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007dd6:	78fb      	ldrb	r3, [r7, #3]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007dec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007df4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e02:	461a      	mov	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	e08e      	b.n	8007f28 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007e0a:	78fa      	ldrb	r2, [r7, #3]
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	1a9b      	subs	r3, r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	440b      	add	r3, r1
 8007e18:	334d      	adds	r3, #77	@ 0x4d
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d143      	bne.n	8007ea8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007e20:	78fa      	ldrb	r2, [r7, #3]
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	4613      	mov	r3, r2
 8007e26:	011b      	lsls	r3, r3, #4
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	334d      	adds	r3, #77	@ 0x4d
 8007e30:	2202      	movs	r2, #2
 8007e32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007e34:	78fa      	ldrb	r2, [r7, #3]
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	1a9b      	subs	r3, r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	440b      	add	r3, r1
 8007e42:	334c      	adds	r3, #76	@ 0x4c
 8007e44:	2202      	movs	r2, #2
 8007e46:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e48:	78fa      	ldrb	r2, [r7, #3]
 8007e4a:	6879      	ldr	r1, [r7, #4]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	1a9b      	subs	r3, r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	440b      	add	r3, r1
 8007e56:	3326      	adds	r3, #38	@ 0x26
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00a      	beq.n	8007e74 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007e5e:	78fa      	ldrb	r2, [r7, #3]
 8007e60:	6879      	ldr	r1, [r7, #4]
 8007e62:	4613      	mov	r3, r2
 8007e64:	011b      	lsls	r3, r3, #4
 8007e66:	1a9b      	subs	r3, r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	440b      	add	r3, r1
 8007e6c:	3326      	adds	r3, #38	@ 0x26
 8007e6e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d159      	bne.n	8007f28 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e8a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e92:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	e03f      	b.n	8007f28 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8007ea8:	78fa      	ldrb	r2, [r7, #3]
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	4613      	mov	r3, r2
 8007eae:	011b      	lsls	r3, r3, #4
 8007eb0:	1a9b      	subs	r3, r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	334d      	adds	r3, #77	@ 0x4d
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b08      	cmp	r3, #8
 8007ebc:	d126      	bne.n	8007f0c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007ebe:	78fa      	ldrb	r2, [r7, #3]
 8007ec0:	6879      	ldr	r1, [r7, #4]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	011b      	lsls	r3, r3, #4
 8007ec6:	1a9b      	subs	r3, r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	440b      	add	r3, r1
 8007ecc:	334d      	adds	r3, #77	@ 0x4d
 8007ece:	2202      	movs	r2, #2
 8007ed0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007ed2:	78fa      	ldrb	r2, [r7, #3]
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	011b      	lsls	r3, r3, #4
 8007eda:	1a9b      	subs	r3, r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	440b      	add	r3, r1
 8007ee0:	3344      	adds	r3, #68	@ 0x44
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	1c59      	adds	r1, r3, #1
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	1a9b      	subs	r3, r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4403      	add	r3, r0
 8007ef2:	3344      	adds	r3, #68	@ 0x44
 8007ef4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8007ef6:	78fa      	ldrb	r2, [r7, #3]
 8007ef8:	6879      	ldr	r1, [r7, #4]
 8007efa:	4613      	mov	r3, r2
 8007efc:	011b      	lsls	r3, r3, #4
 8007efe:	1a9b      	subs	r3, r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	440b      	add	r3, r1
 8007f04:	334c      	adds	r3, #76	@ 0x4c
 8007f06:	2204      	movs	r2, #4
 8007f08:	701a      	strb	r2, [r3, #0]
 8007f0a:	e00d      	b.n	8007f28 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	4613      	mov	r3, r2
 8007f12:	011b      	lsls	r3, r3, #4
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	440b      	add	r3, r1
 8007f1a:	334d      	adds	r3, #77	@ 0x4d
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	f000 8100 	beq.w	8008124 <HCD_HC_IN_IRQHandler+0xcca>
 8007f24:	e000      	b.n	8007f28 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007f26:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007f28:	78fa      	ldrb	r2, [r7, #3]
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	1a9b      	subs	r3, r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	440b      	add	r3, r1
 8007f36:	334c      	adds	r3, #76	@ 0x4c
 8007f38:	781a      	ldrb	r2, [r3, #0]
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f009 fa6e 	bl	8011420 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007f44:	e0ef      	b.n	8008126 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	78fa      	ldrb	r2, [r7, #3]
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f005 fc07 	bl	800d762 <USB_ReadChInterrupts>
 8007f54:	4603      	mov	r3, r0
 8007f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5a:	2b40      	cmp	r3, #64	@ 0x40
 8007f5c:	d12f      	bne.n	8007fbe <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	2340      	movs	r3, #64	@ 0x40
 8007f6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	6879      	ldr	r1, [r7, #4]
 8007f74:	4613      	mov	r3, r2
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	1a9b      	subs	r3, r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	334d      	adds	r3, #77	@ 0x4d
 8007f80:	2205      	movs	r2, #5
 8007f82:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	1a9b      	subs	r3, r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	331a      	adds	r3, #26
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d109      	bne.n	8007fae <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	1a9b      	subs	r3, r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	3344      	adds	r3, #68	@ 0x44
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	78fa      	ldrb	r2, [r7, #3]
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f006 f977 	bl	800e2aa <USB_HC_Halt>
 8007fbc:	e0b3      	b.n	8008126 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	78fa      	ldrb	r2, [r7, #3]
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f005 fbcb 	bl	800d762 <USB_ReadChInterrupts>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	f003 0310 	and.w	r3, r3, #16
 8007fd2:	2b10      	cmp	r3, #16
 8007fd4:	f040 80a7 	bne.w	8008126 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007fd8:	78fa      	ldrb	r2, [r7, #3]
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	1a9b      	subs	r3, r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	3326      	adds	r3, #38	@ 0x26
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	2b03      	cmp	r3, #3
 8007fec:	d11b      	bne.n	8008026 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007fee:	78fa      	ldrb	r2, [r7, #3]
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	1a9b      	subs	r3, r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	3344      	adds	r3, #68	@ 0x44
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	4613      	mov	r3, r2
 8008008:	011b      	lsls	r3, r3, #4
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	440b      	add	r3, r1
 8008010:	334d      	adds	r3, #77	@ 0x4d
 8008012:	2204      	movs	r2, #4
 8008014:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	78fa      	ldrb	r2, [r7, #3]
 800801c:	4611      	mov	r1, r2
 800801e:	4618      	mov	r0, r3
 8008020:	f006 f943 	bl	800e2aa <USB_HC_Halt>
 8008024:	e03f      	b.n	80080a6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	6879      	ldr	r1, [r7, #4]
 800802a:	4613      	mov	r3, r2
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	1a9b      	subs	r3, r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	440b      	add	r3, r1
 8008034:	3326      	adds	r3, #38	@ 0x26
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800803c:	78fa      	ldrb	r2, [r7, #3]
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4613      	mov	r3, r2
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	1a9b      	subs	r3, r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	3326      	adds	r3, #38	@ 0x26
 800804c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800804e:	2b02      	cmp	r3, #2
 8008050:	d129      	bne.n	80080a6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008052:	78fa      	ldrb	r2, [r7, #3]
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	4613      	mov	r3, r2
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	440b      	add	r3, r1
 8008060:	3344      	adds	r3, #68	@ 0x44
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	799b      	ldrb	r3, [r3, #6]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <HCD_HC_IN_IRQHandler+0xc2a>
 800806e:	78fa      	ldrb	r2, [r7, #3]
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	011b      	lsls	r3, r3, #4
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	331b      	adds	r3, #27
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d110      	bne.n	80080a6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8008084:	78fa      	ldrb	r2, [r7, #3]
 8008086:	6879      	ldr	r1, [r7, #4]
 8008088:	4613      	mov	r3, r2
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	1a9b      	subs	r3, r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	440b      	add	r3, r1
 8008092:	334d      	adds	r3, #77	@ 0x4d
 8008094:	2204      	movs	r2, #4
 8008096:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	78fa      	ldrb	r2, [r7, #3]
 800809e:	4611      	mov	r1, r2
 80080a0:	4618      	mov	r0, r3
 80080a2:	f006 f902 	bl	800e2aa <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80080a6:	78fa      	ldrb	r2, [r7, #3]
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	4613      	mov	r3, r2
 80080ac:	011b      	lsls	r3, r3, #4
 80080ae:	1a9b      	subs	r3, r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	440b      	add	r3, r1
 80080b4:	331b      	adds	r3, #27
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d129      	bne.n	8008110 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80080bc:	78fa      	ldrb	r2, [r7, #3]
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	4613      	mov	r3, r2
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	1a9b      	subs	r3, r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	440b      	add	r3, r1
 80080ca:	331b      	adds	r3, #27
 80080cc:	2200      	movs	r2, #0
 80080ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	78fa      	ldrb	r2, [r7, #3]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080ee:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80080f0:	78fb      	ldrb	r3, [r7, #3]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	78fa      	ldrb	r2, [r7, #3]
 8008100:	0151      	lsls	r1, r2, #5
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	440a      	add	r2, r1
 8008106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800810a:	f043 0320 	orr.w	r3, r3, #32
 800810e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	4413      	add	r3, r2
 8008118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800811c:	461a      	mov	r2, r3
 800811e:	2310      	movs	r3, #16
 8008120:	6093      	str	r3, [r2, #8]
 8008122:	e000      	b.n	8008126 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8008124:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	4611      	mov	r1, r2
 800814a:	4618      	mov	r0, r3
 800814c:	f005 fb09 	bl	800d762 <USB_ReadChInterrupts>
 8008150:	4603      	mov	r3, r0
 8008152:	f003 0304 	and.w	r3, r3, #4
 8008156:	2b04      	cmp	r3, #4
 8008158:	d11b      	bne.n	8008192 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	4413      	add	r3, r2
 8008162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008166:	461a      	mov	r2, r3
 8008168:	2304      	movs	r3, #4
 800816a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800816c:	78fa      	ldrb	r2, [r7, #3]
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	4613      	mov	r3, r2
 8008172:	011b      	lsls	r3, r3, #4
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	334d      	adds	r3, #77	@ 0x4d
 800817c:	2207      	movs	r2, #7
 800817e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	4611      	mov	r1, r2
 8008188:	4618      	mov	r0, r3
 800818a:	f006 f88e 	bl	800e2aa <USB_HC_Halt>
 800818e:	f000 bc89 	b.w	8008aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	78fa      	ldrb	r2, [r7, #3]
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f005 fae1 	bl	800d762 <USB_ReadChInterrupts>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f003 0320 	and.w	r3, r3, #32
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	f040 8082 	bne.w	80082b0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081b8:	461a      	mov	r2, r3
 80081ba:	2320      	movs	r3, #32
 80081bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80081be:	78fa      	ldrb	r2, [r7, #3]
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	4613      	mov	r3, r2
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	1a9b      	subs	r3, r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	3319      	adds	r3, #25
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d124      	bne.n	800821e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80081d4:	78fa      	ldrb	r2, [r7, #3]
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	4613      	mov	r3, r2
 80081da:	011b      	lsls	r3, r3, #4
 80081dc:	1a9b      	subs	r3, r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	3319      	adds	r3, #25
 80081e4:	2200      	movs	r2, #0
 80081e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80081e8:	78fa      	ldrb	r2, [r7, #3]
 80081ea:	6879      	ldr	r1, [r7, #4]
 80081ec:	4613      	mov	r3, r2
 80081ee:	011b      	lsls	r3, r3, #4
 80081f0:	1a9b      	subs	r3, r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	440b      	add	r3, r1
 80081f6:	334c      	adds	r3, #76	@ 0x4c
 80081f8:	2202      	movs	r2, #2
 80081fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80081fc:	78fa      	ldrb	r2, [r7, #3]
 80081fe:	6879      	ldr	r1, [r7, #4]
 8008200:	4613      	mov	r3, r2
 8008202:	011b      	lsls	r3, r3, #4
 8008204:	1a9b      	subs	r3, r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	440b      	add	r3, r1
 800820a:	334d      	adds	r3, #77	@ 0x4d
 800820c:	2203      	movs	r2, #3
 800820e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	78fa      	ldrb	r2, [r7, #3]
 8008216:	4611      	mov	r1, r2
 8008218:	4618      	mov	r0, r3
 800821a:	f006 f846 	bl	800e2aa <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800821e:	78fa      	ldrb	r2, [r7, #3]
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	4613      	mov	r3, r2
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	1a9b      	subs	r3, r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	440b      	add	r3, r1
 800822c:	331a      	adds	r3, #26
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	2b01      	cmp	r3, #1
 8008232:	f040 8437 	bne.w	8008aa4 <HCD_HC_OUT_IRQHandler+0x978>
 8008236:	78fa      	ldrb	r2, [r7, #3]
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	4613      	mov	r3, r2
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	331b      	adds	r3, #27
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f040 842b 	bne.w	8008aa4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	4613      	mov	r3, r2
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	1a9b      	subs	r3, r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	440b      	add	r3, r1
 800825c:	3326      	adds	r3, #38	@ 0x26
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d009      	beq.n	8008278 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8008264:	78fa      	ldrb	r2, [r7, #3]
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	4613      	mov	r3, r2
 800826a:	011b      	lsls	r3, r3, #4
 800826c:	1a9b      	subs	r3, r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	440b      	add	r3, r1
 8008272:	331b      	adds	r3, #27
 8008274:	2201      	movs	r2, #1
 8008276:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8008278:	78fa      	ldrb	r2, [r7, #3]
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	4613      	mov	r3, r2
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	1a9b      	subs	r3, r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	440b      	add	r3, r1
 8008286:	334d      	adds	r3, #77	@ 0x4d
 8008288:	2203      	movs	r2, #3
 800828a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	78fa      	ldrb	r2, [r7, #3]
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f006 f808 	bl	800e2aa <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800829a:	78fa      	ldrb	r2, [r7, #3]
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	4613      	mov	r3, r2
 80082a0:	011b      	lsls	r3, r3, #4
 80082a2:	1a9b      	subs	r3, r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	440b      	add	r3, r1
 80082a8:	3344      	adds	r3, #68	@ 0x44
 80082aa:	2200      	movs	r2, #0
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	e3f9      	b.n	8008aa4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	78fa      	ldrb	r2, [r7, #3]
 80082b6:	4611      	mov	r1, r2
 80082b8:	4618      	mov	r0, r3
 80082ba:	f005 fa52 	bl	800d762 <USB_ReadChInterrupts>
 80082be:	4603      	mov	r3, r0
 80082c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082c8:	d111      	bne.n	80082ee <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082d6:	461a      	mov	r2, r3
 80082d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	4611      	mov	r1, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f005 ffdf 	bl	800e2aa <USB_HC_Halt>
 80082ec:	e3da      	b.n	8008aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	78fa      	ldrb	r2, [r7, #3]
 80082f4:	4611      	mov	r1, r2
 80082f6:	4618      	mov	r0, r3
 80082f8:	f005 fa33 	bl	800d762 <USB_ReadChInterrupts>
 80082fc:	4603      	mov	r3, r0
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b01      	cmp	r3, #1
 8008304:	d168      	bne.n	80083d8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008306:	78fa      	ldrb	r2, [r7, #3]
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	3344      	adds	r3, #68	@ 0x44
 8008316:	2200      	movs	r2, #0
 8008318:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	4611      	mov	r1, r2
 8008322:	4618      	mov	r0, r3
 8008324:	f005 fa1d 	bl	800d762 <USB_ReadChInterrupts>
 8008328:	4603      	mov	r3, r0
 800832a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800832e:	2b40      	cmp	r3, #64	@ 0x40
 8008330:	d112      	bne.n	8008358 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8008332:	78fa      	ldrb	r2, [r7, #3]
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	4613      	mov	r3, r2
 8008338:	011b      	lsls	r3, r3, #4
 800833a:	1a9b      	subs	r3, r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	440b      	add	r3, r1
 8008340:	3319      	adds	r3, #25
 8008342:	2201      	movs	r2, #1
 8008344:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	4413      	add	r3, r2
 800834e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008352:	461a      	mov	r2, r3
 8008354:	2340      	movs	r3, #64	@ 0x40
 8008356:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8008358:	78fa      	ldrb	r2, [r7, #3]
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	4613      	mov	r3, r2
 800835e:	011b      	lsls	r3, r3, #4
 8008360:	1a9b      	subs	r3, r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	440b      	add	r3, r1
 8008366:	331b      	adds	r3, #27
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d019      	beq.n	80083a2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800836e:	78fa      	ldrb	r2, [r7, #3]
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	4613      	mov	r3, r2
 8008374:	011b      	lsls	r3, r3, #4
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	331b      	adds	r3, #27
 800837e:	2200      	movs	r2, #0
 8008380:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	4413      	add	r3, r2
 800838a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	78fa      	ldrb	r2, [r7, #3]
 8008392:	0151      	lsls	r1, r2, #5
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	440a      	add	r2, r1
 8008398:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800839c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083a0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80083a2:	78fb      	ldrb	r3, [r7, #3]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083ae:	461a      	mov	r2, r3
 80083b0:	2301      	movs	r3, #1
 80083b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80083b4:	78fa      	ldrb	r2, [r7, #3]
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4613      	mov	r3, r2
 80083ba:	011b      	lsls	r3, r3, #4
 80083bc:	1a9b      	subs	r3, r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	334d      	adds	r3, #77	@ 0x4d
 80083c4:	2201      	movs	r2, #1
 80083c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	78fa      	ldrb	r2, [r7, #3]
 80083ce:	4611      	mov	r1, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f005 ff6a 	bl	800e2aa <USB_HC_Halt>
 80083d6:	e365      	b.n	8008aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	78fa      	ldrb	r2, [r7, #3]
 80083de:	4611      	mov	r1, r2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f005 f9be 	bl	800d762 <USB_ReadChInterrupts>
 80083e6:	4603      	mov	r3, r0
 80083e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ec:	2b40      	cmp	r3, #64	@ 0x40
 80083ee:	d139      	bne.n	8008464 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80083f0:	78fa      	ldrb	r2, [r7, #3]
 80083f2:	6879      	ldr	r1, [r7, #4]
 80083f4:	4613      	mov	r3, r2
 80083f6:	011b      	lsls	r3, r3, #4
 80083f8:	1a9b      	subs	r3, r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	440b      	add	r3, r1
 80083fe:	334d      	adds	r3, #77	@ 0x4d
 8008400:	2205      	movs	r2, #5
 8008402:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008404:	78fa      	ldrb	r2, [r7, #3]
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	4613      	mov	r3, r2
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	331a      	adds	r3, #26
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d109      	bne.n	800842e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800841a:	78fa      	ldrb	r2, [r7, #3]
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	1a9b      	subs	r3, r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	440b      	add	r3, r1
 8008428:	3319      	adds	r3, #25
 800842a:	2201      	movs	r2, #1
 800842c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800842e:	78fa      	ldrb	r2, [r7, #3]
 8008430:	6879      	ldr	r1, [r7, #4]
 8008432:	4613      	mov	r3, r2
 8008434:	011b      	lsls	r3, r3, #4
 8008436:	1a9b      	subs	r3, r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	440b      	add	r3, r1
 800843c:	3344      	adds	r3, #68	@ 0x44
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	4611      	mov	r1, r2
 800844a:	4618      	mov	r0, r3
 800844c:	f005 ff2d 	bl	800e2aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	4413      	add	r3, r2
 8008458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800845c:	461a      	mov	r2, r3
 800845e:	2340      	movs	r3, #64	@ 0x40
 8008460:	6093      	str	r3, [r2, #8]
 8008462:	e31f      	b.n	8008aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	78fa      	ldrb	r2, [r7, #3]
 800846a:	4611      	mov	r1, r2
 800846c:	4618      	mov	r0, r3
 800846e:	f005 f978 	bl	800d762 <USB_ReadChInterrupts>
 8008472:	4603      	mov	r3, r0
 8008474:	f003 0308 	and.w	r3, r3, #8
 8008478:	2b08      	cmp	r3, #8
 800847a:	d11a      	bne.n	80084b2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	4413      	add	r3, r2
 8008484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008488:	461a      	mov	r2, r3
 800848a:	2308      	movs	r3, #8
 800848c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800848e:	78fa      	ldrb	r2, [r7, #3]
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	4613      	mov	r3, r2
 8008494:	011b      	lsls	r3, r3, #4
 8008496:	1a9b      	subs	r3, r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	440b      	add	r3, r1
 800849c:	334d      	adds	r3, #77	@ 0x4d
 800849e:	2206      	movs	r2, #6
 80084a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	78fa      	ldrb	r2, [r7, #3]
 80084a8:	4611      	mov	r1, r2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f005 fefd 	bl	800e2aa <USB_HC_Halt>
 80084b0:	e2f8      	b.n	8008aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	78fa      	ldrb	r2, [r7, #3]
 80084b8:	4611      	mov	r1, r2
 80084ba:	4618      	mov	r0, r3
 80084bc:	f005 f951 	bl	800d762 <USB_ReadChInterrupts>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f003 0310 	and.w	r3, r3, #16
 80084c6:	2b10      	cmp	r3, #16
 80084c8:	d144      	bne.n	8008554 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80084ca:	78fa      	ldrb	r2, [r7, #3]
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	4613      	mov	r3, r2
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	1a9b      	subs	r3, r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	440b      	add	r3, r1
 80084d8:	3344      	adds	r3, #68	@ 0x44
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80084de:	78fa      	ldrb	r2, [r7, #3]
 80084e0:	6879      	ldr	r1, [r7, #4]
 80084e2:	4613      	mov	r3, r2
 80084e4:	011b      	lsls	r3, r3, #4
 80084e6:	1a9b      	subs	r3, r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	440b      	add	r3, r1
 80084ec:	334d      	adds	r3, #77	@ 0x4d
 80084ee:	2204      	movs	r2, #4
 80084f0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80084f2:	78fa      	ldrb	r2, [r7, #3]
 80084f4:	6879      	ldr	r1, [r7, #4]
 80084f6:	4613      	mov	r3, r2
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	1a9b      	subs	r3, r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	440b      	add	r3, r1
 8008500:	3319      	adds	r3, #25
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d114      	bne.n	8008532 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8008508:	78fa      	ldrb	r2, [r7, #3]
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	4613      	mov	r3, r2
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	1a9b      	subs	r3, r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	440b      	add	r3, r1
 8008516:	3318      	adds	r3, #24
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d109      	bne.n	8008532 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800851e:	78fa      	ldrb	r2, [r7, #3]
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	4613      	mov	r3, r2
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	1a9b      	subs	r3, r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	440b      	add	r3, r1
 800852c:	3319      	adds	r3, #25
 800852e:	2201      	movs	r2, #1
 8008530:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	78fa      	ldrb	r2, [r7, #3]
 8008538:	4611      	mov	r1, r2
 800853a:	4618      	mov	r0, r3
 800853c:	f005 feb5 	bl	800e2aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	4413      	add	r3, r2
 8008548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800854c:	461a      	mov	r2, r3
 800854e:	2310      	movs	r3, #16
 8008550:	6093      	str	r3, [r2, #8]
 8008552:	e2a7      	b.n	8008aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	78fa      	ldrb	r2, [r7, #3]
 800855a:	4611      	mov	r1, r2
 800855c:	4618      	mov	r0, r3
 800855e:	f005 f900 	bl	800d762 <USB_ReadChInterrupts>
 8008562:	4603      	mov	r3, r0
 8008564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008568:	2b80      	cmp	r3, #128	@ 0x80
 800856a:	f040 8083 	bne.w	8008674 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	799b      	ldrb	r3, [r3, #6]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d111      	bne.n	800859a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8008576:	78fa      	ldrb	r2, [r7, #3]
 8008578:	6879      	ldr	r1, [r7, #4]
 800857a:	4613      	mov	r3, r2
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	440b      	add	r3, r1
 8008584:	334d      	adds	r3, #77	@ 0x4d
 8008586:	2207      	movs	r2, #7
 8008588:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	78fa      	ldrb	r2, [r7, #3]
 8008590:	4611      	mov	r1, r2
 8008592:	4618      	mov	r0, r3
 8008594:	f005 fe89 	bl	800e2aa <USB_HC_Halt>
 8008598:	e062      	b.n	8008660 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800859a:	78fa      	ldrb	r2, [r7, #3]
 800859c:	6879      	ldr	r1, [r7, #4]
 800859e:	4613      	mov	r3, r2
 80085a0:	011b      	lsls	r3, r3, #4
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	440b      	add	r3, r1
 80085a8:	3344      	adds	r3, #68	@ 0x44
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	1c59      	adds	r1, r3, #1
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4613      	mov	r3, r2
 80085b2:	011b      	lsls	r3, r3, #4
 80085b4:	1a9b      	subs	r3, r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4403      	add	r3, r0
 80085ba:	3344      	adds	r3, #68	@ 0x44
 80085bc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	6879      	ldr	r1, [r7, #4]
 80085c2:	4613      	mov	r3, r2
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	1a9b      	subs	r3, r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	440b      	add	r3, r1
 80085cc:	3344      	adds	r3, #68	@ 0x44
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d922      	bls.n	800861a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80085d4:	78fa      	ldrb	r2, [r7, #3]
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4613      	mov	r3, r2
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	1a9b      	subs	r3, r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	3344      	adds	r3, #68	@ 0x44
 80085e4:	2200      	movs	r2, #0
 80085e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4613      	mov	r3, r2
 80085ee:	011b      	lsls	r3, r3, #4
 80085f0:	1a9b      	subs	r3, r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	334c      	adds	r3, #76	@ 0x4c
 80085f8:	2204      	movs	r2, #4
 80085fa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80085fc:	78fa      	ldrb	r2, [r7, #3]
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	4613      	mov	r3, r2
 8008602:	011b      	lsls	r3, r3, #4
 8008604:	1a9b      	subs	r3, r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	440b      	add	r3, r1
 800860a:	334c      	adds	r3, #76	@ 0x4c
 800860c:	781a      	ldrb	r2, [r3, #0]
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f008 ff04 	bl	8011420 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008618:	e022      	b.n	8008660 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	4613      	mov	r3, r2
 8008620:	011b      	lsls	r3, r3, #4
 8008622:	1a9b      	subs	r3, r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	440b      	add	r3, r1
 8008628:	334c      	adds	r3, #76	@ 0x4c
 800862a:	2202      	movs	r2, #2
 800862c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	4413      	add	r3, r2
 8008636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008644:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800864c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	015a      	lsls	r2, r3, #5
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	4413      	add	r3, r2
 8008656:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800865a:	461a      	mov	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	4413      	add	r3, r2
 8008668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800866c:	461a      	mov	r2, r3
 800866e:	2380      	movs	r3, #128	@ 0x80
 8008670:	6093      	str	r3, [r2, #8]
 8008672:	e217      	b.n	8008aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	78fa      	ldrb	r2, [r7, #3]
 800867a:	4611      	mov	r1, r2
 800867c:	4618      	mov	r0, r3
 800867e:	f005 f870 	bl	800d762 <USB_ReadChInterrupts>
 8008682:	4603      	mov	r3, r0
 8008684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800868c:	d11b      	bne.n	80086c6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800868e:	78fa      	ldrb	r2, [r7, #3]
 8008690:	6879      	ldr	r1, [r7, #4]
 8008692:	4613      	mov	r3, r2
 8008694:	011b      	lsls	r3, r3, #4
 8008696:	1a9b      	subs	r3, r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	440b      	add	r3, r1
 800869c:	334d      	adds	r3, #77	@ 0x4d
 800869e:	2209      	movs	r2, #9
 80086a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	78fa      	ldrb	r2, [r7, #3]
 80086a8:	4611      	mov	r1, r2
 80086aa:	4618      	mov	r0, r3
 80086ac:	f005 fdfd 	bl	800e2aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80086b0:	78fb      	ldrb	r3, [r7, #3]
 80086b2:	015a      	lsls	r2, r3, #5
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	4413      	add	r3, r2
 80086b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086bc:	461a      	mov	r2, r3
 80086be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086c2:	6093      	str	r3, [r2, #8]
 80086c4:	e1ee      	b.n	8008aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	78fa      	ldrb	r2, [r7, #3]
 80086cc:	4611      	mov	r1, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f005 f847 	bl	800d762 <USB_ReadChInterrupts>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b02      	cmp	r3, #2
 80086dc:	f040 81df 	bne.w	8008a9e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086ec:	461a      	mov	r2, r3
 80086ee:	2302      	movs	r3, #2
 80086f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	4613      	mov	r3, r2
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	1a9b      	subs	r3, r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	440b      	add	r3, r1
 8008700:	334d      	adds	r3, #77	@ 0x4d
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b01      	cmp	r3, #1
 8008706:	f040 8093 	bne.w	8008830 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800870a:	78fa      	ldrb	r2, [r7, #3]
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	4613      	mov	r3, r2
 8008710:	011b      	lsls	r3, r3, #4
 8008712:	1a9b      	subs	r3, r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	440b      	add	r3, r1
 8008718:	334d      	adds	r3, #77	@ 0x4d
 800871a:	2202      	movs	r2, #2
 800871c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800871e:	78fa      	ldrb	r2, [r7, #3]
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	4613      	mov	r3, r2
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	1a9b      	subs	r3, r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	440b      	add	r3, r1
 800872c:	334c      	adds	r3, #76	@ 0x4c
 800872e:	2201      	movs	r2, #1
 8008730:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008732:	78fa      	ldrb	r2, [r7, #3]
 8008734:	6879      	ldr	r1, [r7, #4]
 8008736:	4613      	mov	r3, r2
 8008738:	011b      	lsls	r3, r3, #4
 800873a:	1a9b      	subs	r3, r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	440b      	add	r3, r1
 8008740:	3326      	adds	r3, #38	@ 0x26
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	2b02      	cmp	r3, #2
 8008746:	d00b      	beq.n	8008760 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8008748:	78fa      	ldrb	r2, [r7, #3]
 800874a:	6879      	ldr	r1, [r7, #4]
 800874c:	4613      	mov	r3, r2
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	1a9b      	subs	r3, r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	440b      	add	r3, r1
 8008756:	3326      	adds	r3, #38	@ 0x26
 8008758:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800875a:	2b03      	cmp	r3, #3
 800875c:	f040 8190 	bne.w	8008a80 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	799b      	ldrb	r3, [r3, #6]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d115      	bne.n	8008794 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8008768:	78fa      	ldrb	r2, [r7, #3]
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	4613      	mov	r3, r2
 800876e:	011b      	lsls	r3, r3, #4
 8008770:	1a9b      	subs	r3, r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	440b      	add	r3, r1
 8008776:	333d      	adds	r3, #61	@ 0x3d
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	78fa      	ldrb	r2, [r7, #3]
 800877c:	f083 0301 	eor.w	r3, r3, #1
 8008780:	b2d8      	uxtb	r0, r3
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	4613      	mov	r3, r2
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	1a9b      	subs	r3, r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	333d      	adds	r3, #61	@ 0x3d
 8008790:	4602      	mov	r2, r0
 8008792:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	799b      	ldrb	r3, [r3, #6]
 8008798:	2b01      	cmp	r3, #1
 800879a:	f040 8171 	bne.w	8008a80 <HCD_HC_OUT_IRQHandler+0x954>
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	011b      	lsls	r3, r3, #4
 80087a6:	1a9b      	subs	r3, r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	3334      	adds	r3, #52	@ 0x34
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 8165 	beq.w	8008a80 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80087b6:	78fa      	ldrb	r2, [r7, #3]
 80087b8:	6879      	ldr	r1, [r7, #4]
 80087ba:	4613      	mov	r3, r2
 80087bc:	011b      	lsls	r3, r3, #4
 80087be:	1a9b      	subs	r3, r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	3334      	adds	r3, #52	@ 0x34
 80087c6:	6819      	ldr	r1, [r3, #0]
 80087c8:	78fa      	ldrb	r2, [r7, #3]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	4613      	mov	r3, r2
 80087ce:	011b      	lsls	r3, r3, #4
 80087d0:	1a9b      	subs	r3, r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4403      	add	r3, r0
 80087d6:	3328      	adds	r3, #40	@ 0x28
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	440b      	add	r3, r1
 80087dc:	1e59      	subs	r1, r3, #1
 80087de:	78fa      	ldrb	r2, [r7, #3]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	4613      	mov	r3, r2
 80087e4:	011b      	lsls	r3, r3, #4
 80087e6:	1a9b      	subs	r3, r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4403      	add	r3, r0
 80087ec:	3328      	adds	r3, #40	@ 0x28
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80087f4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 813f 	beq.w	8008a80 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8008802:	78fa      	ldrb	r2, [r7, #3]
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	4613      	mov	r3, r2
 8008808:	011b      	lsls	r3, r3, #4
 800880a:	1a9b      	subs	r3, r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
 8008810:	333d      	adds	r3, #61	@ 0x3d
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	78fa      	ldrb	r2, [r7, #3]
 8008816:	f083 0301 	eor.w	r3, r3, #1
 800881a:	b2d8      	uxtb	r0, r3
 800881c:	6879      	ldr	r1, [r7, #4]
 800881e:	4613      	mov	r3, r2
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	1a9b      	subs	r3, r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	440b      	add	r3, r1
 8008828:	333d      	adds	r3, #61	@ 0x3d
 800882a:	4602      	mov	r2, r0
 800882c:	701a      	strb	r2, [r3, #0]
 800882e:	e127      	b.n	8008a80 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008830:	78fa      	ldrb	r2, [r7, #3]
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	4613      	mov	r3, r2
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	1a9b      	subs	r3, r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	440b      	add	r3, r1
 800883e:	334d      	adds	r3, #77	@ 0x4d
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	2b03      	cmp	r3, #3
 8008844:	d120      	bne.n	8008888 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008846:	78fa      	ldrb	r2, [r7, #3]
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	4613      	mov	r3, r2
 800884c:	011b      	lsls	r3, r3, #4
 800884e:	1a9b      	subs	r3, r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	334d      	adds	r3, #77	@ 0x4d
 8008856:	2202      	movs	r2, #2
 8008858:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800885a:	78fa      	ldrb	r2, [r7, #3]
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	1a9b      	subs	r3, r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	331b      	adds	r3, #27
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b01      	cmp	r3, #1
 800886e:	f040 8107 	bne.w	8008a80 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008872:	78fa      	ldrb	r2, [r7, #3]
 8008874:	6879      	ldr	r1, [r7, #4]
 8008876:	4613      	mov	r3, r2
 8008878:	011b      	lsls	r3, r3, #4
 800887a:	1a9b      	subs	r3, r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	440b      	add	r3, r1
 8008880:	334c      	adds	r3, #76	@ 0x4c
 8008882:	2202      	movs	r2, #2
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	e0fb      	b.n	8008a80 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008888:	78fa      	ldrb	r2, [r7, #3]
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	4613      	mov	r3, r2
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	1a9b      	subs	r3, r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	440b      	add	r3, r1
 8008896:	334d      	adds	r3, #77	@ 0x4d
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b04      	cmp	r3, #4
 800889c:	d13a      	bne.n	8008914 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800889e:	78fa      	ldrb	r2, [r7, #3]
 80088a0:	6879      	ldr	r1, [r7, #4]
 80088a2:	4613      	mov	r3, r2
 80088a4:	011b      	lsls	r3, r3, #4
 80088a6:	1a9b      	subs	r3, r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	440b      	add	r3, r1
 80088ac:	334d      	adds	r3, #77	@ 0x4d
 80088ae:	2202      	movs	r2, #2
 80088b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80088b2:	78fa      	ldrb	r2, [r7, #3]
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	4613      	mov	r3, r2
 80088b8:	011b      	lsls	r3, r3, #4
 80088ba:	1a9b      	subs	r3, r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	440b      	add	r3, r1
 80088c0:	334c      	adds	r3, #76	@ 0x4c
 80088c2:	2202      	movs	r2, #2
 80088c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80088c6:	78fa      	ldrb	r2, [r7, #3]
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	4613      	mov	r3, r2
 80088cc:	011b      	lsls	r3, r3, #4
 80088ce:	1a9b      	subs	r3, r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	331b      	adds	r3, #27
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	f040 80d1 	bne.w	8008a80 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80088de:	78fa      	ldrb	r2, [r7, #3]
 80088e0:	6879      	ldr	r1, [r7, #4]
 80088e2:	4613      	mov	r3, r2
 80088e4:	011b      	lsls	r3, r3, #4
 80088e6:	1a9b      	subs	r3, r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	440b      	add	r3, r1
 80088ec:	331b      	adds	r3, #27
 80088ee:	2200      	movs	r2, #0
 80088f0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80088f2:	78fb      	ldrb	r3, [r7, #3]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	78fa      	ldrb	r2, [r7, #3]
 8008902:	0151      	lsls	r1, r2, #5
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	440a      	add	r2, r1
 8008908:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800890c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008910:	6053      	str	r3, [r2, #4]
 8008912:	e0b5      	b.n	8008a80 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008914:	78fa      	ldrb	r2, [r7, #3]
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	4613      	mov	r3, r2
 800891a:	011b      	lsls	r3, r3, #4
 800891c:	1a9b      	subs	r3, r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	440b      	add	r3, r1
 8008922:	334d      	adds	r3, #77	@ 0x4d
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	2b05      	cmp	r3, #5
 8008928:	d114      	bne.n	8008954 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	011b      	lsls	r3, r3, #4
 8008932:	1a9b      	subs	r3, r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	334d      	adds	r3, #77	@ 0x4d
 800893a:	2202      	movs	r2, #2
 800893c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4613      	mov	r3, r2
 8008944:	011b      	lsls	r3, r3, #4
 8008946:	1a9b      	subs	r3, r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	334c      	adds	r3, #76	@ 0x4c
 800894e:	2202      	movs	r2, #2
 8008950:	701a      	strb	r2, [r3, #0]
 8008952:	e095      	b.n	8008a80 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008954:	78fa      	ldrb	r2, [r7, #3]
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	4613      	mov	r3, r2
 800895a:	011b      	lsls	r3, r3, #4
 800895c:	1a9b      	subs	r3, r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	334d      	adds	r3, #77	@ 0x4d
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	2b06      	cmp	r3, #6
 8008968:	d114      	bne.n	8008994 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	4613      	mov	r3, r2
 8008970:	011b      	lsls	r3, r3, #4
 8008972:	1a9b      	subs	r3, r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	440b      	add	r3, r1
 8008978:	334d      	adds	r3, #77	@ 0x4d
 800897a:	2202      	movs	r2, #2
 800897c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800897e:	78fa      	ldrb	r2, [r7, #3]
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	4613      	mov	r3, r2
 8008984:	011b      	lsls	r3, r3, #4
 8008986:	1a9b      	subs	r3, r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	440b      	add	r3, r1
 800898c:	334c      	adds	r3, #76	@ 0x4c
 800898e:	2205      	movs	r2, #5
 8008990:	701a      	strb	r2, [r3, #0]
 8008992:	e075      	b.n	8008a80 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008994:	78fa      	ldrb	r2, [r7, #3]
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	4613      	mov	r3, r2
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	1a9b      	subs	r3, r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	440b      	add	r3, r1
 80089a2:	334d      	adds	r3, #77	@ 0x4d
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	2b07      	cmp	r3, #7
 80089a8:	d00a      	beq.n	80089c0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80089aa:	78fa      	ldrb	r2, [r7, #3]
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4613      	mov	r3, r2
 80089b0:	011b      	lsls	r3, r3, #4
 80089b2:	1a9b      	subs	r3, r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	334d      	adds	r3, #77	@ 0x4d
 80089ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80089bc:	2b09      	cmp	r3, #9
 80089be:	d170      	bne.n	8008aa2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	4613      	mov	r3, r2
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	1a9b      	subs	r3, r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	440b      	add	r3, r1
 80089ce:	334d      	adds	r3, #77	@ 0x4d
 80089d0:	2202      	movs	r2, #2
 80089d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80089d4:	78fa      	ldrb	r2, [r7, #3]
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	4613      	mov	r3, r2
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	1a9b      	subs	r3, r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	440b      	add	r3, r1
 80089e2:	3344      	adds	r3, #68	@ 0x44
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	1c59      	adds	r1, r3, #1
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	4613      	mov	r3, r2
 80089ec:	011b      	lsls	r3, r3, #4
 80089ee:	1a9b      	subs	r3, r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4403      	add	r3, r0
 80089f4:	3344      	adds	r3, #68	@ 0x44
 80089f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80089f8:	78fa      	ldrb	r2, [r7, #3]
 80089fa:	6879      	ldr	r1, [r7, #4]
 80089fc:	4613      	mov	r3, r2
 80089fe:	011b      	lsls	r3, r3, #4
 8008a00:	1a9b      	subs	r3, r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	3344      	adds	r3, #68	@ 0x44
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d914      	bls.n	8008a38 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008a0e:	78fa      	ldrb	r2, [r7, #3]
 8008a10:	6879      	ldr	r1, [r7, #4]
 8008a12:	4613      	mov	r3, r2
 8008a14:	011b      	lsls	r3, r3, #4
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	440b      	add	r3, r1
 8008a1c:	3344      	adds	r3, #68	@ 0x44
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008a22:	78fa      	ldrb	r2, [r7, #3]
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	440b      	add	r3, r1
 8008a30:	334c      	adds	r3, #76	@ 0x4c
 8008a32:	2204      	movs	r2, #4
 8008a34:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008a36:	e022      	b.n	8008a7e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008a38:	78fa      	ldrb	r2, [r7, #3]
 8008a3a:	6879      	ldr	r1, [r7, #4]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	011b      	lsls	r3, r3, #4
 8008a40:	1a9b      	subs	r3, r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	440b      	add	r3, r1
 8008a46:	334c      	adds	r3, #76	@ 0x4c
 8008a48:	2202      	movs	r2, #2
 8008a4a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008a4c:	78fb      	ldrb	r3, [r7, #3]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a62:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a6a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a78:	461a      	mov	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008a7e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008a80:	78fa      	ldrb	r2, [r7, #3]
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	4613      	mov	r3, r2
 8008a86:	011b      	lsls	r3, r3, #4
 8008a88:	1a9b      	subs	r3, r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	440b      	add	r3, r1
 8008a8e:	334c      	adds	r3, #76	@ 0x4c
 8008a90:	781a      	ldrb	r2, [r3, #0]
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f008 fcc2 	bl	8011420 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008a9c:	e002      	b.n	8008aa4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8008a9e:	bf00      	nop
 8008aa0:	e000      	b.n	8008aa4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8008aa2:	bf00      	nop
  }
}
 8008aa4:	3718      	adds	r7, #24
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b08a      	sub	sp, #40	@ 0x28
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	f003 030f 	and.w	r3, r3, #15
 8008aca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	0c5b      	lsrs	r3, r3, #17
 8008ad0:	f003 030f 	and.w	r3, r3, #15
 8008ad4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	091b      	lsrs	r3, r3, #4
 8008ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ade:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d004      	beq.n	8008af0 <HCD_RXQLVL_IRQHandler+0x46>
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2b05      	cmp	r3, #5
 8008aea:	f000 80b6 	beq.w	8008c5a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008aee:	e0b7      	b.n	8008c60 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 80b3 	beq.w	8008c5e <HCD_RXQLVL_IRQHandler+0x1b4>
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	4613      	mov	r3, r2
 8008afe:	011b      	lsls	r3, r3, #4
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	332c      	adds	r3, #44	@ 0x2c
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 80a7 	beq.w	8008c5e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8008b10:	6879      	ldr	r1, [r7, #4]
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	4613      	mov	r3, r2
 8008b16:	011b      	lsls	r3, r3, #4
 8008b18:	1a9b      	subs	r3, r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	440b      	add	r3, r1
 8008b1e:	3338      	adds	r3, #56	@ 0x38
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	18d1      	adds	r1, r2, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	011b      	lsls	r3, r3, #4
 8008b2e:	1a9b      	subs	r3, r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4403      	add	r3, r0
 8008b34:	3334      	adds	r3, #52	@ 0x34
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4299      	cmp	r1, r3
 8008b3a:	f200 8083 	bhi.w	8008c44 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6818      	ldr	r0, [r3, #0]
 8008b42:	6879      	ldr	r1, [r7, #4]
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	4613      	mov	r3, r2
 8008b48:	011b      	lsls	r3, r3, #4
 8008b4a:	1a9b      	subs	r3, r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	440b      	add	r3, r1
 8008b50:	332c      	adds	r3, #44	@ 0x2c
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	b292      	uxth	r2, r2
 8008b58:	4619      	mov	r1, r3
 8008b5a:	f004 fd97 	bl	800d68c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	4613      	mov	r3, r2
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	1a9b      	subs	r3, r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	440b      	add	r3, r1
 8008b6c:	332c      	adds	r3, #44	@ 0x2c
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	18d1      	adds	r1, r2, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	1a9b      	subs	r3, r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4403      	add	r3, r0
 8008b82:	332c      	adds	r3, #44	@ 0x2c
 8008b84:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	011b      	lsls	r3, r3, #4
 8008b8e:	1a9b      	subs	r3, r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	440b      	add	r3, r1
 8008b94:	3338      	adds	r3, #56	@ 0x38
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	18d1      	adds	r1, r2, r3
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	011b      	lsls	r3, r3, #4
 8008ba4:	1a9b      	subs	r3, r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4403      	add	r3, r0
 8008baa:	3338      	adds	r3, #56	@ 0x38
 8008bac:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	6a3b      	ldr	r3, [r7, #32]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	0cdb      	lsrs	r3, r3, #19
 8008bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bc2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8008bc4:	6879      	ldr	r1, [r7, #4]
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	011b      	lsls	r3, r3, #4
 8008bcc:	1a9b      	subs	r3, r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	440b      	add	r3, r1
 8008bd2:	3328      	adds	r3, #40	@ 0x28
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d13f      	bne.n	8008c5e <HCD_RXQLVL_IRQHandler+0x1b4>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d03c      	beq.n	8008c5e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008bfa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c02:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c10:	461a      	mov	r2, r3
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8008c16:	6879      	ldr	r1, [r7, #4]
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	011b      	lsls	r3, r3, #4
 8008c1e:	1a9b      	subs	r3, r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	440b      	add	r3, r1
 8008c24:	333c      	adds	r3, #60	@ 0x3c
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	f083 0301 	eor.w	r3, r3, #1
 8008c2c:	b2d8      	uxtb	r0, r3
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	4613      	mov	r3, r2
 8008c34:	011b      	lsls	r3, r3, #4
 8008c36:	1a9b      	subs	r3, r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	440b      	add	r3, r1
 8008c3c:	333c      	adds	r3, #60	@ 0x3c
 8008c3e:	4602      	mov	r2, r0
 8008c40:	701a      	strb	r2, [r3, #0]
      break;
 8008c42:	e00c      	b.n	8008c5e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8008c44:	6879      	ldr	r1, [r7, #4]
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	011b      	lsls	r3, r3, #4
 8008c4c:	1a9b      	subs	r3, r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	440b      	add	r3, r1
 8008c52:	334c      	adds	r3, #76	@ 0x4c
 8008c54:	2204      	movs	r2, #4
 8008c56:	701a      	strb	r2, [r3, #0]
      break;
 8008c58:	e001      	b.n	8008c5e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8008c5a:	bf00      	nop
 8008c5c:	e000      	b.n	8008c60 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8008c5e:	bf00      	nop
  }
}
 8008c60:	bf00      	nop
 8008c62:	3728      	adds	r7, #40	@ 0x28
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008c94:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d10b      	bne.n	8008cb8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d102      	bne.n	8008cb0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f008 fb9c 	bl	80113e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	f043 0302 	orr.w	r3, r3, #2
 8008cb6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f003 0308 	and.w	r3, r3, #8
 8008cbe:	2b08      	cmp	r3, #8
 8008cc0:	d132      	bne.n	8008d28 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	f043 0308 	orr.w	r3, r3, #8
 8008cc8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b04      	cmp	r3, #4
 8008cd2:	d126      	bne.n	8008d22 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	7a5b      	ldrb	r3, [r3, #9]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d113      	bne.n	8008d04 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008ce2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ce6:	d106      	bne.n	8008cf6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2102      	movs	r1, #2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f004 fe5c 	bl	800d9ac <USB_InitFSLSPClkSel>
 8008cf4:	e011      	b.n	8008d1a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f004 fe55 	bl	800d9ac <USB_InitFSLSPClkSel>
 8008d02:	e00a      	b.n	8008d1a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	79db      	ldrb	r3, [r3, #7]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d106      	bne.n	8008d1a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d12:	461a      	mov	r2, r3
 8008d14:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8008d18:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f008 fb8e 	bl	801143c <HAL_HCD_PortEnabled_Callback>
 8008d20:	e002      	b.n	8008d28 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f008 fb98 	bl	8011458 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d103      	bne.n	8008d3a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	f043 0320 	orr.w	r3, r3, #32
 8008d38:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008d40:	461a      	mov	r2, r3
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	6013      	str	r3, [r2, #0]
}
 8008d46:	bf00      	nop
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e12b      	b.n	8008fba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d106      	bne.n	8008d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7f9 fed2 	bl	8002b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2224      	movs	r2, #36	@ 0x24
 8008d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 0201 	bic.w	r2, r2, #1
 8008d92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008da2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008db2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008db4:	f002 f8ac 	bl	800af10 <HAL_RCC_GetPCLK1Freq>
 8008db8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	4a81      	ldr	r2, [pc, #516]	@ (8008fc4 <HAL_I2C_Init+0x274>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d807      	bhi.n	8008dd4 <HAL_I2C_Init+0x84>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	4a80      	ldr	r2, [pc, #512]	@ (8008fc8 <HAL_I2C_Init+0x278>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	bf94      	ite	ls
 8008dcc:	2301      	movls	r3, #1
 8008dce:	2300      	movhi	r3, #0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	e006      	b.n	8008de2 <HAL_I2C_Init+0x92>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4a7d      	ldr	r2, [pc, #500]	@ (8008fcc <HAL_I2C_Init+0x27c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	bf94      	ite	ls
 8008ddc:	2301      	movls	r3, #1
 8008dde:	2300      	movhi	r3, #0
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e0e7      	b.n	8008fba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4a78      	ldr	r2, [pc, #480]	@ (8008fd0 <HAL_I2C_Init+0x280>)
 8008dee:	fba2 2303 	umull	r2, r3, r2, r3
 8008df2:	0c9b      	lsrs	r3, r3, #18
 8008df4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	4a6a      	ldr	r2, [pc, #424]	@ (8008fc4 <HAL_I2C_Init+0x274>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d802      	bhi.n	8008e24 <HAL_I2C_Init+0xd4>
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	3301      	adds	r3, #1
 8008e22:	e009      	b.n	8008e38 <HAL_I2C_Init+0xe8>
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008e2a:	fb02 f303 	mul.w	r3, r2, r3
 8008e2e:	4a69      	ldr	r2, [pc, #420]	@ (8008fd4 <HAL_I2C_Init+0x284>)
 8008e30:	fba2 2303 	umull	r2, r3, r2, r3
 8008e34:	099b      	lsrs	r3, r3, #6
 8008e36:	3301      	adds	r3, #1
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	6812      	ldr	r2, [r2, #0]
 8008e3c:	430b      	orrs	r3, r1
 8008e3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008e4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	495c      	ldr	r1, [pc, #368]	@ (8008fc4 <HAL_I2C_Init+0x274>)
 8008e54:	428b      	cmp	r3, r1
 8008e56:	d819      	bhi.n	8008e8c <HAL_I2C_Init+0x13c>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	1e59      	subs	r1, r3, #1
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	005b      	lsls	r3, r3, #1
 8008e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e66:	1c59      	adds	r1, r3, #1
 8008e68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008e6c:	400b      	ands	r3, r1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00a      	beq.n	8008e88 <HAL_I2C_Init+0x138>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	1e59      	subs	r1, r3, #1
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e80:	3301      	adds	r3, #1
 8008e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e86:	e051      	b.n	8008f2c <HAL_I2C_Init+0x1dc>
 8008e88:	2304      	movs	r3, #4
 8008e8a:	e04f      	b.n	8008f2c <HAL_I2C_Init+0x1dc>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d111      	bne.n	8008eb8 <HAL_I2C_Init+0x168>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	1e58      	subs	r0, r3, #1
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6859      	ldr	r1, [r3, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	005b      	lsls	r3, r3, #1
 8008ea0:	440b      	add	r3, r1
 8008ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	bf0c      	ite	eq
 8008eb0:	2301      	moveq	r3, #1
 8008eb2:	2300      	movne	r3, #0
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	e012      	b.n	8008ede <HAL_I2C_Init+0x18e>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	1e58      	subs	r0, r3, #1
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6859      	ldr	r1, [r3, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	0099      	lsls	r1, r3, #2
 8008ec8:	440b      	add	r3, r1
 8008eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ece:	3301      	adds	r3, #1
 8008ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bf0c      	ite	eq
 8008ed8:	2301      	moveq	r3, #1
 8008eda:	2300      	movne	r3, #0
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <HAL_I2C_Init+0x196>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e022      	b.n	8008f2c <HAL_I2C_Init+0x1dc>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10e      	bne.n	8008f0c <HAL_I2C_Init+0x1bc>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	1e58      	subs	r0, r3, #1
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6859      	ldr	r1, [r3, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	440b      	add	r3, r1
 8008efc:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f00:	3301      	adds	r3, #1
 8008f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f0a:	e00f      	b.n	8008f2c <HAL_I2C_Init+0x1dc>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	1e58      	subs	r0, r3, #1
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6859      	ldr	r1, [r3, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	440b      	add	r3, r1
 8008f1a:	0099      	lsls	r1, r3, #2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f22:	3301      	adds	r3, #1
 8008f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	6809      	ldr	r1, [r1, #0]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	69da      	ldr	r2, [r3, #28]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008f5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6911      	ldr	r1, [r2, #16]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	68d2      	ldr	r2, [r2, #12]
 8008f66:	4311      	orrs	r1, r2
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	6812      	ldr	r2, [r2, #0]
 8008f6c:	430b      	orrs	r3, r1
 8008f6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	695a      	ldr	r2, [r3, #20]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	431a      	orrs	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 0201 	orr.w	r2, r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	000186a0 	.word	0x000186a0
 8008fc8:	001e847f 	.word	0x001e847f
 8008fcc:	003d08ff 	.word	0x003d08ff
 8008fd0:	431bde83 	.word	0x431bde83
 8008fd4:	10624dd3 	.word	0x10624dd3

08008fd8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d101      	bne.n	8008fea <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e021      	b.n	800902e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2224      	movs	r2, #36	@ 0x24
 8008fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f022 0201 	bic.w	r2, r2, #1
 8009000:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7f9 fdf6 	bl	8002bf4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af02      	add	r7, sp, #8
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	4608      	mov	r0, r1
 8009042:	4611      	mov	r1, r2
 8009044:	461a      	mov	r2, r3
 8009046:	4603      	mov	r3, r0
 8009048:	817b      	strh	r3, [r7, #10]
 800904a:	460b      	mov	r3, r1
 800904c:	813b      	strh	r3, [r7, #8]
 800904e:	4613      	mov	r3, r2
 8009050:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009052:	f7fc f9db 	bl	800540c <HAL_GetTick>
 8009056:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b20      	cmp	r3, #32
 8009062:	f040 80d9 	bne.w	8009218 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	2319      	movs	r3, #25
 800906c:	2201      	movs	r2, #1
 800906e:	496d      	ldr	r1, [pc, #436]	@ (8009224 <HAL_I2C_Mem_Write+0x1ec>)
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fc99 	bl	80099a8 <I2C_WaitOnFlagUntilTimeout>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800907c:	2302      	movs	r3, #2
 800907e:	e0cc      	b.n	800921a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009086:	2b01      	cmp	r3, #1
 8009088:	d101      	bne.n	800908e <HAL_I2C_Mem_Write+0x56>
 800908a:	2302      	movs	r3, #2
 800908c:	e0c5      	b.n	800921a <HAL_I2C_Mem_Write+0x1e2>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d007      	beq.n	80090b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f042 0201 	orr.w	r2, r2, #1
 80090b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2221      	movs	r2, #33	@ 0x21
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2240      	movs	r2, #64	@ 0x40
 80090d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6a3a      	ldr	r2, [r7, #32]
 80090de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80090e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4a4d      	ldr	r2, [pc, #308]	@ (8009228 <HAL_I2C_Mem_Write+0x1f0>)
 80090f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090f6:	88f8      	ldrh	r0, [r7, #6]
 80090f8:	893a      	ldrh	r2, [r7, #8]
 80090fa:	8979      	ldrh	r1, [r7, #10]
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	4603      	mov	r3, r0
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 fad0 	bl	80096ac <I2C_RequestMemoryWrite>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d052      	beq.n	80091b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e081      	b.n	800921a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f000 fd5e 	bl	8009bdc <I2C_WaitOnTXEFlagUntilTimeout>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00d      	beq.n	8009142 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800912a:	2b04      	cmp	r3, #4
 800912c:	d107      	bne.n	800913e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800913c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e06b      	b.n	800921a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009146:	781a      	ldrb	r2, [r3, #0]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009152:	1c5a      	adds	r2, r3, #1
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800915c:	3b01      	subs	r3, #1
 800915e:	b29a      	uxth	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009168:	b29b      	uxth	r3, r3
 800916a:	3b01      	subs	r3, #1
 800916c:	b29a      	uxth	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b04      	cmp	r3, #4
 800917e:	d11b      	bne.n	80091b8 <HAL_I2C_Mem_Write+0x180>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009184:	2b00      	cmp	r3, #0
 8009186:	d017      	beq.n	80091b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918c:	781a      	ldrb	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091a2:	3b01      	subs	r3, #1
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	3b01      	subs	r3, #1
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1aa      	bne.n	8009116 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 fd51 	bl	8009c6c <I2C_WaitOnBTFFlagUntilTimeout>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00d      	beq.n	80091ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	d107      	bne.n	80091e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e016      	b.n	800921a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2220      	movs	r2, #32
 8009200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	e000      	b.n	800921a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009218:	2302      	movs	r3, #2
  }
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	00100002 	.word	0x00100002
 8009228:	ffff0000 	.word	0xffff0000

0800922c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08c      	sub	sp, #48	@ 0x30
 8009230:	af02      	add	r7, sp, #8
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	4608      	mov	r0, r1
 8009236:	4611      	mov	r1, r2
 8009238:	461a      	mov	r2, r3
 800923a:	4603      	mov	r3, r0
 800923c:	817b      	strh	r3, [r7, #10]
 800923e:	460b      	mov	r3, r1
 8009240:	813b      	strh	r3, [r7, #8]
 8009242:	4613      	mov	r3, r2
 8009244:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009246:	f7fc f8e1 	bl	800540c <HAL_GetTick>
 800924a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b20      	cmp	r3, #32
 8009256:	f040 8214 	bne.w	8009682 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800925a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	2319      	movs	r3, #25
 8009260:	2201      	movs	r2, #1
 8009262:	497b      	ldr	r1, [pc, #492]	@ (8009450 <HAL_I2C_Mem_Read+0x224>)
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 fb9f 	bl	80099a8 <I2C_WaitOnFlagUntilTimeout>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009270:	2302      	movs	r3, #2
 8009272:	e207      	b.n	8009684 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800927a:	2b01      	cmp	r3, #1
 800927c:	d101      	bne.n	8009282 <HAL_I2C_Mem_Read+0x56>
 800927e:	2302      	movs	r3, #2
 8009280:	e200      	b.n	8009684 <HAL_I2C_Mem_Read+0x458>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	2b01      	cmp	r3, #1
 8009296:	d007      	beq.n	80092a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 0201 	orr.w	r2, r2, #1
 80092a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80092b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2222      	movs	r2, #34	@ 0x22
 80092bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2240      	movs	r2, #64	@ 0x40
 80092c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80092d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092de:	b29a      	uxth	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4a5b      	ldr	r2, [pc, #364]	@ (8009454 <HAL_I2C_Mem_Read+0x228>)
 80092e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092ea:	88f8      	ldrh	r0, [r7, #6]
 80092ec:	893a      	ldrh	r2, [r7, #8]
 80092ee:	8979      	ldrh	r1, [r7, #10]
 80092f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	4603      	mov	r3, r0
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 fa6c 	bl	80097d8 <I2C_RequestMemoryRead>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e1bc      	b.n	8009684 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800930e:	2b00      	cmp	r3, #0
 8009310:	d113      	bne.n	800933a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009312:	2300      	movs	r3, #0
 8009314:	623b      	str	r3, [r7, #32]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	623b      	str	r3, [r7, #32]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	623b      	str	r3, [r7, #32]
 8009326:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	e190      	b.n	800965c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800933e:	2b01      	cmp	r3, #1
 8009340:	d11b      	bne.n	800937a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009352:	2300      	movs	r3, #0
 8009354:	61fb      	str	r3, [r7, #28]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	695b      	ldr	r3, [r3, #20]
 800935c:	61fb      	str	r3, [r7, #28]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	61fb      	str	r3, [r7, #28]
 8009366:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	e170      	b.n	800965c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800937e:	2b02      	cmp	r3, #2
 8009380:	d11b      	bne.n	80093ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009390:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093a2:	2300      	movs	r3, #0
 80093a4:	61bb      	str	r3, [r7, #24]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	61bb      	str	r3, [r7, #24]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	61bb      	str	r3, [r7, #24]
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	e150      	b.n	800965c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093ba:	2300      	movs	r3, #0
 80093bc:	617b      	str	r3, [r7, #20]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	695b      	ldr	r3, [r3, #20]
 80093c4:	617b      	str	r3, [r7, #20]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	617b      	str	r3, [r7, #20]
 80093ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80093d0:	e144      	b.n	800965c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	f200 80f1 	bhi.w	80095be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d123      	bne.n	800942c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 fc87 	bl	8009cfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e145      	b.n	8009684 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	691a      	ldr	r2, [r3, #16]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009402:	b2d2      	uxtb	r2, r2
 8009404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009414:	3b01      	subs	r3, #1
 8009416:	b29a      	uxth	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009420:	b29b      	uxth	r3, r3
 8009422:	3b01      	subs	r3, #1
 8009424:	b29a      	uxth	r2, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800942a:	e117      	b.n	800965c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009430:	2b02      	cmp	r3, #2
 8009432:	d14e      	bne.n	80094d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943a:	2200      	movs	r2, #0
 800943c:	4906      	ldr	r1, [pc, #24]	@ (8009458 <HAL_I2C_Mem_Read+0x22c>)
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 fab2 	bl	80099a8 <I2C_WaitOnFlagUntilTimeout>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d008      	beq.n	800945c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e11a      	b.n	8009684 <HAL_I2C_Mem_Read+0x458>
 800944e:	bf00      	nop
 8009450:	00100002 	.word	0x00100002
 8009454:	ffff0000 	.word	0xffff0000
 8009458:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800946a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691a      	ldr	r2, [r3, #16]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009476:	b2d2      	uxtb	r2, r2
 8009478:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009488:	3b01      	subs	r3, #1
 800948a:	b29a      	uxth	r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009494:	b29b      	uxth	r3, r3
 8009496:	3b01      	subs	r3, #1
 8009498:	b29a      	uxth	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	691a      	ldr	r2, [r3, #16]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a8:	b2d2      	uxtb	r2, r2
 80094aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b0:	1c5a      	adds	r2, r3, #1
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094ba:	3b01      	subs	r3, #1
 80094bc:	b29a      	uxth	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80094d0:	e0c4      	b.n	800965c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80094d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d8:	2200      	movs	r2, #0
 80094da:	496c      	ldr	r1, [pc, #432]	@ (800968c <HAL_I2C_Mem_Read+0x460>)
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f000 fa63 	bl	80099a8 <I2C_WaitOnFlagUntilTimeout>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d001      	beq.n	80094ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e0cb      	b.n	8009684 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	691a      	ldr	r2, [r3, #16]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009506:	b2d2      	uxtb	r2, r2
 8009508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009518:	3b01      	subs	r3, #1
 800951a:	b29a      	uxth	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009524:	b29b      	uxth	r3, r3
 8009526:	3b01      	subs	r3, #1
 8009528:	b29a      	uxth	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800952e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009534:	2200      	movs	r2, #0
 8009536:	4955      	ldr	r1, [pc, #340]	@ (800968c <HAL_I2C_Mem_Read+0x460>)
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 fa35 	bl	80099a8 <I2C_WaitOnFlagUntilTimeout>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e09d      	b.n	8009684 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009556:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	691a      	ldr	r2, [r3, #16]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009562:	b2d2      	uxtb	r2, r2
 8009564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009574:	3b01      	subs	r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009580:	b29b      	uxth	r3, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	b29a      	uxth	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	691a      	ldr	r2, [r3, #16]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009594:	b2d2      	uxtb	r2, r2
 8009596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095a6:	3b01      	subs	r3, #1
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	3b01      	subs	r3, #1
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80095bc:	e04e      	b.n	800965c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f000 fb9a 	bl	8009cfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e058      	b.n	8009684 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	691a      	ldr	r2, [r3, #16]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095dc:	b2d2      	uxtb	r2, r2
 80095de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095ee:	3b01      	subs	r3, #1
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	3b01      	subs	r3, #1
 80095fe:	b29a      	uxth	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	f003 0304 	and.w	r3, r3, #4
 800960e:	2b04      	cmp	r3, #4
 8009610:	d124      	bne.n	800965c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009616:	2b03      	cmp	r3, #3
 8009618:	d107      	bne.n	800962a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009628:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	691a      	ldr	r2, [r3, #16]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009634:	b2d2      	uxtb	r2, r2
 8009636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800963c:	1c5a      	adds	r2, r3, #1
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009646:	3b01      	subs	r3, #1
 8009648:	b29a      	uxth	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009652:	b29b      	uxth	r3, r3
 8009654:	3b01      	subs	r3, #1
 8009656:	b29a      	uxth	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009660:	2b00      	cmp	r3, #0
 8009662:	f47f aeb6 	bne.w	80093d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2220      	movs	r2, #32
 800966a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	e000      	b.n	8009684 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009682:	2302      	movs	r3, #2
  }
}
 8009684:	4618      	mov	r0, r3
 8009686:	3728      	adds	r7, #40	@ 0x28
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	00010004 	.word	0x00010004

08009690 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800969e:	b2db      	uxtb	r3, r3
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b088      	sub	sp, #32
 80096b0:	af02      	add	r7, sp, #8
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	4608      	mov	r0, r1
 80096b6:	4611      	mov	r1, r2
 80096b8:	461a      	mov	r2, r3
 80096ba:	4603      	mov	r3, r0
 80096bc:	817b      	strh	r3, [r7, #10]
 80096be:	460b      	mov	r3, r1
 80096c0:	813b      	strh	r3, [r7, #8]
 80096c2:	4613      	mov	r3, r2
 80096c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80096d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80096d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	6a3b      	ldr	r3, [r7, #32]
 80096dc:	2200      	movs	r2, #0
 80096de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 f960 	bl	80099a8 <I2C_WaitOnFlagUntilTimeout>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00d      	beq.n	800970a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096fc:	d103      	bne.n	8009706 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009704:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e05f      	b.n	80097ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800970a:	897b      	ldrh	r3, [r7, #10]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	461a      	mov	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009718:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800971a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971c:	6a3a      	ldr	r2, [r7, #32]
 800971e:	492d      	ldr	r1, [pc, #180]	@ (80097d4 <I2C_RequestMemoryWrite+0x128>)
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 f9bb 	bl	8009a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e04c      	b.n	80097ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009730:	2300      	movs	r3, #0
 8009732:	617b      	str	r3, [r7, #20]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	617b      	str	r3, [r7, #20]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	617b      	str	r3, [r7, #20]
 8009744:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009748:	6a39      	ldr	r1, [r7, #32]
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f000 fa46 	bl	8009bdc <I2C_WaitOnTXEFlagUntilTimeout>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00d      	beq.n	8009772 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975a:	2b04      	cmp	r3, #4
 800975c:	d107      	bne.n	800976e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800976c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e02b      	b.n	80097ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009772:	88fb      	ldrh	r3, [r7, #6]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d105      	bne.n	8009784 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009778:	893b      	ldrh	r3, [r7, #8]
 800977a:	b2da      	uxtb	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	611a      	str	r2, [r3, #16]
 8009782:	e021      	b.n	80097c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009784:	893b      	ldrh	r3, [r7, #8]
 8009786:	0a1b      	lsrs	r3, r3, #8
 8009788:	b29b      	uxth	r3, r3
 800978a:	b2da      	uxtb	r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009794:	6a39      	ldr	r1, [r7, #32]
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f000 fa20 	bl	8009bdc <I2C_WaitOnTXEFlagUntilTimeout>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00d      	beq.n	80097be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d107      	bne.n	80097ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e005      	b.n	80097ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80097be:	893b      	ldrh	r3, [r7, #8]
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	00010002 	.word	0x00010002

080097d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b088      	sub	sp, #32
 80097dc:	af02      	add	r7, sp, #8
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	4608      	mov	r0, r1
 80097e2:	4611      	mov	r1, r2
 80097e4:	461a      	mov	r2, r3
 80097e6:	4603      	mov	r3, r0
 80097e8:	817b      	strh	r3, [r7, #10]
 80097ea:	460b      	mov	r3, r1
 80097ec:	813b      	strh	r3, [r7, #8]
 80097ee:	4613      	mov	r3, r2
 80097f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009800:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009810:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	6a3b      	ldr	r3, [r7, #32]
 8009818:	2200      	movs	r2, #0
 800981a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 f8c2 	bl	80099a8 <I2C_WaitOnFlagUntilTimeout>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00d      	beq.n	8009846 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009838:	d103      	bne.n	8009842 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009840:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	e0aa      	b.n	800999c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009846:	897b      	ldrh	r3, [r7, #10]
 8009848:	b2db      	uxtb	r3, r3
 800984a:	461a      	mov	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009854:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009858:	6a3a      	ldr	r2, [r7, #32]
 800985a:	4952      	ldr	r1, [pc, #328]	@ (80099a4 <I2C_RequestMemoryRead+0x1cc>)
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 f91d 	bl	8009a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e097      	b.n	800999c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800986c:	2300      	movs	r3, #0
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	617b      	str	r3, [r7, #20]
 8009880:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009884:	6a39      	ldr	r1, [r7, #32]
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 f9a8 	bl	8009bdc <I2C_WaitOnTXEFlagUntilTimeout>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00d      	beq.n	80098ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009896:	2b04      	cmp	r3, #4
 8009898:	d107      	bne.n	80098aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e076      	b.n	800999c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098ae:	88fb      	ldrh	r3, [r7, #6]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d105      	bne.n	80098c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80098b4:	893b      	ldrh	r3, [r7, #8]
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	611a      	str	r2, [r3, #16]
 80098be:	e021      	b.n	8009904 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80098c0:	893b      	ldrh	r3, [r7, #8]
 80098c2:	0a1b      	lsrs	r3, r3, #8
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098d0:	6a39      	ldr	r1, [r7, #32]
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 f982 	bl	8009bdc <I2C_WaitOnTXEFlagUntilTimeout>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00d      	beq.n	80098fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	d107      	bne.n	80098f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e050      	b.n	800999c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80098fa:	893b      	ldrh	r3, [r7, #8]
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009906:	6a39      	ldr	r1, [r7, #32]
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f000 f967 	bl	8009bdc <I2C_WaitOnTXEFlagUntilTimeout>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00d      	beq.n	8009930 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009918:	2b04      	cmp	r3, #4
 800991a:	d107      	bne.n	800992c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800992a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e035      	b.n	800999c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800993e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	2200      	movs	r2, #0
 8009948:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 f82b 	bl	80099a8 <I2C_WaitOnFlagUntilTimeout>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00d      	beq.n	8009974 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009966:	d103      	bne.n	8009970 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800996e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e013      	b.n	800999c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009974:	897b      	ldrh	r3, [r7, #10]
 8009976:	b2db      	uxtb	r3, r3
 8009978:	f043 0301 	orr.w	r3, r3, #1
 800997c:	b2da      	uxtb	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009986:	6a3a      	ldr	r2, [r7, #32]
 8009988:	4906      	ldr	r1, [pc, #24]	@ (80099a4 <I2C_RequestMemoryRead+0x1cc>)
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 f886 	bl	8009a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d001      	beq.n	800999a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e000      	b.n	800999c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	00010002 	.word	0x00010002

080099a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	4613      	mov	r3, r2
 80099b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099b8:	e048      	b.n	8009a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c0:	d044      	beq.n	8009a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099c2:	f7fb fd23 	bl	800540c <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d302      	bcc.n	80099d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d139      	bne.n	8009a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	0c1b      	lsrs	r3, r3, #16
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d10d      	bne.n	80099fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	43da      	mvns	r2, r3
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	4013      	ands	r3, r2
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bf0c      	ite	eq
 80099f4:	2301      	moveq	r3, #1
 80099f6:	2300      	movne	r3, #0
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	e00c      	b.n	8009a18 <I2C_WaitOnFlagUntilTimeout+0x70>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	43da      	mvns	r2, r3
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	4013      	ands	r3, r2
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	bf0c      	ite	eq
 8009a10:	2301      	moveq	r3, #1
 8009a12:	2300      	movne	r3, #0
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	461a      	mov	r2, r3
 8009a18:	79fb      	ldrb	r3, [r7, #7]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d116      	bne.n	8009a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2220      	movs	r2, #32
 8009a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a38:	f043 0220 	orr.w	r2, r3, #32
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e023      	b.n	8009a94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	0c1b      	lsrs	r3, r3, #16
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d10d      	bne.n	8009a72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	695b      	ldr	r3, [r3, #20]
 8009a5c:	43da      	mvns	r2, r3
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	4013      	ands	r3, r2
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	bf0c      	ite	eq
 8009a68:	2301      	moveq	r3, #1
 8009a6a:	2300      	movne	r3, #0
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	461a      	mov	r2, r3
 8009a70:	e00c      	b.n	8009a8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	43da      	mvns	r2, r3
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	bf0c      	ite	eq
 8009a84:	2301      	moveq	r3, #1
 8009a86:	2300      	movne	r3, #0
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	79fb      	ldrb	r3, [r7, #7]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d093      	beq.n	80099ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009aaa:	e071      	b.n	8009b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aba:	d123      	bne.n	8009b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009aca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009ad4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af0:	f043 0204 	orr.w	r2, r3, #4
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e067      	b.n	8009bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0a:	d041      	beq.n	8009b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b0c:	f7fb fc7e 	bl	800540c <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d302      	bcc.n	8009b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d136      	bne.n	8009b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	0c1b      	lsrs	r3, r3, #16
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d10c      	bne.n	8009b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	43da      	mvns	r2, r3
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	4013      	ands	r3, r2
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	bf14      	ite	ne
 8009b3e:	2301      	movne	r3, #1
 8009b40:	2300      	moveq	r3, #0
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	e00b      	b.n	8009b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	43da      	mvns	r2, r3
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	4013      	ands	r3, r2
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	bf14      	ite	ne
 8009b58:	2301      	movne	r3, #1
 8009b5a:	2300      	moveq	r3, #0
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d016      	beq.n	8009b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b7c:	f043 0220 	orr.w	r2, r3, #32
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e021      	b.n	8009bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	0c1b      	lsrs	r3, r3, #16
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d10c      	bne.n	8009bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	695b      	ldr	r3, [r3, #20]
 8009ba0:	43da      	mvns	r2, r3
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	bf14      	ite	ne
 8009bac:	2301      	movne	r3, #1
 8009bae:	2300      	moveq	r3, #0
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	e00b      	b.n	8009bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	43da      	mvns	r2, r3
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bf14      	ite	ne
 8009bc6:	2301      	movne	r3, #1
 8009bc8:	2300      	moveq	r3, #0
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f47f af6d 	bne.w	8009aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009be8:	e034      	b.n	8009c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f000 f8e3 	bl	8009db6 <I2C_IsAcknowledgeFailed>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e034      	b.n	8009c64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c00:	d028      	beq.n	8009c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c02:	f7fb fc03 	bl	800540c <HAL_GetTick>
 8009c06:	4602      	mov	r2, r0
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d302      	bcc.n	8009c18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d11d      	bne.n	8009c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c22:	2b80      	cmp	r3, #128	@ 0x80
 8009c24:	d016      	beq.n	8009c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2220      	movs	r2, #32
 8009c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c40:	f043 0220 	orr.w	r2, r3, #32
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e007      	b.n	8009c64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c5e:	2b80      	cmp	r3, #128	@ 0x80
 8009c60:	d1c3      	bne.n	8009bea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c78:	e034      	b.n	8009ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 f89b 	bl	8009db6 <I2C_IsAcknowledgeFailed>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e034      	b.n	8009cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c90:	d028      	beq.n	8009ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c92:	f7fb fbbb 	bl	800540c <HAL_GetTick>
 8009c96:	4602      	mov	r2, r0
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d302      	bcc.n	8009ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d11d      	bne.n	8009ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	f003 0304 	and.w	r3, r3, #4
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	d016      	beq.n	8009ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2220      	movs	r2, #32
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd0:	f043 0220 	orr.w	r2, r3, #32
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e007      	b.n	8009cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	f003 0304 	and.w	r3, r3, #4
 8009cee:	2b04      	cmp	r3, #4
 8009cf0:	d1c3      	bne.n	8009c7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d08:	e049      	b.n	8009d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	f003 0310 	and.w	r3, r3, #16
 8009d14:	2b10      	cmp	r3, #16
 8009d16:	d119      	bne.n	8009d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f06f 0210 	mvn.w	r2, #16
 8009d20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e030      	b.n	8009dae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d4c:	f7fb fb5e 	bl	800540c <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d302      	bcc.n	8009d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d11d      	bne.n	8009d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d6c:	2b40      	cmp	r3, #64	@ 0x40
 8009d6e:	d016      	beq.n	8009d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2220      	movs	r2, #32
 8009d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d8a:	f043 0220 	orr.w	r2, r3, #32
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e007      	b.n	8009dae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	695b      	ldr	r3, [r3, #20]
 8009da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da8:	2b40      	cmp	r3, #64	@ 0x40
 8009daa:	d1ae      	bne.n	8009d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b083      	sub	sp, #12
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009dcc:	d11b      	bne.n	8009e06 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009dd6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2220      	movs	r2, #32
 8009de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df2:	f043 0204 	orr.w	r2, r3, #4
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e000      	b.n	8009e08 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b20      	cmp	r3, #32
 8009e28:	d129      	bne.n	8009e7e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2224      	movs	r2, #36	@ 0x24
 8009e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f022 0201 	bic.w	r2, r2, #1
 8009e40:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f022 0210 	bic.w	r2, r2, #16
 8009e50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f042 0201 	orr.w	r2, r2, #1
 8009e70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2220      	movs	r2, #32
 8009e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e000      	b.n	8009e80 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009e7e:	2302      	movs	r3, #2
  }
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b20      	cmp	r3, #32
 8009ea4:	d12a      	bne.n	8009efc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2224      	movs	r2, #36	@ 0x24
 8009eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f022 0201 	bic.w	r2, r2, #1
 8009ebc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009ec6:	89fb      	ldrh	r3, [r7, #14]
 8009ec8:	f023 030f 	bic.w	r3, r3, #15
 8009ecc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	89fb      	ldrh	r3, [r7, #14]
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	89fa      	ldrh	r2, [r7, #14]
 8009ede:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f042 0201 	orr.w	r2, r2, #1
 8009eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	e000      	b.n	8009efe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009efc:	2302      	movs	r3, #2
  }
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
	...

08009f0c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e0bf      	b.n	800a09e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d106      	bne.n	8009f38 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7f8 fe84 	bl	8002c40 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	699a      	ldr	r2, [r3, #24]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009f4e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6999      	ldr	r1, [r3, #24]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009f64:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6899      	ldr	r1, [r3, #8]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	4b4a      	ldr	r3, [pc, #296]	@ (800a0a8 <HAL_LTDC_Init+0x19c>)
 8009f80:	400b      	ands	r3, r1
 8009f82:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	695b      	ldr	r3, [r3, #20]
 8009f88:	041b      	lsls	r3, r3, #16
 8009f8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6899      	ldr	r1, [r3, #8]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	699a      	ldr	r2, [r3, #24]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	431a      	orrs	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68d9      	ldr	r1, [r3, #12]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	4b3e      	ldr	r3, [pc, #248]	@ (800a0a8 <HAL_LTDC_Init+0x19c>)
 8009fae:	400b      	ands	r3, r1
 8009fb0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	041b      	lsls	r3, r3, #16
 8009fb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68d9      	ldr	r1, [r3, #12]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6a1a      	ldr	r2, [r3, #32]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	431a      	orrs	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6919      	ldr	r1, [r3, #16]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	4b33      	ldr	r3, [pc, #204]	@ (800a0a8 <HAL_LTDC_Init+0x19c>)
 8009fdc:	400b      	ands	r3, r1
 8009fde:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe4:	041b      	lsls	r3, r3, #16
 8009fe6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6919      	ldr	r1, [r3, #16]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	431a      	orrs	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	6959      	ldr	r1, [r3, #20]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	4b27      	ldr	r3, [pc, #156]	@ (800a0a8 <HAL_LTDC_Init+0x19c>)
 800a00a:	400b      	ands	r3, r1
 800a00c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a012:	041b      	lsls	r3, r3, #16
 800a014:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6959      	ldr	r1, [r3, #20]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	431a      	orrs	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	430a      	orrs	r2, r1
 800a02a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a032:	021b      	lsls	r3, r3, #8
 800a034:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a03c:	041b      	lsls	r3, r3, #16
 800a03e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a04e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800a062:	431a      	orrs	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	430a      	orrs	r2, r1
 800a06a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f042 0206 	orr.w	r2, r2, #6
 800a07a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	699a      	ldr	r2, [r3, #24]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f042 0201 	orr.w	r2, r2, #1
 800a08a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3710      	adds	r7, #16
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	f000f800 	.word	0xf000f800

0800a0ac <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0c2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f003 0304 	and.w	r3, r3, #4
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d023      	beq.n	800a116 <HAL_LTDC_IRQHandler+0x6a>
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	f003 0304 	and.w	r3, r3, #4
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d01e      	beq.n	800a116 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f022 0204 	bic.w	r2, r2, #4
 800a0e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2204      	movs	r2, #4
 800a0ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a0f6:	f043 0201 	orr.w	r2, r3, #1
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2204      	movs	r2, #4
 800a104:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f86f 	bl	800a1f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f003 0302 	and.w	r3, r3, #2
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d023      	beq.n	800a168 <HAL_LTDC_IRQHandler+0xbc>
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	f003 0302 	and.w	r3, r3, #2
 800a126:	2b00      	cmp	r3, #0
 800a128:	d01e      	beq.n	800a168 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f022 0202 	bic.w	r2, r2, #2
 800a138:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2202      	movs	r2, #2
 800a140:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a148:	f043 0202 	orr.w	r2, r3, #2
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2204      	movs	r2, #4
 800a156:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f846 	bl	800a1f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d01b      	beq.n	800a1aa <HAL_LTDC_IRQHandler+0xfe>
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d016      	beq.n	800a1aa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 0201 	bic.w	r2, r2, #1
 800a18a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2201      	movs	r2, #1
 800a192:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f82f 	bl	800a208 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f003 0308 	and.w	r3, r3, #8
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d01b      	beq.n	800a1ec <HAL_LTDC_IRQHandler+0x140>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	f003 0308 	and.w	r3, r3, #8
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d016      	beq.n	800a1ec <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f022 0208 	bic.w	r2, r2, #8
 800a1cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2208      	movs	r2, #8
 800a1d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f818 	bl	800a21c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a1ec:	bf00      	nop
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a230:	b5b0      	push	{r4, r5, r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a242:	2b01      	cmp	r3, #1
 800a244:	d101      	bne.n	800a24a <HAL_LTDC_ConfigLayer+0x1a>
 800a246:	2302      	movs	r3, #2
 800a248:	e02c      	b.n	800a2a4 <HAL_LTDC_ConfigLayer+0x74>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2202      	movs	r2, #2
 800a256:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2134      	movs	r1, #52	@ 0x34
 800a260:	fb01 f303 	mul.w	r3, r1, r3
 800a264:	4413      	add	r3, r2
 800a266:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	4614      	mov	r4, r2
 800a26e:	461d      	mov	r5, r3
 800a270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a27a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	68b9      	ldr	r1, [r7, #8]
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f000 f83b 	bl	800a300 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2201      	movs	r2, #1
 800a290:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bdb0      	pop	{r4, r5, r7, pc}

0800a2ac <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d101      	bne.n	800a2c2 <HAL_LTDC_EnableDither+0x16>
 800a2be:	2302      	movs	r3, #2
 800a2c0:	e016      	b.n	800a2f0 <HAL_LTDC_EnableDither+0x44>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800a2d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a2fc <HAL_LTDC_EnableDither+0x50>)
 800a2d4:	699b      	ldr	r3, [r3, #24]
 800a2d6:	4a09      	ldr	r2, [pc, #36]	@ (800a2fc <HAL_LTDC_EnableDither+0x50>)
 800a2d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2dc:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr
 800a2fc:	40016800 	.word	0x40016800

0800a300 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a300:	b480      	push	{r7}
 800a302:	b089      	sub	sp, #36	@ 0x24
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	0c1b      	lsrs	r3, r3, #16
 800a318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a31c:	4413      	add	r3, r2
 800a31e:	041b      	lsls	r3, r3, #16
 800a320:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	461a      	mov	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	01db      	lsls	r3, r3, #7
 800a32c:	4413      	add	r3, r2
 800a32e:	3384      	adds	r3, #132	@ 0x84
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	6812      	ldr	r2, [r2, #0]
 800a336:	4611      	mov	r1, r2
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	01d2      	lsls	r2, r2, #7
 800a33c:	440a      	add	r2, r1
 800a33e:	3284      	adds	r2, #132	@ 0x84
 800a340:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a344:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	0c1b      	lsrs	r3, r3, #16
 800a352:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a356:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a358:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4619      	mov	r1, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	01db      	lsls	r3, r3, #7
 800a364:	440b      	add	r3, r1
 800a366:	3384      	adds	r3, #132	@ 0x84
 800a368:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a36e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	68da      	ldr	r2, [r3, #12]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a37e:	4413      	add	r3, r2
 800a380:	041b      	lsls	r3, r3, #16
 800a382:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	461a      	mov	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	01db      	lsls	r3, r3, #7
 800a38e:	4413      	add	r3, r2
 800a390:	3384      	adds	r3, #132	@ 0x84
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	6812      	ldr	r2, [r2, #0]
 800a398:	4611      	mov	r1, r2
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	01d2      	lsls	r2, r2, #7
 800a39e:	440a      	add	r2, r1
 800a3a0:	3284      	adds	r2, #132	@ 0x84
 800a3a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a3a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3b6:	4413      	add	r3, r2
 800a3b8:	1c5a      	adds	r2, r3, #1
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	01db      	lsls	r3, r3, #7
 800a3c4:	440b      	add	r3, r1
 800a3c6:	3384      	adds	r3, #132	@ 0x84
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	01db      	lsls	r3, r3, #7
 800a3da:	4413      	add	r3, r2
 800a3dc:	3384      	adds	r3, #132	@ 0x84
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	6812      	ldr	r2, [r2, #0]
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	01d2      	lsls	r2, r2, #7
 800a3ea:	440a      	add	r2, r1
 800a3ec:	3284      	adds	r2, #132	@ 0x84
 800a3ee:	f023 0307 	bic.w	r3, r3, #7
 800a3f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	01db      	lsls	r3, r3, #7
 800a3fe:	4413      	add	r3, r2
 800a400:	3384      	adds	r3, #132	@ 0x84
 800a402:	461a      	mov	r2, r3
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a410:	021b      	lsls	r3, r3, #8
 800a412:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a41a:	041b      	lsls	r3, r3, #16
 800a41c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	699b      	ldr	r3, [r3, #24]
 800a422:	061b      	lsls	r3, r3, #24
 800a424:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	01db      	lsls	r3, r3, #7
 800a430:	4413      	add	r3, r2
 800a432:	3384      	adds	r3, #132	@ 0x84
 800a434:	699b      	ldr	r3, [r3, #24]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	461a      	mov	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	01db      	lsls	r3, r3, #7
 800a440:	4413      	add	r3, r2
 800a442:	3384      	adds	r3, #132	@ 0x84
 800a444:	461a      	mov	r2, r3
 800a446:	2300      	movs	r3, #0
 800a448:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a450:	461a      	mov	r2, r3
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	431a      	orrs	r2, r3
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	431a      	orrs	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4619      	mov	r1, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	01db      	lsls	r3, r3, #7
 800a464:	440b      	add	r3, r1
 800a466:	3384      	adds	r3, #132	@ 0x84
 800a468:	4619      	mov	r1, r3
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	461a      	mov	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	01db      	lsls	r3, r3, #7
 800a47a:	4413      	add	r3, r2
 800a47c:	3384      	adds	r3, #132	@ 0x84
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	6812      	ldr	r2, [r2, #0]
 800a484:	4611      	mov	r1, r2
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	01d2      	lsls	r2, r2, #7
 800a48a:	440a      	add	r2, r1
 800a48c:	3284      	adds	r2, #132	@ 0x84
 800a48e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a492:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	461a      	mov	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	01db      	lsls	r3, r3, #7
 800a49e:	4413      	add	r3, r2
 800a4a0:	3384      	adds	r3, #132	@ 0x84
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	01db      	lsls	r3, r3, #7
 800a4b4:	4413      	add	r3, r2
 800a4b6:	3384      	adds	r3, #132	@ 0x84
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	6812      	ldr	r2, [r2, #0]
 800a4be:	4611      	mov	r1, r2
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	01d2      	lsls	r2, r2, #7
 800a4c4:	440a      	add	r2, r1
 800a4c6:	3284      	adds	r2, #132	@ 0x84
 800a4c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800a4cc:	f023 0307 	bic.w	r3, r3, #7
 800a4d0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	69da      	ldr	r2, [r3, #28]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	68f9      	ldr	r1, [r7, #12]
 800a4dc:	6809      	ldr	r1, [r1, #0]
 800a4de:	4608      	mov	r0, r1
 800a4e0:	6879      	ldr	r1, [r7, #4]
 800a4e2:	01c9      	lsls	r1, r1, #7
 800a4e4:	4401      	add	r1, r0
 800a4e6:	3184      	adds	r1, #132	@ 0x84
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	01db      	lsls	r3, r3, #7
 800a4f6:	4413      	add	r3, r2
 800a4f8:	3384      	adds	r3, #132	@ 0x84
 800a4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	461a      	mov	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	01db      	lsls	r3, r3, #7
 800a506:	4413      	add	r3, r2
 800a508:	3384      	adds	r3, #132	@ 0x84
 800a50a:	461a      	mov	r2, r3
 800a50c:	2300      	movs	r3, #0
 800a50e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	01db      	lsls	r3, r3, #7
 800a51a:	4413      	add	r3, r2
 800a51c:	3384      	adds	r3, #132	@ 0x84
 800a51e:	461a      	mov	r2, r3
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a524:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d102      	bne.n	800a534 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800a52e:	2304      	movs	r3, #4
 800a530:	61fb      	str	r3, [r7, #28]
 800a532:	e01b      	b.n	800a56c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d102      	bne.n	800a542 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800a53c:	2303      	movs	r3, #3
 800a53e:	61fb      	str	r3, [r7, #28]
 800a540:	e014      	b.n	800a56c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	2b04      	cmp	r3, #4
 800a548:	d00b      	beq.n	800a562 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d007      	beq.n	800a562 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a556:	2b03      	cmp	r3, #3
 800a558:	d003      	beq.n	800a562 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a55e:	2b07      	cmp	r3, #7
 800a560:	d102      	bne.n	800a568 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800a562:	2302      	movs	r3, #2
 800a564:	61fb      	str	r3, [r7, #28]
 800a566:	e001      	b.n	800a56c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800a568:	2301      	movs	r3, #1
 800a56a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	461a      	mov	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	01db      	lsls	r3, r3, #7
 800a576:	4413      	add	r3, r2
 800a578:	3384      	adds	r3, #132	@ 0x84
 800a57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	6812      	ldr	r2, [r2, #0]
 800a580:	4611      	mov	r1, r2
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	01d2      	lsls	r2, r2, #7
 800a586:	440a      	add	r2, r1
 800a588:	3284      	adds	r2, #132	@ 0x84
 800a58a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a58e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a594:	69fa      	ldr	r2, [r7, #28]
 800a596:	fb02 f303 	mul.w	r3, r2, r3
 800a59a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	6859      	ldr	r1, [r3, #4]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	1acb      	subs	r3, r1, r3
 800a5a6:	69f9      	ldr	r1, [r7, #28]
 800a5a8:	fb01 f303 	mul.w	r3, r1, r3
 800a5ac:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a5ae:	68f9      	ldr	r1, [r7, #12]
 800a5b0:	6809      	ldr	r1, [r1, #0]
 800a5b2:	4608      	mov	r0, r1
 800a5b4:	6879      	ldr	r1, [r7, #4]
 800a5b6:	01c9      	lsls	r1, r1, #7
 800a5b8:	4401      	add	r1, r0
 800a5ba:	3184      	adds	r1, #132	@ 0x84
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	01db      	lsls	r3, r3, #7
 800a5ca:	4413      	add	r3, r2
 800a5cc:	3384      	adds	r3, #132	@ 0x84
 800a5ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	6812      	ldr	r2, [r2, #0]
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	01d2      	lsls	r2, r2, #7
 800a5da:	440a      	add	r2, r1
 800a5dc:	3284      	adds	r2, #132	@ 0x84
 800a5de:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a5e2:	f023 0307 	bic.w	r3, r3, #7
 800a5e6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	01db      	lsls	r3, r3, #7
 800a5f2:	4413      	add	r3, r2
 800a5f4:	3384      	adds	r3, #132	@ 0x84
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5fc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	461a      	mov	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	01db      	lsls	r3, r3, #7
 800a608:	4413      	add	r3, r2
 800a60a:	3384      	adds	r3, #132	@ 0x84
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	6812      	ldr	r2, [r2, #0]
 800a612:	4611      	mov	r1, r2
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	01d2      	lsls	r2, r2, #7
 800a618:	440a      	add	r2, r1
 800a61a:	3284      	adds	r2, #132	@ 0x84
 800a61c:	f043 0301 	orr.w	r3, r3, #1
 800a620:	6013      	str	r3, [r2, #0]
}
 800a622:	bf00      	nop
 800a624:	3724      	adds	r7, #36	@ 0x24
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
	...

0800a630 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d101      	bne.n	800a642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e267      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d075      	beq.n	800a73a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a64e:	4b88      	ldr	r3, [pc, #544]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	f003 030c 	and.w	r3, r3, #12
 800a656:	2b04      	cmp	r3, #4
 800a658:	d00c      	beq.n	800a674 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a65a:	4b85      	ldr	r3, [pc, #532]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a662:	2b08      	cmp	r3, #8
 800a664:	d112      	bne.n	800a68c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a666:	4b82      	ldr	r3, [pc, #520]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a66e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a672:	d10b      	bne.n	800a68c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a674:	4b7e      	ldr	r3, [pc, #504]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d05b      	beq.n	800a738 <HAL_RCC_OscConfig+0x108>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d157      	bne.n	800a738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	e242      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a694:	d106      	bne.n	800a6a4 <HAL_RCC_OscConfig+0x74>
 800a696:	4b76      	ldr	r3, [pc, #472]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a75      	ldr	r2, [pc, #468]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a69c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	e01d      	b.n	800a6e0 <HAL_RCC_OscConfig+0xb0>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6ac:	d10c      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x98>
 800a6ae:	4b70      	ldr	r3, [pc, #448]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a6f      	ldr	r2, [pc, #444]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a6b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a6b8:	6013      	str	r3, [r2, #0]
 800a6ba:	4b6d      	ldr	r3, [pc, #436]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a6c      	ldr	r2, [pc, #432]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a6c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6c4:	6013      	str	r3, [r2, #0]
 800a6c6:	e00b      	b.n	800a6e0 <HAL_RCC_OscConfig+0xb0>
 800a6c8:	4b69      	ldr	r3, [pc, #420]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a68      	ldr	r2, [pc, #416]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a6ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6d2:	6013      	str	r3, [r2, #0]
 800a6d4:	4b66      	ldr	r3, [pc, #408]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a65      	ldr	r2, [pc, #404]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a6da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a6de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d013      	beq.n	800a710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6e8:	f7fa fe90 	bl	800540c <HAL_GetTick>
 800a6ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6ee:	e008      	b.n	800a702 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6f0:	f7fa fe8c 	bl	800540c <HAL_GetTick>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	2b64      	cmp	r3, #100	@ 0x64
 800a6fc:	d901      	bls.n	800a702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e207      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a702:	4b5b      	ldr	r3, [pc, #364]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d0f0      	beq.n	800a6f0 <HAL_RCC_OscConfig+0xc0>
 800a70e:	e014      	b.n	800a73a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a710:	f7fa fe7c 	bl	800540c <HAL_GetTick>
 800a714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a716:	e008      	b.n	800a72a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a718:	f7fa fe78 	bl	800540c <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	2b64      	cmp	r3, #100	@ 0x64
 800a724:	d901      	bls.n	800a72a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e1f3      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a72a:	4b51      	ldr	r3, [pc, #324]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1f0      	bne.n	800a718 <HAL_RCC_OscConfig+0xe8>
 800a736:	e000      	b.n	800a73a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 0302 	and.w	r3, r3, #2
 800a742:	2b00      	cmp	r3, #0
 800a744:	d063      	beq.n	800a80e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a746:	4b4a      	ldr	r3, [pc, #296]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	f003 030c 	and.w	r3, r3, #12
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00b      	beq.n	800a76a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a752:	4b47      	ldr	r3, [pc, #284]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a75a:	2b08      	cmp	r3, #8
 800a75c:	d11c      	bne.n	800a798 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a75e:	4b44      	ldr	r3, [pc, #272]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a766:	2b00      	cmp	r3, #0
 800a768:	d116      	bne.n	800a798 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a76a:	4b41      	ldr	r3, [pc, #260]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0302 	and.w	r3, r3, #2
 800a772:	2b00      	cmp	r3, #0
 800a774:	d005      	beq.n	800a782 <HAL_RCC_OscConfig+0x152>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d001      	beq.n	800a782 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e1c7      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a782:	4b3b      	ldr	r3, [pc, #236]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	00db      	lsls	r3, r3, #3
 800a790:	4937      	ldr	r1, [pc, #220]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a792:	4313      	orrs	r3, r2
 800a794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a796:	e03a      	b.n	800a80e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d020      	beq.n	800a7e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a7a0:	4b34      	ldr	r3, [pc, #208]	@ (800a874 <HAL_RCC_OscConfig+0x244>)
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7a6:	f7fa fe31 	bl	800540c <HAL_GetTick>
 800a7aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7ac:	e008      	b.n	800a7c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7ae:	f7fa fe2d 	bl	800540c <HAL_GetTick>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d901      	bls.n	800a7c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e1a8      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7c0:	4b2b      	ldr	r3, [pc, #172]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0302 	and.w	r3, r3, #2
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d0f0      	beq.n	800a7ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7cc:	4b28      	ldr	r3, [pc, #160]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	00db      	lsls	r3, r3, #3
 800a7da:	4925      	ldr	r1, [pc, #148]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	600b      	str	r3, [r1, #0]
 800a7e0:	e015      	b.n	800a80e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7e2:	4b24      	ldr	r3, [pc, #144]	@ (800a874 <HAL_RCC_OscConfig+0x244>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7e8:	f7fa fe10 	bl	800540c <HAL_GetTick>
 800a7ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7ee:	e008      	b.n	800a802 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7f0:	f7fa fe0c 	bl	800540c <HAL_GetTick>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	1ad3      	subs	r3, r2, r3
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d901      	bls.n	800a802 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a7fe:	2303      	movs	r3, #3
 800a800:	e187      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a802:	4b1b      	ldr	r3, [pc, #108]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 0302 	and.w	r3, r3, #2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1f0      	bne.n	800a7f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0308 	and.w	r3, r3, #8
 800a816:	2b00      	cmp	r3, #0
 800a818:	d036      	beq.n	800a888 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d016      	beq.n	800a850 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a822:	4b15      	ldr	r3, [pc, #84]	@ (800a878 <HAL_RCC_OscConfig+0x248>)
 800a824:	2201      	movs	r2, #1
 800a826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a828:	f7fa fdf0 	bl	800540c <HAL_GetTick>
 800a82c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a82e:	e008      	b.n	800a842 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a830:	f7fa fdec 	bl	800540c <HAL_GetTick>
 800a834:	4602      	mov	r2, r0
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d901      	bls.n	800a842 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e167      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a842:	4b0b      	ldr	r3, [pc, #44]	@ (800a870 <HAL_RCC_OscConfig+0x240>)
 800a844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a846:	f003 0302 	and.w	r3, r3, #2
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0f0      	beq.n	800a830 <HAL_RCC_OscConfig+0x200>
 800a84e:	e01b      	b.n	800a888 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a850:	4b09      	ldr	r3, [pc, #36]	@ (800a878 <HAL_RCC_OscConfig+0x248>)
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a856:	f7fa fdd9 	bl	800540c <HAL_GetTick>
 800a85a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a85c:	e00e      	b.n	800a87c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a85e:	f7fa fdd5 	bl	800540c <HAL_GetTick>
 800a862:	4602      	mov	r2, r0
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d907      	bls.n	800a87c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a86c:	2303      	movs	r3, #3
 800a86e:	e150      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
 800a870:	40023800 	.word	0x40023800
 800a874:	42470000 	.word	0x42470000
 800a878:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a87c:	4b88      	ldr	r3, [pc, #544]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a87e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a880:	f003 0302 	and.w	r3, r3, #2
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1ea      	bne.n	800a85e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 0304 	and.w	r3, r3, #4
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 8097 	beq.w	800a9c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a896:	2300      	movs	r3, #0
 800a898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a89a:	4b81      	ldr	r3, [pc, #516]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a89e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10f      	bne.n	800a8c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	60bb      	str	r3, [r7, #8]
 800a8aa:	4b7d      	ldr	r3, [pc, #500]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ae:	4a7c      	ldr	r2, [pc, #496]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a8b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8b4:	6413      	str	r3, [r2, #64]	@ 0x40
 800a8b6:	4b7a      	ldr	r3, [pc, #488]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a8b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8be:	60bb      	str	r3, [r7, #8]
 800a8c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8c6:	4b77      	ldr	r3, [pc, #476]	@ (800aaa4 <HAL_RCC_OscConfig+0x474>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d118      	bne.n	800a904 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a8d2:	4b74      	ldr	r3, [pc, #464]	@ (800aaa4 <HAL_RCC_OscConfig+0x474>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a73      	ldr	r2, [pc, #460]	@ (800aaa4 <HAL_RCC_OscConfig+0x474>)
 800a8d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a8de:	f7fa fd95 	bl	800540c <HAL_GetTick>
 800a8e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8e4:	e008      	b.n	800a8f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8e6:	f7fa fd91 	bl	800540c <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d901      	bls.n	800a8f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e10c      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8f8:	4b6a      	ldr	r3, [pc, #424]	@ (800aaa4 <HAL_RCC_OscConfig+0x474>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a900:	2b00      	cmp	r3, #0
 800a902:	d0f0      	beq.n	800a8e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d106      	bne.n	800a91a <HAL_RCC_OscConfig+0x2ea>
 800a90c:	4b64      	ldr	r3, [pc, #400]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a90e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a910:	4a63      	ldr	r2, [pc, #396]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a912:	f043 0301 	orr.w	r3, r3, #1
 800a916:	6713      	str	r3, [r2, #112]	@ 0x70
 800a918:	e01c      	b.n	800a954 <HAL_RCC_OscConfig+0x324>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	2b05      	cmp	r3, #5
 800a920:	d10c      	bne.n	800a93c <HAL_RCC_OscConfig+0x30c>
 800a922:	4b5f      	ldr	r3, [pc, #380]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a926:	4a5e      	ldr	r2, [pc, #376]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a928:	f043 0304 	orr.w	r3, r3, #4
 800a92c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a92e:	4b5c      	ldr	r3, [pc, #368]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a932:	4a5b      	ldr	r2, [pc, #364]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a934:	f043 0301 	orr.w	r3, r3, #1
 800a938:	6713      	str	r3, [r2, #112]	@ 0x70
 800a93a:	e00b      	b.n	800a954 <HAL_RCC_OscConfig+0x324>
 800a93c:	4b58      	ldr	r3, [pc, #352]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a93e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a940:	4a57      	ldr	r2, [pc, #348]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a942:	f023 0301 	bic.w	r3, r3, #1
 800a946:	6713      	str	r3, [r2, #112]	@ 0x70
 800a948:	4b55      	ldr	r3, [pc, #340]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a94a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a94c:	4a54      	ldr	r2, [pc, #336]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a94e:	f023 0304 	bic.w	r3, r3, #4
 800a952:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d015      	beq.n	800a988 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a95c:	f7fa fd56 	bl	800540c <HAL_GetTick>
 800a960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a962:	e00a      	b.n	800a97a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a964:	f7fa fd52 	bl	800540c <HAL_GetTick>
 800a968:	4602      	mov	r2, r0
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a972:	4293      	cmp	r3, r2
 800a974:	d901      	bls.n	800a97a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a976:	2303      	movs	r3, #3
 800a978:	e0cb      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a97a:	4b49      	ldr	r3, [pc, #292]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a97c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a97e:	f003 0302 	and.w	r3, r3, #2
 800a982:	2b00      	cmp	r3, #0
 800a984:	d0ee      	beq.n	800a964 <HAL_RCC_OscConfig+0x334>
 800a986:	e014      	b.n	800a9b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a988:	f7fa fd40 	bl	800540c <HAL_GetTick>
 800a98c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a98e:	e00a      	b.n	800a9a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a990:	f7fa fd3c 	bl	800540c <HAL_GetTick>
 800a994:	4602      	mov	r2, r0
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d901      	bls.n	800a9a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e0b5      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a9a6:	4b3e      	ldr	r3, [pc, #248]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a9a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9aa:	f003 0302 	and.w	r3, r3, #2
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1ee      	bne.n	800a990 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a9b2:	7dfb      	ldrb	r3, [r7, #23]
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d105      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9b8:	4b39      	ldr	r3, [pc, #228]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a9ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9bc:	4a38      	ldr	r2, [pc, #224]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a9be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 80a1 	beq.w	800ab10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a9ce:	4b34      	ldr	r3, [pc, #208]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	f003 030c 	and.w	r3, r3, #12
 800a9d6:	2b08      	cmp	r3, #8
 800a9d8:	d05c      	beq.n	800aa94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d141      	bne.n	800aa66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9e2:	4b31      	ldr	r3, [pc, #196]	@ (800aaa8 <HAL_RCC_OscConfig+0x478>)
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9e8:	f7fa fd10 	bl	800540c <HAL_GetTick>
 800a9ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a9ee:	e008      	b.n	800aa02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9f0:	f7fa fd0c 	bl	800540c <HAL_GetTick>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	1ad3      	subs	r3, r2, r3
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d901      	bls.n	800aa02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	e087      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa02:	4b27      	ldr	r3, [pc, #156]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1f0      	bne.n	800a9f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	69da      	ldr	r2, [r3, #28]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	431a      	orrs	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa1c:	019b      	lsls	r3, r3, #6
 800aa1e:	431a      	orrs	r2, r3
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa24:	085b      	lsrs	r3, r3, #1
 800aa26:	3b01      	subs	r3, #1
 800aa28:	041b      	lsls	r3, r3, #16
 800aa2a:	431a      	orrs	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa30:	061b      	lsls	r3, r3, #24
 800aa32:	491b      	ldr	r1, [pc, #108]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800aa34:	4313      	orrs	r3, r2
 800aa36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa38:	4b1b      	ldr	r3, [pc, #108]	@ (800aaa8 <HAL_RCC_OscConfig+0x478>)
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa3e:	f7fa fce5 	bl	800540c <HAL_GetTick>
 800aa42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa44:	e008      	b.n	800aa58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa46:	f7fa fce1 	bl	800540c <HAL_GetTick>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d901      	bls.n	800aa58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800aa54:	2303      	movs	r3, #3
 800aa56:	e05c      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa58:	4b11      	ldr	r3, [pc, #68]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0f0      	beq.n	800aa46 <HAL_RCC_OscConfig+0x416>
 800aa64:	e054      	b.n	800ab10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa66:	4b10      	ldr	r3, [pc, #64]	@ (800aaa8 <HAL_RCC_OscConfig+0x478>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa6c:	f7fa fcce 	bl	800540c <HAL_GetTick>
 800aa70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa72:	e008      	b.n	800aa86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa74:	f7fa fcca 	bl	800540c <HAL_GetTick>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d901      	bls.n	800aa86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800aa82:	2303      	movs	r3, #3
 800aa84:	e045      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa86:	4b06      	ldr	r3, [pc, #24]	@ (800aaa0 <HAL_RCC_OscConfig+0x470>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1f0      	bne.n	800aa74 <HAL_RCC_OscConfig+0x444>
 800aa92:	e03d      	b.n	800ab10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d107      	bne.n	800aaac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e038      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
 800aaa0:	40023800 	.word	0x40023800
 800aaa4:	40007000 	.word	0x40007000
 800aaa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800aaac:	4b1b      	ldr	r3, [pc, #108]	@ (800ab1c <HAL_RCC_OscConfig+0x4ec>)
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d028      	beq.n	800ab0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d121      	bne.n	800ab0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d11a      	bne.n	800ab0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800aadc:	4013      	ands	r3, r2
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800aae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d111      	bne.n	800ab0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf2:	085b      	lsrs	r3, r3, #1
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d107      	bne.n	800ab0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d001      	beq.n	800ab10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e000      	b.n	800ab12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	40023800 	.word	0x40023800

0800ab20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e0cc      	b.n	800acce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab34:	4b68      	ldr	r3, [pc, #416]	@ (800acd8 <HAL_RCC_ClockConfig+0x1b8>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 030f 	and.w	r3, r3, #15
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d90c      	bls.n	800ab5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab42:	4b65      	ldr	r3, [pc, #404]	@ (800acd8 <HAL_RCC_ClockConfig+0x1b8>)
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	b2d2      	uxtb	r2, r2
 800ab48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab4a:	4b63      	ldr	r3, [pc, #396]	@ (800acd8 <HAL_RCC_ClockConfig+0x1b8>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 030f 	and.w	r3, r3, #15
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d001      	beq.n	800ab5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e0b8      	b.n	800acce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 0302 	and.w	r3, r3, #2
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d020      	beq.n	800abaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 0304 	and.w	r3, r3, #4
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d005      	beq.n	800ab80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ab74:	4b59      	ldr	r3, [pc, #356]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	4a58      	ldr	r2, [pc, #352]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800ab7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ab7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0308 	and.w	r3, r3, #8
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d005      	beq.n	800ab98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ab8c:	4b53      	ldr	r3, [pc, #332]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	4a52      	ldr	r2, [pc, #328]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800ab92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ab96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab98:	4b50      	ldr	r3, [pc, #320]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	494d      	ldr	r1, [pc, #308]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800aba6:	4313      	orrs	r3, r2
 800aba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 0301 	and.w	r3, r3, #1
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d044      	beq.n	800ac40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d107      	bne.n	800abce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abbe:	4b47      	ldr	r3, [pc, #284]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d119      	bne.n	800abfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e07f      	b.n	800acce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d003      	beq.n	800abde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800abda:	2b03      	cmp	r3, #3
 800abdc:	d107      	bne.n	800abee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800abde:	4b3f      	ldr	r3, [pc, #252]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d109      	bne.n	800abfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	e06f      	b.n	800acce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abee:	4b3b      	ldr	r3, [pc, #236]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0302 	and.w	r3, r3, #2
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e067      	b.n	800acce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800abfe:	4b37      	ldr	r3, [pc, #220]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	f023 0203 	bic.w	r2, r3, #3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	4934      	ldr	r1, [pc, #208]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ac10:	f7fa fbfc 	bl	800540c <HAL_GetTick>
 800ac14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac16:	e00a      	b.n	800ac2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac18:	f7fa fbf8 	bl	800540c <HAL_GetTick>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d901      	bls.n	800ac2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	e04f      	b.n	800acce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac2e:	4b2b      	ldr	r3, [pc, #172]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	f003 020c 	and.w	r2, r3, #12
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d1eb      	bne.n	800ac18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac40:	4b25      	ldr	r3, [pc, #148]	@ (800acd8 <HAL_RCC_ClockConfig+0x1b8>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 030f 	and.w	r3, r3, #15
 800ac48:	683a      	ldr	r2, [r7, #0]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d20c      	bcs.n	800ac68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac4e:	4b22      	ldr	r3, [pc, #136]	@ (800acd8 <HAL_RCC_ClockConfig+0x1b8>)
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	b2d2      	uxtb	r2, r2
 800ac54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac56:	4b20      	ldr	r3, [pc, #128]	@ (800acd8 <HAL_RCC_ClockConfig+0x1b8>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 030f 	and.w	r3, r3, #15
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d001      	beq.n	800ac68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e032      	b.n	800acce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 0304 	and.w	r3, r3, #4
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d008      	beq.n	800ac86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac74:	4b19      	ldr	r3, [pc, #100]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	4916      	ldr	r1, [pc, #88]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800ac82:	4313      	orrs	r3, r2
 800ac84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0308 	and.w	r3, r3, #8
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d009      	beq.n	800aca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ac92:	4b12      	ldr	r3, [pc, #72]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	00db      	lsls	r3, r3, #3
 800aca0:	490e      	ldr	r1, [pc, #56]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800aca2:	4313      	orrs	r3, r2
 800aca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aca6:	f000 f821 	bl	800acec <HAL_RCC_GetSysClockFreq>
 800acaa:	4602      	mov	r2, r0
 800acac:	4b0b      	ldr	r3, [pc, #44]	@ (800acdc <HAL_RCC_ClockConfig+0x1bc>)
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	091b      	lsrs	r3, r3, #4
 800acb2:	f003 030f 	and.w	r3, r3, #15
 800acb6:	490a      	ldr	r1, [pc, #40]	@ (800ace0 <HAL_RCC_ClockConfig+0x1c0>)
 800acb8:	5ccb      	ldrb	r3, [r1, r3]
 800acba:	fa22 f303 	lsr.w	r3, r2, r3
 800acbe:	4a09      	ldr	r2, [pc, #36]	@ (800ace4 <HAL_RCC_ClockConfig+0x1c4>)
 800acc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800acc2:	4b09      	ldr	r3, [pc, #36]	@ (800ace8 <HAL_RCC_ClockConfig+0x1c8>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7f8 fad2 	bl	8003270 <HAL_InitTick>

  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	40023c00 	.word	0x40023c00
 800acdc:	40023800 	.word	0x40023800
 800ace0:	08013428 	.word	0x08013428
 800ace4:	200001e0 	.word	0x200001e0
 800ace8:	20000268 	.word	0x20000268

0800acec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800acec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acf0:	b094      	sub	sp, #80	@ 0x50
 800acf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800acf4:	2300      	movs	r3, #0
 800acf6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800acf8:	2300      	movs	r3, #0
 800acfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800acfc:	2300      	movs	r3, #0
 800acfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800ad00:	2300      	movs	r3, #0
 800ad02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad04:	4b79      	ldr	r3, [pc, #484]	@ (800aeec <HAL_RCC_GetSysClockFreq+0x200>)
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	f003 030c 	and.w	r3, r3, #12
 800ad0c:	2b08      	cmp	r3, #8
 800ad0e:	d00d      	beq.n	800ad2c <HAL_RCC_GetSysClockFreq+0x40>
 800ad10:	2b08      	cmp	r3, #8
 800ad12:	f200 80e1 	bhi.w	800aed8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d002      	beq.n	800ad20 <HAL_RCC_GetSysClockFreq+0x34>
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d003      	beq.n	800ad26 <HAL_RCC_GetSysClockFreq+0x3a>
 800ad1e:	e0db      	b.n	800aed8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ad20:	4b73      	ldr	r3, [pc, #460]	@ (800aef0 <HAL_RCC_GetSysClockFreq+0x204>)
 800ad22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ad24:	e0db      	b.n	800aede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ad26:	4b73      	ldr	r3, [pc, #460]	@ (800aef4 <HAL_RCC_GetSysClockFreq+0x208>)
 800ad28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ad2a:	e0d8      	b.n	800aede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ad2c:	4b6f      	ldr	r3, [pc, #444]	@ (800aeec <HAL_RCC_GetSysClockFreq+0x200>)
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ad36:	4b6d      	ldr	r3, [pc, #436]	@ (800aeec <HAL_RCC_GetSysClockFreq+0x200>)
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d063      	beq.n	800ae0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad42:	4b6a      	ldr	r3, [pc, #424]	@ (800aeec <HAL_RCC_GetSysClockFreq+0x200>)
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	099b      	lsrs	r3, r3, #6
 800ad48:	2200      	movs	r2, #0
 800ad4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ad4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad54:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad56:	2300      	movs	r3, #0
 800ad58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ad5e:	4622      	mov	r2, r4
 800ad60:	462b      	mov	r3, r5
 800ad62:	f04f 0000 	mov.w	r0, #0
 800ad66:	f04f 0100 	mov.w	r1, #0
 800ad6a:	0159      	lsls	r1, r3, #5
 800ad6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ad70:	0150      	lsls	r0, r2, #5
 800ad72:	4602      	mov	r2, r0
 800ad74:	460b      	mov	r3, r1
 800ad76:	4621      	mov	r1, r4
 800ad78:	1a51      	subs	r1, r2, r1
 800ad7a:	6139      	str	r1, [r7, #16]
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	eb63 0301 	sbc.w	r3, r3, r1
 800ad82:	617b      	str	r3, [r7, #20]
 800ad84:	f04f 0200 	mov.w	r2, #0
 800ad88:	f04f 0300 	mov.w	r3, #0
 800ad8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ad90:	4659      	mov	r1, fp
 800ad92:	018b      	lsls	r3, r1, #6
 800ad94:	4651      	mov	r1, sl
 800ad96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ad9a:	4651      	mov	r1, sl
 800ad9c:	018a      	lsls	r2, r1, #6
 800ad9e:	4651      	mov	r1, sl
 800ada0:	ebb2 0801 	subs.w	r8, r2, r1
 800ada4:	4659      	mov	r1, fp
 800ada6:	eb63 0901 	sbc.w	r9, r3, r1
 800adaa:	f04f 0200 	mov.w	r2, #0
 800adae:	f04f 0300 	mov.w	r3, #0
 800adb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800adb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800adba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800adbe:	4690      	mov	r8, r2
 800adc0:	4699      	mov	r9, r3
 800adc2:	4623      	mov	r3, r4
 800adc4:	eb18 0303 	adds.w	r3, r8, r3
 800adc8:	60bb      	str	r3, [r7, #8]
 800adca:	462b      	mov	r3, r5
 800adcc:	eb49 0303 	adc.w	r3, r9, r3
 800add0:	60fb      	str	r3, [r7, #12]
 800add2:	f04f 0200 	mov.w	r2, #0
 800add6:	f04f 0300 	mov.w	r3, #0
 800adda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800adde:	4629      	mov	r1, r5
 800ade0:	024b      	lsls	r3, r1, #9
 800ade2:	4621      	mov	r1, r4
 800ade4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ade8:	4621      	mov	r1, r4
 800adea:	024a      	lsls	r2, r1, #9
 800adec:	4610      	mov	r0, r2
 800adee:	4619      	mov	r1, r3
 800adf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adf2:	2200      	movs	r2, #0
 800adf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800adf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800adfc:	f7f5 fa50 	bl	80002a0 <__aeabi_uldivmod>
 800ae00:	4602      	mov	r2, r0
 800ae02:	460b      	mov	r3, r1
 800ae04:	4613      	mov	r3, r2
 800ae06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae08:	e058      	b.n	800aebc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ae0a:	4b38      	ldr	r3, [pc, #224]	@ (800aeec <HAL_RCC_GetSysClockFreq+0x200>)
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	099b      	lsrs	r3, r3, #6
 800ae10:	2200      	movs	r2, #0
 800ae12:	4618      	mov	r0, r3
 800ae14:	4611      	mov	r1, r2
 800ae16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ae1a:	623b      	str	r3, [r7, #32]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ae24:	4642      	mov	r2, r8
 800ae26:	464b      	mov	r3, r9
 800ae28:	f04f 0000 	mov.w	r0, #0
 800ae2c:	f04f 0100 	mov.w	r1, #0
 800ae30:	0159      	lsls	r1, r3, #5
 800ae32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ae36:	0150      	lsls	r0, r2, #5
 800ae38:	4602      	mov	r2, r0
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	4641      	mov	r1, r8
 800ae3e:	ebb2 0a01 	subs.w	sl, r2, r1
 800ae42:	4649      	mov	r1, r9
 800ae44:	eb63 0b01 	sbc.w	fp, r3, r1
 800ae48:	f04f 0200 	mov.w	r2, #0
 800ae4c:	f04f 0300 	mov.w	r3, #0
 800ae50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ae54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ae58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ae5c:	ebb2 040a 	subs.w	r4, r2, sl
 800ae60:	eb63 050b 	sbc.w	r5, r3, fp
 800ae64:	f04f 0200 	mov.w	r2, #0
 800ae68:	f04f 0300 	mov.w	r3, #0
 800ae6c:	00eb      	lsls	r3, r5, #3
 800ae6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae72:	00e2      	lsls	r2, r4, #3
 800ae74:	4614      	mov	r4, r2
 800ae76:	461d      	mov	r5, r3
 800ae78:	4643      	mov	r3, r8
 800ae7a:	18e3      	adds	r3, r4, r3
 800ae7c:	603b      	str	r3, [r7, #0]
 800ae7e:	464b      	mov	r3, r9
 800ae80:	eb45 0303 	adc.w	r3, r5, r3
 800ae84:	607b      	str	r3, [r7, #4]
 800ae86:	f04f 0200 	mov.w	r2, #0
 800ae8a:	f04f 0300 	mov.w	r3, #0
 800ae8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ae92:	4629      	mov	r1, r5
 800ae94:	028b      	lsls	r3, r1, #10
 800ae96:	4621      	mov	r1, r4
 800ae98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	028a      	lsls	r2, r1, #10
 800aea0:	4610      	mov	r0, r2
 800aea2:	4619      	mov	r1, r3
 800aea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aea6:	2200      	movs	r2, #0
 800aea8:	61bb      	str	r3, [r7, #24]
 800aeaa:	61fa      	str	r2, [r7, #28]
 800aeac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aeb0:	f7f5 f9f6 	bl	80002a0 <__aeabi_uldivmod>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4613      	mov	r3, r2
 800aeba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800aebc:	4b0b      	ldr	r3, [pc, #44]	@ (800aeec <HAL_RCC_GetSysClockFreq+0x200>)
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	0c1b      	lsrs	r3, r3, #16
 800aec2:	f003 0303 	and.w	r3, r3, #3
 800aec6:	3301      	adds	r3, #1
 800aec8:	005b      	lsls	r3, r3, #1
 800aeca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800aecc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aed0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800aed6:	e002      	b.n	800aede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aed8:	4b05      	ldr	r3, [pc, #20]	@ (800aef0 <HAL_RCC_GetSysClockFreq+0x204>)
 800aeda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800aedc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3750      	adds	r7, #80	@ 0x50
 800aee4:	46bd      	mov	sp, r7
 800aee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aeea:	bf00      	nop
 800aeec:	40023800 	.word	0x40023800
 800aef0:	00f42400 	.word	0x00f42400
 800aef4:	007a1200 	.word	0x007a1200

0800aef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aef8:	b480      	push	{r7}
 800aefa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aefc:	4b03      	ldr	r3, [pc, #12]	@ (800af0c <HAL_RCC_GetHCLKFreq+0x14>)
 800aefe:	681b      	ldr	r3, [r3, #0]
}
 800af00:	4618      	mov	r0, r3
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	200001e0 	.word	0x200001e0

0800af10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af14:	f7ff fff0 	bl	800aef8 <HAL_RCC_GetHCLKFreq>
 800af18:	4602      	mov	r2, r0
 800af1a:	4b05      	ldr	r3, [pc, #20]	@ (800af30 <HAL_RCC_GetPCLK1Freq+0x20>)
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	0a9b      	lsrs	r3, r3, #10
 800af20:	f003 0307 	and.w	r3, r3, #7
 800af24:	4903      	ldr	r1, [pc, #12]	@ (800af34 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af26:	5ccb      	ldrb	r3, [r1, r3]
 800af28:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	40023800 	.word	0x40023800
 800af34:	08013438 	.word	0x08013438

0800af38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af3c:	f7ff ffdc 	bl	800aef8 <HAL_RCC_GetHCLKFreq>
 800af40:	4602      	mov	r2, r0
 800af42:	4b05      	ldr	r3, [pc, #20]	@ (800af58 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	0b5b      	lsrs	r3, r3, #13
 800af48:	f003 0307 	and.w	r3, r3, #7
 800af4c:	4903      	ldr	r1, [pc, #12]	@ (800af5c <HAL_RCC_GetPCLK2Freq+0x24>)
 800af4e:	5ccb      	ldrb	r3, [r1, r3]
 800af50:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af54:	4618      	mov	r0, r3
 800af56:	bd80      	pop	{r7, pc}
 800af58:	40023800 	.word	0x40023800
 800af5c:	08013438 	.word	0x08013438

0800af60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	220f      	movs	r2, #15
 800af6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800af70:	4b12      	ldr	r3, [pc, #72]	@ (800afbc <HAL_RCC_GetClockConfig+0x5c>)
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	f003 0203 	and.w	r2, r3, #3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800af7c:	4b0f      	ldr	r3, [pc, #60]	@ (800afbc <HAL_RCC_GetClockConfig+0x5c>)
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800af88:	4b0c      	ldr	r3, [pc, #48]	@ (800afbc <HAL_RCC_GetClockConfig+0x5c>)
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800af94:	4b09      	ldr	r3, [pc, #36]	@ (800afbc <HAL_RCC_GetClockConfig+0x5c>)
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	08db      	lsrs	r3, r3, #3
 800af9a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800afa2:	4b07      	ldr	r3, [pc, #28]	@ (800afc0 <HAL_RCC_GetClockConfig+0x60>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 020f 	and.w	r2, r3, #15
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	601a      	str	r2, [r3, #0]
}
 800afae:	bf00      	nop
 800afb0:	370c      	adds	r7, #12
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	40023800 	.word	0x40023800
 800afc0:	40023c00 	.word	0x40023c00

0800afc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800afcc:	2300      	movs	r3, #0
 800afce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 0301 	and.w	r3, r3, #1
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10b      	bne.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d105      	bne.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d075      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800aff8:	4b91      	ldr	r3, [pc, #580]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800affa:	2200      	movs	r2, #0
 800affc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800affe:	f7fa fa05 	bl	800540c <HAL_GetTick>
 800b002:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b004:	e008      	b.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b006:	f7fa fa01 	bl	800540c <HAL_GetTick>
 800b00a:	4602      	mov	r2, r0
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	2b02      	cmp	r3, #2
 800b012:	d901      	bls.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b014:	2303      	movs	r3, #3
 800b016:	e189      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b018:	4b8a      	ldr	r3, [pc, #552]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1f0      	bne.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 0301 	and.w	r3, r3, #1
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d009      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	019a      	lsls	r2, r3, #6
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	071b      	lsls	r3, r3, #28
 800b03c:	4981      	ldr	r1, [pc, #516]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b03e:	4313      	orrs	r3, r2
 800b040:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 0302 	and.w	r3, r3, #2
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d01f      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b050:	4b7c      	ldr	r3, [pc, #496]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b056:	0f1b      	lsrs	r3, r3, #28
 800b058:	f003 0307 	and.w	r3, r3, #7
 800b05c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	019a      	lsls	r2, r3, #6
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	061b      	lsls	r3, r3, #24
 800b06a:	431a      	orrs	r2, r3
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	071b      	lsls	r3, r3, #28
 800b070:	4974      	ldr	r1, [pc, #464]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b072:	4313      	orrs	r3, r2
 800b074:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b078:	4b72      	ldr	r3, [pc, #456]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b07a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b07e:	f023 021f 	bic.w	r2, r3, #31
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	69db      	ldr	r3, [r3, #28]
 800b086:	3b01      	subs	r3, #1
 800b088:	496e      	ldr	r1, [pc, #440]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b08a:	4313      	orrs	r3, r2
 800b08c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00d      	beq.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	019a      	lsls	r2, r3, #6
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	061b      	lsls	r3, r3, #24
 800b0a8:	431a      	orrs	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	071b      	lsls	r3, r3, #28
 800b0b0:	4964      	ldr	r1, [pc, #400]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b0b8:	4b61      	ldr	r3, [pc, #388]	@ (800b240 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b0be:	f7fa f9a5 	bl	800540c <HAL_GetTick>
 800b0c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b0c4:	e008      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b0c6:	f7fa f9a1 	bl	800540c <HAL_GetTick>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	d901      	bls.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	e129      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b0d8:	4b5a      	ldr	r3, [pc, #360]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d0f0      	beq.n	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d105      	bne.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d079      	beq.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b0fc:	4b52      	ldr	r3, [pc, #328]	@ (800b248 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b102:	f7fa f983 	bl	800540c <HAL_GetTick>
 800b106:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b108:	e008      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b10a:	f7fa f97f 	bl	800540c <HAL_GetTick>
 800b10e:	4602      	mov	r2, r0
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	2b02      	cmp	r3, #2
 800b116:	d901      	bls.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b118:	2303      	movs	r3, #3
 800b11a:	e107      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b11c:	4b49      	ldr	r3, [pc, #292]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b128:	d0ef      	beq.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 0304 	and.w	r3, r3, #4
 800b132:	2b00      	cmp	r3, #0
 800b134:	d020      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b136:	4b43      	ldr	r3, [pc, #268]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b13c:	0f1b      	lsrs	r3, r3, #28
 800b13e:	f003 0307 	and.w	r3, r3, #7
 800b142:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	019a      	lsls	r2, r3, #6
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	695b      	ldr	r3, [r3, #20]
 800b14e:	061b      	lsls	r3, r3, #24
 800b150:	431a      	orrs	r2, r3
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	071b      	lsls	r3, r3, #28
 800b156:	493b      	ldr	r1, [pc, #236]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b158:	4313      	orrs	r3, r2
 800b15a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b15e:	4b39      	ldr	r3, [pc, #228]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b164:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a1b      	ldr	r3, [r3, #32]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	021b      	lsls	r3, r3, #8
 800b170:	4934      	ldr	r1, [pc, #208]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b172:	4313      	orrs	r3, r2
 800b174:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 0308 	and.w	r3, r3, #8
 800b180:	2b00      	cmp	r3, #0
 800b182:	d01e      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b184:	4b2f      	ldr	r3, [pc, #188]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b18a:	0e1b      	lsrs	r3, r3, #24
 800b18c:	f003 030f 	and.w	r3, r3, #15
 800b190:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	019a      	lsls	r2, r3, #6
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	061b      	lsls	r3, r3, #24
 800b19c:	431a      	orrs	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	071b      	lsls	r3, r3, #28
 800b1a4:	4927      	ldr	r1, [pc, #156]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b1ac:	4b25      	ldr	r3, [pc, #148]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ba:	4922      	ldr	r1, [pc, #136]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b1c2:	4b21      	ldr	r3, [pc, #132]	@ (800b248 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b1c8:	f7fa f920 	bl	800540c <HAL_GetTick>
 800b1cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b1ce:	e008      	b.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b1d0:	f7fa f91c 	bl	800540c <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d901      	bls.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e0a4      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b1e2:	4b18      	ldr	r3, [pc, #96]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1ee:	d1ef      	bne.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 0320 	and.w	r3, r3, #32
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 808b 	beq.w	800b314 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b1fe:	2300      	movs	r3, #0
 800b200:	60fb      	str	r3, [r7, #12]
 800b202:	4b10      	ldr	r3, [pc, #64]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b206:	4a0f      	ldr	r2, [pc, #60]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b20c:	6413      	str	r3, [r2, #64]	@ 0x40
 800b20e:	4b0d      	ldr	r3, [pc, #52]	@ (800b244 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b216:	60fb      	str	r3, [r7, #12]
 800b218:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b21a:	4b0c      	ldr	r3, [pc, #48]	@ (800b24c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a0b      	ldr	r2, [pc, #44]	@ (800b24c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b224:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b226:	f7fa f8f1 	bl	800540c <HAL_GetTick>
 800b22a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800b22c:	e010      	b.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b22e:	f7fa f8ed 	bl	800540c <HAL_GetTick>
 800b232:	4602      	mov	r2, r0
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	2b02      	cmp	r3, #2
 800b23a:	d909      	bls.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800b23c:	2303      	movs	r3, #3
 800b23e:	e075      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x368>
 800b240:	42470068 	.word	0x42470068
 800b244:	40023800 	.word	0x40023800
 800b248:	42470070 	.word	0x42470070
 800b24c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800b250:	4b38      	ldr	r3, [pc, #224]	@ (800b334 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d0e8      	beq.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b25c:	4b36      	ldr	r3, [pc, #216]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b25e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b260:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b264:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d02f      	beq.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b270:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	429a      	cmp	r2, r3
 800b278:	d028      	beq.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b27a:	4b2f      	ldr	r3, [pc, #188]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b27c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b27e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b282:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b284:	4b2d      	ldr	r3, [pc, #180]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800b286:	2201      	movs	r2, #1
 800b288:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b28a:	4b2c      	ldr	r3, [pc, #176]	@ (800b33c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b290:	4a29      	ldr	r2, [pc, #164]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b296:	4b28      	ldr	r3, [pc, #160]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b29a:	f003 0301 	and.w	r3, r3, #1
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d114      	bne.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b2a2:	f7fa f8b3 	bl	800540c <HAL_GetTick>
 800b2a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2a8:	e00a      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2aa:	f7fa f8af 	bl	800540c <HAL_GetTick>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d901      	bls.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e035      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b2c0:	4b1d      	ldr	r3, [pc, #116]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b2c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2c4:	f003 0302 	and.w	r3, r3, #2
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d0ee      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2d8:	d10d      	bne.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b2da:	4b17      	ldr	r3, [pc, #92]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b2ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2ee:	4912      	ldr	r1, [pc, #72]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	608b      	str	r3, [r1, #8]
 800b2f4:	e005      	b.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800b2f6:	4b10      	ldr	r3, [pc, #64]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	4a0f      	ldr	r2, [pc, #60]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b2fc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b300:	6093      	str	r3, [r2, #8]
 800b302:	4b0d      	ldr	r3, [pc, #52]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b304:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b30a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b30e:	490a      	ldr	r1, [pc, #40]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b310:	4313      	orrs	r3, r2
 800b312:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 0310 	and.w	r3, r3, #16
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d004      	beq.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800b326:	4b06      	ldr	r3, [pc, #24]	@ (800b340 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800b328:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3718      	adds	r7, #24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	40007000 	.word	0x40007000
 800b338:	40023800 	.word	0x40023800
 800b33c:	42470e40 	.word	0x42470e40
 800b340:	424711e0 	.word	0x424711e0

0800b344 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	e025      	b.n	800b3a4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b00      	cmp	r3, #0
 800b362:	d106      	bne.n	800b372 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7f7 ff75 	bl	800325c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2202      	movs	r2, #2
 800b376:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	3304      	adds	r3, #4
 800b382:	4619      	mov	r1, r3
 800b384:	4610      	mov	r0, r2
 800b386:	f001 fef7 	bl	800d178 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6818      	ldr	r0, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	461a      	mov	r2, r3
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	f001 ff4c 	bl	800d232 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2201      	movs	r2, #1
 800b39e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b3be:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d101      	bne.n	800b3ca <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	e021      	b.n	800b40e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b3ca:	7dfb      	ldrb	r3, [r7, #23]
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d002      	beq.n	800b3d6 <HAL_SDRAM_SendCommand+0x2a>
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
 800b3d2:	2b05      	cmp	r3, #5
 800b3d4:	d118      	bne.n	800b408 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2202      	movs	r2, #2
 800b3da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	68b9      	ldr	r1, [r7, #8]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f001 ff8c 	bl	800d304 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d104      	bne.n	800b3fe <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2205      	movs	r2, #5
 800b3f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b3fc:	e006      	b.n	800b40c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2201      	movs	r2, #1
 800b402:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b406:	e001      	b.n	800b40c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	e000      	b.n	800b40e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3718      	adds	r7, #24
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b082      	sub	sp, #8
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b426:	b2db      	uxtb	r3, r3
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d101      	bne.n	800b430 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b42c:	2302      	movs	r3, #2
 800b42e:	e016      	b.n	800b45e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b436:	b2db      	uxtb	r3, r3
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d10f      	bne.n	800b45c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2202      	movs	r2, #2
 800b440:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f001 ff97 	bl	800d37e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b458:	2300      	movs	r3, #0
 800b45a:	e000      	b.n	800b45e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b082      	sub	sp, #8
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d101      	bne.n	800b478 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	e07b      	b.n	800b570 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d108      	bne.n	800b492 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b488:	d009      	beq.n	800b49e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	61da      	str	r2, [r3, #28]
 800b490:	e005      	b.n	800b49e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d106      	bne.n	800b4be <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7f7 fcf1 	bl	8002ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b4d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b4e6:	431a      	orrs	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4f0:	431a      	orrs	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	f003 0302 	and.w	r3, r3, #2
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	695b      	ldr	r3, [r3, #20]
 800b500:	f003 0301 	and.w	r3, r3, #1
 800b504:	431a      	orrs	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	699b      	ldr	r3, [r3, #24]
 800b50a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b50e:	431a      	orrs	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	69db      	ldr	r3, [r3, #28]
 800b514:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b518:	431a      	orrs	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b522:	ea42 0103 	orr.w	r1, r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b52a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	430a      	orrs	r2, r1
 800b534:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	699b      	ldr	r3, [r3, #24]
 800b53a:	0c1b      	lsrs	r3, r3, #16
 800b53c:	f003 0104 	and.w	r1, r3, #4
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b544:	f003 0210 	and.w	r2, r3, #16
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	430a      	orrs	r2, r1
 800b54e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	69da      	ldr	r2, [r3, #28]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b55e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e01a      	b.n	800b5c0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2202      	movs	r2, #2
 800b58e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b5a0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7f7 fcc4 	bl	8002f30 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b088      	sub	sp, #32
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	603b      	str	r3, [r7, #0]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b5d8:	f7f9 ff18 	bl	800540c <HAL_GetTick>
 800b5dc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b5de:	88fb      	ldrh	r3, [r7, #6]
 800b5e0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d001      	beq.n	800b5f2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b5ee:	2302      	movs	r3, #2
 800b5f0:	e12a      	b.n	800b848 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <HAL_SPI_Transmit+0x36>
 800b5f8:	88fb      	ldrh	r3, [r7, #6]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d101      	bne.n	800b602 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e122      	b.n	800b848 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d101      	bne.n	800b610 <HAL_SPI_Transmit+0x48>
 800b60c:	2302      	movs	r3, #2
 800b60e:	e11b      	b.n	800b848 <HAL_SPI_Transmit+0x280>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2201      	movs	r2, #1
 800b614:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2203      	movs	r2, #3
 800b61c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	88fa      	ldrh	r2, [r7, #6]
 800b630:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	88fa      	ldrh	r2, [r7, #6]
 800b636:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2200      	movs	r2, #0
 800b63c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2200      	movs	r2, #0
 800b648:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2200      	movs	r2, #0
 800b64e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2200      	movs	r2, #0
 800b654:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b65e:	d10f      	bne.n	800b680 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b66e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b67e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b68a:	2b40      	cmp	r3, #64	@ 0x40
 800b68c:	d007      	beq.n	800b69e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b69c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6a6:	d152      	bne.n	800b74e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <HAL_SPI_Transmit+0xee>
 800b6b0:	8b7b      	ldrh	r3, [r7, #26]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d145      	bne.n	800b742 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6ba:	881a      	ldrh	r2, [r3, #0]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6c6:	1c9a      	adds	r2, r3, #2
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b6da:	e032      	b.n	800b742 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	f003 0302 	and.w	r3, r3, #2
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d112      	bne.n	800b710 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6ee:	881a      	ldrh	r2, [r3, #0]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6fa:	1c9a      	adds	r2, r3, #2
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b704:	b29b      	uxth	r3, r3
 800b706:	3b01      	subs	r3, #1
 800b708:	b29a      	uxth	r2, r3
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b70e:	e018      	b.n	800b742 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b710:	f7f9 fe7c 	bl	800540c <HAL_GetTick>
 800b714:	4602      	mov	r2, r0
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	1ad3      	subs	r3, r2, r3
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d803      	bhi.n	800b728 <HAL_SPI_Transmit+0x160>
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b726:	d102      	bne.n	800b72e <HAL_SPI_Transmit+0x166>
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d109      	bne.n	800b742 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b73e:	2303      	movs	r3, #3
 800b740:	e082      	b.n	800b848 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b746:	b29b      	uxth	r3, r3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1c7      	bne.n	800b6dc <HAL_SPI_Transmit+0x114>
 800b74c:	e053      	b.n	800b7f6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d002      	beq.n	800b75c <HAL_SPI_Transmit+0x194>
 800b756:	8b7b      	ldrh	r3, [r7, #26]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d147      	bne.n	800b7ec <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	330c      	adds	r3, #12
 800b766:	7812      	ldrb	r2, [r2, #0]
 800b768:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b76e:	1c5a      	adds	r2, r3, #1
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b778:	b29b      	uxth	r3, r3
 800b77a:	3b01      	subs	r3, #1
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b782:	e033      	b.n	800b7ec <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	f003 0302 	and.w	r3, r3, #2
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d113      	bne.n	800b7ba <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	330c      	adds	r3, #12
 800b79c:	7812      	ldrb	r2, [r2, #0]
 800b79e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7a4:	1c5a      	adds	r2, r3, #1
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b7b8:	e018      	b.n	800b7ec <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7ba:	f7f9 fe27 	bl	800540c <HAL_GetTick>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	683a      	ldr	r2, [r7, #0]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d803      	bhi.n	800b7d2 <HAL_SPI_Transmit+0x20a>
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d0:	d102      	bne.n	800b7d8 <HAL_SPI_Transmit+0x210>
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d109      	bne.n	800b7ec <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	e02d      	b.n	800b848 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1c6      	bne.n	800b784 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b7f6:	69fa      	ldr	r2, [r7, #28]
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 fbe6 	bl	800bfcc <SPI_EndRxTxTransaction>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d002      	beq.n	800b80c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2220      	movs	r2, #32
 800b80a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10a      	bne.n	800b82a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b814:	2300      	movs	r3, #0
 800b816:	617b      	str	r3, [r7, #20]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	617b      	str	r3, [r7, #20]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2200      	movs	r2, #0
 800b836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	e000      	b.n	800b848 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b846:	2300      	movs	r3, #0
  }
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3720      	adds	r7, #32
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b088      	sub	sp, #32
 800b854:	af02      	add	r7, sp, #8
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	603b      	str	r3, [r7, #0]
 800b85c:	4613      	mov	r3, r2
 800b85e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d001      	beq.n	800b870 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800b86c:	2302      	movs	r3, #2
 800b86e:	e104      	b.n	800ba7a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b878:	d112      	bne.n	800b8a0 <HAL_SPI_Receive+0x50>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10e      	bne.n	800b8a0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2204      	movs	r2, #4
 800b886:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b88a:	88fa      	ldrh	r2, [r7, #6]
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	4613      	mov	r3, r2
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	68b9      	ldr	r1, [r7, #8]
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f000 f8f3 	bl	800ba82 <HAL_SPI_TransmitReceive>
 800b89c:	4603      	mov	r3, r0
 800b89e:	e0ec      	b.n	800ba7a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8a0:	f7f9 fdb4 	bl	800540c <HAL_GetTick>
 800b8a4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d002      	beq.n	800b8b2 <HAL_SPI_Receive+0x62>
 800b8ac:	88fb      	ldrh	r3, [r7, #6]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e0e1      	b.n	800ba7a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d101      	bne.n	800b8c4 <HAL_SPI_Receive+0x74>
 800b8c0:	2302      	movs	r3, #2
 800b8c2:	e0da      	b.n	800ba7a <HAL_SPI_Receive+0x22a>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2204      	movs	r2, #4
 800b8d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	88fa      	ldrh	r2, [r7, #6]
 800b8e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	88fa      	ldrh	r2, [r7, #6]
 800b8ea:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b912:	d10f      	bne.n	800b934 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b922:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b932:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b93e:	2b40      	cmp	r3, #64	@ 0x40
 800b940:	d007      	beq.n	800b952 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b950:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d170      	bne.n	800ba3c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b95a:	e035      	b.n	800b9c8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	f003 0301 	and.w	r3, r3, #1
 800b966:	2b01      	cmp	r3, #1
 800b968:	d115      	bne.n	800b996 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f103 020c 	add.w	r2, r3, #12
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b976:	7812      	ldrb	r2, [r2, #0]
 800b978:	b2d2      	uxtb	r2, r2
 800b97a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b980:	1c5a      	adds	r2, r3, #1
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	3b01      	subs	r3, #1
 800b98e:	b29a      	uxth	r2, r3
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800b994:	e018      	b.n	800b9c8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b996:	f7f9 fd39 	bl	800540c <HAL_GetTick>
 800b99a:	4602      	mov	r2, r0
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	1ad3      	subs	r3, r2, r3
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d803      	bhi.n	800b9ae <HAL_SPI_Receive+0x15e>
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ac:	d102      	bne.n	800b9b4 <HAL_SPI_Receive+0x164>
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d109      	bne.n	800b9c8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e058      	b.n	800ba7a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1c4      	bne.n	800b95c <HAL_SPI_Receive+0x10c>
 800b9d2:	e038      	b.n	800ba46 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	f003 0301 	and.w	r3, r3, #1
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d113      	bne.n	800ba0a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	68da      	ldr	r2, [r3, #12]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ec:	b292      	uxth	r2, r2
 800b9ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9f4:	1c9a      	adds	r2, r3, #2
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	3b01      	subs	r3, #1
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ba08:	e018      	b.n	800ba3c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba0a:	f7f9 fcff 	bl	800540c <HAL_GetTick>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	683a      	ldr	r2, [r7, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d803      	bhi.n	800ba22 <HAL_SPI_Receive+0x1d2>
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba20:	d102      	bne.n	800ba28 <HAL_SPI_Receive+0x1d8>
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d109      	bne.n	800ba3c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	e01e      	b.n	800ba7a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1c6      	bne.n	800b9d4 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba46:	697a      	ldr	r2, [r7, #20]
 800ba48:	6839      	ldr	r1, [r7, #0]
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f000 fa58 	bl	800bf00 <SPI_EndRxTransaction>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2220      	movs	r2, #32
 800ba5a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d001      	beq.n	800ba78 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800ba74:	2301      	movs	r3, #1
 800ba76:	e000      	b.n	800ba7a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800ba78:	2300      	movs	r3, #0
  }
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3718      	adds	r7, #24
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b08a      	sub	sp, #40	@ 0x28
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	60f8      	str	r0, [r7, #12]
 800ba8a:	60b9      	str	r1, [r7, #8]
 800ba8c:	607a      	str	r2, [r7, #4]
 800ba8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ba90:	2301      	movs	r3, #1
 800ba92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ba94:	f7f9 fcba 	bl	800540c <HAL_GetTick>
 800ba98:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800baa0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800baa8:	887b      	ldrh	r3, [r7, #2]
 800baaa:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800baac:	7ffb      	ldrb	r3, [r7, #31]
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d00c      	beq.n	800bacc <HAL_SPI_TransmitReceive+0x4a>
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bab8:	d106      	bne.n	800bac8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d102      	bne.n	800bac8 <HAL_SPI_TransmitReceive+0x46>
 800bac2:	7ffb      	ldrb	r3, [r7, #31]
 800bac4:	2b04      	cmp	r3, #4
 800bac6:	d001      	beq.n	800bacc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800bac8:	2302      	movs	r3, #2
 800baca:	e17f      	b.n	800bdcc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d005      	beq.n	800bade <HAL_SPI_TransmitReceive+0x5c>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <HAL_SPI_TransmitReceive+0x5c>
 800bad8:	887b      	ldrh	r3, [r7, #2]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d101      	bne.n	800bae2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	e174      	b.n	800bdcc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d101      	bne.n	800baf0 <HAL_SPI_TransmitReceive+0x6e>
 800baec:	2302      	movs	r3, #2
 800baee:	e16d      	b.n	800bdcc <HAL_SPI_TransmitReceive+0x34a>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b04      	cmp	r3, #4
 800bb02:	d003      	beq.n	800bb0c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2205      	movs	r2, #5
 800bb08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	887a      	ldrh	r2, [r7, #2]
 800bb1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	887a      	ldrh	r2, [r7, #2]
 800bb22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	887a      	ldrh	r2, [r7, #2]
 800bb2e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	887a      	ldrh	r2, [r7, #2]
 800bb34:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb4c:	2b40      	cmp	r3, #64	@ 0x40
 800bb4e:	d007      	beq.n	800bb60 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb68:	d17e      	bne.n	800bc68 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d002      	beq.n	800bb78 <HAL_SPI_TransmitReceive+0xf6>
 800bb72:	8afb      	ldrh	r3, [r7, #22]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d16c      	bne.n	800bc52 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb7c:	881a      	ldrh	r2, [r3, #0]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb88:	1c9a      	adds	r2, r3, #2
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	3b01      	subs	r3, #1
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb9c:	e059      	b.n	800bc52 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	f003 0302 	and.w	r3, r3, #2
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	d11b      	bne.n	800bbe4 <HAL_SPI_TransmitReceive+0x162>
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d016      	beq.n	800bbe4 <HAL_SPI_TransmitReceive+0x162>
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d113      	bne.n	800bbe4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbc0:	881a      	ldrh	r2, [r3, #0]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbcc:	1c9a      	adds	r2, r3, #2
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	f003 0301 	and.w	r3, r3, #1
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d119      	bne.n	800bc26 <HAL_SPI_TransmitReceive+0x1a4>
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d014      	beq.n	800bc26 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68da      	ldr	r2, [r3, #12]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc06:	b292      	uxth	r2, r2
 800bc08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc0e:	1c9a      	adds	r2, r3, #2
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bc22:	2301      	movs	r3, #1
 800bc24:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bc26:	f7f9 fbf1 	bl	800540c <HAL_GetTick>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	6a3b      	ldr	r3, [r7, #32]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d80d      	bhi.n	800bc52 <HAL_SPI_TransmitReceive+0x1d0>
 800bc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc3c:	d009      	beq.n	800bc52 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2201      	movs	r2, #1
 800bc42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800bc4e:	2303      	movs	r3, #3
 800bc50:	e0bc      	b.n	800bdcc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1a0      	bne.n	800bb9e <HAL_SPI_TransmitReceive+0x11c>
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d19b      	bne.n	800bb9e <HAL_SPI_TransmitReceive+0x11c>
 800bc66:	e082      	b.n	800bd6e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <HAL_SPI_TransmitReceive+0x1f4>
 800bc70:	8afb      	ldrh	r3, [r7, #22]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d171      	bne.n	800bd5a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	330c      	adds	r3, #12
 800bc80:	7812      	ldrb	r2, [r2, #0]
 800bc82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc88:	1c5a      	adds	r2, r3, #1
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	3b01      	subs	r3, #1
 800bc96:	b29a      	uxth	r2, r3
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc9c:	e05d      	b.n	800bd5a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	f003 0302 	and.w	r3, r3, #2
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	d11c      	bne.n	800bce6 <HAL_SPI_TransmitReceive+0x264>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d017      	beq.n	800bce6 <HAL_SPI_TransmitReceive+0x264>
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d114      	bne.n	800bce6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	330c      	adds	r3, #12
 800bcc6:	7812      	ldrb	r2, [r2, #0]
 800bcc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcce:	1c5a      	adds	r2, r3, #1
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bce2:	2300      	movs	r3, #0
 800bce4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	f003 0301 	and.w	r3, r3, #1
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d119      	bne.n	800bd28 <HAL_SPI_TransmitReceive+0x2a6>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d014      	beq.n	800bd28 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	68da      	ldr	r2, [r3, #12]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd08:	b2d2      	uxtb	r2, r2
 800bd0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd10:	1c5a      	adds	r2, r3, #1
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	b29a      	uxth	r2, r3
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bd24:	2301      	movs	r3, #1
 800bd26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bd28:	f7f9 fb70 	bl	800540c <HAL_GetTick>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	6a3b      	ldr	r3, [r7, #32]
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d803      	bhi.n	800bd40 <HAL_SPI_TransmitReceive+0x2be>
 800bd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3e:	d102      	bne.n	800bd46 <HAL_SPI_TransmitReceive+0x2c4>
 800bd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d109      	bne.n	800bd5a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800bd56:	2303      	movs	r3, #3
 800bd58:	e038      	b.n	800bdcc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d19c      	bne.n	800bc9e <HAL_SPI_TransmitReceive+0x21c>
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d197      	bne.n	800bc9e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bd6e:	6a3a      	ldr	r2, [r7, #32]
 800bd70:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f000 f92a 	bl	800bfcc <SPI_EndRxTxTransaction>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d008      	beq.n	800bd90 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2220      	movs	r2, #32
 800bd82:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e01d      	b.n	800bdcc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10a      	bne.n	800bdae <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd98:	2300      	movs	r3, #0
 800bd9a:	613b      	str	r3, [r7, #16]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	613b      	str	r3, [r7, #16]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	613b      	str	r3, [r7, #16]
 800bdac:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d001      	beq.n	800bdca <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e000      	b.n	800bdcc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800bdca:	2300      	movs	r3, #0
  }
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3728      	adds	r7, #40	@ 0x28
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bde2:	b2db      	uxtb	r3, r3
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b088      	sub	sp, #32
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	603b      	str	r3, [r7, #0]
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800be00:	f7f9 fb04 	bl	800540c <HAL_GetTick>
 800be04:	4602      	mov	r2, r0
 800be06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be08:	1a9b      	subs	r3, r3, r2
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	4413      	add	r3, r2
 800be0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800be10:	f7f9 fafc 	bl	800540c <HAL_GetTick>
 800be14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800be16:	4b39      	ldr	r3, [pc, #228]	@ (800befc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	015b      	lsls	r3, r3, #5
 800be1c:	0d1b      	lsrs	r3, r3, #20
 800be1e:	69fa      	ldr	r2, [r7, #28]
 800be20:	fb02 f303 	mul.w	r3, r2, r3
 800be24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be26:	e054      	b.n	800bed2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be2e:	d050      	beq.n	800bed2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800be30:	f7f9 faec 	bl	800540c <HAL_GetTick>
 800be34:	4602      	mov	r2, r0
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	69fa      	ldr	r2, [r7, #28]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d902      	bls.n	800be46 <SPI_WaitFlagStateUntilTimeout+0x56>
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d13d      	bne.n	800bec2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	685a      	ldr	r2, [r3, #4]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800be54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800be5e:	d111      	bne.n	800be84 <SPI_WaitFlagStateUntilTimeout+0x94>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be68:	d004      	beq.n	800be74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be72:	d107      	bne.n	800be84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800be82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be8c:	d10f      	bne.n	800beae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800be9c:	601a      	str	r2, [r3, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800beac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2201      	movs	r2, #1
 800beb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2200      	movs	r2, #0
 800beba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800bebe:	2303      	movs	r3, #3
 800bec0:	e017      	b.n	800bef2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d101      	bne.n	800becc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bec8:	2300      	movs	r3, #0
 800beca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	3b01      	subs	r3, #1
 800bed0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	689a      	ldr	r2, [r3, #8]
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	4013      	ands	r3, r2
 800bedc:	68ba      	ldr	r2, [r7, #8]
 800bede:	429a      	cmp	r2, r3
 800bee0:	bf0c      	ite	eq
 800bee2:	2301      	moveq	r3, #1
 800bee4:	2300      	movne	r3, #0
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	461a      	mov	r2, r3
 800beea:	79fb      	ldrb	r3, [r7, #7]
 800beec:	429a      	cmp	r2, r3
 800beee:	d19b      	bne.n	800be28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3720      	adds	r7, #32
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	200001e0 	.word	0x200001e0

0800bf00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b086      	sub	sp, #24
 800bf04:	af02      	add	r7, sp, #8
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bf14:	d111      	bne.n	800bf3a <SPI_EndRxTransaction+0x3a>
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf1e:	d004      	beq.n	800bf2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf28:	d107      	bne.n	800bf3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bf38:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bf42:	d12a      	bne.n	800bf9a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf4c:	d012      	beq.n	800bf74 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	2200      	movs	r2, #0
 800bf56:	2180      	movs	r1, #128	@ 0x80
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f7ff ff49 	bl	800bdf0 <SPI_WaitFlagStateUntilTimeout>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d02d      	beq.n	800bfc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf68:	f043 0220 	orr.w	r2, r3, #32
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bf70:	2303      	movs	r3, #3
 800bf72:	e026      	b.n	800bfc2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	2101      	movs	r1, #1
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f7ff ff36 	bl	800bdf0 <SPI_WaitFlagStateUntilTimeout>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d01a      	beq.n	800bfc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf8e:	f043 0220 	orr.w	r2, r3, #32
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800bf96:	2303      	movs	r3, #3
 800bf98:	e013      	b.n	800bfc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f7ff ff23 	bl	800bdf0 <SPI_WaitFlagStateUntilTimeout>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d007      	beq.n	800bfc0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfb4:	f043 0220 	orr.w	r2, r3, #32
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800bfbc:	2303      	movs	r3, #3
 800bfbe:	e000      	b.n	800bfc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
	...

0800bfcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b088      	sub	sp, #32
 800bfd0:	af02      	add	r7, sp, #8
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	2102      	movs	r1, #2
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f7ff ff04 	bl	800bdf0 <SPI_WaitFlagStateUntilTimeout>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d007      	beq.n	800bffe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bff2:	f043 0220 	orr.w	r2, r3, #32
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800bffa:	2303      	movs	r3, #3
 800bffc:	e032      	b.n	800c064 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bffe:	4b1b      	ldr	r3, [pc, #108]	@ (800c06c <SPI_EndRxTxTransaction+0xa0>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4a1b      	ldr	r2, [pc, #108]	@ (800c070 <SPI_EndRxTxTransaction+0xa4>)
 800c004:	fba2 2303 	umull	r2, r3, r2, r3
 800c008:	0d5b      	lsrs	r3, r3, #21
 800c00a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c00e:	fb02 f303 	mul.w	r3, r2, r3
 800c012:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c01c:	d112      	bne.n	800c044 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2200      	movs	r2, #0
 800c026:	2180      	movs	r1, #128	@ 0x80
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f7ff fee1 	bl	800bdf0 <SPI_WaitFlagStateUntilTimeout>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d016      	beq.n	800c062 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c038:	f043 0220 	orr.w	r2, r3, #32
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c040:	2303      	movs	r3, #3
 800c042:	e00f      	b.n	800c064 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00a      	beq.n	800c060 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	3b01      	subs	r3, #1
 800c04e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c05a:	2b80      	cmp	r3, #128	@ 0x80
 800c05c:	d0f2      	beq.n	800c044 <SPI_EndRxTxTransaction+0x78>
 800c05e:	e000      	b.n	800c062 <SPI_EndRxTxTransaction+0x96>
        break;
 800c060:	bf00      	nop
  }

  return HAL_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	200001e0 	.word	0x200001e0
 800c070:	165e9f81 	.word	0x165e9f81

0800c074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d101      	bne.n	800c086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c082:	2301      	movs	r3, #1
 800c084:	e041      	b.n	800c10a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d106      	bne.n	800c0a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f7f6 ff66 	bl	8002f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2202      	movs	r2, #2
 800c0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	f000 fa7e 	bl	800c5b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
	...

0800c114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c122:	b2db      	uxtb	r3, r3
 800c124:	2b01      	cmp	r3, #1
 800c126:	d001      	beq.n	800c12c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	e04e      	b.n	800c1ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2202      	movs	r2, #2
 800c130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68da      	ldr	r2, [r3, #12]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f042 0201 	orr.w	r2, r2, #1
 800c142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	4a23      	ldr	r2, [pc, #140]	@ (800c1d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d022      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c156:	d01d      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a1f      	ldr	r2, [pc, #124]	@ (800c1dc <HAL_TIM_Base_Start_IT+0xc8>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d018      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a1e      	ldr	r2, [pc, #120]	@ (800c1e0 <HAL_TIM_Base_Start_IT+0xcc>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d013      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a1c      	ldr	r2, [pc, #112]	@ (800c1e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d00e      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a1b      	ldr	r2, [pc, #108]	@ (800c1e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d009      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a19      	ldr	r2, [pc, #100]	@ (800c1ec <HAL_TIM_Base_Start_IT+0xd8>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d004      	beq.n	800c194 <HAL_TIM_Base_Start_IT+0x80>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a18      	ldr	r2, [pc, #96]	@ (800c1f0 <HAL_TIM_Base_Start_IT+0xdc>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d111      	bne.n	800c1b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	f003 0307 	and.w	r3, r3, #7
 800c19e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2b06      	cmp	r3, #6
 800c1a4:	d010      	beq.n	800c1c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f042 0201 	orr.w	r2, r2, #1
 800c1b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1b6:	e007      	b.n	800c1c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f042 0201 	orr.w	r2, r2, #1
 800c1c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c1c8:	2300      	movs	r3, #0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3714      	adds	r7, #20
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	40010000 	.word	0x40010000
 800c1dc:	40000400 	.word	0x40000400
 800c1e0:	40000800 	.word	0x40000800
 800c1e4:	40000c00 	.word	0x40000c00
 800c1e8:	40010400 	.word	0x40010400
 800c1ec:	40014000 	.word	0x40014000
 800c1f0:	40001800 	.word	0x40001800

0800c1f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68db      	ldr	r3, [r3, #12]
 800c202:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	f003 0302 	and.w	r3, r3, #2
 800c212:	2b00      	cmp	r3, #0
 800c214:	d020      	beq.n	800c258 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f003 0302 	and.w	r3, r3, #2
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d01b      	beq.n	800c258 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f06f 0202 	mvn.w	r2, #2
 800c228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2201      	movs	r2, #1
 800c22e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	699b      	ldr	r3, [r3, #24]
 800c236:	f003 0303 	and.w	r3, r3, #3
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d003      	beq.n	800c246 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 f999 	bl	800c576 <HAL_TIM_IC_CaptureCallback>
 800c244:	e005      	b.n	800c252 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 f98b 	bl	800c562 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 f99c 	bl	800c58a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	f003 0304 	and.w	r3, r3, #4
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d020      	beq.n	800c2a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f003 0304 	and.w	r3, r3, #4
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d01b      	beq.n	800c2a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f06f 0204 	mvn.w	r2, #4
 800c274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2202      	movs	r2, #2
 800c27a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	699b      	ldr	r3, [r3, #24]
 800c282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f973 	bl	800c576 <HAL_TIM_IC_CaptureCallback>
 800c290:	e005      	b.n	800c29e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 f965 	bl	800c562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 f976 	bl	800c58a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	f003 0308 	and.w	r3, r3, #8
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d020      	beq.n	800c2f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f003 0308 	and.w	r3, r3, #8
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d01b      	beq.n	800c2f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f06f 0208 	mvn.w	r2, #8
 800c2c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2204      	movs	r2, #4
 800c2c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	69db      	ldr	r3, [r3, #28]
 800c2ce:	f003 0303 	and.w	r3, r3, #3
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d003      	beq.n	800c2de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 f94d 	bl	800c576 <HAL_TIM_IC_CaptureCallback>
 800c2dc:	e005      	b.n	800c2ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 f93f 	bl	800c562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 f950 	bl	800c58a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	f003 0310 	and.w	r3, r3, #16
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d020      	beq.n	800c33c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f003 0310 	and.w	r3, r3, #16
 800c300:	2b00      	cmp	r3, #0
 800c302:	d01b      	beq.n	800c33c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f06f 0210 	mvn.w	r2, #16
 800c30c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2208      	movs	r2, #8
 800c312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	69db      	ldr	r3, [r3, #28]
 800c31a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d003      	beq.n	800c32a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f927 	bl	800c576 <HAL_TIM_IC_CaptureCallback>
 800c328:	e005      	b.n	800c336 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 f919 	bl	800c562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 f92a 	bl	800c58a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	f003 0301 	and.w	r3, r3, #1
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00c      	beq.n	800c360 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f003 0301 	and.w	r3, r3, #1
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d007      	beq.n	800c360 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f06f 0201 	mvn.w	r2, #1
 800c358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7f6 fb38 	bl	80029d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00c      	beq.n	800c384 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c370:	2b00      	cmp	r3, #0
 800c372:	d007      	beq.n	800c384 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c37c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 fae4 	bl	800c94c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00c      	beq.n	800c3a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c394:	2b00      	cmp	r3, #0
 800c396:	d007      	beq.n	800c3a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c3a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f8fb 	bl	800c59e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	f003 0320 	and.w	r3, r3, #32
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00c      	beq.n	800c3cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f003 0320 	and.w	r3, r3, #32
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d007      	beq.n	800c3cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f06f 0220 	mvn.w	r2, #32
 800c3c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fab6 	bl	800c938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3cc:	bf00      	nop
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}

0800c3d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d101      	bne.n	800c3f0 <HAL_TIM_ConfigClockSource+0x1c>
 800c3ec:	2302      	movs	r3, #2
 800c3ee:	e0b4      	b.n	800c55a <HAL_TIM_ConfigClockSource+0x186>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c40e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c428:	d03e      	beq.n	800c4a8 <HAL_TIM_ConfigClockSource+0xd4>
 800c42a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c42e:	f200 8087 	bhi.w	800c540 <HAL_TIM_ConfigClockSource+0x16c>
 800c432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c436:	f000 8086 	beq.w	800c546 <HAL_TIM_ConfigClockSource+0x172>
 800c43a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c43e:	d87f      	bhi.n	800c540 <HAL_TIM_ConfigClockSource+0x16c>
 800c440:	2b70      	cmp	r3, #112	@ 0x70
 800c442:	d01a      	beq.n	800c47a <HAL_TIM_ConfigClockSource+0xa6>
 800c444:	2b70      	cmp	r3, #112	@ 0x70
 800c446:	d87b      	bhi.n	800c540 <HAL_TIM_ConfigClockSource+0x16c>
 800c448:	2b60      	cmp	r3, #96	@ 0x60
 800c44a:	d050      	beq.n	800c4ee <HAL_TIM_ConfigClockSource+0x11a>
 800c44c:	2b60      	cmp	r3, #96	@ 0x60
 800c44e:	d877      	bhi.n	800c540 <HAL_TIM_ConfigClockSource+0x16c>
 800c450:	2b50      	cmp	r3, #80	@ 0x50
 800c452:	d03c      	beq.n	800c4ce <HAL_TIM_ConfigClockSource+0xfa>
 800c454:	2b50      	cmp	r3, #80	@ 0x50
 800c456:	d873      	bhi.n	800c540 <HAL_TIM_ConfigClockSource+0x16c>
 800c458:	2b40      	cmp	r3, #64	@ 0x40
 800c45a:	d058      	beq.n	800c50e <HAL_TIM_ConfigClockSource+0x13a>
 800c45c:	2b40      	cmp	r3, #64	@ 0x40
 800c45e:	d86f      	bhi.n	800c540 <HAL_TIM_ConfigClockSource+0x16c>
 800c460:	2b30      	cmp	r3, #48	@ 0x30
 800c462:	d064      	beq.n	800c52e <HAL_TIM_ConfigClockSource+0x15a>
 800c464:	2b30      	cmp	r3, #48	@ 0x30
 800c466:	d86b      	bhi.n	800c540 <HAL_TIM_ConfigClockSource+0x16c>
 800c468:	2b20      	cmp	r3, #32
 800c46a:	d060      	beq.n	800c52e <HAL_TIM_ConfigClockSource+0x15a>
 800c46c:	2b20      	cmp	r3, #32
 800c46e:	d867      	bhi.n	800c540 <HAL_TIM_ConfigClockSource+0x16c>
 800c470:	2b00      	cmp	r3, #0
 800c472:	d05c      	beq.n	800c52e <HAL_TIM_ConfigClockSource+0x15a>
 800c474:	2b10      	cmp	r3, #16
 800c476:	d05a      	beq.n	800c52e <HAL_TIM_ConfigClockSource+0x15a>
 800c478:	e062      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c48a:	f000 f9b9 	bl	800c800 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c49c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	68ba      	ldr	r2, [r7, #8]
 800c4a4:	609a      	str	r2, [r3, #8]
      break;
 800c4a6:	e04f      	b.n	800c548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4b8:	f000 f9a2 	bl	800c800 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	689a      	ldr	r2, [r3, #8]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c4ca:	609a      	str	r2, [r3, #8]
      break;
 800c4cc:	e03c      	b.n	800c548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4da:	461a      	mov	r2, r3
 800c4dc:	f000 f916 	bl	800c70c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2150      	movs	r1, #80	@ 0x50
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f000 f96f 	bl	800c7ca <TIM_ITRx_SetConfig>
      break;
 800c4ec:	e02c      	b.n	800c548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	f000 f935 	bl	800c76a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2160      	movs	r1, #96	@ 0x60
 800c506:	4618      	mov	r0, r3
 800c508:	f000 f95f 	bl	800c7ca <TIM_ITRx_SetConfig>
      break;
 800c50c:	e01c      	b.n	800c548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c51a:	461a      	mov	r2, r3
 800c51c:	f000 f8f6 	bl	800c70c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2140      	movs	r1, #64	@ 0x40
 800c526:	4618      	mov	r0, r3
 800c528:	f000 f94f 	bl	800c7ca <TIM_ITRx_SetConfig>
      break;
 800c52c:	e00c      	b.n	800c548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4619      	mov	r1, r3
 800c538:	4610      	mov	r0, r2
 800c53a:	f000 f946 	bl	800c7ca <TIM_ITRx_SetConfig>
      break;
 800c53e:	e003      	b.n	800c548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c540:	2301      	movs	r3, #1
 800c542:	73fb      	strb	r3, [r7, #15]
      break;
 800c544:	e000      	b.n	800c548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2201      	movs	r2, #1
 800c54c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c558:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c562:	b480      	push	{r7}
 800c564:	b083      	sub	sp, #12
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c56a:	bf00      	nop
 800c56c:	370c      	adds	r7, #12
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr

0800c576 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c576:	b480      	push	{r7}
 800c578:	b083      	sub	sp, #12
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c57e:	bf00      	nop
 800c580:	370c      	adds	r7, #12
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr

0800c58a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c58a:	b480      	push	{r7}
 800c58c:	b083      	sub	sp, #12
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c592:	bf00      	nop
 800c594:	370c      	adds	r7, #12
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr

0800c59e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c59e:	b480      	push	{r7}
 800c5a0:	b083      	sub	sp, #12
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5a6:	bf00      	nop
 800c5a8:	370c      	adds	r7, #12
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
	...

0800c5b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4a46      	ldr	r2, [pc, #280]	@ (800c6e0 <TIM_Base_SetConfig+0x12c>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d013      	beq.n	800c5f4 <TIM_Base_SetConfig+0x40>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5d2:	d00f      	beq.n	800c5f4 <TIM_Base_SetConfig+0x40>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a43      	ldr	r2, [pc, #268]	@ (800c6e4 <TIM_Base_SetConfig+0x130>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d00b      	beq.n	800c5f4 <TIM_Base_SetConfig+0x40>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	4a42      	ldr	r2, [pc, #264]	@ (800c6e8 <TIM_Base_SetConfig+0x134>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d007      	beq.n	800c5f4 <TIM_Base_SetConfig+0x40>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a41      	ldr	r2, [pc, #260]	@ (800c6ec <TIM_Base_SetConfig+0x138>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d003      	beq.n	800c5f4 <TIM_Base_SetConfig+0x40>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4a40      	ldr	r2, [pc, #256]	@ (800c6f0 <TIM_Base_SetConfig+0x13c>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d108      	bne.n	800c606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	4313      	orrs	r3, r2
 800c604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4a35      	ldr	r2, [pc, #212]	@ (800c6e0 <TIM_Base_SetConfig+0x12c>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d02b      	beq.n	800c666 <TIM_Base_SetConfig+0xb2>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c614:	d027      	beq.n	800c666 <TIM_Base_SetConfig+0xb2>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4a32      	ldr	r2, [pc, #200]	@ (800c6e4 <TIM_Base_SetConfig+0x130>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d023      	beq.n	800c666 <TIM_Base_SetConfig+0xb2>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	4a31      	ldr	r2, [pc, #196]	@ (800c6e8 <TIM_Base_SetConfig+0x134>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d01f      	beq.n	800c666 <TIM_Base_SetConfig+0xb2>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	4a30      	ldr	r2, [pc, #192]	@ (800c6ec <TIM_Base_SetConfig+0x138>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d01b      	beq.n	800c666 <TIM_Base_SetConfig+0xb2>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4a2f      	ldr	r2, [pc, #188]	@ (800c6f0 <TIM_Base_SetConfig+0x13c>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d017      	beq.n	800c666 <TIM_Base_SetConfig+0xb2>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4a2e      	ldr	r2, [pc, #184]	@ (800c6f4 <TIM_Base_SetConfig+0x140>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d013      	beq.n	800c666 <TIM_Base_SetConfig+0xb2>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4a2d      	ldr	r2, [pc, #180]	@ (800c6f8 <TIM_Base_SetConfig+0x144>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d00f      	beq.n	800c666 <TIM_Base_SetConfig+0xb2>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a2c      	ldr	r2, [pc, #176]	@ (800c6fc <TIM_Base_SetConfig+0x148>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d00b      	beq.n	800c666 <TIM_Base_SetConfig+0xb2>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4a2b      	ldr	r2, [pc, #172]	@ (800c700 <TIM_Base_SetConfig+0x14c>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d007      	beq.n	800c666 <TIM_Base_SetConfig+0xb2>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a2a      	ldr	r2, [pc, #168]	@ (800c704 <TIM_Base_SetConfig+0x150>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d003      	beq.n	800c666 <TIM_Base_SetConfig+0xb2>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4a29      	ldr	r2, [pc, #164]	@ (800c708 <TIM_Base_SetConfig+0x154>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d108      	bne.n	800c678 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c66c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	4313      	orrs	r3, r2
 800c676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	4313      	orrs	r3, r2
 800c684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	689a      	ldr	r2, [r3, #8]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	681a      	ldr	r2, [r3, #0]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a10      	ldr	r2, [pc, #64]	@ (800c6e0 <TIM_Base_SetConfig+0x12c>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d003      	beq.n	800c6ac <TIM_Base_SetConfig+0xf8>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a12      	ldr	r2, [pc, #72]	@ (800c6f0 <TIM_Base_SetConfig+0x13c>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d103      	bne.n	800c6b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	691a      	ldr	r2, [r3, #16]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	691b      	ldr	r3, [r3, #16]
 800c6be:	f003 0301 	and.w	r3, r3, #1
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d105      	bne.n	800c6d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	f023 0201 	bic.w	r2, r3, #1
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	611a      	str	r2, [r3, #16]
  }
}
 800c6d2:	bf00      	nop
 800c6d4:	3714      	adds	r7, #20
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	40010000 	.word	0x40010000
 800c6e4:	40000400 	.word	0x40000400
 800c6e8:	40000800 	.word	0x40000800
 800c6ec:	40000c00 	.word	0x40000c00
 800c6f0:	40010400 	.word	0x40010400
 800c6f4:	40014000 	.word	0x40014000
 800c6f8:	40014400 	.word	0x40014400
 800c6fc:	40014800 	.word	0x40014800
 800c700:	40001800 	.word	0x40001800
 800c704:	40001c00 	.word	0x40001c00
 800c708:	40002000 	.word	0x40002000

0800c70c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6a1b      	ldr	r3, [r3, #32]
 800c71c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6a1b      	ldr	r3, [r3, #32]
 800c722:	f023 0201 	bic.w	r2, r3, #1
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	699b      	ldr	r3, [r3, #24]
 800c72e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	011b      	lsls	r3, r3, #4
 800c73c:	693a      	ldr	r2, [r7, #16]
 800c73e:	4313      	orrs	r3, r2
 800c740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f023 030a 	bic.w	r3, r3, #10
 800c748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	4313      	orrs	r3, r2
 800c750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	693a      	ldr	r2, [r7, #16]
 800c756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	697a      	ldr	r2, [r7, #20]
 800c75c:	621a      	str	r2, [r3, #32]
}
 800c75e:	bf00      	nop
 800c760:	371c      	adds	r7, #28
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr

0800c76a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c76a:	b480      	push	{r7}
 800c76c:	b087      	sub	sp, #28
 800c76e:	af00      	add	r7, sp, #0
 800c770:	60f8      	str	r0, [r7, #12]
 800c772:	60b9      	str	r1, [r7, #8]
 800c774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	6a1b      	ldr	r3, [r3, #32]
 800c77a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6a1b      	ldr	r3, [r3, #32]
 800c780:	f023 0210 	bic.w	r2, r3, #16
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	699b      	ldr	r3, [r3, #24]
 800c78c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	031b      	lsls	r3, r3, #12
 800c79a:	693a      	ldr	r2, [r7, #16]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c7a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	011b      	lsls	r3, r3, #4
 800c7ac:	697a      	ldr	r2, [r7, #20]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	697a      	ldr	r2, [r7, #20]
 800c7bc:	621a      	str	r2, [r3, #32]
}
 800c7be:	bf00      	nop
 800c7c0:	371c      	adds	r7, #28
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	b085      	sub	sp, #20
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c7e2:	683a      	ldr	r2, [r7, #0]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	f043 0307 	orr.w	r3, r3, #7
 800c7ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	609a      	str	r2, [r3, #8]
}
 800c7f4:	bf00      	nop
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c800:	b480      	push	{r7}
 800c802:	b087      	sub	sp, #28
 800c804:	af00      	add	r7, sp, #0
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	607a      	str	r2, [r7, #4]
 800c80c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c81a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	021a      	lsls	r2, r3, #8
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	431a      	orrs	r2, r3
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	4313      	orrs	r3, r2
 800c828:	697a      	ldr	r2, [r7, #20]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	609a      	str	r2, [r3, #8]
}
 800c834:	bf00      	nop
 800c836:	371c      	adds	r7, #28
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c850:	2b01      	cmp	r3, #1
 800c852:	d101      	bne.n	800c858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c854:	2302      	movs	r3, #2
 800c856:	e05a      	b.n	800c90e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2202      	movs	r2, #2
 800c864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c87e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	4313      	orrs	r3, r2
 800c888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a21      	ldr	r2, [pc, #132]	@ (800c91c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d022      	beq.n	800c8e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8a4:	d01d      	beq.n	800c8e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a1d      	ldr	r2, [pc, #116]	@ (800c920 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d018      	beq.n	800c8e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a1b      	ldr	r2, [pc, #108]	@ (800c924 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d013      	beq.n	800c8e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a1a      	ldr	r2, [pc, #104]	@ (800c928 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d00e      	beq.n	800c8e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a18      	ldr	r2, [pc, #96]	@ (800c92c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d009      	beq.n	800c8e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a17      	ldr	r2, [pc, #92]	@ (800c930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d004      	beq.n	800c8e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4a15      	ldr	r2, [pc, #84]	@ (800c934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d10c      	bne.n	800c8fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c8e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2200      	movs	r2, #0
 800c908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	40010000 	.word	0x40010000
 800c920:	40000400 	.word	0x40000400
 800c924:	40000800 	.word	0x40000800
 800c928:	40000c00 	.word	0x40000c00
 800c92c:	40010400 	.word	0x40010400
 800c930:	40014000 	.word	0x40014000
 800c934:	40001800 	.word	0x40001800

0800c938 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c954:	bf00      	nop
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d101      	bne.n	800c972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c96e:	2301      	movs	r3, #1
 800c970:	e042      	b.n	800c9f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c978:	b2db      	uxtb	r3, r3
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d106      	bne.n	800c98c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f7f6 fb36 	bl	8002ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2224      	movs	r2, #36	@ 0x24
 800c990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68da      	ldr	r2, [r3, #12]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c9a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 f973 	bl	800cc90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	691a      	ldr	r2, [r3, #16]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c9b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	695a      	ldr	r2, [r3, #20]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c9c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68da      	ldr	r2, [r3, #12]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c9d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2220      	movs	r2, #32
 800c9e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2220      	movs	r2, #32
 800c9ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b08a      	sub	sp, #40	@ 0x28
 800ca04:	af02      	add	r7, sp, #8
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	603b      	str	r3, [r7, #0]
 800ca0c:	4613      	mov	r3, r2
 800ca0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ca10:	2300      	movs	r3, #0
 800ca12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	2b20      	cmp	r3, #32
 800ca1e:	d175      	bne.n	800cb0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d002      	beq.n	800ca2c <HAL_UART_Transmit+0x2c>
 800ca26:	88fb      	ldrh	r3, [r7, #6]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d101      	bne.n	800ca30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e06e      	b.n	800cb0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2221      	movs	r2, #33	@ 0x21
 800ca3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca3e:	f7f8 fce5 	bl	800540c <HAL_GetTick>
 800ca42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	88fa      	ldrh	r2, [r7, #6]
 800ca48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	88fa      	ldrh	r2, [r7, #6]
 800ca4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca58:	d108      	bne.n	800ca6c <HAL_UART_Transmit+0x6c>
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d104      	bne.n	800ca6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ca62:	2300      	movs	r3, #0
 800ca64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	61bb      	str	r3, [r7, #24]
 800ca6a:	e003      	b.n	800ca74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ca70:	2300      	movs	r3, #0
 800ca72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ca74:	e02e      	b.n	800cad4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	2180      	movs	r1, #128	@ 0x80
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f000 f848 	bl	800cb16 <UART_WaitOnFlagUntilTimeout>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d005      	beq.n	800ca98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2220      	movs	r2, #32
 800ca90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800ca94:	2303      	movs	r3, #3
 800ca96:	e03a      	b.n	800cb0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10b      	bne.n	800cab6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ca9e:	69bb      	ldr	r3, [r7, #24]
 800caa0:	881b      	ldrh	r3, [r3, #0]
 800caa2:	461a      	mov	r2, r3
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800caac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	3302      	adds	r3, #2
 800cab2:	61bb      	str	r3, [r7, #24]
 800cab4:	e007      	b.n	800cac6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	781a      	ldrb	r2, [r3, #0]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	3301      	adds	r3, #1
 800cac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800caca:	b29b      	uxth	r3, r3
 800cacc:	3b01      	subs	r3, #1
 800cace:	b29a      	uxth	r2, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cad8:	b29b      	uxth	r3, r3
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1cb      	bne.n	800ca76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	2200      	movs	r2, #0
 800cae6:	2140      	movs	r1, #64	@ 0x40
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f000 f814 	bl	800cb16 <UART_WaitOnFlagUntilTimeout>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d005      	beq.n	800cb00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2220      	movs	r2, #32
 800caf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800cafc:	2303      	movs	r3, #3
 800cafe:	e006      	b.n	800cb0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2220      	movs	r2, #32
 800cb04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	e000      	b.n	800cb0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800cb0c:	2302      	movs	r3, #2
  }
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3720      	adds	r7, #32
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b086      	sub	sp, #24
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	60f8      	str	r0, [r7, #12]
 800cb1e:	60b9      	str	r1, [r7, #8]
 800cb20:	603b      	str	r3, [r7, #0]
 800cb22:	4613      	mov	r3, r2
 800cb24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb26:	e03b      	b.n	800cba0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb28:	6a3b      	ldr	r3, [r7, #32]
 800cb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2e:	d037      	beq.n	800cba0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb30:	f7f8 fc6c 	bl	800540c <HAL_GetTick>
 800cb34:	4602      	mov	r2, r0
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	6a3a      	ldr	r2, [r7, #32]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d302      	bcc.n	800cb46 <UART_WaitOnFlagUntilTimeout+0x30>
 800cb40:	6a3b      	ldr	r3, [r7, #32]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d101      	bne.n	800cb4a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cb46:	2303      	movs	r3, #3
 800cb48:	e03a      	b.n	800cbc0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	f003 0304 	and.w	r3, r3, #4
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d023      	beq.n	800cba0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b80      	cmp	r3, #128	@ 0x80
 800cb5c:	d020      	beq.n	800cba0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2b40      	cmp	r3, #64	@ 0x40
 800cb62:	d01d      	beq.n	800cba0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f003 0308 	and.w	r3, r3, #8
 800cb6e:	2b08      	cmp	r3, #8
 800cb70:	d116      	bne.n	800cba0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800cb72:	2300      	movs	r3, #0
 800cb74:	617b      	str	r3, [r7, #20]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	617b      	str	r3, [r7, #20]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	617b      	str	r3, [r7, #20]
 800cb86:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	f000 f81d 	bl	800cbc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2208      	movs	r2, #8
 800cb92:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2200      	movs	r2, #0
 800cb98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e00f      	b.n	800cbc0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	4013      	ands	r3, r2
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	bf0c      	ite	eq
 800cbb0:	2301      	moveq	r3, #1
 800cbb2:	2300      	movne	r3, #0
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	79fb      	ldrb	r3, [r7, #7]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d0b4      	beq.n	800cb28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3718      	adds	r7, #24
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b095      	sub	sp, #84	@ 0x54
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	330c      	adds	r3, #12
 800cbd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbda:	e853 3f00 	ldrex	r3, [r3]
 800cbde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	330c      	adds	r3, #12
 800cbee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbf0:	643a      	str	r2, [r7, #64]	@ 0x40
 800cbf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cbf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cbf8:	e841 2300 	strex	r3, r2, [r1]
 800cbfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1e5      	bne.n	800cbd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	3314      	adds	r3, #20
 800cc0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc0c:	6a3b      	ldr	r3, [r7, #32]
 800cc0e:	e853 3f00 	ldrex	r3, [r3]
 800cc12:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	f023 0301 	bic.w	r3, r3, #1
 800cc1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3314      	adds	r3, #20
 800cc22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc2c:	e841 2300 	strex	r3, r2, [r1]
 800cc30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1e5      	bne.n	800cc04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d119      	bne.n	800cc74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	330c      	adds	r3, #12
 800cc46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	e853 3f00 	ldrex	r3, [r3]
 800cc4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	f023 0310 	bic.w	r3, r3, #16
 800cc56:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	330c      	adds	r3, #12
 800cc5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc60:	61ba      	str	r2, [r7, #24]
 800cc62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc64:	6979      	ldr	r1, [r7, #20]
 800cc66:	69ba      	ldr	r2, [r7, #24]
 800cc68:	e841 2300 	strex	r3, r2, [r1]
 800cc6c:	613b      	str	r3, [r7, #16]
   return(result);
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1e5      	bne.n	800cc40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2220      	movs	r2, #32
 800cc78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cc82:	bf00      	nop
 800cc84:	3754      	adds	r7, #84	@ 0x54
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
	...

0800cc90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc94:	b0c0      	sub	sp, #256	@ 0x100
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccac:	68d9      	ldr	r1, [r3, #12]
 800ccae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	ea40 0301 	orr.w	r3, r0, r1
 800ccb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ccba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccbe:	689a      	ldr	r2, [r3, #8]
 800ccc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	431a      	orrs	r2, r3
 800ccc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cccc:	695b      	ldr	r3, [r3, #20]
 800ccce:	431a      	orrs	r2, r3
 800ccd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccd4:	69db      	ldr	r3, [r3, #28]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ccdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cce8:	f021 010c 	bic.w	r1, r1, #12
 800ccec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ccf6:	430b      	orrs	r3, r1
 800ccf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ccfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	695b      	ldr	r3, [r3, #20]
 800cd02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cd06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd0a:	6999      	ldr	r1, [r3, #24]
 800cd0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	ea40 0301 	orr.w	r3, r0, r1
 800cd16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cd18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	4b8f      	ldr	r3, [pc, #572]	@ (800cf5c <UART_SetConfig+0x2cc>)
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d005      	beq.n	800cd30 <UART_SetConfig+0xa0>
 800cd24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	4b8d      	ldr	r3, [pc, #564]	@ (800cf60 <UART_SetConfig+0x2d0>)
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d104      	bne.n	800cd3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cd30:	f7fe f902 	bl	800af38 <HAL_RCC_GetPCLK2Freq>
 800cd34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cd38:	e003      	b.n	800cd42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cd3a:	f7fe f8e9 	bl	800af10 <HAL_RCC_GetPCLK1Freq>
 800cd3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd46:	69db      	ldr	r3, [r3, #28]
 800cd48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cd4c:	f040 810c 	bne.w	800cf68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cd50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd54:	2200      	movs	r2, #0
 800cd56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cd5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cd5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cd62:	4622      	mov	r2, r4
 800cd64:	462b      	mov	r3, r5
 800cd66:	1891      	adds	r1, r2, r2
 800cd68:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cd6a:	415b      	adcs	r3, r3
 800cd6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cd6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cd72:	4621      	mov	r1, r4
 800cd74:	eb12 0801 	adds.w	r8, r2, r1
 800cd78:	4629      	mov	r1, r5
 800cd7a:	eb43 0901 	adc.w	r9, r3, r1
 800cd7e:	f04f 0200 	mov.w	r2, #0
 800cd82:	f04f 0300 	mov.w	r3, #0
 800cd86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cd8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cd8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cd92:	4690      	mov	r8, r2
 800cd94:	4699      	mov	r9, r3
 800cd96:	4623      	mov	r3, r4
 800cd98:	eb18 0303 	adds.w	r3, r8, r3
 800cd9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cda0:	462b      	mov	r3, r5
 800cda2:	eb49 0303 	adc.w	r3, r9, r3
 800cda6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cdaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cdb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cdba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	18db      	adds	r3, r3, r3
 800cdc2:	653b      	str	r3, [r7, #80]	@ 0x50
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	eb42 0303 	adc.w	r3, r2, r3
 800cdca:	657b      	str	r3, [r7, #84]	@ 0x54
 800cdcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cdd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cdd4:	f7f3 fa64 	bl	80002a0 <__aeabi_uldivmod>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	460b      	mov	r3, r1
 800cddc:	4b61      	ldr	r3, [pc, #388]	@ (800cf64 <UART_SetConfig+0x2d4>)
 800cdde:	fba3 2302 	umull	r2, r3, r3, r2
 800cde2:	095b      	lsrs	r3, r3, #5
 800cde4:	011c      	lsls	r4, r3, #4
 800cde6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cdea:	2200      	movs	r2, #0
 800cdec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cdf0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800cdf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800cdf8:	4642      	mov	r2, r8
 800cdfa:	464b      	mov	r3, r9
 800cdfc:	1891      	adds	r1, r2, r2
 800cdfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ce00:	415b      	adcs	r3, r3
 800ce02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ce08:	4641      	mov	r1, r8
 800ce0a:	eb12 0a01 	adds.w	sl, r2, r1
 800ce0e:	4649      	mov	r1, r9
 800ce10:	eb43 0b01 	adc.w	fp, r3, r1
 800ce14:	f04f 0200 	mov.w	r2, #0
 800ce18:	f04f 0300 	mov.w	r3, #0
 800ce1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ce20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ce24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ce28:	4692      	mov	sl, r2
 800ce2a:	469b      	mov	fp, r3
 800ce2c:	4643      	mov	r3, r8
 800ce2e:	eb1a 0303 	adds.w	r3, sl, r3
 800ce32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ce36:	464b      	mov	r3, r9
 800ce38:	eb4b 0303 	adc.w	r3, fp, r3
 800ce3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ce40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ce50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ce54:	460b      	mov	r3, r1
 800ce56:	18db      	adds	r3, r3, r3
 800ce58:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	eb42 0303 	adc.w	r3, r2, r3
 800ce60:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ce66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ce6a:	f7f3 fa19 	bl	80002a0 <__aeabi_uldivmod>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	460b      	mov	r3, r1
 800ce72:	4611      	mov	r1, r2
 800ce74:	4b3b      	ldr	r3, [pc, #236]	@ (800cf64 <UART_SetConfig+0x2d4>)
 800ce76:	fba3 2301 	umull	r2, r3, r3, r1
 800ce7a:	095b      	lsrs	r3, r3, #5
 800ce7c:	2264      	movs	r2, #100	@ 0x64
 800ce7e:	fb02 f303 	mul.w	r3, r2, r3
 800ce82:	1acb      	subs	r3, r1, r3
 800ce84:	00db      	lsls	r3, r3, #3
 800ce86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ce8a:	4b36      	ldr	r3, [pc, #216]	@ (800cf64 <UART_SetConfig+0x2d4>)
 800ce8c:	fba3 2302 	umull	r2, r3, r3, r2
 800ce90:	095b      	lsrs	r3, r3, #5
 800ce92:	005b      	lsls	r3, r3, #1
 800ce94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ce98:	441c      	add	r4, r3
 800ce9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cea4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800cea8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ceac:	4642      	mov	r2, r8
 800ceae:	464b      	mov	r3, r9
 800ceb0:	1891      	adds	r1, r2, r2
 800ceb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ceb4:	415b      	adcs	r3, r3
 800ceb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ceb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cebc:	4641      	mov	r1, r8
 800cebe:	1851      	adds	r1, r2, r1
 800cec0:	6339      	str	r1, [r7, #48]	@ 0x30
 800cec2:	4649      	mov	r1, r9
 800cec4:	414b      	adcs	r3, r1
 800cec6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cec8:	f04f 0200 	mov.w	r2, #0
 800cecc:	f04f 0300 	mov.w	r3, #0
 800ced0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ced4:	4659      	mov	r1, fp
 800ced6:	00cb      	lsls	r3, r1, #3
 800ced8:	4651      	mov	r1, sl
 800ceda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cede:	4651      	mov	r1, sl
 800cee0:	00ca      	lsls	r2, r1, #3
 800cee2:	4610      	mov	r0, r2
 800cee4:	4619      	mov	r1, r3
 800cee6:	4603      	mov	r3, r0
 800cee8:	4642      	mov	r2, r8
 800ceea:	189b      	adds	r3, r3, r2
 800ceec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cef0:	464b      	mov	r3, r9
 800cef2:	460a      	mov	r2, r1
 800cef4:	eb42 0303 	adc.w	r3, r2, r3
 800cef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cefc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cf08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cf0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cf10:	460b      	mov	r3, r1
 800cf12:	18db      	adds	r3, r3, r3
 800cf14:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf16:	4613      	mov	r3, r2
 800cf18:	eb42 0303 	adc.w	r3, r2, r3
 800cf1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cf22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800cf26:	f7f3 f9bb 	bl	80002a0 <__aeabi_uldivmod>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	4b0d      	ldr	r3, [pc, #52]	@ (800cf64 <UART_SetConfig+0x2d4>)
 800cf30:	fba3 1302 	umull	r1, r3, r3, r2
 800cf34:	095b      	lsrs	r3, r3, #5
 800cf36:	2164      	movs	r1, #100	@ 0x64
 800cf38:	fb01 f303 	mul.w	r3, r1, r3
 800cf3c:	1ad3      	subs	r3, r2, r3
 800cf3e:	00db      	lsls	r3, r3, #3
 800cf40:	3332      	adds	r3, #50	@ 0x32
 800cf42:	4a08      	ldr	r2, [pc, #32]	@ (800cf64 <UART_SetConfig+0x2d4>)
 800cf44:	fba2 2303 	umull	r2, r3, r2, r3
 800cf48:	095b      	lsrs	r3, r3, #5
 800cf4a:	f003 0207 	and.w	r2, r3, #7
 800cf4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4422      	add	r2, r4
 800cf56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cf58:	e106      	b.n	800d168 <UART_SetConfig+0x4d8>
 800cf5a:	bf00      	nop
 800cf5c:	40011000 	.word	0x40011000
 800cf60:	40011400 	.word	0x40011400
 800cf64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cf68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cf72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cf76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800cf7a:	4642      	mov	r2, r8
 800cf7c:	464b      	mov	r3, r9
 800cf7e:	1891      	adds	r1, r2, r2
 800cf80:	6239      	str	r1, [r7, #32]
 800cf82:	415b      	adcs	r3, r3
 800cf84:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cf8a:	4641      	mov	r1, r8
 800cf8c:	1854      	adds	r4, r2, r1
 800cf8e:	4649      	mov	r1, r9
 800cf90:	eb43 0501 	adc.w	r5, r3, r1
 800cf94:	f04f 0200 	mov.w	r2, #0
 800cf98:	f04f 0300 	mov.w	r3, #0
 800cf9c:	00eb      	lsls	r3, r5, #3
 800cf9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cfa2:	00e2      	lsls	r2, r4, #3
 800cfa4:	4614      	mov	r4, r2
 800cfa6:	461d      	mov	r5, r3
 800cfa8:	4643      	mov	r3, r8
 800cfaa:	18e3      	adds	r3, r4, r3
 800cfac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cfb0:	464b      	mov	r3, r9
 800cfb2:	eb45 0303 	adc.w	r3, r5, r3
 800cfb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cfba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cfc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cfca:	f04f 0200 	mov.w	r2, #0
 800cfce:	f04f 0300 	mov.w	r3, #0
 800cfd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800cfd6:	4629      	mov	r1, r5
 800cfd8:	008b      	lsls	r3, r1, #2
 800cfda:	4621      	mov	r1, r4
 800cfdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cfe0:	4621      	mov	r1, r4
 800cfe2:	008a      	lsls	r2, r1, #2
 800cfe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800cfe8:	f7f3 f95a 	bl	80002a0 <__aeabi_uldivmod>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	4b60      	ldr	r3, [pc, #384]	@ (800d174 <UART_SetConfig+0x4e4>)
 800cff2:	fba3 2302 	umull	r2, r3, r3, r2
 800cff6:	095b      	lsrs	r3, r3, #5
 800cff8:	011c      	lsls	r4, r3, #4
 800cffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cffe:	2200      	movs	r2, #0
 800d000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d004:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d008:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d00c:	4642      	mov	r2, r8
 800d00e:	464b      	mov	r3, r9
 800d010:	1891      	adds	r1, r2, r2
 800d012:	61b9      	str	r1, [r7, #24]
 800d014:	415b      	adcs	r3, r3
 800d016:	61fb      	str	r3, [r7, #28]
 800d018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d01c:	4641      	mov	r1, r8
 800d01e:	1851      	adds	r1, r2, r1
 800d020:	6139      	str	r1, [r7, #16]
 800d022:	4649      	mov	r1, r9
 800d024:	414b      	adcs	r3, r1
 800d026:	617b      	str	r3, [r7, #20]
 800d028:	f04f 0200 	mov.w	r2, #0
 800d02c:	f04f 0300 	mov.w	r3, #0
 800d030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d034:	4659      	mov	r1, fp
 800d036:	00cb      	lsls	r3, r1, #3
 800d038:	4651      	mov	r1, sl
 800d03a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d03e:	4651      	mov	r1, sl
 800d040:	00ca      	lsls	r2, r1, #3
 800d042:	4610      	mov	r0, r2
 800d044:	4619      	mov	r1, r3
 800d046:	4603      	mov	r3, r0
 800d048:	4642      	mov	r2, r8
 800d04a:	189b      	adds	r3, r3, r2
 800d04c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d050:	464b      	mov	r3, r9
 800d052:	460a      	mov	r2, r1
 800d054:	eb42 0303 	adc.w	r3, r2, r3
 800d058:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d05c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d066:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d068:	f04f 0200 	mov.w	r2, #0
 800d06c:	f04f 0300 	mov.w	r3, #0
 800d070:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d074:	4649      	mov	r1, r9
 800d076:	008b      	lsls	r3, r1, #2
 800d078:	4641      	mov	r1, r8
 800d07a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d07e:	4641      	mov	r1, r8
 800d080:	008a      	lsls	r2, r1, #2
 800d082:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d086:	f7f3 f90b 	bl	80002a0 <__aeabi_uldivmod>
 800d08a:	4602      	mov	r2, r0
 800d08c:	460b      	mov	r3, r1
 800d08e:	4611      	mov	r1, r2
 800d090:	4b38      	ldr	r3, [pc, #224]	@ (800d174 <UART_SetConfig+0x4e4>)
 800d092:	fba3 2301 	umull	r2, r3, r3, r1
 800d096:	095b      	lsrs	r3, r3, #5
 800d098:	2264      	movs	r2, #100	@ 0x64
 800d09a:	fb02 f303 	mul.w	r3, r2, r3
 800d09e:	1acb      	subs	r3, r1, r3
 800d0a0:	011b      	lsls	r3, r3, #4
 800d0a2:	3332      	adds	r3, #50	@ 0x32
 800d0a4:	4a33      	ldr	r2, [pc, #204]	@ (800d174 <UART_SetConfig+0x4e4>)
 800d0a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d0aa:	095b      	lsrs	r3, r3, #5
 800d0ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d0b0:	441c      	add	r4, r3
 800d0b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d0ba:	677a      	str	r2, [r7, #116]	@ 0x74
 800d0bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d0c0:	4642      	mov	r2, r8
 800d0c2:	464b      	mov	r3, r9
 800d0c4:	1891      	adds	r1, r2, r2
 800d0c6:	60b9      	str	r1, [r7, #8]
 800d0c8:	415b      	adcs	r3, r3
 800d0ca:	60fb      	str	r3, [r7, #12]
 800d0cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d0d0:	4641      	mov	r1, r8
 800d0d2:	1851      	adds	r1, r2, r1
 800d0d4:	6039      	str	r1, [r7, #0]
 800d0d6:	4649      	mov	r1, r9
 800d0d8:	414b      	adcs	r3, r1
 800d0da:	607b      	str	r3, [r7, #4]
 800d0dc:	f04f 0200 	mov.w	r2, #0
 800d0e0:	f04f 0300 	mov.w	r3, #0
 800d0e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d0e8:	4659      	mov	r1, fp
 800d0ea:	00cb      	lsls	r3, r1, #3
 800d0ec:	4651      	mov	r1, sl
 800d0ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d0f2:	4651      	mov	r1, sl
 800d0f4:	00ca      	lsls	r2, r1, #3
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	4642      	mov	r2, r8
 800d0fe:	189b      	adds	r3, r3, r2
 800d100:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d102:	464b      	mov	r3, r9
 800d104:	460a      	mov	r2, r1
 800d106:	eb42 0303 	adc.w	r3, r2, r3
 800d10a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d10c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	663b      	str	r3, [r7, #96]	@ 0x60
 800d116:	667a      	str	r2, [r7, #100]	@ 0x64
 800d118:	f04f 0200 	mov.w	r2, #0
 800d11c:	f04f 0300 	mov.w	r3, #0
 800d120:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d124:	4649      	mov	r1, r9
 800d126:	008b      	lsls	r3, r1, #2
 800d128:	4641      	mov	r1, r8
 800d12a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d12e:	4641      	mov	r1, r8
 800d130:	008a      	lsls	r2, r1, #2
 800d132:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d136:	f7f3 f8b3 	bl	80002a0 <__aeabi_uldivmod>
 800d13a:	4602      	mov	r2, r0
 800d13c:	460b      	mov	r3, r1
 800d13e:	4b0d      	ldr	r3, [pc, #52]	@ (800d174 <UART_SetConfig+0x4e4>)
 800d140:	fba3 1302 	umull	r1, r3, r3, r2
 800d144:	095b      	lsrs	r3, r3, #5
 800d146:	2164      	movs	r1, #100	@ 0x64
 800d148:	fb01 f303 	mul.w	r3, r1, r3
 800d14c:	1ad3      	subs	r3, r2, r3
 800d14e:	011b      	lsls	r3, r3, #4
 800d150:	3332      	adds	r3, #50	@ 0x32
 800d152:	4a08      	ldr	r2, [pc, #32]	@ (800d174 <UART_SetConfig+0x4e4>)
 800d154:	fba2 2303 	umull	r2, r3, r2, r3
 800d158:	095b      	lsrs	r3, r3, #5
 800d15a:	f003 020f 	and.w	r2, r3, #15
 800d15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4422      	add	r2, r4
 800d166:	609a      	str	r2, [r3, #8]
}
 800d168:	bf00      	nop
 800d16a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d16e:	46bd      	mov	sp, r7
 800d170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d174:	51eb851f 	.word	0x51eb851f

0800d178 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d123      	bne.n	800d1d2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800d192:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d196:	683a      	ldr	r2, [r7, #0]
 800d198:	6851      	ldr	r1, [r2, #4]
 800d19a:	683a      	ldr	r2, [r7, #0]
 800d19c:	6892      	ldr	r2, [r2, #8]
 800d19e:	4311      	orrs	r1, r2
 800d1a0:	683a      	ldr	r2, [r7, #0]
 800d1a2:	68d2      	ldr	r2, [r2, #12]
 800d1a4:	4311      	orrs	r1, r2
 800d1a6:	683a      	ldr	r2, [r7, #0]
 800d1a8:	6912      	ldr	r2, [r2, #16]
 800d1aa:	4311      	orrs	r1, r2
 800d1ac:	683a      	ldr	r2, [r7, #0]
 800d1ae:	6952      	ldr	r2, [r2, #20]
 800d1b0:	4311      	orrs	r1, r2
 800d1b2:	683a      	ldr	r2, [r7, #0]
 800d1b4:	6992      	ldr	r2, [r2, #24]
 800d1b6:	4311      	orrs	r1, r2
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	69d2      	ldr	r2, [r2, #28]
 800d1bc:	4311      	orrs	r1, r2
 800d1be:	683a      	ldr	r2, [r7, #0]
 800d1c0:	6a12      	ldr	r2, [r2, #32]
 800d1c2:	4311      	orrs	r1, r2
 800d1c4:	683a      	ldr	r2, [r7, #0]
 800d1c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d1c8:	430a      	orrs	r2, r1
 800d1ca:	431a      	orrs	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	601a      	str	r2, [r3, #0]
 800d1d0:	e028      	b.n	800d224 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	69d9      	ldr	r1, [r3, #28]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	6a1b      	ldr	r3, [r3, #32]
 800d1e2:	4319      	orrs	r1, r3
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1e8:	430b      	orrs	r3, r1
 800d1ea:	431a      	orrs	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800d1f8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	6851      	ldr	r1, [r2, #4]
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	6892      	ldr	r2, [r2, #8]
 800d204:	4311      	orrs	r1, r2
 800d206:	683a      	ldr	r2, [r7, #0]
 800d208:	68d2      	ldr	r2, [r2, #12]
 800d20a:	4311      	orrs	r1, r2
 800d20c:	683a      	ldr	r2, [r7, #0]
 800d20e:	6912      	ldr	r2, [r2, #16]
 800d210:	4311      	orrs	r1, r2
 800d212:	683a      	ldr	r2, [r7, #0]
 800d214:	6952      	ldr	r2, [r2, #20]
 800d216:	4311      	orrs	r1, r2
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	6992      	ldr	r2, [r2, #24]
 800d21c:	430a      	orrs	r2, r1
 800d21e:	431a      	orrs	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	370c      	adds	r7, #12
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr

0800d232 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d232:	b480      	push	{r7}
 800d234:	b085      	sub	sp, #20
 800d236:	af00      	add	r7, sp, #0
 800d238:	60f8      	str	r0, [r7, #12]
 800d23a:	60b9      	str	r1, [r7, #8]
 800d23c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d128      	bne.n	800d296 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	1e59      	subs	r1, r3, #1
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	3b01      	subs	r3, #1
 800d258:	011b      	lsls	r3, r3, #4
 800d25a:	4319      	orrs	r1, r3
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	3b01      	subs	r3, #1
 800d262:	021b      	lsls	r3, r3, #8
 800d264:	4319      	orrs	r1, r3
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	3b01      	subs	r3, #1
 800d26c:	031b      	lsls	r3, r3, #12
 800d26e:	4319      	orrs	r1, r3
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	691b      	ldr	r3, [r3, #16]
 800d274:	3b01      	subs	r3, #1
 800d276:	041b      	lsls	r3, r3, #16
 800d278:	4319      	orrs	r1, r3
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	695b      	ldr	r3, [r3, #20]
 800d27e:	3b01      	subs	r3, #1
 800d280:	051b      	lsls	r3, r3, #20
 800d282:	4319      	orrs	r1, r3
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	699b      	ldr	r3, [r3, #24]
 800d288:	3b01      	subs	r3, #1
 800d28a:	061b      	lsls	r3, r3, #24
 800d28c:	430b      	orrs	r3, r1
 800d28e:	431a      	orrs	r2, r3
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	609a      	str	r2, [r3, #8]
 800d294:	e02f      	b.n	800d2f6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d29e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	68d2      	ldr	r2, [r2, #12]
 800d2a6:	3a01      	subs	r2, #1
 800d2a8:	0311      	lsls	r1, r2, #12
 800d2aa:	68ba      	ldr	r2, [r7, #8]
 800d2ac:	6952      	ldr	r2, [r2, #20]
 800d2ae:	3a01      	subs	r2, #1
 800d2b0:	0512      	lsls	r2, r2, #20
 800d2b2:	430a      	orrs	r2, r1
 800d2b4:	431a      	orrs	r2, r3
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	1e59      	subs	r1, r3, #1
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	011b      	lsls	r3, r3, #4
 800d2d0:	4319      	orrs	r1, r3
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	3b01      	subs	r3, #1
 800d2d8:	021b      	lsls	r3, r3, #8
 800d2da:	4319      	orrs	r1, r3
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	691b      	ldr	r3, [r3, #16]
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	041b      	lsls	r3, r3, #16
 800d2e4:	4319      	orrs	r1, r3
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	699b      	ldr	r3, [r3, #24]
 800d2ea:	3b01      	subs	r3, #1
 800d2ec:	061b      	lsls	r3, r3, #24
 800d2ee:	430b      	orrs	r3, r1
 800d2f0:	431a      	orrs	r2, r3
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3714      	adds	r7, #20
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800d310:	2300      	movs	r3, #0
 800d312:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	691b      	ldr	r3, [r3, #16]
 800d318:	0d9b      	lsrs	r3, r3, #22
 800d31a:	059b      	lsls	r3, r3, #22
 800d31c:	68ba      	ldr	r2, [r7, #8]
 800d31e:	6811      	ldr	r1, [r2, #0]
 800d320:	68ba      	ldr	r2, [r7, #8]
 800d322:	6852      	ldr	r2, [r2, #4]
 800d324:	4311      	orrs	r1, r2
 800d326:	68ba      	ldr	r2, [r7, #8]
 800d328:	6892      	ldr	r2, [r2, #8]
 800d32a:	3a01      	subs	r2, #1
 800d32c:	0152      	lsls	r2, r2, #5
 800d32e:	4311      	orrs	r1, r2
 800d330:	68ba      	ldr	r2, [r7, #8]
 800d332:	68d2      	ldr	r2, [r2, #12]
 800d334:	0252      	lsls	r2, r2, #9
 800d336:	430a      	orrs	r2, r1
 800d338:	431a      	orrs	r2, r3
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800d33e:	f7f8 f865 	bl	800540c <HAL_GetTick>
 800d342:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800d344:	e010      	b.n	800d368 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d34c:	d00c      	beq.n	800d368 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d007      	beq.n	800d364 <FMC_SDRAM_SendCommand+0x60>
 800d354:	f7f8 f85a 	bl	800540c <HAL_GetTick>
 800d358:	4602      	mov	r2, r0
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	429a      	cmp	r2, r3
 800d362:	d201      	bcs.n	800d368 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800d364:	2303      	movs	r3, #3
 800d366:	e006      	b.n	800d376 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	f003 0320 	and.w	r3, r3, #32
 800d370:	2b20      	cmp	r3, #32
 800d372:	d0e8      	beq.n	800d346 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	3718      	adds	r7, #24
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d37e:	b480      	push	{r7}
 800d380:	b083      	sub	sp, #12
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	695b      	ldr	r3, [r3, #20]
 800d38c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800d390:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800d394:	683a      	ldr	r2, [r7, #0]
 800d396:	0052      	lsls	r2, r2, #1
 800d398:	431a      	orrs	r2, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	370c      	adds	r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d3ac:	b084      	sub	sp, #16
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b084      	sub	sp, #16
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	f107 001c 	add.w	r0, r7, #28
 800d3ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d3be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d123      	bne.n	800d40e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800d3da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d3ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d105      	bne.n	800d402 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 f9dc 	bl	800d7c0 <USB_CoreReset>
 800d408:	4603      	mov	r3, r0
 800d40a:	73fb      	strb	r3, [r7, #15]
 800d40c:	e01b      	b.n	800d446 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 f9d0 	bl	800d7c0 <USB_CoreReset>
 800d420:	4603      	mov	r3, r0
 800d422:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d424:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d106      	bne.n	800d43a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d430:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	639a      	str	r2, [r3, #56]	@ 0x38
 800d438:	e005      	b.n	800d446 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d43e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d446:	7fbb      	ldrb	r3, [r7, #30]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d10b      	bne.n	800d464 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	f043 0206 	orr.w	r2, r3, #6
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	f043 0220 	orr.w	r2, r3, #32
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d464:	7bfb      	ldrb	r3, [r7, #15]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d470:	b004      	add	sp, #16
 800d472:	4770      	bx	lr

0800d474 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	f043 0201 	orr.w	r2, r3, #1
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr

0800d496 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d496:	b480      	push	{r7}
 800d498:	b083      	sub	sp, #12
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	f023 0201 	bic.w	r2, r3, #1
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d4aa:	2300      	movs	r3, #0
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d4d4:	78fb      	ldrb	r3, [r7, #3]
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d115      	bne.n	800d506 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d4e6:	200a      	movs	r0, #10
 800d4e8:	f7f7 ff9c 	bl	8005424 <HAL_Delay>
      ms += 10U;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	330a      	adds	r3, #10
 800d4f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 f956 	bl	800d7a4 <USB_GetMode>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d01e      	beq.n	800d53c <USB_SetCurrentMode+0x84>
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2bc7      	cmp	r3, #199	@ 0xc7
 800d502:	d9f0      	bls.n	800d4e6 <USB_SetCurrentMode+0x2e>
 800d504:	e01a      	b.n	800d53c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d506:	78fb      	ldrb	r3, [r7, #3]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d115      	bne.n	800d538 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d518:	200a      	movs	r0, #10
 800d51a:	f7f7 ff83 	bl	8005424 <HAL_Delay>
      ms += 10U;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	330a      	adds	r3, #10
 800d522:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 f93d 	bl	800d7a4 <USB_GetMode>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d005      	beq.n	800d53c <USB_SetCurrentMode+0x84>
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2bc7      	cmp	r3, #199	@ 0xc7
 800d534:	d9f0      	bls.n	800d518 <USB_SetCurrentMode+0x60>
 800d536:	e001      	b.n	800d53c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d538:	2301      	movs	r3, #1
 800d53a:	e005      	b.n	800d548 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2bc8      	cmp	r3, #200	@ 0xc8
 800d540:	d101      	bne.n	800d546 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	e000      	b.n	800d548 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d546:	2300      	movs	r3, #0
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3710      	adds	r7, #16
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d550:	b480      	push	{r7}
 800d552:	b085      	sub	sp, #20
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d55a:	2300      	movs	r3, #0
 800d55c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	3301      	adds	r3, #1
 800d562:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d56a:	d901      	bls.n	800d570 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d56c:	2303      	movs	r3, #3
 800d56e:	e01b      	b.n	800d5a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	691b      	ldr	r3, [r3, #16]
 800d574:	2b00      	cmp	r3, #0
 800d576:	daf2      	bge.n	800d55e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d578:	2300      	movs	r3, #0
 800d57a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	019b      	lsls	r3, r3, #6
 800d580:	f043 0220 	orr.w	r2, r3, #32
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	3301      	adds	r3, #1
 800d58c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d594:	d901      	bls.n	800d59a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d596:	2303      	movs	r3, #3
 800d598:	e006      	b.n	800d5a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	691b      	ldr	r3, [r3, #16]
 800d59e:	f003 0320 	and.w	r3, r3, #32
 800d5a2:	2b20      	cmp	r3, #32
 800d5a4:	d0f0      	beq.n	800d588 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d5a6:	2300      	movs	r3, #0
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3714      	adds	r7, #20
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d5cc:	d901      	bls.n	800d5d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d5ce:	2303      	movs	r3, #3
 800d5d0:	e018      	b.n	800d604 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	691b      	ldr	r3, [r3, #16]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	daf2      	bge.n	800d5c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2210      	movs	r2, #16
 800d5e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d5f0:	d901      	bls.n	800d5f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d5f2:	2303      	movs	r3, #3
 800d5f4:	e006      	b.n	800d604 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	691b      	ldr	r3, [r3, #16]
 800d5fa:	f003 0310 	and.w	r3, r3, #16
 800d5fe:	2b10      	cmp	r3, #16
 800d600:	d0f0      	beq.n	800d5e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d602:	2300      	movs	r3, #0
}
 800d604:	4618      	mov	r0, r3
 800d606:	3714      	adds	r7, #20
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d610:	b480      	push	{r7}
 800d612:	b089      	sub	sp, #36	@ 0x24
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	4611      	mov	r1, r2
 800d61c:	461a      	mov	r2, r3
 800d61e:	460b      	mov	r3, r1
 800d620:	71fb      	strb	r3, [r7, #7]
 800d622:	4613      	mov	r3, r2
 800d624:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d62e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d632:	2b00      	cmp	r3, #0
 800d634:	d123      	bne.n	800d67e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d636:	88bb      	ldrh	r3, [r7, #4]
 800d638:	3303      	adds	r3, #3
 800d63a:	089b      	lsrs	r3, r3, #2
 800d63c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d63e:	2300      	movs	r3, #0
 800d640:	61bb      	str	r3, [r7, #24]
 800d642:	e018      	b.n	800d676 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d644:	79fb      	ldrb	r3, [r7, #7]
 800d646:	031a      	lsls	r2, r3, #12
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	4413      	add	r3, r2
 800d64c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d650:	461a      	mov	r2, r3
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	3301      	adds	r3, #1
 800d65c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	3301      	adds	r3, #1
 800d662:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	3301      	adds	r3, #1
 800d668:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	3301      	adds	r3, #1
 800d66e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	3301      	adds	r3, #1
 800d674:	61bb      	str	r3, [r7, #24]
 800d676:	69ba      	ldr	r2, [r7, #24]
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d3e2      	bcc.n	800d644 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3724      	adds	r7, #36	@ 0x24
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b08b      	sub	sp, #44	@ 0x2c
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	4613      	mov	r3, r2
 800d698:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d6a2:	88fb      	ldrh	r3, [r7, #6]
 800d6a4:	089b      	lsrs	r3, r3, #2
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d6aa:	88fb      	ldrh	r3, [r7, #6]
 800d6ac:	f003 0303 	and.w	r3, r3, #3
 800d6b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	623b      	str	r3, [r7, #32]
 800d6b6:	e014      	b.n	800d6e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c2:	601a      	str	r2, [r3, #0]
    pDest++;
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d8:	3301      	adds	r3, #1
 800d6da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	623b      	str	r3, [r7, #32]
 800d6e2:	6a3a      	ldr	r2, [r7, #32]
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d3e6      	bcc.n	800d6b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d6ea:	8bfb      	ldrh	r3, [r7, #30]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d01e      	beq.n	800d72e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	f107 0310 	add.w	r3, r7, #16
 800d700:	6812      	ldr	r2, [r2, #0]
 800d702:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d704:	693a      	ldr	r2, [r7, #16]
 800d706:	6a3b      	ldr	r3, [r7, #32]
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	00db      	lsls	r3, r3, #3
 800d70c:	fa22 f303 	lsr.w	r3, r2, r3
 800d710:	b2da      	uxtb	r2, r3
 800d712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d714:	701a      	strb	r2, [r3, #0]
      i++;
 800d716:	6a3b      	ldr	r3, [r7, #32]
 800d718:	3301      	adds	r3, #1
 800d71a:	623b      	str	r3, [r7, #32]
      pDest++;
 800d71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71e:	3301      	adds	r3, #1
 800d720:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d722:	8bfb      	ldrh	r3, [r7, #30]
 800d724:	3b01      	subs	r3, #1
 800d726:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d728:	8bfb      	ldrh	r3, [r7, #30]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1ea      	bne.n	800d704 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d730:	4618      	mov	r0, r3
 800d732:	372c      	adds	r7, #44	@ 0x2c
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr

0800d73c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b085      	sub	sp, #20
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	695b      	ldr	r3, [r3, #20]
 800d748:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	699b      	ldr	r3, [r3, #24]
 800d74e:	68fa      	ldr	r2, [r7, #12]
 800d750:	4013      	ands	r3, r2
 800d752:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d754:	68fb      	ldr	r3, [r7, #12]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3714      	adds	r7, #20
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr

0800d762 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800d762:	b480      	push	{r7}
 800d764:	b085      	sub	sp, #20
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
 800d76a:	460b      	mov	r3, r1
 800d76c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800d772:	78fb      	ldrb	r3, [r7, #3]
 800d774:	015a      	lsls	r2, r3, #5
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	4413      	add	r3, r2
 800d77a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d77e:	689b      	ldr	r3, [r3, #8]
 800d780:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800d782:	78fb      	ldrb	r3, [r7, #3]
 800d784:	015a      	lsls	r2, r3, #5
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	4413      	add	r3, r2
 800d78a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	4013      	ands	r3, r2
 800d794:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d796:	68bb      	ldr	r3, [r7, #8]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3714      	adds	r7, #20
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	695b      	ldr	r3, [r3, #20]
 800d7b0:	f003 0301 	and.w	r3, r3, #1
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d7d8:	d901      	bls.n	800d7de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d7da:	2303      	movs	r3, #3
 800d7dc:	e01b      	b.n	800d816 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	691b      	ldr	r3, [r3, #16]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	daf2      	bge.n	800d7cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	691b      	ldr	r3, [r3, #16]
 800d7ee:	f043 0201 	orr.w	r2, r3, #1
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d802:	d901      	bls.n	800d808 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d804:	2303      	movs	r3, #3
 800d806:	e006      	b.n	800d816 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	691b      	ldr	r3, [r3, #16]
 800d80c:	f003 0301 	and.w	r3, r3, #1
 800d810:	2b01      	cmp	r3, #1
 800d812:	d0f0      	beq.n	800d7f6 <USB_CoreReset+0x36>

  return HAL_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3714      	adds	r7, #20
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
	...

0800d824 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d824:	b084      	sub	sp, #16
 800d826:	b580      	push	{r7, lr}
 800d828:	b086      	sub	sp, #24
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d836:	2300      	movs	r3, #0
 800d838:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d844:	461a      	mov	r2, r3
 800d846:	2300      	movs	r3, #0
 800d848:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d84e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d85a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d866:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d876:	2b00      	cmp	r3, #0
 800d878:	d119      	bne.n	800d8ae <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d87a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d10a      	bne.n	800d898 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d890:	f043 0304 	orr.w	r3, r3, #4
 800d894:	6013      	str	r3, [r2, #0]
 800d896:	e014      	b.n	800d8c2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d8a6:	f023 0304 	bic.w	r3, r3, #4
 800d8aa:	6013      	str	r3, [r2, #0]
 800d8ac:	e009      	b.n	800d8c2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68fa      	ldr	r2, [r7, #12]
 800d8b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d8bc:	f023 0304 	bic.w	r3, r3, #4
 800d8c0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d8c2:	2110      	movs	r1, #16
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f7ff fe43 	bl	800d550 <USB_FlushTxFifo>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d001      	beq.n	800d8d4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f7ff fe6d 	bl	800d5b4 <USB_FlushRxFifo>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d001      	beq.n	800d8e4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	613b      	str	r3, [r7, #16]
 800d8e8:	e015      	b.n	800d916 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	015a      	lsls	r2, r3, #5
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	015a      	lsls	r2, r3, #5
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	4413      	add	r3, r2
 800d906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d90a:	461a      	mov	r2, r3
 800d90c:	2300      	movs	r3, #0
 800d90e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	3301      	adds	r3, #1
 800d914:	613b      	str	r3, [r7, #16]
 800d916:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d91a:	461a      	mov	r2, r3
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	4293      	cmp	r3, r2
 800d920:	d3e3      	bcc.n	800d8ea <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f04f 32ff 	mov.w	r2, #4294967295
 800d92e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4a18      	ldr	r2, [pc, #96]	@ (800d994 <USB_HostInit+0x170>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d10b      	bne.n	800d950 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d93e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a15      	ldr	r2, [pc, #84]	@ (800d998 <USB_HostInit+0x174>)
 800d944:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	4a14      	ldr	r2, [pc, #80]	@ (800d99c <USB_HostInit+0x178>)
 800d94a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800d94e:	e009      	b.n	800d964 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2280      	movs	r2, #128	@ 0x80
 800d954:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	4a11      	ldr	r2, [pc, #68]	@ (800d9a0 <USB_HostInit+0x17c>)
 800d95a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	4a11      	ldr	r2, [pc, #68]	@ (800d9a4 <USB_HostInit+0x180>)
 800d960:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d964:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d105      	bne.n	800d978 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	699b      	ldr	r3, [r3, #24]
 800d970:	f043 0210 	orr.w	r2, r3, #16
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	699a      	ldr	r2, [r3, #24]
 800d97c:	4b0a      	ldr	r3, [pc, #40]	@ (800d9a8 <USB_HostInit+0x184>)
 800d97e:	4313      	orrs	r3, r2
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d984:	7dfb      	ldrb	r3, [r7, #23]
}
 800d986:	4618      	mov	r0, r3
 800d988:	3718      	adds	r7, #24
 800d98a:	46bd      	mov	sp, r7
 800d98c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d990:	b004      	add	sp, #16
 800d992:	4770      	bx	lr
 800d994:	40040000 	.word	0x40040000
 800d998:	01000200 	.word	0x01000200
 800d99c:	00e00300 	.word	0x00e00300
 800d9a0:	00600080 	.word	0x00600080
 800d9a4:	004000e0 	.word	0x004000e0
 800d9a8:	a3200008 	.word	0xa3200008

0800d9ac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b085      	sub	sp, #20
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	68fa      	ldr	r2, [r7, #12]
 800d9c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d9ca:	f023 0303 	bic.w	r3, r3, #3
 800d9ce:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	78fb      	ldrb	r3, [r7, #3]
 800d9da:	f003 0303 	and.w	r3, r3, #3
 800d9de:	68f9      	ldr	r1, [r7, #12]
 800d9e0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d9e8:	78fb      	ldrb	r3, [r7, #3]
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d107      	bne.n	800d9fe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d9fa:	6053      	str	r3, [r2, #4]
 800d9fc:	e00c      	b.n	800da18 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800d9fe:	78fb      	ldrb	r3, [r7, #3]
 800da00:	2b02      	cmp	r3, #2
 800da02:	d107      	bne.n	800da14 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da0a:	461a      	mov	r2, r3
 800da0c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800da10:	6053      	str	r3, [r2, #4]
 800da12:	e001      	b.n	800da18 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800da14:	2301      	movs	r3, #1
 800da16:	e000      	b.n	800da1a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800da18:	2300      	movs	r3, #0
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3714      	adds	r7, #20
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr

0800da26 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b084      	sub	sp, #16
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800da32:	2300      	movs	r3, #0
 800da34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800da46:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	68fa      	ldr	r2, [r7, #12]
 800da4c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800da50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800da54:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800da56:	2064      	movs	r0, #100	@ 0x64
 800da58:	f7f7 fce4 	bl	8005424 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	68fa      	ldr	r2, [r7, #12]
 800da60:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800da64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da68:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800da6a:	200a      	movs	r0, #10
 800da6c:	f7f7 fcda 	bl	8005424 <HAL_Delay>

  return HAL_OK;
 800da70:	2300      	movs	r3, #0
}
 800da72:	4618      	mov	r0, r3
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800da7a:	b480      	push	{r7}
 800da7c:	b085      	sub	sp, #20
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
 800da82:	460b      	mov	r3, r1
 800da84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800da8a:	2300      	movs	r3, #0
 800da8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800da9e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d109      	bne.n	800dabe <USB_DriveVbus+0x44>
 800daaa:	78fb      	ldrb	r3, [r7, #3]
 800daac:	2b01      	cmp	r3, #1
 800daae:	d106      	bne.n	800dabe <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	68fa      	ldr	r2, [r7, #12]
 800dab4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800dab8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dabc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dac8:	d109      	bne.n	800dade <USB_DriveVbus+0x64>
 800daca:	78fb      	ldrb	r3, [r7, #3]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d106      	bne.n	800dade <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800dad8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dadc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800dade:	2300      	movs	r3, #0
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3714      	adds	r7, #20
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800daec:	b480      	push	{r7}
 800daee:	b085      	sub	sp, #20
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800daf8:	2300      	movs	r3, #0
 800dafa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	0c5b      	lsrs	r3, r3, #17
 800db0a:	f003 0303 	and.w	r3, r3, #3
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3714      	adds	r7, #20
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr

0800db1a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800db1a:	b480      	push	{r7}
 800db1c:	b085      	sub	sp, #20
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	b29b      	uxth	r3, r3
}
 800db30:	4618      	mov	r0, r3
 800db32:	3714      	adds	r7, #20
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b088      	sub	sp, #32
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	4608      	mov	r0, r1
 800db46:	4611      	mov	r1, r2
 800db48:	461a      	mov	r2, r3
 800db4a:	4603      	mov	r3, r0
 800db4c:	70fb      	strb	r3, [r7, #3]
 800db4e:	460b      	mov	r3, r1
 800db50:	70bb      	strb	r3, [r7, #2]
 800db52:	4613      	mov	r3, r2
 800db54:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800db56:	2300      	movs	r3, #0
 800db58:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800db5e:	78fb      	ldrb	r3, [r7, #3]
 800db60:	015a      	lsls	r2, r3, #5
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	4413      	add	r3, r2
 800db66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db6a:	461a      	mov	r2, r3
 800db6c:	f04f 33ff 	mov.w	r3, #4294967295
 800db70:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800db72:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800db76:	2b03      	cmp	r3, #3
 800db78:	d87c      	bhi.n	800dc74 <USB_HC_Init+0x138>
 800db7a:	a201      	add	r2, pc, #4	@ (adr r2, 800db80 <USB_HC_Init+0x44>)
 800db7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db80:	0800db91 	.word	0x0800db91
 800db84:	0800dc37 	.word	0x0800dc37
 800db88:	0800db91 	.word	0x0800db91
 800db8c:	0800dbf9 	.word	0x0800dbf9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800db90:	78fb      	ldrb	r3, [r7, #3]
 800db92:	015a      	lsls	r2, r3, #5
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	4413      	add	r3, r2
 800db98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db9c:	461a      	mov	r2, r3
 800db9e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800dba2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800dba4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	da10      	bge.n	800dbce <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dbac:	78fb      	ldrb	r3, [r7, #3]
 800dbae:	015a      	lsls	r2, r3, #5
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	78fa      	ldrb	r2, [r7, #3]
 800dbbc:	0151      	lsls	r1, r2, #5
 800dbbe:	693a      	ldr	r2, [r7, #16]
 800dbc0:	440a      	add	r2, r1
 800dbc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dbc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dbca:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800dbcc:	e055      	b.n	800dc7a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4a6f      	ldr	r2, [pc, #444]	@ (800dd90 <USB_HC_Init+0x254>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d151      	bne.n	800dc7a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800dbd6:	78fb      	ldrb	r3, [r7, #3]
 800dbd8:	015a      	lsls	r2, r3, #5
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	4413      	add	r3, r2
 800dbde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	78fa      	ldrb	r2, [r7, #3]
 800dbe6:	0151      	lsls	r1, r2, #5
 800dbe8:	693a      	ldr	r2, [r7, #16]
 800dbea:	440a      	add	r2, r1
 800dbec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dbf0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800dbf4:	60d3      	str	r3, [r2, #12]
      break;
 800dbf6:	e040      	b.n	800dc7a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dbf8:	78fb      	ldrb	r3, [r7, #3]
 800dbfa:	015a      	lsls	r2, r3, #5
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	4413      	add	r3, r2
 800dc00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc04:	461a      	mov	r2, r3
 800dc06:	f240 639d 	movw	r3, #1693	@ 0x69d
 800dc0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dc0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	da34      	bge.n	800dc7e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dc14:	78fb      	ldrb	r3, [r7, #3]
 800dc16:	015a      	lsls	r2, r3, #5
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	4413      	add	r3, r2
 800dc1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	78fa      	ldrb	r2, [r7, #3]
 800dc24:	0151      	lsls	r1, r2, #5
 800dc26:	693a      	ldr	r2, [r7, #16]
 800dc28:	440a      	add	r2, r1
 800dc2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dc32:	60d3      	str	r3, [r2, #12]
      }

      break;
 800dc34:	e023      	b.n	800dc7e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dc36:	78fb      	ldrb	r3, [r7, #3]
 800dc38:	015a      	lsls	r2, r3, #5
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc42:	461a      	mov	r2, r3
 800dc44:	f240 2325 	movw	r3, #549	@ 0x225
 800dc48:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dc4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	da17      	bge.n	800dc82 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800dc52:	78fb      	ldrb	r3, [r7, #3]
 800dc54:	015a      	lsls	r2, r3, #5
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	4413      	add	r3, r2
 800dc5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	78fa      	ldrb	r2, [r7, #3]
 800dc62:	0151      	lsls	r1, r2, #5
 800dc64:	693a      	ldr	r2, [r7, #16]
 800dc66:	440a      	add	r2, r1
 800dc68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc6c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800dc70:	60d3      	str	r3, [r2, #12]
      }
      break;
 800dc72:	e006      	b.n	800dc82 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800dc74:	2301      	movs	r3, #1
 800dc76:	77fb      	strb	r3, [r7, #31]
      break;
 800dc78:	e004      	b.n	800dc84 <USB_HC_Init+0x148>
      break;
 800dc7a:	bf00      	nop
 800dc7c:	e002      	b.n	800dc84 <USB_HC_Init+0x148>
      break;
 800dc7e:	bf00      	nop
 800dc80:	e000      	b.n	800dc84 <USB_HC_Init+0x148>
      break;
 800dc82:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800dc84:	78fb      	ldrb	r3, [r7, #3]
 800dc86:	015a      	lsls	r2, r3, #5
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	4413      	add	r3, r2
 800dc8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc90:	461a      	mov	r2, r3
 800dc92:	2300      	movs	r3, #0
 800dc94:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800dc96:	78fb      	ldrb	r3, [r7, #3]
 800dc98:	015a      	lsls	r2, r3, #5
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	78fa      	ldrb	r2, [r7, #3]
 800dca6:	0151      	lsls	r1, r2, #5
 800dca8:	693a      	ldr	r2, [r7, #16]
 800dcaa:	440a      	add	r2, r1
 800dcac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dcb0:	f043 0302 	orr.w	r3, r3, #2
 800dcb4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dcbc:	699a      	ldr	r2, [r3, #24]
 800dcbe:	78fb      	ldrb	r3, [r7, #3]
 800dcc0:	f003 030f 	and.w	r3, r3, #15
 800dcc4:	2101      	movs	r1, #1
 800dcc6:	fa01 f303 	lsl.w	r3, r1, r3
 800dcca:	6939      	ldr	r1, [r7, #16]
 800dccc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	699b      	ldr	r3, [r3, #24]
 800dcd8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800dce0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	da03      	bge.n	800dcf0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800dce8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dcec:	61bb      	str	r3, [r7, #24]
 800dcee:	e001      	b.n	800dcf4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7ff fef9 	bl	800daec <USB_GetHostSpeed>
 800dcfa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800dcfc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd00:	2b02      	cmp	r3, #2
 800dd02:	d106      	bne.n	800dd12 <USB_HC_Init+0x1d6>
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	2b02      	cmp	r3, #2
 800dd08:	d003      	beq.n	800dd12 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800dd0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800dd0e:	617b      	str	r3, [r7, #20]
 800dd10:	e001      	b.n	800dd16 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800dd12:	2300      	movs	r3, #0
 800dd14:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dd16:	787b      	ldrb	r3, [r7, #1]
 800dd18:	059b      	lsls	r3, r3, #22
 800dd1a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dd1e:	78bb      	ldrb	r3, [r7, #2]
 800dd20:	02db      	lsls	r3, r3, #11
 800dd22:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dd26:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dd28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dd2c:	049b      	lsls	r3, r3, #18
 800dd2e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dd32:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800dd34:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800dd36:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dd3a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	431a      	orrs	r2, r3
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dd44:	78fa      	ldrb	r2, [r7, #3]
 800dd46:	0151      	lsls	r1, r2, #5
 800dd48:	693a      	ldr	r2, [r7, #16]
 800dd4a:	440a      	add	r2, r1
 800dd4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800dd50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dd54:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800dd56:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dd5a:	2b03      	cmp	r3, #3
 800dd5c:	d003      	beq.n	800dd66 <USB_HC_Init+0x22a>
 800dd5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	d10f      	bne.n	800dd86 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800dd66:	78fb      	ldrb	r3, [r7, #3]
 800dd68:	015a      	lsls	r2, r3, #5
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	78fa      	ldrb	r2, [r7, #3]
 800dd76:	0151      	lsls	r1, r2, #5
 800dd78:	693a      	ldr	r2, [r7, #16]
 800dd7a:	440a      	add	r2, r1
 800dd7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dd80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dd84:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800dd86:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3720      	adds	r7, #32
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	40040000 	.word	0x40040000

0800dd94 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b08c      	sub	sp, #48	@ 0x30
 800dd98:	af02      	add	r7, sp, #8
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	60b9      	str	r1, [r7, #8]
 800dd9e:	4613      	mov	r3, r2
 800dda0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	785b      	ldrb	r3, [r3, #1]
 800ddaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800ddac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ddb0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	4a5d      	ldr	r2, [pc, #372]	@ (800df2c <USB_HC_StartXfer+0x198>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d12f      	bne.n	800de1a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800ddba:	79fb      	ldrb	r3, [r7, #7]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d11c      	bne.n	800ddfa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	7c9b      	ldrb	r3, [r3, #18]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d003      	beq.n	800ddd0 <USB_HC_StartXfer+0x3c>
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	7c9b      	ldrb	r3, [r3, #18]
 800ddcc:	2b02      	cmp	r3, #2
 800ddce:	d124      	bne.n	800de1a <USB_HC_StartXfer+0x86>
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	799b      	ldrb	r3, [r3, #6]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d120      	bne.n	800de1a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	015a      	lsls	r2, r3, #5
 800dddc:	6a3b      	ldr	r3, [r7, #32]
 800ddde:	4413      	add	r3, r2
 800dde0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	69fa      	ldr	r2, [r7, #28]
 800dde8:	0151      	lsls	r1, r2, #5
 800ddea:	6a3a      	ldr	r2, [r7, #32]
 800ddec:	440a      	add	r2, r1
 800ddee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ddf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ddf6:	60d3      	str	r3, [r2, #12]
 800ddf8:	e00f      	b.n	800de1a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	791b      	ldrb	r3, [r3, #4]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d10b      	bne.n	800de1a <USB_HC_StartXfer+0x86>
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	795b      	ldrb	r3, [r3, #5]
 800de06:	2b01      	cmp	r3, #1
 800de08:	d107      	bne.n	800de1a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	785b      	ldrb	r3, [r3, #1]
 800de0e:	4619      	mov	r1, r3
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f000 fb6b 	bl	800e4ec <USB_DoPing>
        return HAL_OK;
 800de16:	2300      	movs	r3, #0
 800de18:	e232      	b.n	800e280 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	799b      	ldrb	r3, [r3, #6]
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d158      	bne.n	800ded4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800de22:	2301      	movs	r3, #1
 800de24:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	78db      	ldrb	r3, [r3, #3]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d007      	beq.n	800de3e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800de2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de30:	68ba      	ldr	r2, [r7, #8]
 800de32:	8a92      	ldrh	r2, [r2, #20]
 800de34:	fb03 f202 	mul.w	r2, r3, r2
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	61da      	str	r2, [r3, #28]
 800de3c:	e07c      	b.n	800df38 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	7c9b      	ldrb	r3, [r3, #18]
 800de42:	2b01      	cmp	r3, #1
 800de44:	d130      	bne.n	800dea8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	6a1b      	ldr	r3, [r3, #32]
 800de4a:	2bbc      	cmp	r3, #188	@ 0xbc
 800de4c:	d918      	bls.n	800de80 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	8a9b      	ldrh	r3, [r3, #20]
 800de52:	461a      	mov	r2, r3
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	69da      	ldr	r2, [r3, #28]
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	2b01      	cmp	r3, #1
 800de66:	d003      	beq.n	800de70 <USB_HC_StartXfer+0xdc>
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	2b02      	cmp	r3, #2
 800de6e:	d103      	bne.n	800de78 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	2202      	movs	r2, #2
 800de74:	60da      	str	r2, [r3, #12]
 800de76:	e05f      	b.n	800df38 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	2201      	movs	r2, #1
 800de7c:	60da      	str	r2, [r3, #12]
 800de7e:	e05b      	b.n	800df38 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	6a1a      	ldr	r2, [r3, #32]
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d007      	beq.n	800dea0 <USB_HC_StartXfer+0x10c>
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	68db      	ldr	r3, [r3, #12]
 800de94:	2b02      	cmp	r3, #2
 800de96:	d003      	beq.n	800dea0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2204      	movs	r2, #4
 800de9c:	60da      	str	r2, [r3, #12]
 800de9e:	e04b      	b.n	800df38 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	2203      	movs	r2, #3
 800dea4:	60da      	str	r2, [r3, #12]
 800dea6:	e047      	b.n	800df38 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800dea8:	79fb      	ldrb	r3, [r7, #7]
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d10d      	bne.n	800deca <USB_HC_StartXfer+0x136>
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	6a1b      	ldr	r3, [r3, #32]
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	8a92      	ldrh	r2, [r2, #20]
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d907      	bls.n	800deca <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800deba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800debc:	68ba      	ldr	r2, [r7, #8]
 800debe:	8a92      	ldrh	r2, [r2, #20]
 800dec0:	fb03 f202 	mul.w	r2, r3, r2
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	61da      	str	r2, [r3, #28]
 800dec8:	e036      	b.n	800df38 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	6a1a      	ldr	r2, [r3, #32]
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	61da      	str	r2, [r3, #28]
 800ded2:	e031      	b.n	800df38 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	6a1b      	ldr	r3, [r3, #32]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d018      	beq.n	800df0e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	6a1b      	ldr	r3, [r3, #32]
 800dee0:	68ba      	ldr	r2, [r7, #8]
 800dee2:	8a92      	ldrh	r2, [r2, #20]
 800dee4:	4413      	add	r3, r2
 800dee6:	3b01      	subs	r3, #1
 800dee8:	68ba      	ldr	r2, [r7, #8]
 800deea:	8a92      	ldrh	r2, [r2, #20]
 800deec:	fbb3 f3f2 	udiv	r3, r3, r2
 800def0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800def2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800def4:	8b7b      	ldrh	r3, [r7, #26]
 800def6:	429a      	cmp	r2, r3
 800def8:	d90b      	bls.n	800df12 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800defa:	8b7b      	ldrh	r3, [r7, #26]
 800defc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800defe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df00:	68ba      	ldr	r2, [r7, #8]
 800df02:	8a92      	ldrh	r2, [r2, #20]
 800df04:	fb03 f202 	mul.w	r2, r3, r2
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	61da      	str	r2, [r3, #28]
 800df0c:	e001      	b.n	800df12 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800df0e:	2301      	movs	r3, #1
 800df10:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	78db      	ldrb	r3, [r3, #3]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d00a      	beq.n	800df30 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800df1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df1c:	68ba      	ldr	r2, [r7, #8]
 800df1e:	8a92      	ldrh	r2, [r2, #20]
 800df20:	fb03 f202 	mul.w	r2, r3, r2
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	61da      	str	r2, [r3, #28]
 800df28:	e006      	b.n	800df38 <USB_HC_StartXfer+0x1a4>
 800df2a:	bf00      	nop
 800df2c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	6a1a      	ldr	r2, [r3, #32]
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	69db      	ldr	r3, [r3, #28]
 800df3c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800df40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df42:	04d9      	lsls	r1, r3, #19
 800df44:	4ba3      	ldr	r3, [pc, #652]	@ (800e1d4 <USB_HC_StartXfer+0x440>)
 800df46:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800df48:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	7d9b      	ldrb	r3, [r3, #22]
 800df4e:	075b      	lsls	r3, r3, #29
 800df50:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800df54:	69f9      	ldr	r1, [r7, #28]
 800df56:	0148      	lsls	r0, r1, #5
 800df58:	6a39      	ldr	r1, [r7, #32]
 800df5a:	4401      	add	r1, r0
 800df5c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800df60:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800df62:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800df64:	79fb      	ldrb	r3, [r7, #7]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d009      	beq.n	800df7e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	6999      	ldr	r1, [r3, #24]
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	015a      	lsls	r2, r3, #5
 800df72:	6a3b      	ldr	r3, [r7, #32]
 800df74:	4413      	add	r3, r2
 800df76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df7a:	460a      	mov	r2, r1
 800df7c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800df7e:	6a3b      	ldr	r3, [r7, #32]
 800df80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800df84:	689b      	ldr	r3, [r3, #8]
 800df86:	f003 0301 	and.w	r3, r3, #1
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	bf0c      	ite	eq
 800df8e:	2301      	moveq	r3, #1
 800df90:	2300      	movne	r3, #0
 800df92:	b2db      	uxtb	r3, r3
 800df94:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800df96:	69fb      	ldr	r3, [r7, #28]
 800df98:	015a      	lsls	r2, r3, #5
 800df9a:	6a3b      	ldr	r3, [r7, #32]
 800df9c:	4413      	add	r3, r2
 800df9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	69fa      	ldr	r2, [r7, #28]
 800dfa6:	0151      	lsls	r1, r2, #5
 800dfa8:	6a3a      	ldr	r2, [r7, #32]
 800dfaa:	440a      	add	r2, r1
 800dfac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dfb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dfb4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	015a      	lsls	r2, r3, #5
 800dfba:	6a3b      	ldr	r3, [r7, #32]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	7e7b      	ldrb	r3, [r7, #25]
 800dfc6:	075b      	lsls	r3, r3, #29
 800dfc8:	69f9      	ldr	r1, [r7, #28]
 800dfca:	0148      	lsls	r0, r1, #5
 800dfcc:	6a39      	ldr	r1, [r7, #32]
 800dfce:	4401      	add	r1, r0
 800dfd0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	799b      	ldrb	r3, [r3, #6]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	f040 80c3 	bne.w	800e168 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	7c5b      	ldrb	r3, [r3, #17]
 800dfe6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800dfe8:	68ba      	ldr	r2, [r7, #8]
 800dfea:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800dfec:	4313      	orrs	r3, r2
 800dfee:	69fa      	ldr	r2, [r7, #28]
 800dff0:	0151      	lsls	r1, r2, #5
 800dff2:	6a3a      	ldr	r2, [r7, #32]
 800dff4:	440a      	add	r2, r1
 800dff6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800dffa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800dffe:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	015a      	lsls	r2, r3, #5
 800e004:	6a3b      	ldr	r3, [r7, #32]
 800e006:	4413      	add	r3, r2
 800e008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e00c:	68db      	ldr	r3, [r3, #12]
 800e00e:	69fa      	ldr	r2, [r7, #28]
 800e010:	0151      	lsls	r1, r2, #5
 800e012:	6a3a      	ldr	r2, [r7, #32]
 800e014:	440a      	add	r2, r1
 800e016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e01a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e01e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	79db      	ldrb	r3, [r3, #7]
 800e024:	2b01      	cmp	r3, #1
 800e026:	d123      	bne.n	800e070 <USB_HC_StartXfer+0x2dc>
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	78db      	ldrb	r3, [r3, #3]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d11f      	bne.n	800e070 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	015a      	lsls	r2, r3, #5
 800e034:	6a3b      	ldr	r3, [r7, #32]
 800e036:	4413      	add	r3, r2
 800e038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	69fa      	ldr	r2, [r7, #28]
 800e040:	0151      	lsls	r1, r2, #5
 800e042:	6a3a      	ldr	r2, [r7, #32]
 800e044:	440a      	add	r2, r1
 800e046:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e04a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e04e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	015a      	lsls	r2, r3, #5
 800e054:	6a3b      	ldr	r3, [r7, #32]
 800e056:	4413      	add	r3, r2
 800e058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	69fa      	ldr	r2, [r7, #28]
 800e060:	0151      	lsls	r1, r2, #5
 800e062:	6a3a      	ldr	r2, [r7, #32]
 800e064:	440a      	add	r2, r1
 800e066:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e06a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e06e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	7c9b      	ldrb	r3, [r3, #18]
 800e074:	2b01      	cmp	r3, #1
 800e076:	d003      	beq.n	800e080 <USB_HC_StartXfer+0x2ec>
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	7c9b      	ldrb	r3, [r3, #18]
 800e07c:	2b03      	cmp	r3, #3
 800e07e:	d117      	bne.n	800e0b0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e084:	2b01      	cmp	r3, #1
 800e086:	d113      	bne.n	800e0b0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	78db      	ldrb	r3, [r3, #3]
 800e08c:	2b01      	cmp	r3, #1
 800e08e:	d10f      	bne.n	800e0b0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	015a      	lsls	r2, r3, #5
 800e094:	6a3b      	ldr	r3, [r7, #32]
 800e096:	4413      	add	r3, r2
 800e098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	69fa      	ldr	r2, [r7, #28]
 800e0a0:	0151      	lsls	r1, r2, #5
 800e0a2:	6a3a      	ldr	r2, [r7, #32]
 800e0a4:	440a      	add	r2, r1
 800e0a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e0ae:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	7c9b      	ldrb	r3, [r3, #18]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d162      	bne.n	800e17e <USB_HC_StartXfer+0x3ea>
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	78db      	ldrb	r3, [r3, #3]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d15e      	bne.n	800e17e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	68db      	ldr	r3, [r3, #12]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	2b03      	cmp	r3, #3
 800e0c8:	d858      	bhi.n	800e17c <USB_HC_StartXfer+0x3e8>
 800e0ca:	a201      	add	r2, pc, #4	@ (adr r2, 800e0d0 <USB_HC_StartXfer+0x33c>)
 800e0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d0:	0800e0e1 	.word	0x0800e0e1
 800e0d4:	0800e103 	.word	0x0800e103
 800e0d8:	0800e125 	.word	0x0800e125
 800e0dc:	0800e147 	.word	0x0800e147
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	015a      	lsls	r2, r3, #5
 800e0e4:	6a3b      	ldr	r3, [r7, #32]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	69fa      	ldr	r2, [r7, #28]
 800e0f0:	0151      	lsls	r1, r2, #5
 800e0f2:	6a3a      	ldr	r2, [r7, #32]
 800e0f4:	440a      	add	r2, r1
 800e0f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0fe:	6053      	str	r3, [r2, #4]
          break;
 800e100:	e03d      	b.n	800e17e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800e102:	69fb      	ldr	r3, [r7, #28]
 800e104:	015a      	lsls	r2, r3, #5
 800e106:	6a3b      	ldr	r3, [r7, #32]
 800e108:	4413      	add	r3, r2
 800e10a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	69fa      	ldr	r2, [r7, #28]
 800e112:	0151      	lsls	r1, r2, #5
 800e114:	6a3a      	ldr	r2, [r7, #32]
 800e116:	440a      	add	r2, r1
 800e118:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e11c:	f043 030e 	orr.w	r3, r3, #14
 800e120:	6053      	str	r3, [r2, #4]
          break;
 800e122:	e02c      	b.n	800e17e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	015a      	lsls	r2, r3, #5
 800e128:	6a3b      	ldr	r3, [r7, #32]
 800e12a:	4413      	add	r3, r2
 800e12c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	69fa      	ldr	r2, [r7, #28]
 800e134:	0151      	lsls	r1, r2, #5
 800e136:	6a3a      	ldr	r2, [r7, #32]
 800e138:	440a      	add	r2, r1
 800e13a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e13e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e142:	6053      	str	r3, [r2, #4]
          break;
 800e144:	e01b      	b.n	800e17e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	015a      	lsls	r2, r3, #5
 800e14a:	6a3b      	ldr	r3, [r7, #32]
 800e14c:	4413      	add	r3, r2
 800e14e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	69fa      	ldr	r2, [r7, #28]
 800e156:	0151      	lsls	r1, r2, #5
 800e158:	6a3a      	ldr	r2, [r7, #32]
 800e15a:	440a      	add	r2, r1
 800e15c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e160:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e164:	6053      	str	r3, [r2, #4]
          break;
 800e166:	e00a      	b.n	800e17e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	015a      	lsls	r2, r3, #5
 800e16c:	6a3b      	ldr	r3, [r7, #32]
 800e16e:	4413      	add	r3, r2
 800e170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e174:	461a      	mov	r2, r3
 800e176:	2300      	movs	r3, #0
 800e178:	6053      	str	r3, [r2, #4]
 800e17a:	e000      	b.n	800e17e <USB_HC_StartXfer+0x3ea>
          break;
 800e17c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	015a      	lsls	r2, r3, #5
 800e182:	6a3b      	ldr	r3, [r7, #32]
 800e184:	4413      	add	r3, r2
 800e186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e194:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	78db      	ldrb	r3, [r3, #3]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d004      	beq.n	800e1a8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1a4:	613b      	str	r3, [r7, #16]
 800e1a6:	e003      	b.n	800e1b0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e1ae:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e1b6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	015a      	lsls	r2, r3, #5
 800e1bc:	6a3b      	ldr	r3, [r7, #32]
 800e1be:	4413      	add	r3, r2
 800e1c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1c4:	461a      	mov	r2, r3
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e1ca:	79fb      	ldrb	r3, [r7, #7]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d003      	beq.n	800e1d8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	e055      	b.n	800e280 <USB_HC_StartXfer+0x4ec>
 800e1d4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	78db      	ldrb	r3, [r3, #3]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d14e      	bne.n	800e27e <USB_HC_StartXfer+0x4ea>
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	6a1b      	ldr	r3, [r3, #32]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d04a      	beq.n	800e27e <USB_HC_StartXfer+0x4ea>
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	79db      	ldrb	r3, [r3, #7]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d146      	bne.n	800e27e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	7c9b      	ldrb	r3, [r3, #18]
 800e1f4:	2b03      	cmp	r3, #3
 800e1f6:	d831      	bhi.n	800e25c <USB_HC_StartXfer+0x4c8>
 800e1f8:	a201      	add	r2, pc, #4	@ (adr r2, 800e200 <USB_HC_StartXfer+0x46c>)
 800e1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1fe:	bf00      	nop
 800e200:	0800e211 	.word	0x0800e211
 800e204:	0800e235 	.word	0x0800e235
 800e208:	0800e211 	.word	0x0800e211
 800e20c:	0800e235 	.word	0x0800e235
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	6a1b      	ldr	r3, [r3, #32]
 800e214:	3303      	adds	r3, #3
 800e216:	089b      	lsrs	r3, r3, #2
 800e218:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e21a:	8afa      	ldrh	r2, [r7, #22]
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e220:	b29b      	uxth	r3, r3
 800e222:	429a      	cmp	r2, r3
 800e224:	d91c      	bls.n	800e260 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	699b      	ldr	r3, [r3, #24]
 800e22a:	f043 0220 	orr.w	r2, r3, #32
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	619a      	str	r2, [r3, #24]
        }
        break;
 800e232:	e015      	b.n	800e260 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	6a1b      	ldr	r3, [r3, #32]
 800e238:	3303      	adds	r3, #3
 800e23a:	089b      	lsrs	r3, r3, #2
 800e23c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e23e:	8afa      	ldrh	r2, [r7, #22]
 800e240:	6a3b      	ldr	r3, [r7, #32]
 800e242:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e246:	691b      	ldr	r3, [r3, #16]
 800e248:	b29b      	uxth	r3, r3
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d90a      	bls.n	800e264 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	699b      	ldr	r3, [r3, #24]
 800e252:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	619a      	str	r2, [r3, #24]
        }
        break;
 800e25a:	e003      	b.n	800e264 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800e25c:	bf00      	nop
 800e25e:	e002      	b.n	800e266 <USB_HC_StartXfer+0x4d2>
        break;
 800e260:	bf00      	nop
 800e262:	e000      	b.n	800e266 <USB_HC_StartXfer+0x4d2>
        break;
 800e264:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	6999      	ldr	r1, [r3, #24]
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	785a      	ldrb	r2, [r3, #1]
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	6a1b      	ldr	r3, [r3, #32]
 800e272:	b29b      	uxth	r3, r3
 800e274:	2000      	movs	r0, #0
 800e276:	9000      	str	r0, [sp, #0]
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f7ff f9c9 	bl	800d610 <USB_WritePacket>
  }

  return HAL_OK;
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3728      	adds	r7, #40	@ 0x28
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e29a:	695b      	ldr	r3, [r3, #20]
 800e29c:	b29b      	uxth	r3, r3
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3714      	adds	r7, #20
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr

0800e2aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e2aa:	b480      	push	{r7}
 800e2ac:	b089      	sub	sp, #36	@ 0x24
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800e2ba:	78fb      	ldrb	r3, [r7, #3]
 800e2bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e2c2:	69bb      	ldr	r3, [r7, #24]
 800e2c4:	015a      	lsls	r2, r3, #5
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	0c9b      	lsrs	r3, r3, #18
 800e2d2:	f003 0303 	and.w	r3, r3, #3
 800e2d6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e2d8:	69bb      	ldr	r3, [r7, #24]
 800e2da:	015a      	lsls	r2, r3, #5
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	4413      	add	r3, r2
 800e2e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	0fdb      	lsrs	r3, r3, #31
 800e2e8:	f003 0301 	and.w	r3, r3, #1
 800e2ec:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	015a      	lsls	r2, r3, #5
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	0fdb      	lsrs	r3, r3, #31
 800e2fe:	f003 0301 	and.w	r3, r3, #1
 800e302:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	f003 0320 	and.w	r3, r3, #32
 800e30c:	2b20      	cmp	r3, #32
 800e30e:	d10d      	bne.n	800e32c <USB_HC_Halt+0x82>
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d10a      	bne.n	800e32c <USB_HC_Halt+0x82>
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d005      	beq.n	800e328 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	2b01      	cmp	r3, #1
 800e320:	d002      	beq.n	800e328 <USB_HC_Halt+0x7e>
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	2b03      	cmp	r3, #3
 800e326:	d101      	bne.n	800e32c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800e328:	2300      	movs	r3, #0
 800e32a:	e0d8      	b.n	800e4de <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d002      	beq.n	800e338 <USB_HC_Halt+0x8e>
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	2b02      	cmp	r3, #2
 800e336:	d173      	bne.n	800e420 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e338:	69bb      	ldr	r3, [r7, #24]
 800e33a:	015a      	lsls	r2, r3, #5
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	4413      	add	r3, r2
 800e340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	69ba      	ldr	r2, [r7, #24]
 800e348:	0151      	lsls	r1, r2, #5
 800e34a:	69fa      	ldr	r2, [r7, #28]
 800e34c:	440a      	add	r2, r1
 800e34e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e352:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e356:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	f003 0320 	and.w	r3, r3, #32
 800e360:	2b00      	cmp	r3, #0
 800e362:	d14a      	bne.n	800e3fa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e368:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d133      	bne.n	800e3d8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e370:	69bb      	ldr	r3, [r7, #24]
 800e372:	015a      	lsls	r2, r3, #5
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	4413      	add	r3, r2
 800e378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	69ba      	ldr	r2, [r7, #24]
 800e380:	0151      	lsls	r1, r2, #5
 800e382:	69fa      	ldr	r2, [r7, #28]
 800e384:	440a      	add	r2, r1
 800e386:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e38a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e38e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	015a      	lsls	r2, r3, #5
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	4413      	add	r3, r2
 800e398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	69ba      	ldr	r2, [r7, #24]
 800e3a0:	0151      	lsls	r1, r2, #5
 800e3a2:	69fa      	ldr	r2, [r7, #28]
 800e3a4:	440a      	add	r2, r1
 800e3a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e3aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e3ae:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e3bc:	d82e      	bhi.n	800e41c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	015a      	lsls	r2, r3, #5
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e3d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e3d4:	d0ec      	beq.n	800e3b0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e3d6:	e081      	b.n	800e4dc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	015a      	lsls	r2, r3, #5
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	4413      	add	r3, r2
 800e3e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	69ba      	ldr	r2, [r7, #24]
 800e3e8:	0151      	lsls	r1, r2, #5
 800e3ea:	69fa      	ldr	r2, [r7, #28]
 800e3ec:	440a      	add	r2, r1
 800e3ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e3f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e3f6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e3f8:	e070      	b.n	800e4dc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e3fa:	69bb      	ldr	r3, [r7, #24]
 800e3fc:	015a      	lsls	r2, r3, #5
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	4413      	add	r3, r2
 800e402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	69ba      	ldr	r2, [r7, #24]
 800e40a:	0151      	lsls	r1, r2, #5
 800e40c:	69fa      	ldr	r2, [r7, #28]
 800e40e:	440a      	add	r2, r1
 800e410:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e414:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e418:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e41a:	e05f      	b.n	800e4dc <USB_HC_Halt+0x232>
            break;
 800e41c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e41e:	e05d      	b.n	800e4dc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e420:	69bb      	ldr	r3, [r7, #24]
 800e422:	015a      	lsls	r2, r3, #5
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	4413      	add	r3, r2
 800e428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	69ba      	ldr	r2, [r7, #24]
 800e430:	0151      	lsls	r1, r2, #5
 800e432:	69fa      	ldr	r2, [r7, #28]
 800e434:	440a      	add	r2, r1
 800e436:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e43a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e43e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e446:	691b      	ldr	r3, [r3, #16]
 800e448:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d133      	bne.n	800e4b8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e450:	69bb      	ldr	r3, [r7, #24]
 800e452:	015a      	lsls	r2, r3, #5
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	4413      	add	r3, r2
 800e458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	69ba      	ldr	r2, [r7, #24]
 800e460:	0151      	lsls	r1, r2, #5
 800e462:	69fa      	ldr	r2, [r7, #28]
 800e464:	440a      	add	r2, r1
 800e466:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e46a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e46e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	015a      	lsls	r2, r3, #5
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	4413      	add	r3, r2
 800e478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	69ba      	ldr	r2, [r7, #24]
 800e480:	0151      	lsls	r1, r2, #5
 800e482:	69fa      	ldr	r2, [r7, #28]
 800e484:	440a      	add	r2, r1
 800e486:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e48a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e48e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	3301      	adds	r3, #1
 800e494:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e49c:	d81d      	bhi.n	800e4da <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	015a      	lsls	r2, r3, #5
 800e4a2:	69fb      	ldr	r3, [r7, #28]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e4b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e4b4:	d0ec      	beq.n	800e490 <USB_HC_Halt+0x1e6>
 800e4b6:	e011      	b.n	800e4dc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	015a      	lsls	r2, r3, #5
 800e4bc:	69fb      	ldr	r3, [r7, #28]
 800e4be:	4413      	add	r3, r2
 800e4c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	69ba      	ldr	r2, [r7, #24]
 800e4c8:	0151      	lsls	r1, r2, #5
 800e4ca:	69fa      	ldr	r2, [r7, #28]
 800e4cc:	440a      	add	r2, r1
 800e4ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e4d6:	6013      	str	r3, [r2, #0]
 800e4d8:	e000      	b.n	800e4dc <USB_HC_Halt+0x232>
          break;
 800e4da:	bf00      	nop
    }
  }

  return HAL_OK;
 800e4dc:	2300      	movs	r3, #0
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3724      	adds	r7, #36	@ 0x24
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
	...

0800e4ec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b087      	sub	sp, #28
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e4fc:	78fb      	ldrb	r3, [r7, #3]
 800e4fe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e500:	2301      	movs	r3, #1
 800e502:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	04da      	lsls	r2, r3, #19
 800e508:	4b15      	ldr	r3, [pc, #84]	@ (800e560 <USB_DoPing+0x74>)
 800e50a:	4013      	ands	r3, r2
 800e50c:	693a      	ldr	r2, [r7, #16]
 800e50e:	0151      	lsls	r1, r2, #5
 800e510:	697a      	ldr	r2, [r7, #20]
 800e512:	440a      	add	r2, r1
 800e514:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e518:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e51c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	015a      	lsls	r2, r3, #5
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	4413      	add	r3, r2
 800e526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e534:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e53c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	015a      	lsls	r2, r3, #5
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	4413      	add	r3, r2
 800e546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e54a:	461a      	mov	r2, r3
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e550:	2300      	movs	r3, #0
}
 800e552:	4618      	mov	r0, r3
 800e554:	371c      	adds	r7, #28
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop
 800e560:	1ff80000 	.word	0x1ff80000

0800e564 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b088      	sub	sp, #32
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e56c:	2300      	movs	r3, #0
 800e56e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e574:	2300      	movs	r3, #0
 800e576:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7fe ff8c 	bl	800d496 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e57e:	2110      	movs	r1, #16
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7fe ffe5 	bl	800d550 <USB_FlushTxFifo>
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d001      	beq.n	800e590 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e58c:	2301      	movs	r3, #1
 800e58e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f7ff f80f 	bl	800d5b4 <USB_FlushRxFifo>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d001      	beq.n	800e5a0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800e59c:	2301      	movs	r3, #1
 800e59e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	61bb      	str	r3, [r7, #24]
 800e5a4:	e01f      	b.n	800e5e6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	015a      	lsls	r2, r3, #5
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e5bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e5c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e5cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e5ce:	69bb      	ldr	r3, [r7, #24]
 800e5d0:	015a      	lsls	r2, r3, #5
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5da:	461a      	mov	r2, r3
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	61bb      	str	r3, [r7, #24]
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	2b0f      	cmp	r3, #15
 800e5ea:	d9dc      	bls.n	800e5a6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	61bb      	str	r3, [r7, #24]
 800e5f0:	e034      	b.n	800e65c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800e5f2:	69bb      	ldr	r3, [r7, #24]
 800e5f4:	015a      	lsls	r2, r3, #5
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e608:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e610:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e618:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	015a      	lsls	r2, r3, #5
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	4413      	add	r3, r2
 800e622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e626:	461a      	mov	r2, r3
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	3301      	adds	r3, #1
 800e630:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e638:	d80c      	bhi.n	800e654 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	015a      	lsls	r2, r3, #5
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	4413      	add	r3, r2
 800e642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e64c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e650:	d0ec      	beq.n	800e62c <USB_StopHost+0xc8>
 800e652:	e000      	b.n	800e656 <USB_StopHost+0xf2>
        break;
 800e654:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	3301      	adds	r3, #1
 800e65a:	61bb      	str	r3, [r7, #24]
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	2b0f      	cmp	r3, #15
 800e660:	d9c7      	bls.n	800e5f2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e668:	461a      	mov	r2, r3
 800e66a:	f04f 33ff 	mov.w	r3, #4294967295
 800e66e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f04f 32ff 	mov.w	r2, #4294967295
 800e676:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7fe fefb 	bl	800d474 <USB_EnableGlobalInt>

  return ret;
 800e67e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3720      	adds	r7, #32
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e688:	b590      	push	{r4, r7, lr}
 800e68a:	b08b      	sub	sp, #44	@ 0x2c
 800e68c:	af04      	add	r7, sp, #16
 800e68e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 800e690:	2300      	movs	r3, #0
 800e692:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e69a:	7919      	ldrb	r1, [r3, #4]
 800e69c:	23ff      	movs	r3, #255	@ 0xff
 800e69e:	2201      	movs	r2, #1
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f001 f879 	bl	800f798 <USBH_FindInterface>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e6aa:	7dbb      	ldrb	r3, [r7, #22]
 800e6ac:	2bff      	cmp	r3, #255	@ 0xff
 800e6ae:	d002      	beq.n	800e6b6 <USBH_HID_InterfaceInit+0x2e>
 800e6b0:	7dbb      	ldrb	r3, [r7, #22]
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d90f      	bls.n	800e6d6 <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800e6b6:	48a9      	ldr	r0, [pc, #676]	@ (800e95c <USBH_HID_InterfaceInit+0x2d4>)
 800e6b8:	f003 fa5c 	bl	8011b74 <iprintf>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	48a6      	ldr	r0, [pc, #664]	@ (800e960 <USBH_HID_InterfaceInit+0x2d8>)
 800e6c8:	f003 fa54 	bl	8011b74 <iprintf>
 800e6cc:	200a      	movs	r0, #10
 800e6ce:	f003 fa63 	bl	8011b98 <putchar>
    return USBH_FAIL;
 800e6d2:	2302      	movs	r3, #2
 800e6d4:	e13d      	b.n	800e952 <USBH_HID_InterfaceInit+0x2ca>
  }

  status = USBH_SelectInterface(phost, interface);
 800e6d6:	7dbb      	ldrb	r3, [r7, #22]
 800e6d8:	4619      	mov	r1, r3
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 fff4 	bl	800f6c8 <USBH_SelectInterface>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800e6e4:	7d7b      	ldrb	r3, [r7, #21]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d001      	beq.n	800e6ee <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 800e6ea:	2302      	movs	r3, #2
 800e6ec:	e131      	b.n	800e952 <USBH_HID_InterfaceInit+0x2ca>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8d3 4d34 	ldr.w	r4, [r3, #3380]	@ 0xd34
 800e6f4:	2034      	movs	r0, #52	@ 0x34
 800e6f6:	f003 f8bd 	bl	8011874 <malloc>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e704:	69db      	ldr	r3, [r3, #28]
 800e706:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d10a      	bne.n	800e724 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 800e70e:	4893      	ldr	r0, [pc, #588]	@ (800e95c <USBH_HID_InterfaceInit+0x2d4>)
 800e710:	f003 fa30 	bl	8011b74 <iprintf>
 800e714:	4893      	ldr	r0, [pc, #588]	@ (800e964 <USBH_HID_InterfaceInit+0x2dc>)
 800e716:	f003 fa2d 	bl	8011b74 <iprintf>
 800e71a:	200a      	movs	r0, #10
 800e71c:	f003 fa3c 	bl	8011b98 <putchar>
    return USBH_FAIL;
 800e720:	2302      	movs	r3, #2
 800e722:	e116      	b.n	800e952 <USBH_HID_InterfaceInit+0x2ca>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800e724:	2234      	movs	r2, #52	@ 0x34
 800e726:	2100      	movs	r1, #0
 800e728:	6938      	ldr	r0, [r7, #16]
 800e72a:	f003 fb93 	bl	8011e54 <memset>

  HID_Handle->state = USBH_HID_ERROR;
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	2207      	movs	r2, #7
 800e732:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800e734:	7dbb      	ldrb	r3, [r7, #22]
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	211a      	movs	r1, #26
 800e73a:	fb01 f303 	mul.w	r3, r1, r3
 800e73e:	4413      	add	r3, r2
 800e740:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	2b01      	cmp	r3, #1
 800e748:	d109      	bne.n	800e75e <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 800e74a:	4887      	ldr	r0, [pc, #540]	@ (800e968 <USBH_HID_InterfaceInit+0x2e0>)
 800e74c:	f003 fa12 	bl	8011b74 <iprintf>
 800e750:	200a      	movs	r0, #10
 800e752:	f003 fa21 	bl	8011b98 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	4a84      	ldr	r2, [pc, #528]	@ (800e96c <USBH_HID_InterfaceInit+0x2e4>)
 800e75a:	631a      	str	r2, [r3, #48]	@ 0x30
 800e75c:	e01c      	b.n	800e798 <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800e75e:	7dbb      	ldrb	r3, [r7, #22]
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	211a      	movs	r1, #26
 800e764:	fb01 f303 	mul.w	r3, r1, r3
 800e768:	4413      	add	r3, r2
 800e76a:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	2b02      	cmp	r3, #2
 800e772:	d109      	bne.n	800e788 <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 800e774:	487e      	ldr	r0, [pc, #504]	@ (800e970 <USBH_HID_InterfaceInit+0x2e8>)
 800e776:	f003 f9fd 	bl	8011b74 <iprintf>
 800e77a:	200a      	movs	r0, #10
 800e77c:	f003 fa0c 	bl	8011b98 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	4a7c      	ldr	r2, [pc, #496]	@ (800e974 <USBH_HID_InterfaceInit+0x2ec>)
 800e784:	631a      	str	r2, [r3, #48]	@ 0x30
 800e786:	e007      	b.n	800e798 <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 800e788:	487b      	ldr	r0, [pc, #492]	@ (800e978 <USBH_HID_InterfaceInit+0x2f0>)
 800e78a:	f003 f9f3 	bl	8011b74 <iprintf>
 800e78e:	200a      	movs	r0, #10
 800e790:	f003 fa02 	bl	8011b98 <putchar>
    return USBH_FAIL;
 800e794:	2302      	movs	r3, #2
 800e796:	e0dc      	b.n	800e952 <USBH_HID_InterfaceInit+0x2ca>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	2200      	movs	r2, #0
 800e79c:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e7a4:	7dbb      	ldrb	r3, [r7, #22]
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	211a      	movs	r1, #26
 800e7aa:	fb01 f303 	mul.w	r3, r1, r3
 800e7ae:	4413      	add	r3, r2
 800e7b0:	f603 5306 	addw	r3, r3, #3334	@ 0xd06
 800e7b4:	781a      	ldrb	r2, [r3, #0]
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e7ba:	7dbb      	ldrb	r3, [r7, #22]
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	211a      	movs	r1, #26
 800e7c0:	fb01 f303 	mul.w	r3, r1, r3
 800e7c4:	4413      	add	r3, r2
 800e7c6:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 800e7ca:	881a      	ldrh	r2, [r3, #0]
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800e7d0:	7dbb      	ldrb	r3, [r7, #22]
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	211a      	movs	r1, #26
 800e7d6:	fb01 f303 	mul.w	r3, r1, r3
 800e7da:	4413      	add	r3, r2
 800e7dc:	f603 530a 	addw	r3, r3, #3338	@ 0xd0a
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	8b9b      	ldrh	r3, [r3, #28]
 800e7ec:	2b09      	cmp	r3, #9
 800e7ee:	d802      	bhi.n	800e7f6 <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	220a      	movs	r2, #10
 800e7f4:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800e7f6:	7dbb      	ldrb	r3, [r7, #22]
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	211a      	movs	r1, #26
 800e7fc:	fb01 f303 	mul.w	r3, r1, r3
 800e800:	4413      	add	r3, r2
 800e802:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	2b02      	cmp	r3, #2
 800e80a:	bf28      	it	cs
 800e80c:	2302      	movcs	r3, #2
 800e80e:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800e810:	2300      	movs	r3, #0
 800e812:	75fb      	strb	r3, [r7, #23]
 800e814:	e097      	b.n	800e946 <USBH_HID_InterfaceInit+0x2be>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800e816:	7dbb      	ldrb	r3, [r7, #22]
 800e818:	7df9      	ldrb	r1, [r7, #23]
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	3101      	adds	r1, #1
 800e81e:	00c9      	lsls	r1, r1, #3
 800e820:	201a      	movs	r0, #26
 800e822:	fb00 f303 	mul.w	r3, r0, r3
 800e826:	440b      	add	r3, r1
 800e828:	4413      	add	r3, r2
 800e82a:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	b25b      	sxtb	r3, r3
 800e832:	2b00      	cmp	r3, #0
 800e834:	da42      	bge.n	800e8bc <USBH_HID_InterfaceInit+0x234>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800e836:	7dbb      	ldrb	r3, [r7, #22]
 800e838:	7df9      	ldrb	r1, [r7, #23]
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	3101      	adds	r1, #1
 800e83e:	00c9      	lsls	r1, r1, #3
 800e840:	201a      	movs	r0, #26
 800e842:	fb00 f303 	mul.w	r3, r0, r3
 800e846:	440b      	add	r3, r1
 800e848:	4413      	add	r3, r2
 800e84a:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e84e:	781a      	ldrb	r2, [r3, #0]
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	791b      	ldrb	r3, [r3, #4]
 800e858:	4619      	mov	r1, r3
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f002 fc93 	bl	8011186 <USBH_AllocPipe>
 800e860:	4603      	mov	r3, r0
 800e862:	461a      	mov	r2, r3
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800e868:	7dbb      	ldrb	r3, [r7, #22]
 800e86a:	7df9      	ldrb	r1, [r7, #23]
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	3101      	adds	r1, #1
 800e870:	00c9      	lsls	r1, r1, #3
 800e872:	201a      	movs	r0, #26
 800e874:	fb00 f303 	mul.w	r3, r0, r3
 800e878:	440b      	add	r3, r1
 800e87a:	4413      	add	r3, r2
 800e87c:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800e880:	881b      	ldrh	r3, [r3, #0]
 800e882:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	7859      	ldrb	r1, [r3, #1]
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	7918      	ldrb	r0, [r3, #4]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800e898:	89ba      	ldrh	r2, [r7, #12]
 800e89a:	9202      	str	r2, [sp, #8]
 800e89c:	2203      	movs	r2, #3
 800e89e:	9201      	str	r2, [sp, #4]
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	4623      	mov	r3, r4
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f002 fc3e 	bl	8011128 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	785b      	ldrb	r3, [r3, #1]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f002 ff57 	bl	8011768 <USBH_LL_SetToggle>
 800e8ba:	e041      	b.n	800e940 <USBH_HID_InterfaceInit+0x2b8>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800e8bc:	7dbb      	ldrb	r3, [r7, #22]
 800e8be:	7df9      	ldrb	r1, [r7, #23]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	3101      	adds	r1, #1
 800e8c4:	00c9      	lsls	r1, r1, #3
 800e8c6:	201a      	movs	r0, #26
 800e8c8:	fb00 f303 	mul.w	r3, r0, r3
 800e8cc:	440b      	add	r3, r1
 800e8ce:	4413      	add	r3, r2
 800e8d0:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e8d4:	781a      	ldrb	r2, [r3, #0]
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	78db      	ldrb	r3, [r3, #3]
 800e8de:	4619      	mov	r1, r3
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f002 fc50 	bl	8011186 <USBH_AllocPipe>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800e8ee:	7dbb      	ldrb	r3, [r7, #22]
 800e8f0:	7df9      	ldrb	r1, [r7, #23]
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	3101      	adds	r1, #1
 800e8f6:	00c9      	lsls	r1, r1, #3
 800e8f8:	201a      	movs	r0, #26
 800e8fa:	fb00 f303 	mul.w	r3, r0, r3
 800e8fe:	440b      	add	r3, r1
 800e900:	4413      	add	r3, r2
 800e902:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800e906:	881b      	ldrh	r3, [r3, #0]
 800e908:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	7819      	ldrb	r1, [r3, #0]
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	78d8      	ldrb	r0, [r3, #3]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800e91e:	89ba      	ldrh	r2, [r7, #12]
 800e920:	9202      	str	r2, [sp, #8]
 800e922:	2203      	movs	r2, #3
 800e924:	9201      	str	r2, [sp, #4]
 800e926:	9300      	str	r3, [sp, #0]
 800e928:	4623      	mov	r3, r4
 800e92a:	4602      	mov	r2, r0
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f002 fbfb 	bl	8011128 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	2200      	movs	r2, #0
 800e938:	4619      	mov	r1, r3
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f002 ff14 	bl	8011768 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800e940:	7dfb      	ldrb	r3, [r7, #23]
 800e942:	3301      	adds	r3, #1
 800e944:	75fb      	strb	r3, [r7, #23]
 800e946:	7dfa      	ldrb	r2, [r7, #23]
 800e948:	7bfb      	ldrb	r3, [r7, #15]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	f4ff af63 	bcc.w	800e816 <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 800e950:	2300      	movs	r3, #0
}
 800e952:	4618      	mov	r0, r3
 800e954:	371c      	adds	r7, #28
 800e956:	46bd      	mov	sp, r7
 800e958:	bd90      	pop	{r4, r7, pc}
 800e95a:	bf00      	nop
 800e95c:	08012d00 	.word	0x08012d00
 800e960:	08012d0c 	.word	0x08012d0c
 800e964:	08012d34 	.word	0x08012d34
 800e968:	08012d5c 	.word	0x08012d5c
 800e96c:	0800f0b1 	.word	0x0800f0b1
 800e970:	08012d74 	.word	0x08012d74
 800e974:	0800f301 	.word	0x0800f301
 800e978:	08012d88 	.word	0x08012d88

0800e97c <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e98a:	69db      	ldr	r3, [r3, #28]
 800e98c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	785b      	ldrb	r3, [r3, #1]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d00e      	beq.n	800e9b4 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	785b      	ldrb	r3, [r3, #1]
 800e99a:	4619      	mov	r1, r3
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f002 fbe2 	bl	8011166 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	785b      	ldrb	r3, [r3, #1]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f002 fc0e 	bl	80111ca <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00e      	beq.n	800e9da <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f002 fbcf 	bl	8011166 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	781b      	ldrb	r3, [r3, #0]
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f002 fbfb 	bl	80111ca <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e9e0:	69db      	ldr	r3, [r3, #28]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00b      	beq.n	800e9fe <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e9ec:	69db      	ldr	r3, [r3, #28]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f002 ff48 	bl	8011884 <free>
    phost->pActiveClass->pData = 0U;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e9fe:	2300      	movs	r3, #0
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3710      	adds	r7, #16
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800ea10:	2301      	movs	r3, #1
 800ea12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800ea14:	2301      	movs	r3, #1
 800ea16:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ea1e:	69db      	ldr	r3, [r3, #28]
 800ea20:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	795b      	ldrb	r3, [r3, #5]
 800ea26:	2b05      	cmp	r3, #5
 800ea28:	d872      	bhi.n	800eb10 <USBH_HID_ClassRequest+0x108>
 800ea2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ea30 <USBH_HID_ClassRequest+0x28>)
 800ea2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea30:	0800ea49 	.word	0x0800ea49
 800ea34:	0800eb11 	.word	0x0800eb11
 800ea38:	0800ea63 	.word	0x0800ea63
 800ea3c:	0800ea49 	.word	0x0800ea49
 800ea40:	0800ea9f 	.word	0x0800ea9f
 800ea44:	0800eac9 	.word	0x0800eac9
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	331c      	adds	r3, #28
 800ea52:	4619      	mov	r1, r3
 800ea54:	4610      	mov	r0, r2
 800ea56:	f000 fa17 	bl	800ee88 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	2202      	movs	r2, #2
 800ea5e:	715a      	strb	r2, [r3, #5]

      break;
 800ea60:	e05d      	b.n	800eb1e <USBH_HID_ClassRequest+0x116>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ea66:	4619      	mov	r1, r3
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 f965 	bl	800ed38 <USBH_HID_GetHIDReportDescriptor>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800ea72:	7bbb      	ldrb	r3, [r7, #14]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d103      	bne.n	800ea80 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	2204      	movs	r2, #4
 800ea7c:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800ea7e:	e049      	b.n	800eb14 <USBH_HID_ClassRequest+0x10c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800ea80:	7bbb      	ldrb	r3, [r7, #14]
 800ea82:	2b03      	cmp	r3, #3
 800ea84:	d146      	bne.n	800eb14 <USBH_HID_ClassRequest+0x10c>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 800ea86:	4828      	ldr	r0, [pc, #160]	@ (800eb28 <USBH_HID_ClassRequest+0x120>)
 800ea88:	f003 f874 	bl	8011b74 <iprintf>
 800ea8c:	4827      	ldr	r0, [pc, #156]	@ (800eb2c <USBH_HID_ClassRequest+0x124>)
 800ea8e:	f003 f871 	bl	8011b74 <iprintf>
 800ea92:	200a      	movs	r0, #10
 800ea94:	f003 f880 	bl	8011b98 <putchar>
        status = USBH_FAIL;
 800ea98:	2302      	movs	r3, #2
 800ea9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ea9c:	e03a      	b.n	800eb14 <USBH_HID_ClassRequest+0x10c>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	2100      	movs	r1, #0
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f000 f976 	bl	800ed94 <USBH_HID_SetIdle>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800eaac:	7bbb      	ldrb	r3, [r7, #14]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d103      	bne.n	800eaba <USBH_HID_ClassRequest+0xb2>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	2205      	movs	r2, #5
 800eab6:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800eab8:	e02e      	b.n	800eb18 <USBH_HID_ClassRequest+0x110>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800eaba:	7bbb      	ldrb	r3, [r7, #14]
 800eabc:	2b03      	cmp	r3, #3
 800eabe:	d12b      	bne.n	800eb18 <USBH_HID_ClassRequest+0x110>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	2205      	movs	r2, #5
 800eac4:	715a      	strb	r2, [r3, #5]
      break;
 800eac6:	e027      	b.n	800eb18 <USBH_HID_ClassRequest+0x110>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800eac8:	2100      	movs	r1, #0
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f9b6 	bl	800ee3c <USBH_HID_SetProtocol>
 800ead0:	4603      	mov	r3, r0
 800ead2:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800ead4:	7bbb      	ldrb	r3, [r7, #14]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d10b      	bne.n	800eaf2 <USBH_HID_ClassRequest+0xea>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	2201      	movs	r2, #1
 800eade:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800eae6:	2102      	movs	r1, #2
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	4798      	blx	r3
        status = USBH_OK;
 800eaec:	2300      	movs	r3, #0
 800eaee:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800eaf0:	e014      	b.n	800eb1c <USBH_HID_ClassRequest+0x114>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800eaf2:	7bbb      	ldrb	r3, [r7, #14]
 800eaf4:	2b03      	cmp	r3, #3
 800eaf6:	d111      	bne.n	800eb1c <USBH_HID_ClassRequest+0x114>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 800eaf8:	480b      	ldr	r0, [pc, #44]	@ (800eb28 <USBH_HID_ClassRequest+0x120>)
 800eafa:	f003 f83b 	bl	8011b74 <iprintf>
 800eafe:	480c      	ldr	r0, [pc, #48]	@ (800eb30 <USBH_HID_ClassRequest+0x128>)
 800eb00:	f003 f838 	bl	8011b74 <iprintf>
 800eb04:	200a      	movs	r0, #10
 800eb06:	f003 f847 	bl	8011b98 <putchar>
        status = USBH_FAIL;
 800eb0a:	2302      	movs	r3, #2
 800eb0c:	73fb      	strb	r3, [r7, #15]
      break;
 800eb0e:	e005      	b.n	800eb1c <USBH_HID_ClassRequest+0x114>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 800eb10:	bf00      	nop
 800eb12:	e004      	b.n	800eb1e <USBH_HID_ClassRequest+0x116>
      break;
 800eb14:	bf00      	nop
 800eb16:	e002      	b.n	800eb1e <USBH_HID_ClassRequest+0x116>
      break;
 800eb18:	bf00      	nop
 800eb1a:	e000      	b.n	800eb1e <USBH_HID_ClassRequest+0x116>
      break;
 800eb1c:	bf00      	nop
  }

  return status;
 800eb1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3710      	adds	r7, #16
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	08012da0 	.word	0x08012da0
 800eb2c:	08012da8 	.word	0x08012da8
 800eb30:	08012de8 	.word	0x08012de8

0800eb34 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b088      	sub	sp, #32
 800eb38:	af02      	add	r7, sp, #8
 800eb3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800eb46:	69db      	ldr	r3, [r3, #28]
 800eb48:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	789b      	ldrb	r3, [r3, #2]
 800eb4e:	2b06      	cmp	r3, #6
 800eb50:	f200 80c1 	bhi.w	800ecd6 <USBH_HID_Process+0x1a2>
 800eb54:	a201      	add	r2, pc, #4	@ (adr r2, 800eb5c <USBH_HID_Process+0x28>)
 800eb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb5a:	bf00      	nop
 800eb5c:	0800eb79 	.word	0x0800eb79
 800eb60:	0800ebb1 	.word	0x0800ebb1
 800eb64:	0800ecd7 	.word	0x0800ecd7
 800eb68:	0800ecd7 	.word	0x0800ecd7
 800eb6c:	0800ec21 	.word	0x0800ec21
 800eb70:	0800ec0b 	.word	0x0800ec0b
 800eb74:	0800ec4f 	.word	0x0800ec4f
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	4798      	blx	r3
 800eb80:	4603      	mov	r3, r0
 800eb82:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800eb84:	7dfb      	ldrb	r3, [r7, #23]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d103      	bne.n	800eb92 <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800eb90:	e0a6      	b.n	800ece0 <USBH_HID_Process+0x1ac>
        USBH_ErrLog("HID Class Init failed");
 800eb92:	4856      	ldr	r0, [pc, #344]	@ (800ecec <USBH_HID_Process+0x1b8>)
 800eb94:	f002 ffee 	bl	8011b74 <iprintf>
 800eb98:	4855      	ldr	r0, [pc, #340]	@ (800ecf0 <USBH_HID_Process+0x1bc>)
 800eb9a:	f002 ffeb 	bl	8011b74 <iprintf>
 800eb9e:	200a      	movs	r0, #10
 800eba0:	f002 fffa 	bl	8011b98 <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	2207      	movs	r2, #7
 800eba8:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800ebaa:	2302      	movs	r3, #2
 800ebac:	75fb      	strb	r3, [r7, #23]
      break;
 800ebae:	e097      	b.n	800ece0 <USBH_HID_Process+0x1ac>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	695a      	ldr	r2, [r3, #20]
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	8b1b      	ldrh	r3, [r3, #24]
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	9300      	str	r3, [sp, #0]
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	2101      	movs	r1, #1
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 f90e 	bl	800ede4 <USBH_HID_GetReport>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800ebcc:	7dfb      	ldrb	r3, [r7, #23]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d103      	bne.n	800ebda <USBH_HID_Process+0xa6>
      {
        HID_Handle->state = USBH_HID_SYNC;
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	2205      	movs	r2, #5
 800ebd6:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ebd8:	e082      	b.n	800ece0 <USBH_HID_Process+0x1ac>
      else if (status == USBH_BUSY)
 800ebda:	7dfb      	ldrb	r3, [r7, #23]
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d105      	bne.n	800ebec <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_IDLE;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	75fb      	strb	r3, [r7, #23]
      break;
 800ebea:	e079      	b.n	800ece0 <USBH_HID_Process+0x1ac>
      else if (status == USBH_NOT_SUPPORTED)
 800ebec:	7dfb      	ldrb	r3, [r7, #23]
 800ebee:	2b03      	cmp	r3, #3
 800ebf0:	d105      	bne.n	800ebfe <USBH_HID_Process+0xca>
        HID_Handle->state = USBH_HID_SYNC;
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	2205      	movs	r2, #5
 800ebf6:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	75fb      	strb	r3, [r7, #23]
      break;
 800ebfc:	e070      	b.n	800ece0 <USBH_HID_Process+0x1ac>
        HID_Handle->state = USBH_HID_ERROR;
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	2207      	movs	r2, #7
 800ec02:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800ec04:	2302      	movs	r3, #2
 800ec06:	75fb      	strb	r3, [r7, #23]
      break;
 800ec08:	e06a      	b.n	800ece0 <USBH_HID_Process+0x1ac>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800ec10:	f003 0301 	and.w	r3, r3, #1
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d060      	beq.n	800ecda <USBH_HID_Process+0x1a6>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	2204      	movs	r2, #4
 800ec1c:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ec1e:	e05c      	b.n	800ecda <USBH_HID_Process+0x1a6>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800ec28:	b2da      	uxtb	r2, r3
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	785b      	ldrb	r3, [r3, #1]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f002 fa5b 	bl	80110ea <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	2206      	movs	r2, #6
 800ec38:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	2200      	movs	r2, #0
 800ec48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 800ec4c:	e048      	b.n	800ece0 <USBH_HID_Process+0x1ac>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	785b      	ldrb	r3, [r3, #1]
 800ec52:	4619      	mov	r1, r3
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f002 fd5d 	bl	8011714 <USBH_LL_GetURBState>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d124      	bne.n	800ecaa <USBH_HID_Process+0x176>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	785b      	ldrb	r3, [r3, #1]
 800ec64:	4619      	mov	r1, r3
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f002 fcc2 	bl	80115f0 <USBH_LL_GetLastXferSize>
 800ec6c:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d132      	bne.n	800ecde <USBH_HID_Process+0x1aa>
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d02f      	beq.n	800ecde <USBH_HID_Process+0x1aa>
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d02b      	beq.n	800ecde <USBH_HID_Process+0x1aa>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	f103 0008 	add.w	r0, r3, #8
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	6959      	ldr	r1, [r3, #20]
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	8b1b      	ldrh	r3, [r3, #24]
 800ec94:	461a      	mov	r2, r3
 800ec96:	f000 f9b7 	bl	800f008 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f7f1 fc74 	bl	8000590 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 800eca8:	e019      	b.n	800ecde <USBH_HID_Process+0x1aa>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	785b      	ldrb	r3, [r3, #1]
 800ecae:	4619      	mov	r1, r3
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f002 fd2f 	bl	8011714 <USBH_LL_GetURBState>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b05      	cmp	r3, #5
 800ecba:	d110      	bne.n	800ecde <USBH_HID_Process+0x1aa>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	7e9b      	ldrb	r3, [r3, #26]
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f001 fcbe 	bl	8010644 <USBH_ClrFeature>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d107      	bne.n	800ecde <USBH_HID_Process+0x1aa>
            HID_Handle->state = USBH_HID_GET_DATA;
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	2204      	movs	r2, #4
 800ecd2:	709a      	strb	r2, [r3, #2]
      break;
 800ecd4:	e003      	b.n	800ecde <USBH_HID_Process+0x1aa>

    default:
      break;
 800ecd6:	bf00      	nop
 800ecd8:	e002      	b.n	800ece0 <USBH_HID_Process+0x1ac>
      break;
 800ecda:	bf00      	nop
 800ecdc:	e000      	b.n	800ece0 <USBH_HID_Process+0x1ac>
      break;
 800ecde:	bf00      	nop
  }

  return status;
 800ece0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3718      	adds	r7, #24
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	08012da0 	.word	0x08012da0
 800ecf0:	08012e20 	.word	0x08012e20

0800ecf4 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ed02:	69db      	ldr	r3, [r3, #28]
 800ed04:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	789b      	ldrb	r3, [r3, #2]
 800ed0a:	2b06      	cmp	r3, #6
 800ed0c:	d10c      	bne.n	800ed28 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	6a1b      	ldr	r3, [r3, #32]
 800ed18:	1ad3      	subs	r3, r2, r3
 800ed1a:	68fa      	ldr	r2, [r7, #12]
 800ed1c:	8b92      	ldrh	r2, [r2, #28]
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d302      	bcc.n	800ed28 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2204      	movs	r2, #4
 800ed26:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800ed28:	2300      	movs	r3, #0
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3714      	adds	r7, #20
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed34:	4770      	bx	lr
	...

0800ed38 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b086      	sub	sp, #24
 800ed3c:	af02      	add	r7, sp, #8
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	460b      	mov	r3, r1
 800ed42:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800ed44:	887b      	ldrh	r3, [r7, #2]
 800ed46:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d90a      	bls.n	800ed64 <USBH_HID_GetHIDReportDescriptor+0x2c>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 800ed4e:	480f      	ldr	r0, [pc, #60]	@ (800ed8c <USBH_HID_GetHIDReportDescriptor+0x54>)
 800ed50:	f002 ff10 	bl	8011b74 <iprintf>
 800ed54:	480e      	ldr	r0, [pc, #56]	@ (800ed90 <USBH_HID_GetHIDReportDescriptor+0x58>)
 800ed56:	f002 ff0d 	bl	8011b74 <iprintf>
 800ed5a:	200a      	movs	r0, #10
 800ed5c:	f002 ff1c 	bl	8011b98 <putchar>
    return USBH_NOT_SUPPORTED;
 800ed60:	2303      	movs	r3, #3
 800ed62:	e00e      	b.n	800ed82 <USBH_HID_GetHIDReportDescriptor+0x4a>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ed6a:	887b      	ldrh	r3, [r7, #2]
 800ed6c:	9300      	str	r3, [sp, #0]
 800ed6e:	4613      	mov	r3, r2
 800ed70:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800ed74:	2101      	movs	r1, #1
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f001 fbc4 	bl	8010504 <USBH_GetDescriptor>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800ed80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3710      	adds	r7, #16
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	08012da0 	.word	0x08012da0
 800ed90:	08012e38 	.word	0x08012e38

0800ed94 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b082      	sub	sp, #8
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	70fb      	strb	r3, [r7, #3]
 800eda0:	4613      	mov	r3, r2
 800eda2:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2221      	movs	r2, #33	@ 0x21
 800eda8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	220a      	movs	r2, #10
 800edae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800edb0:	78fb      	ldrb	r3, [r7, #3]
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	021b      	lsls	r3, r3, #8
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	78bb      	ldrb	r3, [r7, #2]
 800edba:	b29b      	uxth	r3, r3
 800edbc:	4313      	orrs	r3, r2
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800edd0:	2200      	movs	r2, #0
 800edd2:	2100      	movs	r1, #0
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f001 ff6b 	bl	8010cb0 <USBH_CtlReq>
 800edda:	4603      	mov	r3, r0
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3708      	adds	r7, #8
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}

0800ede4 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	60f8      	str	r0, [r7, #12]
 800edec:	607b      	str	r3, [r7, #4]
 800edee:	460b      	mov	r3, r1
 800edf0:	72fb      	strb	r3, [r7, #11]
 800edf2:	4613      	mov	r3, r2
 800edf4:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	22a1      	movs	r2, #161	@ 0xa1
 800edfa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2201      	movs	r2, #1
 800ee00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800ee02:	7afb      	ldrb	r3, [r7, #11]
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	021b      	lsls	r3, r3, #8
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	7abb      	ldrb	r3, [r7, #10]
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	4313      	orrs	r3, r2
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800ee1c:	7e3b      	ldrb	r3, [r7, #24]
 800ee1e:	b29a      	uxth	r2, r3
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800ee24:	7e3b      	ldrb	r3, [r7, #24]
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	461a      	mov	r2, r3
 800ee2a:	6879      	ldr	r1, [r7, #4]
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f001 ff3f 	bl	8010cb0 <USBH_CtlReq>
 800ee32:	4603      	mov	r3, r0
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3710      	adds	r7, #16
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	460b      	mov	r3, r1
 800ee46:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2221      	movs	r2, #33	@ 0x21
 800ee4c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	220b      	movs	r2, #11
 800ee52:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800ee54:	78fb      	ldrb	r3, [r7, #3]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d003      	beq.n	800ee62 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	825a      	strh	r2, [r3, #18]
 800ee60:	e002      	b.n	800ee68 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2201      	movs	r2, #1
 800ee66:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2200      	movs	r2, #0
 800ee72:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800ee74:	2200      	movs	r2, #0
 800ee76:	2100      	movs	r1, #0
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f001 ff19 	bl	8010cb0 <USBH_CtlReq>
 800ee7e:	4603      	mov	r3, r0

}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	3302      	adds	r3, #2
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	3303      	adds	r3, #3
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	021b      	lsls	r3, r3, #8
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	4313      	orrs	r3, r2
 800eeaa:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800eeac:	897b      	ldrh	r3, [r7, #10]
 800eeae:	2b09      	cmp	r3, #9
 800eeb0:	d941      	bls.n	800ef36 <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 800eeb2:	2309      	movs	r3, #9
 800eeb4:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800eeb6:	e03a      	b.n	800ef2e <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800eeb8:	f107 0308 	add.w	r3, r7, #8
 800eebc:	4619      	mov	r1, r3
 800eebe:	68f8      	ldr	r0, [r7, #12]
 800eec0:	f001 fedc 	bl	8010c7c <USBH_GetNextDesc>
 800eec4:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	785b      	ldrb	r3, [r3, #1]
 800eeca:	2b21      	cmp	r3, #33	@ 0x21
 800eecc:	d12f      	bne.n	800ef2e <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	781a      	ldrb	r2, [r3, #0]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	785a      	ldrb	r2, [r3, #1]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	3302      	adds	r3, #2
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	461a      	mov	r2, r3
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	3303      	adds	r3, #3
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	021b      	lsls	r3, r3, #8
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	4313      	orrs	r3, r2
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	791a      	ldrb	r2, [r3, #4]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	795a      	ldrb	r2, [r3, #5]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	799a      	ldrb	r2, [r3, #6]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	3307      	adds	r3, #7
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	461a      	mov	r2, r3
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	3308      	adds	r3, #8
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	021b      	lsls	r3, r3, #8
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	4313      	orrs	r3, r2
 800ef24:	b29a      	uxth	r2, r3
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	811a      	strh	r2, [r3, #8]
        break;
 800ef2a:	bf00      	nop
      }
    }
  }
}
 800ef2c:	e003      	b.n	800ef36 <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800ef2e:	893b      	ldrh	r3, [r7, #8]
 800ef30:	897a      	ldrh	r2, [r7, #10]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d8c0      	bhi.n	800eeb8 <USBH_HID_ParseHIDDesc+0x30>
}
 800ef36:	bf00      	nop
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800ef3e:	b480      	push	{r7}
 800ef40:	b085      	sub	sp, #20
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	60f8      	str	r0, [r7, #12]
 800ef46:	60b9      	str	r1, [r7, #8]
 800ef48:	4613      	mov	r3, r2
 800ef4a:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2200      	movs	r2, #0
 800ef56:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	88fa      	ldrh	r2, [r7, #6]
 800ef62:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	68ba      	ldr	r2, [r7, #8]
 800ef68:	601a      	str	r2, [r3, #0]
}
 800ef6a:	bf00      	nop
 800ef6c:	3714      	adds	r7, #20
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef74:	4770      	bx	lr

0800ef76 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800ef76:	b480      	push	{r7}
 800ef78:	b087      	sub	sp, #28
 800ef7a:	af00      	add	r7, sp, #0
 800ef7c:	60f8      	str	r0, [r7, #12]
 800ef7e:	60b9      	str	r1, [r7, #8]
 800ef80:	4613      	mov	r3, r2
 800ef82:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	7a9b      	ldrb	r3, [r3, #10]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d131      	bne.n	800eff4 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2201      	movs	r2, #1
 800ef94:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800ef96:	2300      	movs	r3, #0
 800ef98:	82fb      	strh	r3, [r7, #22]
 800ef9a:	e027      	b.n	800efec <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	88da      	ldrh	r2, [r3, #6]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	889b      	ldrh	r3, [r3, #4]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d019      	beq.n	800efdc <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	68fa      	ldr	r2, [r7, #12]
 800efae:	88d2      	ldrh	r2, [r2, #6]
 800efb0:	441a      	add	r2, r3
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	1c59      	adds	r1, r3, #1
 800efb6:	6139      	str	r1, [r7, #16]
 800efb8:	7812      	ldrb	r2, [r2, #0]
 800efba:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	88db      	ldrh	r3, [r3, #6]
 800efc0:	3301      	adds	r3, #1
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	88da      	ldrh	r2, [r3, #6]
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	891b      	ldrh	r3, [r3, #8]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d108      	bne.n	800efe6 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	80da      	strh	r2, [r3, #6]
 800efda:	e004      	b.n	800efe6 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2200      	movs	r2, #0
 800efe0:	729a      	strb	r2, [r3, #10]
        return i;
 800efe2:	8afb      	ldrh	r3, [r7, #22]
 800efe4:	e00a      	b.n	800effc <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800efe6:	8afb      	ldrh	r3, [r7, #22]
 800efe8:	3301      	adds	r3, #1
 800efea:	82fb      	strh	r3, [r7, #22]
 800efec:	8afa      	ldrh	r2, [r7, #22]
 800efee:	88fb      	ldrh	r3, [r7, #6]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d3d3      	bcc.n	800ef9c <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	2200      	movs	r2, #0
 800eff8:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800effa:	88fb      	ldrh	r3, [r7, #6]
}
 800effc:	4618      	mov	r0, r3
 800effe:	371c      	adds	r7, #28
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800f008:	b480      	push	{r7}
 800f00a:	b087      	sub	sp, #28
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	4613      	mov	r3, r2
 800f014:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	7a9b      	ldrb	r3, [r3, #10]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d13c      	bne.n	800f09c <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2201      	movs	r2, #1
 800f026:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800f028:	2300      	movs	r3, #0
 800f02a:	82fb      	strh	r3, [r7, #22]
 800f02c:	e032      	b.n	800f094 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	889b      	ldrh	r3, [r3, #4]
 800f032:	3301      	adds	r3, #1
 800f034:	68fa      	ldr	r2, [r7, #12]
 800f036:	88d2      	ldrh	r2, [r2, #6]
 800f038:	4293      	cmp	r3, r2
 800f03a:	d00a      	beq.n	800f052 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	889b      	ldrh	r3, [r3, #4]
 800f040:	3301      	adds	r3, #1
 800f042:	68fa      	ldr	r2, [r7, #12]
 800f044:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800f046:	4293      	cmp	r3, r2
 800f048:	d108      	bne.n	800f05c <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	88db      	ldrh	r3, [r3, #6]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d104      	bne.n	800f05c <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2200      	movs	r2, #0
 800f056:	729a      	strb	r2, [r3, #10]
        return i;
 800f058:	8afb      	ldrh	r3, [r7, #22]
 800f05a:	e023      	b.n	800f0a4 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	1c5a      	adds	r2, r3, #1
 800f060:	613a      	str	r2, [r7, #16]
 800f062:	68fa      	ldr	r2, [r7, #12]
 800f064:	6812      	ldr	r2, [r2, #0]
 800f066:	68f9      	ldr	r1, [r7, #12]
 800f068:	8889      	ldrh	r1, [r1, #4]
 800f06a:	440a      	add	r2, r1
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	7013      	strb	r3, [r2, #0]
        f->head++;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	889b      	ldrh	r3, [r3, #4]
 800f074:	3301      	adds	r3, #1
 800f076:	b29a      	uxth	r2, r3
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	889a      	ldrh	r2, [r3, #4]
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	891b      	ldrh	r3, [r3, #8]
 800f084:	429a      	cmp	r2, r3
 800f086:	d102      	bne.n	800f08e <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	2200      	movs	r2, #0
 800f08c:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800f08e:	8afb      	ldrh	r3, [r7, #22]
 800f090:	3301      	adds	r3, #1
 800f092:	82fb      	strh	r3, [r7, #22]
 800f094:	8afa      	ldrh	r2, [r7, #22]
 800f096:	88fb      	ldrh	r3, [r7, #6]
 800f098:	429a      	cmp	r2, r3
 800f09a:	d3c8      	bcc.n	800f02e <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800f0a2:	88fb      	ldrh	r3, [r7, #6]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	371c      	adds	r7, #28
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b084      	sub	sp, #16
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f0be:	69db      	ldr	r3, [r3, #28]
 800f0c0:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800f0c2:	4b22      	ldr	r3, [pc, #136]	@ (800f14c <USBH_HID_KeybdInit+0x9c>)
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800f0c8:	4b20      	ldr	r3, [pc, #128]	@ (800f14c <USBH_HID_KeybdInit+0x9c>)
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800f0ce:	4b1f      	ldr	r3, [pc, #124]	@ (800f14c <USBH_HID_KeybdInit+0x9c>)
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800f0d4:	4b1d      	ldr	r3, [pc, #116]	@ (800f14c <USBH_HID_KeybdInit+0x9c>)
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800f0da:	4b1c      	ldr	r3, [pc, #112]	@ (800f14c <USBH_HID_KeybdInit+0x9c>)
 800f0dc:	2200      	movs	r2, #0
 800f0de:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800f0e0:	4b1a      	ldr	r3, [pc, #104]	@ (800f14c <USBH_HID_KeybdInit+0x9c>)
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800f0e6:	4b19      	ldr	r3, [pc, #100]	@ (800f14c <USBH_HID_KeybdInit+0x9c>)
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800f0ec:	4b17      	ldr	r3, [pc, #92]	@ (800f14c <USBH_HID_KeybdInit+0x9c>)
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	60fb      	str	r3, [r7, #12]
 800f0f6:	e00c      	b.n	800f112 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800f0f8:	4a15      	ldr	r2, [pc, #84]	@ (800f150 <USBH_HID_KeybdInit+0xa0>)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	2200      	movs	r2, #0
 800f100:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 800f102:	4a14      	ldr	r2, [pc, #80]	@ (800f154 <USBH_HID_KeybdInit+0xa4>)
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	4413      	add	r3, r2
 800f108:	2200      	movs	r2, #0
 800f10a:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	3301      	adds	r3, #1
 800f110:	60fb      	str	r3, [r7, #12]
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	2b07      	cmp	r3, #7
 800f116:	d9ef      	bls.n	800f0f8 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	8b1b      	ldrh	r3, [r3, #24]
 800f11c:	2b08      	cmp	r3, #8
 800f11e:	d902      	bls.n	800f126 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	2208      	movs	r2, #8
 800f124:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	4a0a      	ldr	r2, [pc, #40]	@ (800f154 <USBH_HID_KeybdInit+0xa4>)
 800f12a:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	f103 0008 	add.w	r0, r3, #8
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f138:	2250      	movs	r2, #80	@ 0x50
 800f13a:	4619      	mov	r1, r3
 800f13c:	f7ff feff 	bl	800ef3e <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	3710      	adds	r7, #16
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	200092cc 	.word	0x200092cc
 800f150:	200092e4 	.word	0x200092e4
 800f154:	200092dc 	.word	0x200092dc

0800f158 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 f80d 	bl	800f180 <USBH_HID_KeybdDecode>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d101      	bne.n	800f170 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800f16c:	4b03      	ldr	r3, [pc, #12]	@ (800f17c <USBH_HID_GetKeybdInfo+0x24>)
 800f16e:	e000      	b.n	800f172 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800f170:	2300      	movs	r3, #0
  }
}
 800f172:	4618      	mov	r0, r3
 800f174:	3708      	adds	r7, #8
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	200092cc 	.word	0x200092cc

0800f180 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f18e:	69db      	ldr	r3, [r3, #28]
 800f190:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	8b1b      	ldrh	r3, [r3, #24]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d003      	beq.n	800f1a2 <USBH_HID_KeybdDecode+0x22>
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	689b      	ldr	r3, [r3, #8]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d101      	bne.n	800f1a6 <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 800f1a2:	2302      	movs	r3, #2
 800f1a4:	e066      	b.n	800f274 <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	f103 0008 	add.w	r0, r3, #8
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	8b1b      	ldrh	r3, [r3, #24]
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	4932      	ldr	r1, [pc, #200]	@ (800f27c <USBH_HID_KeybdDecode+0xfc>)
 800f1b4:	f7ff fedf 	bl	800ef76 <USBH_HID_FifoRead>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	8b1b      	ldrh	r3, [r3, #24]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d156      	bne.n	800f272 <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800f1c4:	2100      	movs	r1, #0
 800f1c6:	482e      	ldr	r0, [pc, #184]	@ (800f280 <USBH_HID_KeybdDecode+0x100>)
 800f1c8:	f000 f8e4 	bl	800f394 <HID_ReadItem>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	b2da      	uxtb	r2, r3
 800f1d0:	4b2c      	ldr	r3, [pc, #176]	@ (800f284 <USBH_HID_KeybdDecode+0x104>)
 800f1d2:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	482c      	ldr	r0, [pc, #176]	@ (800f288 <USBH_HID_KeybdDecode+0x108>)
 800f1d8:	f000 f8dc 	bl	800f394 <HID_ReadItem>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	b2da      	uxtb	r2, r3
 800f1e0:	4b28      	ldr	r3, [pc, #160]	@ (800f284 <USBH_HID_KeybdDecode+0x104>)
 800f1e2:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	4829      	ldr	r0, [pc, #164]	@ (800f28c <USBH_HID_KeybdDecode+0x10c>)
 800f1e8:	f000 f8d4 	bl	800f394 <HID_ReadItem>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	b2da      	uxtb	r2, r3
 800f1f0:	4b24      	ldr	r3, [pc, #144]	@ (800f284 <USBH_HID_KeybdDecode+0x104>)
 800f1f2:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800f1f4:	2100      	movs	r1, #0
 800f1f6:	4826      	ldr	r0, [pc, #152]	@ (800f290 <USBH_HID_KeybdDecode+0x110>)
 800f1f8:	f000 f8cc 	bl	800f394 <HID_ReadItem>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	b2da      	uxtb	r2, r3
 800f200:	4b20      	ldr	r3, [pc, #128]	@ (800f284 <USBH_HID_KeybdDecode+0x104>)
 800f202:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800f204:	2100      	movs	r1, #0
 800f206:	4823      	ldr	r0, [pc, #140]	@ (800f294 <USBH_HID_KeybdDecode+0x114>)
 800f208:	f000 f8c4 	bl	800f394 <HID_ReadItem>
 800f20c:	4603      	mov	r3, r0
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	4b1c      	ldr	r3, [pc, #112]	@ (800f284 <USBH_HID_KeybdDecode+0x104>)
 800f212:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800f214:	2100      	movs	r1, #0
 800f216:	4820      	ldr	r0, [pc, #128]	@ (800f298 <USBH_HID_KeybdDecode+0x118>)
 800f218:	f000 f8bc 	bl	800f394 <HID_ReadItem>
 800f21c:	4603      	mov	r3, r0
 800f21e:	b2da      	uxtb	r2, r3
 800f220:	4b18      	ldr	r3, [pc, #96]	@ (800f284 <USBH_HID_KeybdDecode+0x104>)
 800f222:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800f224:	2100      	movs	r1, #0
 800f226:	481d      	ldr	r0, [pc, #116]	@ (800f29c <USBH_HID_KeybdDecode+0x11c>)
 800f228:	f000 f8b4 	bl	800f394 <HID_ReadItem>
 800f22c:	4603      	mov	r3, r0
 800f22e:	b2da      	uxtb	r2, r3
 800f230:	4b14      	ldr	r3, [pc, #80]	@ (800f284 <USBH_HID_KeybdDecode+0x104>)
 800f232:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800f234:	2100      	movs	r1, #0
 800f236:	481a      	ldr	r0, [pc, #104]	@ (800f2a0 <USBH_HID_KeybdDecode+0x120>)
 800f238:	f000 f8ac 	bl	800f394 <HID_ReadItem>
 800f23c:	4603      	mov	r3, r0
 800f23e:	b2da      	uxtb	r2, r3
 800f240:	4b10      	ldr	r3, [pc, #64]	@ (800f284 <USBH_HID_KeybdDecode+0x104>)
 800f242:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800f244:	2300      	movs	r3, #0
 800f246:	73fb      	strb	r3, [r7, #15]
 800f248:	e00e      	b.n	800f268 <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800f24a:	7bfb      	ldrb	r3, [r7, #15]
 800f24c:	4619      	mov	r1, r3
 800f24e:	4815      	ldr	r0, [pc, #84]	@ (800f2a4 <USBH_HID_KeybdDecode+0x124>)
 800f250:	f000 f8a0 	bl	800f394 <HID_ReadItem>
 800f254:	4602      	mov	r2, r0
 800f256:	7bfb      	ldrb	r3, [r7, #15]
 800f258:	b2d1      	uxtb	r1, r2
 800f25a:	4a0a      	ldr	r2, [pc, #40]	@ (800f284 <USBH_HID_KeybdDecode+0x104>)
 800f25c:	4413      	add	r3, r2
 800f25e:	460a      	mov	r2, r1
 800f260:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800f262:	7bfb      	ldrb	r3, [r7, #15]
 800f264:	3301      	adds	r3, #1
 800f266:	73fb      	strb	r3, [r7, #15]
 800f268:	7bfb      	ldrb	r3, [r7, #15]
 800f26a:	2b05      	cmp	r3, #5
 800f26c:	d9ed      	bls.n	800f24a <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800f26e:	2300      	movs	r3, #0
 800f270:	e000      	b.n	800f274 <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 800f272:	2302      	movs	r3, #2
}
 800f274:	4618      	mov	r0, r3
 800f276:	3710      	adds	r7, #16
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}
 800f27c:	200092e4 	.word	0x200092e4
 800f280:	080169b8 	.word	0x080169b8
 800f284:	200092cc 	.word	0x200092cc
 800f288:	080169d8 	.word	0x080169d8
 800f28c:	080169f8 	.word	0x080169f8
 800f290:	08016a18 	.word	0x08016a18
 800f294:	08016a38 	.word	0x08016a38
 800f298:	08016a58 	.word	0x08016a58
 800f29c:	08016a78 	.word	0x08016a78
 800f2a0:	08016a98 	.word	0x08016a98
 800f2a4:	08016ab8 	.word	0x08016ab8

0800f2a8 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	789b      	ldrb	r3, [r3, #2]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d103      	bne.n	800f2c0 <USBH_HID_GetASCIICode+0x18>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	799b      	ldrb	r3, [r3, #6]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d009      	beq.n	800f2d4 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	7a5b      	ldrb	r3, [r3, #9]
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	4b0b      	ldr	r3, [pc, #44]	@ (800f2f4 <USBH_HID_GetASCIICode+0x4c>)
 800f2c8:	5c9b      	ldrb	r3, [r3, r2]
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800f2f8 <USBH_HID_GetASCIICode+0x50>)
 800f2ce:	5c9b      	ldrb	r3, [r3, r2]
 800f2d0:	73fb      	strb	r3, [r7, #15]
 800f2d2:	e008      	b.n	800f2e6 <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	7a5b      	ldrb	r3, [r3, #9]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	4b06      	ldr	r3, [pc, #24]	@ (800f2f4 <USBH_HID_GetASCIICode+0x4c>)
 800f2dc:	5c9b      	ldrb	r3, [r3, r2]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	4b06      	ldr	r3, [pc, #24]	@ (800f2fc <USBH_HID_GetASCIICode+0x54>)
 800f2e2:	5c9b      	ldrb	r3, [r3, r2]
 800f2e4:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800f2e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3714      	adds	r7, #20
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr
 800f2f4:	08016be0 	.word	0x08016be0
 800f2f8:	08016b5c 	.word	0x08016b5c
 800f2fc:	08016ad8 	.word	0x08016ad8

0800f300 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f30e:	69db      	ldr	r3, [r3, #28]
 800f310:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800f312:	4b1d      	ldr	r3, [pc, #116]	@ (800f388 <USBH_HID_MouseInit+0x88>)
 800f314:	2200      	movs	r2, #0
 800f316:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800f318:	4b1b      	ldr	r3, [pc, #108]	@ (800f388 <USBH_HID_MouseInit+0x88>)
 800f31a:	2200      	movs	r2, #0
 800f31c:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800f31e:	4b1a      	ldr	r3, [pc, #104]	@ (800f388 <USBH_HID_MouseInit+0x88>)
 800f320:	2200      	movs	r2, #0
 800f322:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800f324:	4b18      	ldr	r3, [pc, #96]	@ (800f388 <USBH_HID_MouseInit+0x88>)
 800f326:	2200      	movs	r2, #0
 800f328:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800f32a:	4b17      	ldr	r3, [pc, #92]	@ (800f388 <USBH_HID_MouseInit+0x88>)
 800f32c:	2200      	movs	r2, #0
 800f32e:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800f330:	2300      	movs	r3, #0
 800f332:	60fb      	str	r3, [r7, #12]
 800f334:	e00c      	b.n	800f350 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800f336:	4a15      	ldr	r2, [pc, #84]	@ (800f38c <USBH_HID_MouseInit+0x8c>)
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	4413      	add	r3, r2
 800f33c:	2200      	movs	r2, #0
 800f33e:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800f340:	4a13      	ldr	r2, [pc, #76]	@ (800f390 <USBH_HID_MouseInit+0x90>)
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	4413      	add	r3, r2
 800f346:	2200      	movs	r2, #0
 800f348:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	3301      	adds	r3, #1
 800f34e:	60fb      	str	r3, [r7, #12]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2b07      	cmp	r3, #7
 800f354:	d9ef      	bls.n	800f336 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	8b1b      	ldrh	r3, [r3, #24]
 800f35a:	2b08      	cmp	r3, #8
 800f35c:	d902      	bls.n	800f364 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	2208      	movs	r2, #8
 800f362:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	4a0a      	ldr	r2, [pc, #40]	@ (800f390 <USBH_HID_MouseInit+0x90>)
 800f368:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	f103 0008 	add.w	r0, r3, #8
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f376:	2250      	movs	r2, #80	@ 0x50
 800f378:	4619      	mov	r1, r3
 800f37a:	f7ff fde0 	bl	800ef3e <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800f37e:	2300      	movs	r3, #0
}
 800f380:	4618      	mov	r0, r3
 800f382:	3710      	adds	r7, #16
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	200092ec 	.word	0x200092ec
 800f38c:	200092f4 	.word	0x200092f4
 800f390:	200092fc 	.word	0x200092fc

0800f394 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800f394:	b480      	push	{r7}
 800f396:	b089      	sub	sp, #36	@ 0x24
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	460b      	mov	r3, r1
 800f39e:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	7a1b      	ldrb	r3, [r3, #8]
 800f3b2:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	7a5b      	ldrb	r3, [r3, #9]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d01a      	beq.n	800f3f2 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	7a5b      	ldrb	r3, [r3, #9]
 800f3c0:	78fa      	ldrb	r2, [r7, #3]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d301      	bcc.n	800f3ca <HID_ReadItem+0x36>
    {
      return (0U);
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	e078      	b.n	800f4bc <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800f3ca:	78fb      	ldrb	r3, [r7, #3]
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	6852      	ldr	r2, [r2, #4]
 800f3d0:	fb02 f303 	mul.w	r3, r2, r3
 800f3d4:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800f3d6:	7cfb      	ldrb	r3, [r7, #19]
 800f3d8:	68fa      	ldr	r2, [r7, #12]
 800f3da:	4413      	add	r3, r2
 800f3dc:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	08db      	lsrs	r3, r3, #3
 800f3e2:	697a      	ldr	r2, [r7, #20]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	b2db      	uxtb	r3, r3
 800f3ec:	f003 0307 	and.w	r3, r3, #7
 800f3f0:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	61bb      	str	r3, [r7, #24]
 800f3f6:	e00a      	b.n	800f40e <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	00db      	lsls	r3, r3, #3
 800f402:	fa02 f303 	lsl.w	r3, r2, r3
 800f406:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800f408:	69bb      	ldr	r3, [r7, #24]
 800f40a:	3301      	adds	r3, #1
 800f40c:	61bb      	str	r3, [r7, #24]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	f003 0307 	and.w	r3, r3, #7
 800f416:	2b00      	cmp	r3, #0
 800f418:	d004      	beq.n	800f424 <HID_ReadItem+0x90>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	08db      	lsrs	r3, r3, #3
 800f420:	3301      	adds	r3, #1
 800f422:	e002      	b.n	800f42a <HID_ReadItem+0x96>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	08db      	lsrs	r3, r3, #3
 800f42a:	69ba      	ldr	r2, [r7, #24]
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d8e3      	bhi.n	800f3f8 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800f430:	7cfb      	ldrb	r3, [r7, #19]
 800f432:	69fa      	ldr	r2, [r7, #28]
 800f434:	40da      	lsrs	r2, r3
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	f04f 31ff 	mov.w	r1, #4294967295
 800f43e:	fa01 f303 	lsl.w	r3, r1, r3
 800f442:	43db      	mvns	r3, r3
 800f444:	4013      	ands	r3, r2
 800f446:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	69fa      	ldr	r2, [r7, #28]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d304      	bcc.n	800f45c <HID_ReadItem+0xc8>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	691b      	ldr	r3, [r3, #16]
 800f456:	69fa      	ldr	r2, [r7, #28]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d901      	bls.n	800f460 <HID_ReadItem+0xcc>
  {
    return (0U);
 800f45c:	2300      	movs	r3, #0
 800f45e:	e02d      	b.n	800f4bc <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	7a9b      	ldrb	r3, [r3, #10]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d01e      	beq.n	800f4a6 <HID_ReadItem+0x112>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	3b01      	subs	r3, #1
 800f46e:	69fa      	ldr	r2, [r7, #28]
 800f470:	fa22 f303 	lsr.w	r3, r2, r3
 800f474:	f003 0301 	and.w	r3, r3, #1
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d014      	beq.n	800f4a6 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	2201      	movs	r2, #1
 800f482:	fa02 f303 	lsl.w	r3, r2, r3
 800f486:	425b      	negs	r3, r3
 800f488:	69fa      	ldr	r2, [r7, #28]
 800f48a:	4313      	orrs	r3, r2
 800f48c:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	69db      	ldr	r3, [r3, #28]
 800f492:	2b01      	cmp	r3, #1
 800f494:	d101      	bne.n	800f49a <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	e010      	b.n	800f4bc <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	69db      	ldr	r3, [r3, #28]
 800f49e:	68ba      	ldr	r2, [r7, #8]
 800f4a0:	fb02 f303 	mul.w	r3, r2, r3
 800f4a4:	e00a      	b.n	800f4bc <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	69db      	ldr	r3, [r3, #28]
 800f4aa:	2b01      	cmp	r3, #1
 800f4ac:	d101      	bne.n	800f4b2 <HID_ReadItem+0x11e>
    {
      return (val);
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	e004      	b.n	800f4bc <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	69db      	ldr	r3, [r3, #28]
 800f4b6:	69fa      	ldr	r2, [r7, #28]
 800f4b8:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3724      	adds	r7, #36	@ 0x24
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	4613      	mov	r3, r2
 800f4d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d10a      	bne.n	800f4f2 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800f4dc:	481c      	ldr	r0, [pc, #112]	@ (800f550 <USBH_Init+0x88>)
 800f4de:	f002 fb49 	bl	8011b74 <iprintf>
 800f4e2:	481c      	ldr	r0, [pc, #112]	@ (800f554 <USBH_Init+0x8c>)
 800f4e4:	f002 fb46 	bl	8011b74 <iprintf>
 800f4e8:	200a      	movs	r0, #10
 800f4ea:	f002 fb55 	bl	8011b98 <putchar>
    return USBH_FAIL;
 800f4ee:	2302      	movs	r3, #2
 800f4f0:	e029      	b.n	800f546 <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	79fa      	ldrb	r2, [r7, #7]
 800f4f6:	f883 2d84 	strb.w	r2, [r3, #3460]	@ 0xd84

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
  phost->ClassNumber = 0U;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	2200      	movs	r2, #0
 800f506:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800f50a:	68f8      	ldr	r0, [r7, #12]
 800f50c:	f000 f824 	bl	800f558 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	2200      	movs	r2, #0
 800f514:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
  phost->device.is_connected = 0U;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2200      	movs	r2, #0
 800f51c:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2200      	movs	r2, #0
 800f524:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2200      	movs	r2, #0
 800f52c:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d003      	beq.n	800f53e <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	f8c3 2d8c 	str.w	r2, [r3, #3468]	@ 0xd8c

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800f53e:	68f8      	ldr	r0, [r7, #12]
 800f540:	f001 ff98 	bl	8011474 <USBH_LL_Init>

  return USBH_OK;
 800f544:	2300      	movs	r3, #0
}
 800f546:	4618      	mov	r0, r3
 800f548:	3710      	adds	r7, #16
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	08012ec4 	.word	0x08012ec4
 800f554:	08012ecc 	.word	0x08012ecc

0800f558 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f560:	2300      	movs	r3, #0
 800f562:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f564:	2300      	movs	r3, #0
 800f566:	60fb      	str	r3, [r7, #12]
 800f568:	e00a      	b.n	800f580 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800f56a:	687a      	ldr	r2, [r7, #4]
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f572:	009b      	lsls	r3, r3, #2
 800f574:	4413      	add	r3, r2
 800f576:	2200      	movs	r2, #0
 800f578:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	3301      	adds	r3, #1
 800f57e:	60fb      	str	r3, [r7, #12]
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2b0f      	cmp	r3, #15
 800f584:	d9f1      	bls.n	800f56a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f586:	2300      	movs	r3, #0
 800f588:	60fb      	str	r3, [r7, #12]
 800f58a:	e009      	b.n	800f5a0 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	4413      	add	r3, r2
 800f592:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f596:	2200      	movs	r2, #0
 800f598:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	3301      	adds	r3, #1
 800f59e:	60fb      	str	r3, [r7, #12]
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d9f0      	bls.n	800f58c <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c

  phost->Control.state = CTRL_SETUP;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2201      	movs	r2, #1
 800f5c8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2240      	movs	r2, #64	@ 0x40
 800f5ce:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5
  phost->device.RstCnt = 0U;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
  phost->device.EnumCnt = 0U;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	331c      	adds	r3, #28
 800f5fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f5fe:	2100      	movs	r1, #0
 800f600:	4618      	mov	r0, r3
 800f602:	f002 fc27 	bl	8011e54 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f60c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f610:	2100      	movs	r1, #0
 800f612:	4618      	mov	r0, r3
 800f614:	f002 fc1e 	bl	8011e54 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 800f61e:	2212      	movs	r2, #18
 800f620:	2100      	movs	r1, #0
 800f622:	4618      	mov	r0, r3
 800f624:	f002 fc16 	bl	8011e54 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800f62e:	223e      	movs	r2, #62	@ 0x3e
 800f630:	2100      	movs	r1, #0
 800f632:	4618      	mov	r0, r3
 800f634:	f002 fc0e 	bl	8011e54 <memset>

  return USBH_OK;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3710      	adds	r7, #16
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
	...

0800f644 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f64e:	2300      	movs	r3, #0
 800f650:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d020      	beq.n	800f69a <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d10f      	bne.n	800f682 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800f668:	1c59      	adds	r1, r3, #1
 800f66a:	687a      	ldr	r2, [r7, #4]
 800f66c:	f8c2 1d38 	str.w	r1, [r2, #3384]	@ 0xd38
 800f670:	687a      	ldr	r2, [r7, #4]
 800f672:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800f676:	6839      	ldr	r1, [r7, #0]
 800f678:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f67c:	2300      	movs	r3, #0
 800f67e:	73fb      	strb	r3, [r7, #15]
 800f680:	e016      	b.n	800f6b0 <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800f682:	480e      	ldr	r0, [pc, #56]	@ (800f6bc <USBH_RegisterClass+0x78>)
 800f684:	f002 fa76 	bl	8011b74 <iprintf>
 800f688:	480d      	ldr	r0, [pc, #52]	@ (800f6c0 <USBH_RegisterClass+0x7c>)
 800f68a:	f002 fa73 	bl	8011b74 <iprintf>
 800f68e:	200a      	movs	r0, #10
 800f690:	f002 fa82 	bl	8011b98 <putchar>
      status = USBH_FAIL;
 800f694:	2302      	movs	r3, #2
 800f696:	73fb      	strb	r3, [r7, #15]
 800f698:	e00a      	b.n	800f6b0 <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800f69a:	4808      	ldr	r0, [pc, #32]	@ (800f6bc <USBH_RegisterClass+0x78>)
 800f69c:	f002 fa6a 	bl	8011b74 <iprintf>
 800f6a0:	4808      	ldr	r0, [pc, #32]	@ (800f6c4 <USBH_RegisterClass+0x80>)
 800f6a2:	f002 fa67 	bl	8011b74 <iprintf>
 800f6a6:	200a      	movs	r0, #10
 800f6a8:	f002 fa76 	bl	8011b98 <putchar>
    status = USBH_FAIL;
 800f6ac:	2302      	movs	r3, #2
 800f6ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3710      	adds	r7, #16
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	08012ec4 	.word	0x08012ec4
 800f6c0:	08012ee0 	.word	0x08012ee0
 800f6c4:	08012efc 	.word	0x08012efc

0800f6c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b084      	sub	sp, #16
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f893 3cf4 	ldrb.w	r3, [r3, #3316]	@ 0xcf4
 800f6de:	78fa      	ldrb	r2, [r7, #3]
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d23c      	bcs.n	800f75e <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	78fa      	ldrb	r2, [r7, #3]
 800f6e8:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800f6ec:	78fb      	ldrb	r3, [r7, #3]
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	4823      	ldr	r0, [pc, #140]	@ (800f780 <USBH_SelectInterface+0xb8>)
 800f6f2:	f002 fa3f 	bl	8011b74 <iprintf>
 800f6f6:	200a      	movs	r0, #10
 800f6f8:	f002 fa4e 	bl	8011b98 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800f6fc:	78fb      	ldrb	r3, [r7, #3]
 800f6fe:	687a      	ldr	r2, [r7, #4]
 800f700:	211a      	movs	r1, #26
 800f702:	fb01 f303 	mul.w	r3, r1, r3
 800f706:	4413      	add	r3, r2
 800f708:	f603 43ff 	addw	r3, r3, #3327	@ 0xcff
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	4619      	mov	r1, r3
 800f710:	481c      	ldr	r0, [pc, #112]	@ (800f784 <USBH_SelectInterface+0xbc>)
 800f712:	f002 fa2f 	bl	8011b74 <iprintf>
 800f716:	200a      	movs	r0, #10
 800f718:	f002 fa3e 	bl	8011b98 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800f71c:	78fb      	ldrb	r3, [r7, #3]
 800f71e:	687a      	ldr	r2, [r7, #4]
 800f720:	211a      	movs	r1, #26
 800f722:	fb01 f303 	mul.w	r3, r1, r3
 800f726:	4413      	add	r3, r2
 800f728:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	4619      	mov	r1, r3
 800f730:	4815      	ldr	r0, [pc, #84]	@ (800f788 <USBH_SelectInterface+0xc0>)
 800f732:	f002 fa1f 	bl	8011b74 <iprintf>
 800f736:	200a      	movs	r0, #10
 800f738:	f002 fa2e 	bl	8011b98 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800f73c:	78fb      	ldrb	r3, [r7, #3]
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	211a      	movs	r1, #26
 800f742:	fb01 f303 	mul.w	r3, r1, r3
 800f746:	4413      	add	r3, r2
 800f748:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	4619      	mov	r1, r3
 800f750:	480e      	ldr	r0, [pc, #56]	@ (800f78c <USBH_SelectInterface+0xc4>)
 800f752:	f002 fa0f 	bl	8011b74 <iprintf>
 800f756:	200a      	movs	r0, #10
 800f758:	f002 fa1e 	bl	8011b98 <putchar>
 800f75c:	e00a      	b.n	800f774 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800f75e:	480c      	ldr	r0, [pc, #48]	@ (800f790 <USBH_SelectInterface+0xc8>)
 800f760:	f002 fa08 	bl	8011b74 <iprintf>
 800f764:	480b      	ldr	r0, [pc, #44]	@ (800f794 <USBH_SelectInterface+0xcc>)
 800f766:	f002 fa05 	bl	8011b74 <iprintf>
 800f76a:	200a      	movs	r0, #10
 800f76c:	f002 fa14 	bl	8011b98 <putchar>
    status = USBH_FAIL;
 800f770:	2302      	movs	r3, #2
 800f772:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f774:	7bfb      	ldrb	r3, [r7, #15]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3710      	adds	r7, #16
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	08012f14 	.word	0x08012f14
 800f784:	08012f34 	.word	0x08012f34
 800f788:	08012f44 	.word	0x08012f44
 800f78c:	08012f54 	.word	0x08012f54
 800f790:	08012ec4 	.word	0x08012ec4
 800f794:	08012f64 	.word	0x08012f64

0800f798 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f798:	b480      	push	{r7}
 800f79a:	b087      	sub	sp, #28
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	4608      	mov	r0, r1
 800f7a2:	4611      	mov	r1, r2
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	70fb      	strb	r3, [r7, #3]
 800f7aa:	460b      	mov	r3, r1
 800f7ac:	70bb      	strb	r3, [r7, #2]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800f7c0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f7c2:	e025      	b.n	800f810 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f7c4:	7dfb      	ldrb	r3, [r7, #23]
 800f7c6:	221a      	movs	r2, #26
 800f7c8:	fb02 f303 	mul.w	r3, r2, r3
 800f7cc:	3308      	adds	r3, #8
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	3302      	adds	r3, #2
 800f7d4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	795b      	ldrb	r3, [r3, #5]
 800f7da:	78fa      	ldrb	r2, [r7, #3]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d002      	beq.n	800f7e6 <USBH_FindInterface+0x4e>
 800f7e0:	78fb      	ldrb	r3, [r7, #3]
 800f7e2:	2bff      	cmp	r3, #255	@ 0xff
 800f7e4:	d111      	bne.n	800f80a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f7ea:	78ba      	ldrb	r2, [r7, #2]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d002      	beq.n	800f7f6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f7f0:	78bb      	ldrb	r3, [r7, #2]
 800f7f2:	2bff      	cmp	r3, #255	@ 0xff
 800f7f4:	d109      	bne.n	800f80a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f7fa:	787a      	ldrb	r2, [r7, #1]
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d002      	beq.n	800f806 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f800:	787b      	ldrb	r3, [r7, #1]
 800f802:	2bff      	cmp	r3, #255	@ 0xff
 800f804:	d101      	bne.n	800f80a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f806:	7dfb      	ldrb	r3, [r7, #23]
 800f808:	e006      	b.n	800f818 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f80a:	7dfb      	ldrb	r3, [r7, #23]
 800f80c:	3301      	adds	r3, #1
 800f80e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f810:	7dfb      	ldrb	r3, [r7, #23]
 800f812:	2b01      	cmp	r3, #1
 800f814:	d9d6      	bls.n	800f7c4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f816:	23ff      	movs	r3, #255	@ 0xff
}
 800f818:	4618      	mov	r0, r3
 800f81a:	371c      	adds	r7, #28
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b082      	sub	sp, #8
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f001 fe67 	bl	8011500 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f832:	2101      	movs	r1, #1
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f001 ff80 	bl	801173a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3708      	adds	r7, #8
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b088      	sub	sp, #32
 800f848:	af04      	add	r7, sp, #16
 800f84a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f84c:	2302      	movs	r3, #2
 800f84e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f850:	2300      	movs	r3, #0
 800f852:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f893 3cd9 	ldrb.w	r3, [r3, #3289]	@ 0xcd9
 800f85a:	b2db      	uxtb	r3, r3
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d102      	bne.n	800f866 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2203      	movs	r2, #3
 800f864:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	781b      	ldrb	r3, [r3, #0]
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	2b0b      	cmp	r3, #11
 800f86e:	f200 8239 	bhi.w	800fce4 <USBH_Process+0x4a0>
 800f872:	a201      	add	r2, pc, #4	@ (adr r2, 800f878 <USBH_Process+0x34>)
 800f874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f878:	0800f8a9 	.word	0x0800f8a9
 800f87c:	0800f8e7 	.word	0x0800f8e7
 800f880:	0800f967 	.word	0x0800f967
 800f884:	0800fc73 	.word	0x0800fc73
 800f888:	0800fce5 	.word	0x0800fce5
 800f88c:	0800fa07 	.word	0x0800fa07
 800f890:	0800fbf5 	.word	0x0800fbf5
 800f894:	0800fa55 	.word	0x0800fa55
 800f898:	0800fa75 	.word	0x0800fa75
 800f89c:	0800fa9f 	.word	0x0800fa9f
 800f8a0:	0800fafb 	.word	0x0800fafb
 800f8a4:	0800fc5b 	.word	0x0800fc5b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f893 3cd8 	ldrb.w	r3, [r3, #3288]	@ 0xcd8
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f000 8219 	beq.w	800fce8 <USBH_Process+0x4a4>
      {
        USBH_UsrLog("USB Device Connected");
 800f8b6:	48a5      	ldr	r0, [pc, #660]	@ (800fb4c <USBH_Process+0x308>)
 800f8b8:	f002 f95c 	bl	8011b74 <iprintf>
 800f8bc:	200a      	movs	r0, #10
 800f8be:	f002 f96b 	bl	8011b98 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2201      	movs	r2, #1
 800f8c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f8c8:	20c8      	movs	r0, #200	@ 0xc8
 800f8ca:	f001 ff80 	bl	80117ce <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f001 fe73 	bl	80115ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
        phost->Timeout = 0U;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f8e4:	e200      	b.n	800fce8 <USBH_Process+0x4a4>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f893 3cdb 	ldrb.w	r3, [r3, #3291]	@ 0xcdb
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d10d      	bne.n	800f90c <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800f8f0:	4897      	ldr	r0, [pc, #604]	@ (800fb50 <USBH_Process+0x30c>)
 800f8f2:	f002 f93f 	bl	8011b74 <iprintf>
 800f8f6:	200a      	movs	r0, #10
 800f8f8:	f002 f94e 	bl	8011b98 <putchar>
        phost->device.RstCnt = 0U;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2200      	movs	r2, #0
 800f900:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
        phost->gState = HOST_DEV_ATTACHED;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2202      	movs	r2, #2
 800f908:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f90a:	e1fa      	b.n	800fd02 <USBH_Process+0x4be>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800f912:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f916:	d91a      	bls.n	800f94e <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800f91e:	3301      	adds	r3, #1
 800f920:	b2da      	uxtb	r2, r3
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
          if (phost->device.RstCnt > 3U)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800f92e:	2b03      	cmp	r3, #3
 800f930:	d909      	bls.n	800f946 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800f932:	4888      	ldr	r0, [pc, #544]	@ (800fb54 <USBH_Process+0x310>)
 800f934:	f002 f91e 	bl	8011b74 <iprintf>
 800f938:	200a      	movs	r0, #10
 800f93a:	f002 f92d 	bl	8011b98 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	220d      	movs	r2, #13
 800f942:	701a      	strb	r2, [r3, #0]
      break;
 800f944:	e1dd      	b.n	800fd02 <USBH_Process+0x4be>
            phost->gState = HOST_IDLE;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2200      	movs	r2, #0
 800f94a:	701a      	strb	r2, [r3, #0]
      break;
 800f94c:	e1d9      	b.n	800fd02 <USBH_Process+0x4be>
          phost->Timeout += 10U;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800f954:	f103 020a 	add.w	r2, r3, #10
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
          USBH_Delay(10U);
 800f95e:	200a      	movs	r0, #10
 800f960:	f001 ff35 	bl	80117ce <USBH_Delay>
      break;
 800f964:	e1cd      	b.n	800fd02 <USBH_Process+0x4be>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d005      	beq.n	800f97c <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f976:	2104      	movs	r1, #4
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f97c:	2064      	movs	r0, #100	@ 0x64
 800f97e:	f001 ff26 	bl	80117ce <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f001 fdf2 	bl	801156c <USBH_LL_GetSpeed>
 800f988:	4603      	mov	r3, r0
 800f98a:	461a      	mov	r2, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5

      phost->gState = HOST_ENUMERATION;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2205      	movs	r2, #5
 800f996:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f998:	2100      	movs	r1, #0
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f001 fbf3 	bl	8011186 <USBH_AllocPipe>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f9a8:	2180      	movs	r1, #128	@ 0x80
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f001 fbeb 	bl	8011186 <USBH_AllocPipe>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	7919      	ldrb	r1, [r3, #4]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f9cc:	9202      	str	r2, [sp, #8]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	9201      	str	r2, [sp, #4]
 800f9d2:	9300      	str	r3, [sp, #0]
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	2280      	movs	r2, #128	@ 0x80
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f001 fba5 	bl	8011128 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	7959      	ldrb	r1, [r3, #5]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f9ee:	687a      	ldr	r2, [r7, #4]
 800f9f0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f9f2:	9202      	str	r2, [sp, #8]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	9201      	str	r2, [sp, #4]
 800f9f8:	9300      	str	r3, [sp, #0]
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f001 fb92 	bl	8011128 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fa04:	e17d      	b.n	800fd02 <USBH_Process+0x4be>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 f98e 	bl	800fd28 <USBH_HandleEnum>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800fa10:	7bbb      	ldrb	r3, [r7, #14]
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	f040 8169 	bne.w	800fcec <USBH_Process+0x4a8>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800fa1a:	484f      	ldr	r0, [pc, #316]	@ (800fb58 <USBH_Process+0x314>)
 800fa1c:	f002 f8aa 	bl	8011b74 <iprintf>
 800fa20:	200a      	movs	r0, #10
 800fa22:	f002 f8b9 	bl	8011b98 <putchar>

        phost->device.current_interface = 0U;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f893 3cef 	ldrb.w	r3, [r3, #3311]	@ 0xcef
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d109      	bne.n	800fa4c <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800fa38:	4848      	ldr	r0, [pc, #288]	@ (800fb5c <USBH_Process+0x318>)
 800fa3a:	f002 f89b 	bl	8011b74 <iprintf>
 800fa3e:	200a      	movs	r0, #10
 800fa40:	f002 f8aa 	bl	8011b98 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2208      	movs	r2, #8
 800fa48:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fa4a:	e14f      	b.n	800fcec <USBH_Process+0x4a8>
          phost->gState = HOST_INPUT;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2207      	movs	r2, #7
 800fa50:	701a      	strb	r2, [r3, #0]
      break;
 800fa52:	e14b      	b.n	800fcec <USBH_Process+0x4a8>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	f000 8148 	beq.w	800fcf0 <USBH_Process+0x4ac>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fa66:	2101      	movs	r1, #1
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2208      	movs	r2, #8
 800fa70:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800fa72:	e13d      	b.n	800fcf0 <USBH_Process+0x4ac>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f893 3cf5 	ldrb.w	r3, [r3, #3317]	@ 0xcf5
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f000 fd9a 	bl	80105b6 <USBH_SetCfg>
 800fa82:	4603      	mov	r3, r0
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	f040 8135 	bne.w	800fcf4 <USBH_Process+0x4b0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2209      	movs	r2, #9
 800fa8e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800fa90:	4833      	ldr	r0, [pc, #204]	@ (800fb60 <USBH_Process+0x31c>)
 800fa92:	f002 f86f 	bl	8011b74 <iprintf>
 800fa96:	200a      	movs	r0, #10
 800fa98:	f002 f87e 	bl	8011b98 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fa9c:	e12a      	b.n	800fcf4 <USBH_Process+0x4b0>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f893 3cf7 	ldrb.w	r3, [r3, #3319]	@ 0xcf7
 800faa4:	f003 0320 	and.w	r3, r3, #32
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d022      	beq.n	800faf2 <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800faac:	2101      	movs	r1, #1
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f000 fda4 	bl	80105fc <USBH_SetFeature>
 800fab4:	4603      	mov	r3, r0
 800fab6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fab8:	7bbb      	ldrb	r3, [r7, #14]
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d109      	bne.n	800fad4 <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800fac0:	4828      	ldr	r0, [pc, #160]	@ (800fb64 <USBH_Process+0x320>)
 800fac2:	f002 f857 	bl	8011b74 <iprintf>
 800fac6:	200a      	movs	r0, #10
 800fac8:	f002 f866 	bl	8011b98 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	220a      	movs	r2, #10
 800fad0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fad2:	e111      	b.n	800fcf8 <USBH_Process+0x4b4>
        else if (status == USBH_NOT_SUPPORTED)
 800fad4:	7bbb      	ldrb	r3, [r7, #14]
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	2b03      	cmp	r3, #3
 800fada:	f040 810d 	bne.w	800fcf8 <USBH_Process+0x4b4>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800fade:	4822      	ldr	r0, [pc, #136]	@ (800fb68 <USBH_Process+0x324>)
 800fae0:	f002 f848 	bl	8011b74 <iprintf>
 800fae4:	200a      	movs	r0, #10
 800fae6:	f002 f857 	bl	8011b98 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	220a      	movs	r2, #10
 800faee:	701a      	strb	r2, [r3, #0]
      break;
 800faf0:	e102      	b.n	800fcf8 <USBH_Process+0x4b4>
        phost->gState = HOST_CHECK_CLASS;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	220a      	movs	r2, #10
 800faf6:	701a      	strb	r2, [r3, #0]
      break;
 800faf8:	e0fe      	b.n	800fcf8 <USBH_Process+0x4b4>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d106      	bne.n	800fb12 <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 800fb04:	4819      	ldr	r0, [pc, #100]	@ (800fb6c <USBH_Process+0x328>)
 800fb06:	f002 f835 	bl	8011b74 <iprintf>
 800fb0a:	200a      	movs	r0, #10
 800fb0c:	f002 f844 	bl	8011b98 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fb10:	e0f7      	b.n	800fd02 <USBH_Process+0x4be>
        phost->pActiveClass = NULL;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2200      	movs	r2, #0
 800fb16:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	73fb      	strb	r3, [r7, #15]
 800fb1e:	e02a      	b.n	800fb76 <USBH_Process+0x332>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800fb20:	7bfa      	ldrb	r2, [r7, #15]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800fb28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb2c:	791a      	ldrb	r2, [r3, #4]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f893 3cff 	ldrb.w	r3, [r3, #3327]	@ 0xcff
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d11b      	bne.n	800fb70 <USBH_Process+0x32c>
            phost->pActiveClass = phost->pClass[idx];
 800fb38:	7bfa      	ldrb	r2, [r7, #15]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800fb40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
            break;
 800fb4a:	e017      	b.n	800fb7c <USBH_Process+0x338>
 800fb4c:	08012f84 	.word	0x08012f84
 800fb50:	08012f9c 	.word	0x08012f9c
 800fb54:	08012fb8 	.word	0x08012fb8
 800fb58:	08012fe4 	.word	0x08012fe4
 800fb5c:	08012ff8 	.word	0x08012ff8
 800fb60:	08013020 	.word	0x08013020
 800fb64:	0801303c 	.word	0x0801303c
 800fb68:	0801305c 	.word	0x0801305c
 800fb6c:	08013088 	.word	0x08013088
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fb70:	7bfb      	ldrb	r3, [r7, #15]
 800fb72:	3301      	adds	r3, #1
 800fb74:	73fb      	strb	r3, [r7, #15]
 800fb76:	7bfb      	ldrb	r3, [r7, #15]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d0d1      	beq.n	800fb20 <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d02c      	beq.n	800fbe0 <USBH_Process+0x39c>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fb8c:	689b      	ldr	r3, [r3, #8]
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	4798      	blx	r3
 800fb92:	4603      	mov	r3, r0
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d114      	bne.n	800fbc2 <USBH_Process+0x37e>
            phost->gState = HOST_CLASS_REQUEST;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2206      	movs	r2, #6
 800fb9c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4619      	mov	r1, r3
 800fba8:	4858      	ldr	r0, [pc, #352]	@ (800fd0c <USBH_Process+0x4c8>)
 800fbaa:	f001 ffe3 	bl	8011b74 <iprintf>
 800fbae:	200a      	movs	r0, #10
 800fbb0:	f001 fff2 	bl	8011b98 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fbba:	2103      	movs	r1, #3
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	4798      	blx	r3
      break;
 800fbc0:	e09f      	b.n	800fd02 <USBH_Process+0x4be>
            phost->gState = HOST_ABORT_STATE;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	220d      	movs	r2, #13
 800fbc6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	484f      	ldr	r0, [pc, #316]	@ (800fd10 <USBH_Process+0x4cc>)
 800fbd4:	f001 ffce 	bl	8011b74 <iprintf>
 800fbd8:	200a      	movs	r0, #10
 800fbda:	f001 ffdd 	bl	8011b98 <putchar>
      break;
 800fbde:	e090      	b.n	800fd02 <USBH_Process+0x4be>
          phost->gState = HOST_ABORT_STATE;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	220d      	movs	r2, #13
 800fbe4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800fbe6:	484b      	ldr	r0, [pc, #300]	@ (800fd14 <USBH_Process+0x4d0>)
 800fbe8:	f001 ffc4 	bl	8011b74 <iprintf>
 800fbec:	200a      	movs	r0, #10
 800fbee:	f001 ffd3 	bl	8011b98 <putchar>
      break;
 800fbf2:	e086      	b.n	800fd02 <USBH_Process+0x4be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d020      	beq.n	800fc40 <USBH_Process+0x3fc>
      {
        status = phost->pActiveClass->Requests(phost);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fc04:	691b      	ldr	r3, [r3, #16]
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	4798      	blx	r3
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fc0e:	7bbb      	ldrb	r3, [r7, #14]
 800fc10:	b2db      	uxtb	r3, r3
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d103      	bne.n	800fc1e <USBH_Process+0x3da>
        {
          phost->gState = HOST_CLASS;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	220b      	movs	r2, #11
 800fc1a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fc1c:	e06e      	b.n	800fcfc <USBH_Process+0x4b8>
        else if (status == USBH_FAIL)
 800fc1e:	7bbb      	ldrb	r3, [r7, #14]
 800fc20:	b2db      	uxtb	r3, r3
 800fc22:	2b02      	cmp	r3, #2
 800fc24:	d16a      	bne.n	800fcfc <USBH_Process+0x4b8>
          phost->gState = HOST_ABORT_STATE;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	220d      	movs	r2, #13
 800fc2a:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800fc2c:	483a      	ldr	r0, [pc, #232]	@ (800fd18 <USBH_Process+0x4d4>)
 800fc2e:	f001 ffa1 	bl	8011b74 <iprintf>
 800fc32:	483a      	ldr	r0, [pc, #232]	@ (800fd1c <USBH_Process+0x4d8>)
 800fc34:	f001 ff9e 	bl	8011b74 <iprintf>
 800fc38:	200a      	movs	r0, #10
 800fc3a:	f001 ffad 	bl	8011b98 <putchar>
      break;
 800fc3e:	e05d      	b.n	800fcfc <USBH_Process+0x4b8>
        phost->gState = HOST_ABORT_STATE;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	220d      	movs	r2, #13
 800fc44:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800fc46:	4834      	ldr	r0, [pc, #208]	@ (800fd18 <USBH_Process+0x4d4>)
 800fc48:	f001 ff94 	bl	8011b74 <iprintf>
 800fc4c:	4834      	ldr	r0, [pc, #208]	@ (800fd20 <USBH_Process+0x4dc>)
 800fc4e:	f001 ff91 	bl	8011b74 <iprintf>
 800fc52:	200a      	movs	r0, #10
 800fc54:	f001 ffa0 	bl	8011b98 <putchar>
      break;
 800fc58:	e050      	b.n	800fcfc <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d04d      	beq.n	800fd00 <USBH_Process+0x4bc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fc6a:	695b      	ldr	r3, [r3, #20]
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	4798      	blx	r3
      }
      break;
 800fc70:	e046      	b.n	800fd00 <USBH_Process+0x4bc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2200      	movs	r2, #0
 800fc76:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9

      (void)DeInitStateMachine(phost);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f7ff fc6c 	bl	800f558 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d009      	beq.n	800fc9e <USBH_Process+0x45a>
      {
        phost->pActiveClass->DeInit(phost);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
      }

      if (phost->pUser != NULL)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d005      	beq.n	800fcb4 <USBH_Process+0x470>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fcae:	2105      	movs	r1, #5
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800fcb4:	481b      	ldr	r0, [pc, #108]	@ (800fd24 <USBH_Process+0x4e0>)
 800fcb6:	f001 ff5d 	bl	8011b74 <iprintf>
 800fcba:	200a      	movs	r0, #10
 800fcbc:	f001 ff6c 	bl	8011b98 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f893 3cda 	ldrb.w	r3, [r3, #3290]	@ 0xcda
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d107      	bne.n	800fcdc <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f7ff fda5 	bl	800f824 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fcda:	e012      	b.n	800fd02 <USBH_Process+0x4be>
        (void)USBH_LL_Start(phost);
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f001 fc0f 	bl	8011500 <USBH_LL_Start>
      break;
 800fce2:	e00e      	b.n	800fd02 <USBH_Process+0x4be>

    case HOST_ABORT_STATE:
    default :
      break;
 800fce4:	bf00      	nop
 800fce6:	e00c      	b.n	800fd02 <USBH_Process+0x4be>
      break;
 800fce8:	bf00      	nop
 800fcea:	e00a      	b.n	800fd02 <USBH_Process+0x4be>
      break;
 800fcec:	bf00      	nop
 800fcee:	e008      	b.n	800fd02 <USBH_Process+0x4be>
    break;
 800fcf0:	bf00      	nop
 800fcf2:	e006      	b.n	800fd02 <USBH_Process+0x4be>
      break;
 800fcf4:	bf00      	nop
 800fcf6:	e004      	b.n	800fd02 <USBH_Process+0x4be>
      break;
 800fcf8:	bf00      	nop
 800fcfa:	e002      	b.n	800fd02 <USBH_Process+0x4be>
      break;
 800fcfc:	bf00      	nop
 800fcfe:	e000      	b.n	800fd02 <USBH_Process+0x4be>
      break;
 800fd00:	bf00      	nop
  }
  return USBH_OK;
 800fd02:	2300      	movs	r3, #0
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3710      	adds	r7, #16
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	080130a8 	.word	0x080130a8
 800fd10:	080130bc 	.word	0x080130bc
 800fd14:	080130dc 	.word	0x080130dc
 800fd18:	08012ec4 	.word	0x08012ec4
 800fd1c:	08013104 	.word	0x08013104
 800fd20:	0801312c 	.word	0x0801312c
 800fd24:	08013144 	.word	0x08013144

0800fd28 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b088      	sub	sp, #32
 800fd2c:	af04      	add	r7, sp, #16
 800fd2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fd30:	2301      	movs	r3, #1
 800fd32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800fd34:	2301      	movs	r3, #1
 800fd36:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	785b      	ldrb	r3, [r3, #1]
 800fd3c:	2b07      	cmp	r3, #7
 800fd3e:	f200 827b 	bhi.w	8010238 <USBH_HandleEnum+0x510>
 800fd42:	a201      	add	r2, pc, #4	@ (adr r2, 800fd48 <USBH_HandleEnum+0x20>)
 800fd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd48:	0800fd69 	.word	0x0800fd69
 800fd4c:	0800fe41 	.word	0x0800fe41
 800fd50:	0800fef1 	.word	0x0800fef1
 800fd54:	0800ffad 	.word	0x0800ffad
 800fd58:	08010035 	.word	0x08010035
 800fd5c:	080100e7 	.word	0x080100e7
 800fd60:	0801015b 	.word	0x0801015b
 800fd64:	080101cd 	.word	0x080101cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800fd68:	2108      	movs	r1, #8
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f000 fb16 	bl	801039c <USBH_Get_DevDesc>
 800fd70:	4603      	mov	r3, r0
 800fd72:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fd74:	7bbb      	ldrb	r3, [r7, #14]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d12e      	bne.n	800fdd8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 2ce5 	ldrb.w	r2, [r3, #3301]	@ 0xce5
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2201      	movs	r2, #1
 800fd88:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	7919      	ldrb	r1, [r3, #4]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fd9e:	9202      	str	r2, [sp, #8]
 800fda0:	2200      	movs	r2, #0
 800fda2:	9201      	str	r2, [sp, #4]
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	4603      	mov	r3, r0
 800fda8:	2280      	movs	r2, #128	@ 0x80
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f001 f9bc 	bl	8011128 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	7959      	ldrb	r1, [r3, #5]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fdc0:	687a      	ldr	r2, [r7, #4]
 800fdc2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fdc4:	9202      	str	r2, [sp, #8]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	9201      	str	r2, [sp, #4]
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2200      	movs	r2, #0
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f001 f9a9 	bl	8011128 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fdd6:	e231      	b.n	801023c <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fdd8:	7bbb      	ldrb	r3, [r7, #14]
 800fdda:	2b03      	cmp	r3, #3
 800fddc:	f040 822e 	bne.w	801023c <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800fde0:	48ae      	ldr	r0, [pc, #696]	@ (801009c <USBH_HandleEnum+0x374>)
 800fde2:	f001 fec7 	bl	8011b74 <iprintf>
 800fde6:	48ae      	ldr	r0, [pc, #696]	@ (80100a0 <USBH_HandleEnum+0x378>)
 800fde8:	f001 fec4 	bl	8011b74 <iprintf>
 800fdec:	200a      	movs	r0, #10
 800fdee:	f001 fed3 	bl	8011b98 <putchar>
        phost->device.EnumCnt++;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	b2da      	uxtb	r2, r3
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800fe08:	2b03      	cmp	r3, #3
 800fe0a:	d909      	bls.n	800fe20 <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800fe0c:	48a5      	ldr	r0, [pc, #660]	@ (80100a4 <USBH_HandleEnum+0x37c>)
 800fe0e:	f001 feb1 	bl	8011b74 <iprintf>
 800fe12:	200a      	movs	r0, #10
 800fe14:	f001 fec0 	bl	8011b98 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	220d      	movs	r2, #13
 800fe1c:	701a      	strb	r2, [r3, #0]
      break;
 800fe1e:	e20d      	b.n	801023c <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	795b      	ldrb	r3, [r3, #5]
 800fe24:	4619      	mov	r1, r3
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f001 f9cf 	bl	80111ca <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	791b      	ldrb	r3, [r3, #4]
 800fe30:	4619      	mov	r1, r3
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f001 f9c9 	bl	80111ca <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	701a      	strb	r2, [r3, #0]
      break;
 800fe3e:	e1fd      	b.n	801023c <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800fe40:	2112      	movs	r1, #18
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f000 faaa 	bl	801039c <USBH_Get_DevDesc>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fe4c:	7bbb      	ldrb	r3, [r7, #14]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d117      	bne.n	800fe82 <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8b3 3ce8 	ldrh.w	r3, [r3, #3304]	@ 0xce8
 800fe58:	4619      	mov	r1, r3
 800fe5a:	4893      	ldr	r0, [pc, #588]	@ (80100a8 <USBH_HandleEnum+0x380>)
 800fe5c:	f001 fe8a 	bl	8011b74 <iprintf>
 800fe60:	200a      	movs	r0, #10
 800fe62:	f001 fe99 	bl	8011b98 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f8b3 3ce6 	ldrh.w	r3, [r3, #3302]	@ 0xce6
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	488f      	ldr	r0, [pc, #572]	@ (80100ac <USBH_HandleEnum+0x384>)
 800fe70:	f001 fe80 	bl	8011b74 <iprintf>
 800fe74:	200a      	movs	r0, #10
 800fe76:	f001 fe8f 	bl	8011b98 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2202      	movs	r2, #2
 800fe7e:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fe80:	e1de      	b.n	8010240 <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fe82:	7bbb      	ldrb	r3, [r7, #14]
 800fe84:	2b03      	cmp	r3, #3
 800fe86:	f040 81db 	bne.w	8010240 <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800fe8a:	4884      	ldr	r0, [pc, #528]	@ (801009c <USBH_HandleEnum+0x374>)
 800fe8c:	f001 fe72 	bl	8011b74 <iprintf>
 800fe90:	4887      	ldr	r0, [pc, #540]	@ (80100b0 <USBH_HandleEnum+0x388>)
 800fe92:	f001 fe6f 	bl	8011b74 <iprintf>
 800fe96:	200a      	movs	r0, #10
 800fe98:	f001 fe7e 	bl	8011b98 <putchar>
        phost->device.EnumCnt++;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800fea2:	3301      	adds	r3, #1
 800fea4:	b2da      	uxtb	r2, r3
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800feb2:	2b03      	cmp	r3, #3
 800feb4:	d909      	bls.n	800feca <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800feb6:	487b      	ldr	r0, [pc, #492]	@ (80100a4 <USBH_HandleEnum+0x37c>)
 800feb8:	f001 fe5c 	bl	8011b74 <iprintf>
 800febc:	200a      	movs	r0, #10
 800febe:	f001 fe6b 	bl	8011b98 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	220d      	movs	r2, #13
 800fec6:	701a      	strb	r2, [r3, #0]
      break;
 800fec8:	e1ba      	b.n	8010240 <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	795b      	ldrb	r3, [r3, #5]
 800fece:	4619      	mov	r1, r3
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f001 f97a 	bl	80111ca <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	791b      	ldrb	r3, [r3, #4]
 800feda:	4619      	mov	r1, r3
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f001 f974 	bl	80111ca <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2200      	movs	r2, #0
 800fee6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2200      	movs	r2, #0
 800feec:	701a      	strb	r2, [r3, #0]
      break;
 800feee:	e1a7      	b.n	8010240 <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800fef0:	2101      	movs	r1, #1
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f000 fb3b 	bl	801056e <USBH_SetAddress>
 800fef8:	4603      	mov	r3, r0
 800fefa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fefc:	7bbb      	ldrb	r3, [r7, #14]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d13a      	bne.n	800ff78 <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 800ff02:	2002      	movs	r0, #2
 800ff04:	f001 fc63 	bl	80117ce <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f893 3cd4 	ldrb.w	r3, [r3, #3284]	@ 0xcd4
 800ff16:	4619      	mov	r1, r3
 800ff18:	4866      	ldr	r0, [pc, #408]	@ (80100b4 <USBH_HandleEnum+0x38c>)
 800ff1a:	f001 fe2b 	bl	8011b74 <iprintf>
 800ff1e:	200a      	movs	r0, #10
 800ff20:	f001 fe3a 	bl	8011b98 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2203      	movs	r2, #3
 800ff28:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	7919      	ldrb	r1, [r3, #4]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ff3a:	687a      	ldr	r2, [r7, #4]
 800ff3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ff3e:	9202      	str	r2, [sp, #8]
 800ff40:	2200      	movs	r2, #0
 800ff42:	9201      	str	r2, [sp, #4]
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	4603      	mov	r3, r0
 800ff48:	2280      	movs	r2, #128	@ 0x80
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f001 f8ec 	bl	8011128 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	7959      	ldrb	r1, [r3, #5]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ff60:	687a      	ldr	r2, [r7, #4]
 800ff62:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ff64:	9202      	str	r2, [sp, #8]
 800ff66:	2200      	movs	r2, #0
 800ff68:	9201      	str	r2, [sp, #4]
 800ff6a:	9300      	str	r3, [sp, #0]
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	2200      	movs	r2, #0
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f001 f8d9 	bl	8011128 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ff76:	e165      	b.n	8010244 <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ff78:	7bbb      	ldrb	r3, [r7, #14]
 800ff7a:	2b03      	cmp	r3, #3
 800ff7c:	f040 8162 	bne.w	8010244 <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800ff80:	4846      	ldr	r0, [pc, #280]	@ (801009c <USBH_HandleEnum+0x374>)
 800ff82:	f001 fdf7 	bl	8011b74 <iprintf>
 800ff86:	484c      	ldr	r0, [pc, #304]	@ (80100b8 <USBH_HandleEnum+0x390>)
 800ff88:	f001 fdf4 	bl	8011b74 <iprintf>
 800ff8c:	200a      	movs	r0, #10
 800ff8e:	f001 fe03 	bl	8011b98 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ff92:	4844      	ldr	r0, [pc, #272]	@ (80100a4 <USBH_HandleEnum+0x37c>)
 800ff94:	f001 fdee 	bl	8011b74 <iprintf>
 800ff98:	200a      	movs	r0, #10
 800ff9a:	f001 fdfd 	bl	8011b98 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	220d      	movs	r2, #13
 800ffa2:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	705a      	strb	r2, [r3, #1]
      break;
 800ffaa:	e14b      	b.n	8010244 <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ffac:	2109      	movs	r1, #9
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 fa2e 	bl	8010410 <USBH_Get_CfgDesc>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ffb8:	7bbb      	ldrb	r3, [r7, #14]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d103      	bne.n	800ffc6 <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	2204      	movs	r2, #4
 800ffc2:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ffc4:	e140      	b.n	8010248 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ffc6:	7bbb      	ldrb	r3, [r7, #14]
 800ffc8:	2b03      	cmp	r3, #3
 800ffca:	f040 813d 	bne.w	8010248 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800ffce:	4833      	ldr	r0, [pc, #204]	@ (801009c <USBH_HandleEnum+0x374>)
 800ffd0:	f001 fdd0 	bl	8011b74 <iprintf>
 800ffd4:	4839      	ldr	r0, [pc, #228]	@ (80100bc <USBH_HandleEnum+0x394>)
 800ffd6:	f001 fdcd 	bl	8011b74 <iprintf>
 800ffda:	200a      	movs	r0, #10
 800ffdc:	f001 fddc 	bl	8011b98 <putchar>
        phost->device.EnumCnt++;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	b2da      	uxtb	r2, r3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800fff6:	2b03      	cmp	r3, #3
 800fff8:	d909      	bls.n	801000e <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800fffa:	482a      	ldr	r0, [pc, #168]	@ (80100a4 <USBH_HandleEnum+0x37c>)
 800fffc:	f001 fdba 	bl	8011b74 <iprintf>
 8010000:	200a      	movs	r0, #10
 8010002:	f001 fdc9 	bl	8011b98 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	220d      	movs	r2, #13
 801000a:	701a      	strb	r2, [r3, #0]
      break;
 801000c:	e11c      	b.n	8010248 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	795b      	ldrb	r3, [r3, #5]
 8010012:	4619      	mov	r1, r3
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f001 f8d8 	bl	80111ca <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	791b      	ldrb	r3, [r3, #4]
 801001e:	4619      	mov	r1, r3
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f001 f8d2 	bl	80111ca <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	701a      	strb	r2, [r3, #0]
      break;
 8010032:	e109      	b.n	8010248 <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8b3 3cf2 	ldrh.w	r3, [r3, #3314]	@ 0xcf2
 801003a:	4619      	mov	r1, r3
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f000 f9e7 	bl	8010410 <USBH_Get_CfgDesc>
 8010042:	4603      	mov	r3, r0
 8010044:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010046:	7bbb      	ldrb	r3, [r7, #14]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d103      	bne.n	8010054 <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2205      	movs	r2, #5
 8010050:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010052:	e0fb      	b.n	801024c <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010054:	7bbb      	ldrb	r3, [r7, #14]
 8010056:	2b03      	cmp	r3, #3
 8010058:	f040 80f8 	bne.w	801024c <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 801005c:	480f      	ldr	r0, [pc, #60]	@ (801009c <USBH_HandleEnum+0x374>)
 801005e:	f001 fd89 	bl	8011b74 <iprintf>
 8010062:	4816      	ldr	r0, [pc, #88]	@ (80100bc <USBH_HandleEnum+0x394>)
 8010064:	f001 fd86 	bl	8011b74 <iprintf>
 8010068:	200a      	movs	r0, #10
 801006a:	f001 fd95 	bl	8011b98 <putchar>
        phost->device.EnumCnt++;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 8010074:	3301      	adds	r3, #1
 8010076:	b2da      	uxtb	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 8010084:	2b03      	cmp	r3, #3
 8010086:	d91b      	bls.n	80100c0 <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8010088:	4806      	ldr	r0, [pc, #24]	@ (80100a4 <USBH_HandleEnum+0x37c>)
 801008a:	f001 fd73 	bl	8011b74 <iprintf>
 801008e:	200a      	movs	r0, #10
 8010090:	f001 fd82 	bl	8011b98 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	220d      	movs	r2, #13
 8010098:	701a      	strb	r2, [r3, #0]
      break;
 801009a:	e0d7      	b.n	801024c <USBH_HandleEnum+0x524>
 801009c:	08012ec4 	.word	0x08012ec4
 80100a0:	0801315c 	.word	0x0801315c
 80100a4:	08013190 	.word	0x08013190
 80100a8:	080131d0 	.word	0x080131d0
 80100ac:	080131dc 	.word	0x080131dc
 80100b0:	080131e8 	.word	0x080131e8
 80100b4:	08013224 	.word	0x08013224
 80100b8:	0801323c 	.word	0x0801323c
 80100bc:	08013270 	.word	0x08013270
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	795b      	ldrb	r3, [r3, #5]
 80100c4:	4619      	mov	r1, r3
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f001 f87f 	bl	80111ca <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	791b      	ldrb	r3, [r3, #4]
 80100d0:	4619      	mov	r1, r3
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f001 f879 	bl	80111ca <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2200      	movs	r2, #0
 80100dc:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2200      	movs	r2, #0
 80100e2:	701a      	strb	r2, [r3, #0]
      break;
 80100e4:	e0b2      	b.n	801024c <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f893 3cec 	ldrb.w	r3, [r3, #3308]	@ 0xcec
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d02a      	beq.n	8010146 <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f893 1cec 	ldrb.w	r1, [r3, #3308]	@ 0xcec
                                        phost->device.Data, 0xFFU);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80100fc:	23ff      	movs	r3, #255	@ 0xff
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f000 f9be 	bl	8010480 <USBH_Get_StringDesc>
 8010104:	4603      	mov	r3, r0
 8010106:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010108:	7bbb      	ldrb	r3, [r7, #14]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d10d      	bne.n	801012a <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010114:	4619      	mov	r1, r3
 8010116:	4853      	ldr	r0, [pc, #332]	@ (8010264 <USBH_HandleEnum+0x53c>)
 8010118:	f001 fd2c 	bl	8011b74 <iprintf>
 801011c:	200a      	movs	r0, #10
 801011e:	f001 fd3b 	bl	8011b98 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2206      	movs	r2, #6
 8010126:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010128:	e092      	b.n	8010250 <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801012a:	7bbb      	ldrb	r3, [r7, #14]
 801012c:	2b03      	cmp	r3, #3
 801012e:	f040 808f 	bne.w	8010250 <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 8010132:	484d      	ldr	r0, [pc, #308]	@ (8010268 <USBH_HandleEnum+0x540>)
 8010134:	f001 fd1e 	bl	8011b74 <iprintf>
 8010138:	200a      	movs	r0, #10
 801013a:	f001 fd2d 	bl	8011b98 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2206      	movs	r2, #6
 8010142:	705a      	strb	r2, [r3, #1]
      break;
 8010144:	e084      	b.n	8010250 <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 8010146:	4848      	ldr	r0, [pc, #288]	@ (8010268 <USBH_HandleEnum+0x540>)
 8010148:	f001 fd14 	bl	8011b74 <iprintf>
 801014c:	200a      	movs	r0, #10
 801014e:	f001 fd23 	bl	8011b98 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2206      	movs	r2, #6
 8010156:	705a      	strb	r2, [r3, #1]
      break;
 8010158:	e07a      	b.n	8010250 <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f893 3ced 	ldrb.w	r3, [r3, #3309]	@ 0xced
 8010160:	2b00      	cmp	r3, #0
 8010162:	d029      	beq.n	80101b8 <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f893 1ced 	ldrb.w	r1, [r3, #3309]	@ 0xced
                                        phost->device.Data, 0xFFU);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010170:	23ff      	movs	r3, #255	@ 0xff
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f000 f984 	bl	8010480 <USBH_Get_StringDesc>
 8010178:	4603      	mov	r3, r0
 801017a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801017c:	7bbb      	ldrb	r3, [r7, #14]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d10d      	bne.n	801019e <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010188:	4619      	mov	r1, r3
 801018a:	4838      	ldr	r0, [pc, #224]	@ (801026c <USBH_HandleEnum+0x544>)
 801018c:	f001 fcf2 	bl	8011b74 <iprintf>
 8010190:	200a      	movs	r0, #10
 8010192:	f001 fd01 	bl	8011b98 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2207      	movs	r2, #7
 801019a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801019c:	e05a      	b.n	8010254 <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801019e:	7bbb      	ldrb	r3, [r7, #14]
 80101a0:	2b03      	cmp	r3, #3
 80101a2:	d157      	bne.n	8010254 <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 80101a4:	4832      	ldr	r0, [pc, #200]	@ (8010270 <USBH_HandleEnum+0x548>)
 80101a6:	f001 fce5 	bl	8011b74 <iprintf>
 80101aa:	200a      	movs	r0, #10
 80101ac:	f001 fcf4 	bl	8011b98 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2207      	movs	r2, #7
 80101b4:	705a      	strb	r2, [r3, #1]
      break;
 80101b6:	e04d      	b.n	8010254 <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 80101b8:	482d      	ldr	r0, [pc, #180]	@ (8010270 <USBH_HandleEnum+0x548>)
 80101ba:	f001 fcdb 	bl	8011b74 <iprintf>
 80101be:	200a      	movs	r0, #10
 80101c0:	f001 fcea 	bl	8011b98 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2207      	movs	r2, #7
 80101c8:	705a      	strb	r2, [r3, #1]
      break;
 80101ca:	e043      	b.n	8010254 <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f893 3cee 	ldrb.w	r3, [r3, #3310]	@ 0xcee
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d027      	beq.n	8010226 <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f893 1cee 	ldrb.w	r1, [r3, #3310]	@ 0xcee
                                        phost->device.Data, 0xFFU);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80101e2:	23ff      	movs	r3, #255	@ 0xff
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f000 f94b 	bl	8010480 <USBH_Get_StringDesc>
 80101ea:	4603      	mov	r3, r0
 80101ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80101ee:	7bbb      	ldrb	r3, [r7, #14]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d10c      	bne.n	801020e <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80101fa:	4619      	mov	r1, r3
 80101fc:	481d      	ldr	r0, [pc, #116]	@ (8010274 <USBH_HandleEnum+0x54c>)
 80101fe:	f001 fcb9 	bl	8011b74 <iprintf>
 8010202:	200a      	movs	r0, #10
 8010204:	f001 fcc8 	bl	8011b98 <putchar>
          Status = USBH_OK;
 8010208:	2300      	movs	r3, #0
 801020a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 801020c:	e024      	b.n	8010258 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801020e:	7bbb      	ldrb	r3, [r7, #14]
 8010210:	2b03      	cmp	r3, #3
 8010212:	d121      	bne.n	8010258 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 8010214:	4818      	ldr	r0, [pc, #96]	@ (8010278 <USBH_HandleEnum+0x550>)
 8010216:	f001 fcad 	bl	8011b74 <iprintf>
 801021a:	200a      	movs	r0, #10
 801021c:	f001 fcbc 	bl	8011b98 <putchar>
          Status = USBH_OK;
 8010220:	2300      	movs	r3, #0
 8010222:	73fb      	strb	r3, [r7, #15]
      break;
 8010224:	e018      	b.n	8010258 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 8010226:	4814      	ldr	r0, [pc, #80]	@ (8010278 <USBH_HandleEnum+0x550>)
 8010228:	f001 fca4 	bl	8011b74 <iprintf>
 801022c:	200a      	movs	r0, #10
 801022e:	f001 fcb3 	bl	8011b98 <putchar>
        Status = USBH_OK;
 8010232:	2300      	movs	r3, #0
 8010234:	73fb      	strb	r3, [r7, #15]
      break;
 8010236:	e00f      	b.n	8010258 <USBH_HandleEnum+0x530>

    default:
      break;
 8010238:	bf00      	nop
 801023a:	e00e      	b.n	801025a <USBH_HandleEnum+0x532>
      break;
 801023c:	bf00      	nop
 801023e:	e00c      	b.n	801025a <USBH_HandleEnum+0x532>
      break;
 8010240:	bf00      	nop
 8010242:	e00a      	b.n	801025a <USBH_HandleEnum+0x532>
      break;
 8010244:	bf00      	nop
 8010246:	e008      	b.n	801025a <USBH_HandleEnum+0x532>
      break;
 8010248:	bf00      	nop
 801024a:	e006      	b.n	801025a <USBH_HandleEnum+0x532>
      break;
 801024c:	bf00      	nop
 801024e:	e004      	b.n	801025a <USBH_HandleEnum+0x532>
      break;
 8010250:	bf00      	nop
 8010252:	e002      	b.n	801025a <USBH_HandleEnum+0x532>
      break;
 8010254:	bf00      	nop
 8010256:	e000      	b.n	801025a <USBH_HandleEnum+0x532>
      break;
 8010258:	bf00      	nop
  }
  return Status;
 801025a:	7bfb      	ldrb	r3, [r7, #15]
}
 801025c:	4618      	mov	r0, r3
 801025e:	3710      	adds	r7, #16
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	080132b4 	.word	0x080132b4
 8010268:	080132c8 	.word	0x080132c8
 801026c:	080132dc 	.word	0x080132dc
 8010270:	080132ec 	.word	0x080132ec
 8010274:	080132fc 	.word	0x080132fc
 8010278:	08013310 	.word	0x08013310

0801027c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
 8010284:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	683a      	ldr	r2, [r7, #0]
 801028a:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
}
 801028e:	bf00      	nop
 8010290:	370c      	adds	r7, #12
 8010292:	46bd      	mov	sp, r7
 8010294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010298:	4770      	bx	lr

0801029a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801029a:	b580      	push	{r7, lr}
 801029c:	b082      	sub	sp, #8
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 80102a8:	1c5a      	adds	r2, r3, #1
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
  USBH_HandleSof(phost);
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f000 f804 	bl	80102be <USBH_HandleSof>
}
 80102b6:	bf00      	nop
 80102b8:	3708      	adds	r7, #8
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}

080102be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b082      	sub	sp, #8
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	b2db      	uxtb	r3, r3
 80102cc:	2b0b      	cmp	r3, #11
 80102ce:	d10a      	bne.n	80102e6 <USBH_HandleSof+0x28>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d005      	beq.n	80102e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 80102e0:	699b      	ldr	r3, [r3, #24]
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	4798      	blx	r3
  }
}
 80102e6:	bf00      	nop
 80102e8:	3708      	adds	r7, #8
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}

080102ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80102ee:	b480      	push	{r7}
 80102f0:	b083      	sub	sp, #12
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2201      	movs	r2, #1
 80102fa:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80102fe:	bf00      	nop
}
 8010300:	370c      	adds	r7, #12
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr

0801030a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801030a:	b480      	push	{r7}
 801030c:	b083      	sub	sp, #12
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2200      	movs	r2, #0
 8010316:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  return;
 801031a:	bf00      	nop
}
 801031c:	370c      	adds	r7, #12
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr

08010326 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010326:	b480      	push	{r7}
 8010328:	b083      	sub	sp, #12
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2201      	movs	r2, #1
 8010332:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2200      	movs	r2, #0
 801033a:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2200      	movs	r2, #0
 8010342:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010346:	2300      	movs	r3, #0
}
 8010348:	4618      	mov	r0, r3
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2201      	movs	r2, #1
 8010360:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_connected = 0U;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2200      	movs	r2, #0
 8010368:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.PortEnabled = 0U;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2200      	movs	r2, #0
 8010370:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f001 f8de 	bl	8011536 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	791b      	ldrb	r3, [r3, #4]
 801037e:	4619      	mov	r1, r3
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 ff22 	bl	80111ca <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	795b      	ldrb	r3, [r3, #5]
 801038a:	4619      	mov	r1, r3
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f000 ff1c 	bl	80111ca <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010392:	2300      	movs	r3, #0
}
 8010394:	4618      	mov	r0, r3
 8010396:	3708      	adds	r7, #8
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}

0801039c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b086      	sub	sp, #24
 80103a0:	af02      	add	r7, sp, #8
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	460b      	mov	r3, r1
 80103a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80103a8:	887b      	ldrh	r3, [r7, #2]
 80103aa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d90a      	bls.n	80103c8 <USBH_Get_DevDesc+0x2c>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 80103b2:	4815      	ldr	r0, [pc, #84]	@ (8010408 <USBH_Get_DevDesc+0x6c>)
 80103b4:	f001 fbde 	bl	8011b74 <iprintf>
 80103b8:	4814      	ldr	r0, [pc, #80]	@ (801040c <USBH_Get_DevDesc+0x70>)
 80103ba:	f001 fbdb 	bl	8011b74 <iprintf>
 80103be:	200a      	movs	r0, #10
 80103c0:	f001 fbea 	bl	8011b98 <putchar>
    return USBH_NOT_SUPPORTED;
 80103c4:	2303      	movs	r3, #3
 80103c6:	e01b      	b.n	8010400 <USBH_Get_DevDesc+0x64>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80103ce:	887b      	ldrh	r3, [r7, #2]
 80103d0:	9300      	str	r3, [sp, #0]
 80103d2:	4613      	mov	r3, r2
 80103d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80103d8:	2100      	movs	r1, #0
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f000 f892 	bl	8010504 <USBH_GetDescriptor>
 80103e0:	4603      	mov	r3, r0
 80103e2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80103e4:	7bfb      	ldrb	r3, [r7, #15]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d109      	bne.n	80103fe <USBH_Get_DevDesc+0x62>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80103f0:	887a      	ldrh	r2, [r7, #2]
 80103f2:	4619      	mov	r1, r3
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f000 f949 	bl	801068c <USBH_ParseDevDesc>
 80103fa:	4603      	mov	r3, r0
 80103fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80103fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010400:	4618      	mov	r0, r3
 8010402:	3710      	adds	r7, #16
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	08013324 	.word	0x08013324
 801040c:	0801332c 	.word	0x0801332c

08010410 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b086      	sub	sp, #24
 8010414:	af02      	add	r7, sp, #8
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	460b      	mov	r3, r1
 801041a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	331c      	adds	r3, #28
 8010420:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8010422:	887b      	ldrh	r3, [r7, #2]
 8010424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010428:	d90a      	bls.n	8010440 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 801042a:	4813      	ldr	r0, [pc, #76]	@ (8010478 <USBH_Get_CfgDesc+0x68>)
 801042c:	f001 fba2 	bl	8011b74 <iprintf>
 8010430:	4812      	ldr	r0, [pc, #72]	@ (801047c <USBH_Get_CfgDesc+0x6c>)
 8010432:	f001 fb9f 	bl	8011b74 <iprintf>
 8010436:	200a      	movs	r0, #10
 8010438:	f001 fbae 	bl	8011b98 <putchar>
    return USBH_NOT_SUPPORTED;
 801043c:	2303      	movs	r3, #3
 801043e:	e016      	b.n	801046e <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8010440:	887b      	ldrh	r3, [r7, #2]
 8010442:	9300      	str	r3, [sp, #0]
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801044a:	2100      	movs	r1, #0
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f000 f859 	bl	8010504 <USBH_GetDescriptor>
 8010452:	4603      	mov	r3, r0
 8010454:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8010456:	7bfb      	ldrb	r3, [r7, #15]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d107      	bne.n	801046c <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 801045c:	887b      	ldrh	r3, [r7, #2]
 801045e:	461a      	mov	r2, r3
 8010460:	68b9      	ldr	r1, [r7, #8]
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f000 f9c2 	bl	80107ec <USBH_ParseCfgDesc>
 8010468:	4603      	mov	r3, r0
 801046a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801046c:	7bfb      	ldrb	r3, [r7, #15]
}
 801046e:	4618      	mov	r0, r3
 8010470:	3710      	adds	r7, #16
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	08013324 	.word	0x08013324
 801047c:	08013370 	.word	0x08013370

08010480 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b088      	sub	sp, #32
 8010484:	af02      	add	r7, sp, #8
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	607a      	str	r2, [r7, #4]
 801048a:	461a      	mov	r2, r3
 801048c:	460b      	mov	r3, r1
 801048e:	72fb      	strb	r3, [r7, #11]
 8010490:	4613      	mov	r3, r2
 8010492:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8010494:	893b      	ldrh	r3, [r7, #8]
 8010496:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801049a:	4293      	cmp	r3, r2
 801049c:	d802      	bhi.n	80104a4 <USBH_Get_StringDesc+0x24>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d10a      	bne.n	80104ba <USBH_Get_StringDesc+0x3a>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 80104a4:	4815      	ldr	r0, [pc, #84]	@ (80104fc <USBH_Get_StringDesc+0x7c>)
 80104a6:	f001 fb65 	bl	8011b74 <iprintf>
 80104aa:	4815      	ldr	r0, [pc, #84]	@ (8010500 <USBH_Get_StringDesc+0x80>)
 80104ac:	f001 fb62 	bl	8011b74 <iprintf>
 80104b0:	200a      	movs	r0, #10
 80104b2:	f001 fb71 	bl	8011b98 <putchar>
    return USBH_NOT_SUPPORTED;
 80104b6:	2303      	movs	r3, #3
 80104b8:	e01c      	b.n	80104f4 <USBH_Get_StringDesc+0x74>
  }

  status = USBH_GetDescriptor(phost,
 80104ba:	7afb      	ldrb	r3, [r7, #11]
 80104bc:	b29b      	uxth	r3, r3
 80104be:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80104c2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80104ca:	893b      	ldrh	r3, [r7, #8]
 80104cc:	9300      	str	r3, [sp, #0]
 80104ce:	460b      	mov	r3, r1
 80104d0:	2100      	movs	r1, #0
 80104d2:	68f8      	ldr	r0, [r7, #12]
 80104d4:	f000 f816 	bl	8010504 <USBH_GetDescriptor>
 80104d8:	4603      	mov	r3, r0
 80104da:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80104dc:	7dfb      	ldrb	r3, [r7, #23]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d107      	bne.n	80104f2 <USBH_Get_StringDesc+0x72>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80104e8:	893a      	ldrh	r2, [r7, #8]
 80104ea:	6879      	ldr	r1, [r7, #4]
 80104ec:	4618      	mov	r0, r3
 80104ee:	f000 fb92 	bl	8010c16 <USBH_ParseStringDesc>
  }

  return status;
 80104f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3718      	adds	r7, #24
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	08013324 	.word	0x08013324
 8010500:	080133bc 	.word	0x080133bc

08010504 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	607b      	str	r3, [r7, #4]
 801050e:	460b      	mov	r3, r1
 8010510:	72fb      	strb	r3, [r7, #11]
 8010512:	4613      	mov	r3, r2
 8010514:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	789b      	ldrb	r3, [r3, #2]
 801051a:	2b01      	cmp	r3, #1
 801051c:	d11c      	bne.n	8010558 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 801051e:	7afb      	ldrb	r3, [r7, #11]
 8010520:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010524:	b2da      	uxtb	r2, r3
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2206      	movs	r2, #6
 801052e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	893a      	ldrh	r2, [r7, #8]
 8010534:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010536:	893b      	ldrh	r3, [r7, #8]
 8010538:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801053c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010540:	d104      	bne.n	801054c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f240 4209 	movw	r2, #1033	@ 0x409
 8010548:	829a      	strh	r2, [r3, #20]
 801054a:	e002      	b.n	8010552 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2200      	movs	r2, #0
 8010550:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	8b3a      	ldrh	r2, [r7, #24]
 8010556:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8010558:	8b3b      	ldrh	r3, [r7, #24]
 801055a:	461a      	mov	r2, r3
 801055c:	6879      	ldr	r1, [r7, #4]
 801055e:	68f8      	ldr	r0, [r7, #12]
 8010560:	f000 fba6 	bl	8010cb0 <USBH_CtlReq>
 8010564:	4603      	mov	r3, r0
}
 8010566:	4618      	mov	r0, r3
 8010568:	3710      	adds	r7, #16
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}

0801056e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801056e:	b580      	push	{r7, lr}
 8010570:	b082      	sub	sp, #8
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
 8010576:	460b      	mov	r3, r1
 8010578:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	789b      	ldrb	r3, [r3, #2]
 801057e:	2b01      	cmp	r3, #1
 8010580:	d10f      	bne.n	80105a2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2200      	movs	r2, #0
 8010586:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2205      	movs	r2, #5
 801058c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801058e:	78fb      	ldrb	r3, [r7, #3]
 8010590:	b29a      	uxth	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2200      	movs	r2, #0
 801059a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2200      	movs	r2, #0
 80105a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80105a2:	2200      	movs	r2, #0
 80105a4:	2100      	movs	r1, #0
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f000 fb82 	bl	8010cb0 <USBH_CtlReq>
 80105ac:	4603      	mov	r3, r0
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3708      	adds	r7, #8
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}

080105b6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80105b6:	b580      	push	{r7, lr}
 80105b8:	b082      	sub	sp, #8
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
 80105be:	460b      	mov	r3, r1
 80105c0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	789b      	ldrb	r3, [r3, #2]
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d10e      	bne.n	80105e8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2200      	movs	r2, #0
 80105ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2209      	movs	r2, #9
 80105d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	887a      	ldrh	r2, [r7, #2]
 80105da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2200      	movs	r2, #0
 80105e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80105e8:	2200      	movs	r2, #0
 80105ea:	2100      	movs	r1, #0
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 fb5f 	bl	8010cb0 <USBH_CtlReq>
 80105f2:	4603      	mov	r3, r0
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	460b      	mov	r3, r1
 8010606:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	789b      	ldrb	r3, [r3, #2]
 801060c:	2b01      	cmp	r3, #1
 801060e:	d10f      	bne.n	8010630 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2200      	movs	r2, #0
 8010614:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2203      	movs	r2, #3
 801061a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801061c:	78fb      	ldrb	r3, [r7, #3]
 801061e:	b29a      	uxth	r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2200      	movs	r2, #0
 8010628:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2200      	movs	r2, #0
 801062e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010630:	2200      	movs	r2, #0
 8010632:	2100      	movs	r1, #0
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f000 fb3b 	bl	8010cb0 <USBH_CtlReq>
 801063a:	4603      	mov	r3, r0
}
 801063c:	4618      	mov	r0, r3
 801063e:	3708      	adds	r7, #8
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	460b      	mov	r3, r1
 801064e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	789b      	ldrb	r3, [r3, #2]
 8010654:	2b01      	cmp	r3, #1
 8010656:	d10f      	bne.n	8010678 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2202      	movs	r2, #2
 801065c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2201      	movs	r2, #1
 8010662:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2200      	movs	r2, #0
 8010668:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801066a:	78fb      	ldrb	r3, [r7, #3]
 801066c:	b29a      	uxth	r2, r3
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2200      	movs	r2, #0
 8010676:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010678:	2200      	movs	r2, #0
 801067a:	2100      	movs	r1, #0
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f000 fb17 	bl	8010cb0 <USBH_CtlReq>
 8010682:	4603      	mov	r3, r0
}
 8010684:	4618      	mov	r0, r3
 8010686:	3708      	adds	r7, #8
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}

0801068c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801068c:	b480      	push	{r7}
 801068e:	b087      	sub	sp, #28
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	4613      	mov	r3, r2
 8010698:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 80106a0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80106a2:	2300      	movs	r3, #0
 80106a4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d101      	bne.n	80106b0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80106ac:	2302      	movs	r3, #2
 80106ae:	e094      	b.n	80107da <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	781a      	ldrb	r2, [r3, #0]
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	785a      	ldrb	r2, [r3, #1]
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	3302      	adds	r3, #2
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	461a      	mov	r2, r3
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	3303      	adds	r3, #3
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	021b      	lsls	r3, r3, #8
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	4313      	orrs	r3, r2
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	791a      	ldrb	r2, [r3, #4]
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	795a      	ldrb	r2, [r3, #5]
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	799a      	ldrb	r2, [r3, #6]
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	79da      	ldrb	r2, [r3, #7]
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010700:	2b00      	cmp	r3, #0
 8010702:	d004      	beq.n	801070e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801070a:	2b01      	cmp	r3, #1
 801070c:	d11b      	bne.n	8010746 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	79db      	ldrb	r3, [r3, #7]
 8010712:	2b20      	cmp	r3, #32
 8010714:	dc0f      	bgt.n	8010736 <USBH_ParseDevDesc+0xaa>
 8010716:	2b08      	cmp	r3, #8
 8010718:	db0f      	blt.n	801073a <USBH_ParseDevDesc+0xae>
 801071a:	3b08      	subs	r3, #8
 801071c:	4a32      	ldr	r2, [pc, #200]	@ (80107e8 <USBH_ParseDevDesc+0x15c>)
 801071e:	fa22 f303 	lsr.w	r3, r2, r3
 8010722:	f003 0301 	and.w	r3, r3, #1
 8010726:	2b00      	cmp	r3, #0
 8010728:	bf14      	ite	ne
 801072a:	2301      	movne	r3, #1
 801072c:	2300      	moveq	r3, #0
 801072e:	b2db      	uxtb	r3, r3
 8010730:	2b00      	cmp	r3, #0
 8010732:	d106      	bne.n	8010742 <USBH_ParseDevDesc+0xb6>
 8010734:	e001      	b.n	801073a <USBH_ParseDevDesc+0xae>
 8010736:	2b40      	cmp	r3, #64	@ 0x40
 8010738:	d003      	beq.n	8010742 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	2208      	movs	r2, #8
 801073e:	71da      	strb	r2, [r3, #7]
        break;
 8010740:	e000      	b.n	8010744 <USBH_ParseDevDesc+0xb8>
        break;
 8010742:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8010744:	e00e      	b.n	8010764 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 801074c:	2b02      	cmp	r3, #2
 801074e:	d107      	bne.n	8010760 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	79db      	ldrb	r3, [r3, #7]
 8010754:	2b08      	cmp	r3, #8
 8010756:	d005      	beq.n	8010764 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	2208      	movs	r2, #8
 801075c:	71da      	strb	r2, [r3, #7]
 801075e:	e001      	b.n	8010764 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010760:	2303      	movs	r3, #3
 8010762:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8010764:	88fb      	ldrh	r3, [r7, #6]
 8010766:	2b08      	cmp	r3, #8
 8010768:	d936      	bls.n	80107d8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	3308      	adds	r3, #8
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	461a      	mov	r2, r3
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	3309      	adds	r3, #9
 8010776:	781b      	ldrb	r3, [r3, #0]
 8010778:	021b      	lsls	r3, r3, #8
 801077a:	b29b      	uxth	r3, r3
 801077c:	4313      	orrs	r3, r2
 801077e:	b29a      	uxth	r2, r3
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	330a      	adds	r3, #10
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	461a      	mov	r2, r3
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	330b      	adds	r3, #11
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	021b      	lsls	r3, r3, #8
 8010794:	b29b      	uxth	r3, r3
 8010796:	4313      	orrs	r3, r2
 8010798:	b29a      	uxth	r2, r3
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	330c      	adds	r3, #12
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	461a      	mov	r2, r3
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	330d      	adds	r3, #13
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	021b      	lsls	r3, r3, #8
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	4313      	orrs	r3, r2
 80107b2:	b29a      	uxth	r2, r3
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	7b9a      	ldrb	r2, [r3, #14]
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	7bda      	ldrb	r2, [r3, #15]
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	7c1a      	ldrb	r2, [r3, #16]
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	7c5a      	ldrb	r2, [r3, #17]
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80107d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80107da:	4618      	mov	r0, r3
 80107dc:	371c      	adds	r7, #28
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr
 80107e6:	bf00      	nop
 80107e8:	01000101 	.word	0x01000101

080107ec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b08c      	sub	sp, #48	@ 0x30
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	4613      	mov	r3, r2
 80107f8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 8010800:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8010802:	2300      	movs	r3, #0
 8010804:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010808:	2300      	movs	r3, #0
 801080a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 801080e:	2300      	movs	r3, #0
 8010810:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d101      	bne.n	801081e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 801081a:	2302      	movs	r3, #2
 801081c:	e0da      	b.n	80109d4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8010822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	2b09      	cmp	r3, #9
 8010828:	d002      	beq.n	8010830 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 801082a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801082c:	2209      	movs	r2, #9
 801082e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	781a      	ldrb	r2, [r3, #0]
 8010834:	6a3b      	ldr	r3, [r7, #32]
 8010836:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	785a      	ldrb	r2, [r3, #1]
 801083c:	6a3b      	ldr	r3, [r7, #32]
 801083e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	3302      	adds	r3, #2
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	461a      	mov	r2, r3
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	3303      	adds	r3, #3
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	021b      	lsls	r3, r3, #8
 8010850:	b29b      	uxth	r3, r3
 8010852:	4313      	orrs	r3, r2
 8010854:	b29b      	uxth	r3, r3
 8010856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801085a:	bf28      	it	cs
 801085c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8010860:	b29a      	uxth	r2, r3
 8010862:	6a3b      	ldr	r3, [r7, #32]
 8010864:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	791a      	ldrb	r2, [r3, #4]
 801086a:	6a3b      	ldr	r3, [r7, #32]
 801086c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	795a      	ldrb	r2, [r3, #5]
 8010872:	6a3b      	ldr	r3, [r7, #32]
 8010874:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	799a      	ldrb	r2, [r3, #6]
 801087a:	6a3b      	ldr	r3, [r7, #32]
 801087c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	79da      	ldrb	r2, [r3, #7]
 8010882:	6a3b      	ldr	r3, [r7, #32]
 8010884:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	7a1a      	ldrb	r2, [r3, #8]
 801088a:	6a3b      	ldr	r3, [r7, #32]
 801088c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801088e:	88fb      	ldrh	r3, [r7, #6]
 8010890:	2b09      	cmp	r3, #9
 8010892:	f240 809d 	bls.w	80109d0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8010896:	2309      	movs	r3, #9
 8010898:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 801089a:	2300      	movs	r3, #0
 801089c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801089e:	e081      	b.n	80109a4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80108a0:	f107 0316 	add.w	r3, r7, #22
 80108a4:	4619      	mov	r1, r3
 80108a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108a8:	f000 f9e8 	bl	8010c7c <USBH_GetNextDesc>
 80108ac:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80108ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b0:	785b      	ldrb	r3, [r3, #1]
 80108b2:	2b04      	cmp	r3, #4
 80108b4:	d176      	bne.n	80109a4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80108b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	2b09      	cmp	r3, #9
 80108bc:	d002      	beq.n	80108c4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80108be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108c0:	2209      	movs	r2, #9
 80108c2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80108c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108c8:	221a      	movs	r2, #26
 80108ca:	fb02 f303 	mul.w	r3, r2, r3
 80108ce:	3308      	adds	r3, #8
 80108d0:	6a3a      	ldr	r2, [r7, #32]
 80108d2:	4413      	add	r3, r2
 80108d4:	3302      	adds	r3, #2
 80108d6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80108d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80108da:	69f8      	ldr	r0, [r7, #28]
 80108dc:	f000 f87e 	bl	80109dc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80108e0:	2300      	movs	r3, #0
 80108e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80108e6:	2300      	movs	r3, #0
 80108e8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80108ea:	e043      	b.n	8010974 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80108ec:	f107 0316 	add.w	r3, r7, #22
 80108f0:	4619      	mov	r1, r3
 80108f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108f4:	f000 f9c2 	bl	8010c7c <USBH_GetNextDesc>
 80108f8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80108fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108fc:	785b      	ldrb	r3, [r3, #1]
 80108fe:	2b05      	cmp	r3, #5
 8010900:	d138      	bne.n	8010974 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	795b      	ldrb	r3, [r3, #5]
 8010906:	2b01      	cmp	r3, #1
 8010908:	d113      	bne.n	8010932 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801090a:	69fb      	ldr	r3, [r7, #28]
 801090c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 801090e:	2b02      	cmp	r3, #2
 8010910:	d003      	beq.n	801091a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	799b      	ldrb	r3, [r3, #6]
 8010916:	2b03      	cmp	r3, #3
 8010918:	d10b      	bne.n	8010932 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801091a:	69fb      	ldr	r3, [r7, #28]
 801091c:	79db      	ldrb	r3, [r3, #7]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d10b      	bne.n	801093a <USBH_ParseCfgDesc+0x14e>
 8010922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	2b09      	cmp	r3, #9
 8010928:	d007      	beq.n	801093a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 801092a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801092c:	2209      	movs	r2, #9
 801092e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010930:	e003      	b.n	801093a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8010932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010934:	2207      	movs	r2, #7
 8010936:	701a      	strb	r2, [r3, #0]
 8010938:	e000      	b.n	801093c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801093a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801093c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010940:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010944:	3201      	adds	r2, #1
 8010946:	00d2      	lsls	r2, r2, #3
 8010948:	211a      	movs	r1, #26
 801094a:	fb01 f303 	mul.w	r3, r1, r3
 801094e:	4413      	add	r3, r2
 8010950:	3308      	adds	r3, #8
 8010952:	6a3a      	ldr	r2, [r7, #32]
 8010954:	4413      	add	r3, r2
 8010956:	3304      	adds	r3, #4
 8010958:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 801095a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801095c:	69b9      	ldr	r1, [r7, #24]
 801095e:	68f8      	ldr	r0, [r7, #12]
 8010960:	f000 f870 	bl	8010a44 <USBH_ParseEPDesc>
 8010964:	4603      	mov	r3, r0
 8010966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 801096a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801096e:	3301      	adds	r3, #1
 8010970:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	791b      	ldrb	r3, [r3, #4]
 8010978:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801097c:	429a      	cmp	r2, r3
 801097e:	d204      	bcs.n	801098a <USBH_ParseCfgDesc+0x19e>
 8010980:	6a3b      	ldr	r3, [r7, #32]
 8010982:	885a      	ldrh	r2, [r3, #2]
 8010984:	8afb      	ldrh	r3, [r7, #22]
 8010986:	429a      	cmp	r2, r3
 8010988:	d8b0      	bhi.n	80108ec <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801098a:	69fb      	ldr	r3, [r7, #28]
 801098c:	791b      	ldrb	r3, [r3, #4]
 801098e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010992:	429a      	cmp	r2, r3
 8010994:	d201      	bcs.n	801099a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8010996:	2303      	movs	r3, #3
 8010998:	e01c      	b.n	80109d4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 801099a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801099e:	3301      	adds	r3, #1
 80109a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80109a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109a8:	2b01      	cmp	r3, #1
 80109aa:	d805      	bhi.n	80109b8 <USBH_ParseCfgDesc+0x1cc>
 80109ac:	6a3b      	ldr	r3, [r7, #32]
 80109ae:	885a      	ldrh	r2, [r3, #2]
 80109b0:	8afb      	ldrh	r3, [r7, #22]
 80109b2:	429a      	cmp	r2, r3
 80109b4:	f63f af74 	bhi.w	80108a0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80109b8:	6a3b      	ldr	r3, [r7, #32]
 80109ba:	791b      	ldrb	r3, [r3, #4]
 80109bc:	2b02      	cmp	r3, #2
 80109be:	bf28      	it	cs
 80109c0:	2302      	movcs	r3, #2
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d201      	bcs.n	80109d0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80109cc:	2303      	movs	r3, #3
 80109ce:	e001      	b.n	80109d4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80109d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3730      	adds	r7, #48	@ 0x30
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80109dc:	b480      	push	{r7}
 80109de:	b083      	sub	sp, #12
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	781a      	ldrb	r2, [r3, #0]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	785a      	ldrb	r2, [r3, #1]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	789a      	ldrb	r2, [r3, #2]
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	78da      	ldrb	r2, [r3, #3]
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	3304      	adds	r3, #4
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	2b02      	cmp	r3, #2
 8010a0e:	bf28      	it	cs
 8010a10:	2302      	movcs	r3, #2
 8010a12:	b2da      	uxtb	r2, r3
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	795a      	ldrb	r2, [r3, #5]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	799a      	ldrb	r2, [r3, #6]
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	79da      	ldrb	r2, [r3, #7]
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	7a1a      	ldrb	r2, [r3, #8]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	721a      	strb	r2, [r3, #8]
}
 8010a38:	bf00      	nop
 8010a3a:	370c      	adds	r7, #12
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr

08010a44 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b087      	sub	sp, #28
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	60f8      	str	r0, [r7, #12]
 8010a4c:	60b9      	str	r1, [r7, #8]
 8010a4e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010a50:	2300      	movs	r3, #0
 8010a52:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	781a      	ldrb	r2, [r3, #0]
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	785a      	ldrb	r2, [r3, #1]
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	789a      	ldrb	r2, [r3, #2]
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	78da      	ldrb	r2, [r3, #3]
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	3304      	adds	r3, #4
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	3305      	adds	r3, #5
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	021b      	lsls	r3, r3, #8
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	4313      	orrs	r3, r2
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	799a      	ldrb	r2, [r3, #6]
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	889b      	ldrh	r3, [r3, #4]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d00a      	beq.n	8010ab4 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010aa6:	d805      	bhi.n	8010ab4 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010aac:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010ab0:	4293      	cmp	r3, r2
 8010ab2:	d901      	bls.n	8010ab8 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8010ab4:	2303      	movs	r3, #3
 8010ab6:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d136      	bne.n	8010b30 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	78db      	ldrb	r3, [r3, #3]
 8010ac6:	f003 0303 	and.w	r3, r3, #3
 8010aca:	2b02      	cmp	r3, #2
 8010acc:	d108      	bne.n	8010ae0 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	889b      	ldrh	r3, [r3, #4]
 8010ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ad6:	f240 8097 	bls.w	8010c08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010ada:	2303      	movs	r3, #3
 8010adc:	75fb      	strb	r3, [r7, #23]
 8010ade:	e093      	b.n	8010c08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	78db      	ldrb	r3, [r3, #3]
 8010ae4:	f003 0303 	and.w	r3, r3, #3
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d107      	bne.n	8010afc <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	889b      	ldrh	r3, [r3, #4]
 8010af0:	2b40      	cmp	r3, #64	@ 0x40
 8010af2:	f240 8089 	bls.w	8010c08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010af6:	2303      	movs	r3, #3
 8010af8:	75fb      	strb	r3, [r7, #23]
 8010afa:	e085      	b.n	8010c08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	78db      	ldrb	r3, [r3, #3]
 8010b00:	f003 0303 	and.w	r3, r3, #3
 8010b04:	2b01      	cmp	r3, #1
 8010b06:	d005      	beq.n	8010b14 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	78db      	ldrb	r3, [r3, #3]
 8010b0c:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010b10:	2b03      	cmp	r3, #3
 8010b12:	d10a      	bne.n	8010b2a <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	799b      	ldrb	r3, [r3, #6]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d003      	beq.n	8010b24 <USBH_ParseEPDesc+0xe0>
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	799b      	ldrb	r3, [r3, #6]
 8010b20:	2b10      	cmp	r3, #16
 8010b22:	d970      	bls.n	8010c06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010b24:	2303      	movs	r3, #3
 8010b26:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010b28:	e06d      	b.n	8010c06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010b2a:	2303      	movs	r3, #3
 8010b2c:	75fb      	strb	r3, [r7, #23]
 8010b2e:	e06b      	b.n	8010c08 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	d13c      	bne.n	8010bb4 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	78db      	ldrb	r3, [r3, #3]
 8010b3e:	f003 0303 	and.w	r3, r3, #3
 8010b42:	2b02      	cmp	r3, #2
 8010b44:	d005      	beq.n	8010b52 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	78db      	ldrb	r3, [r3, #3]
 8010b4a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d106      	bne.n	8010b60 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	889b      	ldrh	r3, [r3, #4]
 8010b56:	2b40      	cmp	r3, #64	@ 0x40
 8010b58:	d956      	bls.n	8010c08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010b5a:	2303      	movs	r3, #3
 8010b5c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010b5e:	e053      	b.n	8010c08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	78db      	ldrb	r3, [r3, #3]
 8010b64:	f003 0303 	and.w	r3, r3, #3
 8010b68:	2b01      	cmp	r3, #1
 8010b6a:	d10e      	bne.n	8010b8a <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	799b      	ldrb	r3, [r3, #6]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d007      	beq.n	8010b84 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8010b78:	2b10      	cmp	r3, #16
 8010b7a:	d803      	bhi.n	8010b84 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8010b80:	2b40      	cmp	r3, #64	@ 0x40
 8010b82:	d941      	bls.n	8010c08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010b84:	2303      	movs	r3, #3
 8010b86:	75fb      	strb	r3, [r7, #23]
 8010b88:	e03e      	b.n	8010c08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	78db      	ldrb	r3, [r3, #3]
 8010b8e:	f003 0303 	and.w	r3, r3, #3
 8010b92:	2b03      	cmp	r3, #3
 8010b94:	d10b      	bne.n	8010bae <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	799b      	ldrb	r3, [r3, #6]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d004      	beq.n	8010ba8 <USBH_ParseEPDesc+0x164>
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	889b      	ldrh	r3, [r3, #4]
 8010ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010ba6:	d32f      	bcc.n	8010c08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010ba8:	2303      	movs	r3, #3
 8010baa:	75fb      	strb	r3, [r7, #23]
 8010bac:	e02c      	b.n	8010c08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010bae:	2303      	movs	r3, #3
 8010bb0:	75fb      	strb	r3, [r7, #23]
 8010bb2:	e029      	b.n	8010c08 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010bba:	2b02      	cmp	r3, #2
 8010bbc:	d120      	bne.n	8010c00 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	78db      	ldrb	r3, [r3, #3]
 8010bc2:	f003 0303 	and.w	r3, r3, #3
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d106      	bne.n	8010bd8 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	889b      	ldrh	r3, [r3, #4]
 8010bce:	2b08      	cmp	r3, #8
 8010bd0:	d01a      	beq.n	8010c08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010bd2:	2303      	movs	r3, #3
 8010bd4:	75fb      	strb	r3, [r7, #23]
 8010bd6:	e017      	b.n	8010c08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	78db      	ldrb	r3, [r3, #3]
 8010bdc:	f003 0303 	and.w	r3, r3, #3
 8010be0:	2b03      	cmp	r3, #3
 8010be2:	d10a      	bne.n	8010bfa <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	799b      	ldrb	r3, [r3, #6]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d003      	beq.n	8010bf4 <USBH_ParseEPDesc+0x1b0>
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	889b      	ldrh	r3, [r3, #4]
 8010bf0:	2b08      	cmp	r3, #8
 8010bf2:	d909      	bls.n	8010c08 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010bf4:	2303      	movs	r3, #3
 8010bf6:	75fb      	strb	r3, [r7, #23]
 8010bf8:	e006      	b.n	8010c08 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010bfa:	2303      	movs	r3, #3
 8010bfc:	75fb      	strb	r3, [r7, #23]
 8010bfe:	e003      	b.n	8010c08 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010c00:	2303      	movs	r3, #3
 8010c02:	75fb      	strb	r3, [r7, #23]
 8010c04:	e000      	b.n	8010c08 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010c06:	bf00      	nop
  }

  return status;
 8010c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	371c      	adds	r7, #28
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr

08010c16 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010c16:	b480      	push	{r7}
 8010c18:	b087      	sub	sp, #28
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	60f8      	str	r0, [r7, #12]
 8010c1e:	60b9      	str	r1, [r7, #8]
 8010c20:	4613      	mov	r3, r2
 8010c22:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	3301      	adds	r3, #1
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	2b03      	cmp	r3, #3
 8010c2c:	d120      	bne.n	8010c70 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	1e9a      	subs	r2, r3, #2
 8010c34:	88fb      	ldrh	r3, [r7, #6]
 8010c36:	4293      	cmp	r3, r2
 8010c38:	bf28      	it	cs
 8010c3a:	4613      	movcs	r3, r2
 8010c3c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	3302      	adds	r3, #2
 8010c42:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8010c44:	2300      	movs	r3, #0
 8010c46:	82fb      	strh	r3, [r7, #22]
 8010c48:	e00b      	b.n	8010c62 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010c4a:	8afb      	ldrh	r3, [r7, #22]
 8010c4c:	68fa      	ldr	r2, [r7, #12]
 8010c4e:	4413      	add	r3, r2
 8010c50:	781a      	ldrb	r2, [r3, #0]
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	701a      	strb	r2, [r3, #0]
      pdest++;
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	3301      	adds	r3, #1
 8010c5a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010c5c:	8afb      	ldrh	r3, [r7, #22]
 8010c5e:	3302      	adds	r3, #2
 8010c60:	82fb      	strh	r3, [r7, #22]
 8010c62:	8afa      	ldrh	r2, [r7, #22]
 8010c64:	8abb      	ldrh	r3, [r7, #20]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d3ef      	bcc.n	8010c4a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	701a      	strb	r2, [r3, #0]
  }
}
 8010c70:	bf00      	nop
 8010c72:	371c      	adds	r7, #28
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b085      	sub	sp, #20
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	881b      	ldrh	r3, [r3, #0]
 8010c8a:	687a      	ldr	r2, [r7, #4]
 8010c8c:	7812      	ldrb	r2, [r2, #0]
 8010c8e:	4413      	add	r3, r2
 8010c90:	b29a      	uxth	r2, r3
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	781b      	ldrb	r3, [r3, #0]
 8010c9a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	4413      	add	r3, r2
 8010ca0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010ca2:	68fb      	ldr	r3, [r7, #12]
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3714      	adds	r7, #20
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b086      	sub	sp, #24
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	60f8      	str	r0, [r7, #12]
 8010cb8:	60b9      	str	r1, [r7, #8]
 8010cba:	4613      	mov	r3, r2
 8010cbc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	789b      	ldrb	r3, [r3, #2]
 8010cc6:	2b01      	cmp	r3, #1
 8010cc8:	d002      	beq.n	8010cd0 <USBH_CtlReq+0x20>
 8010cca:	2b02      	cmp	r3, #2
 8010ccc:	d00f      	beq.n	8010cee <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8010cce:	e027      	b.n	8010d20 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	68ba      	ldr	r2, [r7, #8]
 8010cd4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	88fa      	ldrh	r2, [r7, #6]
 8010cda:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	2201      	movs	r2, #1
 8010ce0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	2202      	movs	r2, #2
 8010ce6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010ce8:	2301      	movs	r3, #1
 8010cea:	75fb      	strb	r3, [r7, #23]
      break;
 8010cec:	e018      	b.n	8010d20 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8010cee:	68f8      	ldr	r0, [r7, #12]
 8010cf0:	f000 f81c 	bl	8010d2c <USBH_HandleControl>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010cf8:	7dfb      	ldrb	r3, [r7, #23]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d002      	beq.n	8010d04 <USBH_CtlReq+0x54>
 8010cfe:	7dfb      	ldrb	r3, [r7, #23]
 8010d00:	2b03      	cmp	r3, #3
 8010d02:	d106      	bne.n	8010d12 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	2201      	movs	r2, #1
 8010d08:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	761a      	strb	r2, [r3, #24]
      break;
 8010d10:	e005      	b.n	8010d1e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8010d12:	7dfb      	ldrb	r3, [r7, #23]
 8010d14:	2b02      	cmp	r3, #2
 8010d16:	d102      	bne.n	8010d1e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	709a      	strb	r2, [r3, #2]
      break;
 8010d1e:	bf00      	nop
  }
  return status;
 8010d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3718      	adds	r7, #24
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
	...

08010d2c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b086      	sub	sp, #24
 8010d30:	af02      	add	r7, sp, #8
 8010d32:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010d34:	2301      	movs	r3, #1
 8010d36:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	7e1b      	ldrb	r3, [r3, #24]
 8010d40:	3b01      	subs	r3, #1
 8010d42:	2b0a      	cmp	r3, #10
 8010d44:	f200 815f 	bhi.w	8011006 <USBH_HandleControl+0x2da>
 8010d48:	a201      	add	r2, pc, #4	@ (adr r2, 8010d50 <USBH_HandleControl+0x24>)
 8010d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d4e:	bf00      	nop
 8010d50:	08010d7d 	.word	0x08010d7d
 8010d54:	08010d97 	.word	0x08010d97
 8010d58:	08010e01 	.word	0x08010e01
 8010d5c:	08010e27 	.word	0x08010e27
 8010d60:	08010e5f 	.word	0x08010e5f
 8010d64:	08010e89 	.word	0x08010e89
 8010d68:	08010edb 	.word	0x08010edb
 8010d6c:	08010efd 	.word	0x08010efd
 8010d70:	08010f39 	.word	0x08010f39
 8010d74:	08010f5f 	.word	0x08010f5f
 8010d78:	08010f9d 	.word	0x08010f9d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f103 0110 	add.w	r1, r3, #16
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	795b      	ldrb	r3, [r3, #5]
 8010d86:	461a      	mov	r2, r3
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 f951 	bl	8011030 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2202      	movs	r2, #2
 8010d92:	761a      	strb	r2, [r3, #24]
      break;
 8010d94:	e142      	b.n	801101c <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	795b      	ldrb	r3, [r3, #5]
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 fcb9 	bl	8011714 <USBH_LL_GetURBState>
 8010da2:	4603      	mov	r3, r0
 8010da4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010da6:	7bbb      	ldrb	r3, [r7, #14]
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d11e      	bne.n	8010dea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	7c1b      	ldrb	r3, [r3, #16]
 8010db0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010db4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	8adb      	ldrh	r3, [r3, #22]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d00a      	beq.n	8010dd4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010dbe:	7b7b      	ldrb	r3, [r7, #13]
 8010dc0:	2b80      	cmp	r3, #128	@ 0x80
 8010dc2:	d103      	bne.n	8010dcc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2203      	movs	r2, #3
 8010dc8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010dca:	e11e      	b.n	801100a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2205      	movs	r2, #5
 8010dd0:	761a      	strb	r2, [r3, #24]
      break;
 8010dd2:	e11a      	b.n	801100a <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 8010dd4:	7b7b      	ldrb	r3, [r7, #13]
 8010dd6:	2b80      	cmp	r3, #128	@ 0x80
 8010dd8:	d103      	bne.n	8010de2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2209      	movs	r2, #9
 8010dde:	761a      	strb	r2, [r3, #24]
      break;
 8010de0:	e113      	b.n	801100a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2207      	movs	r2, #7
 8010de6:	761a      	strb	r2, [r3, #24]
      break;
 8010de8:	e10f      	b.n	801100a <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010dea:	7bbb      	ldrb	r3, [r7, #14]
 8010dec:	2b04      	cmp	r3, #4
 8010dee:	d003      	beq.n	8010df8 <USBH_HandleControl+0xcc>
 8010df0:	7bbb      	ldrb	r3, [r7, #14]
 8010df2:	2b02      	cmp	r3, #2
 8010df4:	f040 8109 	bne.w	801100a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	220b      	movs	r2, #11
 8010dfc:	761a      	strb	r2, [r3, #24]
      break;
 8010dfe:	e104      	b.n	801100a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010e06:	b29a      	uxth	r2, r3
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6899      	ldr	r1, [r3, #8]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	899a      	ldrh	r2, [r3, #12]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	791b      	ldrb	r3, [r3, #4]
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f000 f948 	bl	80110ae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2204      	movs	r2, #4
 8010e22:	761a      	strb	r2, [r3, #24]
      break;
 8010e24:	e0fa      	b.n	801101c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	791b      	ldrb	r3, [r3, #4]
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f000 fc71 	bl	8011714 <USBH_LL_GetURBState>
 8010e32:	4603      	mov	r3, r0
 8010e34:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010e36:	7bbb      	ldrb	r3, [r7, #14]
 8010e38:	2b01      	cmp	r3, #1
 8010e3a:	d102      	bne.n	8010e42 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2209      	movs	r2, #9
 8010e40:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010e42:	7bbb      	ldrb	r3, [r7, #14]
 8010e44:	2b05      	cmp	r3, #5
 8010e46:	d102      	bne.n	8010e4e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010e48:	2303      	movs	r3, #3
 8010e4a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010e4c:	e0df      	b.n	801100e <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 8010e4e:	7bbb      	ldrb	r3, [r7, #14]
 8010e50:	2b04      	cmp	r3, #4
 8010e52:	f040 80dc 	bne.w	801100e <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	220b      	movs	r2, #11
 8010e5a:	761a      	strb	r2, [r3, #24]
      break;
 8010e5c:	e0d7      	b.n	801100e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6899      	ldr	r1, [r3, #8]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	899a      	ldrh	r2, [r3, #12]
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	795b      	ldrb	r3, [r3, #5]
 8010e6a:	2001      	movs	r0, #1
 8010e6c:	9000      	str	r0, [sp, #0]
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f000 f8f8 	bl	8011064 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010e7a:	b29a      	uxth	r2, r3
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2206      	movs	r2, #6
 8010e84:	761a      	strb	r2, [r3, #24]
      break;
 8010e86:	e0c9      	b.n	801101c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	795b      	ldrb	r3, [r3, #5]
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f000 fc40 	bl	8011714 <USBH_LL_GetURBState>
 8010e94:	4603      	mov	r3, r0
 8010e96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010e98:	7bbb      	ldrb	r3, [r7, #14]
 8010e9a:	2b01      	cmp	r3, #1
 8010e9c:	d103      	bne.n	8010ea6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2207      	movs	r2, #7
 8010ea2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010ea4:	e0b5      	b.n	8011012 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 8010ea6:	7bbb      	ldrb	r3, [r7, #14]
 8010ea8:	2b05      	cmp	r3, #5
 8010eaa:	d105      	bne.n	8010eb8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	220c      	movs	r2, #12
 8010eb0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010eb2:	2303      	movs	r3, #3
 8010eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8010eb6:	e0ac      	b.n	8011012 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010eb8:	7bbb      	ldrb	r3, [r7, #14]
 8010eba:	2b02      	cmp	r3, #2
 8010ebc:	d103      	bne.n	8010ec6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2205      	movs	r2, #5
 8010ec2:	761a      	strb	r2, [r3, #24]
      break;
 8010ec4:	e0a5      	b.n	8011012 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 8010ec6:	7bbb      	ldrb	r3, [r7, #14]
 8010ec8:	2b04      	cmp	r3, #4
 8010eca:	f040 80a2 	bne.w	8011012 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	220b      	movs	r2, #11
 8010ed2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010ed4:	2302      	movs	r3, #2
 8010ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8010ed8:	e09b      	b.n	8011012 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	791b      	ldrb	r3, [r3, #4]
 8010ede:	2200      	movs	r2, #0
 8010ee0:	2100      	movs	r1, #0
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f000 f8e3 	bl	80110ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010eee:	b29a      	uxth	r2, r3
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2208      	movs	r2, #8
 8010ef8:	761a      	strb	r2, [r3, #24]

      break;
 8010efa:	e08f      	b.n	801101c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	791b      	ldrb	r3, [r3, #4]
 8010f00:	4619      	mov	r1, r3
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f000 fc06 	bl	8011714 <USBH_LL_GetURBState>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010f0c:	7bbb      	ldrb	r3, [r7, #14]
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d105      	bne.n	8010f1e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	220d      	movs	r2, #13
 8010f16:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010f1c:	e07b      	b.n	8011016 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 8010f1e:	7bbb      	ldrb	r3, [r7, #14]
 8010f20:	2b04      	cmp	r3, #4
 8010f22:	d103      	bne.n	8010f2c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	220b      	movs	r2, #11
 8010f28:	761a      	strb	r2, [r3, #24]
      break;
 8010f2a:	e074      	b.n	8011016 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 8010f2c:	7bbb      	ldrb	r3, [r7, #14]
 8010f2e:	2b05      	cmp	r3, #5
 8010f30:	d171      	bne.n	8011016 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 8010f32:	2303      	movs	r3, #3
 8010f34:	73fb      	strb	r3, [r7, #15]
      break;
 8010f36:	e06e      	b.n	8011016 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	795b      	ldrb	r3, [r3, #5]
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	9200      	str	r2, [sp, #0]
 8010f40:	2200      	movs	r2, #0
 8010f42:	2100      	movs	r1, #0
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 f88d 	bl	8011064 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010f50:	b29a      	uxth	r2, r3
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	220a      	movs	r2, #10
 8010f5a:	761a      	strb	r2, [r3, #24]
      break;
 8010f5c:	e05e      	b.n	801101c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	795b      	ldrb	r3, [r3, #5]
 8010f62:	4619      	mov	r1, r3
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f000 fbd5 	bl	8011714 <USBH_LL_GetURBState>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010f6e:	7bbb      	ldrb	r3, [r7, #14]
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	d105      	bne.n	8010f80 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8010f74:	2300      	movs	r3, #0
 8010f76:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	220d      	movs	r2, #13
 8010f7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010f7e:	e04c      	b.n	801101a <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010f80:	7bbb      	ldrb	r3, [r7, #14]
 8010f82:	2b02      	cmp	r3, #2
 8010f84:	d103      	bne.n	8010f8e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2209      	movs	r2, #9
 8010f8a:	761a      	strb	r2, [r3, #24]
      break;
 8010f8c:	e045      	b.n	801101a <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 8010f8e:	7bbb      	ldrb	r3, [r7, #14]
 8010f90:	2b04      	cmp	r3, #4
 8010f92:	d142      	bne.n	801101a <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	220b      	movs	r2, #11
 8010f98:	761a      	strb	r2, [r3, #24]
      break;
 8010f9a:	e03e      	b.n	801101a <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	7e5b      	ldrb	r3, [r3, #25]
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	b2da      	uxtb	r2, r3
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	765a      	strb	r2, [r3, #25]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	7e5b      	ldrb	r3, [r3, #25]
 8010fac:	2b02      	cmp	r3, #2
 8010fae:	d806      	bhi.n	8010fbe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2201      	movs	r2, #1
 8010fba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010fbc:	e02e      	b.n	801101c <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 8010fc4:	2106      	movs	r1, #6
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 8010fd0:	4815      	ldr	r0, [pc, #84]	@ (8011028 <USBH_HandleControl+0x2fc>)
 8010fd2:	f000 fdcf 	bl	8011b74 <iprintf>
 8010fd6:	4815      	ldr	r0, [pc, #84]	@ (801102c <USBH_HandleControl+0x300>)
 8010fd8:	f000 fdcc 	bl	8011b74 <iprintf>
 8010fdc:	200a      	movs	r0, #10
 8010fde:	f000 fddb 	bl	8011b98 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	795b      	ldrb	r3, [r3, #5]
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f000 f8ee 	bl	80111ca <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	791b      	ldrb	r3, [r3, #4]
 8010ff2:	4619      	mov	r1, r3
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 f8e8 	bl	80111ca <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8011000:	2302      	movs	r3, #2
 8011002:	73fb      	strb	r3, [r7, #15]
      break;
 8011004:	e00a      	b.n	801101c <USBH_HandleControl+0x2f0>

    default:
      break;
 8011006:	bf00      	nop
 8011008:	e008      	b.n	801101c <USBH_HandleControl+0x2f0>
      break;
 801100a:	bf00      	nop
 801100c:	e006      	b.n	801101c <USBH_HandleControl+0x2f0>
      break;
 801100e:	bf00      	nop
 8011010:	e004      	b.n	801101c <USBH_HandleControl+0x2f0>
      break;
 8011012:	bf00      	nop
 8011014:	e002      	b.n	801101c <USBH_HandleControl+0x2f0>
      break;
 8011016:	bf00      	nop
 8011018:	e000      	b.n	801101c <USBH_HandleControl+0x2f0>
      break;
 801101a:	bf00      	nop
  }

  return status;
 801101c:	7bfb      	ldrb	r3, [r7, #15]
}
 801101e:	4618      	mov	r0, r3
 8011020:	3710      	adds	r7, #16
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	08013324 	.word	0x08013324
 801102c:	08013400 	.word	0x08013400

08011030 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b088      	sub	sp, #32
 8011034:	af04      	add	r7, sp, #16
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	60b9      	str	r1, [r7, #8]
 801103a:	4613      	mov	r3, r2
 801103c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801103e:	79f9      	ldrb	r1, [r7, #7]
 8011040:	2300      	movs	r3, #0
 8011042:	9303      	str	r3, [sp, #12]
 8011044:	2308      	movs	r3, #8
 8011046:	9302      	str	r3, [sp, #8]
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	9301      	str	r3, [sp, #4]
 801104c:	2300      	movs	r3, #0
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	2300      	movs	r3, #0
 8011052:	2200      	movs	r2, #0
 8011054:	68f8      	ldr	r0, [r7, #12]
 8011056:	f000 fb2c 	bl	80116b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801105a:	2300      	movs	r3, #0
}
 801105c:	4618      	mov	r0, r3
 801105e:	3710      	adds	r7, #16
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b088      	sub	sp, #32
 8011068:	af04      	add	r7, sp, #16
 801106a:	60f8      	str	r0, [r7, #12]
 801106c:	60b9      	str	r1, [r7, #8]
 801106e:	4611      	mov	r1, r2
 8011070:	461a      	mov	r2, r3
 8011072:	460b      	mov	r3, r1
 8011074:	80fb      	strh	r3, [r7, #6]
 8011076:	4613      	mov	r3, r2
 8011078:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8011080:	2b00      	cmp	r3, #0
 8011082:	d001      	beq.n	8011088 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8011084:	2300      	movs	r3, #0
 8011086:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011088:	7979      	ldrb	r1, [r7, #5]
 801108a:	7e3b      	ldrb	r3, [r7, #24]
 801108c:	9303      	str	r3, [sp, #12]
 801108e:	88fb      	ldrh	r3, [r7, #6]
 8011090:	9302      	str	r3, [sp, #8]
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	9301      	str	r3, [sp, #4]
 8011096:	2301      	movs	r3, #1
 8011098:	9300      	str	r3, [sp, #0]
 801109a:	2300      	movs	r3, #0
 801109c:	2200      	movs	r2, #0
 801109e:	68f8      	ldr	r0, [r7, #12]
 80110a0:	f000 fb07 	bl	80116b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80110a4:	2300      	movs	r3, #0
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	3710      	adds	r7, #16
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}

080110ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80110ae:	b580      	push	{r7, lr}
 80110b0:	b088      	sub	sp, #32
 80110b2:	af04      	add	r7, sp, #16
 80110b4:	60f8      	str	r0, [r7, #12]
 80110b6:	60b9      	str	r1, [r7, #8]
 80110b8:	4611      	mov	r1, r2
 80110ba:	461a      	mov	r2, r3
 80110bc:	460b      	mov	r3, r1
 80110be:	80fb      	strh	r3, [r7, #6]
 80110c0:	4613      	mov	r3, r2
 80110c2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80110c4:	7979      	ldrb	r1, [r7, #5]
 80110c6:	2300      	movs	r3, #0
 80110c8:	9303      	str	r3, [sp, #12]
 80110ca:	88fb      	ldrh	r3, [r7, #6]
 80110cc:	9302      	str	r3, [sp, #8]
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	9301      	str	r3, [sp, #4]
 80110d2:	2301      	movs	r3, #1
 80110d4:	9300      	str	r3, [sp, #0]
 80110d6:	2300      	movs	r3, #0
 80110d8:	2201      	movs	r2, #1
 80110da:	68f8      	ldr	r0, [r7, #12]
 80110dc:	f000 fae9 	bl	80116b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80110e0:	2300      	movs	r3, #0

}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3710      	adds	r7, #16
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}

080110ea <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 80110ea:	b580      	push	{r7, lr}
 80110ec:	b088      	sub	sp, #32
 80110ee:	af04      	add	r7, sp, #16
 80110f0:	60f8      	str	r0, [r7, #12]
 80110f2:	60b9      	str	r1, [r7, #8]
 80110f4:	4611      	mov	r1, r2
 80110f6:	461a      	mov	r2, r3
 80110f8:	460b      	mov	r3, r1
 80110fa:	71fb      	strb	r3, [r7, #7]
 80110fc:	4613      	mov	r3, r2
 80110fe:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011100:	79fb      	ldrb	r3, [r7, #7]
 8011102:	b29b      	uxth	r3, r3
 8011104:	79b9      	ldrb	r1, [r7, #6]
 8011106:	2200      	movs	r2, #0
 8011108:	9203      	str	r2, [sp, #12]
 801110a:	9302      	str	r3, [sp, #8]
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	9301      	str	r3, [sp, #4]
 8011110:	2301      	movs	r3, #1
 8011112:	9300      	str	r3, [sp, #0]
 8011114:	2303      	movs	r3, #3
 8011116:	2201      	movs	r2, #1
 8011118:	68f8      	ldr	r0, [r7, #12]
 801111a:	f000 faca 	bl	80116b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 801111e:	2300      	movs	r3, #0
}
 8011120:	4618      	mov	r0, r3
 8011122:	3710      	adds	r7, #16
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b086      	sub	sp, #24
 801112c:	af04      	add	r7, sp, #16
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	4608      	mov	r0, r1
 8011132:	4611      	mov	r1, r2
 8011134:	461a      	mov	r2, r3
 8011136:	4603      	mov	r3, r0
 8011138:	70fb      	strb	r3, [r7, #3]
 801113a:	460b      	mov	r3, r1
 801113c:	70bb      	strb	r3, [r7, #2]
 801113e:	4613      	mov	r3, r2
 8011140:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8011142:	7878      	ldrb	r0, [r7, #1]
 8011144:	78ba      	ldrb	r2, [r7, #2]
 8011146:	78f9      	ldrb	r1, [r7, #3]
 8011148:	8b3b      	ldrh	r3, [r7, #24]
 801114a:	9302      	str	r3, [sp, #8]
 801114c:	7d3b      	ldrb	r3, [r7, #20]
 801114e:	9301      	str	r3, [sp, #4]
 8011150:	7c3b      	ldrb	r3, [r7, #16]
 8011152:	9300      	str	r3, [sp, #0]
 8011154:	4603      	mov	r3, r0
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f000 fa5d 	bl	8011616 <USBH_LL_OpenPipe>

  return USBH_OK;
 801115c:	2300      	movs	r3, #0
}
 801115e:	4618      	mov	r0, r3
 8011160:	3708      	adds	r7, #8
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}

08011166 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8011166:	b580      	push	{r7, lr}
 8011168:	b082      	sub	sp, #8
 801116a:	af00      	add	r7, sp, #0
 801116c:	6078      	str	r0, [r7, #4]
 801116e:	460b      	mov	r3, r1
 8011170:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8011172:	78fb      	ldrb	r3, [r7, #3]
 8011174:	4619      	mov	r1, r3
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f000 fa7c 	bl	8011674 <USBH_LL_ClosePipe>

  return USBH_OK;
 801117c:	2300      	movs	r3, #0
}
 801117e:	4618      	mov	r0, r3
 8011180:	3708      	adds	r7, #8
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}

08011186 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011186:	b580      	push	{r7, lr}
 8011188:	b084      	sub	sp, #16
 801118a:	af00      	add	r7, sp, #0
 801118c:	6078      	str	r0, [r7, #4]
 801118e:	460b      	mov	r3, r1
 8011190:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f000 f839 	bl	801120a <USBH_GetFreePipe>
 8011198:	4603      	mov	r3, r0
 801119a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801119c:	89fb      	ldrh	r3, [r7, #14]
 801119e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80111a2:	4293      	cmp	r3, r2
 80111a4:	d00b      	beq.n	80111be <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80111a6:	78fa      	ldrb	r2, [r7, #3]
 80111a8:	89fb      	ldrh	r3, [r7, #14]
 80111aa:	f003 030f 	and.w	r3, r3, #15
 80111ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80111b2:	6879      	ldr	r1, [r7, #4]
 80111b4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80111b8:	009b      	lsls	r3, r3, #2
 80111ba:	440b      	add	r3, r1
 80111bc:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80111be:	89fb      	ldrh	r3, [r7, #14]
 80111c0:	b2db      	uxtb	r3, r3
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}

080111ca <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80111ca:	b480      	push	{r7}
 80111cc:	b083      	sub	sp, #12
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
 80111d2:	460b      	mov	r3, r1
 80111d4:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80111d6:	78fb      	ldrb	r3, [r7, #3]
 80111d8:	2b0f      	cmp	r3, #15
 80111da:	d80f      	bhi.n	80111fc <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80111dc:	78fb      	ldrb	r3, [r7, #3]
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80111e4:	009b      	lsls	r3, r3, #2
 80111e6:	4413      	add	r3, r2
 80111e8:	685a      	ldr	r2, [r3, #4]
 80111ea:	78fb      	ldrb	r3, [r7, #3]
 80111ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80111f0:	6879      	ldr	r1, [r7, #4]
 80111f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	440b      	add	r3, r1
 80111fa:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80111fc:	2300      	movs	r3, #0
}
 80111fe:	4618      	mov	r0, r3
 8011200:	370c      	adds	r7, #12
 8011202:	46bd      	mov	sp, r7
 8011204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011208:	4770      	bx	lr

0801120a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801120a:	b480      	push	{r7}
 801120c:	b085      	sub	sp, #20
 801120e:	af00      	add	r7, sp, #0
 8011210:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011212:	2300      	movs	r3, #0
 8011214:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011216:	2300      	movs	r3, #0
 8011218:	73fb      	strb	r3, [r7, #15]
 801121a:	e010      	b.n	801123e <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801121c:	7bfb      	ldrb	r3, [r7, #15]
 801121e:	687a      	ldr	r2, [r7, #4]
 8011220:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011224:	009b      	lsls	r3, r3, #2
 8011226:	4413      	add	r3, r2
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801122e:	2b00      	cmp	r3, #0
 8011230:	d102      	bne.n	8011238 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8011232:	7bfb      	ldrb	r3, [r7, #15]
 8011234:	b29b      	uxth	r3, r3
 8011236:	e007      	b.n	8011248 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011238:	7bfb      	ldrb	r3, [r7, #15]
 801123a:	3301      	adds	r3, #1
 801123c:	73fb      	strb	r3, [r7, #15]
 801123e:	7bfb      	ldrb	r3, [r7, #15]
 8011240:	2b0f      	cmp	r3, #15
 8011242:	d9eb      	bls.n	801121c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011244:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8011248:	4618      	mov	r0, r3
 801124a:	3714      	adds	r7, #20
 801124c:	46bd      	mov	sp, r7
 801124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011252:	4770      	bx	lr

08011254 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8011258:	2200      	movs	r2, #0
 801125a:	490e      	ldr	r1, [pc, #56]	@ (8011294 <MX_USB_HOST_Init+0x40>)
 801125c:	480e      	ldr	r0, [pc, #56]	@ (8011298 <MX_USB_HOST_Init+0x44>)
 801125e:	f7fe f933 	bl	800f4c8 <USBH_Init>
 8011262:	4603      	mov	r3, r0
 8011264:	2b00      	cmp	r3, #0
 8011266:	d001      	beq.n	801126c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011268:	f7f1 fbe2 	bl	8002a30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASS) != USBH_OK)
 801126c:	490b      	ldr	r1, [pc, #44]	@ (801129c <MX_USB_HOST_Init+0x48>)
 801126e:	480a      	ldr	r0, [pc, #40]	@ (8011298 <MX_USB_HOST_Init+0x44>)
 8011270:	f7fe f9e8 	bl	800f644 <USBH_RegisterClass>
 8011274:	4603      	mov	r3, r0
 8011276:	2b00      	cmp	r3, #0
 8011278:	d001      	beq.n	801127e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801127a:	f7f1 fbd9 	bl	8002a30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 801127e:	4806      	ldr	r0, [pc, #24]	@ (8011298 <MX_USB_HOST_Init+0x44>)
 8011280:	f7fe fad0 	bl	800f824 <USBH_Start>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d001      	beq.n	801128e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801128a:	f7f1 fbd1 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801128e:	bf00      	nop
 8011290:	bd80      	pop	{r7, pc}
 8011292:	bf00      	nop
 8011294:	080112b5 	.word	0x080112b5
 8011298:	20009304 	.word	0x20009304
 801129c:	20000270 	.word	0x20000270

080112a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 80112a4:	4802      	ldr	r0, [pc, #8]	@ (80112b0 <MX_USB_HOST_Process+0x10>)
 80112a6:	f7fe facd 	bl	800f844 <USBH_Process>
}
 80112aa:	bf00      	nop
 80112ac:	bd80      	pop	{r7, pc}
 80112ae:	bf00      	nop
 80112b0:	20009304 	.word	0x20009304

080112b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80112b4:	b480      	push	{r7}
 80112b6:	b083      	sub	sp, #12
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	460b      	mov	r3, r1
 80112be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80112c0:	78fb      	ldrb	r3, [r7, #3]
 80112c2:	3b01      	subs	r3, #1
 80112c4:	2b04      	cmp	r3, #4
 80112c6:	d819      	bhi.n	80112fc <USBH_UserProcess+0x48>
 80112c8:	a201      	add	r2, pc, #4	@ (adr r2, 80112d0 <USBH_UserProcess+0x1c>)
 80112ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ce:	bf00      	nop
 80112d0:	080112fd 	.word	0x080112fd
 80112d4:	080112ed 	.word	0x080112ed
 80112d8:	080112fd 	.word	0x080112fd
 80112dc:	080112f5 	.word	0x080112f5
 80112e0:	080112e5 	.word	0x080112e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80112e4:	4b09      	ldr	r3, [pc, #36]	@ (801130c <USBH_UserProcess+0x58>)
 80112e6:	2203      	movs	r2, #3
 80112e8:	701a      	strb	r2, [r3, #0]
  break;
 80112ea:	e008      	b.n	80112fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80112ec:	4b07      	ldr	r3, [pc, #28]	@ (801130c <USBH_UserProcess+0x58>)
 80112ee:	2202      	movs	r2, #2
 80112f0:	701a      	strb	r2, [r3, #0]
  break;
 80112f2:	e004      	b.n	80112fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80112f4:	4b05      	ldr	r3, [pc, #20]	@ (801130c <USBH_UserProcess+0x58>)
 80112f6:	2201      	movs	r2, #1
 80112f8:	701a      	strb	r2, [r3, #0]
  break;
 80112fa:	e000      	b.n	80112fe <USBH_UserProcess+0x4a>

  default:
  break;
 80112fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80112fe:	bf00      	nop
 8011300:	370c      	adds	r7, #12
 8011302:	46bd      	mov	sp, r7
 8011304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011308:	4770      	bx	lr
 801130a:	bf00      	nop
 801130c:	2000a094 	.word	0x2000a094

08011310 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b08a      	sub	sp, #40	@ 0x28
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011318:	f107 0314 	add.w	r3, r7, #20
 801131c:	2200      	movs	r2, #0
 801131e:	601a      	str	r2, [r3, #0]
 8011320:	605a      	str	r2, [r3, #4]
 8011322:	609a      	str	r2, [r3, #8]
 8011324:	60da      	str	r2, [r3, #12]
 8011326:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4a24      	ldr	r2, [pc, #144]	@ (80113c0 <HAL_HCD_MspInit+0xb0>)
 801132e:	4293      	cmp	r3, r2
 8011330:	d141      	bne.n	80113b6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011332:	2300      	movs	r3, #0
 8011334:	613b      	str	r3, [r7, #16]
 8011336:	4b23      	ldr	r3, [pc, #140]	@ (80113c4 <HAL_HCD_MspInit+0xb4>)
 8011338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801133a:	4a22      	ldr	r2, [pc, #136]	@ (80113c4 <HAL_HCD_MspInit+0xb4>)
 801133c:	f043 0302 	orr.w	r3, r3, #2
 8011340:	6313      	str	r3, [r2, #48]	@ 0x30
 8011342:	4b20      	ldr	r3, [pc, #128]	@ (80113c4 <HAL_HCD_MspInit+0xb4>)
 8011344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011346:	f003 0302 	and.w	r3, r3, #2
 801134a:	613b      	str	r3, [r7, #16]
 801134c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 801134e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8011352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011354:	2302      	movs	r3, #2
 8011356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011358:	2300      	movs	r3, #0
 801135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801135c:	2300      	movs	r3, #0
 801135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8011360:	230c      	movs	r3, #12
 8011362:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011364:	f107 0314 	add.w	r3, r7, #20
 8011368:	4619      	mov	r1, r3
 801136a:	4817      	ldr	r0, [pc, #92]	@ (80113c8 <HAL_HCD_MspInit+0xb8>)
 801136c:	f7f5 f8ea 	bl	8006544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8011370:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011376:	2300      	movs	r3, #0
 8011378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801137a:	2300      	movs	r3, #0
 801137c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 801137e:	f107 0314 	add.w	r3, r7, #20
 8011382:	4619      	mov	r1, r3
 8011384:	4810      	ldr	r0, [pc, #64]	@ (80113c8 <HAL_HCD_MspInit+0xb8>)
 8011386:	f7f5 f8dd 	bl	8006544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801138a:	2300      	movs	r3, #0
 801138c:	60fb      	str	r3, [r7, #12]
 801138e:	4b0d      	ldr	r3, [pc, #52]	@ (80113c4 <HAL_HCD_MspInit+0xb4>)
 8011390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011392:	4a0c      	ldr	r2, [pc, #48]	@ (80113c4 <HAL_HCD_MspInit+0xb4>)
 8011394:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011398:	6313      	str	r3, [r2, #48]	@ 0x30
 801139a:	4b0a      	ldr	r3, [pc, #40]	@ (80113c4 <HAL_HCD_MspInit+0xb4>)
 801139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801139e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80113a2:	60fb      	str	r3, [r7, #12]
 80113a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80113a6:	2200      	movs	r2, #0
 80113a8:	2100      	movs	r1, #0
 80113aa:	204d      	movs	r0, #77	@ 0x4d
 80113ac:	f7f4 f916 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80113b0:	204d      	movs	r0, #77	@ 0x4d
 80113b2:	f7f4 f92f 	bl	8005614 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80113b6:	bf00      	nop
 80113b8:	3728      	adds	r7, #40	@ 0x28
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop
 80113c0:	40040000 	.word	0x40040000
 80113c4:	40023800 	.word	0x40023800
 80113c8:	40020400 	.word	0x40020400

080113cc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80113da:	4618      	mov	r0, r3
 80113dc:	f7fe ff5d 	bl	801029a <USBH_LL_IncTimer>
}
 80113e0:	bf00      	nop
 80113e2:	3708      	adds	r7, #8
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7fe ff95 	bl	8010326 <USBH_LL_Connect>
}
 80113fc:	bf00      	nop
 80113fe:	3708      	adds	r7, #8
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}

08011404 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b082      	sub	sp, #8
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011412:	4618      	mov	r0, r3
 8011414:	f7fe ff9e 	bl	8010354 <USBH_LL_Disconnect>
}
 8011418:	bf00      	nop
 801141a:	3708      	adds	r7, #8
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011420:	b480      	push	{r7}
 8011422:	b083      	sub	sp, #12
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	460b      	mov	r3, r1
 801142a:	70fb      	strb	r3, [r7, #3]
 801142c:	4613      	mov	r3, r2
 801142e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011430:	bf00      	nop
 8011432:	370c      	adds	r7, #12
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr

0801143c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801144a:	4618      	mov	r0, r3
 801144c:	f7fe ff4f 	bl	80102ee <USBH_LL_PortEnabled>
}
 8011450:	bf00      	nop
 8011452:	3708      	adds	r7, #8
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011466:	4618      	mov	r0, r3
 8011468:	f7fe ff4f 	bl	801030a <USBH_LL_PortDisabled>
}
 801146c:	bf00      	nop
 801146e:	3708      	adds	r7, #8
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}

08011474 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 8011482:	2b00      	cmp	r3, #0
 8011484:	d132      	bne.n	80114ec <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8011486:	4a1c      	ldr	r2, [pc, #112]	@ (80114f8 <USBH_LL_Init+0x84>)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	4a19      	ldr	r2, [pc, #100]	@ (80114f8 <USBH_LL_Init+0x84>)
 8011492:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8011496:	4b18      	ldr	r3, [pc, #96]	@ (80114f8 <USBH_LL_Init+0x84>)
 8011498:	4a18      	ldr	r2, [pc, #96]	@ (80114fc <USBH_LL_Init+0x88>)
 801149a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 801149c:	4b16      	ldr	r3, [pc, #88]	@ (80114f8 <USBH_LL_Init+0x84>)
 801149e:	220c      	movs	r2, #12
 80114a0:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80114a2:	4b15      	ldr	r3, [pc, #84]	@ (80114f8 <USBH_LL_Init+0x84>)
 80114a4:	2201      	movs	r2, #1
 80114a6:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80114a8:	4b13      	ldr	r3, [pc, #76]	@ (80114f8 <USBH_LL_Init+0x84>)
 80114aa:	2200      	movs	r2, #0
 80114ac:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80114ae:	4b12      	ldr	r3, [pc, #72]	@ (80114f8 <USBH_LL_Init+0x84>)
 80114b0:	2202      	movs	r2, #2
 80114b2:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80114b4:	4b10      	ldr	r3, [pc, #64]	@ (80114f8 <USBH_LL_Init+0x84>)
 80114b6:	2200      	movs	r2, #0
 80114b8:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80114ba:	4b0f      	ldr	r3, [pc, #60]	@ (80114f8 <USBH_LL_Init+0x84>)
 80114bc:	2200      	movs	r2, #0
 80114be:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80114c0:	4b0d      	ldr	r3, [pc, #52]	@ (80114f8 <USBH_LL_Init+0x84>)
 80114c2:	2200      	movs	r2, #0
 80114c4:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80114c6:	4b0c      	ldr	r3, [pc, #48]	@ (80114f8 <USBH_LL_Init+0x84>)
 80114c8:	2200      	movs	r2, #0
 80114ca:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80114cc:	480a      	ldr	r0, [pc, #40]	@ (80114f8 <USBH_LL_Init+0x84>)
 80114ce:	f7f5 fb0a 	bl	8006ae6 <HAL_HCD_Init>
 80114d2:	4603      	mov	r3, r0
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d001      	beq.n	80114dc <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 80114d8:	f7f1 faaa 	bl	8002a30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 80114dc:	4806      	ldr	r0, [pc, #24]	@ (80114f8 <USBH_LL_Init+0x84>)
 80114de:	f7f5 ff6b 	bl	80073b8 <HAL_HCD_GetCurrentFrame>
 80114e2:	4603      	mov	r3, r0
 80114e4:	4619      	mov	r1, r3
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f7fe fec8 	bl	801027c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80114ec:	2300      	movs	r3, #0
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3708      	adds	r7, #8
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}
 80114f6:	bf00      	nop
 80114f8:	2000a098 	.word	0x2000a098
 80114fc:	40040000 	.word	0x40040000

08011500 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b084      	sub	sp, #16
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011508:	2300      	movs	r3, #0
 801150a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801150c:	2300      	movs	r3, #0
 801150e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8011516:	4618      	mov	r0, r3
 8011518:	f7f5 fed6 	bl	80072c8 <HAL_HCD_Start>
 801151c:	4603      	mov	r3, r0
 801151e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011520:	7bfb      	ldrb	r3, [r7, #15]
 8011522:	4618      	mov	r0, r3
 8011524:	f000 f95e 	bl	80117e4 <USBH_Get_USB_Status>
 8011528:	4603      	mov	r3, r0
 801152a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801152c:	7bbb      	ldrb	r3, [r7, #14]
}
 801152e:	4618      	mov	r0, r3
 8011530:	3710      	adds	r7, #16
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}

08011536 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011536:	b580      	push	{r7, lr}
 8011538:	b084      	sub	sp, #16
 801153a:	af00      	add	r7, sp, #0
 801153c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801153e:	2300      	movs	r3, #0
 8011540:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011542:	2300      	movs	r3, #0
 8011544:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 801154c:	4618      	mov	r0, r3
 801154e:	f7f5 fede 	bl	800730e <HAL_HCD_Stop>
 8011552:	4603      	mov	r3, r0
 8011554:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011556:	7bfb      	ldrb	r3, [r7, #15]
 8011558:	4618      	mov	r0, r3
 801155a:	f000 f943 	bl	80117e4 <USBH_Get_USB_Status>
 801155e:	4603      	mov	r3, r0
 8011560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011562:	7bbb      	ldrb	r3, [r7, #14]
}
 8011564:	4618      	mov	r0, r3
 8011566:	3710      	adds	r7, #16
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011574:	2301      	movs	r3, #1
 8011576:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 801157e:	4618      	mov	r0, r3
 8011580:	f7f5 ff28 	bl	80073d4 <HAL_HCD_GetCurrentSpeed>
 8011584:	4603      	mov	r3, r0
 8011586:	2b02      	cmp	r3, #2
 8011588:	d00c      	beq.n	80115a4 <USBH_LL_GetSpeed+0x38>
 801158a:	2b02      	cmp	r3, #2
 801158c:	d80d      	bhi.n	80115aa <USBH_LL_GetSpeed+0x3e>
 801158e:	2b00      	cmp	r3, #0
 8011590:	d002      	beq.n	8011598 <USBH_LL_GetSpeed+0x2c>
 8011592:	2b01      	cmp	r3, #1
 8011594:	d003      	beq.n	801159e <USBH_LL_GetSpeed+0x32>
 8011596:	e008      	b.n	80115aa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011598:	2300      	movs	r3, #0
 801159a:	73fb      	strb	r3, [r7, #15]
    break;
 801159c:	e008      	b.n	80115b0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801159e:	2301      	movs	r3, #1
 80115a0:	73fb      	strb	r3, [r7, #15]
    break;
 80115a2:	e005      	b.n	80115b0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80115a4:	2302      	movs	r3, #2
 80115a6:	73fb      	strb	r3, [r7, #15]
    break;
 80115a8:	e002      	b.n	80115b0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80115aa:	2301      	movs	r3, #1
 80115ac:	73fb      	strb	r3, [r7, #15]
    break;
 80115ae:	bf00      	nop
  }
  return  speed;
 80115b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3710      	adds	r7, #16
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}

080115ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80115ba:	b580      	push	{r7, lr}
 80115bc:	b084      	sub	sp, #16
 80115be:	af00      	add	r7, sp, #0
 80115c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115c2:	2300      	movs	r3, #0
 80115c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80115c6:	2300      	movs	r3, #0
 80115c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7f5 feb9 	bl	8007348 <HAL_HCD_ResetPort>
 80115d6:	4603      	mov	r3, r0
 80115d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80115da:	7bfb      	ldrb	r3, [r7, #15]
 80115dc:	4618      	mov	r0, r3
 80115de:	f000 f901 	bl	80117e4 <USBH_Get_USB_Status>
 80115e2:	4603      	mov	r3, r0
 80115e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3710      	adds	r7, #16
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}

080115f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	460b      	mov	r3, r1
 80115fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8011602:	78fa      	ldrb	r2, [r7, #3]
 8011604:	4611      	mov	r1, r2
 8011606:	4618      	mov	r0, r3
 8011608:	f7f5 fec1 	bl	800738e <HAL_HCD_HC_GetXferCount>
 801160c:	4603      	mov	r3, r0
}
 801160e:	4618      	mov	r0, r3
 8011610:	3708      	adds	r7, #8
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}

08011616 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011616:	b590      	push	{r4, r7, lr}
 8011618:	b089      	sub	sp, #36	@ 0x24
 801161a:	af04      	add	r7, sp, #16
 801161c:	6078      	str	r0, [r7, #4]
 801161e:	4608      	mov	r0, r1
 8011620:	4611      	mov	r1, r2
 8011622:	461a      	mov	r2, r3
 8011624:	4603      	mov	r3, r0
 8011626:	70fb      	strb	r3, [r7, #3]
 8011628:	460b      	mov	r3, r1
 801162a:	70bb      	strb	r3, [r7, #2]
 801162c:	4613      	mov	r3, r2
 801162e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011630:	2300      	movs	r3, #0
 8011632:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011634:	2300      	movs	r3, #0
 8011636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 801163e:	787c      	ldrb	r4, [r7, #1]
 8011640:	78ba      	ldrb	r2, [r7, #2]
 8011642:	78f9      	ldrb	r1, [r7, #3]
 8011644:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011646:	9302      	str	r3, [sp, #8]
 8011648:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801164c:	9301      	str	r3, [sp, #4]
 801164e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011652:	9300      	str	r3, [sp, #0]
 8011654:	4623      	mov	r3, r4
 8011656:	f7f5 faad 	bl	8006bb4 <HAL_HCD_HC_Init>
 801165a:	4603      	mov	r3, r0
 801165c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801165e:	7bfb      	ldrb	r3, [r7, #15]
 8011660:	4618      	mov	r0, r3
 8011662:	f000 f8bf 	bl	80117e4 <USBH_Get_USB_Status>
 8011666:	4603      	mov	r3, r0
 8011668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801166a:	7bbb      	ldrb	r3, [r7, #14]
}
 801166c:	4618      	mov	r0, r3
 801166e:	3714      	adds	r7, #20
 8011670:	46bd      	mov	sp, r7
 8011672:	bd90      	pop	{r4, r7, pc}

08011674 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b084      	sub	sp, #16
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	460b      	mov	r3, r1
 801167e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011680:	2300      	movs	r3, #0
 8011682:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011684:	2300      	movs	r3, #0
 8011686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 801168e:	78fa      	ldrb	r2, [r7, #3]
 8011690:	4611      	mov	r1, r2
 8011692:	4618      	mov	r0, r3
 8011694:	f7f5 fb46 	bl	8006d24 <HAL_HCD_HC_Halt>
 8011698:	4603      	mov	r3, r0
 801169a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801169c:	7bfb      	ldrb	r3, [r7, #15]
 801169e:	4618      	mov	r0, r3
 80116a0:	f000 f8a0 	bl	80117e4 <USBH_Get_USB_Status>
 80116a4:	4603      	mov	r3, r0
 80116a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3710      	adds	r7, #16
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}

080116b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80116b2:	b590      	push	{r4, r7, lr}
 80116b4:	b089      	sub	sp, #36	@ 0x24
 80116b6:	af04      	add	r7, sp, #16
 80116b8:	6078      	str	r0, [r7, #4]
 80116ba:	4608      	mov	r0, r1
 80116bc:	4611      	mov	r1, r2
 80116be:	461a      	mov	r2, r3
 80116c0:	4603      	mov	r3, r0
 80116c2:	70fb      	strb	r3, [r7, #3]
 80116c4:	460b      	mov	r3, r1
 80116c6:	70bb      	strb	r3, [r7, #2]
 80116c8:	4613      	mov	r3, r2
 80116ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116cc:	2300      	movs	r3, #0
 80116ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80116d0:	2300      	movs	r3, #0
 80116d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 80116da:	787c      	ldrb	r4, [r7, #1]
 80116dc:	78ba      	ldrb	r2, [r7, #2]
 80116de:	78f9      	ldrb	r1, [r7, #3]
 80116e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80116e4:	9303      	str	r3, [sp, #12]
 80116e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80116e8:	9302      	str	r3, [sp, #8]
 80116ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ec:	9301      	str	r3, [sp, #4]
 80116ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80116f2:	9300      	str	r3, [sp, #0]
 80116f4:	4623      	mov	r3, r4
 80116f6:	f7f5 fb39 	bl	8006d6c <HAL_HCD_HC_SubmitRequest>
 80116fa:	4603      	mov	r3, r0
 80116fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80116fe:	7bfb      	ldrb	r3, [r7, #15]
 8011700:	4618      	mov	r0, r3
 8011702:	f000 f86f 	bl	80117e4 <USBH_Get_USB_Status>
 8011706:	4603      	mov	r3, r0
 8011708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801170a:	7bbb      	ldrb	r3, [r7, #14]
}
 801170c:	4618      	mov	r0, r3
 801170e:	3714      	adds	r7, #20
 8011710:	46bd      	mov	sp, r7
 8011712:	bd90      	pop	{r4, r7, pc}

08011714 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	460b      	mov	r3, r1
 801171e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8011726:	78fa      	ldrb	r2, [r7, #3]
 8011728:	4611      	mov	r1, r2
 801172a:	4618      	mov	r0, r3
 801172c:	f7f5 fe1a 	bl	8007364 <HAL_HCD_HC_GetURBState>
 8011730:	4603      	mov	r3, r0
}
 8011732:	4618      	mov	r0, r3
 8011734:	3708      	adds	r7, #8
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}

0801173a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801173a:	b580      	push	{r7, lr}
 801173c:	b082      	sub	sp, #8
 801173e:	af00      	add	r7, sp, #0
 8011740:	6078      	str	r0, [r7, #4]
 8011742:	460b      	mov	r3, r1
 8011744:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 801174c:	2b00      	cmp	r3, #0
 801174e:	d103      	bne.n	8011758 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8011750:	78fb      	ldrb	r3, [r7, #3]
 8011752:	4618      	mov	r0, r3
 8011754:	f000 f872 	bl	801183c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011758:	20c8      	movs	r0, #200	@ 0xc8
 801175a:	f7f3 fe63 	bl	8005424 <HAL_Delay>
  return USBH_OK;
 801175e:	2300      	movs	r3, #0
}
 8011760:	4618      	mov	r0, r3
 8011762:	3708      	adds	r7, #8
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011768:	b480      	push	{r7}
 801176a:	b085      	sub	sp, #20
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	460b      	mov	r3, r1
 8011772:	70fb      	strb	r3, [r7, #3]
 8011774:	4613      	mov	r3, r2
 8011776:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 801177e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011780:	78fa      	ldrb	r2, [r7, #3]
 8011782:	68f9      	ldr	r1, [r7, #12]
 8011784:	4613      	mov	r3, r2
 8011786:	011b      	lsls	r3, r3, #4
 8011788:	1a9b      	subs	r3, r3, r2
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	440b      	add	r3, r1
 801178e:	3317      	adds	r3, #23
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d00a      	beq.n	80117ac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011796:	78fa      	ldrb	r2, [r7, #3]
 8011798:	68f9      	ldr	r1, [r7, #12]
 801179a:	4613      	mov	r3, r2
 801179c:	011b      	lsls	r3, r3, #4
 801179e:	1a9b      	subs	r3, r3, r2
 80117a0:	009b      	lsls	r3, r3, #2
 80117a2:	440b      	add	r3, r1
 80117a4:	333c      	adds	r3, #60	@ 0x3c
 80117a6:	78ba      	ldrb	r2, [r7, #2]
 80117a8:	701a      	strb	r2, [r3, #0]
 80117aa:	e009      	b.n	80117c0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80117ac:	78fa      	ldrb	r2, [r7, #3]
 80117ae:	68f9      	ldr	r1, [r7, #12]
 80117b0:	4613      	mov	r3, r2
 80117b2:	011b      	lsls	r3, r3, #4
 80117b4:	1a9b      	subs	r3, r3, r2
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	440b      	add	r3, r1
 80117ba:	333d      	adds	r3, #61	@ 0x3d
 80117bc:	78ba      	ldrb	r2, [r7, #2]
 80117be:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80117c0:	2300      	movs	r3, #0
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3714      	adds	r7, #20
 80117c6:	46bd      	mov	sp, r7
 80117c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117cc:	4770      	bx	lr

080117ce <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80117ce:	b580      	push	{r7, lr}
 80117d0:	b082      	sub	sp, #8
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f7f3 fe24 	bl	8005424 <HAL_Delay>
}
 80117dc:	bf00      	nop
 80117de:	3708      	adds	r7, #8
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}

080117e4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80117e4:	b480      	push	{r7}
 80117e6:	b085      	sub	sp, #20
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	4603      	mov	r3, r0
 80117ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80117ee:	2300      	movs	r3, #0
 80117f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80117f2:	79fb      	ldrb	r3, [r7, #7]
 80117f4:	2b03      	cmp	r3, #3
 80117f6:	d817      	bhi.n	8011828 <USBH_Get_USB_Status+0x44>
 80117f8:	a201      	add	r2, pc, #4	@ (adr r2, 8011800 <USBH_Get_USB_Status+0x1c>)
 80117fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117fe:	bf00      	nop
 8011800:	08011811 	.word	0x08011811
 8011804:	08011817 	.word	0x08011817
 8011808:	0801181d 	.word	0x0801181d
 801180c:	08011823 	.word	0x08011823
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011810:	2300      	movs	r3, #0
 8011812:	73fb      	strb	r3, [r7, #15]
    break;
 8011814:	e00b      	b.n	801182e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011816:	2302      	movs	r3, #2
 8011818:	73fb      	strb	r3, [r7, #15]
    break;
 801181a:	e008      	b.n	801182e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801181c:	2301      	movs	r3, #1
 801181e:	73fb      	strb	r3, [r7, #15]
    break;
 8011820:	e005      	b.n	801182e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011822:	2302      	movs	r3, #2
 8011824:	73fb      	strb	r3, [r7, #15]
    break;
 8011826:	e002      	b.n	801182e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011828:	2302      	movs	r3, #2
 801182a:	73fb      	strb	r3, [r7, #15]
    break;
 801182c:	bf00      	nop
  }
  return usb_status;
 801182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011830:	4618      	mov	r0, r3
 8011832:	3714      	adds	r7, #20
 8011834:	46bd      	mov	sp, r7
 8011836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183a:	4770      	bx	lr

0801183c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b084      	sub	sp, #16
 8011840:	af00      	add	r7, sp, #0
 8011842:	4603      	mov	r3, r0
 8011844:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011846:	79fb      	ldrb	r3, [r7, #7]
 8011848:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 801184a:	79fb      	ldrb	r3, [r7, #7]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d102      	bne.n	8011856 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011850:	2301      	movs	r3, #1
 8011852:	73fb      	strb	r3, [r7, #15]
 8011854:	e001      	b.n	801185a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011856:	2300      	movs	r3, #0
 8011858:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 801185a:	7bfb      	ldrb	r3, [r7, #15]
 801185c:	461a      	mov	r2, r3
 801185e:	2110      	movs	r1, #16
 8011860:	4803      	ldr	r0, [pc, #12]	@ (8011870 <MX_DriverVbusHS+0x34>)
 8011862:	f7f5 f927 	bl	8006ab4 <HAL_GPIO_WritePin>
}
 8011866:	bf00      	nop
 8011868:	3710      	adds	r7, #16
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}
 801186e:	bf00      	nop
 8011870:	40020800 	.word	0x40020800

08011874 <malloc>:
 8011874:	4b02      	ldr	r3, [pc, #8]	@ (8011880 <malloc+0xc>)
 8011876:	4601      	mov	r1, r0
 8011878:	6818      	ldr	r0, [r3, #0]
 801187a:	f000 b82d 	b.w	80118d8 <_malloc_r>
 801187e:	bf00      	nop
 8011880:	2000029c 	.word	0x2000029c

08011884 <free>:
 8011884:	4b02      	ldr	r3, [pc, #8]	@ (8011890 <free+0xc>)
 8011886:	4601      	mov	r1, r0
 8011888:	6818      	ldr	r0, [r3, #0]
 801188a:	f000 bb77 	b.w	8011f7c <_free_r>
 801188e:	bf00      	nop
 8011890:	2000029c 	.word	0x2000029c

08011894 <sbrk_aligned>:
 8011894:	b570      	push	{r4, r5, r6, lr}
 8011896:	4e0f      	ldr	r6, [pc, #60]	@ (80118d4 <sbrk_aligned+0x40>)
 8011898:	460c      	mov	r4, r1
 801189a:	6831      	ldr	r1, [r6, #0]
 801189c:	4605      	mov	r5, r0
 801189e:	b911      	cbnz	r1, 80118a6 <sbrk_aligned+0x12>
 80118a0:	f000 fb14 	bl	8011ecc <_sbrk_r>
 80118a4:	6030      	str	r0, [r6, #0]
 80118a6:	4621      	mov	r1, r4
 80118a8:	4628      	mov	r0, r5
 80118aa:	f000 fb0f 	bl	8011ecc <_sbrk_r>
 80118ae:	1c43      	adds	r3, r0, #1
 80118b0:	d103      	bne.n	80118ba <sbrk_aligned+0x26>
 80118b2:	f04f 34ff 	mov.w	r4, #4294967295
 80118b6:	4620      	mov	r0, r4
 80118b8:	bd70      	pop	{r4, r5, r6, pc}
 80118ba:	1cc4      	adds	r4, r0, #3
 80118bc:	f024 0403 	bic.w	r4, r4, #3
 80118c0:	42a0      	cmp	r0, r4
 80118c2:	d0f8      	beq.n	80118b6 <sbrk_aligned+0x22>
 80118c4:	1a21      	subs	r1, r4, r0
 80118c6:	4628      	mov	r0, r5
 80118c8:	f000 fb00 	bl	8011ecc <_sbrk_r>
 80118cc:	3001      	adds	r0, #1
 80118ce:	d1f2      	bne.n	80118b6 <sbrk_aligned+0x22>
 80118d0:	e7ef      	b.n	80118b2 <sbrk_aligned+0x1e>
 80118d2:	bf00      	nop
 80118d4:	2000a478 	.word	0x2000a478

080118d8 <_malloc_r>:
 80118d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118dc:	1ccd      	adds	r5, r1, #3
 80118de:	f025 0503 	bic.w	r5, r5, #3
 80118e2:	3508      	adds	r5, #8
 80118e4:	2d0c      	cmp	r5, #12
 80118e6:	bf38      	it	cc
 80118e8:	250c      	movcc	r5, #12
 80118ea:	2d00      	cmp	r5, #0
 80118ec:	4606      	mov	r6, r0
 80118ee:	db01      	blt.n	80118f4 <_malloc_r+0x1c>
 80118f0:	42a9      	cmp	r1, r5
 80118f2:	d904      	bls.n	80118fe <_malloc_r+0x26>
 80118f4:	230c      	movs	r3, #12
 80118f6:	6033      	str	r3, [r6, #0]
 80118f8:	2000      	movs	r0, #0
 80118fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80119d4 <_malloc_r+0xfc>
 8011902:	f000 f869 	bl	80119d8 <__malloc_lock>
 8011906:	f8d8 3000 	ldr.w	r3, [r8]
 801190a:	461c      	mov	r4, r3
 801190c:	bb44      	cbnz	r4, 8011960 <_malloc_r+0x88>
 801190e:	4629      	mov	r1, r5
 8011910:	4630      	mov	r0, r6
 8011912:	f7ff ffbf 	bl	8011894 <sbrk_aligned>
 8011916:	1c43      	adds	r3, r0, #1
 8011918:	4604      	mov	r4, r0
 801191a:	d158      	bne.n	80119ce <_malloc_r+0xf6>
 801191c:	f8d8 4000 	ldr.w	r4, [r8]
 8011920:	4627      	mov	r7, r4
 8011922:	2f00      	cmp	r7, #0
 8011924:	d143      	bne.n	80119ae <_malloc_r+0xd6>
 8011926:	2c00      	cmp	r4, #0
 8011928:	d04b      	beq.n	80119c2 <_malloc_r+0xea>
 801192a:	6823      	ldr	r3, [r4, #0]
 801192c:	4639      	mov	r1, r7
 801192e:	4630      	mov	r0, r6
 8011930:	eb04 0903 	add.w	r9, r4, r3
 8011934:	f000 faca 	bl	8011ecc <_sbrk_r>
 8011938:	4581      	cmp	r9, r0
 801193a:	d142      	bne.n	80119c2 <_malloc_r+0xea>
 801193c:	6821      	ldr	r1, [r4, #0]
 801193e:	1a6d      	subs	r5, r5, r1
 8011940:	4629      	mov	r1, r5
 8011942:	4630      	mov	r0, r6
 8011944:	f7ff ffa6 	bl	8011894 <sbrk_aligned>
 8011948:	3001      	adds	r0, #1
 801194a:	d03a      	beq.n	80119c2 <_malloc_r+0xea>
 801194c:	6823      	ldr	r3, [r4, #0]
 801194e:	442b      	add	r3, r5
 8011950:	6023      	str	r3, [r4, #0]
 8011952:	f8d8 3000 	ldr.w	r3, [r8]
 8011956:	685a      	ldr	r2, [r3, #4]
 8011958:	bb62      	cbnz	r2, 80119b4 <_malloc_r+0xdc>
 801195a:	f8c8 7000 	str.w	r7, [r8]
 801195e:	e00f      	b.n	8011980 <_malloc_r+0xa8>
 8011960:	6822      	ldr	r2, [r4, #0]
 8011962:	1b52      	subs	r2, r2, r5
 8011964:	d420      	bmi.n	80119a8 <_malloc_r+0xd0>
 8011966:	2a0b      	cmp	r2, #11
 8011968:	d917      	bls.n	801199a <_malloc_r+0xc2>
 801196a:	1961      	adds	r1, r4, r5
 801196c:	42a3      	cmp	r3, r4
 801196e:	6025      	str	r5, [r4, #0]
 8011970:	bf18      	it	ne
 8011972:	6059      	strne	r1, [r3, #4]
 8011974:	6863      	ldr	r3, [r4, #4]
 8011976:	bf08      	it	eq
 8011978:	f8c8 1000 	streq.w	r1, [r8]
 801197c:	5162      	str	r2, [r4, r5]
 801197e:	604b      	str	r3, [r1, #4]
 8011980:	4630      	mov	r0, r6
 8011982:	f000 f82f 	bl	80119e4 <__malloc_unlock>
 8011986:	f104 000b 	add.w	r0, r4, #11
 801198a:	1d23      	adds	r3, r4, #4
 801198c:	f020 0007 	bic.w	r0, r0, #7
 8011990:	1ac2      	subs	r2, r0, r3
 8011992:	bf1c      	itt	ne
 8011994:	1a1b      	subne	r3, r3, r0
 8011996:	50a3      	strne	r3, [r4, r2]
 8011998:	e7af      	b.n	80118fa <_malloc_r+0x22>
 801199a:	6862      	ldr	r2, [r4, #4]
 801199c:	42a3      	cmp	r3, r4
 801199e:	bf0c      	ite	eq
 80119a0:	f8c8 2000 	streq.w	r2, [r8]
 80119a4:	605a      	strne	r2, [r3, #4]
 80119a6:	e7eb      	b.n	8011980 <_malloc_r+0xa8>
 80119a8:	4623      	mov	r3, r4
 80119aa:	6864      	ldr	r4, [r4, #4]
 80119ac:	e7ae      	b.n	801190c <_malloc_r+0x34>
 80119ae:	463c      	mov	r4, r7
 80119b0:	687f      	ldr	r7, [r7, #4]
 80119b2:	e7b6      	b.n	8011922 <_malloc_r+0x4a>
 80119b4:	461a      	mov	r2, r3
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	42a3      	cmp	r3, r4
 80119ba:	d1fb      	bne.n	80119b4 <_malloc_r+0xdc>
 80119bc:	2300      	movs	r3, #0
 80119be:	6053      	str	r3, [r2, #4]
 80119c0:	e7de      	b.n	8011980 <_malloc_r+0xa8>
 80119c2:	230c      	movs	r3, #12
 80119c4:	6033      	str	r3, [r6, #0]
 80119c6:	4630      	mov	r0, r6
 80119c8:	f000 f80c 	bl	80119e4 <__malloc_unlock>
 80119cc:	e794      	b.n	80118f8 <_malloc_r+0x20>
 80119ce:	6005      	str	r5, [r0, #0]
 80119d0:	e7d6      	b.n	8011980 <_malloc_r+0xa8>
 80119d2:	bf00      	nop
 80119d4:	2000a47c 	.word	0x2000a47c

080119d8 <__malloc_lock>:
 80119d8:	4801      	ldr	r0, [pc, #4]	@ (80119e0 <__malloc_lock+0x8>)
 80119da:	f000 bac4 	b.w	8011f66 <__retarget_lock_acquire_recursive>
 80119de:	bf00      	nop
 80119e0:	2000a5c0 	.word	0x2000a5c0

080119e4 <__malloc_unlock>:
 80119e4:	4801      	ldr	r0, [pc, #4]	@ (80119ec <__malloc_unlock+0x8>)
 80119e6:	f000 babf 	b.w	8011f68 <__retarget_lock_release_recursive>
 80119ea:	bf00      	nop
 80119ec:	2000a5c0 	.word	0x2000a5c0

080119f0 <std>:
 80119f0:	2300      	movs	r3, #0
 80119f2:	b510      	push	{r4, lr}
 80119f4:	4604      	mov	r4, r0
 80119f6:	e9c0 3300 	strd	r3, r3, [r0]
 80119fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80119fe:	6083      	str	r3, [r0, #8]
 8011a00:	8181      	strh	r1, [r0, #12]
 8011a02:	6643      	str	r3, [r0, #100]	@ 0x64
 8011a04:	81c2      	strh	r2, [r0, #14]
 8011a06:	6183      	str	r3, [r0, #24]
 8011a08:	4619      	mov	r1, r3
 8011a0a:	2208      	movs	r2, #8
 8011a0c:	305c      	adds	r0, #92	@ 0x5c
 8011a0e:	f000 fa21 	bl	8011e54 <memset>
 8011a12:	4b0d      	ldr	r3, [pc, #52]	@ (8011a48 <std+0x58>)
 8011a14:	6263      	str	r3, [r4, #36]	@ 0x24
 8011a16:	4b0d      	ldr	r3, [pc, #52]	@ (8011a4c <std+0x5c>)
 8011a18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8011a50 <std+0x60>)
 8011a1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8011a54 <std+0x64>)
 8011a20:	6323      	str	r3, [r4, #48]	@ 0x30
 8011a22:	4b0d      	ldr	r3, [pc, #52]	@ (8011a58 <std+0x68>)
 8011a24:	6224      	str	r4, [r4, #32]
 8011a26:	429c      	cmp	r4, r3
 8011a28:	d006      	beq.n	8011a38 <std+0x48>
 8011a2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011a2e:	4294      	cmp	r4, r2
 8011a30:	d002      	beq.n	8011a38 <std+0x48>
 8011a32:	33d0      	adds	r3, #208	@ 0xd0
 8011a34:	429c      	cmp	r4, r3
 8011a36:	d105      	bne.n	8011a44 <std+0x54>
 8011a38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a40:	f000 ba90 	b.w	8011f64 <__retarget_lock_init_recursive>
 8011a44:	bd10      	pop	{r4, pc}
 8011a46:	bf00      	nop
 8011a48:	08011ca5 	.word	0x08011ca5
 8011a4c:	08011cc7 	.word	0x08011cc7
 8011a50:	08011cff 	.word	0x08011cff
 8011a54:	08011d23 	.word	0x08011d23
 8011a58:	2000a480 	.word	0x2000a480

08011a5c <stdio_exit_handler>:
 8011a5c:	4a02      	ldr	r2, [pc, #8]	@ (8011a68 <stdio_exit_handler+0xc>)
 8011a5e:	4903      	ldr	r1, [pc, #12]	@ (8011a6c <stdio_exit_handler+0x10>)
 8011a60:	4803      	ldr	r0, [pc, #12]	@ (8011a70 <stdio_exit_handler+0x14>)
 8011a62:	f000 b869 	b.w	8011b38 <_fwalk_sglue>
 8011a66:	bf00      	nop
 8011a68:	20000290 	.word	0x20000290
 8011a6c:	08012969 	.word	0x08012969
 8011a70:	200002a0 	.word	0x200002a0

08011a74 <cleanup_stdio>:
 8011a74:	6841      	ldr	r1, [r0, #4]
 8011a76:	4b0c      	ldr	r3, [pc, #48]	@ (8011aa8 <cleanup_stdio+0x34>)
 8011a78:	4299      	cmp	r1, r3
 8011a7a:	b510      	push	{r4, lr}
 8011a7c:	4604      	mov	r4, r0
 8011a7e:	d001      	beq.n	8011a84 <cleanup_stdio+0x10>
 8011a80:	f000 ff72 	bl	8012968 <_fflush_r>
 8011a84:	68a1      	ldr	r1, [r4, #8]
 8011a86:	4b09      	ldr	r3, [pc, #36]	@ (8011aac <cleanup_stdio+0x38>)
 8011a88:	4299      	cmp	r1, r3
 8011a8a:	d002      	beq.n	8011a92 <cleanup_stdio+0x1e>
 8011a8c:	4620      	mov	r0, r4
 8011a8e:	f000 ff6b 	bl	8012968 <_fflush_r>
 8011a92:	68e1      	ldr	r1, [r4, #12]
 8011a94:	4b06      	ldr	r3, [pc, #24]	@ (8011ab0 <cleanup_stdio+0x3c>)
 8011a96:	4299      	cmp	r1, r3
 8011a98:	d004      	beq.n	8011aa4 <cleanup_stdio+0x30>
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aa0:	f000 bf62 	b.w	8012968 <_fflush_r>
 8011aa4:	bd10      	pop	{r4, pc}
 8011aa6:	bf00      	nop
 8011aa8:	2000a480 	.word	0x2000a480
 8011aac:	2000a4e8 	.word	0x2000a4e8
 8011ab0:	2000a550 	.word	0x2000a550

08011ab4 <global_stdio_init.part.0>:
 8011ab4:	b510      	push	{r4, lr}
 8011ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8011ae4 <global_stdio_init.part.0+0x30>)
 8011ab8:	4c0b      	ldr	r4, [pc, #44]	@ (8011ae8 <global_stdio_init.part.0+0x34>)
 8011aba:	4a0c      	ldr	r2, [pc, #48]	@ (8011aec <global_stdio_init.part.0+0x38>)
 8011abc:	601a      	str	r2, [r3, #0]
 8011abe:	4620      	mov	r0, r4
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	2104      	movs	r1, #4
 8011ac4:	f7ff ff94 	bl	80119f0 <std>
 8011ac8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011acc:	2201      	movs	r2, #1
 8011ace:	2109      	movs	r1, #9
 8011ad0:	f7ff ff8e 	bl	80119f0 <std>
 8011ad4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011ad8:	2202      	movs	r2, #2
 8011ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ade:	2112      	movs	r1, #18
 8011ae0:	f7ff bf86 	b.w	80119f0 <std>
 8011ae4:	2000a5b8 	.word	0x2000a5b8
 8011ae8:	2000a480 	.word	0x2000a480
 8011aec:	08011a5d 	.word	0x08011a5d

08011af0 <__sfp_lock_acquire>:
 8011af0:	4801      	ldr	r0, [pc, #4]	@ (8011af8 <__sfp_lock_acquire+0x8>)
 8011af2:	f000 ba38 	b.w	8011f66 <__retarget_lock_acquire_recursive>
 8011af6:	bf00      	nop
 8011af8:	2000a5c1 	.word	0x2000a5c1

08011afc <__sfp_lock_release>:
 8011afc:	4801      	ldr	r0, [pc, #4]	@ (8011b04 <__sfp_lock_release+0x8>)
 8011afe:	f000 ba33 	b.w	8011f68 <__retarget_lock_release_recursive>
 8011b02:	bf00      	nop
 8011b04:	2000a5c1 	.word	0x2000a5c1

08011b08 <__sinit>:
 8011b08:	b510      	push	{r4, lr}
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	f7ff fff0 	bl	8011af0 <__sfp_lock_acquire>
 8011b10:	6a23      	ldr	r3, [r4, #32]
 8011b12:	b11b      	cbz	r3, 8011b1c <__sinit+0x14>
 8011b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b18:	f7ff bff0 	b.w	8011afc <__sfp_lock_release>
 8011b1c:	4b04      	ldr	r3, [pc, #16]	@ (8011b30 <__sinit+0x28>)
 8011b1e:	6223      	str	r3, [r4, #32]
 8011b20:	4b04      	ldr	r3, [pc, #16]	@ (8011b34 <__sinit+0x2c>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d1f5      	bne.n	8011b14 <__sinit+0xc>
 8011b28:	f7ff ffc4 	bl	8011ab4 <global_stdio_init.part.0>
 8011b2c:	e7f2      	b.n	8011b14 <__sinit+0xc>
 8011b2e:	bf00      	nop
 8011b30:	08011a75 	.word	0x08011a75
 8011b34:	2000a5b8 	.word	0x2000a5b8

08011b38 <_fwalk_sglue>:
 8011b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b3c:	4607      	mov	r7, r0
 8011b3e:	4688      	mov	r8, r1
 8011b40:	4614      	mov	r4, r2
 8011b42:	2600      	movs	r6, #0
 8011b44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b48:	f1b9 0901 	subs.w	r9, r9, #1
 8011b4c:	d505      	bpl.n	8011b5a <_fwalk_sglue+0x22>
 8011b4e:	6824      	ldr	r4, [r4, #0]
 8011b50:	2c00      	cmp	r4, #0
 8011b52:	d1f7      	bne.n	8011b44 <_fwalk_sglue+0xc>
 8011b54:	4630      	mov	r0, r6
 8011b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b5a:	89ab      	ldrh	r3, [r5, #12]
 8011b5c:	2b01      	cmp	r3, #1
 8011b5e:	d907      	bls.n	8011b70 <_fwalk_sglue+0x38>
 8011b60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b64:	3301      	adds	r3, #1
 8011b66:	d003      	beq.n	8011b70 <_fwalk_sglue+0x38>
 8011b68:	4629      	mov	r1, r5
 8011b6a:	4638      	mov	r0, r7
 8011b6c:	47c0      	blx	r8
 8011b6e:	4306      	orrs	r6, r0
 8011b70:	3568      	adds	r5, #104	@ 0x68
 8011b72:	e7e9      	b.n	8011b48 <_fwalk_sglue+0x10>

08011b74 <iprintf>:
 8011b74:	b40f      	push	{r0, r1, r2, r3}
 8011b76:	b507      	push	{r0, r1, r2, lr}
 8011b78:	4906      	ldr	r1, [pc, #24]	@ (8011b94 <iprintf+0x20>)
 8011b7a:	ab04      	add	r3, sp, #16
 8011b7c:	6808      	ldr	r0, [r1, #0]
 8011b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b82:	6881      	ldr	r1, [r0, #8]
 8011b84:	9301      	str	r3, [sp, #4]
 8011b86:	f000 fbc5 	bl	8012314 <_vfiprintf_r>
 8011b8a:	b003      	add	sp, #12
 8011b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b90:	b004      	add	sp, #16
 8011b92:	4770      	bx	lr
 8011b94:	2000029c 	.word	0x2000029c

08011b98 <putchar>:
 8011b98:	4b02      	ldr	r3, [pc, #8]	@ (8011ba4 <putchar+0xc>)
 8011b9a:	4601      	mov	r1, r0
 8011b9c:	6818      	ldr	r0, [r3, #0]
 8011b9e:	6882      	ldr	r2, [r0, #8]
 8011ba0:	f000 bf6c 	b.w	8012a7c <_putc_r>
 8011ba4:	2000029c 	.word	0x2000029c

08011ba8 <_puts_r>:
 8011ba8:	6a03      	ldr	r3, [r0, #32]
 8011baa:	b570      	push	{r4, r5, r6, lr}
 8011bac:	6884      	ldr	r4, [r0, #8]
 8011bae:	4605      	mov	r5, r0
 8011bb0:	460e      	mov	r6, r1
 8011bb2:	b90b      	cbnz	r3, 8011bb8 <_puts_r+0x10>
 8011bb4:	f7ff ffa8 	bl	8011b08 <__sinit>
 8011bb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011bba:	07db      	lsls	r3, r3, #31
 8011bbc:	d405      	bmi.n	8011bca <_puts_r+0x22>
 8011bbe:	89a3      	ldrh	r3, [r4, #12]
 8011bc0:	0598      	lsls	r0, r3, #22
 8011bc2:	d402      	bmi.n	8011bca <_puts_r+0x22>
 8011bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011bc6:	f000 f9ce 	bl	8011f66 <__retarget_lock_acquire_recursive>
 8011bca:	89a3      	ldrh	r3, [r4, #12]
 8011bcc:	0719      	lsls	r1, r3, #28
 8011bce:	d502      	bpl.n	8011bd6 <_puts_r+0x2e>
 8011bd0:	6923      	ldr	r3, [r4, #16]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d135      	bne.n	8011c42 <_puts_r+0x9a>
 8011bd6:	4621      	mov	r1, r4
 8011bd8:	4628      	mov	r0, r5
 8011bda:	f000 f8e5 	bl	8011da8 <__swsetup_r>
 8011bde:	b380      	cbz	r0, 8011c42 <_puts_r+0x9a>
 8011be0:	f04f 35ff 	mov.w	r5, #4294967295
 8011be4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011be6:	07da      	lsls	r2, r3, #31
 8011be8:	d405      	bmi.n	8011bf6 <_puts_r+0x4e>
 8011bea:	89a3      	ldrh	r3, [r4, #12]
 8011bec:	059b      	lsls	r3, r3, #22
 8011bee:	d402      	bmi.n	8011bf6 <_puts_r+0x4e>
 8011bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011bf2:	f000 f9b9 	bl	8011f68 <__retarget_lock_release_recursive>
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	bd70      	pop	{r4, r5, r6, pc}
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	da04      	bge.n	8011c08 <_puts_r+0x60>
 8011bfe:	69a2      	ldr	r2, [r4, #24]
 8011c00:	429a      	cmp	r2, r3
 8011c02:	dc17      	bgt.n	8011c34 <_puts_r+0x8c>
 8011c04:	290a      	cmp	r1, #10
 8011c06:	d015      	beq.n	8011c34 <_puts_r+0x8c>
 8011c08:	6823      	ldr	r3, [r4, #0]
 8011c0a:	1c5a      	adds	r2, r3, #1
 8011c0c:	6022      	str	r2, [r4, #0]
 8011c0e:	7019      	strb	r1, [r3, #0]
 8011c10:	68a3      	ldr	r3, [r4, #8]
 8011c12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011c16:	3b01      	subs	r3, #1
 8011c18:	60a3      	str	r3, [r4, #8]
 8011c1a:	2900      	cmp	r1, #0
 8011c1c:	d1ed      	bne.n	8011bfa <_puts_r+0x52>
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	da11      	bge.n	8011c46 <_puts_r+0x9e>
 8011c22:	4622      	mov	r2, r4
 8011c24:	210a      	movs	r1, #10
 8011c26:	4628      	mov	r0, r5
 8011c28:	f000 f87f 	bl	8011d2a <__swbuf_r>
 8011c2c:	3001      	adds	r0, #1
 8011c2e:	d0d7      	beq.n	8011be0 <_puts_r+0x38>
 8011c30:	250a      	movs	r5, #10
 8011c32:	e7d7      	b.n	8011be4 <_puts_r+0x3c>
 8011c34:	4622      	mov	r2, r4
 8011c36:	4628      	mov	r0, r5
 8011c38:	f000 f877 	bl	8011d2a <__swbuf_r>
 8011c3c:	3001      	adds	r0, #1
 8011c3e:	d1e7      	bne.n	8011c10 <_puts_r+0x68>
 8011c40:	e7ce      	b.n	8011be0 <_puts_r+0x38>
 8011c42:	3e01      	subs	r6, #1
 8011c44:	e7e4      	b.n	8011c10 <_puts_r+0x68>
 8011c46:	6823      	ldr	r3, [r4, #0]
 8011c48:	1c5a      	adds	r2, r3, #1
 8011c4a:	6022      	str	r2, [r4, #0]
 8011c4c:	220a      	movs	r2, #10
 8011c4e:	701a      	strb	r2, [r3, #0]
 8011c50:	e7ee      	b.n	8011c30 <_puts_r+0x88>
	...

08011c54 <puts>:
 8011c54:	4b02      	ldr	r3, [pc, #8]	@ (8011c60 <puts+0xc>)
 8011c56:	4601      	mov	r1, r0
 8011c58:	6818      	ldr	r0, [r3, #0]
 8011c5a:	f7ff bfa5 	b.w	8011ba8 <_puts_r>
 8011c5e:	bf00      	nop
 8011c60:	2000029c 	.word	0x2000029c

08011c64 <siprintf>:
 8011c64:	b40e      	push	{r1, r2, r3}
 8011c66:	b500      	push	{lr}
 8011c68:	b09c      	sub	sp, #112	@ 0x70
 8011c6a:	ab1d      	add	r3, sp, #116	@ 0x74
 8011c6c:	9002      	str	r0, [sp, #8]
 8011c6e:	9006      	str	r0, [sp, #24]
 8011c70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011c74:	4809      	ldr	r0, [pc, #36]	@ (8011c9c <siprintf+0x38>)
 8011c76:	9107      	str	r1, [sp, #28]
 8011c78:	9104      	str	r1, [sp, #16]
 8011c7a:	4909      	ldr	r1, [pc, #36]	@ (8011ca0 <siprintf+0x3c>)
 8011c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c80:	9105      	str	r1, [sp, #20]
 8011c82:	6800      	ldr	r0, [r0, #0]
 8011c84:	9301      	str	r3, [sp, #4]
 8011c86:	a902      	add	r1, sp, #8
 8011c88:	f000 fa1e 	bl	80120c8 <_svfiprintf_r>
 8011c8c:	9b02      	ldr	r3, [sp, #8]
 8011c8e:	2200      	movs	r2, #0
 8011c90:	701a      	strb	r2, [r3, #0]
 8011c92:	b01c      	add	sp, #112	@ 0x70
 8011c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c98:	b003      	add	sp, #12
 8011c9a:	4770      	bx	lr
 8011c9c:	2000029c 	.word	0x2000029c
 8011ca0:	ffff0208 	.word	0xffff0208

08011ca4 <__sread>:
 8011ca4:	b510      	push	{r4, lr}
 8011ca6:	460c      	mov	r4, r1
 8011ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cac:	f000 f8fc 	bl	8011ea8 <_read_r>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	bfab      	itete	ge
 8011cb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011cb6:	89a3      	ldrhlt	r3, [r4, #12]
 8011cb8:	181b      	addge	r3, r3, r0
 8011cba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011cbe:	bfac      	ite	ge
 8011cc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011cc2:	81a3      	strhlt	r3, [r4, #12]
 8011cc4:	bd10      	pop	{r4, pc}

08011cc6 <__swrite>:
 8011cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cca:	461f      	mov	r7, r3
 8011ccc:	898b      	ldrh	r3, [r1, #12]
 8011cce:	05db      	lsls	r3, r3, #23
 8011cd0:	4605      	mov	r5, r0
 8011cd2:	460c      	mov	r4, r1
 8011cd4:	4616      	mov	r6, r2
 8011cd6:	d505      	bpl.n	8011ce4 <__swrite+0x1e>
 8011cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cdc:	2302      	movs	r3, #2
 8011cde:	2200      	movs	r2, #0
 8011ce0:	f000 f8d0 	bl	8011e84 <_lseek_r>
 8011ce4:	89a3      	ldrh	r3, [r4, #12]
 8011ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011cee:	81a3      	strh	r3, [r4, #12]
 8011cf0:	4632      	mov	r2, r6
 8011cf2:	463b      	mov	r3, r7
 8011cf4:	4628      	mov	r0, r5
 8011cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cfa:	f000 b8f7 	b.w	8011eec <_write_r>

08011cfe <__sseek>:
 8011cfe:	b510      	push	{r4, lr}
 8011d00:	460c      	mov	r4, r1
 8011d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d06:	f000 f8bd 	bl	8011e84 <_lseek_r>
 8011d0a:	1c43      	adds	r3, r0, #1
 8011d0c:	89a3      	ldrh	r3, [r4, #12]
 8011d0e:	bf15      	itete	ne
 8011d10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011d12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011d16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011d1a:	81a3      	strheq	r3, [r4, #12]
 8011d1c:	bf18      	it	ne
 8011d1e:	81a3      	strhne	r3, [r4, #12]
 8011d20:	bd10      	pop	{r4, pc}

08011d22 <__sclose>:
 8011d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d26:	f000 b89d 	b.w	8011e64 <_close_r>

08011d2a <__swbuf_r>:
 8011d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d2c:	460e      	mov	r6, r1
 8011d2e:	4614      	mov	r4, r2
 8011d30:	4605      	mov	r5, r0
 8011d32:	b118      	cbz	r0, 8011d3c <__swbuf_r+0x12>
 8011d34:	6a03      	ldr	r3, [r0, #32]
 8011d36:	b90b      	cbnz	r3, 8011d3c <__swbuf_r+0x12>
 8011d38:	f7ff fee6 	bl	8011b08 <__sinit>
 8011d3c:	69a3      	ldr	r3, [r4, #24]
 8011d3e:	60a3      	str	r3, [r4, #8]
 8011d40:	89a3      	ldrh	r3, [r4, #12]
 8011d42:	071a      	lsls	r2, r3, #28
 8011d44:	d501      	bpl.n	8011d4a <__swbuf_r+0x20>
 8011d46:	6923      	ldr	r3, [r4, #16]
 8011d48:	b943      	cbnz	r3, 8011d5c <__swbuf_r+0x32>
 8011d4a:	4621      	mov	r1, r4
 8011d4c:	4628      	mov	r0, r5
 8011d4e:	f000 f82b 	bl	8011da8 <__swsetup_r>
 8011d52:	b118      	cbz	r0, 8011d5c <__swbuf_r+0x32>
 8011d54:	f04f 37ff 	mov.w	r7, #4294967295
 8011d58:	4638      	mov	r0, r7
 8011d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d5c:	6823      	ldr	r3, [r4, #0]
 8011d5e:	6922      	ldr	r2, [r4, #16]
 8011d60:	1a98      	subs	r0, r3, r2
 8011d62:	6963      	ldr	r3, [r4, #20]
 8011d64:	b2f6      	uxtb	r6, r6
 8011d66:	4283      	cmp	r3, r0
 8011d68:	4637      	mov	r7, r6
 8011d6a:	dc05      	bgt.n	8011d78 <__swbuf_r+0x4e>
 8011d6c:	4621      	mov	r1, r4
 8011d6e:	4628      	mov	r0, r5
 8011d70:	f000 fdfa 	bl	8012968 <_fflush_r>
 8011d74:	2800      	cmp	r0, #0
 8011d76:	d1ed      	bne.n	8011d54 <__swbuf_r+0x2a>
 8011d78:	68a3      	ldr	r3, [r4, #8]
 8011d7a:	3b01      	subs	r3, #1
 8011d7c:	60a3      	str	r3, [r4, #8]
 8011d7e:	6823      	ldr	r3, [r4, #0]
 8011d80:	1c5a      	adds	r2, r3, #1
 8011d82:	6022      	str	r2, [r4, #0]
 8011d84:	701e      	strb	r6, [r3, #0]
 8011d86:	6962      	ldr	r2, [r4, #20]
 8011d88:	1c43      	adds	r3, r0, #1
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	d004      	beq.n	8011d98 <__swbuf_r+0x6e>
 8011d8e:	89a3      	ldrh	r3, [r4, #12]
 8011d90:	07db      	lsls	r3, r3, #31
 8011d92:	d5e1      	bpl.n	8011d58 <__swbuf_r+0x2e>
 8011d94:	2e0a      	cmp	r6, #10
 8011d96:	d1df      	bne.n	8011d58 <__swbuf_r+0x2e>
 8011d98:	4621      	mov	r1, r4
 8011d9a:	4628      	mov	r0, r5
 8011d9c:	f000 fde4 	bl	8012968 <_fflush_r>
 8011da0:	2800      	cmp	r0, #0
 8011da2:	d0d9      	beq.n	8011d58 <__swbuf_r+0x2e>
 8011da4:	e7d6      	b.n	8011d54 <__swbuf_r+0x2a>
	...

08011da8 <__swsetup_r>:
 8011da8:	b538      	push	{r3, r4, r5, lr}
 8011daa:	4b29      	ldr	r3, [pc, #164]	@ (8011e50 <__swsetup_r+0xa8>)
 8011dac:	4605      	mov	r5, r0
 8011dae:	6818      	ldr	r0, [r3, #0]
 8011db0:	460c      	mov	r4, r1
 8011db2:	b118      	cbz	r0, 8011dbc <__swsetup_r+0x14>
 8011db4:	6a03      	ldr	r3, [r0, #32]
 8011db6:	b90b      	cbnz	r3, 8011dbc <__swsetup_r+0x14>
 8011db8:	f7ff fea6 	bl	8011b08 <__sinit>
 8011dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dc0:	0719      	lsls	r1, r3, #28
 8011dc2:	d422      	bmi.n	8011e0a <__swsetup_r+0x62>
 8011dc4:	06da      	lsls	r2, r3, #27
 8011dc6:	d407      	bmi.n	8011dd8 <__swsetup_r+0x30>
 8011dc8:	2209      	movs	r2, #9
 8011dca:	602a      	str	r2, [r5, #0]
 8011dcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011dd0:	81a3      	strh	r3, [r4, #12]
 8011dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8011dd6:	e033      	b.n	8011e40 <__swsetup_r+0x98>
 8011dd8:	0758      	lsls	r0, r3, #29
 8011dda:	d512      	bpl.n	8011e02 <__swsetup_r+0x5a>
 8011ddc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011dde:	b141      	cbz	r1, 8011df2 <__swsetup_r+0x4a>
 8011de0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011de4:	4299      	cmp	r1, r3
 8011de6:	d002      	beq.n	8011dee <__swsetup_r+0x46>
 8011de8:	4628      	mov	r0, r5
 8011dea:	f000 f8c7 	bl	8011f7c <_free_r>
 8011dee:	2300      	movs	r3, #0
 8011df0:	6363      	str	r3, [r4, #52]	@ 0x34
 8011df2:	89a3      	ldrh	r3, [r4, #12]
 8011df4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011df8:	81a3      	strh	r3, [r4, #12]
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	6063      	str	r3, [r4, #4]
 8011dfe:	6923      	ldr	r3, [r4, #16]
 8011e00:	6023      	str	r3, [r4, #0]
 8011e02:	89a3      	ldrh	r3, [r4, #12]
 8011e04:	f043 0308 	orr.w	r3, r3, #8
 8011e08:	81a3      	strh	r3, [r4, #12]
 8011e0a:	6923      	ldr	r3, [r4, #16]
 8011e0c:	b94b      	cbnz	r3, 8011e22 <__swsetup_r+0x7a>
 8011e0e:	89a3      	ldrh	r3, [r4, #12]
 8011e10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e18:	d003      	beq.n	8011e22 <__swsetup_r+0x7a>
 8011e1a:	4621      	mov	r1, r4
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	f000 fdf1 	bl	8012a04 <__smakebuf_r>
 8011e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e26:	f013 0201 	ands.w	r2, r3, #1
 8011e2a:	d00a      	beq.n	8011e42 <__swsetup_r+0x9a>
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	60a2      	str	r2, [r4, #8]
 8011e30:	6962      	ldr	r2, [r4, #20]
 8011e32:	4252      	negs	r2, r2
 8011e34:	61a2      	str	r2, [r4, #24]
 8011e36:	6922      	ldr	r2, [r4, #16]
 8011e38:	b942      	cbnz	r2, 8011e4c <__swsetup_r+0xa4>
 8011e3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011e3e:	d1c5      	bne.n	8011dcc <__swsetup_r+0x24>
 8011e40:	bd38      	pop	{r3, r4, r5, pc}
 8011e42:	0799      	lsls	r1, r3, #30
 8011e44:	bf58      	it	pl
 8011e46:	6962      	ldrpl	r2, [r4, #20]
 8011e48:	60a2      	str	r2, [r4, #8]
 8011e4a:	e7f4      	b.n	8011e36 <__swsetup_r+0x8e>
 8011e4c:	2000      	movs	r0, #0
 8011e4e:	e7f7      	b.n	8011e40 <__swsetup_r+0x98>
 8011e50:	2000029c 	.word	0x2000029c

08011e54 <memset>:
 8011e54:	4402      	add	r2, r0
 8011e56:	4603      	mov	r3, r0
 8011e58:	4293      	cmp	r3, r2
 8011e5a:	d100      	bne.n	8011e5e <memset+0xa>
 8011e5c:	4770      	bx	lr
 8011e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8011e62:	e7f9      	b.n	8011e58 <memset+0x4>

08011e64 <_close_r>:
 8011e64:	b538      	push	{r3, r4, r5, lr}
 8011e66:	4d06      	ldr	r5, [pc, #24]	@ (8011e80 <_close_r+0x1c>)
 8011e68:	2300      	movs	r3, #0
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	4608      	mov	r0, r1
 8011e6e:	602b      	str	r3, [r5, #0]
 8011e70:	f7f1 fafd 	bl	800346e <_close>
 8011e74:	1c43      	adds	r3, r0, #1
 8011e76:	d102      	bne.n	8011e7e <_close_r+0x1a>
 8011e78:	682b      	ldr	r3, [r5, #0]
 8011e7a:	b103      	cbz	r3, 8011e7e <_close_r+0x1a>
 8011e7c:	6023      	str	r3, [r4, #0]
 8011e7e:	bd38      	pop	{r3, r4, r5, pc}
 8011e80:	2000a5bc 	.word	0x2000a5bc

08011e84 <_lseek_r>:
 8011e84:	b538      	push	{r3, r4, r5, lr}
 8011e86:	4d07      	ldr	r5, [pc, #28]	@ (8011ea4 <_lseek_r+0x20>)
 8011e88:	4604      	mov	r4, r0
 8011e8a:	4608      	mov	r0, r1
 8011e8c:	4611      	mov	r1, r2
 8011e8e:	2200      	movs	r2, #0
 8011e90:	602a      	str	r2, [r5, #0]
 8011e92:	461a      	mov	r2, r3
 8011e94:	f7f1 fb12 	bl	80034bc <_lseek>
 8011e98:	1c43      	adds	r3, r0, #1
 8011e9a:	d102      	bne.n	8011ea2 <_lseek_r+0x1e>
 8011e9c:	682b      	ldr	r3, [r5, #0]
 8011e9e:	b103      	cbz	r3, 8011ea2 <_lseek_r+0x1e>
 8011ea0:	6023      	str	r3, [r4, #0]
 8011ea2:	bd38      	pop	{r3, r4, r5, pc}
 8011ea4:	2000a5bc 	.word	0x2000a5bc

08011ea8 <_read_r>:
 8011ea8:	b538      	push	{r3, r4, r5, lr}
 8011eaa:	4d07      	ldr	r5, [pc, #28]	@ (8011ec8 <_read_r+0x20>)
 8011eac:	4604      	mov	r4, r0
 8011eae:	4608      	mov	r0, r1
 8011eb0:	4611      	mov	r1, r2
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	602a      	str	r2, [r5, #0]
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	f7f1 fabc 	bl	8003434 <_read>
 8011ebc:	1c43      	adds	r3, r0, #1
 8011ebe:	d102      	bne.n	8011ec6 <_read_r+0x1e>
 8011ec0:	682b      	ldr	r3, [r5, #0]
 8011ec2:	b103      	cbz	r3, 8011ec6 <_read_r+0x1e>
 8011ec4:	6023      	str	r3, [r4, #0]
 8011ec6:	bd38      	pop	{r3, r4, r5, pc}
 8011ec8:	2000a5bc 	.word	0x2000a5bc

08011ecc <_sbrk_r>:
 8011ecc:	b538      	push	{r3, r4, r5, lr}
 8011ece:	4d06      	ldr	r5, [pc, #24]	@ (8011ee8 <_sbrk_r+0x1c>)
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	4608      	mov	r0, r1
 8011ed6:	602b      	str	r3, [r5, #0]
 8011ed8:	f7f1 fafe 	bl	80034d8 <_sbrk>
 8011edc:	1c43      	adds	r3, r0, #1
 8011ede:	d102      	bne.n	8011ee6 <_sbrk_r+0x1a>
 8011ee0:	682b      	ldr	r3, [r5, #0]
 8011ee2:	b103      	cbz	r3, 8011ee6 <_sbrk_r+0x1a>
 8011ee4:	6023      	str	r3, [r4, #0]
 8011ee6:	bd38      	pop	{r3, r4, r5, pc}
 8011ee8:	2000a5bc 	.word	0x2000a5bc

08011eec <_write_r>:
 8011eec:	b538      	push	{r3, r4, r5, lr}
 8011eee:	4d07      	ldr	r5, [pc, #28]	@ (8011f0c <_write_r+0x20>)
 8011ef0:	4604      	mov	r4, r0
 8011ef2:	4608      	mov	r0, r1
 8011ef4:	4611      	mov	r1, r2
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	602a      	str	r2, [r5, #0]
 8011efa:	461a      	mov	r2, r3
 8011efc:	f7ef f80c 	bl	8000f18 <_write>
 8011f00:	1c43      	adds	r3, r0, #1
 8011f02:	d102      	bne.n	8011f0a <_write_r+0x1e>
 8011f04:	682b      	ldr	r3, [r5, #0]
 8011f06:	b103      	cbz	r3, 8011f0a <_write_r+0x1e>
 8011f08:	6023      	str	r3, [r4, #0]
 8011f0a:	bd38      	pop	{r3, r4, r5, pc}
 8011f0c:	2000a5bc 	.word	0x2000a5bc

08011f10 <__errno>:
 8011f10:	4b01      	ldr	r3, [pc, #4]	@ (8011f18 <__errno+0x8>)
 8011f12:	6818      	ldr	r0, [r3, #0]
 8011f14:	4770      	bx	lr
 8011f16:	bf00      	nop
 8011f18:	2000029c 	.word	0x2000029c

08011f1c <__libc_init_array>:
 8011f1c:	b570      	push	{r4, r5, r6, lr}
 8011f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8011f54 <__libc_init_array+0x38>)
 8011f20:	4c0d      	ldr	r4, [pc, #52]	@ (8011f58 <__libc_init_array+0x3c>)
 8011f22:	1b64      	subs	r4, r4, r5
 8011f24:	10a4      	asrs	r4, r4, #2
 8011f26:	2600      	movs	r6, #0
 8011f28:	42a6      	cmp	r6, r4
 8011f2a:	d109      	bne.n	8011f40 <__libc_init_array+0x24>
 8011f2c:	4d0b      	ldr	r5, [pc, #44]	@ (8011f5c <__libc_init_array+0x40>)
 8011f2e:	4c0c      	ldr	r4, [pc, #48]	@ (8011f60 <__libc_init_array+0x44>)
 8011f30:	f000 fe58 	bl	8012be4 <_init>
 8011f34:	1b64      	subs	r4, r4, r5
 8011f36:	10a4      	asrs	r4, r4, #2
 8011f38:	2600      	movs	r6, #0
 8011f3a:	42a6      	cmp	r6, r4
 8011f3c:	d105      	bne.n	8011f4a <__libc_init_array+0x2e>
 8011f3e:	bd70      	pop	{r4, r5, r6, pc}
 8011f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f44:	4798      	blx	r3
 8011f46:	3601      	adds	r6, #1
 8011f48:	e7ee      	b.n	8011f28 <__libc_init_array+0xc>
 8011f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f4e:	4798      	blx	r3
 8011f50:	3601      	adds	r6, #1
 8011f52:	e7f2      	b.n	8011f3a <__libc_init_array+0x1e>
 8011f54:	08016d04 	.word	0x08016d04
 8011f58:	08016d04 	.word	0x08016d04
 8011f5c:	08016d04 	.word	0x08016d04
 8011f60:	08016d08 	.word	0x08016d08

08011f64 <__retarget_lock_init_recursive>:
 8011f64:	4770      	bx	lr

08011f66 <__retarget_lock_acquire_recursive>:
 8011f66:	4770      	bx	lr

08011f68 <__retarget_lock_release_recursive>:
 8011f68:	4770      	bx	lr

08011f6a <strcpy>:
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f70:	f803 2b01 	strb.w	r2, [r3], #1
 8011f74:	2a00      	cmp	r2, #0
 8011f76:	d1f9      	bne.n	8011f6c <strcpy+0x2>
 8011f78:	4770      	bx	lr
	...

08011f7c <_free_r>:
 8011f7c:	b538      	push	{r3, r4, r5, lr}
 8011f7e:	4605      	mov	r5, r0
 8011f80:	2900      	cmp	r1, #0
 8011f82:	d041      	beq.n	8012008 <_free_r+0x8c>
 8011f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f88:	1f0c      	subs	r4, r1, #4
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	bfb8      	it	lt
 8011f8e:	18e4      	addlt	r4, r4, r3
 8011f90:	f7ff fd22 	bl	80119d8 <__malloc_lock>
 8011f94:	4a1d      	ldr	r2, [pc, #116]	@ (801200c <_free_r+0x90>)
 8011f96:	6813      	ldr	r3, [r2, #0]
 8011f98:	b933      	cbnz	r3, 8011fa8 <_free_r+0x2c>
 8011f9a:	6063      	str	r3, [r4, #4]
 8011f9c:	6014      	str	r4, [r2, #0]
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fa4:	f7ff bd1e 	b.w	80119e4 <__malloc_unlock>
 8011fa8:	42a3      	cmp	r3, r4
 8011faa:	d908      	bls.n	8011fbe <_free_r+0x42>
 8011fac:	6820      	ldr	r0, [r4, #0]
 8011fae:	1821      	adds	r1, r4, r0
 8011fb0:	428b      	cmp	r3, r1
 8011fb2:	bf01      	itttt	eq
 8011fb4:	6819      	ldreq	r1, [r3, #0]
 8011fb6:	685b      	ldreq	r3, [r3, #4]
 8011fb8:	1809      	addeq	r1, r1, r0
 8011fba:	6021      	streq	r1, [r4, #0]
 8011fbc:	e7ed      	b.n	8011f9a <_free_r+0x1e>
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	685b      	ldr	r3, [r3, #4]
 8011fc2:	b10b      	cbz	r3, 8011fc8 <_free_r+0x4c>
 8011fc4:	42a3      	cmp	r3, r4
 8011fc6:	d9fa      	bls.n	8011fbe <_free_r+0x42>
 8011fc8:	6811      	ldr	r1, [r2, #0]
 8011fca:	1850      	adds	r0, r2, r1
 8011fcc:	42a0      	cmp	r0, r4
 8011fce:	d10b      	bne.n	8011fe8 <_free_r+0x6c>
 8011fd0:	6820      	ldr	r0, [r4, #0]
 8011fd2:	4401      	add	r1, r0
 8011fd4:	1850      	adds	r0, r2, r1
 8011fd6:	4283      	cmp	r3, r0
 8011fd8:	6011      	str	r1, [r2, #0]
 8011fda:	d1e0      	bne.n	8011f9e <_free_r+0x22>
 8011fdc:	6818      	ldr	r0, [r3, #0]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	6053      	str	r3, [r2, #4]
 8011fe2:	4408      	add	r0, r1
 8011fe4:	6010      	str	r0, [r2, #0]
 8011fe6:	e7da      	b.n	8011f9e <_free_r+0x22>
 8011fe8:	d902      	bls.n	8011ff0 <_free_r+0x74>
 8011fea:	230c      	movs	r3, #12
 8011fec:	602b      	str	r3, [r5, #0]
 8011fee:	e7d6      	b.n	8011f9e <_free_r+0x22>
 8011ff0:	6820      	ldr	r0, [r4, #0]
 8011ff2:	1821      	adds	r1, r4, r0
 8011ff4:	428b      	cmp	r3, r1
 8011ff6:	bf04      	itt	eq
 8011ff8:	6819      	ldreq	r1, [r3, #0]
 8011ffa:	685b      	ldreq	r3, [r3, #4]
 8011ffc:	6063      	str	r3, [r4, #4]
 8011ffe:	bf04      	itt	eq
 8012000:	1809      	addeq	r1, r1, r0
 8012002:	6021      	streq	r1, [r4, #0]
 8012004:	6054      	str	r4, [r2, #4]
 8012006:	e7ca      	b.n	8011f9e <_free_r+0x22>
 8012008:	bd38      	pop	{r3, r4, r5, pc}
 801200a:	bf00      	nop
 801200c:	2000a47c 	.word	0x2000a47c

08012010 <__ssputs_r>:
 8012010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012014:	688e      	ldr	r6, [r1, #8]
 8012016:	461f      	mov	r7, r3
 8012018:	42be      	cmp	r6, r7
 801201a:	680b      	ldr	r3, [r1, #0]
 801201c:	4682      	mov	sl, r0
 801201e:	460c      	mov	r4, r1
 8012020:	4690      	mov	r8, r2
 8012022:	d82d      	bhi.n	8012080 <__ssputs_r+0x70>
 8012024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012028:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801202c:	d026      	beq.n	801207c <__ssputs_r+0x6c>
 801202e:	6965      	ldr	r5, [r4, #20]
 8012030:	6909      	ldr	r1, [r1, #16]
 8012032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012036:	eba3 0901 	sub.w	r9, r3, r1
 801203a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801203e:	1c7b      	adds	r3, r7, #1
 8012040:	444b      	add	r3, r9
 8012042:	106d      	asrs	r5, r5, #1
 8012044:	429d      	cmp	r5, r3
 8012046:	bf38      	it	cc
 8012048:	461d      	movcc	r5, r3
 801204a:	0553      	lsls	r3, r2, #21
 801204c:	d527      	bpl.n	801209e <__ssputs_r+0x8e>
 801204e:	4629      	mov	r1, r5
 8012050:	f7ff fc42 	bl	80118d8 <_malloc_r>
 8012054:	4606      	mov	r6, r0
 8012056:	b360      	cbz	r0, 80120b2 <__ssputs_r+0xa2>
 8012058:	6921      	ldr	r1, [r4, #16]
 801205a:	464a      	mov	r2, r9
 801205c:	f000 fd7e 	bl	8012b5c <memcpy>
 8012060:	89a3      	ldrh	r3, [r4, #12]
 8012062:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801206a:	81a3      	strh	r3, [r4, #12]
 801206c:	6126      	str	r6, [r4, #16]
 801206e:	6165      	str	r5, [r4, #20]
 8012070:	444e      	add	r6, r9
 8012072:	eba5 0509 	sub.w	r5, r5, r9
 8012076:	6026      	str	r6, [r4, #0]
 8012078:	60a5      	str	r5, [r4, #8]
 801207a:	463e      	mov	r6, r7
 801207c:	42be      	cmp	r6, r7
 801207e:	d900      	bls.n	8012082 <__ssputs_r+0x72>
 8012080:	463e      	mov	r6, r7
 8012082:	6820      	ldr	r0, [r4, #0]
 8012084:	4632      	mov	r2, r6
 8012086:	4641      	mov	r1, r8
 8012088:	f000 fd2c 	bl	8012ae4 <memmove>
 801208c:	68a3      	ldr	r3, [r4, #8]
 801208e:	1b9b      	subs	r3, r3, r6
 8012090:	60a3      	str	r3, [r4, #8]
 8012092:	6823      	ldr	r3, [r4, #0]
 8012094:	4433      	add	r3, r6
 8012096:	6023      	str	r3, [r4, #0]
 8012098:	2000      	movs	r0, #0
 801209a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801209e:	462a      	mov	r2, r5
 80120a0:	f000 fd6a 	bl	8012b78 <_realloc_r>
 80120a4:	4606      	mov	r6, r0
 80120a6:	2800      	cmp	r0, #0
 80120a8:	d1e0      	bne.n	801206c <__ssputs_r+0x5c>
 80120aa:	6921      	ldr	r1, [r4, #16]
 80120ac:	4650      	mov	r0, sl
 80120ae:	f7ff ff65 	bl	8011f7c <_free_r>
 80120b2:	230c      	movs	r3, #12
 80120b4:	f8ca 3000 	str.w	r3, [sl]
 80120b8:	89a3      	ldrh	r3, [r4, #12]
 80120ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80120be:	81a3      	strh	r3, [r4, #12]
 80120c0:	f04f 30ff 	mov.w	r0, #4294967295
 80120c4:	e7e9      	b.n	801209a <__ssputs_r+0x8a>
	...

080120c8 <_svfiprintf_r>:
 80120c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120cc:	4698      	mov	r8, r3
 80120ce:	898b      	ldrh	r3, [r1, #12]
 80120d0:	061b      	lsls	r3, r3, #24
 80120d2:	b09d      	sub	sp, #116	@ 0x74
 80120d4:	4607      	mov	r7, r0
 80120d6:	460d      	mov	r5, r1
 80120d8:	4614      	mov	r4, r2
 80120da:	d510      	bpl.n	80120fe <_svfiprintf_r+0x36>
 80120dc:	690b      	ldr	r3, [r1, #16]
 80120de:	b973      	cbnz	r3, 80120fe <_svfiprintf_r+0x36>
 80120e0:	2140      	movs	r1, #64	@ 0x40
 80120e2:	f7ff fbf9 	bl	80118d8 <_malloc_r>
 80120e6:	6028      	str	r0, [r5, #0]
 80120e8:	6128      	str	r0, [r5, #16]
 80120ea:	b930      	cbnz	r0, 80120fa <_svfiprintf_r+0x32>
 80120ec:	230c      	movs	r3, #12
 80120ee:	603b      	str	r3, [r7, #0]
 80120f0:	f04f 30ff 	mov.w	r0, #4294967295
 80120f4:	b01d      	add	sp, #116	@ 0x74
 80120f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120fa:	2340      	movs	r3, #64	@ 0x40
 80120fc:	616b      	str	r3, [r5, #20]
 80120fe:	2300      	movs	r3, #0
 8012100:	9309      	str	r3, [sp, #36]	@ 0x24
 8012102:	2320      	movs	r3, #32
 8012104:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012108:	f8cd 800c 	str.w	r8, [sp, #12]
 801210c:	2330      	movs	r3, #48	@ 0x30
 801210e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80122ac <_svfiprintf_r+0x1e4>
 8012112:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012116:	f04f 0901 	mov.w	r9, #1
 801211a:	4623      	mov	r3, r4
 801211c:	469a      	mov	sl, r3
 801211e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012122:	b10a      	cbz	r2, 8012128 <_svfiprintf_r+0x60>
 8012124:	2a25      	cmp	r2, #37	@ 0x25
 8012126:	d1f9      	bne.n	801211c <_svfiprintf_r+0x54>
 8012128:	ebba 0b04 	subs.w	fp, sl, r4
 801212c:	d00b      	beq.n	8012146 <_svfiprintf_r+0x7e>
 801212e:	465b      	mov	r3, fp
 8012130:	4622      	mov	r2, r4
 8012132:	4629      	mov	r1, r5
 8012134:	4638      	mov	r0, r7
 8012136:	f7ff ff6b 	bl	8012010 <__ssputs_r>
 801213a:	3001      	adds	r0, #1
 801213c:	f000 80a7 	beq.w	801228e <_svfiprintf_r+0x1c6>
 8012140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012142:	445a      	add	r2, fp
 8012144:	9209      	str	r2, [sp, #36]	@ 0x24
 8012146:	f89a 3000 	ldrb.w	r3, [sl]
 801214a:	2b00      	cmp	r3, #0
 801214c:	f000 809f 	beq.w	801228e <_svfiprintf_r+0x1c6>
 8012150:	2300      	movs	r3, #0
 8012152:	f04f 32ff 	mov.w	r2, #4294967295
 8012156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801215a:	f10a 0a01 	add.w	sl, sl, #1
 801215e:	9304      	str	r3, [sp, #16]
 8012160:	9307      	str	r3, [sp, #28]
 8012162:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012166:	931a      	str	r3, [sp, #104]	@ 0x68
 8012168:	4654      	mov	r4, sl
 801216a:	2205      	movs	r2, #5
 801216c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012170:	484e      	ldr	r0, [pc, #312]	@ (80122ac <_svfiprintf_r+0x1e4>)
 8012172:	f7ee f845 	bl	8000200 <memchr>
 8012176:	9a04      	ldr	r2, [sp, #16]
 8012178:	b9d8      	cbnz	r0, 80121b2 <_svfiprintf_r+0xea>
 801217a:	06d0      	lsls	r0, r2, #27
 801217c:	bf44      	itt	mi
 801217e:	2320      	movmi	r3, #32
 8012180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012184:	0711      	lsls	r1, r2, #28
 8012186:	bf44      	itt	mi
 8012188:	232b      	movmi	r3, #43	@ 0x2b
 801218a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801218e:	f89a 3000 	ldrb.w	r3, [sl]
 8012192:	2b2a      	cmp	r3, #42	@ 0x2a
 8012194:	d015      	beq.n	80121c2 <_svfiprintf_r+0xfa>
 8012196:	9a07      	ldr	r2, [sp, #28]
 8012198:	4654      	mov	r4, sl
 801219a:	2000      	movs	r0, #0
 801219c:	f04f 0c0a 	mov.w	ip, #10
 80121a0:	4621      	mov	r1, r4
 80121a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121a6:	3b30      	subs	r3, #48	@ 0x30
 80121a8:	2b09      	cmp	r3, #9
 80121aa:	d94b      	bls.n	8012244 <_svfiprintf_r+0x17c>
 80121ac:	b1b0      	cbz	r0, 80121dc <_svfiprintf_r+0x114>
 80121ae:	9207      	str	r2, [sp, #28]
 80121b0:	e014      	b.n	80121dc <_svfiprintf_r+0x114>
 80121b2:	eba0 0308 	sub.w	r3, r0, r8
 80121b6:	fa09 f303 	lsl.w	r3, r9, r3
 80121ba:	4313      	orrs	r3, r2
 80121bc:	9304      	str	r3, [sp, #16]
 80121be:	46a2      	mov	sl, r4
 80121c0:	e7d2      	b.n	8012168 <_svfiprintf_r+0xa0>
 80121c2:	9b03      	ldr	r3, [sp, #12]
 80121c4:	1d19      	adds	r1, r3, #4
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	9103      	str	r1, [sp, #12]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	bfbb      	ittet	lt
 80121ce:	425b      	neglt	r3, r3
 80121d0:	f042 0202 	orrlt.w	r2, r2, #2
 80121d4:	9307      	strge	r3, [sp, #28]
 80121d6:	9307      	strlt	r3, [sp, #28]
 80121d8:	bfb8      	it	lt
 80121da:	9204      	strlt	r2, [sp, #16]
 80121dc:	7823      	ldrb	r3, [r4, #0]
 80121de:	2b2e      	cmp	r3, #46	@ 0x2e
 80121e0:	d10a      	bne.n	80121f8 <_svfiprintf_r+0x130>
 80121e2:	7863      	ldrb	r3, [r4, #1]
 80121e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80121e6:	d132      	bne.n	801224e <_svfiprintf_r+0x186>
 80121e8:	9b03      	ldr	r3, [sp, #12]
 80121ea:	1d1a      	adds	r2, r3, #4
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	9203      	str	r2, [sp, #12]
 80121f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80121f4:	3402      	adds	r4, #2
 80121f6:	9305      	str	r3, [sp, #20]
 80121f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80122bc <_svfiprintf_r+0x1f4>
 80121fc:	7821      	ldrb	r1, [r4, #0]
 80121fe:	2203      	movs	r2, #3
 8012200:	4650      	mov	r0, sl
 8012202:	f7ed fffd 	bl	8000200 <memchr>
 8012206:	b138      	cbz	r0, 8012218 <_svfiprintf_r+0x150>
 8012208:	9b04      	ldr	r3, [sp, #16]
 801220a:	eba0 000a 	sub.w	r0, r0, sl
 801220e:	2240      	movs	r2, #64	@ 0x40
 8012210:	4082      	lsls	r2, r0
 8012212:	4313      	orrs	r3, r2
 8012214:	3401      	adds	r4, #1
 8012216:	9304      	str	r3, [sp, #16]
 8012218:	f814 1b01 	ldrb.w	r1, [r4], #1
 801221c:	4824      	ldr	r0, [pc, #144]	@ (80122b0 <_svfiprintf_r+0x1e8>)
 801221e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012222:	2206      	movs	r2, #6
 8012224:	f7ed ffec 	bl	8000200 <memchr>
 8012228:	2800      	cmp	r0, #0
 801222a:	d036      	beq.n	801229a <_svfiprintf_r+0x1d2>
 801222c:	4b21      	ldr	r3, [pc, #132]	@ (80122b4 <_svfiprintf_r+0x1ec>)
 801222e:	bb1b      	cbnz	r3, 8012278 <_svfiprintf_r+0x1b0>
 8012230:	9b03      	ldr	r3, [sp, #12]
 8012232:	3307      	adds	r3, #7
 8012234:	f023 0307 	bic.w	r3, r3, #7
 8012238:	3308      	adds	r3, #8
 801223a:	9303      	str	r3, [sp, #12]
 801223c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801223e:	4433      	add	r3, r6
 8012240:	9309      	str	r3, [sp, #36]	@ 0x24
 8012242:	e76a      	b.n	801211a <_svfiprintf_r+0x52>
 8012244:	fb0c 3202 	mla	r2, ip, r2, r3
 8012248:	460c      	mov	r4, r1
 801224a:	2001      	movs	r0, #1
 801224c:	e7a8      	b.n	80121a0 <_svfiprintf_r+0xd8>
 801224e:	2300      	movs	r3, #0
 8012250:	3401      	adds	r4, #1
 8012252:	9305      	str	r3, [sp, #20]
 8012254:	4619      	mov	r1, r3
 8012256:	f04f 0c0a 	mov.w	ip, #10
 801225a:	4620      	mov	r0, r4
 801225c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012260:	3a30      	subs	r2, #48	@ 0x30
 8012262:	2a09      	cmp	r2, #9
 8012264:	d903      	bls.n	801226e <_svfiprintf_r+0x1a6>
 8012266:	2b00      	cmp	r3, #0
 8012268:	d0c6      	beq.n	80121f8 <_svfiprintf_r+0x130>
 801226a:	9105      	str	r1, [sp, #20]
 801226c:	e7c4      	b.n	80121f8 <_svfiprintf_r+0x130>
 801226e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012272:	4604      	mov	r4, r0
 8012274:	2301      	movs	r3, #1
 8012276:	e7f0      	b.n	801225a <_svfiprintf_r+0x192>
 8012278:	ab03      	add	r3, sp, #12
 801227a:	9300      	str	r3, [sp, #0]
 801227c:	462a      	mov	r2, r5
 801227e:	4b0e      	ldr	r3, [pc, #56]	@ (80122b8 <_svfiprintf_r+0x1f0>)
 8012280:	a904      	add	r1, sp, #16
 8012282:	4638      	mov	r0, r7
 8012284:	f3af 8000 	nop.w
 8012288:	1c42      	adds	r2, r0, #1
 801228a:	4606      	mov	r6, r0
 801228c:	d1d6      	bne.n	801223c <_svfiprintf_r+0x174>
 801228e:	89ab      	ldrh	r3, [r5, #12]
 8012290:	065b      	lsls	r3, r3, #25
 8012292:	f53f af2d 	bmi.w	80120f0 <_svfiprintf_r+0x28>
 8012296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012298:	e72c      	b.n	80120f4 <_svfiprintf_r+0x2c>
 801229a:	ab03      	add	r3, sp, #12
 801229c:	9300      	str	r3, [sp, #0]
 801229e:	462a      	mov	r2, r5
 80122a0:	4b05      	ldr	r3, [pc, #20]	@ (80122b8 <_svfiprintf_r+0x1f0>)
 80122a2:	a904      	add	r1, sp, #16
 80122a4:	4638      	mov	r0, r7
 80122a6:	f000 f9bb 	bl	8012620 <_printf_i>
 80122aa:	e7ed      	b.n	8012288 <_svfiprintf_r+0x1c0>
 80122ac:	08016cc8 	.word	0x08016cc8
 80122b0:	08016cd2 	.word	0x08016cd2
 80122b4:	00000000 	.word	0x00000000
 80122b8:	08012011 	.word	0x08012011
 80122bc:	08016cce 	.word	0x08016cce

080122c0 <__sfputc_r>:
 80122c0:	6893      	ldr	r3, [r2, #8]
 80122c2:	3b01      	subs	r3, #1
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	b410      	push	{r4}
 80122c8:	6093      	str	r3, [r2, #8]
 80122ca:	da08      	bge.n	80122de <__sfputc_r+0x1e>
 80122cc:	6994      	ldr	r4, [r2, #24]
 80122ce:	42a3      	cmp	r3, r4
 80122d0:	db01      	blt.n	80122d6 <__sfputc_r+0x16>
 80122d2:	290a      	cmp	r1, #10
 80122d4:	d103      	bne.n	80122de <__sfputc_r+0x1e>
 80122d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122da:	f7ff bd26 	b.w	8011d2a <__swbuf_r>
 80122de:	6813      	ldr	r3, [r2, #0]
 80122e0:	1c58      	adds	r0, r3, #1
 80122e2:	6010      	str	r0, [r2, #0]
 80122e4:	7019      	strb	r1, [r3, #0]
 80122e6:	4608      	mov	r0, r1
 80122e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122ec:	4770      	bx	lr

080122ee <__sfputs_r>:
 80122ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122f0:	4606      	mov	r6, r0
 80122f2:	460f      	mov	r7, r1
 80122f4:	4614      	mov	r4, r2
 80122f6:	18d5      	adds	r5, r2, r3
 80122f8:	42ac      	cmp	r4, r5
 80122fa:	d101      	bne.n	8012300 <__sfputs_r+0x12>
 80122fc:	2000      	movs	r0, #0
 80122fe:	e007      	b.n	8012310 <__sfputs_r+0x22>
 8012300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012304:	463a      	mov	r2, r7
 8012306:	4630      	mov	r0, r6
 8012308:	f7ff ffda 	bl	80122c0 <__sfputc_r>
 801230c:	1c43      	adds	r3, r0, #1
 801230e:	d1f3      	bne.n	80122f8 <__sfputs_r+0xa>
 8012310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012314 <_vfiprintf_r>:
 8012314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012318:	460d      	mov	r5, r1
 801231a:	b09d      	sub	sp, #116	@ 0x74
 801231c:	4614      	mov	r4, r2
 801231e:	4698      	mov	r8, r3
 8012320:	4606      	mov	r6, r0
 8012322:	b118      	cbz	r0, 801232c <_vfiprintf_r+0x18>
 8012324:	6a03      	ldr	r3, [r0, #32]
 8012326:	b90b      	cbnz	r3, 801232c <_vfiprintf_r+0x18>
 8012328:	f7ff fbee 	bl	8011b08 <__sinit>
 801232c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801232e:	07d9      	lsls	r1, r3, #31
 8012330:	d405      	bmi.n	801233e <_vfiprintf_r+0x2a>
 8012332:	89ab      	ldrh	r3, [r5, #12]
 8012334:	059a      	lsls	r2, r3, #22
 8012336:	d402      	bmi.n	801233e <_vfiprintf_r+0x2a>
 8012338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801233a:	f7ff fe14 	bl	8011f66 <__retarget_lock_acquire_recursive>
 801233e:	89ab      	ldrh	r3, [r5, #12]
 8012340:	071b      	lsls	r3, r3, #28
 8012342:	d501      	bpl.n	8012348 <_vfiprintf_r+0x34>
 8012344:	692b      	ldr	r3, [r5, #16]
 8012346:	b99b      	cbnz	r3, 8012370 <_vfiprintf_r+0x5c>
 8012348:	4629      	mov	r1, r5
 801234a:	4630      	mov	r0, r6
 801234c:	f7ff fd2c 	bl	8011da8 <__swsetup_r>
 8012350:	b170      	cbz	r0, 8012370 <_vfiprintf_r+0x5c>
 8012352:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012354:	07dc      	lsls	r4, r3, #31
 8012356:	d504      	bpl.n	8012362 <_vfiprintf_r+0x4e>
 8012358:	f04f 30ff 	mov.w	r0, #4294967295
 801235c:	b01d      	add	sp, #116	@ 0x74
 801235e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012362:	89ab      	ldrh	r3, [r5, #12]
 8012364:	0598      	lsls	r0, r3, #22
 8012366:	d4f7      	bmi.n	8012358 <_vfiprintf_r+0x44>
 8012368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801236a:	f7ff fdfd 	bl	8011f68 <__retarget_lock_release_recursive>
 801236e:	e7f3      	b.n	8012358 <_vfiprintf_r+0x44>
 8012370:	2300      	movs	r3, #0
 8012372:	9309      	str	r3, [sp, #36]	@ 0x24
 8012374:	2320      	movs	r3, #32
 8012376:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801237a:	f8cd 800c 	str.w	r8, [sp, #12]
 801237e:	2330      	movs	r3, #48	@ 0x30
 8012380:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012530 <_vfiprintf_r+0x21c>
 8012384:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012388:	f04f 0901 	mov.w	r9, #1
 801238c:	4623      	mov	r3, r4
 801238e:	469a      	mov	sl, r3
 8012390:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012394:	b10a      	cbz	r2, 801239a <_vfiprintf_r+0x86>
 8012396:	2a25      	cmp	r2, #37	@ 0x25
 8012398:	d1f9      	bne.n	801238e <_vfiprintf_r+0x7a>
 801239a:	ebba 0b04 	subs.w	fp, sl, r4
 801239e:	d00b      	beq.n	80123b8 <_vfiprintf_r+0xa4>
 80123a0:	465b      	mov	r3, fp
 80123a2:	4622      	mov	r2, r4
 80123a4:	4629      	mov	r1, r5
 80123a6:	4630      	mov	r0, r6
 80123a8:	f7ff ffa1 	bl	80122ee <__sfputs_r>
 80123ac:	3001      	adds	r0, #1
 80123ae:	f000 80a7 	beq.w	8012500 <_vfiprintf_r+0x1ec>
 80123b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123b4:	445a      	add	r2, fp
 80123b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80123b8:	f89a 3000 	ldrb.w	r3, [sl]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	f000 809f 	beq.w	8012500 <_vfiprintf_r+0x1ec>
 80123c2:	2300      	movs	r3, #0
 80123c4:	f04f 32ff 	mov.w	r2, #4294967295
 80123c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123cc:	f10a 0a01 	add.w	sl, sl, #1
 80123d0:	9304      	str	r3, [sp, #16]
 80123d2:	9307      	str	r3, [sp, #28]
 80123d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80123d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80123da:	4654      	mov	r4, sl
 80123dc:	2205      	movs	r2, #5
 80123de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123e2:	4853      	ldr	r0, [pc, #332]	@ (8012530 <_vfiprintf_r+0x21c>)
 80123e4:	f7ed ff0c 	bl	8000200 <memchr>
 80123e8:	9a04      	ldr	r2, [sp, #16]
 80123ea:	b9d8      	cbnz	r0, 8012424 <_vfiprintf_r+0x110>
 80123ec:	06d1      	lsls	r1, r2, #27
 80123ee:	bf44      	itt	mi
 80123f0:	2320      	movmi	r3, #32
 80123f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80123f6:	0713      	lsls	r3, r2, #28
 80123f8:	bf44      	itt	mi
 80123fa:	232b      	movmi	r3, #43	@ 0x2b
 80123fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012400:	f89a 3000 	ldrb.w	r3, [sl]
 8012404:	2b2a      	cmp	r3, #42	@ 0x2a
 8012406:	d015      	beq.n	8012434 <_vfiprintf_r+0x120>
 8012408:	9a07      	ldr	r2, [sp, #28]
 801240a:	4654      	mov	r4, sl
 801240c:	2000      	movs	r0, #0
 801240e:	f04f 0c0a 	mov.w	ip, #10
 8012412:	4621      	mov	r1, r4
 8012414:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012418:	3b30      	subs	r3, #48	@ 0x30
 801241a:	2b09      	cmp	r3, #9
 801241c:	d94b      	bls.n	80124b6 <_vfiprintf_r+0x1a2>
 801241e:	b1b0      	cbz	r0, 801244e <_vfiprintf_r+0x13a>
 8012420:	9207      	str	r2, [sp, #28]
 8012422:	e014      	b.n	801244e <_vfiprintf_r+0x13a>
 8012424:	eba0 0308 	sub.w	r3, r0, r8
 8012428:	fa09 f303 	lsl.w	r3, r9, r3
 801242c:	4313      	orrs	r3, r2
 801242e:	9304      	str	r3, [sp, #16]
 8012430:	46a2      	mov	sl, r4
 8012432:	e7d2      	b.n	80123da <_vfiprintf_r+0xc6>
 8012434:	9b03      	ldr	r3, [sp, #12]
 8012436:	1d19      	adds	r1, r3, #4
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	9103      	str	r1, [sp, #12]
 801243c:	2b00      	cmp	r3, #0
 801243e:	bfbb      	ittet	lt
 8012440:	425b      	neglt	r3, r3
 8012442:	f042 0202 	orrlt.w	r2, r2, #2
 8012446:	9307      	strge	r3, [sp, #28]
 8012448:	9307      	strlt	r3, [sp, #28]
 801244a:	bfb8      	it	lt
 801244c:	9204      	strlt	r2, [sp, #16]
 801244e:	7823      	ldrb	r3, [r4, #0]
 8012450:	2b2e      	cmp	r3, #46	@ 0x2e
 8012452:	d10a      	bne.n	801246a <_vfiprintf_r+0x156>
 8012454:	7863      	ldrb	r3, [r4, #1]
 8012456:	2b2a      	cmp	r3, #42	@ 0x2a
 8012458:	d132      	bne.n	80124c0 <_vfiprintf_r+0x1ac>
 801245a:	9b03      	ldr	r3, [sp, #12]
 801245c:	1d1a      	adds	r2, r3, #4
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	9203      	str	r2, [sp, #12]
 8012462:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012466:	3402      	adds	r4, #2
 8012468:	9305      	str	r3, [sp, #20]
 801246a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012540 <_vfiprintf_r+0x22c>
 801246e:	7821      	ldrb	r1, [r4, #0]
 8012470:	2203      	movs	r2, #3
 8012472:	4650      	mov	r0, sl
 8012474:	f7ed fec4 	bl	8000200 <memchr>
 8012478:	b138      	cbz	r0, 801248a <_vfiprintf_r+0x176>
 801247a:	9b04      	ldr	r3, [sp, #16]
 801247c:	eba0 000a 	sub.w	r0, r0, sl
 8012480:	2240      	movs	r2, #64	@ 0x40
 8012482:	4082      	lsls	r2, r0
 8012484:	4313      	orrs	r3, r2
 8012486:	3401      	adds	r4, #1
 8012488:	9304      	str	r3, [sp, #16]
 801248a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801248e:	4829      	ldr	r0, [pc, #164]	@ (8012534 <_vfiprintf_r+0x220>)
 8012490:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012494:	2206      	movs	r2, #6
 8012496:	f7ed feb3 	bl	8000200 <memchr>
 801249a:	2800      	cmp	r0, #0
 801249c:	d03f      	beq.n	801251e <_vfiprintf_r+0x20a>
 801249e:	4b26      	ldr	r3, [pc, #152]	@ (8012538 <_vfiprintf_r+0x224>)
 80124a0:	bb1b      	cbnz	r3, 80124ea <_vfiprintf_r+0x1d6>
 80124a2:	9b03      	ldr	r3, [sp, #12]
 80124a4:	3307      	adds	r3, #7
 80124a6:	f023 0307 	bic.w	r3, r3, #7
 80124aa:	3308      	adds	r3, #8
 80124ac:	9303      	str	r3, [sp, #12]
 80124ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124b0:	443b      	add	r3, r7
 80124b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80124b4:	e76a      	b.n	801238c <_vfiprintf_r+0x78>
 80124b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80124ba:	460c      	mov	r4, r1
 80124bc:	2001      	movs	r0, #1
 80124be:	e7a8      	b.n	8012412 <_vfiprintf_r+0xfe>
 80124c0:	2300      	movs	r3, #0
 80124c2:	3401      	adds	r4, #1
 80124c4:	9305      	str	r3, [sp, #20]
 80124c6:	4619      	mov	r1, r3
 80124c8:	f04f 0c0a 	mov.w	ip, #10
 80124cc:	4620      	mov	r0, r4
 80124ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124d2:	3a30      	subs	r2, #48	@ 0x30
 80124d4:	2a09      	cmp	r2, #9
 80124d6:	d903      	bls.n	80124e0 <_vfiprintf_r+0x1cc>
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d0c6      	beq.n	801246a <_vfiprintf_r+0x156>
 80124dc:	9105      	str	r1, [sp, #20]
 80124de:	e7c4      	b.n	801246a <_vfiprintf_r+0x156>
 80124e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80124e4:	4604      	mov	r4, r0
 80124e6:	2301      	movs	r3, #1
 80124e8:	e7f0      	b.n	80124cc <_vfiprintf_r+0x1b8>
 80124ea:	ab03      	add	r3, sp, #12
 80124ec:	9300      	str	r3, [sp, #0]
 80124ee:	462a      	mov	r2, r5
 80124f0:	4b12      	ldr	r3, [pc, #72]	@ (801253c <_vfiprintf_r+0x228>)
 80124f2:	a904      	add	r1, sp, #16
 80124f4:	4630      	mov	r0, r6
 80124f6:	f3af 8000 	nop.w
 80124fa:	4607      	mov	r7, r0
 80124fc:	1c78      	adds	r0, r7, #1
 80124fe:	d1d6      	bne.n	80124ae <_vfiprintf_r+0x19a>
 8012500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012502:	07d9      	lsls	r1, r3, #31
 8012504:	d405      	bmi.n	8012512 <_vfiprintf_r+0x1fe>
 8012506:	89ab      	ldrh	r3, [r5, #12]
 8012508:	059a      	lsls	r2, r3, #22
 801250a:	d402      	bmi.n	8012512 <_vfiprintf_r+0x1fe>
 801250c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801250e:	f7ff fd2b 	bl	8011f68 <__retarget_lock_release_recursive>
 8012512:	89ab      	ldrh	r3, [r5, #12]
 8012514:	065b      	lsls	r3, r3, #25
 8012516:	f53f af1f 	bmi.w	8012358 <_vfiprintf_r+0x44>
 801251a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801251c:	e71e      	b.n	801235c <_vfiprintf_r+0x48>
 801251e:	ab03      	add	r3, sp, #12
 8012520:	9300      	str	r3, [sp, #0]
 8012522:	462a      	mov	r2, r5
 8012524:	4b05      	ldr	r3, [pc, #20]	@ (801253c <_vfiprintf_r+0x228>)
 8012526:	a904      	add	r1, sp, #16
 8012528:	4630      	mov	r0, r6
 801252a:	f000 f879 	bl	8012620 <_printf_i>
 801252e:	e7e4      	b.n	80124fa <_vfiprintf_r+0x1e6>
 8012530:	08016cc8 	.word	0x08016cc8
 8012534:	08016cd2 	.word	0x08016cd2
 8012538:	00000000 	.word	0x00000000
 801253c:	080122ef 	.word	0x080122ef
 8012540:	08016cce 	.word	0x08016cce

08012544 <_printf_common>:
 8012544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012548:	4616      	mov	r6, r2
 801254a:	4698      	mov	r8, r3
 801254c:	688a      	ldr	r2, [r1, #8]
 801254e:	690b      	ldr	r3, [r1, #16]
 8012550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012554:	4293      	cmp	r3, r2
 8012556:	bfb8      	it	lt
 8012558:	4613      	movlt	r3, r2
 801255a:	6033      	str	r3, [r6, #0]
 801255c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012560:	4607      	mov	r7, r0
 8012562:	460c      	mov	r4, r1
 8012564:	b10a      	cbz	r2, 801256a <_printf_common+0x26>
 8012566:	3301      	adds	r3, #1
 8012568:	6033      	str	r3, [r6, #0]
 801256a:	6823      	ldr	r3, [r4, #0]
 801256c:	0699      	lsls	r1, r3, #26
 801256e:	bf42      	ittt	mi
 8012570:	6833      	ldrmi	r3, [r6, #0]
 8012572:	3302      	addmi	r3, #2
 8012574:	6033      	strmi	r3, [r6, #0]
 8012576:	6825      	ldr	r5, [r4, #0]
 8012578:	f015 0506 	ands.w	r5, r5, #6
 801257c:	d106      	bne.n	801258c <_printf_common+0x48>
 801257e:	f104 0a19 	add.w	sl, r4, #25
 8012582:	68e3      	ldr	r3, [r4, #12]
 8012584:	6832      	ldr	r2, [r6, #0]
 8012586:	1a9b      	subs	r3, r3, r2
 8012588:	42ab      	cmp	r3, r5
 801258a:	dc26      	bgt.n	80125da <_printf_common+0x96>
 801258c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012590:	6822      	ldr	r2, [r4, #0]
 8012592:	3b00      	subs	r3, #0
 8012594:	bf18      	it	ne
 8012596:	2301      	movne	r3, #1
 8012598:	0692      	lsls	r2, r2, #26
 801259a:	d42b      	bmi.n	80125f4 <_printf_common+0xb0>
 801259c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80125a0:	4641      	mov	r1, r8
 80125a2:	4638      	mov	r0, r7
 80125a4:	47c8      	blx	r9
 80125a6:	3001      	adds	r0, #1
 80125a8:	d01e      	beq.n	80125e8 <_printf_common+0xa4>
 80125aa:	6823      	ldr	r3, [r4, #0]
 80125ac:	6922      	ldr	r2, [r4, #16]
 80125ae:	f003 0306 	and.w	r3, r3, #6
 80125b2:	2b04      	cmp	r3, #4
 80125b4:	bf02      	ittt	eq
 80125b6:	68e5      	ldreq	r5, [r4, #12]
 80125b8:	6833      	ldreq	r3, [r6, #0]
 80125ba:	1aed      	subeq	r5, r5, r3
 80125bc:	68a3      	ldr	r3, [r4, #8]
 80125be:	bf0c      	ite	eq
 80125c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80125c4:	2500      	movne	r5, #0
 80125c6:	4293      	cmp	r3, r2
 80125c8:	bfc4      	itt	gt
 80125ca:	1a9b      	subgt	r3, r3, r2
 80125cc:	18ed      	addgt	r5, r5, r3
 80125ce:	2600      	movs	r6, #0
 80125d0:	341a      	adds	r4, #26
 80125d2:	42b5      	cmp	r5, r6
 80125d4:	d11a      	bne.n	801260c <_printf_common+0xc8>
 80125d6:	2000      	movs	r0, #0
 80125d8:	e008      	b.n	80125ec <_printf_common+0xa8>
 80125da:	2301      	movs	r3, #1
 80125dc:	4652      	mov	r2, sl
 80125de:	4641      	mov	r1, r8
 80125e0:	4638      	mov	r0, r7
 80125e2:	47c8      	blx	r9
 80125e4:	3001      	adds	r0, #1
 80125e6:	d103      	bne.n	80125f0 <_printf_common+0xac>
 80125e8:	f04f 30ff 	mov.w	r0, #4294967295
 80125ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125f0:	3501      	adds	r5, #1
 80125f2:	e7c6      	b.n	8012582 <_printf_common+0x3e>
 80125f4:	18e1      	adds	r1, r4, r3
 80125f6:	1c5a      	adds	r2, r3, #1
 80125f8:	2030      	movs	r0, #48	@ 0x30
 80125fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80125fe:	4422      	add	r2, r4
 8012600:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012604:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012608:	3302      	adds	r3, #2
 801260a:	e7c7      	b.n	801259c <_printf_common+0x58>
 801260c:	2301      	movs	r3, #1
 801260e:	4622      	mov	r2, r4
 8012610:	4641      	mov	r1, r8
 8012612:	4638      	mov	r0, r7
 8012614:	47c8      	blx	r9
 8012616:	3001      	adds	r0, #1
 8012618:	d0e6      	beq.n	80125e8 <_printf_common+0xa4>
 801261a:	3601      	adds	r6, #1
 801261c:	e7d9      	b.n	80125d2 <_printf_common+0x8e>
	...

08012620 <_printf_i>:
 8012620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012624:	7e0f      	ldrb	r7, [r1, #24]
 8012626:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012628:	2f78      	cmp	r7, #120	@ 0x78
 801262a:	4691      	mov	r9, r2
 801262c:	4680      	mov	r8, r0
 801262e:	460c      	mov	r4, r1
 8012630:	469a      	mov	sl, r3
 8012632:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012636:	d807      	bhi.n	8012648 <_printf_i+0x28>
 8012638:	2f62      	cmp	r7, #98	@ 0x62
 801263a:	d80a      	bhi.n	8012652 <_printf_i+0x32>
 801263c:	2f00      	cmp	r7, #0
 801263e:	f000 80d2 	beq.w	80127e6 <_printf_i+0x1c6>
 8012642:	2f58      	cmp	r7, #88	@ 0x58
 8012644:	f000 80b9 	beq.w	80127ba <_printf_i+0x19a>
 8012648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801264c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012650:	e03a      	b.n	80126c8 <_printf_i+0xa8>
 8012652:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012656:	2b15      	cmp	r3, #21
 8012658:	d8f6      	bhi.n	8012648 <_printf_i+0x28>
 801265a:	a101      	add	r1, pc, #4	@ (adr r1, 8012660 <_printf_i+0x40>)
 801265c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012660:	080126b9 	.word	0x080126b9
 8012664:	080126cd 	.word	0x080126cd
 8012668:	08012649 	.word	0x08012649
 801266c:	08012649 	.word	0x08012649
 8012670:	08012649 	.word	0x08012649
 8012674:	08012649 	.word	0x08012649
 8012678:	080126cd 	.word	0x080126cd
 801267c:	08012649 	.word	0x08012649
 8012680:	08012649 	.word	0x08012649
 8012684:	08012649 	.word	0x08012649
 8012688:	08012649 	.word	0x08012649
 801268c:	080127cd 	.word	0x080127cd
 8012690:	080126f7 	.word	0x080126f7
 8012694:	08012787 	.word	0x08012787
 8012698:	08012649 	.word	0x08012649
 801269c:	08012649 	.word	0x08012649
 80126a0:	080127ef 	.word	0x080127ef
 80126a4:	08012649 	.word	0x08012649
 80126a8:	080126f7 	.word	0x080126f7
 80126ac:	08012649 	.word	0x08012649
 80126b0:	08012649 	.word	0x08012649
 80126b4:	0801278f 	.word	0x0801278f
 80126b8:	6833      	ldr	r3, [r6, #0]
 80126ba:	1d1a      	adds	r2, r3, #4
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	6032      	str	r2, [r6, #0]
 80126c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80126c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80126c8:	2301      	movs	r3, #1
 80126ca:	e09d      	b.n	8012808 <_printf_i+0x1e8>
 80126cc:	6833      	ldr	r3, [r6, #0]
 80126ce:	6820      	ldr	r0, [r4, #0]
 80126d0:	1d19      	adds	r1, r3, #4
 80126d2:	6031      	str	r1, [r6, #0]
 80126d4:	0606      	lsls	r6, r0, #24
 80126d6:	d501      	bpl.n	80126dc <_printf_i+0xbc>
 80126d8:	681d      	ldr	r5, [r3, #0]
 80126da:	e003      	b.n	80126e4 <_printf_i+0xc4>
 80126dc:	0645      	lsls	r5, r0, #25
 80126de:	d5fb      	bpl.n	80126d8 <_printf_i+0xb8>
 80126e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80126e4:	2d00      	cmp	r5, #0
 80126e6:	da03      	bge.n	80126f0 <_printf_i+0xd0>
 80126e8:	232d      	movs	r3, #45	@ 0x2d
 80126ea:	426d      	negs	r5, r5
 80126ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80126f0:	4859      	ldr	r0, [pc, #356]	@ (8012858 <_printf_i+0x238>)
 80126f2:	230a      	movs	r3, #10
 80126f4:	e011      	b.n	801271a <_printf_i+0xfa>
 80126f6:	6821      	ldr	r1, [r4, #0]
 80126f8:	6833      	ldr	r3, [r6, #0]
 80126fa:	0608      	lsls	r0, r1, #24
 80126fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8012700:	d402      	bmi.n	8012708 <_printf_i+0xe8>
 8012702:	0649      	lsls	r1, r1, #25
 8012704:	bf48      	it	mi
 8012706:	b2ad      	uxthmi	r5, r5
 8012708:	2f6f      	cmp	r7, #111	@ 0x6f
 801270a:	4853      	ldr	r0, [pc, #332]	@ (8012858 <_printf_i+0x238>)
 801270c:	6033      	str	r3, [r6, #0]
 801270e:	bf14      	ite	ne
 8012710:	230a      	movne	r3, #10
 8012712:	2308      	moveq	r3, #8
 8012714:	2100      	movs	r1, #0
 8012716:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801271a:	6866      	ldr	r6, [r4, #4]
 801271c:	60a6      	str	r6, [r4, #8]
 801271e:	2e00      	cmp	r6, #0
 8012720:	bfa2      	ittt	ge
 8012722:	6821      	ldrge	r1, [r4, #0]
 8012724:	f021 0104 	bicge.w	r1, r1, #4
 8012728:	6021      	strge	r1, [r4, #0]
 801272a:	b90d      	cbnz	r5, 8012730 <_printf_i+0x110>
 801272c:	2e00      	cmp	r6, #0
 801272e:	d04b      	beq.n	80127c8 <_printf_i+0x1a8>
 8012730:	4616      	mov	r6, r2
 8012732:	fbb5 f1f3 	udiv	r1, r5, r3
 8012736:	fb03 5711 	mls	r7, r3, r1, r5
 801273a:	5dc7      	ldrb	r7, [r0, r7]
 801273c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012740:	462f      	mov	r7, r5
 8012742:	42bb      	cmp	r3, r7
 8012744:	460d      	mov	r5, r1
 8012746:	d9f4      	bls.n	8012732 <_printf_i+0x112>
 8012748:	2b08      	cmp	r3, #8
 801274a:	d10b      	bne.n	8012764 <_printf_i+0x144>
 801274c:	6823      	ldr	r3, [r4, #0]
 801274e:	07df      	lsls	r7, r3, #31
 8012750:	d508      	bpl.n	8012764 <_printf_i+0x144>
 8012752:	6923      	ldr	r3, [r4, #16]
 8012754:	6861      	ldr	r1, [r4, #4]
 8012756:	4299      	cmp	r1, r3
 8012758:	bfde      	ittt	le
 801275a:	2330      	movle	r3, #48	@ 0x30
 801275c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012760:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012764:	1b92      	subs	r2, r2, r6
 8012766:	6122      	str	r2, [r4, #16]
 8012768:	f8cd a000 	str.w	sl, [sp]
 801276c:	464b      	mov	r3, r9
 801276e:	aa03      	add	r2, sp, #12
 8012770:	4621      	mov	r1, r4
 8012772:	4640      	mov	r0, r8
 8012774:	f7ff fee6 	bl	8012544 <_printf_common>
 8012778:	3001      	adds	r0, #1
 801277a:	d14a      	bne.n	8012812 <_printf_i+0x1f2>
 801277c:	f04f 30ff 	mov.w	r0, #4294967295
 8012780:	b004      	add	sp, #16
 8012782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012786:	6823      	ldr	r3, [r4, #0]
 8012788:	f043 0320 	orr.w	r3, r3, #32
 801278c:	6023      	str	r3, [r4, #0]
 801278e:	4833      	ldr	r0, [pc, #204]	@ (801285c <_printf_i+0x23c>)
 8012790:	2778      	movs	r7, #120	@ 0x78
 8012792:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012796:	6823      	ldr	r3, [r4, #0]
 8012798:	6831      	ldr	r1, [r6, #0]
 801279a:	061f      	lsls	r7, r3, #24
 801279c:	f851 5b04 	ldr.w	r5, [r1], #4
 80127a0:	d402      	bmi.n	80127a8 <_printf_i+0x188>
 80127a2:	065f      	lsls	r7, r3, #25
 80127a4:	bf48      	it	mi
 80127a6:	b2ad      	uxthmi	r5, r5
 80127a8:	6031      	str	r1, [r6, #0]
 80127aa:	07d9      	lsls	r1, r3, #31
 80127ac:	bf44      	itt	mi
 80127ae:	f043 0320 	orrmi.w	r3, r3, #32
 80127b2:	6023      	strmi	r3, [r4, #0]
 80127b4:	b11d      	cbz	r5, 80127be <_printf_i+0x19e>
 80127b6:	2310      	movs	r3, #16
 80127b8:	e7ac      	b.n	8012714 <_printf_i+0xf4>
 80127ba:	4827      	ldr	r0, [pc, #156]	@ (8012858 <_printf_i+0x238>)
 80127bc:	e7e9      	b.n	8012792 <_printf_i+0x172>
 80127be:	6823      	ldr	r3, [r4, #0]
 80127c0:	f023 0320 	bic.w	r3, r3, #32
 80127c4:	6023      	str	r3, [r4, #0]
 80127c6:	e7f6      	b.n	80127b6 <_printf_i+0x196>
 80127c8:	4616      	mov	r6, r2
 80127ca:	e7bd      	b.n	8012748 <_printf_i+0x128>
 80127cc:	6833      	ldr	r3, [r6, #0]
 80127ce:	6825      	ldr	r5, [r4, #0]
 80127d0:	6961      	ldr	r1, [r4, #20]
 80127d2:	1d18      	adds	r0, r3, #4
 80127d4:	6030      	str	r0, [r6, #0]
 80127d6:	062e      	lsls	r6, r5, #24
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	d501      	bpl.n	80127e0 <_printf_i+0x1c0>
 80127dc:	6019      	str	r1, [r3, #0]
 80127de:	e002      	b.n	80127e6 <_printf_i+0x1c6>
 80127e0:	0668      	lsls	r0, r5, #25
 80127e2:	d5fb      	bpl.n	80127dc <_printf_i+0x1bc>
 80127e4:	8019      	strh	r1, [r3, #0]
 80127e6:	2300      	movs	r3, #0
 80127e8:	6123      	str	r3, [r4, #16]
 80127ea:	4616      	mov	r6, r2
 80127ec:	e7bc      	b.n	8012768 <_printf_i+0x148>
 80127ee:	6833      	ldr	r3, [r6, #0]
 80127f0:	1d1a      	adds	r2, r3, #4
 80127f2:	6032      	str	r2, [r6, #0]
 80127f4:	681e      	ldr	r6, [r3, #0]
 80127f6:	6862      	ldr	r2, [r4, #4]
 80127f8:	2100      	movs	r1, #0
 80127fa:	4630      	mov	r0, r6
 80127fc:	f7ed fd00 	bl	8000200 <memchr>
 8012800:	b108      	cbz	r0, 8012806 <_printf_i+0x1e6>
 8012802:	1b80      	subs	r0, r0, r6
 8012804:	6060      	str	r0, [r4, #4]
 8012806:	6863      	ldr	r3, [r4, #4]
 8012808:	6123      	str	r3, [r4, #16]
 801280a:	2300      	movs	r3, #0
 801280c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012810:	e7aa      	b.n	8012768 <_printf_i+0x148>
 8012812:	6923      	ldr	r3, [r4, #16]
 8012814:	4632      	mov	r2, r6
 8012816:	4649      	mov	r1, r9
 8012818:	4640      	mov	r0, r8
 801281a:	47d0      	blx	sl
 801281c:	3001      	adds	r0, #1
 801281e:	d0ad      	beq.n	801277c <_printf_i+0x15c>
 8012820:	6823      	ldr	r3, [r4, #0]
 8012822:	079b      	lsls	r3, r3, #30
 8012824:	d413      	bmi.n	801284e <_printf_i+0x22e>
 8012826:	68e0      	ldr	r0, [r4, #12]
 8012828:	9b03      	ldr	r3, [sp, #12]
 801282a:	4298      	cmp	r0, r3
 801282c:	bfb8      	it	lt
 801282e:	4618      	movlt	r0, r3
 8012830:	e7a6      	b.n	8012780 <_printf_i+0x160>
 8012832:	2301      	movs	r3, #1
 8012834:	4632      	mov	r2, r6
 8012836:	4649      	mov	r1, r9
 8012838:	4640      	mov	r0, r8
 801283a:	47d0      	blx	sl
 801283c:	3001      	adds	r0, #1
 801283e:	d09d      	beq.n	801277c <_printf_i+0x15c>
 8012840:	3501      	adds	r5, #1
 8012842:	68e3      	ldr	r3, [r4, #12]
 8012844:	9903      	ldr	r1, [sp, #12]
 8012846:	1a5b      	subs	r3, r3, r1
 8012848:	42ab      	cmp	r3, r5
 801284a:	dcf2      	bgt.n	8012832 <_printf_i+0x212>
 801284c:	e7eb      	b.n	8012826 <_printf_i+0x206>
 801284e:	2500      	movs	r5, #0
 8012850:	f104 0619 	add.w	r6, r4, #25
 8012854:	e7f5      	b.n	8012842 <_printf_i+0x222>
 8012856:	bf00      	nop
 8012858:	08016cd9 	.word	0x08016cd9
 801285c:	08016cea 	.word	0x08016cea

08012860 <__sflush_r>:
 8012860:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012868:	0716      	lsls	r6, r2, #28
 801286a:	4605      	mov	r5, r0
 801286c:	460c      	mov	r4, r1
 801286e:	d454      	bmi.n	801291a <__sflush_r+0xba>
 8012870:	684b      	ldr	r3, [r1, #4]
 8012872:	2b00      	cmp	r3, #0
 8012874:	dc02      	bgt.n	801287c <__sflush_r+0x1c>
 8012876:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012878:	2b00      	cmp	r3, #0
 801287a:	dd48      	ble.n	801290e <__sflush_r+0xae>
 801287c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801287e:	2e00      	cmp	r6, #0
 8012880:	d045      	beq.n	801290e <__sflush_r+0xae>
 8012882:	2300      	movs	r3, #0
 8012884:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012888:	682f      	ldr	r7, [r5, #0]
 801288a:	6a21      	ldr	r1, [r4, #32]
 801288c:	602b      	str	r3, [r5, #0]
 801288e:	d030      	beq.n	80128f2 <__sflush_r+0x92>
 8012890:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012892:	89a3      	ldrh	r3, [r4, #12]
 8012894:	0759      	lsls	r1, r3, #29
 8012896:	d505      	bpl.n	80128a4 <__sflush_r+0x44>
 8012898:	6863      	ldr	r3, [r4, #4]
 801289a:	1ad2      	subs	r2, r2, r3
 801289c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801289e:	b10b      	cbz	r3, 80128a4 <__sflush_r+0x44>
 80128a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80128a2:	1ad2      	subs	r2, r2, r3
 80128a4:	2300      	movs	r3, #0
 80128a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80128a8:	6a21      	ldr	r1, [r4, #32]
 80128aa:	4628      	mov	r0, r5
 80128ac:	47b0      	blx	r6
 80128ae:	1c43      	adds	r3, r0, #1
 80128b0:	89a3      	ldrh	r3, [r4, #12]
 80128b2:	d106      	bne.n	80128c2 <__sflush_r+0x62>
 80128b4:	6829      	ldr	r1, [r5, #0]
 80128b6:	291d      	cmp	r1, #29
 80128b8:	d82b      	bhi.n	8012912 <__sflush_r+0xb2>
 80128ba:	4a2a      	ldr	r2, [pc, #168]	@ (8012964 <__sflush_r+0x104>)
 80128bc:	410a      	asrs	r2, r1
 80128be:	07d6      	lsls	r6, r2, #31
 80128c0:	d427      	bmi.n	8012912 <__sflush_r+0xb2>
 80128c2:	2200      	movs	r2, #0
 80128c4:	6062      	str	r2, [r4, #4]
 80128c6:	04d9      	lsls	r1, r3, #19
 80128c8:	6922      	ldr	r2, [r4, #16]
 80128ca:	6022      	str	r2, [r4, #0]
 80128cc:	d504      	bpl.n	80128d8 <__sflush_r+0x78>
 80128ce:	1c42      	adds	r2, r0, #1
 80128d0:	d101      	bne.n	80128d6 <__sflush_r+0x76>
 80128d2:	682b      	ldr	r3, [r5, #0]
 80128d4:	b903      	cbnz	r3, 80128d8 <__sflush_r+0x78>
 80128d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80128d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80128da:	602f      	str	r7, [r5, #0]
 80128dc:	b1b9      	cbz	r1, 801290e <__sflush_r+0xae>
 80128de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80128e2:	4299      	cmp	r1, r3
 80128e4:	d002      	beq.n	80128ec <__sflush_r+0x8c>
 80128e6:	4628      	mov	r0, r5
 80128e8:	f7ff fb48 	bl	8011f7c <_free_r>
 80128ec:	2300      	movs	r3, #0
 80128ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80128f0:	e00d      	b.n	801290e <__sflush_r+0xae>
 80128f2:	2301      	movs	r3, #1
 80128f4:	4628      	mov	r0, r5
 80128f6:	47b0      	blx	r6
 80128f8:	4602      	mov	r2, r0
 80128fa:	1c50      	adds	r0, r2, #1
 80128fc:	d1c9      	bne.n	8012892 <__sflush_r+0x32>
 80128fe:	682b      	ldr	r3, [r5, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d0c6      	beq.n	8012892 <__sflush_r+0x32>
 8012904:	2b1d      	cmp	r3, #29
 8012906:	d001      	beq.n	801290c <__sflush_r+0xac>
 8012908:	2b16      	cmp	r3, #22
 801290a:	d11e      	bne.n	801294a <__sflush_r+0xea>
 801290c:	602f      	str	r7, [r5, #0]
 801290e:	2000      	movs	r0, #0
 8012910:	e022      	b.n	8012958 <__sflush_r+0xf8>
 8012912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012916:	b21b      	sxth	r3, r3
 8012918:	e01b      	b.n	8012952 <__sflush_r+0xf2>
 801291a:	690f      	ldr	r7, [r1, #16]
 801291c:	2f00      	cmp	r7, #0
 801291e:	d0f6      	beq.n	801290e <__sflush_r+0xae>
 8012920:	0793      	lsls	r3, r2, #30
 8012922:	680e      	ldr	r6, [r1, #0]
 8012924:	bf08      	it	eq
 8012926:	694b      	ldreq	r3, [r1, #20]
 8012928:	600f      	str	r7, [r1, #0]
 801292a:	bf18      	it	ne
 801292c:	2300      	movne	r3, #0
 801292e:	eba6 0807 	sub.w	r8, r6, r7
 8012932:	608b      	str	r3, [r1, #8]
 8012934:	f1b8 0f00 	cmp.w	r8, #0
 8012938:	dde9      	ble.n	801290e <__sflush_r+0xae>
 801293a:	6a21      	ldr	r1, [r4, #32]
 801293c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801293e:	4643      	mov	r3, r8
 8012940:	463a      	mov	r2, r7
 8012942:	4628      	mov	r0, r5
 8012944:	47b0      	blx	r6
 8012946:	2800      	cmp	r0, #0
 8012948:	dc08      	bgt.n	801295c <__sflush_r+0xfc>
 801294a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801294e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012952:	81a3      	strh	r3, [r4, #12]
 8012954:	f04f 30ff 	mov.w	r0, #4294967295
 8012958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801295c:	4407      	add	r7, r0
 801295e:	eba8 0800 	sub.w	r8, r8, r0
 8012962:	e7e7      	b.n	8012934 <__sflush_r+0xd4>
 8012964:	dfbffffe 	.word	0xdfbffffe

08012968 <_fflush_r>:
 8012968:	b538      	push	{r3, r4, r5, lr}
 801296a:	690b      	ldr	r3, [r1, #16]
 801296c:	4605      	mov	r5, r0
 801296e:	460c      	mov	r4, r1
 8012970:	b913      	cbnz	r3, 8012978 <_fflush_r+0x10>
 8012972:	2500      	movs	r5, #0
 8012974:	4628      	mov	r0, r5
 8012976:	bd38      	pop	{r3, r4, r5, pc}
 8012978:	b118      	cbz	r0, 8012982 <_fflush_r+0x1a>
 801297a:	6a03      	ldr	r3, [r0, #32]
 801297c:	b90b      	cbnz	r3, 8012982 <_fflush_r+0x1a>
 801297e:	f7ff f8c3 	bl	8011b08 <__sinit>
 8012982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d0f3      	beq.n	8012972 <_fflush_r+0xa>
 801298a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801298c:	07d0      	lsls	r0, r2, #31
 801298e:	d404      	bmi.n	801299a <_fflush_r+0x32>
 8012990:	0599      	lsls	r1, r3, #22
 8012992:	d402      	bmi.n	801299a <_fflush_r+0x32>
 8012994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012996:	f7ff fae6 	bl	8011f66 <__retarget_lock_acquire_recursive>
 801299a:	4628      	mov	r0, r5
 801299c:	4621      	mov	r1, r4
 801299e:	f7ff ff5f 	bl	8012860 <__sflush_r>
 80129a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80129a4:	07da      	lsls	r2, r3, #31
 80129a6:	4605      	mov	r5, r0
 80129a8:	d4e4      	bmi.n	8012974 <_fflush_r+0xc>
 80129aa:	89a3      	ldrh	r3, [r4, #12]
 80129ac:	059b      	lsls	r3, r3, #22
 80129ae:	d4e1      	bmi.n	8012974 <_fflush_r+0xc>
 80129b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80129b2:	f7ff fad9 	bl	8011f68 <__retarget_lock_release_recursive>
 80129b6:	e7dd      	b.n	8012974 <_fflush_r+0xc>

080129b8 <__swhatbuf_r>:
 80129b8:	b570      	push	{r4, r5, r6, lr}
 80129ba:	460c      	mov	r4, r1
 80129bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129c0:	2900      	cmp	r1, #0
 80129c2:	b096      	sub	sp, #88	@ 0x58
 80129c4:	4615      	mov	r5, r2
 80129c6:	461e      	mov	r6, r3
 80129c8:	da0d      	bge.n	80129e6 <__swhatbuf_r+0x2e>
 80129ca:	89a3      	ldrh	r3, [r4, #12]
 80129cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80129d0:	f04f 0100 	mov.w	r1, #0
 80129d4:	bf14      	ite	ne
 80129d6:	2340      	movne	r3, #64	@ 0x40
 80129d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80129dc:	2000      	movs	r0, #0
 80129de:	6031      	str	r1, [r6, #0]
 80129e0:	602b      	str	r3, [r5, #0]
 80129e2:	b016      	add	sp, #88	@ 0x58
 80129e4:	bd70      	pop	{r4, r5, r6, pc}
 80129e6:	466a      	mov	r2, sp
 80129e8:	f000 f896 	bl	8012b18 <_fstat_r>
 80129ec:	2800      	cmp	r0, #0
 80129ee:	dbec      	blt.n	80129ca <__swhatbuf_r+0x12>
 80129f0:	9901      	ldr	r1, [sp, #4]
 80129f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80129f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80129fa:	4259      	negs	r1, r3
 80129fc:	4159      	adcs	r1, r3
 80129fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012a02:	e7eb      	b.n	80129dc <__swhatbuf_r+0x24>

08012a04 <__smakebuf_r>:
 8012a04:	898b      	ldrh	r3, [r1, #12]
 8012a06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a08:	079d      	lsls	r5, r3, #30
 8012a0a:	4606      	mov	r6, r0
 8012a0c:	460c      	mov	r4, r1
 8012a0e:	d507      	bpl.n	8012a20 <__smakebuf_r+0x1c>
 8012a10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012a14:	6023      	str	r3, [r4, #0]
 8012a16:	6123      	str	r3, [r4, #16]
 8012a18:	2301      	movs	r3, #1
 8012a1a:	6163      	str	r3, [r4, #20]
 8012a1c:	b003      	add	sp, #12
 8012a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a20:	ab01      	add	r3, sp, #4
 8012a22:	466a      	mov	r2, sp
 8012a24:	f7ff ffc8 	bl	80129b8 <__swhatbuf_r>
 8012a28:	9f00      	ldr	r7, [sp, #0]
 8012a2a:	4605      	mov	r5, r0
 8012a2c:	4639      	mov	r1, r7
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f7fe ff52 	bl	80118d8 <_malloc_r>
 8012a34:	b948      	cbnz	r0, 8012a4a <__smakebuf_r+0x46>
 8012a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a3a:	059a      	lsls	r2, r3, #22
 8012a3c:	d4ee      	bmi.n	8012a1c <__smakebuf_r+0x18>
 8012a3e:	f023 0303 	bic.w	r3, r3, #3
 8012a42:	f043 0302 	orr.w	r3, r3, #2
 8012a46:	81a3      	strh	r3, [r4, #12]
 8012a48:	e7e2      	b.n	8012a10 <__smakebuf_r+0xc>
 8012a4a:	89a3      	ldrh	r3, [r4, #12]
 8012a4c:	6020      	str	r0, [r4, #0]
 8012a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a52:	81a3      	strh	r3, [r4, #12]
 8012a54:	9b01      	ldr	r3, [sp, #4]
 8012a56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012a5a:	b15b      	cbz	r3, 8012a74 <__smakebuf_r+0x70>
 8012a5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a60:	4630      	mov	r0, r6
 8012a62:	f000 f86b 	bl	8012b3c <_isatty_r>
 8012a66:	b128      	cbz	r0, 8012a74 <__smakebuf_r+0x70>
 8012a68:	89a3      	ldrh	r3, [r4, #12]
 8012a6a:	f023 0303 	bic.w	r3, r3, #3
 8012a6e:	f043 0301 	orr.w	r3, r3, #1
 8012a72:	81a3      	strh	r3, [r4, #12]
 8012a74:	89a3      	ldrh	r3, [r4, #12]
 8012a76:	431d      	orrs	r5, r3
 8012a78:	81a5      	strh	r5, [r4, #12]
 8012a7a:	e7cf      	b.n	8012a1c <__smakebuf_r+0x18>

08012a7c <_putc_r>:
 8012a7c:	b570      	push	{r4, r5, r6, lr}
 8012a7e:	460d      	mov	r5, r1
 8012a80:	4614      	mov	r4, r2
 8012a82:	4606      	mov	r6, r0
 8012a84:	b118      	cbz	r0, 8012a8e <_putc_r+0x12>
 8012a86:	6a03      	ldr	r3, [r0, #32]
 8012a88:	b90b      	cbnz	r3, 8012a8e <_putc_r+0x12>
 8012a8a:	f7ff f83d 	bl	8011b08 <__sinit>
 8012a8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a90:	07d8      	lsls	r0, r3, #31
 8012a92:	d405      	bmi.n	8012aa0 <_putc_r+0x24>
 8012a94:	89a3      	ldrh	r3, [r4, #12]
 8012a96:	0599      	lsls	r1, r3, #22
 8012a98:	d402      	bmi.n	8012aa0 <_putc_r+0x24>
 8012a9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a9c:	f7ff fa63 	bl	8011f66 <__retarget_lock_acquire_recursive>
 8012aa0:	68a3      	ldr	r3, [r4, #8]
 8012aa2:	3b01      	subs	r3, #1
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	60a3      	str	r3, [r4, #8]
 8012aa8:	da05      	bge.n	8012ab6 <_putc_r+0x3a>
 8012aaa:	69a2      	ldr	r2, [r4, #24]
 8012aac:	4293      	cmp	r3, r2
 8012aae:	db12      	blt.n	8012ad6 <_putc_r+0x5a>
 8012ab0:	b2eb      	uxtb	r3, r5
 8012ab2:	2b0a      	cmp	r3, #10
 8012ab4:	d00f      	beq.n	8012ad6 <_putc_r+0x5a>
 8012ab6:	6823      	ldr	r3, [r4, #0]
 8012ab8:	1c5a      	adds	r2, r3, #1
 8012aba:	6022      	str	r2, [r4, #0]
 8012abc:	701d      	strb	r5, [r3, #0]
 8012abe:	b2ed      	uxtb	r5, r5
 8012ac0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012ac2:	07da      	lsls	r2, r3, #31
 8012ac4:	d405      	bmi.n	8012ad2 <_putc_r+0x56>
 8012ac6:	89a3      	ldrh	r3, [r4, #12]
 8012ac8:	059b      	lsls	r3, r3, #22
 8012aca:	d402      	bmi.n	8012ad2 <_putc_r+0x56>
 8012acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012ace:	f7ff fa4b 	bl	8011f68 <__retarget_lock_release_recursive>
 8012ad2:	4628      	mov	r0, r5
 8012ad4:	bd70      	pop	{r4, r5, r6, pc}
 8012ad6:	4629      	mov	r1, r5
 8012ad8:	4622      	mov	r2, r4
 8012ada:	4630      	mov	r0, r6
 8012adc:	f7ff f925 	bl	8011d2a <__swbuf_r>
 8012ae0:	4605      	mov	r5, r0
 8012ae2:	e7ed      	b.n	8012ac0 <_putc_r+0x44>

08012ae4 <memmove>:
 8012ae4:	4288      	cmp	r0, r1
 8012ae6:	b510      	push	{r4, lr}
 8012ae8:	eb01 0402 	add.w	r4, r1, r2
 8012aec:	d902      	bls.n	8012af4 <memmove+0x10>
 8012aee:	4284      	cmp	r4, r0
 8012af0:	4623      	mov	r3, r4
 8012af2:	d807      	bhi.n	8012b04 <memmove+0x20>
 8012af4:	1e43      	subs	r3, r0, #1
 8012af6:	42a1      	cmp	r1, r4
 8012af8:	d008      	beq.n	8012b0c <memmove+0x28>
 8012afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b02:	e7f8      	b.n	8012af6 <memmove+0x12>
 8012b04:	4402      	add	r2, r0
 8012b06:	4601      	mov	r1, r0
 8012b08:	428a      	cmp	r2, r1
 8012b0a:	d100      	bne.n	8012b0e <memmove+0x2a>
 8012b0c:	bd10      	pop	{r4, pc}
 8012b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b16:	e7f7      	b.n	8012b08 <memmove+0x24>

08012b18 <_fstat_r>:
 8012b18:	b538      	push	{r3, r4, r5, lr}
 8012b1a:	4d07      	ldr	r5, [pc, #28]	@ (8012b38 <_fstat_r+0x20>)
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	4604      	mov	r4, r0
 8012b20:	4608      	mov	r0, r1
 8012b22:	4611      	mov	r1, r2
 8012b24:	602b      	str	r3, [r5, #0]
 8012b26:	f7f0 fcae 	bl	8003486 <_fstat>
 8012b2a:	1c43      	adds	r3, r0, #1
 8012b2c:	d102      	bne.n	8012b34 <_fstat_r+0x1c>
 8012b2e:	682b      	ldr	r3, [r5, #0]
 8012b30:	b103      	cbz	r3, 8012b34 <_fstat_r+0x1c>
 8012b32:	6023      	str	r3, [r4, #0]
 8012b34:	bd38      	pop	{r3, r4, r5, pc}
 8012b36:	bf00      	nop
 8012b38:	2000a5bc 	.word	0x2000a5bc

08012b3c <_isatty_r>:
 8012b3c:	b538      	push	{r3, r4, r5, lr}
 8012b3e:	4d06      	ldr	r5, [pc, #24]	@ (8012b58 <_isatty_r+0x1c>)
 8012b40:	2300      	movs	r3, #0
 8012b42:	4604      	mov	r4, r0
 8012b44:	4608      	mov	r0, r1
 8012b46:	602b      	str	r3, [r5, #0]
 8012b48:	f7f0 fcad 	bl	80034a6 <_isatty>
 8012b4c:	1c43      	adds	r3, r0, #1
 8012b4e:	d102      	bne.n	8012b56 <_isatty_r+0x1a>
 8012b50:	682b      	ldr	r3, [r5, #0]
 8012b52:	b103      	cbz	r3, 8012b56 <_isatty_r+0x1a>
 8012b54:	6023      	str	r3, [r4, #0]
 8012b56:	bd38      	pop	{r3, r4, r5, pc}
 8012b58:	2000a5bc 	.word	0x2000a5bc

08012b5c <memcpy>:
 8012b5c:	440a      	add	r2, r1
 8012b5e:	4291      	cmp	r1, r2
 8012b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8012b64:	d100      	bne.n	8012b68 <memcpy+0xc>
 8012b66:	4770      	bx	lr
 8012b68:	b510      	push	{r4, lr}
 8012b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b72:	4291      	cmp	r1, r2
 8012b74:	d1f9      	bne.n	8012b6a <memcpy+0xe>
 8012b76:	bd10      	pop	{r4, pc}

08012b78 <_realloc_r>:
 8012b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b7c:	4680      	mov	r8, r0
 8012b7e:	4615      	mov	r5, r2
 8012b80:	460c      	mov	r4, r1
 8012b82:	b921      	cbnz	r1, 8012b8e <_realloc_r+0x16>
 8012b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b88:	4611      	mov	r1, r2
 8012b8a:	f7fe bea5 	b.w	80118d8 <_malloc_r>
 8012b8e:	b92a      	cbnz	r2, 8012b9c <_realloc_r+0x24>
 8012b90:	f7ff f9f4 	bl	8011f7c <_free_r>
 8012b94:	2400      	movs	r4, #0
 8012b96:	4620      	mov	r0, r4
 8012b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b9c:	f000 f81a 	bl	8012bd4 <_malloc_usable_size_r>
 8012ba0:	4285      	cmp	r5, r0
 8012ba2:	4606      	mov	r6, r0
 8012ba4:	d802      	bhi.n	8012bac <_realloc_r+0x34>
 8012ba6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012baa:	d8f4      	bhi.n	8012b96 <_realloc_r+0x1e>
 8012bac:	4629      	mov	r1, r5
 8012bae:	4640      	mov	r0, r8
 8012bb0:	f7fe fe92 	bl	80118d8 <_malloc_r>
 8012bb4:	4607      	mov	r7, r0
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	d0ec      	beq.n	8012b94 <_realloc_r+0x1c>
 8012bba:	42b5      	cmp	r5, r6
 8012bbc:	462a      	mov	r2, r5
 8012bbe:	4621      	mov	r1, r4
 8012bc0:	bf28      	it	cs
 8012bc2:	4632      	movcs	r2, r6
 8012bc4:	f7ff ffca 	bl	8012b5c <memcpy>
 8012bc8:	4621      	mov	r1, r4
 8012bca:	4640      	mov	r0, r8
 8012bcc:	f7ff f9d6 	bl	8011f7c <_free_r>
 8012bd0:	463c      	mov	r4, r7
 8012bd2:	e7e0      	b.n	8012b96 <_realloc_r+0x1e>

08012bd4 <_malloc_usable_size_r>:
 8012bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bd8:	1f18      	subs	r0, r3, #4
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	bfbc      	itt	lt
 8012bde:	580b      	ldrlt	r3, [r1, r0]
 8012be0:	18c0      	addlt	r0, r0, r3
 8012be2:	4770      	bx	lr

08012be4 <_init>:
 8012be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012be6:	bf00      	nop
 8012be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bea:	bc08      	pop	{r3}
 8012bec:	469e      	mov	lr, r3
 8012bee:	4770      	bx	lr

08012bf0 <_fini>:
 8012bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bf2:	bf00      	nop
 8012bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bf6:	bc08      	pop	{r3}
 8012bf8:	469e      	mov	lr, r3
 8012bfa:	4770      	bx	lr
