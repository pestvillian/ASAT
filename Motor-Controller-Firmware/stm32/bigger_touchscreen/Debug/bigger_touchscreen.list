
bigger_touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2c4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002af8  0800f474  0800f474  00010474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f6c  08011f6c  000132f0  2**0
                  CONTENTS
  4 .ARM          00000008  08011f6c  08011f6c  00012f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f74  08011f74  000132f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f74  08011f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011f78  08011f78  00012f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f0  20000000  08011f7c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000132f0  2**0
                  CONTENTS
 10 .bss          00011ef4  200002f0  200002f0  000132f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200121e4  200121e4  000132f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000132f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021cb3  00000000  00000000  00013320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055b5  00000000  00000000  00034fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c28  00000000  00000000  0003a588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000158b  00000000  00000000  0003c1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002997e  00000000  00000000  0003d73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024914  00000000  00000000  000670b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebcd3  00000000  00000000  0008b9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001776a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f54  00000000  00000000  001776e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0017f638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002f0 	.word	0x200002f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f45c 	.word	0x0800f45c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002f4 	.word	0x200002f4
 80001ec:	0800f45c 	.word	0x0800f45c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <XPT2046_TouchSelect>:
}

#endif /* SOFTWARE_SPI */

static void XPT2046_TouchSelect()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2110      	movs	r1, #16
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <XPT2046_TouchSelect+0x14>)
 800059a:	f004 fa8f 	bl	8004abc <HAL_GPIO_WritePin>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000

080005a8 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2110      	movs	r1, #16
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <XPT2046_TouchUnselect+0x14>)
 80005b2:	f004 fa83 	bl	8004abc <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 80005c4:	2120      	movs	r1, #32
 80005c6:	4805      	ldr	r0, [pc, #20]	@ (80005dc <XPT2046_TouchPressed+0x1c>)
 80005c8:	f004 fa60 	bl	8004a8c <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40020400 	.word	0x40020400

080005e0 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

#endif /* SOFTWARE_SPI */

    XPT2046_TouchSelect();
 80005ea:	f7ff ffd1 	bl	8000590 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < NUMBER_OF_SAMPLES; i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	77bb      	strb	r3, [r7, #30]
 80005fe:	e03f      	b.n	8000680 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8000600:	f7ff ffde 	bl	80005c0 <XPT2046_TouchPressed>
 8000604:	4603      	mov	r3, r0
 8000606:	f083 0301 	eor.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d13b      	bne.n	8000688 <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8000610:	7ffb      	ldrb	r3, [r7, #31]
 8000612:	3301      	adds	r3, #1
 8000614:	77fb      	strb	r3, [r7, #31]
	   x_raw[0] = spi_read_byte();
	   x_raw[1] = spi_read_byte();

#else

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2201      	movs	r2, #1
 800061c:	4944      	ldr	r1, [pc, #272]	@ (8000730 <XPT2046_TouchGetCoordinates+0x150>)
 800061e:	4845      	ldr	r0, [pc, #276]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000620:	f007 f8d1 	bl	80077c6 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8000624:	f107 0210 	add.w	r2, r7, #16
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2302      	movs	r3, #2
 8000630:	4941      	ldr	r1, [pc, #260]	@ (8000738 <XPT2046_TouchGetCoordinates+0x158>)
 8000632:	4840      	ldr	r0, [pc, #256]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000634:	f007 fa0b 	bl	8007a4e <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	2201      	movs	r2, #1
 800063e:	493f      	ldr	r1, [pc, #252]	@ (800073c <XPT2046_TouchGetCoordinates+0x15c>)
 8000640:	483c      	ldr	r0, [pc, #240]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000642:	f007 f8c0 	bl	80077c6 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2302      	movs	r3, #2
 8000652:	4939      	ldr	r1, [pc, #228]	@ (8000738 <XPT2046_TouchGetCoordinates+0x158>)
 8000654:	4837      	ldr	r0, [pc, #220]	@ (8000734 <XPT2046_TouchGetCoordinates+0x154>)
 8000656:	f007 f9fa 	bl	8007a4e <HAL_SPI_TransmitReceive>

#endif /* SOFTWARE_SPI */

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800065a:	7b3b      	ldrb	r3, [r7, #12]
 800065c:	021b      	lsls	r3, r3, #8
 800065e:	7b7a      	ldrb	r2, [r7, #13]
 8000660:	4313      	orrs	r3, r2
 8000662:	461a      	mov	r2, r3
 8000664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000666:	4413      	add	r3, r2
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 800066a:	7c3b      	ldrb	r3, [r7, #16]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	7c7a      	ldrb	r2, [r7, #17]
 8000670:	4313      	orrs	r3, r2
 8000672:	461a      	mov	r2, r3
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	4413      	add	r3, r2
 8000678:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < NUMBER_OF_SAMPLES; i++)
 800067a:	7fbb      	ldrb	r3, [r7, #30]
 800067c:	3301      	adds	r3, #1
 800067e:	77bb      	strb	r3, [r7, #30]
 8000680:	7fbb      	ldrb	r3, [r7, #30]
 8000682:	2b07      	cmp	r3, #7
 8000684:	d9bc      	bls.n	8000600 <XPT2046_TouchGetCoordinates+0x20>
 8000686:	e000      	b.n	800068a <XPT2046_TouchGetCoordinates+0xaa>
            break;
 8000688:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800068a:	f7ff ff8d 	bl	80005a8 <XPT2046_TouchUnselect>

    if(nsamples < NUMBER_OF_SAMPLES)
 800068e:	7ffb      	ldrb	r3, [r7, #31]
 8000690:	2b07      	cmp	r3, #7
 8000692:	d801      	bhi.n	8000698 <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8000694:	2300      	movs	r3, #0
 8000696:	e046      	b.n	8000726 <XPT2046_TouchGetCoordinates+0x146>

    uint32_t raw_x = (avg_x / NUMBER_OF_SAMPLES);
 8000698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069a:	08db      	lsrs	r3, r3, #3
 800069c:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	f640 5247 	movw	r2, #3399	@ 0xd47
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d802      	bhi.n	80006ae <XPT2046_TouchGetCoordinates+0xce>
 80006a8:	f640 5348 	movw	r3, #3400	@ 0xd48
 80006ac:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	f247 1248 	movw	r2, #29000	@ 0x7148
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d902      	bls.n	80006be <XPT2046_TouchGetCoordinates+0xde>
 80006b8:	f247 1348 	movw	r3, #29000	@ 0x7148
 80006bc:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / NUMBER_OF_SAMPLES);
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	f640 42e3 	movw	r2, #3299	@ 0xce3
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d802      	bhi.n	80006d4 <XPT2046_TouchGetCoordinates+0xf4>
 80006ce:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80006d2:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80006da:	4293      	cmp	r3, r2
 80006dc:	d902      	bls.n	80006e4 <XPT2046_TouchGetCoordinates+0x104>
 80006de:	f247 5330 	movw	r3, #30000	@ 0x7530
 80006e2:	617b      	str	r3, [r7, #20]
    // Uncomment this line to calibrate touchscreen:
//    printf("raw_x = %6d, raw_y = %6d\r\n", (int) raw_x, (int) raw_y);
//    printf("\x1b[1F");

#if (ORIENTATION == 0)
	*x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	019b      	lsls	r3, r3, #6
 80006ee:	f5a3 1384 	sub.w	r3, r3, #1081344	@ 0x108000
 80006f2:	f5a3 53d0 	sub.w	r3, r3, #6656	@ 0x1a00
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <XPT2046_TouchGetCoordinates+0x160>)
 80006f8:	fba2 2303 	umull	r2, r3, r2, r3
 80006fc:	0b5b      	lsrs	r3, r3, #13
 80006fe:	b29a      	uxth	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	801a      	strh	r2, [r3, #0]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	4613      	mov	r3, r2
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	011b      	lsls	r3, r3, #4
 800070e:	f5a3 2341 	sub.w	r3, r3, #790528	@ 0xc1000
 8000712:	f5a3 63b8 	sub.w	r3, r3, #1472	@ 0x5c0
 8000716:	4a0b      	ldr	r2, [pc, #44]	@ (8000744 <XPT2046_TouchGetCoordinates+0x164>)
 8000718:	fba2 2303 	umull	r2, r3, r2, r3
 800071c:	0b5b      	lsrs	r3, r3, #13
 800071e:	b29a      	uxth	r2, r3
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 8000724:	2301      	movs	r3, #1
}
 8000726:	4618      	mov	r0, r3
 8000728:	3728      	adds	r7, #40	@ 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	0800fcd8 	.word	0x0800fcd8
 8000734:	20000414 	.word	0x20000414
 8000738:	0800fcdc 	.word	0x0800fcdc
 800073c:	0800fce0 	.word	0x0800fce0
 8000740:	51eb851f 	.word	0x51eb851f
 8000744:	4e8b8659 	.word	0x4e8b8659

08000748 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800074e:	2300      	movs	r3, #0
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2301      	movs	r3, #1
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2300      	movs	r3, #0
 8000758:	2200      	movs	r2, #0
 800075a:	2101      	movs	r1, #1
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fceb 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4bae      	ldr	r3, [pc, #696]	@ (8000a20 <lcdInit+0x2d8>)
 8000768:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800076a:	2300      	movs	r3, #0
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	2301      	movs	r3, #1
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2300      	movs	r3, #0
 8000774:	2201      	movs	r2, #1
 8000776:	2100      	movs	r1, #0
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fcdd 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4ba8      	ldr	r3, [pc, #672]	@ (8000a24 <lcdInit+0x2dc>)
 8000784:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000786:	2300      	movs	r3, #0
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2301      	movs	r3, #1
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2300      	movs	r3, #0
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2001      	movs	r0, #1
 8000796:	f000 fccf 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4ba2      	ldr	r3, [pc, #648]	@ (8000a28 <lcdInit+0x2e0>)
 80007a0:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80007a2:	2300      	movs	r3, #0
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2301      	movs	r3, #1
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2201      	movs	r2, #1
 80007ae:	2101      	movs	r1, #1
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 fcc1 	bl	8001138 <lcdBuildMemoryAccessControlConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b9c      	ldr	r3, [pc, #624]	@ (8000a2c <lcdInit+0x2e4>)
 80007bc:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80007be:	f000 fc91 	bl	80010e4 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80007c2:	2028      	movs	r0, #40	@ 0x28
 80007c4:	f000 fc98 	bl	80010f8 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80007c8:	20cf      	movs	r0, #207	@ 0xcf
 80007ca:	f000 fc95 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fca2 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x83);
 80007d4:	2083      	movs	r0, #131	@ 0x83
 80007d6:	f000 fc9f 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x30);
 80007da:	2030      	movs	r0, #48	@ 0x30
 80007dc:	f000 fc9c 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xED);
 80007e0:	20ed      	movs	r0, #237	@ 0xed
 80007e2:	f000 fc89 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x64);
 80007e6:	2064      	movs	r0, #100	@ 0x64
 80007e8:	f000 fc96 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x03);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 fc93 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x12);
 80007f2:	2012      	movs	r0, #18
 80007f4:	f000 fc90 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x81);
 80007f8:	2081      	movs	r0, #129	@ 0x81
 80007fa:	f000 fc8d 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xE8);
 80007fe:	20e8      	movs	r0, #232	@ 0xe8
 8000800:	f000 fc7a 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x85);
 8000804:	2085      	movs	r0, #133	@ 0x85
 8000806:	f000 fc87 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x01);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 fc84 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x79);
 8000810:	2079      	movs	r0, #121	@ 0x79
 8000812:	f000 fc81 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xCB);
 8000816:	20cb      	movs	r0, #203	@ 0xcb
 8000818:	f000 fc6e 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x39);
 800081c:	2039      	movs	r0, #57	@ 0x39
 800081e:	f000 fc7b 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x2C);
 8000822:	202c      	movs	r0, #44	@ 0x2c
 8000824:	f000 fc78 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fc75 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x34);
 800082e:	2034      	movs	r0, #52	@ 0x34
 8000830:	f000 fc72 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x02);
 8000834:	2002      	movs	r0, #2
 8000836:	f000 fc6f 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xF7);
 800083a:	20f7      	movs	r0, #247	@ 0xf7
 800083c:	f000 fc5c 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x20);
 8000840:	2020      	movs	r0, #32
 8000842:	f000 fc69 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xEA);
 8000846:	20ea      	movs	r0, #234	@ 0xea
 8000848:	f000 fc56 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800084c:	2000      	movs	r0, #0
 800084e:	f000 fc63 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fc60 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8000858:	20c0      	movs	r0, #192	@ 0xc0
 800085a:	f000 fc4d 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x26);
 800085e:	2026      	movs	r0, #38	@ 0x26
 8000860:	f000 fc5a 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8000864:	20c1      	movs	r0, #193	@ 0xc1
 8000866:	f000 fc47 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x11);
 800086a:	2011      	movs	r0, #17
 800086c:	f000 fc54 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8000870:	20c5      	movs	r0, #197	@ 0xc5
 8000872:	f000 fc41 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x35);
 8000876:	2035      	movs	r0, #53	@ 0x35
 8000878:	f000 fc4e 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3E);
 800087c:	203e      	movs	r0, #62	@ 0x3e
 800087e:	f000 fc4b 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8000882:	20c7      	movs	r0, #199	@ 0xc7
 8000884:	f000 fc38 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0xBE);
 8000888:	20be      	movs	r0, #190	@ 0xbe
 800088a:	f000 fc45 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 800088e:	2036      	movs	r0, #54	@ 0x36
 8000890:	f000 fc32 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8000894:	4b62      	ldr	r3, [pc, #392]	@ (8000a20 <lcdInit+0x2d8>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fc3d 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 800089e:	203a      	movs	r0, #58	@ 0x3a
 80008a0:	f000 fc2a 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x55);
 80008a4:	2055      	movs	r0, #85	@ 0x55
 80008a6:	f000 fc37 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80008aa:	20b1      	movs	r0, #177	@ 0xb1
 80008ac:	f000 fc24 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 fc31 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1B);
 80008b6:	201b      	movs	r0, #27
 80008b8:	f000 fc2e 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(0xF2);
 80008bc:	20f2      	movs	r0, #242	@ 0xf2
 80008be:	f000 fc1b 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x08);
 80008c2:	2008      	movs	r0, #8
 80008c4:	f000 fc28 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80008c8:	2026      	movs	r0, #38	@ 0x26
 80008ca:	f000 fc15 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x01);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 fc22 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80008d4:	20e0      	movs	r0, #224	@ 0xe0
 80008d6:	f000 fc0f 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x1F);
 80008da:	201f      	movs	r0, #31
 80008dc:	f000 fc1c 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1A);
 80008e0:	201a      	movs	r0, #26
 80008e2:	f000 fc19 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x18);
 80008e6:	2018      	movs	r0, #24
 80008e8:	f000 fc16 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0A);
 80008ec:	200a      	movs	r0, #10
 80008ee:	f000 fc13 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0F);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f000 fc10 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x06);
 80008f8:	2006      	movs	r0, #6
 80008fa:	f000 fc0d 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x45);
 80008fe:	2045      	movs	r0, #69	@ 0x45
 8000900:	f000 fc0a 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x87);
 8000904:	2087      	movs	r0, #135	@ 0x87
 8000906:	f000 fc07 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x32);
 800090a:	2032      	movs	r0, #50	@ 0x32
 800090c:	f000 fc04 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0A);
 8000910:	200a      	movs	r0, #10
 8000912:	f000 fc01 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x07);
 8000916:	2007      	movs	r0, #7
 8000918:	f000 fbfe 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x02);
 800091c:	2002      	movs	r0, #2
 800091e:	f000 fbfb 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x07);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fbf8 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 8000928:	2005      	movs	r0, #5
 800092a:	f000 fbf5 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fbf2 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8000934:	20e1      	movs	r0, #225	@ 0xe1
 8000936:	f000 fbdf 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fbec 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x25);
 8000940:	2025      	movs	r0, #37	@ 0x25
 8000942:	f000 fbe9 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x27);
 8000946:	2027      	movs	r0, #39	@ 0x27
 8000948:	f000 fbe6 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 800094c:	2005      	movs	r0, #5
 800094e:	f000 fbe3 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x10);
 8000952:	2010      	movs	r0, #16
 8000954:	f000 fbe0 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x09);
 8000958:	2009      	movs	r0, #9
 800095a:	f000 fbdd 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3A);
 800095e:	203a      	movs	r0, #58	@ 0x3a
 8000960:	f000 fbda 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x78);
 8000964:	2078      	movs	r0, #120	@ 0x78
 8000966:	f000 fbd7 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x4D);
 800096a:	204d      	movs	r0, #77	@ 0x4d
 800096c:	f000 fbd4 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x05);
 8000970:	2005      	movs	r0, #5
 8000972:	f000 fbd1 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x18);
 8000976:	2018      	movs	r0, #24
 8000978:	f000 fbce 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x0D);
 800097c:	200d      	movs	r0, #13
 800097e:	f000 fbcb 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x38);
 8000982:	2038      	movs	r0, #56	@ 0x38
 8000984:	f000 fbc8 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3A);
 8000988:	203a      	movs	r0, #58	@ 0x3a
 800098a:	f000 fbc5 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x1F);
 800098e:	201f      	movs	r0, #31
 8000990:	f000 fbc2 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8000994:	202a      	movs	r0, #42	@ 0x2a
 8000996:	f000 fbaf 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fbbc 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fbb9 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 fbb6 	bl	8001118 <lcdWriteData>
  lcdWriteData(0xEF);
 80009ac:	20ef      	movs	r0, #239	@ 0xef
 80009ae:	f000 fbb3 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80009b2:	202b      	movs	r0, #43	@ 0x2b
 80009b4:	f000 fba0 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 fbad 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 fbaa 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x01);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 fba7 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x3F);
 80009ca:	203f      	movs	r0, #63	@ 0x3f
 80009cc:	f000 fba4 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80009d0:	20b7      	movs	r0, #183	@ 0xb7
 80009d2:	f000 fb91 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x07);
 80009d6:	2007      	movs	r0, #7
 80009d8:	f000 fb9e 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80009dc:	20b6      	movs	r0, #182	@ 0xb6
 80009de:	f000 fb8b 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData(0x0A);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f000 fb98 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x82);
 80009e8:	2082      	movs	r0, #130	@ 0x82
 80009ea:	f000 fb95 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x27);
 80009ee:	2027      	movs	r0, #39	@ 0x27
 80009f0:	f000 fb92 	bl	8001118 <lcdWriteData>
  lcdWriteData(0x00);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 fb8f 	bl	8001118 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 80009fa:	2011      	movs	r0, #17
 80009fc:	f000 fb7c 	bl	80010f8 <lcdWriteCommand>
  HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	@ 0x64
 8000a02:	f003 fabb 	bl	8003f7c <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8000a06:	2029      	movs	r0, #41	@ 0x29
 8000a08:	f000 fb76 	bl	80010f8 <lcdWriteCommand>
  HAL_Delay(100);
 8000a0c:	2064      	movs	r0, #100	@ 0x64
 8000a0e:	f003 fab5 	bl	8003f7c <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8000a12:	202c      	movs	r0, #44	@ 0x2c
 8000a14:	f000 fb70 	bl	80010f8 <lcdWriteCommand>
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000310 	.word	0x20000310
 8000a24:	20000311 	.word	0x20000311
 8000a28:	20000312 	.word	0x20000312
 8000a2c:	20000313 	.word	0x20000313

08000a30 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a44:	885b      	ldrh	r3, [r3, #2]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 fafd 	bl	800104c <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <lcdFillRGB+0x50>)
 8000a5a:	885b      	ldrh	r3, [r3, #2]
 8000a5c:	fb02 f303 	mul.w	r3, r2, r3
 8000a60:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8000a62:	e003      	b.n	8000a6c <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fb56 	bl	8001118 <lcdWriteData>
  while(dimensions--)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	1e5a      	subs	r2, r3, #1
 8000a70:	60fa      	str	r2, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f6      	bne.n	8000a64 <lcdFillRGB+0x34>
  }
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000018 	.word	0x20000018

08000a84 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	80bb      	strh	r3, [r7, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <lcdDrawPixel+0x44>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	88fa      	ldrh	r2, [r7, #6]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d20f      	bcs.n	8000ac0 <lcdDrawPixel+0x3c>
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <lcdDrawPixel+0x44>)
 8000aa2:	885b      	ldrh	r3, [r3, #2]
 8000aa4:	88ba      	ldrh	r2, [r7, #4]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d20a      	bcs.n	8000ac0 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8000aaa:	88bb      	ldrh	r3, [r7, #4]
 8000aac:	88fa      	ldrh	r2, [r7, #6]
 8000aae:	88b9      	ldrh	r1, [r7, #4]
 8000ab0:	88f8      	ldrh	r0, [r7, #6]
 8000ab2:	f000 facb 	bl	800104c <lcdSetWindow>
    lcdWriteData(color);
 8000ab6:	887b      	ldrh	r3, [r7, #2]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fb2d 	bl	8001118 <lcdWriteData>
 8000abe:	e000      	b.n	8000ac2 <lcdDrawPixel+0x3e>
        return;
 8000ac0:	bf00      	nop
}
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000018 	.word	0x20000018

08000acc <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4608      	mov	r0, r1
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4623      	mov	r3, r4
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80bb      	strh	r3, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	807b      	strh	r3, [r7, #2]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8000aea:	88ba      	ldrh	r2, [r7, #4]
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d205      	bcs.n	8000afe <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	817b      	strh	r3, [r7, #10]
 8000af6:	88bb      	ldrh	r3, [r7, #4]
 8000af8:	80fb      	strh	r3, [r7, #6]
 8000afa:	897b      	ldrh	r3, [r7, #10]
 8000afc:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	88ba      	ldrh	r2, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d303      	bcc.n	8000b10 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8000b10:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	88fa      	ldrh	r2, [r7, #6]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d303      	bcc.n	8000b22 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <lcdDrawHLine+0x88>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	88ba      	ldrh	r2, [r7, #4]
 8000b26:	8879      	ldrh	r1, [r7, #2]
 8000b28:	88f8      	ldrh	r0, [r7, #6]
 8000b2a:	f000 fa8f 	bl	800104c <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e006      	b.n	8000b42 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8000b34:	883b      	ldrh	r3, [r7, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 faee 	bl	8001118 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	88bb      	ldrh	r3, [r7, #4]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	ddf4      	ble.n	8000b34 <lcdDrawHLine+0x68>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	20000018 	.word	0x20000018

08000b58 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4608      	mov	r0, r1
 8000b62:	4611      	mov	r1, r2
 8000b64:	461a      	mov	r2, r3
 8000b66:	4623      	mov	r3, r4
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	88bb      	ldrh	r3, [r7, #4]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d205      	bcs.n	8000b8a <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	817b      	strh	r3, [r7, #10]
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	897b      	ldrh	r3, [r7, #10]
 8000b88:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	88fa      	ldrh	r2, [r7, #6]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d303      	bcc.n	8000b9c <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8000b94:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000b9e:	885b      	ldrh	r3, [r3, #2]
 8000ba0:	88ba      	ldrh	r2, [r7, #4]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d303      	bcc.n	8000bae <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000ba8:	885b      	ldrh	r3, [r3, #2]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000bb0:	885b      	ldrh	r3, [r3, #2]
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d303      	bcc.n	8000bc0 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <lcdDrawVLine+0x9c>)
 8000bba:	885b      	ldrh	r3, [r3, #2]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	88b9      	ldrh	r1, [r7, #4]
 8000bc6:	88f8      	ldrh	r0, [r7, #6]
 8000bc8:	f000 fa40 	bl	800104c <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8000bcc:	88bb      	ldrh	r3, [r7, #4]
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e006      	b.n	8000be0 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8000bd2:	883b      	ldrh	r3, [r7, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 fa9f 	bl	8001118 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	ddf4      	ble.n	8000bd2 <lcdDrawVLine+0x7a>
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000018 	.word	0x20000018

08000bf8 <lcdDrawRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4608      	mov	r0, r1
 8000c02:	4611      	mov	r1, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	4623      	mov	r3, r4
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80bb      	strh	r3, [r7, #4]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	807b      	strh	r3, [r7, #2]
 8000c12:	4613      	mov	r3, r2
 8000c14:	803b      	strh	r3, [r7, #0]
	lcdDrawHLine(x, x + w - 1, y, color);
 8000c16:	88f8      	ldrh	r0, [r7, #6]
 8000c18:	88fa      	ldrh	r2, [r7, #6]
 8000c1a:	887b      	ldrh	r3, [r7, #2]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	3b01      	subs	r3, #1
 8000c22:	b299      	uxth	r1, r3
 8000c24:	88ba      	ldrh	r2, [r7, #4]
 8000c26:	8b3b      	ldrh	r3, [r7, #24]
 8000c28:	f7ff ff50 	bl	8000acc <lcdDrawHLine>
	lcdDrawHLine(x, x + w - 1, y + h - 1, color);
 8000c2c:	88f8      	ldrh	r0, [r7, #6]
 8000c2e:	88fa      	ldrh	r2, [r7, #6]
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	4413      	add	r3, r2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	3b01      	subs	r3, #1
 8000c38:	b299      	uxth	r1, r3
 8000c3a:	88ba      	ldrh	r2, [r7, #4]
 8000c3c:	883b      	ldrh	r3, [r7, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	3b01      	subs	r3, #1
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	8b3b      	ldrh	r3, [r7, #24]
 8000c48:	f7ff ff40 	bl	8000acc <lcdDrawHLine>
	lcdDrawVLine(x, y, y + h - 1, color);
 8000c4c:	88f8      	ldrh	r0, [r7, #6]
 8000c4e:	88b9      	ldrh	r1, [r7, #4]
 8000c50:	88ba      	ldrh	r2, [r7, #4]
 8000c52:	883b      	ldrh	r3, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	8b3b      	ldrh	r3, [r7, #24]
 8000c5e:	f7ff ff7b 	bl	8000b58 <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y, y + h - 1, color);
 8000c62:	88fa      	ldrh	r2, [r7, #6]
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	4413      	add	r3, r2
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	88b9      	ldrh	r1, [r7, #4]
 8000c70:	88ba      	ldrh	r2, [r7, #4]
 8000c72:	883b      	ldrh	r3, [r7, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	8b3b      	ldrh	r3, [r7, #24]
 8000c7e:	f7ff ff6b 	bl	8000b58 <lcdDrawVLine>
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd90      	pop	{r4, r7, pc}
	...

08000c8c <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	70fb      	strb	r3, [r7, #3]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cae:	4a4a      	ldr	r2, [pc, #296]	@ (8000dd8 <lcdDrawChar+0x14c>)
 8000cb0:	8812      	ldrh	r2, [r2, #0]
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	f280 808c 	bge.w	8000dd0 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8000cb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cbc:	4a46      	ldr	r2, [pc, #280]	@ (8000dd8 <lcdDrawChar+0x14c>)
 8000cbe:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	f280 8085 	bge.w	8000dd0 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cca:	4a44      	ldr	r2, [pc, #272]	@ (8000ddc <lcdDrawChar+0x150>)
 8000ccc:	6892      	ldr	r2, [r2, #8]
 8000cce:	8892      	ldrh	r2, [r2, #4]
 8000cd0:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db7c      	blt.n	8000dd0 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8000cd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cda:	4a40      	ldr	r2, [pc, #256]	@ (8000ddc <lcdDrawChar+0x150>)
 8000cdc:	6892      	ldr	r2, [r2, #8]
 8000cde:	88d2      	ldrh	r2, [r2, #6]
 8000ce0:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db74      	blt.n	8000dd0 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ddc <lcdDrawChar+0x150>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	88db      	ldrh	r3, [r3, #6]
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73bb      	strb	r3, [r7, #14]
 8000cfa:	e061      	b.n	8000dc0 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	733b      	strb	r3, [r7, #12]
 8000d00:	e055      	b.n	8000dae <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000d02:	4b36      	ldr	r3, [pc, #216]	@ (8000ddc <lcdDrawChar+0x150>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	78fa      	ldrb	r2, [r7, #3]
 8000d0a:	3a20      	subs	r2, #32
 8000d0c:	4933      	ldr	r1, [pc, #204]	@ (8000ddc <lcdDrawChar+0x150>)
 8000d0e:	6889      	ldr	r1, [r1, #8]
 8000d10:	88c9      	ldrh	r1, [r1, #6]
 8000d12:	fb01 f202 	mul.w	r2, r1, r2
 8000d16:	7ab9      	ldrb	r1, [r7, #10]
 8000d18:	fb02 f101 	mul.w	r1, r2, r1
 8000d1c:	7bba      	ldrb	r2, [r7, #14]
 8000d1e:	7ab8      	ldrb	r0, [r7, #10]
 8000d20:	fb00 f202 	mul.w	r2, r0, r2
 8000d24:	4411      	add	r1, r2
 8000d26:	7b3a      	ldrb	r2, [r7, #12]
 8000d28:	440a      	add	r2, r1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	72fb      	strb	r3, [r7, #11]
 8000d34:	e032      	b.n	8000d9c <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8000d36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	da12      	bge.n	8000d64 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	4413      	add	r3, r2
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b298      	uxth	r0, r3
 8000d50:	7bbb      	ldrb	r3, [r7, #14]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	883a      	ldrh	r2, [r7, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff fe91 	bl	8000a84 <lcdDrawPixel>
 8000d62:	e015      	b.n	8000d90 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8000d64:	8c3a      	ldrh	r2, [r7, #32]
 8000d66:	883b      	ldrh	r3, [r7, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d011      	beq.n	8000d90 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8000d6c:	7afb      	ldrb	r3, [r7, #11]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4413      	add	r3, r2
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b298      	uxth	r0, r3
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	8c3a      	ldrh	r2, [r7, #32]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f7ff fe7a 	bl	8000a84 <lcdDrawPixel>
				}
				line <<= 1;
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	72fb      	strb	r3, [r7, #11]
 8000d9c:	7afb      	ldrb	r3, [r7, #11]
 8000d9e:	2b07      	cmp	r3, #7
 8000da0:	d9c9      	bls.n	8000d36 <lcdDrawChar+0xaa>
			}

			xP += 8;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	3308      	adds	r3, #8
 8000da6:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	3301      	adds	r3, #1
 8000dac:	733b      	strb	r3, [r7, #12]
 8000dae:	7b3a      	ldrb	r2, [r7, #12]
 8000db0:	7abb      	ldrb	r3, [r7, #10]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d3a5      	bcc.n	8000d02 <lcdDrawChar+0x76>
		}

		xP = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000dba:	7bbb      	ldrb	r3, [r7, #14]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	73bb      	strb	r3, [r7, #14]
 8000dc0:	7bbb      	ldrb	r3, [r7, #14]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <lcdDrawChar+0x150>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	88db      	ldrh	r3, [r3, #6]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d396      	bcc.n	8000cfc <lcdDrawChar+0x70>
 8000dce:	e000      	b.n	8000dd2 <lcdDrawChar+0x146>
		return;
 8000dd0:	bf00      	nop
	}
}
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd90      	pop	{r4, r7, pc}
 8000dd8:	20000018 	.word	0x20000018
 8000ddc:	20000020 	.word	0x20000020

08000de0 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8000de0:	b40f      	push	{r0, r1, r2, r3}
 8000de2:	b590      	push	{r4, r7, lr}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	69b9      	ldr	r1, [r7, #24]
 8000df2:	483d      	ldr	r0, [pc, #244]	@ (8000ee8 <lcdPrintf+0x108>)
 8000df4:	f00d fbcc 	bl	800e590 <vsiprintf>
	va_end(lst);

	p = buf;
 8000df8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee8 <lcdPrintf+0x108>)
 8000dfa:	607b      	str	r3, [r7, #4]
	while (*p)
 8000dfc:	e067      	b.n	8000ece <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b0a      	cmp	r3, #10
 8000e04:	d10c      	bne.n	8000e20 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8000e06:	4b39      	ldr	r3, [pc, #228]	@ (8000eec <lcdPrintf+0x10c>)
 8000e08:	885a      	ldrh	r2, [r3, #2]
 8000e0a:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	88db      	ldrh	r3, [r3, #6]
 8000e10:	4413      	add	r3, r2
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <lcdPrintf+0x10c>)
 8000e16:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8000e18:	4b34      	ldr	r3, [pc, #208]	@ (8000eec <lcdPrintf+0x10c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]
 8000e1e:	e04a      	b.n	8000eb6 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b0d      	cmp	r3, #13
 8000e26:	d046      	beq.n	8000eb6 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b09      	cmp	r3, #9
 8000e2e:	d10b      	bne.n	8000e48 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8000e30:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <lcdPrintf+0x10c>)
 8000e32:	881a      	ldrh	r2, [r3, #0]
 8000e34:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	889b      	ldrh	r3, [r3, #4]
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b2a      	ldr	r3, [pc, #168]	@ (8000eec <lcdPrintf+0x10c>)
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	e036      	b.n	8000eb6 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8000e48:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <lcdPrintf+0x10c>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	b218      	sxth	r0, r3
 8000e4e:	4b27      	ldr	r3, [pc, #156]	@ (8000eec <lcdPrintf+0x10c>)
 8000e50:	885b      	ldrh	r3, [r3, #2]
 8000e52:	b219      	sxth	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	b29c      	uxth	r4, r3
 8000e5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4623      	mov	r3, r4
 8000e68:	f7ff ff10 	bl	8000c8c <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <lcdPrintf+0x10c>)
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <lcdPrintf+0x10c>)
 8000e7c:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e80:	7b1b      	ldrb	r3, [r3, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d017      	beq.n	8000eb6 <lcdPrintf+0xd6>
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <lcdPrintf+0x10c>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <lcdPrintf+0x114>)
 8000e8e:	881b      	ldrh	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <lcdPrintf+0x110>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	889b      	ldrh	r3, [r3, #4]
 8000e98:	1acb      	subs	r3, r1, r3
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	dd0b      	ble.n	8000eb6 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <lcdPrintf+0x10c>)
 8000ea0:	885a      	ldrh	r2, [r3, #2]
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <lcdPrintf+0x110>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	88db      	ldrh	r3, [r3, #6]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <lcdPrintf+0x10c>)
 8000eae:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <lcdPrintf+0x10c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <lcdPrintf+0x10c>)
 8000ebe:	885a      	ldrh	r2, [r3, #2]
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <lcdPrintf+0x114>)
 8000ec2:	885b      	ldrh	r3, [r3, #2]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d302      	bcc.n	8000ece <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <lcdPrintf+0x10c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	805a      	strh	r2, [r3, #2]
	while (*p)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d193      	bne.n	8000dfe <lcdPrintf+0x1e>
		}
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000314 	.word	0x20000314
 8000eec:	2000030c 	.word	0x2000030c
 8000ef0:	20000020 	.word	0x20000020
 8000ef4:	20000018 	.word	0x20000018

08000ef8 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <lcdSetTextFont+0x1c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6093      	str	r3, [r2, #8]
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000020 	.word	0x20000020

08000f18 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	80fb      	strh	r3, [r7, #6]
 8000f24:	4613      	mov	r3, r2
 8000f26:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <lcdSetTextColor+0x28>)
 8000f2c:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	4a03      	ldr	r2, [pc, #12]	@ (8000f40 <lcdSetTextColor+0x28>)
 8000f32:	6053      	str	r3, [r2, #4]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000020 	.word	0x20000020

08000f44 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8000f54:	2036      	movs	r0, #54	@ 0x36
 8000f56:	f000 f8cf 	bl	80010f8 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d83e      	bhi.n	8000fe0 <lcdSetOrientation+0x9c>
 8000f62:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <lcdSetOrientation+0x24>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000f79 	.word	0x08000f79
 8000f6c:	08000fad 	.word	0x08000fad
 8000f70:	08000f93 	.word	0x08000f93
 8000f74:	08000fc7 	.word	0x08000fc7
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8000f78:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <lcdSetOrientation+0xc4>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f8cb 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f84:	22f0      	movs	r2, #240	@ 0xf0
 8000f86:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000f88:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f8a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f8e:	805a      	strh	r2, [r3, #2]
			break;
 8000f90:	e027      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8000f92:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <lcdSetOrientation+0xc8>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f8be 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000f9e:	22f0      	movs	r2, #240	@ 0xf0
 8000fa0:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fa4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fa8:	805a      	strh	r2, [r3, #2]
			break;
 8000faa:	e01a      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8000fac:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <lcdSetOrientation+0xcc>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f8b1 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fb8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fbc:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fc0:	22f0      	movs	r2, #240	@ 0xf0
 8000fc2:	805a      	strh	r2, [r3, #2]
			break;
 8000fc4:	e00d      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <lcdSetOrientation+0xd0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f8a4 	bl	8001118 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fd2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fd6:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fda:	22f0      	movs	r2, #240	@ 0xf0
 8000fdc:	805a      	strh	r2, [r3, #2]
			break;
 8000fde:	e000      	b.n	8000fe2 <lcdSetOrientation+0x9e>
		default:
			break;
 8000fe0:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <lcdSetOrientation+0xc0>)
 8000fec:	885b      	ldrh	r3, [r3, #2]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 f829 	bl	800104c <lcdSetWindow>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000018 	.word	0x20000018
 8001008:	20000310 	.word	0x20000310
 800100c:	20000312 	.word	0x20000312
 8001010:	20000311 	.word	0x20000311
 8001014:	20000313 	.word	0x20000313

08001018 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	80fb      	strh	r3, [r7, #6]
 8001024:	4613      	mov	r3, r2
 8001026:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <lcdSetCursor+0x30>)
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 800102e:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <lcdSetCursor+0x30>)
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	88b9      	ldrh	r1, [r7, #4]
 800103a:	88f8      	ldrh	r0, [r7, #6]
 800103c:	f000 f806 	bl	800104c <lcdSetWindow>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000030c 	.word	0x2000030c

0800104c <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4604      	mov	r4, r0
 8001054:	4608      	mov	r0, r1
 8001056:	4611      	mov	r1, r2
 8001058:	461a      	mov	r2, r3
 800105a:	4623      	mov	r3, r4
 800105c:	80fb      	strh	r3, [r7, #6]
 800105e:	4603      	mov	r3, r0
 8001060:	80bb      	strh	r3, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
 8001066:	4613      	mov	r3, r2
 8001068:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 800106a:	202a      	movs	r0, #42	@ 0x2a
 800106c:	f000 f844 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f84e 	bl	8001118 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f848 	bl	8001118 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b29b      	uxth	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f842 	bl	8001118 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	b29b      	uxth	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f83c 	bl	8001118 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80010a0:	202b      	movs	r0, #43	@ 0x2b
 80010a2:	f000 f829 	bl	80010f8 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f833 	bl	8001118 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f82d 	bl	8001118 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 80010be:	883b      	ldrh	r3, [r7, #0]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f827 	bl	8001118 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 80010ca:	883b      	ldrh	r3, [r7, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f821 	bl	8001118 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80010d6:	202c      	movs	r0, #44	@ 0x2c
 80010d8:	f000 f80e 	bl	80010f8 <lcdWriteCommand>
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}

080010e4 <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 f805 	bl	80010f8 <lcdWriteCommand>
	HAL_Delay(50);
 80010ee:	2032      	movs	r0, #50	@ 0x32
 80010f0:	f002 ff44 	bl	8003f7c <HAL_Delay>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8001102:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001106:	79fa      	ldrb	r2, [r7, #7]
 8001108:	b292      	uxth	r2, r2
 800110a:	801a      	strh	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <lcdWriteData+0x1c>)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	8013      	strh	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	60020000 	.word	0x60020000

08001138 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8001138:	b490      	push	{r4, r7}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4604      	mov	r4, r0
 8001140:	4608      	mov	r0, r1
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	4623      	mov	r3, r4
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	4603      	mov	r3, r0
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	460b      	mov	r3, r1
 8001150:	717b      	strb	r3, [r7, #5]
 8001152:	4613      	mov	r3, r2
 8001154:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 800115a:	7f3b      	ldrb	r3, [r7, #28]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <lcdBuildMemoryAccessControlConfig+0x30>
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8001168:	7e3b      	ldrb	r3, [r7, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <lcdBuildMemoryAccessControlConfig+0x3e>
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8001176:	793b      	ldrb	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <lcdBuildMemoryAccessControlConfig+0x4c>
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8001184:	797b      	ldrb	r3, [r7, #5]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <lcdBuildMemoryAccessControlConfig+0x5a>
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <lcdBuildMemoryAccessControlConfig+0x68>
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119e:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <lcdBuildMemoryAccessControlConfig+0x76>
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011ac:	73fb      	strb	r3, [r7, #15]
  return value;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc90      	pop	{r4, r7}
 80011b8:	4770      	bx	lr

080011ba <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011c2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011c6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d013      	beq.n	80011fa <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011d6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011da:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011e2:	e000      	b.n	80011e6 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011e4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f9      	beq.n	80011e4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011fa:	687b      	ldr	r3, [r7, #4]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <_write>:
uint8_t handleTouch();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e009      	b.n	800122e <_write+0x26>
		ITM_SendChar((*ptr++));  // Send the character via ITM
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	60ba      	str	r2, [r7, #8]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ffc9 	bl	80011ba <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	dbf1      	blt.n	800121a <_write+0x12>
	}
	return len;
 8001236:	687b      	ldr	r3, [r7, #4]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <USBH_HID_EventCallback>:
static uint8_t USB_BUSY = 0;
char qr_code_data[MAX_LINES][MAX_LINE_LENGTH] = { { '\0' } }; //static initializes strings with all null characters
HID_KEYBD_Info_TypeDef *Keyboard_Info;

/***DORJEE YOU HAVE TO CHANGE USBH_HID.H WHEN YOU GENERATE CODE****/
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) { //2.6s for 54 lines
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f00a fc1f 	bl	800ba8c <USBH_HID_GetKeybdInfo>
 800124e:	4603      	mov	r3, r0
 8001250:	4a47      	ldr	r2, [pc, #284]	@ (8001370 <USBH_HID_EventCallback+0x130>)
 8001252:	6013      	str	r3, [r2, #0]
	char key = USBH_HID_GetASCIICode(Keyboard_Info);
 8001254:	4b46      	ldr	r3, [pc, #280]	@ (8001370 <USBH_HID_EventCallback+0x130>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f00a fcbf 	bl	800bbdc <USBH_HID_GetASCIICode>
 800125e:	4603      	mov	r3, r0
 8001260:	72fb      	strb	r3, [r7, #11]
	printf("%c\n", key);
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	4619      	mov	r1, r3
 8001266:	4843      	ldr	r0, [pc, #268]	@ (8001374 <USBH_HID_EventCallback+0x134>)
 8001268:	f00d f8fe 	bl	800e468 <iprintf>
	//disable the touchscreen interrupt functionality when usb transmission starts
	//after tab it calls itself one more time, so disable after i=0
	if (i == 1) {
 800126c:	4b42      	ldr	r3, [pc, #264]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d102      	bne.n	800127a <USBH_HID_EventCallback+0x3a>
		USB_BUSY = 1;
 8001274:	4b41      	ldr	r3, [pc, #260]	@ (800137c <USBH_HID_EventCallback+0x13c>)
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
	}

	//store incoming chars. ignore null characters that come in for some reason
	if ((key != NULL_CHAR) && (key != SOH)) {
 800127a:	7afb      	ldrb	r3, [r7, #11]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d011      	beq.n	80012a4 <USBH_HID_EventCallback+0x64>
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d00e      	beq.n	80012a4 <USBH_HID_EventCallback+0x64>
		qr_code_data[i][j] = key;
 8001286:	4b3c      	ldr	r3, [pc, #240]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b3d      	ldr	r3, [pc, #244]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	493d      	ldr	r1, [pc, #244]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 8001290:	0152      	lsls	r2, r2, #5
 8001292:	440a      	add	r2, r1
 8001294:	4413      	add	r3, r2
 8001296:	7afa      	ldrb	r2, [r7, #11]
 8001298:	701a      	strb	r2, [r3, #0]
		j++;
 800129a:	4b39      	ldr	r3, [pc, #228]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a37      	ldr	r2, [pc, #220]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 80012a2:	6013      	str	r3, [r2, #0]
	}
	//handle new line
	if (key == NEWLINE_CHAR) {
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	2b0a      	cmp	r3, #10
 80012a8:	d107      	bne.n	80012ba <USBH_HID_EventCallback+0x7a>
		j = 0;
 80012aa:	4b35      	ldr	r3, [pc, #212]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
		i++;
 80012b0:	4b31      	ldr	r3, [pc, #196]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a30      	ldr	r2, [pc, #192]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 80012b8:	6013      	str	r3, [r2, #0]
	}
	//tab is the end of the qr code
	if (key == TAB) {
 80012ba:	7afb      	ldrb	r3, [r7, #11]
 80012bc:	2b09      	cmp	r3, #9
 80012be:	d152      	bne.n	8001366 <USBH_HID_EventCallback+0x126>
		for (int a = 0; a < 15; a++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e002      	b.n	80012cc <USBH_HID_EventCallback+0x8c>
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b0e      	cmp	r3, #14
 80012d0:	ddf9      	ble.n	80012c6 <USBH_HID_EventCallback+0x86>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d2:	b672      	cpsid	i
}
 80012d4:	bf00      	nop
			//printf("%s", qr_code_data[a]);
		}
		__disable_irq();
		//output_protocol(qr_code_data, i + 1);
		//check if the title is (10 chars + newline char) or less
		if (strlen(qr_code_data[0]) < (MAX_TITLE_SIZE + 1)) {
 80012d6:	482b      	ldr	r0, [pc, #172]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 80012d8:	f7fe ff8a 	bl	80001f0 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b0c      	cmp	r3, #12
 80012e0:	d83b      	bhi.n	800135a <USBH_HID_EventCallback+0x11a>
			uint8_t freeSectorNumber = getFreeSector();
 80012e2:	f001 ff93 	bl	800320c <getFreeSector>
 80012e6:	4603      	mov	r3, r0
 80012e8:	72bb      	strb	r3, [r7, #10]
			//printf("free sector is %d\n", freeSectorNumber);
			//only store the protocol if all memory isnt full
			if (freeSectorNumber <= 10) { //i only got 10 pages rn
 80012ea:	7abb      	ldrb	r3, [r7, #10]
 80012ec:	2b0a      	cmp	r3, #10
 80012ee:	d82a      	bhi.n	8001346 <USBH_HID_EventCallback+0x106>
				//printf("why\n");
				storeProtocol(qr_code_data, freeSectorNumber);
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4823      	ldr	r0, [pc, #140]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 80012f6:	f001 fdc3 	bl	8002e80 <storeProtocol>
				//go to the page num the new protocol is on
				page_num = freeSectorNumber;
 80012fa:	4a23      	ldr	r2, [pc, #140]	@ (8001388 <USBH_HID_EventCallback+0x148>)
 80012fc:	7abb      	ldrb	r3, [r7, #10]
 80012fe:	7013      	strb	r3, [r2, #0]
				DrawMainPage(page_num);
 8001300:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <USBH_HID_EventCallback+0x148>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fb2f 	bl	8001968 <DrawMainPage>
				currentPage = PAGE_MAIN;
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <USBH_HID_EventCallback+0x14c>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < MAX_LINES; a++) {
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	e013      	b.n	800133e <USBH_HID_EventCallback+0xfe>
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e00a      	b.n	8001332 <USBH_HID_EventCallback+0xf2>
						qr_code_data[a][b] = '\0';
 800131c:	4a19      	ldr	r2, [pc, #100]	@ (8001384 <USBH_HID_EventCallback+0x144>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	441a      	add	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4413      	add	r3, r2
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b1f      	cmp	r3, #31
 8001336:	ddf1      	ble.n	800131c <USBH_HID_EventCallback+0xdc>
				for (int a = 0; a < MAX_LINES; a++) {
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	3301      	adds	r3, #1
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2bc7      	cmp	r3, #199	@ 0xc7
 8001342:	dde8      	ble.n	8001316 <USBH_HID_EventCallback+0xd6>
 8001344:	e004      	b.n	8001350 <USBH_HID_EventCallback+0x110>
					}
				}
			} else {
				DrawQueuePage(queueSize);
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <USBH_HID_EventCallback+0x150>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fe0c 	bl	8001f68 <DrawQueuePage>
  __ASM volatile ("cpsie i" : : : "memory");
 8001350:	b662      	cpsie	i
}
 8001352:	bf00      	nop
			}
			__enable_irq();
			USB_BUSY = 0;
 8001354:	4b09      	ldr	r3, [pc, #36]	@ (800137c <USBH_HID_EventCallback+0x13c>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <USBH_HID_EventCallback+0x138>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
		j = 0;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <USBH_HID_EventCallback+0x140>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
	}

}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20011870 	.word	0x20011870
 8001374:	0800f474 	.word	0x0800f474
 8001378:	20000564 	.word	0x20000564
 800137c:	2000ff6d 	.word	0x2000ff6d
 8001380:	20000568 	.word	0x20000568
 8001384:	2000ff70 	.word	0x2000ff70
 8001388:	20000266 	.word	0x20000266
 800138c:	2000054c 	.word	0x2000054c
 8001390:	2000ff6c 	.word	0x2000ff6c

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001398:	f002 fd7e 	bl	8003e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139c:	f000 f890 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a0:	f000 fa12 	bl	80017c8 <MX_GPIO_Init>
  MX_FMC_Init();
 80013a4:	f000 f9ae 	bl	8001704 <MX_FMC_Init>
  MX_TIM3_Init();
 80013a8:	f000 f92a 	bl	8001600 <MX_TIM3_Init>
  MX_SPI4_Init();
 80013ac:	f000 f8f2 	bl	8001594 <MX_SPI4_Init>
  MX_USB_HOST_Init();
 80013b0:	f00c fbde 	bl	800db70 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80013b4:	f000 f97c 	bl	80016b0 <MX_USART2_UART_Init>
//  	erase_sector(6);
//  	erase_sector(7);
//  	erase_sector(8);
//  	erase_sector(9);
//  	erase_sector(10);
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2140      	movs	r1, #64	@ 0x40
 80013bc:	4839      	ldr	r0, [pc, #228]	@ (80014a4 <main+0x110>)
 80013be:	f003 fb7d 	bl	8004abc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013c2:	2032      	movs	r0, #50	@ 0x32
 80013c4:	f002 fdda 	bl	8003f7c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2140      	movs	r1, #64	@ 0x40
 80013cc:	4835      	ldr	r0, [pc, #212]	@ (80014a4 <main+0x110>)
 80013ce:	f003 fb75 	bl	8004abc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013d2:	2032      	movs	r0, #50	@ 0x32
 80013d4:	f002 fdd2 	bl	8003f7c <HAL_Delay>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013d8:	2100      	movs	r1, #0
 80013da:	4833      	ldr	r0, [pc, #204]	@ (80014a8 <main+0x114>)
 80013dc:	f006 fe54 	bl	8008088 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR1 = 50;
 80013e0:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <main+0x114>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2232      	movs	r2, #50	@ 0x32
 80013e6:	635a      	str	r2, [r3, #52]	@ 0x34

	lcdInit();
 80013e8:	f7ff f9ae 	bl	8000748 <lcdInit>
	//lcdTest();
	lcdSetOrientation(LCD_ORIENTATION_LANDSCAPE);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff fda9 	bl	8000f44 <lcdSetOrientation>
	DrawMainPage(1);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f000 fab8 	bl	8001968 <DrawMainPage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80013f8:	f00c fbe0 	bl	800dbbc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		if (touchFlag) {
 80013fc:	4b2b      	ldr	r3, [pc, #172]	@ (80014ac <main+0x118>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d007      	beq.n	8001414 <main+0x80>
			handleTouch();
 8001404:	f001 f916 	bl	8002634 <handleTouch>
			touchFlag = 0;
 8001408:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <main+0x118>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 800140e:	2064      	movs	r0, #100	@ 0x64
 8001410:	f002 fdb4 	bl	8003f7c <HAL_Delay>
		}
		if (currentPage == PAGE_PROGRESS) {
 8001414:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <main+0x11c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b05      	cmp	r3, #5
 800141a:	d1ed      	bne.n	80013f8 <main+0x64>
			//when protocol finishes naturally, it will send a done signal

			if (HAL_UART_Receive(&huart2, &rx_byte, 1, 0) == HAL_OK) {
 800141c:	2300      	movs	r3, #0
 800141e:	2201      	movs	r2, #1
 8001420:	4924      	ldr	r1, [pc, #144]	@ (80014b4 <main+0x120>)
 8001422:	4825      	ldr	r0, [pc, #148]	@ (80014b8 <main+0x124>)
 8001424:	f007 fb93 	bl	8008b4e <HAL_UART_Receive>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1e4      	bne.n	80013f8 <main+0x64>
				//protocol starts, update progress screen
				if (rx_byte == 'B') {
 800142e:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <main+0x120>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b42      	cmp	r3, #66	@ 0x42
 8001434:	d10b      	bne.n	800144e <main+0xba>
					//HAL_UART_Receive(&huart2, (uint8_t*) rx_bind, sizeof(rx_bind), 1000);
					//DrawProgressPage(rx_byte, rx_bind);
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data, sizeof(rx_data), 100);
 8001436:	2364      	movs	r3, #100	@ 0x64
 8001438:	220a      	movs	r2, #10
 800143a:	4920      	ldr	r1, [pc, #128]	@ (80014bc <main+0x128>)
 800143c:	481e      	ldr	r0, [pc, #120]	@ (80014b8 <main+0x124>)
 800143e:	f007 fb86 	bl	8008b4e <HAL_UART_Receive>
					DrawProgressPage(rx_byte, rx_data);
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <main+0x120>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	491d      	ldr	r1, [pc, #116]	@ (80014bc <main+0x128>)
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fe73 	bl	8002134 <DrawProgressPage>
				}
				if (rx_byte == 'M') {
 800144e:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <main+0x120>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b4d      	cmp	r3, #77	@ 0x4d
 8001454:	d10b      	bne.n	800146e <main+0xda>
					//HAL_UART_Receive(&huart2, (uint8_t*) rx_move, sizeof(rx_move), HAL_MAX_DELAY);
					//DrawProgressPage(rx_byte, rx_move);
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data, sizeof(rx_data), 100);
 8001456:	2364      	movs	r3, #100	@ 0x64
 8001458:	220a      	movs	r2, #10
 800145a:	4918      	ldr	r1, [pc, #96]	@ (80014bc <main+0x128>)
 800145c:	4816      	ldr	r0, [pc, #88]	@ (80014b8 <main+0x124>)
 800145e:	f007 fb76 	bl	8008b4e <HAL_UART_Receive>
					DrawProgressPage(rx_byte, rx_data);
 8001462:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <main+0x120>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	4915      	ldr	r1, [pc, #84]	@ (80014bc <main+0x128>)
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fe63 	bl	8002134 <DrawProgressPage>
				}
				if (rx_byte == 'P' ) {
 800146e:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <main+0x120>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b50      	cmp	r3, #80	@ 0x50
 8001474:	d10b      	bne.n	800148e <main+0xfa>
					//HAL_UART_Receive(&huart2, (uint8_t*) rx_pause, sizeof(rx_pause), HAL_MAX_DELAY);
					//DrawProgressPage(rx_byte, rx_pause);
					HAL_UART_Receive(&huart2, (uint8_t*) rx_data, sizeof(rx_data), 100);
 8001476:	2364      	movs	r3, #100	@ 0x64
 8001478:	220a      	movs	r2, #10
 800147a:	4910      	ldr	r1, [pc, #64]	@ (80014bc <main+0x128>)
 800147c:	480e      	ldr	r0, [pc, #56]	@ (80014b8 <main+0x124>)
 800147e:	f007 fb66 	bl	8008b4e <HAL_UART_Receive>
					DrawProgressPage(rx_byte, rx_data);
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <main+0x120>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	490d      	ldr	r1, [pc, #52]	@ (80014bc <main+0x128>)
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fe53 	bl	8002134 <DrawProgressPage>
				}

				//protocol finishes
				if (rx_byte == 'D') {
 800148e:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <main+0x120>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b44      	cmp	r3, #68	@ 0x44
 8001494:	d1b0      	bne.n	80013f8 <main+0x64>
				    //go to success page
					currentPage = PAGE_FINISH;
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <main+0x11c>)
 8001498:	2204      	movs	r2, #4
 800149a:	701a      	strb	r2, [r3, #0]
					DrawPageFinish();
 800149c:	f001 f888 	bl	80025b0 <DrawPageFinish>
    MX_USB_HOST_Process();
 80014a0:	e7aa      	b.n	80013f8 <main+0x64>
 80014a2:	bf00      	nop
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	2000046c 	.word	0x2000046c
 80014ac:	20000560 	.word	0x20000560
 80014b0:	2000054c 	.word	0x2000054c
 80014b4:	2000054d 	.word	0x2000054d
 80014b8:	200004b4 	.word	0x200004b4
 80014bc:	20000550 	.word	0x20000550

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b094      	sub	sp, #80	@ 0x50
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 0320 	add.w	r3, r7, #32
 80014ca:	2230      	movs	r2, #48	@ 0x30
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f00d f868 	bl	800e5a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	4b28      	ldr	r3, [pc, #160]	@ (800158c <SystemClock_Config+0xcc>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	4a27      	ldr	r2, [pc, #156]	@ (800158c <SystemClock_Config+0xcc>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f4:	4b25      	ldr	r3, [pc, #148]	@ (800158c <SystemClock_Config+0xcc>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <SystemClock_Config+0xd0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <SystemClock_Config+0xd0>)
 800150a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <SystemClock_Config+0xd0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151c:	2301      	movs	r3, #1
 800151e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001520:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001526:	2302      	movs	r3, #2
 8001528:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800152e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001530:	2308      	movs	r3, #8
 8001532:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001534:	23a8      	movs	r3, #168	@ 0xa8
 8001536:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001538:	2302      	movs	r3, #2
 800153a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800153c:	2307      	movs	r3, #7
 800153e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	4618      	mov	r0, r3
 8001546:	f005 fc1f 	bl	8006d88 <HAL_RCC_OscConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001550:	f002 fa1c 	bl	800398c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001554:	230f      	movs	r3, #15
 8001556:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001558:	2302      	movs	r3, #2
 800155a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001560:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001564:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001566:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2105      	movs	r1, #5
 8001572:	4618      	mov	r0, r3
 8001574:	f005 fe80 	bl	8007278 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800157e:	f002 fa05 	bl	800398c <Error_Handler>
  }
}
 8001582:	bf00      	nop
 8001584:	3750      	adds	r7, #80	@ 0x50
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001598:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <MX_SPI4_Init+0x64>)
 800159a:	4a18      	ldr	r2, [pc, #96]	@ (80015fc <MX_SPI4_Init+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800159e:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <MX_SPI4_Init+0x64>)
 80015a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015a4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80015a6:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <MX_SPI4_Init+0x64>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <MX_SPI4_Init+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <MX_SPI4_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <MX_SPI4_Init+0x64>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <MX_SPI4_Init+0x64>)
 80015c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015c4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80015c6:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <MX_SPI4_Init+0x64>)
 80015c8:	2230      	movs	r2, #48	@ 0x30
 80015ca:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <MX_SPI4_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <MX_SPI4_Init+0x64>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d8:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <MX_SPI4_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <MX_SPI4_Init+0x64>)
 80015e0:	220a      	movs	r2, #10
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80015e4:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <MX_SPI4_Init+0x64>)
 80015e6:	f006 f865 	bl	80076b4 <HAL_SPI_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80015f0:	f002 f9cc 	bl	800398c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000414 	.word	0x20000414
 80015fc:	40013400 	.word	0x40013400

08001600 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001606:	f107 0320 	add.w	r3, r7, #32
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
 800161e:	615a      	str	r2, [r3, #20]
 8001620:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001622:	4b21      	ldr	r3, [pc, #132]	@ (80016a8 <MX_TIM3_Init+0xa8>)
 8001624:	4a21      	ldr	r2, [pc, #132]	@ (80016ac <MX_TIM3_Init+0xac>)
 8001626:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 168-1;
 8001628:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <MX_TIM3_Init+0xa8>)
 800162a:	22a7      	movs	r2, #167	@ 0xa7
 800162c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <MX_TIM3_Init+0xa8>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001634:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <MX_TIM3_Init+0xa8>)
 8001636:	2264      	movs	r2, #100	@ 0x64
 8001638:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163a:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_TIM3_Init+0xa8>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <MX_TIM3_Init+0xa8>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001646:	4818      	ldr	r0, [pc, #96]	@ (80016a8 <MX_TIM3_Init+0xa8>)
 8001648:	f006 fcce 	bl	8007fe8 <HAL_TIM_PWM_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001652:	f002 f99b 	bl	800398c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800165e:	f107 0320 	add.w	r3, r7, #32
 8001662:	4619      	mov	r1, r3
 8001664:	4810      	ldr	r0, [pc, #64]	@ (80016a8 <MX_TIM3_Init+0xa8>)
 8001666:	f007 f91b 	bl	80088a0 <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001670:	f002 f98c 	bl	800398c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001674:	2360      	movs	r3, #96	@ 0x60
 8001676:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	4619      	mov	r1, r3
 800168a:	4807      	ldr	r0, [pc, #28]	@ (80016a8 <MX_TIM3_Init+0xa8>)
 800168c:	f006 fdc4 	bl	8008218 <HAL_TIM_PWM_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001696:	f002 f979 	bl	800398c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800169a:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <MX_TIM3_Init+0xa8>)
 800169c:	f002 fa0e 	bl	8003abc <HAL_TIM_MspPostInit>

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	@ 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2000046c 	.word	0x2000046c
 80016ac:	40000400 	.word	0x40000400

080016b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	@ (8001700 <MX_USART2_UART_Init+0x50>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ba:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	@ (80016fc <MX_USART2_UART_Init+0x4c>)
 80016e8:	f007 f956 	bl	8008998 <HAL_UART_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016f2:	f002 f94b 	bl	800398c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200004b4 	.word	0x200004b4
 8001700:	40004400 	.word	0x40004400

08001704 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	615a      	str	r2, [r3, #20]
 800171a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800171c:	4b28      	ldr	r3, [pc, #160]	@ (80017c0 <MX_FMC_Init+0xbc>)
 800171e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001722:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001724:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <MX_FMC_Init+0xbc>)
 8001726:	4a27      	ldr	r2, [pc, #156]	@ (80017c4 <MX_FMC_Init+0xc0>)
 8001728:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800172a:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <MX_FMC_Init+0xbc>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001730:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <MX_FMC_Init+0xbc>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001736:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <MX_FMC_Init+0xbc>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800173c:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <MX_FMC_Init+0xbc>)
 800173e:	2210      	movs	r2, #16
 8001740:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001742:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <MX_FMC_Init+0xbc>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001748:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <MX_FMC_Init+0xbc>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 800174e:	4b1c      	ldr	r3, [pc, #112]	@ (80017c0 <MX_FMC_Init+0xbc>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001754:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <MX_FMC_Init+0xbc>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800175a:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <MX_FMC_Init+0xbc>)
 800175c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001760:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001762:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <MX_FMC_Init+0xbc>)
 8001764:	2200      	movs	r2, #0
 8001766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001768:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <MX_FMC_Init+0xbc>)
 800176a:	2200      	movs	r2, #0
 800176c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800176e:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <MX_FMC_Init+0xbc>)
 8001770:	2200      	movs	r2, #0
 8001772:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <MX_FMC_Init+0xbc>)
 8001776:	2200      	movs	r2, #0
 8001778:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800177a:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_FMC_Init+0xbc>)
 800177c:	2200      	movs	r2, #0
 800177e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <MX_FMC_Init+0xbc>)
 8001782:	2200      	movs	r2, #0
 8001784:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 3;
 8001786:	2303      	movs	r3, #3
 8001788:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800178a:	230f      	movs	r3, #15
 800178c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 2;
 800178e:	2302      	movs	r3, #2
 8001790:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8001792:	2302      	movs	r3, #2
 8001794:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001796:	2310      	movs	r3, #16
 8001798:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800179a:	2311      	movs	r3, #17
 800179c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_FMC_Init+0xbc>)
 80017aa:	f006 fbd5 	bl	8007f58 <HAL_SRAM_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 80017b4:	f002 f8ea 	bl	800398c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200004fc 	.word	0x200004fc
 80017c4:	a0000104 	.word	0xa0000104

080017c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08c      	sub	sp, #48	@ 0x30
 80017cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001954 <MX_GPIO_Init+0x18c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001954 <MX_GPIO_Init+0x18c>)
 80017e8:	f043 0310 	orr.w	r3, r3, #16
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b59      	ldr	r3, [pc, #356]	@ (8001954 <MX_GPIO_Init+0x18c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	4b55      	ldr	r3, [pc, #340]	@ (8001954 <MX_GPIO_Init+0x18c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a54      	ldr	r2, [pc, #336]	@ (8001954 <MX_GPIO_Init+0x18c>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b52      	ldr	r3, [pc, #328]	@ (8001954 <MX_GPIO_Init+0x18c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	4b4e      	ldr	r3, [pc, #312]	@ (8001954 <MX_GPIO_Init+0x18c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a4d      	ldr	r2, [pc, #308]	@ (8001954 <MX_GPIO_Init+0x18c>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b4b      	ldr	r3, [pc, #300]	@ (8001954 <MX_GPIO_Init+0x18c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b47      	ldr	r3, [pc, #284]	@ (8001954 <MX_GPIO_Init+0x18c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a46      	ldr	r2, [pc, #280]	@ (8001954 <MX_GPIO_Init+0x18c>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b44      	ldr	r3, [pc, #272]	@ (8001954 <MX_GPIO_Init+0x18c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b40      	ldr	r3, [pc, #256]	@ (8001954 <MX_GPIO_Init+0x18c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a3f      	ldr	r2, [pc, #252]	@ (8001954 <MX_GPIO_Init+0x18c>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b3d      	ldr	r3, [pc, #244]	@ (8001954 <MX_GPIO_Init+0x18c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b39      	ldr	r3, [pc, #228]	@ (8001954 <MX_GPIO_Init+0x18c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a38      	ldr	r2, [pc, #224]	@ (8001954 <MX_GPIO_Init+0x18c>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b36      	ldr	r3, [pc, #216]	@ (8001954 <MX_GPIO_Init+0x18c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800188c:	4832      	ldr	r0, [pc, #200]	@ (8001958 <MX_GPIO_Init+0x190>)
 800188e:	f003 f915 	bl	8004abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001898:	4830      	ldr	r0, [pc, #192]	@ (800195c <MX_GPIO_Init+0x194>)
 800189a:	f003 f90f 	bl	8004abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_NRST_GPIO_Port, LCD_NRST_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2140      	movs	r1, #64	@ 0x40
 80018a2:	482f      	ldr	r0, [pc, #188]	@ (8001960 <MX_GPIO_Init+0x198>)
 80018a4:	f003 f90a 	bl	8004abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018a8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b6:	2303      	movs	r3, #3
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ba:	2305      	movs	r3, #5
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4827      	ldr	r0, [pc, #156]	@ (8001964 <MX_GPIO_Init+0x19c>)
 80018c6:	f002 ff35 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	481d      	ldr	r0, [pc, #116]	@ (8001958 <MX_GPIO_Init+0x190>)
 80018e4:	f002 ff26 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 80018e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	4619      	mov	r1, r3
 8001900:	4816      	ldr	r0, [pc, #88]	@ (800195c <MX_GPIO_Init+0x194>)
 8001902:	f002 ff17 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_NRST_Pin */
  GPIO_InitStruct.Pin = LCD_NRST_Pin;
 8001906:	2340      	movs	r3, #64	@ 0x40
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	2301      	movs	r3, #1
 800190c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_NRST_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4619      	mov	r1, r3
 800191c:	4810      	ldr	r0, [pc, #64]	@ (8001960 <MX_GPIO_Init+0x198>)
 800191e:	f002 ff09 	bl	8004734 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001922:	2320      	movs	r3, #32
 8001924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001926:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800192a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	480b      	ldr	r0, [pc, #44]	@ (8001964 <MX_GPIO_Init+0x19c>)
 8001938:	f002 fefc 	bl	8004734 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	2017      	movs	r0, #23
 8001942:	f002 fc1a 	bl	800417a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001946:	2017      	movs	r0, #23
 8001948:	f002 fc33 	bl	80041b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800194c:	bf00      	nop
 800194e:	3730      	adds	r7, #48	@ 0x30
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40020400 	.word	0x40020400

08001968 <DrawMainPage>:
/**
 * @brief: Draw main page and handle button label and status updates
 * @param: page_num: determines which page should be drawn from 1-10
 * @retval: none
 */
void DrawMainPage(uint8_t page_num) {
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b0a8      	sub	sp, #160	@ 0xa0
 800196c:	af02      	add	r7, sp, #8
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
	//Draw "Protocol Title" box
	lcdFillRGB(COLOR_WHITE);
 8001972:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001976:	f7ff f85b 	bl	8000a30 <lcdFillRGB>
	char empty[20] = "Empty\n"; //strings from flash memory come with newline at end
 800197a:	4a9c      	ldr	r2, [pc, #624]	@ (8001bec <DrawMainPage+0x284>)
 800197c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001980:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001984:	6018      	str	r0, [r3, #0]
 8001986:	3304      	adds	r3, #4
 8001988:	8019      	strh	r1, [r3, #0]
 800198a:	3302      	adds	r3, #2
 800198c:	0c0a      	lsrs	r2, r1, #16
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	f107 0387 	add.w	r3, r7, #135	@ 0x87
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	731a      	strb	r2, [r3, #12]
	char pageTitle[20] = "";
 800199e:	2300      	movs	r3, #0
 80019a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80019a2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Page %d", page_num);
 80019b0:	79fa      	ldrb	r2, [r7, #7]
 80019b2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019b6:	498e      	ldr	r1, [pc, #568]	@ (8001bf0 <DrawMainPage+0x288>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f00c fd6f 	bl	800e49c <siprintf>
	lcdSetCursor(10, 10);
 80019be:	210a      	movs	r1, #10
 80019c0:	200a      	movs	r0, #10
 80019c2:	f7ff fb29 	bl	8001018 <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 80019c6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80019ca:	2000      	movs	r0, #0
 80019cc:	f7ff faa4 	bl	8000f18 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 80019d0:	4888      	ldr	r0, [pc, #544]	@ (8001bf4 <DrawMainPage+0x28c>)
 80019d2:	f7ff fa91 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(pageTitle);
 80019d6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fa00 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 80019e0:	4885      	ldr	r0, [pc, #532]	@ (8001bf8 <DrawMainPage+0x290>)
 80019e2:	f7ff fa89 	bl	8000ef8 <lcdSetTextFont>

	//get button label info from flash memory
	char readBuffer1[MAX_LINE_LENGTH] = ""; //initialize with nulls
 80019e6:	2300      	movs	r3, #0
 80019e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]
 80019fa:	615a      	str	r2, [r3, #20]
 80019fc:	619a      	str	r2, [r3, #24]
	char readBuffer2[MAX_LINE_LENGTH] = ""; //initialize with nulls
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]
 8001a12:	615a      	str	r2, [r3, #20]
 8001a14:	619a      	str	r2, [r3, #24]
	char readBuffer3[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	615a      	str	r2, [r3, #20]
 8001a2c:	619a      	str	r2, [r3, #24]

	//if the protocol exists, read from it. else, name it empty
	if (read_from_flash(readBuffer1, get_sector_address(page_num))) {
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fec9 	bl	80037c8 <get_sector_address>
 8001a36:	4602      	mov	r2, r0
 8001a38:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f001 f9e9 	bl	8002e16 <read_from_flash>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00a      	beq.n	8001a60 <DrawMainPage+0xf8>
		strcpy(buttons[0].label, readBuffer1);
 8001a4a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a4e:	4619      	mov	r1, r3
 8001a50:	486a      	ldr	r0, [pc, #424]	@ (8001bfc <DrawMainPage+0x294>)
 8001a52:	f00c fe32 	bl	800e6ba <strcpy>
		buttons[0].status = NOT_EMPTY;
 8001a56:	4b6a      	ldr	r3, [pc, #424]	@ (8001c00 <DrawMainPage+0x298>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001a5e:	e009      	b.n	8001a74 <DrawMainPage+0x10c>
	} else {
		strcpy(buttons[0].label, empty);
 8001a60:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001a64:	4619      	mov	r1, r3
 8001a66:	4865      	ldr	r0, [pc, #404]	@ (8001bfc <DrawMainPage+0x294>)
 8001a68:	f00c fe27 	bl	800e6ba <strcpy>
		buttons[0].status = EMPTY;
 8001a6c:	4b64      	ldr	r3, [pc, #400]	@ (8001c00 <DrawMainPage+0x298>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	if (read_from_flash(readBuffer2,
			get_sector_address(page_num) + PROTOCOL_SIZE)) {
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 fea6 	bl	80037c8 <get_sector_address>
 8001a7c:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer2,
 8001a7e:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8001a82:	3310      	adds	r3, #16
 8001a84:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	f001 f9c3 	bl	8002e16 <read_from_flash>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00a      	beq.n	8001aac <DrawMainPage+0x144>
		strcpy(buttons[1].label, readBuffer2);
 8001a96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4859      	ldr	r0, [pc, #356]	@ (8001c04 <DrawMainPage+0x29c>)
 8001a9e:	f00c fe0c 	bl	800e6ba <strcpy>
		buttons[1].status = NOT_EMPTY;
 8001aa2:	4b57      	ldr	r3, [pc, #348]	@ (8001c00 <DrawMainPage+0x298>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8001aaa:	e009      	b.n	8001ac0 <DrawMainPage+0x158>
	} else {
		strcpy(buttons[1].label, empty);
 8001aac:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4854      	ldr	r0, [pc, #336]	@ (8001c04 <DrawMainPage+0x29c>)
 8001ab4:	f00c fe01 	bl	800e6ba <strcpy>
		buttons[1].status = EMPTY;
 8001ab8:	4b51      	ldr	r3, [pc, #324]	@ (8001c00 <DrawMainPage+0x298>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	}
	if (read_from_flash(readBuffer3,
			get_sector_address(page_num) + 2 * PROTOCOL_SIZE)) {
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 fe80 	bl	80037c8 <get_sector_address>
 8001ac8:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer3,
 8001aca:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8001ace:	3320      	adds	r3, #32
 8001ad0:	f107 020c 	add.w	r2, r7, #12
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f001 f99d 	bl	8002e16 <read_from_flash>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00a      	beq.n	8001af8 <DrawMainPage+0x190>
		strcpy(buttons[2].label, readBuffer3);
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4847      	ldr	r0, [pc, #284]	@ (8001c08 <DrawMainPage+0x2a0>)
 8001aea:	f00c fde6 	bl	800e6ba <strcpy>
		buttons[2].status = NOT_EMPTY;
 8001aee:	4b44      	ldr	r3, [pc, #272]	@ (8001c00 <DrawMainPage+0x298>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8001af6:	e009      	b.n	8001b0c <DrawMainPage+0x1a4>
	} else {
		strcpy(buttons[2].label, empty);
 8001af8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001afc:	4619      	mov	r1, r3
 8001afe:	4842      	ldr	r0, [pc, #264]	@ (8001c08 <DrawMainPage+0x2a0>)
 8001b00:	f00c fddb 	bl	800e6ba <strcpy>
		buttons[2].status = EMPTY;
 8001b04:	4b3e      	ldr	r3, [pc, #248]	@ (8001c00 <DrawMainPage+0x298>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	}

	// Draw buttons
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b12:	e08d      	b.n	8001c30 <DrawMainPage+0x2c8>
		lcdDrawRect(buttons[i].x, buttons[i].y, buttons[i].w, buttons[i].h,
 8001b14:	4a3a      	ldr	r2, [pc, #232]	@ (8001c00 <DrawMainPage+0x298>)
 8001b16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b1a:	212a      	movs	r1, #42	@ 0x2a
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b218      	sxth	r0, r3
 8001b26:	4a36      	ldr	r2, [pc, #216]	@ (8001c00 <DrawMainPage+0x298>)
 8001b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b2c:	212a      	movs	r1, #42	@ 0x2a
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3302      	adds	r3, #2
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b219      	sxth	r1, r3
 8001b3a:	4a31      	ldr	r2, [pc, #196]	@ (8001c00 <DrawMainPage+0x298>)
 8001b3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b40:	242a      	movs	r4, #42	@ 0x2a
 8001b42:	fb04 f303 	mul.w	r3, r4, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	3304      	adds	r3, #4
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	4c2c      	ldr	r4, [pc, #176]	@ (8001c00 <DrawMainPage+0x298>)
 8001b50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b54:	252a      	movs	r5, #42	@ 0x2a
 8001b56:	fb05 f303 	mul.w	r3, r5, r3
 8001b5a:	4423      	add	r3, r4
 8001b5c:	3306      	adds	r3, #6
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	2400      	movs	r4, #0
 8001b64:	9400      	str	r4, [sp, #0]
 8001b66:	f7ff f847 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		buttons[i].label[strlen(buttons[i].label) - 1] = ' '; //dont display null terminator
 8001b6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b6e:	222a      	movs	r2, #42	@ 0x2a
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	3308      	adds	r3, #8
 8001b76:	4a22      	ldr	r2, [pc, #136]	@ (8001c00 <DrawMainPage+0x298>)
 8001b78:	4413      	add	r3, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fb38 	bl	80001f0 <strlen>
 8001b80:	4603      	mov	r3, r0
 8001b82:	3b01      	subs	r3, #1
 8001b84:	491e      	ldr	r1, [pc, #120]	@ (8001c00 <DrawMainPage+0x298>)
 8001b86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b8a:	202a      	movs	r0, #42	@ 0x2a
 8001b8c:	fb00 f202 	mul.w	r2, r0, r2
 8001b90:	440a      	add	r2, r1
 8001b92:	4413      	add	r3, r2
 8001b94:	3308      	adds	r3, #8
 8001b96:	2220      	movs	r2, #32
 8001b98:	701a      	strb	r2, [r3, #0]
		lcdSetCursor(buttons[i].x + 10, buttons[i].y + 10);
 8001b9a:	4a19      	ldr	r2, [pc, #100]	@ (8001c00 <DrawMainPage+0x298>)
 8001b9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ba0:	212a      	movs	r1, #42	@ 0x2a
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	330a      	adds	r3, #10
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	4914      	ldr	r1, [pc, #80]	@ (8001c00 <DrawMainPage+0x298>)
 8001bb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bb4:	202a      	movs	r0, #42	@ 0x2a
 8001bb6:	fb00 f303 	mul.w	r3, r0, r3
 8001bba:	440b      	add	r3, r1
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	330a      	adds	r3, #10
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f7ff fa26 	bl	8001018 <lcdSetCursor>
		if (buttons[i].status == EMPTY) {
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8001c00 <DrawMainPage+0x298>)
 8001bce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bd2:	212a      	movs	r1, #42	@ 0x2a
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3328      	adds	r3, #40	@ 0x28
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d116      	bne.n	8001c10 <DrawMainPage+0x2a8>
			lcdPrintf("EMPTY");
 8001be2:	480a      	ldr	r0, [pc, #40]	@ (8001c0c <DrawMainPage+0x2a4>)
 8001be4:	f7ff f8fc 	bl	8000de0 <lcdPrintf>
 8001be8:	e01d      	b.n	8001c26 <DrawMainPage+0x2be>
 8001bea:	bf00      	nop
 8001bec:	0800f488 	.word	0x0800f488
 8001bf0:	0800f478 	.word	0x0800f478
 8001bf4:	20000010 	.word	0x20000010
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	20000038 	.word	0x20000038
 8001c00:	20000030 	.word	0x20000030
 8001c04:	20000062 	.word	0x20000062
 8001c08:	2000008c 	.word	0x2000008c
 8001c0c:	0800f480 	.word	0x0800f480
		} else {
			lcdPrintf(buttons[i].label);
 8001c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c14:	222a      	movs	r2, #42	@ 0x2a
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	3308      	adds	r3, #8
 8001c1c:	4a3a      	ldr	r2, [pc, #232]	@ (8001d08 <DrawMainPage+0x3a0>)
 8001c1e:	4413      	add	r3, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f8dd 	bl	8000de0 <lcdPrintf>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001c26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	f77f af6d 	ble.w	8001b14 <DrawMainPage+0x1ac>
		}
	}

	// Draw "Next" button
	if (page_num != 10) {
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b0a      	cmp	r3, #10
 8001c3e:	d01e      	beq.n	8001c7e <DrawMainPage+0x316>
		//BSP_LCD_SetTextColor(LCD_COLOR_RED);
		lcdDrawRect(nextButton.x, nextButton.y, nextButton.w, nextButton.h,
 8001c40:	4b32      	ldr	r3, [pc, #200]	@ (8001d0c <DrawMainPage+0x3a4>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	b218      	sxth	r0, r3
 8001c46:	4b31      	ldr	r3, [pc, #196]	@ (8001d0c <DrawMainPage+0x3a4>)
 8001c48:	885b      	ldrh	r3, [r3, #2]
 8001c4a:	b219      	sxth	r1, r3
 8001c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d0c <DrawMainPage+0x3a4>)
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	4b2e      	ldr	r3, [pc, #184]	@ (8001d0c <DrawMainPage+0x3a4>)
 8001c54:	88db      	ldrh	r3, [r3, #6]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	2400      	movs	r4, #0
 8001c5a:	9400      	str	r4, [sp, #0]
 8001c5c:	f7fe ffcc 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(nextButton.x + 5, nextButton.y + 5);
 8001c60:	4b2a      	ldr	r3, [pc, #168]	@ (8001d0c <DrawMainPage+0x3a4>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	3305      	adds	r3, #5
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	4b28      	ldr	r3, [pc, #160]	@ (8001d0c <DrawMainPage+0x3a4>)
 8001c6a:	885b      	ldrh	r3, [r3, #2]
 8001c6c:	3305      	adds	r3, #5
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f7ff f9d0 	bl	8001018 <lcdSetCursor>
		lcdPrintf(nextButton.label);
 8001c78:	4825      	ldr	r0, [pc, #148]	@ (8001d10 <DrawMainPage+0x3a8>)
 8001c7a:	f7ff f8b1 	bl	8000de0 <lcdPrintf>
	}

	// Draw "Back" button
	if (page_num != 1) {
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d01e      	beq.n	8001cc2 <DrawMainPage+0x35a>
		lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001c84:	4b23      	ldr	r3, [pc, #140]	@ (8001d14 <DrawMainPage+0x3ac>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b218      	sxth	r0, r3
 8001c8a:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <DrawMainPage+0x3ac>)
 8001c8c:	885b      	ldrh	r3, [r3, #2]
 8001c8e:	b219      	sxth	r1, r3
 8001c90:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <DrawMainPage+0x3ac>)
 8001c92:	889b      	ldrh	r3, [r3, #4]
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	4b1f      	ldr	r3, [pc, #124]	@ (8001d14 <DrawMainPage+0x3ac>)
 8001c98:	88db      	ldrh	r3, [r3, #6]
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	2400      	movs	r4, #0
 8001c9e:	9400      	str	r4, [sp, #0]
 8001ca0:	f7fe ffaa 	bl	8000bf8 <lcdDrawRect>
		COLOR_BLACK);
		lcdSetCursor(backButton.x + 5, backButton.y + 5);
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <DrawMainPage+0x3ac>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	3305      	adds	r3, #5
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <DrawMainPage+0x3ac>)
 8001cae:	885b      	ldrh	r3, [r3, #2]
 8001cb0:	3305      	adds	r3, #5
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f7ff f9ae 	bl	8001018 <lcdSetCursor>
		lcdPrintf(backButton.label);
 8001cbc:	4816      	ldr	r0, [pc, #88]	@ (8001d18 <DrawMainPage+0x3b0>)
 8001cbe:	f7ff f88f 	bl	8000de0 <lcdPrintf>
	}
//
	//draw "Queue" button on page 1
	lcdDrawRect(queueButton.x, queueButton.y, queueButton.w, queueButton.h,
 8001cc2:	4b16      	ldr	r3, [pc, #88]	@ (8001d1c <DrawMainPage+0x3b4>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	b218      	sxth	r0, r3
 8001cc8:	4b14      	ldr	r3, [pc, #80]	@ (8001d1c <DrawMainPage+0x3b4>)
 8001cca:	885b      	ldrh	r3, [r3, #2]
 8001ccc:	b219      	sxth	r1, r3
 8001cce:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <DrawMainPage+0x3b4>)
 8001cd0:	889b      	ldrh	r3, [r3, #4]
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <DrawMainPage+0x3b4>)
 8001cd6:	88db      	ldrh	r3, [r3, #6]
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	2400      	movs	r4, #0
 8001cdc:	9400      	str	r4, [sp, #0]
 8001cde:	f7fe ff8b 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(queueButton.x + 5, queueButton.y + 5);
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <DrawMainPage+0x3b4>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	3305      	adds	r3, #5
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <DrawMainPage+0x3b4>)
 8001cec:	885b      	ldrh	r3, [r3, #2]
 8001cee:	3305      	adds	r3, #5
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	f7ff f98f 	bl	8001018 <lcdSetCursor>
	lcdPrintf(queueButton.label);
 8001cfa:	4809      	ldr	r0, [pc, #36]	@ (8001d20 <DrawMainPage+0x3b8>)
 8001cfc:	f7ff f870 	bl	8000de0 <lcdPrintf>
}
 8001d00:	bf00      	nop
 8001d02:	3798      	adds	r7, #152	@ 0x98
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bdb0      	pop	{r4, r5, r7, pc}
 8001d08:	20000030 	.word	0x20000030
 8001d0c:	200001e4 	.word	0x200001e4
 8001d10:	200001ec 	.word	0x200001ec
 8001d14:	200001b8 	.word	0x200001b8
 8001d18:	200001c0 	.word	0x200001c0
 8001d1c:	200000b0 	.word	0x200000b0
 8001d20:	200000b8 	.word	0x200000b8

08001d24 <DrawInfoPage>:

void DrawInfoPage(char protocolTitle[MAX_LINE_LENGTH]) {
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_WHITE);
 8001d2c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d30:	f7fe fe7e 	bl	8000a30 <lcdFillRGB>
	//Display protocol name at top of screen
	lcdSetCursor(90, 10);
 8001d34:	210a      	movs	r1, #10
 8001d36:	205a      	movs	r0, #90	@ 0x5a
 8001d38:	f7ff f96e 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8001d3c:	4844      	ldr	r0, [pc, #272]	@ (8001e50 <DrawInfoPage+0x12c>)
 8001d3e:	f7ff f8db 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(protocolTitle);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff f84c 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001d48:	4842      	ldr	r0, [pc, #264]	@ (8001e54 <DrawInfoPage+0x130>)
 8001d4a:	f7ff f8d5 	bl	8000ef8 <lcdSetTextFont>

	//Draw "QueueSelect" button on select page
	lcdDrawRect(queueSelectButton.x, queueSelectButton.y, queueSelectButton.w,
 8001d4e:	4b42      	ldr	r3, [pc, #264]	@ (8001e58 <DrawInfoPage+0x134>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	b218      	sxth	r0, r3
 8001d54:	4b40      	ldr	r3, [pc, #256]	@ (8001e58 <DrawInfoPage+0x134>)
 8001d56:	885b      	ldrh	r3, [r3, #2]
 8001d58:	b219      	sxth	r1, r3
 8001d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e58 <DrawInfoPage+0x134>)
 8001d5c:	889b      	ldrh	r3, [r3, #4]
 8001d5e:	b21a      	sxth	r2, r3
			queueSelectButton.h, COLOR_BLACK);
 8001d60:	4b3d      	ldr	r3, [pc, #244]	@ (8001e58 <DrawInfoPage+0x134>)
 8001d62:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(queueSelectButton.x, queueSelectButton.y, queueSelectButton.w,
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	2400      	movs	r4, #0
 8001d68:	9400      	str	r4, [sp, #0]
 8001d6a:	f7fe ff45 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(queueSelectButton.x + 10, queueSelectButton.y + 10);
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e58 <DrawInfoPage+0x134>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	330a      	adds	r3, #10
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b38      	ldr	r3, [pc, #224]	@ (8001e58 <DrawInfoPage+0x134>)
 8001d78:	885b      	ldrh	r3, [r3, #2]
 8001d7a:	330a      	adds	r3, #10
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4610      	mov	r0, r2
 8001d82:	f7ff f949 	bl	8001018 <lcdSetCursor>
	lcdPrintf(queueSelectButton.label);
 8001d86:	4835      	ldr	r0, [pc, #212]	@ (8001e5c <DrawInfoPage+0x138>)
 8001d88:	f7ff f82a 	bl	8000de0 <lcdPrintf>

	//Draw "Select" button
	lcdDrawRect(selectButton.x, selectButton.y, selectButton.w, selectButton.h,
 8001d8c:	4b34      	ldr	r3, [pc, #208]	@ (8001e60 <DrawInfoPage+0x13c>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b218      	sxth	r0, r3
 8001d92:	4b33      	ldr	r3, [pc, #204]	@ (8001e60 <DrawInfoPage+0x13c>)
 8001d94:	885b      	ldrh	r3, [r3, #2]
 8001d96:	b219      	sxth	r1, r3
 8001d98:	4b31      	ldr	r3, [pc, #196]	@ (8001e60 <DrawInfoPage+0x13c>)
 8001d9a:	889b      	ldrh	r3, [r3, #4]
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	4b30      	ldr	r3, [pc, #192]	@ (8001e60 <DrawInfoPage+0x13c>)
 8001da0:	88db      	ldrh	r3, [r3, #6]
 8001da2:	b21b      	sxth	r3, r3
 8001da4:	2400      	movs	r4, #0
 8001da6:	9400      	str	r4, [sp, #0]
 8001da8:	f7fe ff26 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(selectButton.x + 10, selectButton.y + 10);
 8001dac:	4b2c      	ldr	r3, [pc, #176]	@ (8001e60 <DrawInfoPage+0x13c>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	330a      	adds	r3, #10
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e60 <DrawInfoPage+0x13c>)
 8001db6:	885b      	ldrh	r3, [r3, #2]
 8001db8:	330a      	adds	r3, #10
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	f7ff f92a 	bl	8001018 <lcdSetCursor>
	lcdPrintf(selectButton.label);
 8001dc4:	4827      	ldr	r0, [pc, #156]	@ (8001e64 <DrawInfoPage+0x140>)
 8001dc6:	f7ff f80b 	bl	8000de0 <lcdPrintf>

	//Draw "Delete" button
	lcdDrawRect(deleteButton.x, deleteButton.y, deleteButton.w, deleteButton.h,
 8001dca:	4b27      	ldr	r3, [pc, #156]	@ (8001e68 <DrawInfoPage+0x144>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	b218      	sxth	r0, r3
 8001dd0:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <DrawInfoPage+0x144>)
 8001dd2:	885b      	ldrh	r3, [r3, #2]
 8001dd4:	b219      	sxth	r1, r3
 8001dd6:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <DrawInfoPage+0x144>)
 8001dd8:	889b      	ldrh	r3, [r3, #4]
 8001dda:	b21a      	sxth	r2, r3
 8001ddc:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <DrawInfoPage+0x144>)
 8001dde:	88db      	ldrh	r3, [r3, #6]
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	2400      	movs	r4, #0
 8001de4:	9400      	str	r4, [sp, #0]
 8001de6:	f7fe ff07 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(deleteButton.x + 10, deleteButton.y + 10);
 8001dea:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <DrawInfoPage+0x144>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	330a      	adds	r3, #10
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <DrawInfoPage+0x144>)
 8001df4:	885b      	ldrh	r3, [r3, #2]
 8001df6:	330a      	adds	r3, #10
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f7ff f90b 	bl	8001018 <lcdSetCursor>
	lcdPrintf(deleteButton.label);
 8001e02:	481a      	ldr	r0, [pc, #104]	@ (8001e6c <DrawInfoPage+0x148>)
 8001e04:	f7fe ffec 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <DrawInfoPage+0x14c>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b218      	sxth	r0, r3
 8001e0e:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <DrawInfoPage+0x14c>)
 8001e10:	885b      	ldrh	r3, [r3, #2]
 8001e12:	b219      	sxth	r1, r3
 8001e14:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <DrawInfoPage+0x14c>)
 8001e16:	889b      	ldrh	r3, [r3, #4]
 8001e18:	b21a      	sxth	r2, r3
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <DrawInfoPage+0x14c>)
 8001e1c:	88db      	ldrh	r3, [r3, #6]
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	2400      	movs	r4, #0
 8001e22:	9400      	str	r4, [sp, #0]
 8001e24:	f7fe fee8 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <DrawInfoPage+0x14c>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	330a      	adds	r3, #10
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <DrawInfoPage+0x14c>)
 8001e32:	885b      	ldrh	r3, [r3, #2]
 8001e34:	330a      	adds	r3, #10
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	f7ff f8ec 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8001e40:	480c      	ldr	r0, [pc, #48]	@ (8001e74 <DrawInfoPage+0x150>)
 8001e42:	f7fe ffcd 	bl	8000de0 <lcdPrintf>
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd90      	pop	{r4, r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000010 	.word	0x20000010
 8001e54:	20000008 	.word	0x20000008
 8001e58:	20000134 	.word	0x20000134
 8001e5c:	2000013c 	.word	0x2000013c
 8001e60:	20000160 	.word	0x20000160
 8001e64:	20000168 	.word	0x20000168
 8001e68:	2000018c 	.word	0x2000018c
 8001e6c:	20000194 	.word	0x20000194
 8001e70:	200001b8 	.word	0x200001b8
 8001e74:	200001c0 	.word	0x200001c0

08001e78 <DrawConfirmationPage>:

void DrawConfirmationPage(uint32_t sector, uint32_t offset) {
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
	lcdFillRGB(COLOR_WHITE);
 8001e82:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e86:	f7fe fdd3 	bl	8000a30 <lcdFillRGB>

	//display confirmation text
	lcdSetCursor(10, 10);
 8001e8a:	210a      	movs	r1, #10
 8001e8c:	200a      	movs	r0, #10
 8001e8e:	f7ff f8c3 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8001e92:	482c      	ldr	r0, [pc, #176]	@ (8001f44 <DrawConfirmationPage+0xcc>)
 8001e94:	f7ff f830 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf("Delete: ");
 8001e98:	482b      	ldr	r0, [pc, #172]	@ (8001f48 <DrawConfirmationPage+0xd0>)
 8001e9a:	f7fe ffa1 	bl	8000de0 <lcdPrintf>
	lcdPrintf(buttons[offset].label);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	222a      	movs	r2, #42	@ 0x2a
 8001ea2:	fb02 f303 	mul.w	r3, r2, r3
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	4a28      	ldr	r2, [pc, #160]	@ (8001f4c <DrawConfirmationPage+0xd4>)
 8001eaa:	4413      	add	r3, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe ff97 	bl	8000de0 <lcdPrintf>
	lcdPrintf("?");
 8001eb2:	4827      	ldr	r0, [pc, #156]	@ (8001f50 <DrawConfirmationPage+0xd8>)
 8001eb4:	f7fe ff94 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001eb8:	4826      	ldr	r0, [pc, #152]	@ (8001f54 <DrawConfirmationPage+0xdc>)
 8001eba:	f7ff f81d 	bl	8000ef8 <lcdSetTextFont>

	//Draw "Confirm" button
	lcdDrawRect(confirmButton.x, confirmButton.y, confirmButton.w,
 8001ebe:	4b26      	ldr	r3, [pc, #152]	@ (8001f58 <DrawConfirmationPage+0xe0>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b218      	sxth	r0, r3
 8001ec4:	4b24      	ldr	r3, [pc, #144]	@ (8001f58 <DrawConfirmationPage+0xe0>)
 8001ec6:	885b      	ldrh	r3, [r3, #2]
 8001ec8:	b219      	sxth	r1, r3
 8001eca:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <DrawConfirmationPage+0xe0>)
 8001ecc:	889b      	ldrh	r3, [r3, #4]
 8001ece:	b21a      	sxth	r2, r3
			confirmButton.h, COLOR_BLACK);
 8001ed0:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <DrawConfirmationPage+0xe0>)
 8001ed2:	88db      	ldrh	r3, [r3, #6]
	lcdDrawRect(confirmButton.x, confirmButton.y, confirmButton.w,
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	9400      	str	r4, [sp, #0]
 8001eda:	f7fe fe8d 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(confirmButton.x + 10, confirmButton.y + 10);
 8001ede:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <DrawConfirmationPage+0xe0>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	330a      	adds	r3, #10
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <DrawConfirmationPage+0xe0>)
 8001ee8:	885b      	ldrh	r3, [r3, #2]
 8001eea:	330a      	adds	r3, #10
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	f7ff f891 	bl	8001018 <lcdSetCursor>
	lcdPrintf(confirmButton.label);
 8001ef6:	4819      	ldr	r0, [pc, #100]	@ (8001f5c <DrawConfirmationPage+0xe4>)
 8001ef8:	f7fe ff72 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8001efc:	4b18      	ldr	r3, [pc, #96]	@ (8001f60 <DrawConfirmationPage+0xe8>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	b218      	sxth	r0, r3
 8001f02:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <DrawConfirmationPage+0xe8>)
 8001f04:	885b      	ldrh	r3, [r3, #2]
 8001f06:	b219      	sxth	r1, r3
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <DrawConfirmationPage+0xe8>)
 8001f0a:	889b      	ldrh	r3, [r3, #4]
 8001f0c:	b21a      	sxth	r2, r3
 8001f0e:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <DrawConfirmationPage+0xe8>)
 8001f10:	88db      	ldrh	r3, [r3, #6]
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	2400      	movs	r4, #0
 8001f16:	9400      	str	r4, [sp, #0]
 8001f18:	f7fe fe6e 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 8001f1c:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <DrawConfirmationPage+0xe8>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	330a      	adds	r3, #10
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <DrawConfirmationPage+0xe8>)
 8001f26:	885b      	ldrh	r3, [r3, #2]
 8001f28:	330a      	adds	r3, #10
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4610      	mov	r0, r2
 8001f30:	f7ff f872 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 8001f34:	480b      	ldr	r0, [pc, #44]	@ (8001f64 <DrawConfirmationPage+0xec>)
 8001f36:	f7fe ff53 	bl	8000de0 <lcdPrintf>
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd90      	pop	{r4, r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000010 	.word	0x20000010
 8001f48:	0800f49c 	.word	0x0800f49c
 8001f4c:	20000030 	.word	0x20000030
 8001f50:	0800f4a8 	.word	0x0800f4a8
 8001f54:	20000008 	.word	0x20000008
 8001f58:	20000108 	.word	0x20000108
 8001f5c:	20000110 	.word	0x20000110
 8001f60:	200001b8 	.word	0x200001b8
 8001f64:	200001c0 	.word	0x200001c0

08001f68 <DrawQueuePage>:

void DrawQueuePage(uint8_t queueSize) {
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b093      	sub	sp, #76	@ 0x4c
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
	lcdFillRGB(COLOR_WHITE);
 8001f72:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f76:	f7fe fd5b 	bl	8000a30 <lcdFillRGB>
	char pageTitle[20] = "";
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
 8001f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Queue Size: %d", queueSize);
 8001f8c:	79fa      	ldrb	r2, [r7, #7]
 8001f8e:	f107 0320 	add.w	r3, r7, #32
 8001f92:	495e      	ldr	r1, [pc, #376]	@ (800210c <DrawQueuePage+0x1a4>)
 8001f94:	4618      	mov	r0, r3
 8001f96:	f00c fa81 	bl	800e49c <siprintf>
	//Display Queue at top of the screen
	lcdSetCursor(60, 10);
 8001f9a:	210a      	movs	r1, #10
 8001f9c:	203c      	movs	r0, #60	@ 0x3c
 8001f9e:	f7ff f83b 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 8001fa2:	485b      	ldr	r0, [pc, #364]	@ (8002110 <DrawQueuePage+0x1a8>)
 8001fa4:	f7fe ffa8 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf(pageTitle);
 8001fa8:	f107 0320 	add.w	r3, r7, #32
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe ff17 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 8001fb2:	4858      	ldr	r0, [pc, #352]	@ (8002114 <DrawQueuePage+0x1ac>)
 8001fb4:	f7fe ffa0 	bl	8000ef8 <lcdSetTextFont>

	//display protocols in queue here
	char format[20] = "";
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
	int startSpotX, startSpotY;
	for (uint8_t i = 0; i < queueSize; i++) {
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001fd0:	e055      	b.n	800207e <DrawQueuePage+0x116>
		if (i < 5) {
 8001fd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d804      	bhi.n	8001fe4 <DrawQueuePage+0x7c>
			startSpotX = 10;
 8001fda:	230a      	movs	r3, #10
 8001fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
			startSpotY = 50;
 8001fde:	2332      	movs	r3, #50	@ 0x32
 8001fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fe2:	e004      	b.n	8001fee <DrawQueuePage+0x86>
		} else {
			startSpotX = 160;
 8001fe4:	23a0      	movs	r3, #160	@ 0xa0
 8001fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			startSpotY = 50 - 100;	//convoluted ik
 8001fe8:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8001fec:	63bb      	str	r3, [r7, #56]	@ 0x38
		}
		sprintf(format, "%d.) ", i + 1);
 8001fee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	4947      	ldr	r1, [pc, #284]	@ (8002118 <DrawQueuePage+0x1b0>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f00c fa4e 	bl	800e49c <siprintf>
		lcdSetCursor(startSpotX, startSpotY + i * 20);
 8002000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002002:	b298      	uxth	r0, r3
 8002004:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002008:	b29b      	uxth	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	0092      	lsls	r2, r2, #2
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	b29a      	uxth	r2, r3
 8002014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002016:	b29b      	uxth	r3, r3
 8002018:	4413      	add	r3, r2
 800201a:	b29b      	uxth	r3, r3
 800201c:	4619      	mov	r1, r3
 800201e:	f7fe fffb 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font12);
 8002022:	483e      	ldr	r0, [pc, #248]	@ (800211c <DrawQueuePage+0x1b4>)
 8002024:	f7fe ff68 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(format);
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fed7 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 8002032:	4838      	ldr	r0, [pc, #224]	@ (8002114 <DrawQueuePage+0x1ac>)
 8002034:	f7fe ff60 	bl	8000ef8 <lcdSetTextFont>
		lcdSetCursor(startSpotX + 24, startSpotY + i * 20);
 8002038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800203a:	b29b      	uxth	r3, r3
 800203c:	3318      	adds	r3, #24
 800203e:	b298      	uxth	r0, r3
 8002040:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002044:	b29b      	uxth	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	0092      	lsls	r2, r2, #2
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	b29a      	uxth	r2, r3
 8002050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002052:	b29b      	uxth	r3, r3
 8002054:	4413      	add	r3, r2
 8002056:	b29b      	uxth	r3, r3
 8002058:	4619      	mov	r1, r3
 800205a:	f7fe ffdd 	bl	8001018 <lcdSetCursor>
		lcdPrintf(queueBuffer[i][0]);
 800205e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002062:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	4a2d      	ldr	r2, [pc, #180]	@ (8002120 <DrawQueuePage+0x1b8>)
 800206c:	4413      	add	r3, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe feb6 	bl	8000de0 <lcdPrintf>
	for (uint8_t i = 0; i < queueSize; i++) {
 8002074:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002078:	3301      	adds	r3, #1
 800207a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800207e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	429a      	cmp	r2, r3
 8002086:	d3a4      	bcc.n	8001fd2 <DrawQueuePage+0x6a>

	}

	//Draw "Run" button
	lcdDrawRect(runButton.x, runButton.y, runButton.w, runButton.h,
 8002088:	4b26      	ldr	r3, [pc, #152]	@ (8002124 <DrawQueuePage+0x1bc>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b218      	sxth	r0, r3
 800208e:	4b25      	ldr	r3, [pc, #148]	@ (8002124 <DrawQueuePage+0x1bc>)
 8002090:	885b      	ldrh	r3, [r3, #2]
 8002092:	b219      	sxth	r1, r3
 8002094:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <DrawQueuePage+0x1bc>)
 8002096:	889b      	ldrh	r3, [r3, #4]
 8002098:	b21a      	sxth	r2, r3
 800209a:	4b22      	ldr	r3, [pc, #136]	@ (8002124 <DrawQueuePage+0x1bc>)
 800209c:	88db      	ldrh	r3, [r3, #6]
 800209e:	b21b      	sxth	r3, r3
 80020a0:	2400      	movs	r4, #0
 80020a2:	9400      	str	r4, [sp, #0]
 80020a4:	f7fe fda8 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(runButton.x + 10, runButton.y + 10);
 80020a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002124 <DrawQueuePage+0x1bc>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	330a      	adds	r3, #10
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002124 <DrawQueuePage+0x1bc>)
 80020b2:	885b      	ldrh	r3, [r3, #2]
 80020b4:	330a      	adds	r3, #10
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f7fe ffac 	bl	8001018 <lcdSetCursor>
	lcdPrintf(runButton.label);
 80020c0:	4819      	ldr	r0, [pc, #100]	@ (8002128 <DrawQueuePage+0x1c0>)
 80020c2:	f7fe fe8d 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 80020c6:	4b19      	ldr	r3, [pc, #100]	@ (800212c <DrawQueuePage+0x1c4>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b218      	sxth	r0, r3
 80020cc:	4b17      	ldr	r3, [pc, #92]	@ (800212c <DrawQueuePage+0x1c4>)
 80020ce:	885b      	ldrh	r3, [r3, #2]
 80020d0:	b219      	sxth	r1, r3
 80020d2:	4b16      	ldr	r3, [pc, #88]	@ (800212c <DrawQueuePage+0x1c4>)
 80020d4:	889b      	ldrh	r3, [r3, #4]
 80020d6:	b21a      	sxth	r2, r3
 80020d8:	4b14      	ldr	r3, [pc, #80]	@ (800212c <DrawQueuePage+0x1c4>)
 80020da:	88db      	ldrh	r3, [r3, #6]
 80020dc:	b21b      	sxth	r3, r3
 80020de:	2400      	movs	r4, #0
 80020e0:	9400      	str	r4, [sp, #0]
 80020e2:	f7fe fd89 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 80020e6:	4b11      	ldr	r3, [pc, #68]	@ (800212c <DrawQueuePage+0x1c4>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	330a      	adds	r3, #10
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <DrawQueuePage+0x1c4>)
 80020f0:	885b      	ldrh	r3, [r3, #2]
 80020f2:	330a      	adds	r3, #10
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	4619      	mov	r1, r3
 80020f8:	4610      	mov	r0, r2
 80020fa:	f7fe ff8d 	bl	8001018 <lcdSetCursor>
	lcdPrintf(backButton.label);
 80020fe:	480c      	ldr	r0, [pc, #48]	@ (8002130 <DrawQueuePage+0x1c8>)
 8002100:	f7fe fe6e 	bl	8000de0 <lcdPrintf>
}
 8002104:	bf00      	nop
 8002106:	3744      	adds	r7, #68	@ 0x44
 8002108:	46bd      	mov	sp, r7
 800210a:	bd90      	pop	{r4, r7, pc}
 800210c:	0800f4ac 	.word	0x0800f4ac
 8002110:	20000010 	.word	0x20000010
 8002114:	20000008 	.word	0x20000008
 8002118:	0800f4bc 	.word	0x0800f4bc
 800211c:	20000000 	.word	0x20000000
 8002120:	2000056c 	.word	0x2000056c
 8002124:	200000dc 	.word	0x200000dc
 8002128:	200000e4 	.word	0x200000e4
 800212c:	200001b8 	.word	0x200001b8
 8002130:	200001c0 	.word	0x200001c0

08002134 <DrawProgressPage>:

void DrawProgressPage(uint8_t rx_byte, char *rx_data) {
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b0c1      	sub	sp, #260	@ 0x104
 8002138:	af02      	add	r7, sp, #8
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
	lcdFillRGB(COLOR_WHITE);
 8002140:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002144:	f7fe fc74 	bl	8000a30 <lcdFillRGB>

	//Draw "Progress" box
	lcdSetCursor(80, 10);
 8002148:	210a      	movs	r1, #10
 800214a:	2050      	movs	r0, #80	@ 0x50
 800214c:	f7fe ff64 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Progress Page");
 8002150:	48c3      	ldr	r0, [pc, #780]	@ (8002460 <DrawProgressPage+0x32c>)
 8002152:	f7fe fe45 	bl	8000de0 <lcdPrintf>

	//bind
	if (rx_byte == 'B') {
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2b42      	cmp	r3, #66	@ 0x42
 800215a:	f040 80a5 	bne.w	80022a8 <DrawProgressPage+0x174>
		//protocol type
		char protocolType[20] = "";
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002164:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Bind");
 8002172:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002176:	49bb      	ldr	r1, [pc, #748]	@ (8002464 <DrawProgressPage+0x330>)
 8002178:	4618      	mov	r0, r3
 800217a:	f00c f98f 	bl	800e49c <siprintf>
		lcdSetCursor(60, 30);
 800217e:	211e      	movs	r1, #30
 8002180:	203c      	movs	r0, #60	@ 0x3c
 8002182:	f7fe ff49 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font20);
 8002186:	48b8      	ldr	r0, [pc, #736]	@ (8002468 <DrawProgressPage+0x334>)
 8002188:	f7fe feb6 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 800218c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe fe25 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 8002196:	48b5      	ldr	r0, [pc, #724]	@ (800246c <DrawProgressPage+0x338>)
 8002198:	f7fe feae 	bl	8000ef8 <lcdSetTextFont>
		//speed
		char speed[20] = "";
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80021a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
		sprintf(speed, "Speed: %c", rx_data[1]);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80021bc:	49ac      	ldr	r1, [pc, #688]	@ (8002470 <DrawProgressPage+0x33c>)
 80021be:	4618      	mov	r0, r3
 80021c0:	f00c f96c 	bl	800e49c <siprintf>
		lcdSetCursor(60, 50);
 80021c4:	2132      	movs	r1, #50	@ 0x32
 80021c6:	203c      	movs	r0, #60	@ 0x3c
 80021c8:	f7fe ff26 	bl	8001018 <lcdSetCursor>
		lcdPrintf(speed);
 80021cc:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fe05 	bl	8000de0 <lcdPrintf>
		//duration
		char duration[20] = "";
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80021dc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
		sprintf(duration, "Duration: %c%c", rx_data[2], rx_data[3]);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	3302      	adds	r3, #2
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	3303      	adds	r3, #3
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 80021fc:	499d      	ldr	r1, [pc, #628]	@ (8002474 <DrawProgressPage+0x340>)
 80021fe:	f00c f94d 	bl	800e49c <siprintf>
		lcdSetCursor(60, 70);
 8002202:	2146      	movs	r1, #70	@ 0x46
 8002204:	203c      	movs	r0, #60	@ 0x3c
 8002206:	f7fe ff07 	bl	8001018 <lcdSetCursor>
		lcdPrintf(duration);
 800220a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fde6 	bl	8000de0 <lcdPrintf>
		//volume
		char volume[20] = "";
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800221a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
		sprintf(volume, "Volume: %c%c%c", rx_data[4], rx_data[5], rx_data[6]);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	3304      	adds	r3, #4
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	3305      	adds	r3, #5
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	3306      	adds	r3, #6
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	460b      	mov	r3, r1
 8002246:	498c      	ldr	r1, [pc, #560]	@ (8002478 <DrawProgressPage+0x344>)
 8002248:	f00c f928 	bl	800e49c <siprintf>
		lcdSetCursor(60, 90);
 800224c:	215a      	movs	r1, #90	@ 0x5a
 800224e:	203c      	movs	r0, #60	@ 0x3c
 8002250:	f7fe fee2 	bl	8001018 <lcdSetCursor>
		lcdPrintf(volume);
 8002254:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fdc1 	bl	8000de0 <lcdPrintf>
		//depth
		char depth[20] = "";
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002264:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
		sprintf(depth, "Depth: %c%c%c", rx_data[7], rx_data[8], rx_data[9]);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	3307      	adds	r3, #7
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	3308      	adds	r3, #8
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	3309      	adds	r3, #9
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	460b      	mov	r3, r1
 8002290:	497a      	ldr	r1, [pc, #488]	@ (800247c <DrawProgressPage+0x348>)
 8002292:	f00c f903 	bl	800e49c <siprintf>
		lcdSetCursor(60, 110);
 8002296:	216e      	movs	r1, #110	@ 0x6e
 8002298:	203c      	movs	r0, #60	@ 0x3c
 800229a:	f7fe febd 	bl	8001018 <lcdSetCursor>
		lcdPrintf(depth);
 800229e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fd9c 	bl	8000de0 <lcdPrintf>
	}

	//pause
	if (rx_byte == 'P') {
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	2b50      	cmp	r3, #80	@ 0x50
 80022ac:	d13a      	bne.n	8002324 <DrawProgressPage+0x1f0>
		char protocolType[20] = "";
 80022ae:	2300      	movs	r3, #0
 80022b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80022b4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Pause");
 80022c2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80022c6:	496e      	ldr	r1, [pc, #440]	@ (8002480 <DrawProgressPage+0x34c>)
 80022c8:	4618      	mov	r0, r3
 80022ca:	f00c f8e7 	bl	800e49c <siprintf>
		lcdSetCursor(60, 30);
 80022ce:	211e      	movs	r1, #30
 80022d0:	203c      	movs	r0, #60	@ 0x3c
 80022d2:	f7fe fea1 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font20);
 80022d6:	4864      	ldr	r0, [pc, #400]	@ (8002468 <DrawProgressPage+0x334>)
 80022d8:	f7fe fe0e 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 80022dc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fd7d 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 80022e6:	4861      	ldr	r0, [pc, #388]	@ (800246c <DrawProgressPage+0x338>)
 80022e8:	f7fe fe06 	bl	8000ef8 <lcdSetTextFont>
		//duration
		char duration[20] = "";
 80022ec:	2300      	movs	r3, #0
 80022ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022f0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
		sprintf(duration, "Duration: %c", rx_data[1]);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800230a:	495e      	ldr	r1, [pc, #376]	@ (8002484 <DrawProgressPage+0x350>)
 800230c:	4618      	mov	r0, r3
 800230e:	f00c f8c5 	bl	800e49c <siprintf>
		lcdSetCursor(60, 50);
 8002312:	2132      	movs	r1, #50	@ 0x32
 8002314:	203c      	movs	r0, #60	@ 0x3c
 8002316:	f7fe fe7f 	bl	8001018 <lcdSetCursor>
		lcdPrintf(duration);
 800231a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fd5e 	bl	8000de0 <lcdPrintf>
	}

	//move
	if (rx_byte == 'M') {
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	2b4d      	cmp	r3, #77	@ 0x4d
 8002328:	f040 8096 	bne.w	8002458 <DrawProgressPage+0x324>
		char protocolType[20] = "";
 800232c:	2300      	movs	r3, #0
 800232e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002330:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
		sprintf(protocolType, "Magnetize");
 800233e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002342:	4951      	ldr	r1, [pc, #324]	@ (8002488 <DrawProgressPage+0x354>)
 8002344:	4618      	mov	r0, r3
 8002346:	f00c f8a9 	bl	800e49c <siprintf>
		lcdSetCursor(60, 30);
 800234a:	211e      	movs	r1, #30
 800234c:	203c      	movs	r0, #60	@ 0x3c
 800234e:	f7fe fe63 	bl	8001018 <lcdSetCursor>
		lcdSetTextFont(&Font20);
 8002352:	4845      	ldr	r0, [pc, #276]	@ (8002468 <DrawProgressPage+0x334>)
 8002354:	f7fe fdd0 	bl	8000ef8 <lcdSetTextFont>
		lcdPrintf(protocolType);
 8002358:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fd3f 	bl	8000de0 <lcdPrintf>
		lcdSetTextFont(&Font16);
 8002362:	4842      	ldr	r0, [pc, #264]	@ (800246c <DrawProgressPage+0x338>)
 8002364:	f7fe fdc8 	bl	8000ef8 <lcdSetTextFont>
		//init surface time
		char initTime[20] = "";
 8002368:	2300      	movs	r3, #0
 800236a:	647b      	str	r3, [r7, #68]	@ 0x44
 800236c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
		sprintf(initTime, "Init Time: %c%c%c", rx_data[1], rx_data[2], rx_data[3]);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	3301      	adds	r3, #1
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	3302      	adds	r3, #2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	3303      	adds	r3, #3
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	460b      	mov	r3, r1
 8002398:	493c      	ldr	r1, [pc, #240]	@ (800248c <DrawProgressPage+0x358>)
 800239a:	f00c f87f 	bl	800e49c <siprintf>
		lcdSetCursor(60, 50);
 800239e:	2132      	movs	r1, #50	@ 0x32
 80023a0:	203c      	movs	r0, #60	@ 0x3c
 80023a2:	f7fe fe39 	bl	8001018 <lcdSetCursor>
		lcdPrintf(initTime);
 80023a6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fd18 	bl	8000de0 <lcdPrintf>
		//speed
		char speed[20] = "";
 80023b0:	2300      	movs	r3, #0
 80023b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80023b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
		sprintf(speed, "Speed: %c", rx_data[4]);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	3304      	adds	r3, #4
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023ce:	4928      	ldr	r1, [pc, #160]	@ (8002470 <DrawProgressPage+0x33c>)
 80023d0:	4618      	mov	r0, r3
 80023d2:	f00c f863 	bl	800e49c <siprintf>
		lcdSetCursor(60, 70);
 80023d6:	2146      	movs	r1, #70	@ 0x46
 80023d8:	203c      	movs	r0, #60	@ 0x3c
 80023da:	f7fe fe1d 	bl	8001018 <lcdSetCursor>
		lcdPrintf(speed);
 80023de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fcfc 	bl	8000de0 <lcdPrintf>
		//Stop at Sequences
		char stopNumber[20] = "";
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	f107 0320 	add.w	r3, r7, #32
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
		sprintf(stopNumber, "Stop Number: %c", rx_data[5]);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	3305      	adds	r3, #5
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	f107 031c 	add.w	r3, r7, #28
 8002406:	4922      	ldr	r1, [pc, #136]	@ (8002490 <DrawProgressPage+0x35c>)
 8002408:	4618      	mov	r0, r3
 800240a:	f00c f847 	bl	800e49c <siprintf>
		lcdSetCursor(60, 90);
 800240e:	215a      	movs	r1, #90	@ 0x5a
 8002410:	203c      	movs	r0, #60	@ 0x3c
 8002412:	f7fe fe01 	bl	8001018 <lcdSetCursor>
		lcdPrintf(stopNumber);
 8002416:	f107 031c 	add.w	r3, r7, #28
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fce0 	bl	8000de0 <lcdPrintf>
		//Sequence Pause Time
		char sequencePause[20] = "";
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
		sprintf(sequencePause, "Sequence Pause: %c", rx_data[6]);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	3306      	adds	r3, #6
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	f107 0308 	add.w	r3, r7, #8
 800243e:	4915      	ldr	r1, [pc, #84]	@ (8002494 <DrawProgressPage+0x360>)
 8002440:	4618      	mov	r0, r3
 8002442:	f00c f82b 	bl	800e49c <siprintf>
		lcdSetCursor(60, 110);
 8002446:	216e      	movs	r1, #110	@ 0x6e
 8002448:	203c      	movs	r0, #60	@ 0x3c
 800244a:	f7fe fde5 	bl	8001018 <lcdSetCursor>
		lcdPrintf(sequencePause);
 800244e:	f107 0308 	add.w	r3, r7, #8
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fcc4 	bl	8000de0 <lcdPrintf>
	}

	// Draw "Stop" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 8002458:	4b0f      	ldr	r3, [pc, #60]	@ (8002498 <DrawProgressPage+0x364>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	e01e      	b.n	800249c <DrawProgressPage+0x368>
 800245e:	bf00      	nop
 8002460:	0800f4c4 	.word	0x0800f4c4
 8002464:	0800f4d4 	.word	0x0800f4d4
 8002468:	20000010 	.word	0x20000010
 800246c:	20000008 	.word	0x20000008
 8002470:	0800f4dc 	.word	0x0800f4dc
 8002474:	0800f4e8 	.word	0x0800f4e8
 8002478:	0800f4f8 	.word	0x0800f4f8
 800247c:	0800f508 	.word	0x0800f508
 8002480:	0800f518 	.word	0x0800f518
 8002484:	0800f520 	.word	0x0800f520
 8002488:	0800f530 	.word	0x0800f530
 800248c:	0800f53c 	.word	0x0800f53c
 8002490:	0800f550 	.word	0x0800f550
 8002494:	0800f560 	.word	0x0800f560
 8002498:	200001b8 	.word	0x200001b8
 800249c:	b218      	sxth	r0, r3
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <DrawProgressPage+0x3ac>)
 80024a0:	885b      	ldrh	r3, [r3, #2]
 80024a2:	b219      	sxth	r1, r3
 80024a4:	4b0e      	ldr	r3, [pc, #56]	@ (80024e0 <DrawProgressPage+0x3ac>)
 80024a6:	889b      	ldrh	r3, [r3, #4]
 80024a8:	b21a      	sxth	r2, r3
 80024aa:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <DrawProgressPage+0x3ac>)
 80024ac:	88db      	ldrh	r3, [r3, #6]
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	2400      	movs	r4, #0
 80024b2:	9400      	str	r4, [sp, #0]
 80024b4:	f7fe fba0 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 80024b8:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <DrawProgressPage+0x3ac>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	330a      	adds	r3, #10
 80024be:	b29a      	uxth	r2, r3
 80024c0:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <DrawProgressPage+0x3ac>)
 80024c2:	885b      	ldrh	r3, [r3, #2]
 80024c4:	330a      	adds	r3, #10
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	4619      	mov	r1, r3
 80024ca:	4610      	mov	r0, r2
 80024cc:	f7fe fda4 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Stop");
 80024d0:	4804      	ldr	r0, [pc, #16]	@ (80024e4 <DrawProgressPage+0x3b0>)
 80024d2:	f7fe fc85 	bl	8000de0 <lcdPrintf>
}
 80024d6:	bf00      	nop
 80024d8:	37fc      	adds	r7, #252	@ 0xfc
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd90      	pop	{r4, r7, pc}
 80024de:	bf00      	nop
 80024e0:	200001b8 	.word	0x200001b8
 80024e4:	0800f574 	.word	0x0800f574

080024e8 <DrawStopPage>:

void DrawStopPage(void) {
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_WHITE);
 80024ee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80024f2:	f7fe fa9d 	bl	8000a30 <lcdFillRGB>

	//display confirmation text
	lcdSetCursor(100, 10);
 80024f6:	210a      	movs	r1, #10
 80024f8:	2064      	movs	r0, #100	@ 0x64
 80024fa:	f7fe fd8d 	bl	8001018 <lcdSetCursor>
	lcdSetTextFont(&Font20);
 80024fe:	4825      	ldr	r0, [pc, #148]	@ (8002594 <DrawStopPage+0xac>)
 8002500:	f7fe fcfa 	bl	8000ef8 <lcdSetTextFont>
	lcdPrintf("Stop?");
 8002504:	4824      	ldr	r0, [pc, #144]	@ (8002598 <DrawStopPage+0xb0>)
 8002506:	f7fe fc6b 	bl	8000de0 <lcdPrintf>
	lcdSetTextFont(&Font16);
 800250a:	4824      	ldr	r0, [pc, #144]	@ (800259c <DrawStopPage+0xb4>)
 800250c:	f7fe fcf4 	bl	8000ef8 <lcdSetTextFont>

	//Draw "Yes" button
	lcdDrawRect(yesButton.x, yesButton.y, yesButton.w, yesButton.h,
 8002510:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <DrawStopPage+0xb8>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	b218      	sxth	r0, r3
 8002516:	4b22      	ldr	r3, [pc, #136]	@ (80025a0 <DrawStopPage+0xb8>)
 8002518:	885b      	ldrh	r3, [r3, #2]
 800251a:	b219      	sxth	r1, r3
 800251c:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <DrawStopPage+0xb8>)
 800251e:	889b      	ldrh	r3, [r3, #4]
 8002520:	b21a      	sxth	r2, r3
 8002522:	4b1f      	ldr	r3, [pc, #124]	@ (80025a0 <DrawStopPage+0xb8>)
 8002524:	88db      	ldrh	r3, [r3, #6]
 8002526:	b21b      	sxth	r3, r3
 8002528:	2400      	movs	r4, #0
 800252a:	9400      	str	r4, [sp, #0]
 800252c:	f7fe fb64 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(yesButton.x + 10, yesButton.y + 10);
 8002530:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <DrawStopPage+0xb8>)
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	330a      	adds	r3, #10
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <DrawStopPage+0xb8>)
 800253a:	885b      	ldrh	r3, [r3, #2]
 800253c:	330a      	adds	r3, #10
 800253e:	b29b      	uxth	r3, r3
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f7fe fd68 	bl	8001018 <lcdSetCursor>
	lcdPrintf(yesButton.label);
 8002548:	4816      	ldr	r0, [pc, #88]	@ (80025a4 <DrawStopPage+0xbc>)
 800254a:	f7fe fc49 	bl	8000de0 <lcdPrintf>

	//Draw "No" button
	lcdDrawRect(noButton.x, noButton.y, noButton.w, noButton.h, COLOR_BLACK);
 800254e:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <DrawStopPage+0xc0>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b218      	sxth	r0, r3
 8002554:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <DrawStopPage+0xc0>)
 8002556:	885b      	ldrh	r3, [r3, #2]
 8002558:	b219      	sxth	r1, r3
 800255a:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <DrawStopPage+0xc0>)
 800255c:	889b      	ldrh	r3, [r3, #4]
 800255e:	b21a      	sxth	r2, r3
 8002560:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <DrawStopPage+0xc0>)
 8002562:	88db      	ldrh	r3, [r3, #6]
 8002564:	b21b      	sxth	r3, r3
 8002566:	2400      	movs	r4, #0
 8002568:	9400      	str	r4, [sp, #0]
 800256a:	f7fe fb45 	bl	8000bf8 <lcdDrawRect>
	lcdSetCursor(noButton.x + 10, noButton.y + 10);
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <DrawStopPage+0xc0>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	330a      	adds	r3, #10
 8002574:	b29a      	uxth	r2, r3
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <DrawStopPage+0xc0>)
 8002578:	885b      	ldrh	r3, [r3, #2]
 800257a:	330a      	adds	r3, #10
 800257c:	b29b      	uxth	r3, r3
 800257e:	4619      	mov	r1, r3
 8002580:	4610      	mov	r0, r2
 8002582:	f7fe fd49 	bl	8001018 <lcdSetCursor>
	lcdPrintf(noButton.label);
 8002586:	4809      	ldr	r0, [pc, #36]	@ (80025ac <DrawStopPage+0xc4>)
 8002588:	f7fe fc2a 	bl	8000de0 <lcdPrintf>
}
 800258c:	bf00      	nop
 800258e:	3704      	adds	r7, #4
 8002590:	46bd      	mov	sp, r7
 8002592:	bd90      	pop	{r4, r7, pc}
 8002594:	20000010 	.word	0x20000010
 8002598:	0800f57c 	.word	0x0800f57c
 800259c:	20000008 	.word	0x20000008
 80025a0:	20000210 	.word	0x20000210
 80025a4:	20000218 	.word	0x20000218
 80025a8:	2000023c 	.word	0x2000023c
 80025ac:	20000244 	.word	0x20000244

080025b0 <DrawPageFinish>:

void DrawPageFinish(void) {
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_WHITE);
 80025b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80025ba:	f7fe fa39 	bl	8000a30 <lcdFillRGB>

	//Draw "Success!" box
	lcdSetCursor(selectButton.x + 10, selectButton.y + 10);
 80025be:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <DrawPageFinish+0x74>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	330a      	adds	r3, #10
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	4b17      	ldr	r3, [pc, #92]	@ (8002624 <DrawPageFinish+0x74>)
 80025c8:	885b      	ldrh	r3, [r3, #2]
 80025ca:	330a      	adds	r3, #10
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	4619      	mov	r1, r3
 80025d0:	4610      	mov	r0, r2
 80025d2:	f7fe fd21 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Success!");
 80025d6:	4814      	ldr	r0, [pc, #80]	@ (8002628 <DrawPageFinish+0x78>)
 80025d8:	f7fe fc02 	bl	8000de0 <lcdPrintf>

	// Draw "Back" button
	lcdDrawRect(backButton.x, backButton.y, backButton.w, backButton.h,
 80025dc:	4b13      	ldr	r3, [pc, #76]	@ (800262c <DrawPageFinish+0x7c>)
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b218      	sxth	r0, r3
 80025e2:	4b12      	ldr	r3, [pc, #72]	@ (800262c <DrawPageFinish+0x7c>)
 80025e4:	885b      	ldrh	r3, [r3, #2]
 80025e6:	b219      	sxth	r1, r3
 80025e8:	4b10      	ldr	r3, [pc, #64]	@ (800262c <DrawPageFinish+0x7c>)
 80025ea:	889b      	ldrh	r3, [r3, #4]
 80025ec:	b21a      	sxth	r2, r3
 80025ee:	4b0f      	ldr	r3, [pc, #60]	@ (800262c <DrawPageFinish+0x7c>)
 80025f0:	88db      	ldrh	r3, [r3, #6]
 80025f2:	b21b      	sxth	r3, r3
 80025f4:	2400      	movs	r4, #0
 80025f6:	9400      	str	r4, [sp, #0]
 80025f8:	f7fe fafe 	bl	8000bf8 <lcdDrawRect>
	COLOR_BLACK);
	lcdSetCursor(backButton.x + 10, backButton.y + 10);
 80025fc:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <DrawPageFinish+0x7c>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	330a      	adds	r3, #10
 8002602:	b29a      	uxth	r2, r3
 8002604:	4b09      	ldr	r3, [pc, #36]	@ (800262c <DrawPageFinish+0x7c>)
 8002606:	885b      	ldrh	r3, [r3, #2]
 8002608:	330a      	adds	r3, #10
 800260a:	b29b      	uxth	r3, r3
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f7fe fd02 	bl	8001018 <lcdSetCursor>
	lcdPrintf("Done");
 8002614:	4806      	ldr	r0, [pc, #24]	@ (8002630 <DrawPageFinish+0x80>)
 8002616:	f7fe fbe3 	bl	8000de0 <lcdPrintf>
}
 800261a:	bf00      	nop
 800261c:	3704      	adds	r7, #4
 800261e:	46bd      	mov	sp, r7
 8002620:	bd90      	pop	{r4, r7, pc}
 8002622:	bf00      	nop
 8002624:	20000160 	.word	0x20000160
 8002628:	0800f584 	.word	0x0800f584
 800262c:	200001b8 	.word	0x200001b8
 8002630:	0800f590 	.word	0x0800f590

08002634 <handleTouch>:

uint8_t handleTouch() {
 8002634:	b590      	push	{r4, r7, lr}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
	static uint8_t protocol_num;
	static uint8_t protocol_offset = 0;
	uint16_t x = 0, y = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	817b      	strh	r3, [r7, #10]
 800263e:	2300      	movs	r3, #0
 8002640:	813b      	strh	r3, [r7, #8]
	if (!XPT2046_TouchGetCoordinates(&x, &y)) {
 8002642:	f107 0208 	add.w	r2, r7, #8
 8002646:	f107 030a 	add.w	r3, r7, #10
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd ffc7 	bl	80005e0 <XPT2046_TouchGetCoordinates>
 8002652:	4603      	mov	r3, r0
 8002654:	f083 0301 	eor.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <handleTouch+0x2e>
		//printf("failed\n");
		return 0;
 800265e:	2300      	movs	r3, #0
 8002660:	e381      	b.n	8002d66 <handleTouch+0x732>
	}
	//map the x coordinate to be left is 0. also slight offset
	x = (TS_RIGHT - x) - 0;
 8002662:	897b      	ldrh	r3, [r7, #10]
 8002664:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002668:	b29b      	uxth	r3, r3
 800266a:	817b      	strh	r3, [r7, #10]
//	printf("touched\n");
//	printf("%d, %d\n", x, y);

	switch (currentPage) {
 800266c:	4b8e      	ldr	r3, [pc, #568]	@ (80028a8 <handleTouch+0x274>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b06      	cmp	r3, #6
 8002672:	f200 8374 	bhi.w	8002d5e <handleTouch+0x72a>
 8002676:	a201      	add	r2, pc, #4	@ (adr r2, 800267c <handleTouch+0x48>)
 8002678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267c:	08002699 	.word	0x08002699
 8002680:	080028cd 	.word	0x080028cd
 8002684:	08002a49 	.word	0x08002a49
 8002688:	08002b29 	.word	0x08002b29
 800268c:	08002cfb 	.word	0x08002cfb
 8002690:	08002beb 	.word	0x08002beb
 8002694:	08002c5b 	.word	0x08002c5b
	case PAGE_MAIN:
		//next button
		if ((x >= nextButton.x) && (x <= nextButton.x + nextButton.w)
 8002698:	4b84      	ldr	r3, [pc, #528]	@ (80028ac <handleTouch+0x278>)
 800269a:	881a      	ldrh	r2, [r3, #0]
 800269c:	897b      	ldrh	r3, [r7, #10]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d828      	bhi.n	80026f4 <handleTouch+0xc0>
 80026a2:	897b      	ldrh	r3, [r7, #10]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b81      	ldr	r3, [pc, #516]	@ (80028ac <handleTouch+0x278>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4b7f      	ldr	r3, [pc, #508]	@ (80028ac <handleTouch+0x278>)
 80026ae:	889b      	ldrh	r3, [r3, #4]
 80026b0:	440b      	add	r3, r1
 80026b2:	429a      	cmp	r2, r3
 80026b4:	dc1e      	bgt.n	80026f4 <handleTouch+0xc0>
				&& (y >= nextButton.y)
 80026b6:	4b7d      	ldr	r3, [pc, #500]	@ (80028ac <handleTouch+0x278>)
 80026b8:	885a      	ldrh	r2, [r3, #2]
 80026ba:	893b      	ldrh	r3, [r7, #8]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d819      	bhi.n	80026f4 <handleTouch+0xc0>
				&& (y <= nextButton.y + nextButton.h + NEXT_BUTTON_OFFSET)
 80026c0:	893b      	ldrh	r3, [r7, #8]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b79      	ldr	r3, [pc, #484]	@ (80028ac <handleTouch+0x278>)
 80026c6:	885b      	ldrh	r3, [r3, #2]
 80026c8:	4619      	mov	r1, r3
 80026ca:	4b78      	ldr	r3, [pc, #480]	@ (80028ac <handleTouch+0x278>)
 80026cc:	88db      	ldrh	r3, [r3, #6]
 80026ce:	440b      	add	r3, r1
 80026d0:	333c      	adds	r3, #60	@ 0x3c
 80026d2:	429a      	cmp	r2, r3
 80026d4:	dc0e      	bgt.n	80026f4 <handleTouch+0xc0>
				&& (page_num != 10)) {
 80026d6:	4b76      	ldr	r3, [pc, #472]	@ (80028b0 <handleTouch+0x27c>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b0a      	cmp	r3, #10
 80026dc:	d00a      	beq.n	80026f4 <handleTouch+0xc0>
			//printf("touched\n");
			page_num++;
 80026de:	4b74      	ldr	r3, [pc, #464]	@ (80028b0 <handleTouch+0x27c>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4b72      	ldr	r3, [pc, #456]	@ (80028b0 <handleTouch+0x27c>)
 80026e8:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 80026ea:	4b71      	ldr	r3, [pc, #452]	@ (80028b0 <handleTouch+0x27c>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff f93a 	bl	8001968 <DrawMainPage>
		}
		//back button
		if ((x >= backButton.x) && (x <= backButton.x + backButton.w)
 80026f4:	4b6f      	ldr	r3, [pc, #444]	@ (80028b4 <handleTouch+0x280>)
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	897b      	ldrh	r3, [r7, #10]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d828      	bhi.n	8002750 <handleTouch+0x11c>
 80026fe:	897b      	ldrh	r3, [r7, #10]
 8002700:	461a      	mov	r2, r3
 8002702:	4b6c      	ldr	r3, [pc, #432]	@ (80028b4 <handleTouch+0x280>)
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	4619      	mov	r1, r3
 8002708:	4b6a      	ldr	r3, [pc, #424]	@ (80028b4 <handleTouch+0x280>)
 800270a:	889b      	ldrh	r3, [r3, #4]
 800270c:	440b      	add	r3, r1
 800270e:	429a      	cmp	r2, r3
 8002710:	dc1e      	bgt.n	8002750 <handleTouch+0x11c>
				&& (y >= backButton.y)
 8002712:	4b68      	ldr	r3, [pc, #416]	@ (80028b4 <handleTouch+0x280>)
 8002714:	885a      	ldrh	r2, [r3, #2]
 8002716:	893b      	ldrh	r3, [r7, #8]
 8002718:	429a      	cmp	r2, r3
 800271a:	d819      	bhi.n	8002750 <handleTouch+0x11c>
				&& (y <= backButton.y + backButton.h + BACK_BUTTON_OFFSET)
 800271c:	893b      	ldrh	r3, [r7, #8]
 800271e:	461a      	mov	r2, r3
 8002720:	4b64      	ldr	r3, [pc, #400]	@ (80028b4 <handleTouch+0x280>)
 8002722:	885b      	ldrh	r3, [r3, #2]
 8002724:	4619      	mov	r1, r3
 8002726:	4b63      	ldr	r3, [pc, #396]	@ (80028b4 <handleTouch+0x280>)
 8002728:	88db      	ldrh	r3, [r3, #6]
 800272a:	440b      	add	r3, r1
 800272c:	333c      	adds	r3, #60	@ 0x3c
 800272e:	429a      	cmp	r2, r3
 8002730:	dc0e      	bgt.n	8002750 <handleTouch+0x11c>
				&& (page_num != 1)) {
 8002732:	4b5f      	ldr	r3, [pc, #380]	@ (80028b0 <handleTouch+0x27c>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d00a      	beq.n	8002750 <handleTouch+0x11c>
			//printf("touched\n");
			page_num--;
 800273a:	4b5d      	ldr	r3, [pc, #372]	@ (80028b0 <handleTouch+0x27c>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	3b01      	subs	r3, #1
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b5b      	ldr	r3, [pc, #364]	@ (80028b0 <handleTouch+0x27c>)
 8002744:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002746:	4b5a      	ldr	r3, [pc, #360]	@ (80028b0 <handleTouch+0x27c>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff f90c 	bl	8001968 <DrawMainPage>
		}
		//queue button
		if (x >= queueButton.x && x <= (queueButton.x + queueButton.w)
 8002750:	4b59      	ldr	r3, [pc, #356]	@ (80028b8 <handleTouch+0x284>)
 8002752:	881a      	ldrh	r2, [r3, #0]
 8002754:	897b      	ldrh	r3, [r7, #10]
 8002756:	429a      	cmp	r2, r3
 8002758:	d821      	bhi.n	800279e <handleTouch+0x16a>
 800275a:	897b      	ldrh	r3, [r7, #10]
 800275c:	461a      	mov	r2, r3
 800275e:	4b56      	ldr	r3, [pc, #344]	@ (80028b8 <handleTouch+0x284>)
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	4b54      	ldr	r3, [pc, #336]	@ (80028b8 <handleTouch+0x284>)
 8002766:	889b      	ldrh	r3, [r3, #4]
 8002768:	440b      	add	r3, r1
 800276a:	429a      	cmp	r2, r3
 800276c:	dc17      	bgt.n	800279e <handleTouch+0x16a>
				&& y >= queueButton.y
 800276e:	4b52      	ldr	r3, [pc, #328]	@ (80028b8 <handleTouch+0x284>)
 8002770:	885a      	ldrh	r2, [r3, #2]
 8002772:	893b      	ldrh	r3, [r7, #8]
 8002774:	429a      	cmp	r2, r3
 8002776:	d812      	bhi.n	800279e <handleTouch+0x16a>
				&& y <= (queueButton.y + queueButton.h + QUEUE_BUTTON_OFFSET)) {
 8002778:	893b      	ldrh	r3, [r7, #8]
 800277a:	461a      	mov	r2, r3
 800277c:	4b4e      	ldr	r3, [pc, #312]	@ (80028b8 <handleTouch+0x284>)
 800277e:	885b      	ldrh	r3, [r3, #2]
 8002780:	4619      	mov	r1, r3
 8002782:	4b4d      	ldr	r3, [pc, #308]	@ (80028b8 <handleTouch+0x284>)
 8002784:	88db      	ldrh	r3, [r3, #6]
 8002786:	440b      	add	r3, r1
 8002788:	3328      	adds	r3, #40	@ 0x28
 800278a:	429a      	cmp	r2, r3
 800278c:	dc07      	bgt.n	800279e <handleTouch+0x16a>
			DrawQueuePage(queueSize);
 800278e:	4b4b      	ldr	r3, [pc, #300]	@ (80028bc <handleTouch+0x288>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fbe8 	bl	8001f68 <DrawQueuePage>
			currentPage = PAGE_QUEUE;
 8002798:	4b43      	ldr	r3, [pc, #268]	@ (80028a8 <handleTouch+0x274>)
 800279a:	2202      	movs	r2, #2
 800279c:	701a      	strb	r2, [r3, #0]
		}
		//three protocol buttons
		for (int i = 0; i < NUM_BUTTONS; i++) {
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e07c      	b.n	800289e <handleTouch+0x26a>
			if ((x >= buttons[i].x) && (x <= buttons[i].x + buttons[i].w)
 80027a4:	4a46      	ldr	r2, [pc, #280]	@ (80028c0 <handleTouch+0x28c>)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	212a      	movs	r1, #42	@ 0x2a
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	881a      	ldrh	r2, [r3, #0]
 80027b2:	897b      	ldrh	r3, [r7, #10]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d86f      	bhi.n	8002898 <handleTouch+0x264>
 80027b8:	897b      	ldrh	r3, [r7, #10]
 80027ba:	4618      	mov	r0, r3
 80027bc:	4a40      	ldr	r2, [pc, #256]	@ (80028c0 <handleTouch+0x28c>)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	212a      	movs	r1, #42	@ 0x2a
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	461c      	mov	r4, r3
 80027cc:	4a3c      	ldr	r2, [pc, #240]	@ (80028c0 <handleTouch+0x28c>)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	212a      	movs	r1, #42	@ 0x2a
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	3304      	adds	r3, #4
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	4423      	add	r3, r4
 80027de:	4298      	cmp	r0, r3
 80027e0:	dc5a      	bgt.n	8002898 <handleTouch+0x264>
					&& (y >= buttons[i].y - PROTOCOL_BUTTON_OFFSET)
 80027e2:	893b      	ldrh	r3, [r7, #8]
 80027e4:	4618      	mov	r0, r3
 80027e6:	4a36      	ldr	r2, [pc, #216]	@ (80028c0 <handleTouch+0x28c>)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	212a      	movs	r1, #42	@ 0x2a
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	3302      	adds	r3, #2
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	3b14      	subs	r3, #20
 80027f8:	4298      	cmp	r0, r3
 80027fa:	db4d      	blt.n	8002898 <handleTouch+0x264>
					&& (y
							<= buttons[i].y + buttons[i].h
 80027fc:	893b      	ldrh	r3, [r7, #8]
 80027fe:	4618      	mov	r0, r3
 8002800:	4a2f      	ldr	r2, [pc, #188]	@ (80028c0 <handleTouch+0x28c>)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	212a      	movs	r1, #42	@ 0x2a
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	3302      	adds	r3, #2
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	461c      	mov	r4, r3
 8002812:	4a2b      	ldr	r2, [pc, #172]	@ (80028c0 <handleTouch+0x28c>)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	212a      	movs	r1, #42	@ 0x2a
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3306      	adds	r3, #6
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	4423      	add	r3, r4
									+ PROTOCOL_BUTTON_OFFSET)) {
 8002824:	3314      	adds	r3, #20
					&& (y
 8002826:	4298      	cmp	r0, r3
 8002828:	dc36      	bgt.n	8002898 <handleTouch+0x264>
				//check which button has been pressed
				if (i == 0) {
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d106      	bne.n	800283e <handleTouch+0x20a>
					protocol_num = 1;
 8002830:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <handleTouch+0x290>)
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
					protocol_offset = 0;
 8002836:	4b24      	ldr	r3, [pc, #144]	@ (80028c8 <handleTouch+0x294>)
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
 800283c:	e012      	b.n	8002864 <handleTouch+0x230>
				} else if (i == 1) {
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d106      	bne.n	8002852 <handleTouch+0x21e>
					protocol_num = 1;
 8002844:	4b1f      	ldr	r3, [pc, #124]	@ (80028c4 <handleTouch+0x290>)
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
					protocol_offset = 1;
 800284a:	4b1f      	ldr	r3, [pc, #124]	@ (80028c8 <handleTouch+0x294>)
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e008      	b.n	8002864 <handleTouch+0x230>
				} else if (i == 2) {
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d105      	bne.n	8002864 <handleTouch+0x230>
					protocol_num = 1;
 8002858:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <handleTouch+0x290>)
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
					protocol_offset = 2;
 800285e:	4b1a      	ldr	r3, [pc, #104]	@ (80028c8 <handleTouch+0x294>)
 8002860:	2202      	movs	r2, #2
 8002862:	701a      	strb	r2, [r3, #0]
				}
				//dont draw next page if the button says "Empty"
				if (buttons[i].status == NOT_EMPTY) {
 8002864:	4a16      	ldr	r2, [pc, #88]	@ (80028c0 <handleTouch+0x28c>)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	212a      	movs	r1, #42	@ 0x2a
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	3328      	adds	r3, #40	@ 0x28
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d10c      	bne.n	8002892 <handleTouch+0x25e>
					currentPage = PAGE_SELECT;
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <handleTouch+0x274>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
					DrawInfoPage(buttons[i].label);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	222a      	movs	r2, #42	@ 0x2a
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	3308      	adds	r3, #8
 8002888:	4a0d      	ldr	r2, [pc, #52]	@ (80028c0 <handleTouch+0x28c>)
 800288a:	4413      	add	r3, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fa49 	bl	8001d24 <DrawInfoPage>
				}
				HAL_Delay(100); //delay between switch to select page
 8002892:	2064      	movs	r0, #100	@ 0x64
 8002894:	f001 fb72 	bl	8003f7c <HAL_Delay>
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3301      	adds	r3, #1
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	f77f af7f 	ble.w	80027a4 <handleTouch+0x170>
			}
		}
		break;
 80028a6:	e25a      	b.n	8002d5e <handleTouch+0x72a>
 80028a8:	2000054c 	.word	0x2000054c
 80028ac:	200001e4 	.word	0x200001e4
 80028b0:	20000266 	.word	0x20000266
 80028b4:	200001b8 	.word	0x200001b8
 80028b8:	200000b0 	.word	0x200000b0
 80028bc:	2000ff6c 	.word	0x2000ff6c
 80028c0:	20000030 	.word	0x20000030
 80028c4:	20011874 	.word	0x20011874
 80028c8:	20011875 	.word	0x20011875

	case PAGE_SELECT:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 80028cc:	4b8b      	ldr	r3, [pc, #556]	@ (8002afc <handleTouch+0x4c8>)
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	897b      	ldrh	r3, [r7, #10]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d820      	bhi.n	8002918 <handleTouch+0x2e4>
 80028d6:	897b      	ldrh	r3, [r7, #10]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b88      	ldr	r3, [pc, #544]	@ (8002afc <handleTouch+0x4c8>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	4b86      	ldr	r3, [pc, #536]	@ (8002afc <handleTouch+0x4c8>)
 80028e2:	889b      	ldrh	r3, [r3, #4]
 80028e4:	440b      	add	r3, r1
 80028e6:	429a      	cmp	r2, r3
 80028e8:	dc16      	bgt.n	8002918 <handleTouch+0x2e4>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 80028ea:	4b84      	ldr	r3, [pc, #528]	@ (8002afc <handleTouch+0x4c8>)
 80028ec:	885a      	ldrh	r2, [r3, #2]
 80028ee:	893b      	ldrh	r3, [r7, #8]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d811      	bhi.n	8002918 <handleTouch+0x2e4>
 80028f4:	893b      	ldrh	r3, [r7, #8]
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b80      	ldr	r3, [pc, #512]	@ (8002afc <handleTouch+0x4c8>)
 80028fa:	885b      	ldrh	r3, [r3, #2]
 80028fc:	4619      	mov	r1, r3
 80028fe:	4b7f      	ldr	r3, [pc, #508]	@ (8002afc <handleTouch+0x4c8>)
 8002900:	88db      	ldrh	r3, [r3, #6]
 8002902:	440b      	add	r3, r1
 8002904:	429a      	cmp	r2, r3
 8002906:	dc07      	bgt.n	8002918 <handleTouch+0x2e4>
			currentPage = PAGE_MAIN;
 8002908:	4b7d      	ldr	r3, [pc, #500]	@ (8002b00 <handleTouch+0x4cc>)
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 800290e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b04 <handleTouch+0x4d0>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f828 	bl	8001968 <DrawMainPage>
		}
		//queueSelect button
		if (x >= queueSelectButton.x
 8002918:	4b7b      	ldr	r3, [pc, #492]	@ (8002b08 <handleTouch+0x4d4>)
 800291a:	881a      	ldrh	r2, [r3, #0]
 800291c:	897b      	ldrh	r3, [r7, #10]
 800291e:	429a      	cmp	r2, r3
 8002920:	d833      	bhi.n	800298a <handleTouch+0x356>
				&& x <= (queueSelectButton.x + queueSelectButton.w)
 8002922:	897b      	ldrh	r3, [r7, #10]
 8002924:	461a      	mov	r2, r3
 8002926:	4b78      	ldr	r3, [pc, #480]	@ (8002b08 <handleTouch+0x4d4>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	4b76      	ldr	r3, [pc, #472]	@ (8002b08 <handleTouch+0x4d4>)
 800292e:	889b      	ldrh	r3, [r3, #4]
 8002930:	440b      	add	r3, r1
 8002932:	429a      	cmp	r2, r3
 8002934:	dc29      	bgt.n	800298a <handleTouch+0x356>
				&& y >= queueSelectButton.y
 8002936:	4b74      	ldr	r3, [pc, #464]	@ (8002b08 <handleTouch+0x4d4>)
 8002938:	885a      	ldrh	r2, [r3, #2]
 800293a:	893b      	ldrh	r3, [r7, #8]
 800293c:	429a      	cmp	r2, r3
 800293e:	d824      	bhi.n	800298a <handleTouch+0x356>
				&& y <= (queueSelectButton.y + queueSelectButton.h)) {
 8002940:	893b      	ldrh	r3, [r7, #8]
 8002942:	461a      	mov	r2, r3
 8002944:	4b70      	ldr	r3, [pc, #448]	@ (8002b08 <handleTouch+0x4d4>)
 8002946:	885b      	ldrh	r3, [r3, #2]
 8002948:	4619      	mov	r1, r3
 800294a:	4b6f      	ldr	r3, [pc, #444]	@ (8002b08 <handleTouch+0x4d4>)
 800294c:	88db      	ldrh	r3, [r3, #6]
 800294e:	440b      	add	r3, r1
 8002950:	429a      	cmp	r2, r3
 8002952:	dc1a      	bgt.n	800298a <handleTouch+0x356>
			//store the protocol in queueBuffer
			if (queueSize < MAX_QUEUE_SIZE) {
 8002954:	4b6d      	ldr	r3, [pc, #436]	@ (8002b0c <handleTouch+0x4d8>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b09      	cmp	r3, #9
 800295a:	d816      	bhi.n	800298a <handleTouch+0x356>

				queueProtocol(page_num, protocol_offset);
 800295c:	4b69      	ldr	r3, [pc, #420]	@ (8002b04 <handleTouch+0x4d0>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b6b      	ldr	r3, [pc, #428]	@ (8002b10 <handleTouch+0x4dc>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	4619      	mov	r1, r3
 8002968:	4610      	mov	r0, r2
 800296a:	f000 fcd5 	bl	8003318 <queueProtocol>
				queueSize++;
 800296e:	4b67      	ldr	r3, [pc, #412]	@ (8002b0c <handleTouch+0x4d8>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	3301      	adds	r3, #1
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4b65      	ldr	r3, [pc, #404]	@ (8002b0c <handleTouch+0x4d8>)
 8002978:	701a      	strb	r2, [r3, #0]
				currentPage = PAGE_QUEUE;
 800297a:	4b61      	ldr	r3, [pc, #388]	@ (8002b00 <handleTouch+0x4cc>)
 800297c:	2202      	movs	r2, #2
 800297e:	701a      	strb	r2, [r3, #0]
				DrawQueuePage(queueSize);
 8002980:	4b62      	ldr	r3, [pc, #392]	@ (8002b0c <handleTouch+0x4d8>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff faef 	bl	8001f68 <DrawQueuePage>
			} else {
				//handle queue buffer being full
			}
		}
		//select button
		if (x >= selectButton.x && x <= (selectButton.x + selectButton.w)
 800298a:	4b62      	ldr	r3, [pc, #392]	@ (8002b14 <handleTouch+0x4e0>)
 800298c:	881a      	ldrh	r2, [r3, #0]
 800298e:	897b      	ldrh	r3, [r7, #10]
 8002990:	429a      	cmp	r2, r3
 8002992:	d82a      	bhi.n	80029ea <handleTouch+0x3b6>
 8002994:	897b      	ldrh	r3, [r7, #10]
 8002996:	461a      	mov	r2, r3
 8002998:	4b5e      	ldr	r3, [pc, #376]	@ (8002b14 <handleTouch+0x4e0>)
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	4619      	mov	r1, r3
 800299e:	4b5d      	ldr	r3, [pc, #372]	@ (8002b14 <handleTouch+0x4e0>)
 80029a0:	889b      	ldrh	r3, [r3, #4]
 80029a2:	440b      	add	r3, r1
 80029a4:	429a      	cmp	r2, r3
 80029a6:	dc20      	bgt.n	80029ea <handleTouch+0x3b6>
				&& y >= selectButton.y
 80029a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002b14 <handleTouch+0x4e0>)
 80029aa:	885a      	ldrh	r2, [r3, #2]
 80029ac:	893b      	ldrh	r3, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d81b      	bhi.n	80029ea <handleTouch+0x3b6>
				&& y <= (selectButton.y + selectButton.h)) {
 80029b2:	893b      	ldrh	r3, [r7, #8]
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b57      	ldr	r3, [pc, #348]	@ (8002b14 <handleTouch+0x4e0>)
 80029b8:	885b      	ldrh	r3, [r3, #2]
 80029ba:	4619      	mov	r1, r3
 80029bc:	4b55      	ldr	r3, [pc, #340]	@ (8002b14 <handleTouch+0x4e0>)
 80029be:	88db      	ldrh	r3, [r3, #6]
 80029c0:	440b      	add	r3, r1
 80029c2:	429a      	cmp	r2, r3
 80029c4:	dc11      	bgt.n	80029ea <handleTouch+0x3b6>
			//transmit protocol and move to finish page
			transmitProtocol(page_num, protocol_offset);
 80029c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002b04 <handleTouch+0x4d0>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b50      	ldr	r3, [pc, #320]	@ (8002b10 <handleTouch+0x4dc>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	4619      	mov	r1, r3
 80029d2:	4610      	mov	r0, r2
 80029d4:	f000 fc4c 	bl	8003270 <transmitProtocol>
			currentPage = PAGE_PROGRESS;
 80029d8:	4b49      	ldr	r3, [pc, #292]	@ (8002b00 <handleTouch+0x4cc>)
 80029da:	2205      	movs	r2, #5
 80029dc:	701a      	strb	r2, [r3, #0]
			DrawProgressPage(rx_byte, rx_data);
 80029de:	4b4e      	ldr	r3, [pc, #312]	@ (8002b18 <handleTouch+0x4e4>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	494e      	ldr	r1, [pc, #312]	@ (8002b1c <handleTouch+0x4e8>)
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fba5 	bl	8002134 <DrawProgressPage>
		}
		//delete button
		if (x >= deleteButton.x && x <= (deleteButton.x + deleteButton.w)
 80029ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002b20 <handleTouch+0x4ec>)
 80029ec:	881a      	ldrh	r2, [r3, #0]
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	f200 81a9 	bhi.w	8002d48 <handleTouch+0x714>
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b49      	ldr	r3, [pc, #292]	@ (8002b20 <handleTouch+0x4ec>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	4619      	mov	r1, r3
 8002a00:	4b47      	ldr	r3, [pc, #284]	@ (8002b20 <handleTouch+0x4ec>)
 8002a02:	889b      	ldrh	r3, [r3, #4]
 8002a04:	440b      	add	r3, r1
 8002a06:	429a      	cmp	r2, r3
 8002a08:	f300 819e 	bgt.w	8002d48 <handleTouch+0x714>
				&& y >= deleteButton.y
 8002a0c:	4b44      	ldr	r3, [pc, #272]	@ (8002b20 <handleTouch+0x4ec>)
 8002a0e:	885a      	ldrh	r2, [r3, #2]
 8002a10:	893b      	ldrh	r3, [r7, #8]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	f200 8198 	bhi.w	8002d48 <handleTouch+0x714>
				&& y <= (deleteButton.y + deleteButton.h)) {
 8002a18:	893b      	ldrh	r3, [r7, #8]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b40      	ldr	r3, [pc, #256]	@ (8002b20 <handleTouch+0x4ec>)
 8002a1e:	885b      	ldrh	r3, [r3, #2]
 8002a20:	4619      	mov	r1, r3
 8002a22:	4b3f      	ldr	r3, [pc, #252]	@ (8002b20 <handleTouch+0x4ec>)
 8002a24:	88db      	ldrh	r3, [r3, #6]
 8002a26:	440b      	add	r3, r1
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	f300 818d 	bgt.w	8002d48 <handleTouch+0x714>
			//move to delete confirmation page
			currentPage = PAGE_CONFIRMATION;
 8002a2e:	4b34      	ldr	r3, [pc, #208]	@ (8002b00 <handleTouch+0x4cc>)
 8002a30:	2203      	movs	r2, #3
 8002a32:	701a      	strb	r2, [r3, #0]
			DrawConfirmationPage(page_num, protocol_offset);
 8002a34:	4b33      	ldr	r3, [pc, #204]	@ (8002b04 <handleTouch+0x4d0>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4b35      	ldr	r3, [pc, #212]	@ (8002b10 <handleTouch+0x4dc>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f7ff fa19 	bl	8001e78 <DrawConfirmationPage>
		}
		break;
 8002a46:	e17f      	b.n	8002d48 <handleTouch+0x714>

	case PAGE_QUEUE:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002a48:	4b2c      	ldr	r3, [pc, #176]	@ (8002afc <handleTouch+0x4c8>)
 8002a4a:	881a      	ldrh	r2, [r3, #0]
 8002a4c:	897b      	ldrh	r3, [r7, #10]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d820      	bhi.n	8002a94 <handleTouch+0x460>
 8002a52:	897b      	ldrh	r3, [r7, #10]
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b29      	ldr	r3, [pc, #164]	@ (8002afc <handleTouch+0x4c8>)
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4b27      	ldr	r3, [pc, #156]	@ (8002afc <handleTouch+0x4c8>)
 8002a5e:	889b      	ldrh	r3, [r3, #4]
 8002a60:	440b      	add	r3, r1
 8002a62:	429a      	cmp	r2, r3
 8002a64:	dc16      	bgt.n	8002a94 <handleTouch+0x460>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002a66:	4b25      	ldr	r3, [pc, #148]	@ (8002afc <handleTouch+0x4c8>)
 8002a68:	885a      	ldrh	r2, [r3, #2]
 8002a6a:	893b      	ldrh	r3, [r7, #8]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d811      	bhi.n	8002a94 <handleTouch+0x460>
 8002a70:	893b      	ldrh	r3, [r7, #8]
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b21      	ldr	r3, [pc, #132]	@ (8002afc <handleTouch+0x4c8>)
 8002a76:	885b      	ldrh	r3, [r3, #2]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4b20      	ldr	r3, [pc, #128]	@ (8002afc <handleTouch+0x4c8>)
 8002a7c:	88db      	ldrh	r3, [r3, #6]
 8002a7e:	440b      	add	r3, r1
 8002a80:	429a      	cmp	r2, r3
 8002a82:	dc07      	bgt.n	8002a94 <handleTouch+0x460>
			currentPage = PAGE_MAIN;
 8002a84:	4b1e      	ldr	r3, [pc, #120]	@ (8002b00 <handleTouch+0x4cc>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <handleTouch+0x4d0>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe ff6a 	bl	8001968 <DrawMainPage>
		}
		//run button
		if (x >= runButton.x && x <= (runButton.x + runButton.w)
 8002a94:	4b23      	ldr	r3, [pc, #140]	@ (8002b24 <handleTouch+0x4f0>)
 8002a96:	881a      	ldrh	r2, [r3, #0]
 8002a98:	897b      	ldrh	r3, [r7, #10]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	f200 8156 	bhi.w	8002d4c <handleTouch+0x718>
 8002aa0:	897b      	ldrh	r3, [r7, #10]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b24 <handleTouch+0x4f0>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <handleTouch+0x4f0>)
 8002aac:	889b      	ldrh	r3, [r3, #4]
 8002aae:	440b      	add	r3, r1
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	f300 814b 	bgt.w	8002d4c <handleTouch+0x718>
				&& y >= runButton.y && y <= (runButton.y + runButton.h)) {
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <handleTouch+0x4f0>)
 8002ab8:	885a      	ldrh	r2, [r3, #2]
 8002aba:	893b      	ldrh	r3, [r7, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f200 8145 	bhi.w	8002d4c <handleTouch+0x718>
 8002ac2:	893b      	ldrh	r3, [r7, #8]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b17      	ldr	r3, [pc, #92]	@ (8002b24 <handleTouch+0x4f0>)
 8002ac8:	885b      	ldrh	r3, [r3, #2]
 8002aca:	4619      	mov	r1, r3
 8002acc:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <handleTouch+0x4f0>)
 8002ace:	88db      	ldrh	r3, [r3, #6]
 8002ad0:	440b      	add	r3, r1
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	f300 813a 	bgt.w	8002d4c <handleTouch+0x718>
			//handle queue functionality here dorjee
			transmitQueuedProtocols(queueSize);
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <handleTouch+0x4d8>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fc9b 	bl	8003418 <transmitQueuedProtocols>
			queueSize = 0;
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <handleTouch+0x4d8>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
			currentPage = PAGE_PROGRESS;
 8002ae8:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <handleTouch+0x4cc>)
 8002aea:	2205      	movs	r2, #5
 8002aec:	701a      	strb	r2, [r3, #0]
			DrawProgressPage(rx_byte, rx_data);
 8002aee:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <handleTouch+0x4e4>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	490a      	ldr	r1, [pc, #40]	@ (8002b1c <handleTouch+0x4e8>)
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fb1d 	bl	8002134 <DrawProgressPage>
		}
		break;
 8002afa:	e127      	b.n	8002d4c <handleTouch+0x718>
 8002afc:	200001b8 	.word	0x200001b8
 8002b00:	2000054c 	.word	0x2000054c
 8002b04:	20000266 	.word	0x20000266
 8002b08:	20000134 	.word	0x20000134
 8002b0c:	2000ff6c 	.word	0x2000ff6c
 8002b10:	20011875 	.word	0x20011875
 8002b14:	20000160 	.word	0x20000160
 8002b18:	2000054d 	.word	0x2000054d
 8002b1c:	20000550 	.word	0x20000550
 8002b20:	2000018c 	.word	0x2000018c
 8002b24:	200000dc 	.word	0x200000dc

	case PAGE_CONFIRMATION:
		//back button
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002b28:	4b91      	ldr	r3, [pc, #580]	@ (8002d70 <handleTouch+0x73c>)
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	897b      	ldrh	r3, [r7, #10]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d827      	bhi.n	8002b82 <handleTouch+0x54e>
 8002b32:	897b      	ldrh	r3, [r7, #10]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b8e      	ldr	r3, [pc, #568]	@ (8002d70 <handleTouch+0x73c>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8002d70 <handleTouch+0x73c>)
 8002b3e:	889b      	ldrh	r3, [r3, #4]
 8002b40:	440b      	add	r3, r1
 8002b42:	429a      	cmp	r2, r3
 8002b44:	dc1d      	bgt.n	8002b82 <handleTouch+0x54e>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002b46:	4b8a      	ldr	r3, [pc, #552]	@ (8002d70 <handleTouch+0x73c>)
 8002b48:	885a      	ldrh	r2, [r3, #2]
 8002b4a:	893b      	ldrh	r3, [r7, #8]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d818      	bhi.n	8002b82 <handleTouch+0x54e>
 8002b50:	893b      	ldrh	r3, [r7, #8]
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b86      	ldr	r3, [pc, #536]	@ (8002d70 <handleTouch+0x73c>)
 8002b56:	885b      	ldrh	r3, [r3, #2]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4b85      	ldr	r3, [pc, #532]	@ (8002d70 <handleTouch+0x73c>)
 8002b5c:	88db      	ldrh	r3, [r3, #6]
 8002b5e:	440b      	add	r3, r1
 8002b60:	429a      	cmp	r2, r3
 8002b62:	dc0e      	bgt.n	8002b82 <handleTouch+0x54e>
			currentPage = PAGE_SELECT;
 8002b64:	4b83      	ldr	r3, [pc, #524]	@ (8002d74 <handleTouch+0x740>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
			DrawInfoPage(buttons[protocol_offset].label);
 8002b6a:	4b83      	ldr	r3, [pc, #524]	@ (8002d78 <handleTouch+0x744>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	232a      	movs	r3, #42	@ 0x2a
 8002b72:	fb02 f303 	mul.w	r3, r2, r3
 8002b76:	3308      	adds	r3, #8
 8002b78:	4a80      	ldr	r2, [pc, #512]	@ (8002d7c <handleTouch+0x748>)
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff f8d1 	bl	8001d24 <DrawInfoPage>
		}
		//confirm button
		if (x >= confirmButton.x && x <= (confirmButton.x + confirmButton.w)
 8002b82:	4b7f      	ldr	r3, [pc, #508]	@ (8002d80 <handleTouch+0x74c>)
 8002b84:	881a      	ldrh	r2, [r3, #0]
 8002b86:	897b      	ldrh	r3, [r7, #10]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	f200 80e1 	bhi.w	8002d50 <handleTouch+0x71c>
 8002b8e:	897b      	ldrh	r3, [r7, #10]
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b7b      	ldr	r3, [pc, #492]	@ (8002d80 <handleTouch+0x74c>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	4619      	mov	r1, r3
 8002b98:	4b79      	ldr	r3, [pc, #484]	@ (8002d80 <handleTouch+0x74c>)
 8002b9a:	889b      	ldrh	r3, [r3, #4]
 8002b9c:	440b      	add	r3, r1
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	f300 80d6 	bgt.w	8002d50 <handleTouch+0x71c>
				&& y >= confirmButton.y
 8002ba4:	4b76      	ldr	r3, [pc, #472]	@ (8002d80 <handleTouch+0x74c>)
 8002ba6:	885a      	ldrh	r2, [r3, #2]
 8002ba8:	893b      	ldrh	r3, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	f200 80d0 	bhi.w	8002d50 <handleTouch+0x71c>
				&& y <= (confirmButton.y + confirmButton.h)) {
 8002bb0:	893b      	ldrh	r3, [r7, #8]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b72      	ldr	r3, [pc, #456]	@ (8002d80 <handleTouch+0x74c>)
 8002bb6:	885b      	ldrh	r3, [r3, #2]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4b71      	ldr	r3, [pc, #452]	@ (8002d80 <handleTouch+0x74c>)
 8002bbc:	88db      	ldrh	r3, [r3, #6]
 8002bbe:	440b      	add	r3, r1
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	f300 80c5 	bgt.w	8002d50 <handleTouch+0x71c>
			//delete protocol and go back to main page
			deleteProtocol(page_num, protocol_offset);
 8002bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8002d84 <handleTouch+0x750>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8002d78 <handleTouch+0x744>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f000 fc70 	bl	80034b8 <deleteProtocol>
			currentPage = PAGE_MAIN;
 8002bd8:	4b66      	ldr	r3, [pc, #408]	@ (8002d74 <handleTouch+0x740>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002bde:	4b69      	ldr	r3, [pc, #420]	@ (8002d84 <handleTouch+0x750>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fec0 	bl	8001968 <DrawMainPage>
		}
		break;
 8002be8:	e0b2      	b.n	8002d50 <handleTouch+0x71c>

	case PAGE_PROGRESS:
		//stop button
		if ((x >= backButton.x) && (x <= backButton.x + backButton.w)
 8002bea:	4b61      	ldr	r3, [pc, #388]	@ (8002d70 <handleTouch+0x73c>)
 8002bec:	881a      	ldrh	r2, [r3, #0]
 8002bee:	897b      	ldrh	r3, [r7, #10]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d81e      	bhi.n	8002c32 <handleTouch+0x5fe>
 8002bf4:	897b      	ldrh	r3, [r7, #10]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4b5d      	ldr	r3, [pc, #372]	@ (8002d70 <handleTouch+0x73c>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8002d70 <handleTouch+0x73c>)
 8002c00:	889b      	ldrh	r3, [r3, #4]
 8002c02:	440b      	add	r3, r1
 8002c04:	429a      	cmp	r2, r3
 8002c06:	dc14      	bgt.n	8002c32 <handleTouch+0x5fe>
				&& (y >= backButton.y)
 8002c08:	4b59      	ldr	r3, [pc, #356]	@ (8002d70 <handleTouch+0x73c>)
 8002c0a:	885a      	ldrh	r2, [r3, #2]
 8002c0c:	893b      	ldrh	r3, [r7, #8]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d80f      	bhi.n	8002c32 <handleTouch+0x5fe>
				&& (y <= backButton.y + backButton.h + BACK_BUTTON_OFFSET)) {
 8002c12:	893b      	ldrh	r3, [r7, #8]
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b56      	ldr	r3, [pc, #344]	@ (8002d70 <handleTouch+0x73c>)
 8002c18:	885b      	ldrh	r3, [r3, #2]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4b54      	ldr	r3, [pc, #336]	@ (8002d70 <handleTouch+0x73c>)
 8002c1e:	88db      	ldrh	r3, [r3, #6]
 8002c20:	440b      	add	r3, r1
 8002c22:	333c      	adds	r3, #60	@ 0x3c
 8002c24:	429a      	cmp	r2, r3
 8002c26:	dc04      	bgt.n	8002c32 <handleTouch+0x5fe>
			//printf("touched\n");
			currentPage = PAGE_STOP;
 8002c28:	4b52      	ldr	r3, [pc, #328]	@ (8002d74 <handleTouch+0x740>)
 8002c2a:	2206      	movs	r2, #6
 8002c2c:	701a      	strb	r2, [r3, #0]
			DrawStopPage();
 8002c2e:	f7ff fc5b 	bl	80024e8 <DrawStopPage>
		}
		//when protocol finishes naturally, it will send a done signal
		uint8_t done_signal;
		if (HAL_UART_Receive(&huart2, &done_signal, 1, 0) == HAL_OK) {
 8002c32:	1df9      	adds	r1, r7, #7
 8002c34:	2300      	movs	r3, #0
 8002c36:	2201      	movs	r2, #1
 8002c38:	4853      	ldr	r0, [pc, #332]	@ (8002d88 <handleTouch+0x754>)
 8002c3a:	f005 ff88 	bl	8008b4e <HAL_UART_Receive>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f040 8087 	bne.w	8002d54 <handleTouch+0x720>
			if (done_signal == 'D') {
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	2b44      	cmp	r3, #68	@ 0x44
 8002c4a:	f040 8083 	bne.w	8002d54 <handleTouch+0x720>
			    //go to success page
				currentPage = PAGE_FINISH;
 8002c4e:	4b49      	ldr	r3, [pc, #292]	@ (8002d74 <handleTouch+0x740>)
 8002c50:	2204      	movs	r2, #4
 8002c52:	701a      	strb	r2, [r3, #0]
				DrawPageFinish();
 8002c54:	f7ff fcac 	bl	80025b0 <DrawPageFinish>
			}
		}
		break;
 8002c58:	e07c      	b.n	8002d54 <handleTouch+0x720>

	case PAGE_STOP:
		//no button
		if (x >= noButton.x && x <= (noButton.x + noButton.w) && y >= noButton.y
 8002c5a:	4b4c      	ldr	r3, [pc, #304]	@ (8002d8c <handleTouch+0x758>)
 8002c5c:	881a      	ldrh	r2, [r3, #0]
 8002c5e:	897b      	ldrh	r3, [r7, #10]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d821      	bhi.n	8002ca8 <handleTouch+0x674>
 8002c64:	897b      	ldrh	r3, [r7, #10]
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b48      	ldr	r3, [pc, #288]	@ (8002d8c <handleTouch+0x758>)
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4b47      	ldr	r3, [pc, #284]	@ (8002d8c <handleTouch+0x758>)
 8002c70:	889b      	ldrh	r3, [r3, #4]
 8002c72:	440b      	add	r3, r1
 8002c74:	429a      	cmp	r2, r3
 8002c76:	dc17      	bgt.n	8002ca8 <handleTouch+0x674>
 8002c78:	4b44      	ldr	r3, [pc, #272]	@ (8002d8c <handleTouch+0x758>)
 8002c7a:	885a      	ldrh	r2, [r3, #2]
 8002c7c:	893b      	ldrh	r3, [r7, #8]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d812      	bhi.n	8002ca8 <handleTouch+0x674>
				&& y <= (noButton.y + noButton.h)) {
 8002c82:	893b      	ldrh	r3, [r7, #8]
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b41      	ldr	r3, [pc, #260]	@ (8002d8c <handleTouch+0x758>)
 8002c88:	885b      	ldrh	r3, [r3, #2]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d8c <handleTouch+0x758>)
 8002c8e:	88db      	ldrh	r3, [r3, #6]
 8002c90:	440b      	add	r3, r1
 8002c92:	429a      	cmp	r2, r3
 8002c94:	dc08      	bgt.n	8002ca8 <handleTouch+0x674>
			currentPage = PAGE_PROGRESS;
 8002c96:	4b37      	ldr	r3, [pc, #220]	@ (8002d74 <handleTouch+0x740>)
 8002c98:	2205      	movs	r2, #5
 8002c9a:	701a      	strb	r2, [r3, #0]
			DrawProgressPage(rx_byte, rx_data);
 8002c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d90 <handleTouch+0x75c>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	493c      	ldr	r1, [pc, #240]	@ (8002d94 <handleTouch+0x760>)
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fa46 	bl	8002134 <DrawProgressPage>
		}
		//yes button
		if (x >= yesButton.x && x <= (yesButton.x + yesButton.w)
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8002d98 <handleTouch+0x764>)
 8002caa:	881a      	ldrh	r2, [r3, #0]
 8002cac:	897b      	ldrh	r3, [r7, #10]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d852      	bhi.n	8002d58 <handleTouch+0x724>
 8002cb2:	897b      	ldrh	r3, [r7, #10]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b38      	ldr	r3, [pc, #224]	@ (8002d98 <handleTouch+0x764>)
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4b36      	ldr	r3, [pc, #216]	@ (8002d98 <handleTouch+0x764>)
 8002cbe:	889b      	ldrh	r3, [r3, #4]
 8002cc0:	440b      	add	r3, r1
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	dc48      	bgt.n	8002d58 <handleTouch+0x724>
				&& y >= yesButton.y && y <= (yesButton.y + yesButton.h)) {
 8002cc6:	4b34      	ldr	r3, [pc, #208]	@ (8002d98 <handleTouch+0x764>)
 8002cc8:	885a      	ldrh	r2, [r3, #2]
 8002cca:	893b      	ldrh	r3, [r7, #8]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d843      	bhi.n	8002d58 <handleTouch+0x724>
 8002cd0:	893b      	ldrh	r3, [r7, #8]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4b30      	ldr	r3, [pc, #192]	@ (8002d98 <handleTouch+0x764>)
 8002cd6:	885b      	ldrh	r3, [r3, #2]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4b2f      	ldr	r3, [pc, #188]	@ (8002d98 <handleTouch+0x764>)
 8002cdc:	88db      	ldrh	r3, [r3, #6]
 8002cde:	440b      	add	r3, r1
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	dc39      	bgt.n	8002d58 <handleTouch+0x724>
			//Send stop signal to ESP32 and go back to main page
			SendStopMotorsMessage();
 8002ce4:	f000 fd5c 	bl	80037a0 <SendStopMotorsMessage>
			currentPage = PAGE_MAIN;
 8002ce8:	4b22      	ldr	r3, [pc, #136]	@ (8002d74 <handleTouch+0x740>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002cee:	4b25      	ldr	r3, [pc, #148]	@ (8002d84 <handleTouch+0x750>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fe38 	bl	8001968 <DrawMainPage>
		}
		break;
 8002cf8:	e02e      	b.n	8002d58 <handleTouch+0x724>

	case PAGE_FINISH:
		if (x >= backButton.x && x <= (backButton.x + backButton.w)
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <handleTouch+0x73c>)
 8002cfc:	881a      	ldrh	r2, [r3, #0]
 8002cfe:	897b      	ldrh	r3, [r7, #10]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d82b      	bhi.n	8002d5c <handleTouch+0x728>
 8002d04:	897b      	ldrh	r3, [r7, #10]
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <handleTouch+0x73c>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4b18      	ldr	r3, [pc, #96]	@ (8002d70 <handleTouch+0x73c>)
 8002d10:	889b      	ldrh	r3, [r3, #4]
 8002d12:	440b      	add	r3, r1
 8002d14:	429a      	cmp	r2, r3
 8002d16:	dc21      	bgt.n	8002d5c <handleTouch+0x728>
				&& y >= backButton.y && y <= (backButton.y + backButton.h)) {
 8002d18:	4b15      	ldr	r3, [pc, #84]	@ (8002d70 <handleTouch+0x73c>)
 8002d1a:	885a      	ldrh	r2, [r3, #2]
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d81c      	bhi.n	8002d5c <handleTouch+0x728>
 8002d22:	893b      	ldrh	r3, [r7, #8]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <handleTouch+0x73c>)
 8002d28:	885b      	ldrh	r3, [r3, #2]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <handleTouch+0x73c>)
 8002d2e:	88db      	ldrh	r3, [r3, #6]
 8002d30:	440b      	add	r3, r1
 8002d32:	429a      	cmp	r2, r3
 8002d34:	dc12      	bgt.n	8002d5c <handleTouch+0x728>
			currentPage = PAGE_MAIN;
 8002d36:	4b0f      	ldr	r3, [pc, #60]	@ (8002d74 <handleTouch+0x740>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
			DrawMainPage(page_num);
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <handleTouch+0x750>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe fe11 	bl	8001968 <DrawMainPage>
		}
		break;
 8002d46:	e009      	b.n	8002d5c <handleTouch+0x728>
		break;
 8002d48:	bf00      	nop
 8002d4a:	e008      	b.n	8002d5e <handleTouch+0x72a>
		break;
 8002d4c:	bf00      	nop
 8002d4e:	e006      	b.n	8002d5e <handleTouch+0x72a>
		break;
 8002d50:	bf00      	nop
 8002d52:	e004      	b.n	8002d5e <handleTouch+0x72a>
		break;
 8002d54:	bf00      	nop
 8002d56:	e002      	b.n	8002d5e <handleTouch+0x72a>
		break;
 8002d58:	bf00      	nop
 8002d5a:	e000      	b.n	8002d5e <handleTouch+0x72a>
		break;
 8002d5c:	bf00      	nop
	}

	HAL_Delay(SCREEN_DELAY); //debouncing delay
 8002d5e:	2032      	movs	r0, #50	@ 0x32
 8002d60:	f001 f90c 	bl	8003f7c <HAL_Delay>
	return 1;
 8002d64:	2301      	movs	r3, #1
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd90      	pop	{r4, r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200001b8 	.word	0x200001b8
 8002d74:	2000054c 	.word	0x2000054c
 8002d78:	20011875 	.word	0x20011875
 8002d7c:	20000030 	.word	0x20000030
 8002d80:	20000108 	.word	0x20000108
 8002d84:	20000266 	.word	0x20000266
 8002d88:	200004b4 	.word	0x200004b4
 8002d8c:	2000023c 	.word	0x2000023c
 8002d90:	2000054d 	.word	0x2000054d
 8002d94:	20000550 	.word	0x20000550
 8002d98:	20000210 	.word	0x20000210

08002d9c <erase_sector>:
/**
 * @brief: Erase the memory from an entire sector
 * @param Sector: The sector number
 * @retval: none
 */
void erase_sector(uint32_t Sector) {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();  // Unlock flash to enable erasing
 8002da4:	f001 fb06 	bl	80043b4 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(sector_mapping(Sector), VOLTAGE_RANGE_3);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fd75 	bl	8003898 <sector_mapping>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2102      	movs	r1, #2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 fc70 	bl	8004698 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();  // Lock flash after erasing
 8002db8:	f001 fb1e 	bl	80043f8 <HAL_FLASH_Lock>
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <write_to_flash>:
 * @param flash_address: address of string in flash memory that will be stored
 * @retval: none
 * Note: PLEASE UNLOCK AND LOCK FLASH BEFORE AND AFTER USING THIS FUNCTION,
 * IT DOES NOT DO IT ITSELF
 */
void write_to_flash(const char *data, uint32_t flash_address) {
 8002dc4:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();  // Unlock flash for writing

	for (uint8_t i = 0; i < strlen(data); i++) {
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	e012      	b.n	8002dfc <write_to_flash+0x38>
		//printf("%c", data[i]);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address + i, data[i]); // Write to flash
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	18d1      	adds	r1, r2, r3
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2200      	movs	r2, #0
 8002de8:	4698      	mov	r8, r3
 8002dea:	4691      	mov	r9, r2
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	2000      	movs	r0, #0
 8002df2:	f001 fa8b 	bl	800430c <HAL_FLASH_Program>
	for (uint8_t i = 0; i < strlen(data); i++) {
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	7bfc      	ldrb	r4, [r7, #15]
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fd f9f6 	bl	80001f0 <strlen>
 8002e04:	4603      	mov	r3, r0
 8002e06:	429c      	cmp	r4, r3
 8002e08:	d3e5      	bcc.n	8002dd6 <write_to_flash+0x12>
	}

	//HAL_FLASH_Lock();  // Lock flash after writing
}
 8002e0a:	bf00      	nop
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08002e16 <read_from_flash>:
 * @param flash_address: address of string in flash memory that will be read
 * @retval: failure if its reading trash from flash memory.
 * it literally does not read from flash btw if it detects 0xFF at the start
 * that means your output buffer will not be updated
 */
uint8_t read_from_flash(char *output, uint32_t flash_address) {
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
	// Read byte by byte from flash memory, get a whole string in output variable
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e014      	b.n	8002e50 <read_from_flash+0x3a>
		char key = *(char*) (flash_address + i);
 8002e26:	7bfa      	ldrb	r2, [r7, #15]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	73bb      	strb	r3, [r7, #14]
		//check if reading trash (0xFF) from flash memory
		if (key == 0xFF) {
 8002e30:	7bbb      	ldrb	r3, [r7, #14]
 8002e32:	2bff      	cmp	r3, #255	@ 0xff
 8002e34:	d104      	bne.n	8002e40 <read_from_flash+0x2a>
			if (i == 0) {
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d106      	bne.n	8002e4a <read_from_flash+0x34>
				return 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e01b      	b.n	8002e78 <read_from_flash+0x62>
			}
		} else {
			output[i] = key;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	7bba      	ldrb	r2, [r7, #14]
 8002e48:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b1f      	cmp	r3, #31
 8002e54:	d9e7      	bls.n	8002e26 <read_from_flash+0x10>
		}
	}
	output[strlen(output)] = '\0'; //add null to the end of string for printing
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd f9ca 	bl	80001f0 <strlen>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
	//printf("output is %s and strlen: %d\n", output, strlen(output));

	//error handling. G-codes are less than 32 chars, anything more is trash
	if (strlen(output) < MAX_LINE_LENGTH) {
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fd f9c2 	bl	80001f0 <strlen>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b1f      	cmp	r3, #31
 8002e70:	d801      	bhi.n	8002e76 <read_from_flash+0x60>
		return 1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <read_from_flash+0x62>
	} else {
		return 0;
 8002e76:	2300      	movs	r3, #0
	}

}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <storeProtocol>:
 * @param gcode_file: array of G-code commands
 * @param sector: which sector to store protocol in
 * @retval: failure if sector is "full"
 */
uint8_t storeProtocol(char new_protocol[MAX_LINES][MAX_LINE_LENGTH],
		uint32_t sector) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	f5ad 4d96 	sub.w	sp, sp, #19200	@ 0x4b00
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8002e8e:	f6a3 331c 	subw	r3, r3, #2844	@ 0xb1c
 8002e92:	6018      	str	r0, [r3, #0]
 8002e94:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8002e98:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 8002e9c:	6019      	str	r1, [r3, #0]

	//initialize variables
	int i = 0;  //protocol index
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002ea4:	f102 021c 	add.w	r2, r2, #28
 8002ea8:	6013      	str	r3, [r2, #0]
	int j = 0;  //line index
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002eb0:	f102 0218 	add.w	r2, r2, #24
 8002eb4:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 8002eb6:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8002eba:	f6a3 3318 	subw	r3, r3, #2840	@ 0xb18
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	f00b fb6c 	bl	800e5a4 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 8002ecc:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8002ed0:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	f000 fc77 	bl	80037c8 <get_sector_address>
 8002eda:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002ede:	f103 0314 	add.w	r3, r3, #20
 8002ee2:	6018      	str	r0, [r3, #0]

	//check if all sectors are full before storing a protocol
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 8002ee4:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8002ee8:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	f000 f966 	bl	80031be <get_num_protocols_in_sector>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002ef8:	f102 0213 	add.w	r2, r2, #19
 8002efc:	7013      	strb	r3, [r2, #0]
	if (num_protocols == MAX_PROTOCOLS_IN_SECTOR) {
 8002efe:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002f02:	f103 0313 	add.w	r3, r3, #19
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d101      	bne.n	8002f10 <storeProtocol+0x90>
		return 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e150      	b.n	80031b2 <storeProtocol+0x332>
	}

	//read existing protocols in sector and put into the temp protocol storage
	for (i = 0; i < num_protocols; i++) {
 8002f10:	2300      	movs	r3, #0
 8002f12:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002f16:	f102 021c 	add.w	r2, r2, #28
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	e05a      	b.n	8002fd4 <storeProtocol+0x154>
		for (j = 0; j < MAX_LINES; j++) {
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002f24:	f102 0218 	add.w	r2, r2, #24
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e041      	b.n	8002fb0 <storeProtocol+0x130>
			//get the address for the current line in the current protocol
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8002f2c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002f30:	f103 031c 	add.w	r3, r3, #28
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002f44:	f103 0318 	add.w	r3, r3, #24
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	015b      	lsls	r3, r3, #5
 8002f4c:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8002f4e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002f52:	f102 0214 	add.w	r2, r2, #20
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002f5e:	f102 0208 	add.w	r2, r2, #8
 8002f62:	6013      	str	r3, [r2, #0]
			//read lines from memory into buffer until you reach garbage
			read_from_flash(protocolStorage[i][j], temp_address); //only updates protocolStorage if its a valid line from memory
 8002f64:	f107 0320 	add.w	r3, r7, #32
 8002f68:	3b18      	subs	r3, #24
 8002f6a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002f6e:	f102 021c 	add.w	r2, r2, #28
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	21c8      	movs	r1, #200	@ 0xc8
 8002f76:	fb02 f101 	mul.w	r1, r2, r1
 8002f7a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002f7e:	f102 0218 	add.w	r2, r2, #24
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	440a      	add	r2, r1
 8002f86:	0152      	lsls	r2, r2, #5
 8002f88:	4413      	add	r3, r2
 8002f8a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002f8e:	f102 0208 	add.w	r2, r2, #8
 8002f92:	6811      	ldr	r1, [r2, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff3e 	bl	8002e16 <read_from_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8002f9a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002f9e:	f103 0318 	add.w	r3, r3, #24
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002faa:	f102 0218 	add.w	r2, r2, #24
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002fb4:	f103 0318 	add.w	r3, r3, #24
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2bc7      	cmp	r3, #199	@ 0xc7
 8002fbc:	ddb6      	ble.n	8002f2c <storeProtocol+0xac>
	for (i = 0; i < num_protocols; i++) {
 8002fbe:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002fc2:	f103 031c 	add.w	r3, r3, #28
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002fce:	f102 021c 	add.w	r2, r2, #28
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002fd8:	f103 0313 	add.w	r3, r3, #19
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002fe2:	f102 021c 	add.w	r2, r2, #28
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	db98      	blt.n	8002f1e <storeProtocol+0x9e>
	}
	//output: we now have the existing protocols in the buffer.
	//they only have their first number of lines in. the rest of lines are null

	//put the new protocol into the temp protocol storage
	for (j = 0; j < MAX_LINES; j++) {
 8002fec:	2300      	movs	r3, #0
 8002fee:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8002ff2:	f102 0218 	add.w	r2, r2, #24
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	e03b      	b.n	8003072 <storeProtocol+0x1f2>
		//copy each line into the buffer from new protocol, should be null terminated from qr scanner
		if (new_protocol[j][0] != '\0') {
 8002ffa:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8002ffe:	f103 0318 	add.w	r3, r3, #24
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	015b      	lsls	r3, r3, #5
 8003006:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 800300a:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	4413      	add	r3, r2
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d021      	beq.n	800305c <storeProtocol+0x1dc>
			strcpy(protocolStorage[i][j], new_protocol[j]);
 8003018:	f107 0320 	add.w	r3, r7, #32
 800301c:	3b18      	subs	r3, #24
 800301e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003022:	f102 021c 	add.w	r2, r2, #28
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	21c8      	movs	r1, #200	@ 0xc8
 800302a:	fb02 f101 	mul.w	r1, r2, r1
 800302e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003032:	f102 0218 	add.w	r2, r2, #24
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	440a      	add	r2, r1
 800303a:	0152      	lsls	r2, r2, #5
 800303c:	1898      	adds	r0, r3, r2
 800303e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003042:	f103 0318 	add.w	r3, r3, #24
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	015b      	lsls	r3, r3, #5
 800304a:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 800304e:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	4413      	add	r3, r2
 8003056:	4619      	mov	r1, r3
 8003058:	f00b fb2f 	bl	800e6ba <strcpy>
	for (j = 0; j < MAX_LINES; j++) {
 800305c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003060:	f103 0318 	add.w	r3, r3, #24
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3301      	adds	r3, #1
 8003068:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800306c:	f102 0218 	add.w	r2, r2, #24
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003076:	f103 0318 	add.w	r3, r3, #24
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2bc7      	cmp	r3, #199	@ 0xc7
 800307e:	ddbc      	ble.n	8002ffa <storeProtocol+0x17a>
	}
	//we now have the new protocol in the buffer.
	//it only has the first number of lines in. the rest of lines are null

	//write existing protocols and new protocol to flash memory, string-by-string
	erase_sector(sector); //erase sector before writing
 8003080:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8003084:	f5a3 6332 	sub.w	r3, r3, #2848	@ 0xb20
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	f7ff fe87 	bl	8002d9c <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 800308e:	f001 f991 	bl	80043b4 <HAL_FLASH_Unlock>
	for (i = 0; i < (num_protocols + 1); i++) {
 8003092:	2300      	movs	r3, #0
 8003094:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003098:	f102 021c 	add.w	r2, r2, #28
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e078      	b.n	8003192 <storeProtocol+0x312>
		for (j = 0; j < MAX_LINES; j++) {
 80030a0:	2300      	movs	r3, #0
 80030a2:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80030a6:	f102 0218 	add.w	r2, r2, #24
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	e05f      	b.n	800316e <storeProtocol+0x2ee>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			if ((new_protocol[j][0] != '\0') && (new_protocol[j][0] != 0xFF)) {
 80030ae:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80030b2:	f103 0318 	add.w	r3, r3, #24
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	015b      	lsls	r3, r3, #5
 80030ba:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 80030be:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d045      	beq.n	8003158 <storeProtocol+0x2d8>
 80030cc:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80030d0:	f103 0318 	add.w	r3, r3, #24
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	015b      	lsls	r3, r3, #5
 80030d8:	f507 6232 	add.w	r2, r7, #2848	@ 0xb20
 80030dc:	f6a2 321c 	subw	r2, r2, #2844	@ 0xb1c
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2bff      	cmp	r3, #255	@ 0xff
 80030e8:	d036      	beq.n	8003158 <storeProtocol+0x2d8>
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80030ea:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80030ee:	f103 031c 	add.w	r3, r3, #28
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f241 7270 	movw	r2, #6000	@ 0x1770
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 80030fc:	461a      	mov	r2, r3
 80030fe:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003102:	f103 0318 	add.w	r3, r3, #24
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	015b      	lsls	r3, r3, #5
 800310a:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800310c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003110:	f102 0214 	add.w	r2, r2, #20
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	4413      	add	r3, r2
 8003118:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800311c:	f102 020c 	add.w	r2, r2, #12
 8003120:	6013      	str	r3, [r2, #0]
				//printf("len: %d and data: %s", strlen(protocolStorage[i][j]), protocolStorage[i][j]);
				write_to_flash(protocolStorage[i][j], temp_address);
 8003122:	f107 0320 	add.w	r3, r7, #32
 8003126:	3b18      	subs	r3, #24
 8003128:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800312c:	f102 021c 	add.w	r2, r2, #28
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	21c8      	movs	r1, #200	@ 0xc8
 8003134:	fb02 f101 	mul.w	r1, r2, r1
 8003138:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800313c:	f102 0218 	add.w	r2, r2, #24
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	440a      	add	r2, r1
 8003144:	0152      	lsls	r2, r2, #5
 8003146:	4413      	add	r3, r2
 8003148:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800314c:	f102 020c 	add.w	r2, r2, #12
 8003150:	6811      	ldr	r1, [r2, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fe36 	bl	8002dc4 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8003158:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800315c:	f103 0318 	add.w	r3, r3, #24
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3301      	adds	r3, #1
 8003164:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003168:	f102 0218 	add.w	r2, r2, #24
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003172:	f103 0318 	add.w	r3, r3, #24
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2bc7      	cmp	r3, #199	@ 0xc7
 800317a:	dd98      	ble.n	80030ae <storeProtocol+0x22e>
	for (i = 0; i < (num_protocols + 1); i++) {
 800317c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003180:	f103 031c 	add.w	r3, r3, #28
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800318c:	f102 021c 	add.w	r2, r2, #28
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003196:	f103 0313 	add.w	r3, r3, #19
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80031a0:	f102 021c 	add.w	r2, r2, #28
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	f77f af7a 	ble.w	80030a0 <storeProtocol+0x220>
			}
		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 80031ac:	f001 f924 	bl	80043f8 <HAL_FLASH_Lock>

	//output:flash memory now has the lines of protocol storage in there
	//the remaining space is still 0xFF in flash
	return 1;
 80031b0:	2301      	movs	r3, #1
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	f507 4796 	add.w	r7, r7, #19200	@ 0x4b00
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <get_num_protocols_in_sector>:

//return number of protocols in the sector
uint8_t get_num_protocols_in_sector(uint32_t sector) {
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
	uint32_t flash_address = get_sector_address(sector);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fafe 	bl	80037c8 <get_sector_address>
 80031cc:	6138      	str	r0, [r7, #16]

	uint8_t i = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80031d2:	2300      	movs	r3, #0
 80031d4:	75fb      	strb	r3, [r7, #23]
 80031d6:	e011      	b.n	80031fc <get_num_protocols_in_sector+0x3e>
		uint8_t first_char = *(uint8_t*) (flash_address + i * PROTOCOL_SIZE);
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	f241 7270 	movw	r2, #6000	@ 0x1770
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	73fb      	strb	r3, [r7, #15]
		//memory in flash is default 0xFF
		if (first_char == 0xFF) {
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2bff      	cmp	r3, #255	@ 0xff
 80031f0:	d101      	bne.n	80031f6 <get_num_protocols_in_sector+0x38>
			return i;
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	e006      	b.n	8003204 <get_num_protocols_in_sector+0x46>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
 80031f8:	3301      	adds	r3, #1
 80031fa:	75fb      	strb	r3, [r7, #23]
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d9ea      	bls.n	80031d8 <get_num_protocols_in_sector+0x1a>
		}
	}
	return i;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <getFreeSector>:

//check each sector sequentially for any space.
//return the first sector number you find that has space
uint8_t getFreeSector(void) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
	uint8_t i = 1;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
	//check every sector starting at 1
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	e01f      	b.n	800325c <getFreeSector+0x50>
		//check each potential protocol slot in the current sector
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 800321c:	2300      	movs	r3, #0
 800321e:	73bb      	strb	r3, [r7, #14]
 8003220:	e016      	b.n	8003250 <getFreeSector+0x44>
			//check first char of the given protocol in the current sector
			uint32_t flash_address = get_sector_address(i) + j * PROTOCOL_SIZE;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 facf 	bl	80037c8 <get_sector_address>
 800322a:	4602      	mov	r2, r0
 800322c:	7bbb      	ldrb	r3, [r7, #14]
 800322e:	f241 7170 	movw	r1, #6000	@ 0x1770
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	60bb      	str	r3, [r7, #8]
			char first_char = *(char*) (flash_address);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	71fb      	strb	r3, [r7, #7]
			//if memory address is empty, this sector is free
			if (first_char == 0xFF) {
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	2bff      	cmp	r3, #255	@ 0xff
 8003244:	d101      	bne.n	800324a <getFreeSector+0x3e>
				return i;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	e00e      	b.n	8003268 <getFreeSector+0x5c>
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 800324a:	7bbb      	ldrb	r3, [r7, #14]
 800324c:	3301      	adds	r3, #1
 800324e:	73bb      	strb	r3, [r7, #14]
 8003250:	7bbb      	ldrb	r3, [r7, #14]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d9e5      	bls.n	8003222 <getFreeSector+0x16>
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	3301      	adds	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b0e      	cmp	r3, #14
 8003260:	d9dc      	bls.n	800321c <getFreeSector+0x10>
			}
		}
	}
	//if somehow all sectors are full, return 15 or higher (16 in this case)
	return i + 1;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	3301      	adds	r3, #1
 8003266:	b2db      	uxtb	r3, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <transmitProtocol>:

/**
 * @brief: Transmit protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 */
void transmitProtocol(uint32_t sector, uint32_t offset) {
 8003270:	b580      	push	{r7, lr}
 8003272:	b08c      	sub	sp, #48	@ 0x30
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	f107 030c 	add.w	r3, r7, #12
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	605a      	str	r2, [r3, #4]
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	60da      	str	r2, [r3, #12]
 800328c:	611a      	str	r2, [r3, #16]
 800328e:	615a      	str	r2, [r3, #20]
 8003290:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fa98 	bl	80037c8 <get_sector_address>
 8003298:	4602      	mov	r2, r0
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f241 7170 	movw	r1, #6000	@ 0x1770
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	//printf("\nNew Protocol\n"); //just for debugging

	//we need to process up to 1028 G-code commands
	//but if we run into an invalid string, gcode file is over
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80032a8:	2300      	movs	r3, #0
 80032aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80032ae:	e028      	b.n	8003302 <transmitProtocol+0x92>
		//an alternative to resetting the temp buffer is to only read up to newline
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	2220      	movs	r2, #32
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f00b f973 	bl	800e5a4 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 80032be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032c2:	015b      	lsls	r3, r3, #5
 80032c4:	461a      	mov	r2, r3
 80032c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c8:	441a      	add	r2, r3
 80032ca:	f107 0308 	add.w	r3, r7, #8
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fda0 	bl	8002e16 <read_from_flash>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <transmitProtocol+0x88>
			//printf("%s", output);
			HAL_UART_Transmit(&huart2, (uint8_t*) output, strlen(output),
 80032dc:	f107 0308 	add.w	r3, r7, #8
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fc ff85 	bl	80001f0 <strlen>
 80032e6:	4603      	mov	r3, r0
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	f107 0108 	add.w	r1, r7, #8
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	4808      	ldr	r0, [pc, #32]	@ (8003314 <transmitProtocol+0xa4>)
 80032f4:	f005 fba0 	bl	8008a38 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80032f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032fc:	3301      	adds	r3, #1
 80032fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003306:	2bc7      	cmp	r3, #199	@ 0xc7
 8003308:	d9d2      	bls.n	80032b0 <transmitProtocol+0x40>
			HAL_MAX_DELAY);
		}
	}
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	3730      	adds	r7, #48	@ 0x30
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	200004b4 	.word	0x200004b4

08003318 <queueProtocol>:

/**
 * @brief: Queue protocol from flash memory to RAM buffer
 * @param sector: which sector the protocol is stored in
 */
void queueProtocol(uint32_t sector, uint32_t offset) {
 8003318:	b5b0      	push	{r4, r5, r7, lr}
 800331a:	b08c      	sub	sp, #48	@ 0x30
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	f107 030c 	add.w	r3, r7, #12
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	609a      	str	r2, [r3, #8]
 8003332:	60da      	str	r2, [r3, #12]
 8003334:	611a      	str	r2, [r3, #16]
 8003336:	615a      	str	r2, [r3, #20]
 8003338:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fa44 	bl	80037c8 <get_sector_address>
 8003340:	4602      	mov	r2, r0
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f241 7170 	movw	r1, #6000	@ 0x1770
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t last_line = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8003356:	2300      	movs	r3, #0
 8003358:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800335c:	e030      	b.n	80033c0 <queueProtocol+0xa8>
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 800335e:	f107 0308 	add.w	r3, r7, #8
 8003362:	2220      	movs	r2, #32
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f00b f91c 	bl	800e5a4 <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 800336c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003370:	015b      	lsls	r3, r3, #5
 8003372:	461a      	mov	r2, r3
 8003374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003376:	441a      	add	r2, r3
 8003378:	f107 0308 	add.w	r3, r7, #8
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fd49 	bl	8002e16 <read_from_flash>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d015      	beq.n	80033b6 <queueProtocol+0x9e>
			strcpy(queueBuffer[queueSize][i], output);
 800338a:	4b21      	ldr	r3, [pc, #132]	@ (8003410 <queueProtocol+0xf8>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	4619      	mov	r1, r3
 8003390:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003394:	22c8      	movs	r2, #200	@ 0xc8
 8003396:	fb01 f202 	mul.w	r2, r1, r2
 800339a:	4413      	add	r3, r2
 800339c:	015b      	lsls	r3, r3, #5
 800339e:	4a1d      	ldr	r2, [pc, #116]	@ (8003414 <queueProtocol+0xfc>)
 80033a0:	4413      	add	r3, r2
 80033a2:	f107 0208 	add.w	r2, r7, #8
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f00b f986 	bl	800e6ba <strcpy>
			last_line = i;
 80033ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80033b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033ba:	3301      	adds	r3, #1
 80033bc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80033c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80033c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80033c6:	d9ca      	bls.n	800335e <queueProtocol+0x46>
		}
	}
	//dont store the tab operator of protocol for queueing
	queueBuffer[queueSize][last_line][strlen(queueBuffer[queueSize][last_line])
 80033c8:	4b11      	ldr	r3, [pc, #68]	@ (8003410 <queueProtocol+0xf8>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461d      	mov	r5, r3
 80033ce:	f897 402f 	ldrb.w	r4, [r7, #47]	@ 0x2f
 80033d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003410 <queueProtocol+0xf8>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	4619      	mov	r1, r3
 80033d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80033dc:	22c8      	movs	r2, #200	@ 0xc8
 80033de:	fb01 f202 	mul.w	r2, r1, r2
 80033e2:	4413      	add	r3, r2
 80033e4:	015b      	lsls	r3, r3, #5
 80033e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003414 <queueProtocol+0xfc>)
 80033e8:	4413      	add	r3, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fc ff00 	bl	80001f0 <strlen>
 80033f0:	4603      	mov	r3, r0
			- 1] = NULL_CHAR; //strlen gives the size of string. tab operator is size-1
 80033f2:	3b01      	subs	r3, #1
 80033f4:	4907      	ldr	r1, [pc, #28]	@ (8003414 <queueProtocol+0xfc>)
 80033f6:	22c8      	movs	r2, #200	@ 0xc8
 80033f8:	fb05 f202 	mul.w	r2, r5, r2
 80033fc:	4422      	add	r2, r4
 80033fe:	0152      	lsls	r2, r2, #5
 8003400:	440a      	add	r2, r1
 8003402:	4413      	add	r3, r2
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
}
 8003408:	bf00      	nop
 800340a:	3730      	adds	r7, #48	@ 0x30
 800340c:	46bd      	mov	sp, r7
 800340e:	bdb0      	pop	{r4, r5, r7, pc}
 8003410:	2000ff6c 	.word	0x2000ff6c
 8003414:	2000056c 	.word	0x2000056c

08003418 <transmitQueuedProtocols>:

/**
 * @brief: Transmit queued protocols from RAM buffer to ESP32 via UART string-by-string
 * @param queueSize:
 */
void transmitQueuedProtocols(uint8_t queueSize) {
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
	//i need to send a filler title
	//printf("FillerTitle\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) "Filler\r\n", strlen("Filler\r\n"),
 8003422:	f04f 33ff 	mov.w	r3, #4294967295
 8003426:	2208      	movs	r2, #8
 8003428:	491f      	ldr	r1, [pc, #124]	@ (80034a8 <transmitQueuedProtocols+0x90>)
 800342a:	4820      	ldr	r0, [pc, #128]	@ (80034ac <transmitQueuedProtocols+0x94>)
 800342c:	f005 fb04 	bl	8008a38 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	//transmit the queued protocols
	for (uint8_t i = 0; i < queueSize; i++) {
 8003430:	2300      	movs	r3, #0
 8003432:	73fb      	strb	r3, [r7, #15]
 8003434:	e028      	b.n	8003488 <transmitQueuedProtocols+0x70>
		for (uint8_t j = 1; j < MAX_LINES; j++) {
 8003436:	2301      	movs	r3, #1
 8003438:	73bb      	strb	r3, [r7, #14]
 800343a:	e01f      	b.n	800347c <transmitQueuedProtocols+0x64>
			//printf(queueBuffer[i][j]);
			HAL_UART_Transmit(&huart2, (uint8_t*) queueBuffer[i][j],
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	7bbb      	ldrb	r3, [r7, #14]
 8003440:	21c8      	movs	r1, #200	@ 0xc8
 8003442:	fb01 f202 	mul.w	r2, r1, r2
 8003446:	4413      	add	r3, r2
 8003448:	015b      	lsls	r3, r3, #5
 800344a:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <transmitQueuedProtocols+0x98>)
 800344c:	189c      	adds	r4, r3, r2
					strlen(queueBuffer[i][j]), HAL_MAX_DELAY);
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	7bbb      	ldrb	r3, [r7, #14]
 8003452:	21c8      	movs	r1, #200	@ 0xc8
 8003454:	fb01 f202 	mul.w	r2, r1, r2
 8003458:	4413      	add	r3, r2
 800345a:	015b      	lsls	r3, r3, #5
 800345c:	4a14      	ldr	r2, [pc, #80]	@ (80034b0 <transmitQueuedProtocols+0x98>)
 800345e:	4413      	add	r3, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f7fc fec5 	bl	80001f0 <strlen>
 8003466:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) queueBuffer[i][j],
 8003468:	b29a      	uxth	r2, r3
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	4621      	mov	r1, r4
 8003470:	480e      	ldr	r0, [pc, #56]	@ (80034ac <transmitQueuedProtocols+0x94>)
 8003472:	f005 fae1 	bl	8008a38 <HAL_UART_Transmit>
		for (uint8_t j = 1; j < MAX_LINES; j++) {
 8003476:	7bbb      	ldrb	r3, [r7, #14]
 8003478:	3301      	adds	r3, #1
 800347a:	73bb      	strb	r3, [r7, #14]
 800347c:	7bbb      	ldrb	r3, [r7, #14]
 800347e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003480:	d9dc      	bls.n	800343c <transmitQueuedProtocols+0x24>
	for (uint8_t i = 0; i < queueSize; i++) {
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	3301      	adds	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
 8003488:	7bfa      	ldrb	r2, [r7, #15]
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	429a      	cmp	r2, r3
 800348e:	d3d2      	bcc.n	8003436 <transmitQueuedProtocols+0x1e>
//	//debugging print
//	for (int a = 0; a < queueSize; a++) {
//		printf("%s\n", queueBuffer[a]);
//	}
	//finish with a tab operator
	HAL_UART_Transmit(&huart2, (uint8_t*) "\t", 1, HAL_MAX_DELAY);
 8003490:	f04f 33ff 	mov.w	r3, #4294967295
 8003494:	2201      	movs	r2, #1
 8003496:	4907      	ldr	r1, [pc, #28]	@ (80034b4 <transmitQueuedProtocols+0x9c>)
 8003498:	4804      	ldr	r0, [pc, #16]	@ (80034ac <transmitQueuedProtocols+0x94>)
 800349a:	f005 facd 	bl	8008a38 <HAL_UART_Transmit>
}
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}
 80034a6:	bf00      	nop
 80034a8:	0800f598 	.word	0x0800f598
 80034ac:	200004b4 	.word	0x200004b4
 80034b0:	2000056c 	.word	0x2000056c
 80034b4:	0800f5a4 	.word	0x0800f5a4

080034b8 <deleteProtocol>:
 * @brief: Delete protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 * @param offset: the exact slot in the sector the protocol is stored in
 * @retval: none
 */
void deleteProtocol(uint32_t sector, uint32_t offset) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	f5ad 4d96 	sub.w	sp, sp, #19200	@ 0x4b00
 80034be:	b09c      	sub	sp, #112	@ 0x70
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80034c6:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 80034ca:	6018      	str	r0, [r3, #0]
 80034cc:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80034d0:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 80034d4:	6019      	str	r1, [r3, #0]
	//initialize variables
	uint8_t new_offset = offset + 1; //have it range from 1-3
 80034d6:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80034da:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	3301      	adds	r3, #1
 80034e4:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80034e8:	f102 025f 	add.w	r2, r2, #95	@ 0x5f
 80034ec:	7013      	strb	r3, [r2, #0]
	int i = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80034f4:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 80034f8:	6013      	str	r3, [r2, #0]
	int j = 0; //indices for moving through flash memory
 80034fa:	2300      	movs	r3, #0
 80034fc:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003500:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003504:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 8003506:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800350a:	f6a3 3324 	subw	r3, r3, #2852	@ 0xb24
 800350e:	4618      	mov	r0, r3
 8003510:	f44f 4396 	mov.w	r3, #19200	@ 0x4b00
 8003514:	461a      	mov	r2, r3
 8003516:	2100      	movs	r1, #0
 8003518:	f00b f844 	bl	800e5a4 <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 800351c:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003520:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	f000 f94f 	bl	80037c8 <get_sector_address>
 800352a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800352e:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8003532:	6018      	str	r0, [r3, #0]
	char trashLine[MAX_LINE_LENGTH];
	memset(trashLine, 0xFF, sizeof(trashLine));
 8003534:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003538:	3b44      	subs	r3, #68	@ 0x44
 800353a:	2220      	movs	r2, #32
 800353c:	21ff      	movs	r1, #255	@ 0xff
 800353e:	4618      	mov	r0, r3
 8003540:	f00b f830 	bl	800e5a4 <memset>
	char nullLine[MAX_LINE_LENGTH];
	memset(nullLine, 0x00, sizeof(nullLine));
 8003544:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003548:	3b64      	subs	r3, #100	@ 0x64
 800354a:	2220      	movs	r2, #32
 800354c:	2100      	movs	r1, #0
 800354e:	4618      	mov	r0, r3
 8003550:	f00b f828 	bl	800e5a4 <memset>
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 8003554:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003558:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	f7ff fe2e 	bl	80031be <get_num_protocols_in_sector>
 8003562:	4603      	mov	r3, r0
 8003564:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003568:	f102 0257 	add.w	r2, r2, #87	@ 0x57
 800356c:	7013      	strb	r3, [r2, #0]

	int a = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003574:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003578:	6013      	str	r3, [r2, #0]
	int b = 0; //separate indices for protocolstorage
 800357a:	2300      	movs	r3, #0
 800357c:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003580:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003584:	6013      	str	r3, [r2, #0]

	//copy all protocols in sector to local buffer
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003586:	2300      	movs	r3, #0
 8003588:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800358c:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e082      	b.n	800369a <deleteProtocol+0x1e2>
		if (i != offset) {
 8003594:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003598:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035a2:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 80035a6:	6812      	ldr	r2, [r2, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d06b      	beq.n	8003684 <deleteProtocol+0x1cc>
			//copy all lines of the protocol into the buffer
			for (j = 0; j < MAX_LINES; j++) {
 80035ac:	2300      	movs	r3, #0
 80035ae:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035b2:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	e04c      	b.n	8003654 <deleteProtocol+0x19c>
				//get the address for the current line in the current protocol
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80035ba:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80035be:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f241 7270 	movw	r2, #6000	@ 0x1770
 80035c8:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 80035cc:	461a      	mov	r2, r3
 80035ce:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80035d2:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	015b      	lsls	r3, r3, #5
 80035da:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80035dc:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035e0:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035ec:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 80035f0:	6013      	str	r3, [r2, #0]
				//read lines from memory into buffer until you reach garbage
				read_from_flash(protocolStorage[a][b], temp_address); //only updates protocolStorage if its a valid line from memory
 80035f2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80035f6:	3b24      	subs	r3, #36	@ 0x24
 80035f8:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80035fc:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	21c8      	movs	r1, #200	@ 0xc8
 8003604:	fb02 f101 	mul.w	r1, r2, r1
 8003608:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800360c:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	440a      	add	r2, r1
 8003614:	0152      	lsls	r2, r2, #5
 8003616:	4413      	add	r3, r2
 8003618:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800361c:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8003620:	6811      	ldr	r1, [r2, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fbf7 	bl	8002e16 <read_from_flash>
				b++;
 8003628:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800362c:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3301      	adds	r3, #1
 8003634:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003638:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 800363c:	6013      	str	r3, [r2, #0]
			for (j = 0; j < MAX_LINES; j++) {
 800363e:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003642:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800364e:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003658:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003660:	ddab      	ble.n	80035ba <deleteProtocol+0x102>
			}
			a++;
 8003662:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003666:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003672:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003676:	6013      	str	r3, [r2, #0]
			b = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800367e:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003682:	6013      	str	r3, [r2, #0]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8003684:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003688:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3301      	adds	r3, #1
 8003690:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003694:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800369e:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	f77f af75 	ble.w	8003594 <deleteProtocol+0xdc>
		}
	}

	//write existing protocols except the one to be deleted back to flash
	erase_sector(sector); //erase sector before writing
 80036aa:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80036ae:	f6a3 336c 	subw	r3, r3, #2924	@ 0xb6c
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	f7ff fb72 	bl	8002d9c <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 80036b8:	f000 fe7c 	bl	80043b4 <HAL_FLASH_Unlock>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80036bc:	2300      	movs	r3, #0
 80036be:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80036c2:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e05a      	b.n	8003780 <deleteProtocol+0x2c8>
		for (j = 0; j < MAX_LINES; j++) {
 80036ca:	2300      	movs	r3, #0
 80036cc:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80036d0:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e041      	b.n	800375c <deleteProtocol+0x2a4>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80036d8:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80036dc:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f241 7270 	movw	r2, #6000	@ 0x1770
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 80036ea:	461a      	mov	r2, r3
 80036ec:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 80036f0:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	015b      	lsls	r3, r3, #5
 80036f8:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80036fa:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 80036fe:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	4413      	add	r3, r2
 8003706:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800370a:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 800370e:	6013      	str	r3, [r2, #0]
			write_to_flash(protocolStorage[i][j], temp_address);
 8003710:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003714:	3b24      	subs	r3, #36	@ 0x24
 8003716:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800371a:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	21c8      	movs	r1, #200	@ 0xc8
 8003722:	fb02 f101 	mul.w	r1, r2, r1
 8003726:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800372a:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	440a      	add	r2, r1
 8003732:	0152      	lsls	r2, r2, #5
 8003734:	4413      	add	r3, r2
 8003736:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800373a:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 800373e:	6811      	ldr	r1, [r2, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fb3f 	bl	8002dc4 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 8003746:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800374a:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3301      	adds	r3, #1
 8003752:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 8003756:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003760:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2bc7      	cmp	r3, #199	@ 0xc7
 8003768:	ddb6      	ble.n	80036d8 <deleteProtocol+0x220>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 800376a:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 800376e:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	f507 4296 	add.w	r2, r7, #19200	@ 0x4b00
 800377a:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	f507 4396 	add.w	r3, r7, #19200	@ 0x4b00
 8003784:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b02      	cmp	r3, #2
 800378c:	dd9d      	ble.n	80036ca <deleteProtocol+0x212>

		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 800378e:	f000 fe33 	bl	80043f8 <HAL_FLASH_Lock>
}
 8003792:	bf00      	nop
 8003794:	f507 4796 	add.w	r7, r7, #19200	@ 0x4b00
 8003798:	3770      	adds	r7, #112	@ 0x70
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <SendStopMotorsMessage>:
//		}
//	}
//	HAL_FLASH_Lock();  // Unlock flash for writing
//}

void SendStopMotorsMessage(void) {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
	//printf("S\n");
	HAL_UART_Transmit(&huart2, (uint8_t*) "S", 1, HAL_MAX_DELAY);
 80037a4:	f04f 33ff 	mov.w	r3, #4294967295
 80037a8:	2201      	movs	r2, #1
 80037aa:	4904      	ldr	r1, [pc, #16]	@ (80037bc <SendStopMotorsMessage+0x1c>)
 80037ac:	4804      	ldr	r0, [pc, #16]	@ (80037c0 <SendStopMotorsMessage+0x20>)
 80037ae:	f005 f943 	bl	8008a38 <HAL_UART_Transmit>
	rx_byte = 0; //otherwise when you run a new protocol is has old info
 80037b2:	4b04      	ldr	r3, [pc, #16]	@ (80037c4 <SendStopMotorsMessage+0x24>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
}
 80037b8:	bf00      	nop
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	0800f5a8 	.word	0x0800f5a8
 80037c0:	200004b4 	.word	0x200004b4
 80037c4:	2000054d 	.word	0x2000054d

080037c8 <get_sector_address>:
void write_number_to_flash(uint32_t flash_address, uint32_t number) {
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, number);
}

//I name sectors from 1-14. the actual sectors are from 5-23. this functions maps them
uint32_t get_sector_address(uint32_t sector) {
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	switch (sector) {
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	2b0d      	cmp	r3, #13
 80037d6:	d83b      	bhi.n	8003850 <get_sector_address+0x88>
 80037d8:	a201      	add	r2, pc, #4	@ (adr r2, 80037e0 <get_sector_address+0x18>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	08003819 	.word	0x08003819
 80037e4:	0800381d 	.word	0x0800381d
 80037e8:	08003821 	.word	0x08003821
 80037ec:	08003825 	.word	0x08003825
 80037f0:	08003829 	.word	0x08003829
 80037f4:	0800382d 	.word	0x0800382d
 80037f8:	08003831 	.word	0x08003831
 80037fc:	08003835 	.word	0x08003835
 8003800:	08003839 	.word	0x08003839
 8003804:	0800383d 	.word	0x0800383d
 8003808:	08003841 	.word	0x08003841
 800380c:	08003845 	.word	0x08003845
 8003810:	08003849 	.word	0x08003849
 8003814:	0800384d 	.word	0x0800384d
	case 1:
		return SECTOR_5;
 8003818:	4b11      	ldr	r3, [pc, #68]	@ (8003860 <get_sector_address+0x98>)
 800381a:	e01a      	b.n	8003852 <get_sector_address+0x8a>
	case 2:
		return SECTOR_6;
 800381c:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <get_sector_address+0x9c>)
 800381e:	e018      	b.n	8003852 <get_sector_address+0x8a>
	case 3:
		return SECTOR_7;
 8003820:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <get_sector_address+0xa0>)
 8003822:	e016      	b.n	8003852 <get_sector_address+0x8a>
	case 4:
		return SECTOR_8;
 8003824:	4b11      	ldr	r3, [pc, #68]	@ (800386c <get_sector_address+0xa4>)
 8003826:	e014      	b.n	8003852 <get_sector_address+0x8a>
	case 5:
		return SECTOR_9;
 8003828:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <get_sector_address+0xa8>)
 800382a:	e012      	b.n	8003852 <get_sector_address+0x8a>
	case 6:
		return SECTOR_10;
 800382c:	4b11      	ldr	r3, [pc, #68]	@ (8003874 <get_sector_address+0xac>)
 800382e:	e010      	b.n	8003852 <get_sector_address+0x8a>
	case 7:
		return SECTOR_11;
 8003830:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <get_sector_address+0xb0>)
 8003832:	e00e      	b.n	8003852 <get_sector_address+0x8a>
	case 8:
		return SECTOR_17;
 8003834:	4b11      	ldr	r3, [pc, #68]	@ (800387c <get_sector_address+0xb4>)
 8003836:	e00c      	b.n	8003852 <get_sector_address+0x8a>
	case 9:
		return SECTOR_18;
 8003838:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <get_sector_address+0xb8>)
 800383a:	e00a      	b.n	8003852 <get_sector_address+0x8a>
	case 10:
		return SECTOR_19;
 800383c:	4b11      	ldr	r3, [pc, #68]	@ (8003884 <get_sector_address+0xbc>)
 800383e:	e008      	b.n	8003852 <get_sector_address+0x8a>
	case 11:
		return SECTOR_20;
 8003840:	4b11      	ldr	r3, [pc, #68]	@ (8003888 <get_sector_address+0xc0>)
 8003842:	e006      	b.n	8003852 <get_sector_address+0x8a>
	case 12:
		return SECTOR_21;
 8003844:	4b11      	ldr	r3, [pc, #68]	@ (800388c <get_sector_address+0xc4>)
 8003846:	e004      	b.n	8003852 <get_sector_address+0x8a>
	case 13:
		return SECTOR_22;
 8003848:	4b11      	ldr	r3, [pc, #68]	@ (8003890 <get_sector_address+0xc8>)
 800384a:	e002      	b.n	8003852 <get_sector_address+0x8a>
	case 14:
		return SECTOR_23;
 800384c:	4b11      	ldr	r3, [pc, #68]	@ (8003894 <get_sector_address+0xcc>)
 800384e:	e000      	b.n	8003852 <get_sector_address+0x8a>
	default:
		break;
 8003850:	bf00      	nop
	}
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	08020000 	.word	0x08020000
 8003864:	08040000 	.word	0x08040000
 8003868:	08060000 	.word	0x08060000
 800386c:	08080000 	.word	0x08080000
 8003870:	080a0000 	.word	0x080a0000
 8003874:	080c0000 	.word	0x080c0000
 8003878:	080e0000 	.word	0x080e0000
 800387c:	08120000 	.word	0x08120000
 8003880:	08140000 	.word	0x08140000
 8003884:	08160000 	.word	0x08160000
 8003888:	08180000 	.word	0x08180000
 800388c:	081a0000 	.word	0x081a0000
 8003890:	081c0000 	.word	0x081c0000
 8003894:	081e0000 	.word	0x081e0000

08003898 <sector_mapping>:

uint32_t sector_mapping(uint32_t sector) {
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	switch (sector) {
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	2b0d      	cmp	r3, #13
 80038a6:	d83b      	bhi.n	8003920 <sector_mapping+0x88>
 80038a8:	a201      	add	r2, pc, #4	@ (adr r2, 80038b0 <sector_mapping+0x18>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038e9 	.word	0x080038e9
 80038b4:	080038ed 	.word	0x080038ed
 80038b8:	080038f1 	.word	0x080038f1
 80038bc:	080038f5 	.word	0x080038f5
 80038c0:	080038f9 	.word	0x080038f9
 80038c4:	080038fd 	.word	0x080038fd
 80038c8:	08003901 	.word	0x08003901
 80038cc:	08003905 	.word	0x08003905
 80038d0:	08003909 	.word	0x08003909
 80038d4:	0800390d 	.word	0x0800390d
 80038d8:	08003911 	.word	0x08003911
 80038dc:	08003915 	.word	0x08003915
 80038e0:	08003919 	.word	0x08003919
 80038e4:	0800391d 	.word	0x0800391d
	case 1:
		return 5;
 80038e8:	2305      	movs	r3, #5
 80038ea:	e019      	b.n	8003920 <sector_mapping+0x88>
	case 2:
		return 6;
 80038ec:	2306      	movs	r3, #6
 80038ee:	e017      	b.n	8003920 <sector_mapping+0x88>
	case 3:
		return 7;
 80038f0:	2307      	movs	r3, #7
 80038f2:	e015      	b.n	8003920 <sector_mapping+0x88>
	case 4:
		return 8;
 80038f4:	2308      	movs	r3, #8
 80038f6:	e013      	b.n	8003920 <sector_mapping+0x88>
	case 5:
		return 9;
 80038f8:	2309      	movs	r3, #9
 80038fa:	e011      	b.n	8003920 <sector_mapping+0x88>
	case 6:
		return 10;
 80038fc:	230a      	movs	r3, #10
 80038fe:	e00f      	b.n	8003920 <sector_mapping+0x88>
	case 7:
		return 11;
 8003900:	230b      	movs	r3, #11
 8003902:	e00d      	b.n	8003920 <sector_mapping+0x88>
	case 8:
		return 17;
 8003904:	2311      	movs	r3, #17
 8003906:	e00b      	b.n	8003920 <sector_mapping+0x88>
	case 9:
		return 18;
 8003908:	2312      	movs	r3, #18
 800390a:	e009      	b.n	8003920 <sector_mapping+0x88>
	case 10:
		return 19;
 800390c:	2313      	movs	r3, #19
 800390e:	e007      	b.n	8003920 <sector_mapping+0x88>
	case 11:
		return 20;
 8003910:	2314      	movs	r3, #20
 8003912:	e005      	b.n	8003920 <sector_mapping+0x88>
	case 12:
		return 21;
 8003914:	2315      	movs	r3, #21
 8003916:	e003      	b.n	8003920 <sector_mapping+0x88>
	case 13:
		return 22;
 8003918:	2316      	movs	r3, #22
 800391a:	e001      	b.n	8003920 <sector_mapping+0x88>
	case 14:
		return 23;
 800391c:	2317      	movs	r3, #23
 800391e:	e7ff      	b.n	8003920 <sector_mapping+0x88>
	}
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_GPIO_EXTI_Callback>:

/*** Touchscreen Interrupt Handler ****/
//t_irq_pin is default high. it gets driven low while the screen is touched.
//the interrupt is triggered on falling edge.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == T_IRQ_Pin) {
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	2b20      	cmp	r3, #32
 800393a:	d11d      	bne.n	8003978 <HAL_GPIO_EXTI_Callback+0x4c>

		uint32_t current_time = HAL_GetTick(); // ms since startup
 800393c:	f000 fb12 	bl	8003f64 <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]

		//perform some debouncing for interrupt pin
		if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY_MS) {
 8003942:	4b0f      	ldr	r3, [pc, #60]	@ (8003980 <HAL_GPIO_EXTI_Callback+0x54>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b1e      	cmp	r3, #30
 800394c:	d914      	bls.n	8003978 <HAL_GPIO_EXTI_Callback+0x4c>
			last_interrupt_time = current_time;
 800394e:	4a0c      	ldr	r2, [pc, #48]	@ (8003980 <HAL_GPIO_EXTI_Callback+0x54>)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6013      	str	r3, [r2, #0]

			//handle the actual interrupt below
			uint8_t currentTouchedState = HAL_GPIO_ReadPin(T_IRQ_GPIO_Port,
 8003954:	2120      	movs	r1, #32
 8003956:	480b      	ldr	r0, [pc, #44]	@ (8003984 <HAL_GPIO_EXTI_Callback+0x58>)
 8003958:	f001 f898 	bl	8004a8c <HAL_GPIO_ReadPin>
 800395c:	4603      	mov	r3, r0
 800395e:	72fb      	strb	r3, [r7, #11]
//			}
//			if (currentTouchedState == 0) {
//				printf("low");
//			}
			//printf("%d\n", currentTouchedState)
			if (XPT2046_TouchPressed() && !touchFlag) {
 8003960:	f7fc fe2e 	bl	80005c0 <XPT2046_TouchPressed>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <HAL_GPIO_EXTI_Callback+0x4c>
 800396a:	4b07      	ldr	r3, [pc, #28]	@ (8003988 <HAL_GPIO_EXTI_Callback+0x5c>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <HAL_GPIO_EXTI_Callback+0x4c>
				touchFlag = 1;
 8003972:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003974:	2201      	movs	r2, #1
 8003976:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	2000055c 	.word	0x2000055c
 8003984:	40020400 	.word	0x40020400
 8003988:	20000560 	.word	0x20000560

0800398c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003990:	b672      	cpsid	i
}
 8003992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <Error_Handler+0x8>

08003998 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	607b      	str	r3, [r7, #4]
 80039a2:	4b10      	ldr	r3, [pc, #64]	@ (80039e4 <HAL_MspInit+0x4c>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a6:	4a0f      	ldr	r2, [pc, #60]	@ (80039e4 <HAL_MspInit+0x4c>)
 80039a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ae:	4b0d      	ldr	r3, [pc, #52]	@ (80039e4 <HAL_MspInit+0x4c>)
 80039b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	4b09      	ldr	r3, [pc, #36]	@ (80039e4 <HAL_MspInit+0x4c>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c2:	4a08      	ldr	r2, [pc, #32]	@ (80039e4 <HAL_MspInit+0x4c>)
 80039c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ca:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <HAL_MspInit+0x4c>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800

080039e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	@ 0x28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	609a      	str	r2, [r3, #8]
 80039fc:	60da      	str	r2, [r3, #12]
 80039fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a19      	ldr	r2, [pc, #100]	@ (8003a6c <HAL_SPI_MspInit+0x84>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d12b      	bne.n	8003a62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	4b18      	ldr	r3, [pc, #96]	@ (8003a70 <HAL_SPI_MspInit+0x88>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	4a17      	ldr	r2, [pc, #92]	@ (8003a70 <HAL_SPI_MspInit+0x88>)
 8003a14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a1a:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <HAL_SPI_MspInit+0x88>)
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	4b11      	ldr	r3, [pc, #68]	@ (8003a70 <HAL_SPI_MspInit+0x88>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2e:	4a10      	ldr	r2, [pc, #64]	@ (8003a70 <HAL_SPI_MspInit+0x88>)
 8003a30:	f043 0310 	orr.w	r3, r3, #16
 8003a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a36:	4b0e      	ldr	r3, [pc, #56]	@ (8003a70 <HAL_SPI_MspInit+0x88>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = T_SCK_Pin|T_CS_Pin|T_MISO_Pin|T_MOSI_Pin;
 8003a42:	2374      	movs	r3, #116	@ 0x74
 8003a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003a52:	2305      	movs	r3, #5
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a56:	f107 0314 	add.w	r3, r7, #20
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4805      	ldr	r0, [pc, #20]	@ (8003a74 <HAL_SPI_MspInit+0x8c>)
 8003a5e:	f000 fe69 	bl	8004734 <HAL_GPIO_Init>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8003a62:	bf00      	nop
 8003a64:	3728      	adds	r7, #40	@ 0x28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40013400 	.word	0x40013400
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40021000 	.word	0x40021000

08003a78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a0b      	ldr	r2, [pc, #44]	@ (8003ab4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10d      	bne.n	8003aa6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab8 <HAL_TIM_PWM_MspInit+0x40>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	4a09      	ldr	r2, [pc, #36]	@ (8003ab8 <HAL_TIM_PWM_MspInit+0x40>)
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a9a:	4b07      	ldr	r3, [pc, #28]	@ (8003ab8 <HAL_TIM_PWM_MspInit+0x40>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	40023800 	.word	0x40023800

08003abc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac4:	f107 030c 	add.w	r3, r7, #12
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a12      	ldr	r2, [pc, #72]	@ (8003b24 <HAL_TIM_MspPostInit+0x68>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d11d      	bne.n	8003b1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b11      	ldr	r3, [pc, #68]	@ (8003b28 <HAL_TIM_MspPostInit+0x6c>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	4a10      	ldr	r2, [pc, #64]	@ (8003b28 <HAL_TIM_MspPostInit+0x6c>)
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aee:	4b0e      	ldr	r3, [pc, #56]	@ (8003b28 <HAL_TIM_MspPostInit+0x6c>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BL_PWM_Pin;
 8003afa:	2310      	movs	r3, #16
 8003afc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	2302      	movs	r3, #2
 8003b00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b0e:	f107 030c 	add.w	r3, r7, #12
 8003b12:	4619      	mov	r1, r3
 8003b14:	4805      	ldr	r0, [pc, #20]	@ (8003b2c <HAL_TIM_MspPostInit+0x70>)
 8003b16:	f000 fe0d 	bl	8004734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b1a:	bf00      	nop
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40020400 	.word	0x40020400

08003b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	@ 0x28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 0314 	add.w	r3, r7, #20
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc4 <HAL_UART_MspInit+0x94>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d133      	bne.n	8003bba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc8 <HAL_UART_MspInit+0x98>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc8 <HAL_UART_MspInit+0x98>)
 8003b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b62:	4b19      	ldr	r3, [pc, #100]	@ (8003bc8 <HAL_UART_MspInit+0x98>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	4b15      	ldr	r3, [pc, #84]	@ (8003bc8 <HAL_UART_MspInit+0x98>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	4a14      	ldr	r2, [pc, #80]	@ (8003bc8 <HAL_UART_MspInit+0x98>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b7e:	4b12      	ldr	r3, [pc, #72]	@ (8003bc8 <HAL_UART_MspInit+0x98>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b8a:	230c      	movs	r3, #12
 8003b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b96:	2303      	movs	r3, #3
 8003b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b9a:	2307      	movs	r3, #7
 8003b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9e:	f107 0314 	add.w	r3, r7, #20
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4809      	ldr	r0, [pc, #36]	@ (8003bcc <HAL_UART_MspInit+0x9c>)
 8003ba6:	f000 fdc5 	bl	8004734 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003baa:	2200      	movs	r2, #0
 8003bac:	2100      	movs	r1, #0
 8003bae:	2026      	movs	r0, #38	@ 0x26
 8003bb0:	f000 fae3 	bl	800417a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bb4:	2026      	movs	r0, #38	@ 0x26
 8003bb6:	f000 fafc 	bl	80041b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003bba:	bf00      	nop
 8003bbc:	3728      	adds	r7, #40	@ 0x28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40004400 	.word	0x40004400
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40020000 	.word	0x40020000

08003bd0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003bd6:	1d3b      	adds	r3, r7, #4
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003be4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c58 <HAL_FMC_MspInit+0x88>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d131      	bne.n	8003c50 <HAL_FMC_MspInit+0x80>
    return;
  }
  FMC_Initialized = 1;
 8003bec:	4b1a      	ldr	r3, [pc, #104]	@ (8003c58 <HAL_FMC_MspInit+0x88>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	4b19      	ldr	r3, [pc, #100]	@ (8003c5c <HAL_FMC_MspInit+0x8c>)
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfa:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <HAL_FMC_MspInit+0x8c>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6393      	str	r3, [r2, #56]	@ 0x38
 8003c02:	4b16      	ldr	r3, [pc, #88]	@ (8003c5c <HAL_FMC_MspInit+0x8c>)
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003c0e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003c12:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c14:	2302      	movs	r3, #2
 8003c16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c20:	230c      	movs	r3, #12
 8003c22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c24:	1d3b      	adds	r3, r7, #4
 8003c26:	4619      	mov	r1, r3
 8003c28:	480d      	ldr	r0, [pc, #52]	@ (8003c60 <HAL_FMC_MspInit+0x90>)
 8003c2a:	f000 fd83 	bl	8004734 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003c2e:	f64c 73b3 	movw	r3, #53171	@ 0xcfb3
 8003c32:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c34:	2302      	movs	r3, #2
 8003c36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c40:	230c      	movs	r3, #12
 8003c42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c44:	1d3b      	adds	r3, r7, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4806      	ldr	r0, [pc, #24]	@ (8003c64 <HAL_FMC_MspInit+0x94>)
 8003c4a:	f000 fd73 	bl	8004734 <HAL_GPIO_Init>
 8003c4e:	e000      	b.n	8003c52 <HAL_FMC_MspInit+0x82>
    return;
 8003c50:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20011878 	.word	0x20011878
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40020c00 	.word	0x40020c00

08003c68 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003c70:	f7ff ffae 	bl	8003bd0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c80:	bf00      	nop
 8003c82:	e7fd      	b.n	8003c80 <NMI_Handler+0x4>

08003c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <HardFault_Handler+0x4>

08003c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c90:	bf00      	nop
 8003c92:	e7fd      	b.n	8003c90 <MemManage_Handler+0x4>

08003c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c98:	bf00      	nop
 8003c9a:	e7fd      	b.n	8003c98 <BusFault_Handler+0x4>

08003c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ca0:	bf00      	nop
 8003ca2:	e7fd      	b.n	8003ca0 <UsageFault_Handler+0x4>

08003ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cd2:	f000 f933 	bl	8003f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 8003cde:	2020      	movs	r0, #32
 8003ce0:	f000 ff06 	bl	8004af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ce4:	bf00      	nop
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003cec:	4802      	ldr	r0, [pc, #8]	@ (8003cf8 <USART2_IRQHandler+0x10>)
 8003cee:	f004 ffc5 	bl	8008c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200004b4 	.word	0x200004b4

08003cfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003d00:	4802      	ldr	r0, [pc, #8]	@ (8003d0c <OTG_FS_IRQHandler+0x10>)
 8003d02:	f001 f9ed 	bl	80050e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20011cb8 	.word	0x20011cb8

08003d10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e00a      	b.n	8003d38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d22:	f3af 8000 	nop.w
 8003d26:	4601      	mov	r1, r0
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	60ba      	str	r2, [r7, #8]
 8003d2e:	b2ca      	uxtb	r2, r1
 8003d30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	3301      	adds	r3, #1
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	dbf0      	blt.n	8003d22 <_read+0x12>
  }

  return len;
 8003d40:	687b      	ldr	r3, [r7, #4]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <_close>:
  }
  return len;
}

int _close(int file)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d72:	605a      	str	r2, [r3, #4]
  return 0;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <_isatty>:

int _isatty(int file)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d8a:	2301      	movs	r3, #1
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dbc:	4a14      	ldr	r2, [pc, #80]	@ (8003e10 <_sbrk+0x5c>)
 8003dbe:	4b15      	ldr	r3, [pc, #84]	@ (8003e14 <_sbrk+0x60>)
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dc8:	4b13      	ldr	r3, [pc, #76]	@ (8003e18 <_sbrk+0x64>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dd0:	4b11      	ldr	r3, [pc, #68]	@ (8003e18 <_sbrk+0x64>)
 8003dd2:	4a12      	ldr	r2, [pc, #72]	@ (8003e1c <_sbrk+0x68>)
 8003dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dd6:	4b10      	ldr	r3, [pc, #64]	@ (8003e18 <_sbrk+0x64>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d207      	bcs.n	8003df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003de4:	f00a fc3c 	bl	800e660 <__errno>
 8003de8:	4603      	mov	r3, r0
 8003dea:	220c      	movs	r2, #12
 8003dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295
 8003df2:	e009      	b.n	8003e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003df4:	4b08      	ldr	r3, [pc, #32]	@ (8003e18 <_sbrk+0x64>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dfa:	4b07      	ldr	r3, [pc, #28]	@ (8003e18 <_sbrk+0x64>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	4a05      	ldr	r2, [pc, #20]	@ (8003e18 <_sbrk+0x64>)
 8003e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e06:	68fb      	ldr	r3, [r7, #12]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20030000 	.word	0x20030000
 8003e14:	00000400 	.word	0x00000400
 8003e18:	2001187c 	.word	0x2001187c
 8003e1c:	200121e8 	.word	0x200121e8

08003e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e24:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <SystemInit+0x20>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2a:	4a05      	ldr	r2, [pc, #20]	@ (8003e40 <SystemInit+0x20>)
 8003e2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	e000ed00 	.word	0xe000ed00

08003e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e48:	f7ff ffea 	bl	8003e20 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e4c:	480c      	ldr	r0, [pc, #48]	@ (8003e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e4e:	490d      	ldr	r1, [pc, #52]	@ (8003e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e50:	4a0d      	ldr	r2, [pc, #52]	@ (8003e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e54:	e002      	b.n	8003e5c <LoopCopyDataInit>

08003e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e5a:	3304      	adds	r3, #4

08003e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e60:	d3f9      	bcc.n	8003e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e62:	4a0a      	ldr	r2, [pc, #40]	@ (8003e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e64:	4c0a      	ldr	r4, [pc, #40]	@ (8003e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e68:	e001      	b.n	8003e6e <LoopFillZerobss>

08003e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e6c:	3204      	adds	r2, #4

08003e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e70:	d3fb      	bcc.n	8003e6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003e72:	f00a fbfb 	bl	800e66c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e76:	f7fd fa8d 	bl	8001394 <main>
  bx  lr    
 8003e7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003e7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e84:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8003e88:	08011f7c 	.word	0x08011f7c
  ldr r2, =_sbss
 8003e8c:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8003e90:	200121e4 	.word	0x200121e4

08003e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e94:	e7fe      	b.n	8003e94 <ADC_IRQHandler>
	...

08003e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ed8 <HAL_Init+0x40>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ed8 <HAL_Init+0x40>)
 8003ea2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <HAL_Init+0x40>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed8 <HAL_Init+0x40>)
 8003eae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003eb4:	4b08      	ldr	r3, [pc, #32]	@ (8003ed8 <HAL_Init+0x40>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a07      	ldr	r2, [pc, #28]	@ (8003ed8 <HAL_Init+0x40>)
 8003eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ec0:	2003      	movs	r0, #3
 8003ec2:	f000 f94f 	bl	8004164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ec6:	200f      	movs	r0, #15
 8003ec8:	f000 f808 	bl	8003edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ecc:	f7ff fd64 	bl	8003998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023c00 	.word	0x40023c00

08003edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ee4:	4b12      	ldr	r3, [pc, #72]	@ (8003f30 <HAL_InitTick+0x54>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b12      	ldr	r3, [pc, #72]	@ (8003f34 <HAL_InitTick+0x58>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	4619      	mov	r1, r3
 8003eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 f967 	bl	80041ce <HAL_SYSTICK_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e00e      	b.n	8003f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b0f      	cmp	r3, #15
 8003f0e:	d80a      	bhi.n	8003f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f10:	2200      	movs	r2, #0
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	f000 f92f 	bl	800417a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f1c:	4a06      	ldr	r2, [pc, #24]	@ (8003f38 <HAL_InitTick+0x5c>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e000      	b.n	8003f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000268 	.word	0x20000268
 8003f34:	20000270 	.word	0x20000270
 8003f38:	2000026c 	.word	0x2000026c

08003f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f40:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <HAL_IncTick+0x20>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <HAL_IncTick+0x24>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	4a04      	ldr	r2, [pc, #16]	@ (8003f60 <HAL_IncTick+0x24>)
 8003f4e:	6013      	str	r3, [r2, #0]
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000270 	.word	0x20000270
 8003f60:	20011880 	.word	0x20011880

08003f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  return uwTick;
 8003f68:	4b03      	ldr	r3, [pc, #12]	@ (8003f78 <HAL_GetTick+0x14>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	20011880 	.word	0x20011880

08003f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f84:	f7ff ffee 	bl	8003f64 <HAL_GetTick>
 8003f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d005      	beq.n	8003fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f96:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc0 <HAL_Delay+0x44>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fa2:	bf00      	nop
 8003fa4:	f7ff ffde 	bl	8003f64 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d8f7      	bhi.n	8003fa4 <HAL_Delay+0x28>
  {
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000270 	.word	0x20000270

08003fc4 <__NVIC_SetPriorityGrouping>:
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ff6:	4a04      	ldr	r2, [pc, #16]	@ (8004008 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	60d3      	str	r3, [r2, #12]
}
 8003ffc:	bf00      	nop
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <__NVIC_GetPriorityGrouping>:
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004010:	4b04      	ldr	r3, [pc, #16]	@ (8004024 <__NVIC_GetPriorityGrouping+0x18>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	f003 0307 	and.w	r3, r3, #7
}
 800401a:	4618      	mov	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <__NVIC_EnableIRQ>:
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004036:	2b00      	cmp	r3, #0
 8004038:	db0b      	blt.n	8004052 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	f003 021f 	and.w	r2, r3, #31
 8004040:	4907      	ldr	r1, [pc, #28]	@ (8004060 <__NVIC_EnableIRQ+0x38>)
 8004042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	2001      	movs	r0, #1
 800404a:	fa00 f202 	lsl.w	r2, r0, r2
 800404e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	e000e100 	.word	0xe000e100

08004064 <__NVIC_SetPriority>:
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	6039      	str	r1, [r7, #0]
 800406e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004074:	2b00      	cmp	r3, #0
 8004076:	db0a      	blt.n	800408e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	b2da      	uxtb	r2, r3
 800407c:	490c      	ldr	r1, [pc, #48]	@ (80040b0 <__NVIC_SetPriority+0x4c>)
 800407e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004082:	0112      	lsls	r2, r2, #4
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	440b      	add	r3, r1
 8004088:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800408c:	e00a      	b.n	80040a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	b2da      	uxtb	r2, r3
 8004092:	4908      	ldr	r1, [pc, #32]	@ (80040b4 <__NVIC_SetPriority+0x50>)
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	3b04      	subs	r3, #4
 800409c:	0112      	lsls	r2, r2, #4
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	440b      	add	r3, r1
 80040a2:	761a      	strb	r2, [r3, #24]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	e000e100 	.word	0xe000e100
 80040b4:	e000ed00 	.word	0xe000ed00

080040b8 <NVIC_EncodePriority>:
{
 80040b8:	b480      	push	{r7}
 80040ba:	b089      	sub	sp, #36	@ 0x24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f1c3 0307 	rsb	r3, r3, #7
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	bf28      	it	cs
 80040d6:	2304      	movcs	r3, #4
 80040d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3304      	adds	r3, #4
 80040de:	2b06      	cmp	r3, #6
 80040e0:	d902      	bls.n	80040e8 <NVIC_EncodePriority+0x30>
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3b03      	subs	r3, #3
 80040e6:	e000      	b.n	80040ea <NVIC_EncodePriority+0x32>
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040ec:	f04f 32ff 	mov.w	r2, #4294967295
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43da      	mvns	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	401a      	ands	r2, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004100:	f04f 31ff 	mov.w	r1, #4294967295
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	fa01 f303 	lsl.w	r3, r1, r3
 800410a:	43d9      	mvns	r1, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004110:	4313      	orrs	r3, r2
}
 8004112:	4618      	mov	r0, r3
 8004114:	3724      	adds	r7, #36	@ 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <SysTick_Config>:
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3b01      	subs	r3, #1
 800412c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004130:	d301      	bcc.n	8004136 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004132:	2301      	movs	r3, #1
 8004134:	e00f      	b.n	8004156 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004136:	4a0a      	ldr	r2, [pc, #40]	@ (8004160 <SysTick_Config+0x40>)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3b01      	subs	r3, #1
 800413c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800413e:	210f      	movs	r1, #15
 8004140:	f04f 30ff 	mov.w	r0, #4294967295
 8004144:	f7ff ff8e 	bl	8004064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004148:	4b05      	ldr	r3, [pc, #20]	@ (8004160 <SysTick_Config+0x40>)
 800414a:	2200      	movs	r2, #0
 800414c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800414e:	4b04      	ldr	r3, [pc, #16]	@ (8004160 <SysTick_Config+0x40>)
 8004150:	2207      	movs	r2, #7
 8004152:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	e000e010 	.word	0xe000e010

08004164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff ff29 	bl	8003fc4 <__NVIC_SetPriorityGrouping>
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800417a:	b580      	push	{r7, lr}
 800417c:	b086      	sub	sp, #24
 800417e:	af00      	add	r7, sp, #0
 8004180:	4603      	mov	r3, r0
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800418c:	f7ff ff3e 	bl	800400c <__NVIC_GetPriorityGrouping>
 8004190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	6978      	ldr	r0, [r7, #20]
 8004198:	f7ff ff8e 	bl	80040b8 <NVIC_EncodePriority>
 800419c:	4602      	mov	r2, r0
 800419e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff ff5d 	bl	8004064 <__NVIC_SetPriority>
}
 80041aa:	bf00      	nop
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	4603      	mov	r3, r0
 80041ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff ff31 	bl	8004028 <__NVIC_EnableIRQ>
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ffa2 	bl	8004120 <SysTick_Config>
 80041dc:	4603      	mov	r3, r0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041f4:	f7ff feb6 	bl	8003f64 <HAL_GetTick>
 80041f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d008      	beq.n	8004218 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2280      	movs	r2, #128	@ 0x80
 800420a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e052      	b.n	80042be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0216 	bic.w	r2, r2, #22
 8004226:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004236:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d103      	bne.n	8004248 <HAL_DMA_Abort+0x62>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004244:	2b00      	cmp	r3, #0
 8004246:	d007      	beq.n	8004258 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0208 	bic.w	r2, r2, #8
 8004256:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004268:	e013      	b.n	8004292 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800426a:	f7ff fe7b 	bl	8003f64 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b05      	cmp	r3, #5
 8004276:	d90c      	bls.n	8004292 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2203      	movs	r2, #3
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e015      	b.n	80042be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e4      	bne.n	800426a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a4:	223f      	movs	r2, #63	@ 0x3f
 80042a6:	409a      	lsls	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d004      	beq.n	80042e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2280      	movs	r2, #128	@ 0x80
 80042de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e00c      	b.n	80042fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2205      	movs	r2, #5
 80042e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800431e:	4b23      	ldr	r3, [pc, #140]	@ (80043ac <HAL_FLASH_Program+0xa0>)
 8004320:	7e1b      	ldrb	r3, [r3, #24]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_FLASH_Program+0x1e>
 8004326:	2302      	movs	r3, #2
 8004328:	e03b      	b.n	80043a2 <HAL_FLASH_Program+0x96>
 800432a:	4b20      	ldr	r3, [pc, #128]	@ (80043ac <HAL_FLASH_Program+0xa0>)
 800432c:	2201      	movs	r2, #1
 800432e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004330:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004334:	f000 f870 	bl	8004418 <FLASH_WaitForLastOperation>
 8004338:	4603      	mov	r3, r0
 800433a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d12b      	bne.n	800439a <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d105      	bne.n	8004354 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004348:	783b      	ldrb	r3, [r7, #0]
 800434a:	4619      	mov	r1, r3
 800434c:	68b8      	ldr	r0, [r7, #8]
 800434e:	f000 f91b 	bl	8004588 <FLASH_Program_Byte>
 8004352:	e016      	b.n	8004382 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d105      	bne.n	8004366 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800435a:	883b      	ldrh	r3, [r7, #0]
 800435c:	4619      	mov	r1, r3
 800435e:	68b8      	ldr	r0, [r7, #8]
 8004360:	f000 f8ee 	bl	8004540 <FLASH_Program_HalfWord>
 8004364:	e00d      	b.n	8004382 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d105      	bne.n	8004378 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	4619      	mov	r1, r3
 8004370:	68b8      	ldr	r0, [r7, #8]
 8004372:	f000 f8c3 	bl	80044fc <FLASH_Program_Word>
 8004376:	e004      	b.n	8004382 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800437c:	68b8      	ldr	r0, [r7, #8]
 800437e:	f000 f88b 	bl	8004498 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004382:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004386:	f000 f847 	bl	8004418 <FLASH_WaitForLastOperation>
 800438a:	4603      	mov	r3, r0
 800438c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800438e:	4b08      	ldr	r3, [pc, #32]	@ (80043b0 <HAL_FLASH_Program+0xa4>)
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	4a07      	ldr	r2, [pc, #28]	@ (80043b0 <HAL_FLASH_Program+0xa4>)
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800439a:	4b04      	ldr	r3, [pc, #16]	@ (80043ac <HAL_FLASH_Program+0xa0>)
 800439c:	2200      	movs	r2, #0
 800439e:	761a      	strb	r2, [r3, #24]

  return status;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20011884 	.word	0x20011884
 80043b0:	40023c00 	.word	0x40023c00

080043b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80043be:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <HAL_FLASH_Unlock+0x38>)
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	da0b      	bge.n	80043de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80043c6:	4b09      	ldr	r3, [pc, #36]	@ (80043ec <HAL_FLASH_Unlock+0x38>)
 80043c8:	4a09      	ldr	r2, [pc, #36]	@ (80043f0 <HAL_FLASH_Unlock+0x3c>)
 80043ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80043cc:	4b07      	ldr	r3, [pc, #28]	@ (80043ec <HAL_FLASH_Unlock+0x38>)
 80043ce:	4a09      	ldr	r2, [pc, #36]	@ (80043f4 <HAL_FLASH_Unlock+0x40>)
 80043d0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80043d2:	4b06      	ldr	r3, [pc, #24]	@ (80043ec <HAL_FLASH_Unlock+0x38>)
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	da01      	bge.n	80043de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80043de:	79fb      	ldrb	r3, [r7, #7]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40023c00 	.word	0x40023c00
 80043f0:	45670123 	.word	0x45670123
 80043f4:	cdef89ab 	.word	0xcdef89ab

080043f8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80043fc:	4b05      	ldr	r3, [pc, #20]	@ (8004414 <HAL_FLASH_Lock+0x1c>)
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	4a04      	ldr	r2, [pc, #16]	@ (8004414 <HAL_FLASH_Lock+0x1c>)
 8004402:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004406:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	40023c00 	.word	0x40023c00

08004418 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004424:	4b1a      	ldr	r3, [pc, #104]	@ (8004490 <FLASH_WaitForLastOperation+0x78>)
 8004426:	2200      	movs	r2, #0
 8004428:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800442a:	f7ff fd9b 	bl	8003f64 <HAL_GetTick>
 800442e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004430:	e010      	b.n	8004454 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d00c      	beq.n	8004454 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d007      	beq.n	8004450 <FLASH_WaitForLastOperation+0x38>
 8004440:	f7ff fd90 	bl	8003f64 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	d201      	bcs.n	8004454 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e019      	b.n	8004488 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004454:	4b0f      	ldr	r3, [pc, #60]	@ (8004494 <FLASH_WaitForLastOperation+0x7c>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e8      	bne.n	8004432 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004460:	4b0c      	ldr	r3, [pc, #48]	@ (8004494 <FLASH_WaitForLastOperation+0x7c>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800446c:	4b09      	ldr	r3, [pc, #36]	@ (8004494 <FLASH_WaitForLastOperation+0x7c>)
 800446e:	2201      	movs	r2, #1
 8004470:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004472:	4b08      	ldr	r3, [pc, #32]	@ (8004494 <FLASH_WaitForLastOperation+0x7c>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800447e:	f000 f8a5 	bl	80045cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004486:	2300      	movs	r3, #0

}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20011884 	.word	0x20011884
 8004494:	40023c00 	.word	0x40023c00

08004498 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80044a4:	4b14      	ldr	r3, [pc, #80]	@ (80044f8 <FLASH_Program_DoubleWord+0x60>)
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	4a13      	ldr	r2, [pc, #76]	@ (80044f8 <FLASH_Program_DoubleWord+0x60>)
 80044aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80044b0:	4b11      	ldr	r3, [pc, #68]	@ (80044f8 <FLASH_Program_DoubleWord+0x60>)
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	4a10      	ldr	r2, [pc, #64]	@ (80044f8 <FLASH_Program_DoubleWord+0x60>)
 80044b6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80044ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80044bc:	4b0e      	ldr	r3, [pc, #56]	@ (80044f8 <FLASH_Program_DoubleWord+0x60>)
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	4a0d      	ldr	r2, [pc, #52]	@ (80044f8 <FLASH_Program_DoubleWord+0x60>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80044ce:	f3bf 8f6f 	isb	sy
}
 80044d2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80044d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	000a      	movs	r2, r1
 80044e2:	2300      	movs	r3, #0
 80044e4:	68f9      	ldr	r1, [r7, #12]
 80044e6:	3104      	adds	r1, #4
 80044e8:	4613      	mov	r3, r2
 80044ea:	600b      	str	r3, [r1, #0]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	40023c00 	.word	0x40023c00

080044fc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004506:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <FLASH_Program_Word+0x40>)
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	4a0c      	ldr	r2, [pc, #48]	@ (800453c <FLASH_Program_Word+0x40>)
 800450c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004510:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004512:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <FLASH_Program_Word+0x40>)
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	4a09      	ldr	r2, [pc, #36]	@ (800453c <FLASH_Program_Word+0x40>)
 8004518:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800451c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800451e:	4b07      	ldr	r3, [pc, #28]	@ (800453c <FLASH_Program_Word+0x40>)
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	4a06      	ldr	r2, [pc, #24]	@ (800453c <FLASH_Program_Word+0x40>)
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	601a      	str	r2, [r3, #0]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40023c00 	.word	0x40023c00

08004540 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800454c:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <FLASH_Program_HalfWord+0x44>)
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	4a0c      	ldr	r2, [pc, #48]	@ (8004584 <FLASH_Program_HalfWord+0x44>)
 8004552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004556:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004558:	4b0a      	ldr	r3, [pc, #40]	@ (8004584 <FLASH_Program_HalfWord+0x44>)
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	4a09      	ldr	r2, [pc, #36]	@ (8004584 <FLASH_Program_HalfWord+0x44>)
 800455e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004562:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004564:	4b07      	ldr	r3, [pc, #28]	@ (8004584 <FLASH_Program_HalfWord+0x44>)
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	4a06      	ldr	r2, [pc, #24]	@ (8004584 <FLASH_Program_HalfWord+0x44>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	887a      	ldrh	r2, [r7, #2]
 8004574:	801a      	strh	r2, [r3, #0]
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40023c00 	.word	0x40023c00

08004588 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004594:	4b0c      	ldr	r3, [pc, #48]	@ (80045c8 <FLASH_Program_Byte+0x40>)
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	4a0b      	ldr	r2, [pc, #44]	@ (80045c8 <FLASH_Program_Byte+0x40>)
 800459a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800459e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80045a0:	4b09      	ldr	r3, [pc, #36]	@ (80045c8 <FLASH_Program_Byte+0x40>)
 80045a2:	4a09      	ldr	r2, [pc, #36]	@ (80045c8 <FLASH_Program_Byte+0x40>)
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80045a8:	4b07      	ldr	r3, [pc, #28]	@ (80045c8 <FLASH_Program_Byte+0x40>)
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	4a06      	ldr	r2, [pc, #24]	@ (80045c8 <FLASH_Program_Byte+0x40>)
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	701a      	strb	r2, [r3, #0]
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40023c00 	.word	0x40023c00

080045cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80045d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004690 <FLASH_SetErrorCode+0xc4>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80045dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004694 <FLASH_SetErrorCode+0xc8>)
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	f043 0310 	orr.w	r3, r3, #16
 80045e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004694 <FLASH_SetErrorCode+0xc8>)
 80045e6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80045e8:	4b29      	ldr	r3, [pc, #164]	@ (8004690 <FLASH_SetErrorCode+0xc4>)
 80045ea:	2210      	movs	r2, #16
 80045ec:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80045ee:	4b28      	ldr	r3, [pc, #160]	@ (8004690 <FLASH_SetErrorCode+0xc4>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d008      	beq.n	800460c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80045fa:	4b26      	ldr	r3, [pc, #152]	@ (8004694 <FLASH_SetErrorCode+0xc8>)
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f043 0308 	orr.w	r3, r3, #8
 8004602:	4a24      	ldr	r2, [pc, #144]	@ (8004694 <FLASH_SetErrorCode+0xc8>)
 8004604:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004606:	4b22      	ldr	r3, [pc, #136]	@ (8004690 <FLASH_SetErrorCode+0xc4>)
 8004608:	2220      	movs	r2, #32
 800460a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800460c:	4b20      	ldr	r3, [pc, #128]	@ (8004690 <FLASH_SetErrorCode+0xc4>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004618:	4b1e      	ldr	r3, [pc, #120]	@ (8004694 <FLASH_SetErrorCode+0xc8>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f043 0304 	orr.w	r3, r3, #4
 8004620:	4a1c      	ldr	r2, [pc, #112]	@ (8004694 <FLASH_SetErrorCode+0xc8>)
 8004622:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004624:	4b1a      	ldr	r3, [pc, #104]	@ (8004690 <FLASH_SetErrorCode+0xc4>)
 8004626:	2240      	movs	r2, #64	@ 0x40
 8004628:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800462a:	4b19      	ldr	r3, [pc, #100]	@ (8004690 <FLASH_SetErrorCode+0xc4>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004636:	4b17      	ldr	r3, [pc, #92]	@ (8004694 <FLASH_SetErrorCode+0xc8>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f043 0302 	orr.w	r3, r3, #2
 800463e:	4a15      	ldr	r2, [pc, #84]	@ (8004694 <FLASH_SetErrorCode+0xc8>)
 8004640:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004642:	4b13      	ldr	r3, [pc, #76]	@ (8004690 <FLASH_SetErrorCode+0xc4>)
 8004644:	2280      	movs	r2, #128	@ 0x80
 8004646:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004648:	4b11      	ldr	r3, [pc, #68]	@ (8004690 <FLASH_SetErrorCode+0xc4>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004650:	2b00      	cmp	r3, #0
 8004652:	d009      	beq.n	8004668 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004654:	4b0f      	ldr	r3, [pc, #60]	@ (8004694 <FLASH_SetErrorCode+0xc8>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	4a0d      	ldr	r2, [pc, #52]	@ (8004694 <FLASH_SetErrorCode+0xc8>)
 800465e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004660:	4b0b      	ldr	r3, [pc, #44]	@ (8004690 <FLASH_SetErrorCode+0xc4>)
 8004662:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004666:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004668:	4b09      	ldr	r3, [pc, #36]	@ (8004690 <FLASH_SetErrorCode+0xc4>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004674:	4b07      	ldr	r3, [pc, #28]	@ (8004694 <FLASH_SetErrorCode+0xc8>)
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	f043 0320 	orr.w	r3, r3, #32
 800467c:	4a05      	ldr	r2, [pc, #20]	@ (8004694 <FLASH_SetErrorCode+0xc8>)
 800467e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004680:	4b03      	ldr	r3, [pc, #12]	@ (8004690 <FLASH_SetErrorCode+0xc4>)
 8004682:	2202      	movs	r2, #2
 8004684:	60da      	str	r2, [r3, #12]
  }
}
 8004686:	bf00      	nop
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	40023c00 	.word	0x40023c00
 8004694:	20011884 	.word	0x20011884

08004698 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	e010      	b.n	80046d6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d103      	bne.n	80046c2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80046ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e009      	b.n	80046d6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d103      	bne.n	80046d0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80046c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e002      	b.n	80046d6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80046d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b0b      	cmp	r3, #11
 80046da:	d902      	bls.n	80046e2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80046e2:	4b13      	ldr	r3, [pc, #76]	@ (8004730 <FLASH_Erase_Sector+0x98>)
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	4a12      	ldr	r2, [pc, #72]	@ (8004730 <FLASH_Erase_Sector+0x98>)
 80046e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80046ee:	4b10      	ldr	r3, [pc, #64]	@ (8004730 <FLASH_Erase_Sector+0x98>)
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	490f      	ldr	r1, [pc, #60]	@ (8004730 <FLASH_Erase_Sector+0x98>)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80046fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004730 <FLASH_Erase_Sector+0x98>)
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004730 <FLASH_Erase_Sector+0x98>)
 8004700:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004704:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004706:	4b0a      	ldr	r3, [pc, #40]	@ (8004730 <FLASH_Erase_Sector+0x98>)
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4313      	orrs	r3, r2
 8004710:	4a07      	ldr	r2, [pc, #28]	@ (8004730 <FLASH_Erase_Sector+0x98>)
 8004712:	f043 0302 	orr.w	r3, r3, #2
 8004716:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004718:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <FLASH_Erase_Sector+0x98>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	4a04      	ldr	r2, [pc, #16]	@ (8004730 <FLASH_Erase_Sector+0x98>)
 800471e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004722:	6113      	str	r3, [r2, #16]
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40023c00 	.word	0x40023c00

08004734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	@ 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	e177      	b.n	8004a40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004750:	2201      	movs	r2, #1
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	429a      	cmp	r2, r3
 800476a:	f040 8166 	bne.w	8004a3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b01      	cmp	r3, #1
 8004778:	d005      	beq.n	8004786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004782:	2b02      	cmp	r3, #2
 8004784:	d130      	bne.n	80047e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	2203      	movs	r2, #3
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4013      	ands	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047bc:	2201      	movs	r2, #1
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f003 0201 	and.w	r2, r3, #1
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d017      	beq.n	8004824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	2203      	movs	r2, #3
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4013      	ands	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d123      	bne.n	8004878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	08da      	lsrs	r2, r3, #3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3208      	adds	r2, #8
 8004838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800483c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	220f      	movs	r2, #15
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	08da      	lsrs	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3208      	adds	r2, #8
 8004872:	69b9      	ldr	r1, [r7, #24]
 8004874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	2203      	movs	r2, #3
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 0203 	and.w	r2, r3, #3
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80c0 	beq.w	8004a3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	4b66      	ldr	r3, [pc, #408]	@ (8004a58 <HAL_GPIO_Init+0x324>)
 80048c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c2:	4a65      	ldr	r2, [pc, #404]	@ (8004a58 <HAL_GPIO_Init+0x324>)
 80048c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80048ca:	4b63      	ldr	r3, [pc, #396]	@ (8004a58 <HAL_GPIO_Init+0x324>)
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048d6:	4a61      	ldr	r2, [pc, #388]	@ (8004a5c <HAL_GPIO_Init+0x328>)
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	089b      	lsrs	r3, r3, #2
 80048dc:	3302      	adds	r3, #2
 80048de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	220f      	movs	r2, #15
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a58      	ldr	r2, [pc, #352]	@ (8004a60 <HAL_GPIO_Init+0x32c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d037      	beq.n	8004972 <HAL_GPIO_Init+0x23e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a57      	ldr	r2, [pc, #348]	@ (8004a64 <HAL_GPIO_Init+0x330>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d031      	beq.n	800496e <HAL_GPIO_Init+0x23a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a56      	ldr	r2, [pc, #344]	@ (8004a68 <HAL_GPIO_Init+0x334>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d02b      	beq.n	800496a <HAL_GPIO_Init+0x236>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a55      	ldr	r2, [pc, #340]	@ (8004a6c <HAL_GPIO_Init+0x338>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d025      	beq.n	8004966 <HAL_GPIO_Init+0x232>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a54      	ldr	r2, [pc, #336]	@ (8004a70 <HAL_GPIO_Init+0x33c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01f      	beq.n	8004962 <HAL_GPIO_Init+0x22e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a53      	ldr	r2, [pc, #332]	@ (8004a74 <HAL_GPIO_Init+0x340>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d019      	beq.n	800495e <HAL_GPIO_Init+0x22a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a52      	ldr	r2, [pc, #328]	@ (8004a78 <HAL_GPIO_Init+0x344>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d013      	beq.n	800495a <HAL_GPIO_Init+0x226>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a51      	ldr	r2, [pc, #324]	@ (8004a7c <HAL_GPIO_Init+0x348>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00d      	beq.n	8004956 <HAL_GPIO_Init+0x222>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a50      	ldr	r2, [pc, #320]	@ (8004a80 <HAL_GPIO_Init+0x34c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d007      	beq.n	8004952 <HAL_GPIO_Init+0x21e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a4f      	ldr	r2, [pc, #316]	@ (8004a84 <HAL_GPIO_Init+0x350>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d101      	bne.n	800494e <HAL_GPIO_Init+0x21a>
 800494a:	2309      	movs	r3, #9
 800494c:	e012      	b.n	8004974 <HAL_GPIO_Init+0x240>
 800494e:	230a      	movs	r3, #10
 8004950:	e010      	b.n	8004974 <HAL_GPIO_Init+0x240>
 8004952:	2308      	movs	r3, #8
 8004954:	e00e      	b.n	8004974 <HAL_GPIO_Init+0x240>
 8004956:	2307      	movs	r3, #7
 8004958:	e00c      	b.n	8004974 <HAL_GPIO_Init+0x240>
 800495a:	2306      	movs	r3, #6
 800495c:	e00a      	b.n	8004974 <HAL_GPIO_Init+0x240>
 800495e:	2305      	movs	r3, #5
 8004960:	e008      	b.n	8004974 <HAL_GPIO_Init+0x240>
 8004962:	2304      	movs	r3, #4
 8004964:	e006      	b.n	8004974 <HAL_GPIO_Init+0x240>
 8004966:	2303      	movs	r3, #3
 8004968:	e004      	b.n	8004974 <HAL_GPIO_Init+0x240>
 800496a:	2302      	movs	r3, #2
 800496c:	e002      	b.n	8004974 <HAL_GPIO_Init+0x240>
 800496e:	2301      	movs	r3, #1
 8004970:	e000      	b.n	8004974 <HAL_GPIO_Init+0x240>
 8004972:	2300      	movs	r3, #0
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	f002 0203 	and.w	r2, r2, #3
 800497a:	0092      	lsls	r2, r2, #2
 800497c:	4093      	lsls	r3, r2
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4313      	orrs	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004984:	4935      	ldr	r1, [pc, #212]	@ (8004a5c <HAL_GPIO_Init+0x328>)
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	089b      	lsrs	r3, r3, #2
 800498a:	3302      	adds	r3, #2
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004992:	4b3d      	ldr	r3, [pc, #244]	@ (8004a88 <HAL_GPIO_Init+0x354>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	43db      	mvns	r3, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4013      	ands	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049b6:	4a34      	ldr	r2, [pc, #208]	@ (8004a88 <HAL_GPIO_Init+0x354>)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049bc:	4b32      	ldr	r3, [pc, #200]	@ (8004a88 <HAL_GPIO_Init+0x354>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	43db      	mvns	r3, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4013      	ands	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049e0:	4a29      	ldr	r2, [pc, #164]	@ (8004a88 <HAL_GPIO_Init+0x354>)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049e6:	4b28      	ldr	r3, [pc, #160]	@ (8004a88 <HAL_GPIO_Init+0x354>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	43db      	mvns	r3, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4013      	ands	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a88 <HAL_GPIO_Init+0x354>)
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a10:	4b1d      	ldr	r3, [pc, #116]	@ (8004a88 <HAL_GPIO_Init+0x354>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a34:	4a14      	ldr	r2, [pc, #80]	@ (8004a88 <HAL_GPIO_Init+0x354>)
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	61fb      	str	r3, [r7, #28]
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	2b0f      	cmp	r3, #15
 8004a44:	f67f ae84 	bls.w	8004750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a48:	bf00      	nop
 8004a4a:	bf00      	nop
 8004a4c:	3724      	adds	r7, #36	@ 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	40013800 	.word	0x40013800
 8004a60:	40020000 	.word	0x40020000
 8004a64:	40020400 	.word	0x40020400
 8004a68:	40020800 	.word	0x40020800
 8004a6c:	40020c00 	.word	0x40020c00
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40021400 	.word	0x40021400
 8004a78:	40021800 	.word	0x40021800
 8004a7c:	40021c00 	.word	0x40021c00
 8004a80:	40022000 	.word	0x40022000
 8004a84:	40022400 	.word	0x40022400
 8004a88:	40013c00 	.word	0x40013c00

08004a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	887b      	ldrh	r3, [r7, #2]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
 8004aa8:	e001      	b.n	8004aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	807b      	strh	r3, [r7, #2]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004acc:	787b      	ldrb	r3, [r7, #1]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ad2:	887a      	ldrh	r2, [r7, #2]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ad8:	e003      	b.n	8004ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ada:	887b      	ldrh	r3, [r7, #2]
 8004adc:	041a      	lsls	r2, r3, #16
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	619a      	str	r2, [r3, #24]
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004afa:	4b08      	ldr	r3, [pc, #32]	@ (8004b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	88fb      	ldrh	r3, [r7, #6]
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d006      	beq.n	8004b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b06:	4a05      	ldr	r2, [pc, #20]	@ (8004b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fe ff0c 	bl	800392c <HAL_GPIO_EXTI_Callback>
  }
}
 8004b14:	bf00      	nop
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40013c00 	.word	0x40013c00

08004b20 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e059      	b.n	8004be6 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d106      	bne.n	8004b52 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f009 f86d 	bl	800dc2c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2203      	movs	r2, #3
 8004b56:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b60:	d102      	bne.n	8004b68 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f005 f92e 	bl	8009dce <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	7c1a      	ldrb	r2, [r3, #16]
 8004b7a:	f88d 2000 	strb.w	r2, [sp]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b82:	f005 f8af 	bl	8009ce4 <USB_CoreInit>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e026      	b.n	8004be6 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f005 f926 	bl	8009df0 <USB_SetCurrentMode>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e017      	b.n	8004be6 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	7c1a      	ldrb	r2, [r3, #16]
 8004bbe:	f88d 2000 	strb.w	r2, [sp]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bc6:	f005 fac9 	bl	800a15c <USB_HostInit>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e004      	b.n	8004be6 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004bee:	b590      	push	{r4, r7, lr}
 8004bf0:	b08b      	sub	sp, #44	@ 0x2c
 8004bf2:	af04      	add	r7, sp, #16
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	70fb      	strb	r3, [r7, #3]
 8004c00:	460b      	mov	r3, r1
 8004c02:	70bb      	strb	r3, [r7, #2]
 8004c04:	4613      	mov	r3, r2
 8004c06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004c08:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004c0a:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_HCD_HC_Init+0x2c>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e09d      	b.n	8004d56 <HAL_HCD_HC_Init+0x168>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	3319      	adds	r3, #25
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004c36:	78fa      	ldrb	r2, [r7, #3]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	3314      	adds	r3, #20
 8004c46:	787a      	ldrb	r2, [r7, #1]
 8004c48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	3315      	adds	r3, #21
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	3326      	adds	r3, #38	@ 0x26
 8004c6e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004c72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004c74:	78fa      	ldrb	r2, [r7, #3]
 8004c76:	78bb      	ldrb	r3, [r7, #2]
 8004c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c7c:	b2d8      	uxtb	r0, r3
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	3316      	adds	r3, #22
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fbc7 	bl	8005428 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004c9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	da0a      	bge.n	8004cb8 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	3317      	adds	r3, #23
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e009      	b.n	8004ccc <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	3317      	adds	r3, #23
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f005 fba7 	bl	800a424 <USB_GetHostSpeed>
 8004cd6:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004cd8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d10b      	bne.n	8004cf8 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004ce0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <HAL_HCD_HC_Init+0x10a>
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d104      	bne.n	8004cf8 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2bbc      	cmp	r3, #188	@ 0xbc
 8004cf2:	d901      	bls.n	8004cf8 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004cf4:	23bc      	movs	r3, #188	@ 0xbc
 8004cf6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	3318      	adds	r3, #24
 8004d08:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004d0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	b298      	uxth	r0, r3
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	1a9b      	subs	r3, r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	440b      	add	r3, r1
 8004d20:	3328      	adds	r3, #40	@ 0x28
 8004d22:	4602      	mov	r2, r0
 8004d24:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	787c      	ldrb	r4, [r7, #1]
 8004d30:	78ba      	ldrb	r2, [r7, #2]
 8004d32:	78f9      	ldrb	r1, [r7, #3]
 8004d34:	9302      	str	r3, [sp, #8]
 8004d36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	4623      	mov	r3, r4
 8004d44:	f005 fb96 	bl	800a474 <USB_HC_Init>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd90      	pop	{r4, r7, pc}

08004d5e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	460b      	mov	r3, r1
 8004d68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_HCD_HC_Halt+0x1e>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e00f      	b.n	8004d9c <HAL_HCD_HC_Halt+0x3e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	78fa      	ldrb	r2, [r7, #3]
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f005 ff28 	bl	800abe2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	4608      	mov	r0, r1
 8004dae:	4611      	mov	r1, r2
 8004db0:	461a      	mov	r2, r3
 8004db2:	4603      	mov	r3, r0
 8004db4:	70fb      	strb	r3, [r7, #3]
 8004db6:	460b      	mov	r3, r1
 8004db8:	70bb      	strb	r3, [r7, #2]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004dbe:	78fa      	ldrb	r2, [r7, #3]
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	440b      	add	r3, r1
 8004dcc:	3317      	adds	r3, #23
 8004dce:	78ba      	ldrb	r2, [r7, #2]
 8004dd0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004dd2:	78fa      	ldrb	r2, [r7, #3]
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	1a9b      	subs	r3, r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	3326      	adds	r3, #38	@ 0x26
 8004de2:	787a      	ldrb	r2, [r7, #1]
 8004de4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004de6:	7c3b      	ldrb	r3, [r7, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d114      	bne.n	8004e16 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	332a      	adds	r3, #42	@ 0x2a
 8004dfc:	2203      	movs	r2, #3
 8004dfe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004e00:	78fa      	ldrb	r2, [r7, #3]
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	1a9b      	subs	r3, r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	3319      	adds	r3, #25
 8004e10:	7f3a      	ldrb	r2, [r7, #28]
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	e009      	b.n	8004e2a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e16:	78fa      	ldrb	r2, [r7, #3]
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	332a      	adds	r3, #42	@ 0x2a
 8004e26:	2202      	movs	r2, #2
 8004e28:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004e2a:	787b      	ldrb	r3, [r7, #1]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	f200 8102 	bhi.w	8005036 <HAL_HCD_HC_SubmitRequest+0x292>
 8004e32:	a201      	add	r2, pc, #4	@ (adr r2, 8004e38 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	08004e49 	.word	0x08004e49
 8004e3c:	08005021 	.word	0x08005021
 8004e40:	08004f0d 	.word	0x08004f0d
 8004e44:	08004f97 	.word	0x08004f97
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004e48:	7c3b      	ldrb	r3, [r7, #16]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	f040 80f5 	bne.w	800503a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004e50:	78bb      	ldrb	r3, [r7, #2]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d12d      	bne.n	8004eb2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004e56:	8b3b      	ldrh	r3, [r7, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004e5c:	78fa      	ldrb	r2, [r7, #3]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	333d      	adds	r3, #61	@ 0x3d
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	333d      	adds	r3, #61	@ 0x3d
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10a      	bne.n	8004e9c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	332a      	adds	r3, #42	@ 0x2a
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004e9a:	e0ce      	b.n	800503a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e9c:	78fa      	ldrb	r2, [r7, #3]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	332a      	adds	r3, #42	@ 0x2a
 8004eac:	2202      	movs	r2, #2
 8004eae:	701a      	strb	r2, [r3, #0]
      break;
 8004eb0:	e0c3      	b.n	800503a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	331a      	adds	r3, #26
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	f040 80b8 	bne.w	800503a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	333c      	adds	r3, #60	@ 0x3c
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	332a      	adds	r3, #42	@ 0x2a
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]
      break;
 8004ef4:	e0a1      	b.n	800503a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ef6:	78fa      	ldrb	r2, [r7, #3]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	332a      	adds	r3, #42	@ 0x2a
 8004f06:	2202      	movs	r2, #2
 8004f08:	701a      	strb	r2, [r3, #0]
      break;
 8004f0a:	e096      	b.n	800503a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004f0c:	78bb      	ldrb	r3, [r7, #2]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d120      	bne.n	8004f54 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	333d      	adds	r3, #61	@ 0x3d
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	332a      	adds	r3, #42	@ 0x2a
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004f3c:	e07e      	b.n	800503c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f3e:	78fa      	ldrb	r2, [r7, #3]
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	332a      	adds	r3, #42	@ 0x2a
 8004f4e:	2202      	movs	r2, #2
 8004f50:	701a      	strb	r2, [r3, #0]
      break;
 8004f52:	e073      	b.n	800503c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	333c      	adds	r3, #60	@ 0x3c
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	332a      	adds	r3, #42	@ 0x2a
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
      break;
 8004f7e:	e05d      	b.n	800503c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f80:	78fa      	ldrb	r2, [r7, #3]
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	332a      	adds	r3, #42	@ 0x2a
 8004f90:	2202      	movs	r2, #2
 8004f92:	701a      	strb	r2, [r3, #0]
      break;
 8004f94:	e052      	b.n	800503c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004f96:	78bb      	ldrb	r3, [r7, #2]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d120      	bne.n	8004fde <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f9c:	78fa      	ldrb	r2, [r7, #3]
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	333d      	adds	r3, #61	@ 0x3d
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004fb2:	78fa      	ldrb	r2, [r7, #3]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	332a      	adds	r3, #42	@ 0x2a
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004fc6:	e039      	b.n	800503c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	332a      	adds	r3, #42	@ 0x2a
 8004fd8:	2202      	movs	r2, #2
 8004fda:	701a      	strb	r2, [r3, #0]
      break;
 8004fdc:	e02e      	b.n	800503c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004fde:	78fa      	ldrb	r2, [r7, #3]
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	333c      	adds	r3, #60	@ 0x3c
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10a      	bne.n	800500a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	332a      	adds	r3, #42	@ 0x2a
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
      break;
 8005008:	e018      	b.n	800503c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	332a      	adds	r3, #42	@ 0x2a
 800501a:	2202      	movs	r2, #2
 800501c:	701a      	strb	r2, [r3, #0]
      break;
 800501e:	e00d      	b.n	800503c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	332a      	adds	r3, #42	@ 0x2a
 8005030:	2200      	movs	r2, #0
 8005032:	701a      	strb	r2, [r3, #0]
      break;
 8005034:	e002      	b.n	800503c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8005036:	bf00      	nop
 8005038:	e000      	b.n	800503c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800503a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800503c:	78fa      	ldrb	r2, [r7, #3]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	332c      	adds	r3, #44	@ 0x2c
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005050:	78fa      	ldrb	r2, [r7, #3]
 8005052:	8b39      	ldrh	r1, [r7, #24]
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4403      	add	r3, r0
 8005060:	3334      	adds	r3, #52	@ 0x34
 8005062:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005064:	78fa      	ldrb	r2, [r7, #3]
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	334c      	adds	r3, #76	@ 0x4c
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005078:	78fa      	ldrb	r2, [r7, #3]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	3338      	adds	r3, #56	@ 0x38
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800508c:	78fa      	ldrb	r2, [r7, #3]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	3315      	adds	r3, #21
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80050a0:	78fa      	ldrb	r2, [r7, #3]
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	334d      	adds	r3, #77	@ 0x4d
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	78fa      	ldrb	r2, [r7, #3]
 80050ba:	4613      	mov	r3, r2
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	3310      	adds	r3, #16
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	4413      	add	r3, r2
 80050c8:	1d19      	adds	r1, r3, #4
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	799b      	ldrb	r3, [r3, #6]
 80050ce:	461a      	mov	r2, r3
 80050d0:	f005 fafc 	bl	800a6cc <USB_HC_StartXfer>
 80050d4:	4603      	mov	r3, r0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop

080050e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f004 fff0 	bl	800a0dc <USB_GetMode>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b01      	cmp	r3, #1
 8005100:	f040 80fb 	bne.w	80052fa <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f004 ffb3 	bl	800a074 <USB_ReadInterrupts>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80f1 	beq.w	80052f8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f004 ffaa 	bl	800a074 <USB_ReadInterrupts>
 8005120:	4603      	mov	r3, r0
 8005122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005126:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800512a:	d104      	bne.n	8005136 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005134:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f004 ff9a 	bl	800a074 <USB_ReadInterrupts>
 8005140:	4603      	mov	r3, r0
 8005142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005146:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800514a:	d104      	bne.n	8005156 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005154:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f004 ff8a 	bl	800a074 <USB_ReadInterrupts>
 8005160:	4603      	mov	r3, r0
 8005162:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005166:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800516a:	d104      	bne.n	8005176 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005174:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f004 ff7a 	bl	800a074 <USB_ReadInterrupts>
 8005180:	4603      	mov	r3, r0
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b02      	cmp	r3, #2
 8005188:	d103      	bne.n	8005192 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2202      	movs	r2, #2
 8005190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f004 ff6c 	bl	800a074 <USB_ReadInterrupts>
 800519c:	4603      	mov	r3, r0
 800519e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051a6:	d120      	bne.n	80051ea <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80051b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d113      	bne.n	80051ea <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80051c2:	2110      	movs	r1, #16
 80051c4:	6938      	ldr	r0, [r7, #16]
 80051c6:	f004 fe5f 	bl	8009e88 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80051ca:	6938      	ldr	r0, [r7, #16]
 80051cc:	f004 fe8e 	bl	8009eec <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	7a5b      	ldrb	r3, [r3, #9]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d105      	bne.n	80051e4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2101      	movs	r1, #1
 80051de:	4618      	mov	r0, r3
 80051e0:	f005 f880 	bl	800a2e4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f008 fd91 	bl	800dd0c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f004 ff40 	bl	800a074 <USB_ReadInterrupts>
 80051f4:	4603      	mov	r3, r0
 80051f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051fe:	d102      	bne.n	8005206 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f001 fd4d 	bl	8006ca0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f004 ff32 	bl	800a074 <USB_ReadInterrupts>
 8005210:	4603      	mov	r3, r0
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b08      	cmp	r3, #8
 8005218:	d106      	bne.n	8005228 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f008 fd5a 	bl	800dcd4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2208      	movs	r2, #8
 8005226:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f004 ff21 	bl	800a074 <USB_ReadInterrupts>
 8005232:	4603      	mov	r3, r0
 8005234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005238:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800523c:	d139      	bne.n	80052b2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f005 fcbc 	bl	800abc0 <USB_HC_ReadInterrupt>
 8005248:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	e025      	b.n	800529c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	fa22 f303 	lsr.w	r3, r2, r3
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d018      	beq.n	8005296 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800527a:	d106      	bne.n	800528a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f905 	bl	8005492 <HCD_HC_IN_IRQHandler>
 8005288:	e005      	b.n	8005296 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	4619      	mov	r1, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 ff67 	bl	8006164 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	3301      	adds	r3, #1
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	795b      	ldrb	r3, [r3, #5]
 80052a0:	461a      	mov	r2, r3
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d3d3      	bcc.n	8005250 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f004 fedc 	bl	800a074 <USB_ReadInterrupts>
 80052bc:	4603      	mov	r3, r0
 80052be:	f003 0310 	and.w	r3, r3, #16
 80052c2:	2b10      	cmp	r3, #16
 80052c4:	d101      	bne.n	80052ca <HAL_HCD_IRQHandler+0x1ea>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <HAL_HCD_IRQHandler+0x1ec>
 80052ca:	2300      	movs	r3, #0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d014      	beq.n	80052fa <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699a      	ldr	r2, [r3, #24]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0210 	bic.w	r2, r2, #16
 80052de:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f001 fbfe 	bl	8006ae2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699a      	ldr	r2, [r3, #24]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0210 	orr.w	r2, r2, #16
 80052f4:	619a      	str	r2, [r3, #24]
 80052f6:	e000      	b.n	80052fa <HAL_HCD_IRQHandler+0x21a>
      return;
 80052f8:	bf00      	nop
    }
  }
}
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_HCD_Start+0x16>
 8005312:	2302      	movs	r3, #2
 8005314:	e013      	b.n	800533e <HAL_HCD_Start+0x3e>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2101      	movs	r1, #1
 8005324:	4618      	mov	r0, r3
 8005326:	f005 f844 	bl	800a3b2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f004 fd3c 	bl	8009dac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b082      	sub	sp, #8
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_HCD_Stop+0x16>
 8005358:	2302      	movs	r3, #2
 800535a:	e00d      	b.n	8005378 <HAL_HCD_Stop+0x32>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f005 fd97 	bl	800ae9c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f004 ffe6 	bl	800a35e <USB_ResetPort>
 8005392:	4603      	mov	r3, r0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80053a8:	78fa      	ldrb	r2, [r7, #3]
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	4613      	mov	r3, r2
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	334c      	adds	r3, #76	@ 0x4c
 80053b8:	781b      	ldrb	r3, [r3, #0]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	460b      	mov	r3, r1
 80053d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80053d2:	78fa      	ldrb	r2, [r7, #3]
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	1a9b      	subs	r3, r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	3338      	adds	r3, #56	@ 0x38
 80053e2:	681b      	ldr	r3, [r3, #0]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f005 f828 	bl	800a452 <USB_GetCurrentFrame>
 8005402:	4603      	mov	r3, r0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f005 f803 	bl	800a424 <USB_GetHostSpeed>
 800541e:	4603      	mov	r3, r0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8005434:	78fa      	ldrb	r2, [r7, #3]
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	331a      	adds	r3, #26
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	331b      	adds	r3, #27
 8005458:	2200      	movs	r2, #0
 800545a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800545c:	78fa      	ldrb	r2, [r7, #3]
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	3325      	adds	r3, #37	@ 0x25
 800546c:	2200      	movs	r2, #0
 800546e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	3324      	adds	r3, #36	@ 0x24
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b086      	sub	sp, #24
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	460b      	mov	r3, r1
 800549c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f004 fdf2 	bl	800a09a <USB_ReadChInterrupts>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d11a      	bne.n	80054f6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054cc:	461a      	mov	r2, r3
 80054ce:	2304      	movs	r3, #4
 80054d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80054d2:	78fa      	ldrb	r2, [r7, #3]
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	334d      	adds	r3, #77	@ 0x4d
 80054e2:	2207      	movs	r2, #7
 80054e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	78fa      	ldrb	r2, [r7, #3]
 80054ec:	4611      	mov	r1, r2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f005 fb77 	bl	800abe2 <USB_HC_Halt>
 80054f4:	e09e      	b.n	8005634 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	4611      	mov	r1, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	f004 fdcb 	bl	800a09a <USB_ReadChInterrupts>
 8005504:	4603      	mov	r3, r0
 8005506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800550a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800550e:	d11b      	bne.n	8005548 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	4413      	add	r3, r2
 8005518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800551c:	461a      	mov	r2, r3
 800551e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005522:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	334d      	adds	r3, #77	@ 0x4d
 8005534:	2208      	movs	r2, #8
 8005536:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	4611      	mov	r1, r2
 8005540:	4618      	mov	r0, r3
 8005542:	f005 fb4e 	bl	800abe2 <USB_HC_Halt>
 8005546:	e075      	b.n	8005634 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	78fa      	ldrb	r2, [r7, #3]
 800554e:	4611      	mov	r1, r2
 8005550:	4618      	mov	r0, r3
 8005552:	f004 fda2 	bl	800a09a <USB_ReadChInterrupts>
 8005556:	4603      	mov	r3, r0
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b08      	cmp	r3, #8
 800555e:	d11a      	bne.n	8005596 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4413      	add	r3, r2
 8005568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800556c:	461a      	mov	r2, r3
 800556e:	2308      	movs	r3, #8
 8005570:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005572:	78fa      	ldrb	r2, [r7, #3]
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	4613      	mov	r3, r2
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	334d      	adds	r3, #77	@ 0x4d
 8005582:	2206      	movs	r2, #6
 8005584:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f005 fb27 	bl	800abe2 <USB_HC_Halt>
 8005594:	e04e      	b.n	8005634 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	78fa      	ldrb	r2, [r7, #3]
 800559c:	4611      	mov	r1, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	f004 fd7b 	bl	800a09a <USB_ReadChInterrupts>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055ae:	d11b      	bne.n	80055e8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055bc:	461a      	mov	r2, r3
 80055be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80055c4:	78fa      	ldrb	r2, [r7, #3]
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	334d      	adds	r3, #77	@ 0x4d
 80055d4:	2209      	movs	r2, #9
 80055d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	78fa      	ldrb	r2, [r7, #3]
 80055de:	4611      	mov	r1, r2
 80055e0:	4618      	mov	r0, r3
 80055e2:	f005 fafe 	bl	800abe2 <USB_HC_Halt>
 80055e6:	e025      	b.n	8005634 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	4611      	mov	r1, r2
 80055f0:	4618      	mov	r0, r3
 80055f2:	f004 fd52 	bl	800a09a <USB_ReadChInterrupts>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fc:	2b80      	cmp	r3, #128	@ 0x80
 80055fe:	d119      	bne.n	8005634 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4413      	add	r3, r2
 8005608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800560c:	461a      	mov	r2, r3
 800560e:	2380      	movs	r3, #128	@ 0x80
 8005610:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005612:	78fa      	ldrb	r2, [r7, #3]
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	440b      	add	r3, r1
 8005620:	334d      	adds	r3, #77	@ 0x4d
 8005622:	2207      	movs	r2, #7
 8005624:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	78fa      	ldrb	r2, [r7, #3]
 800562c:	4611      	mov	r1, r2
 800562e:	4618      	mov	r0, r3
 8005630:	f005 fad7 	bl	800abe2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f004 fd2c 	bl	800a09a <USB_ReadChInterrupts>
 8005642:	4603      	mov	r3, r0
 8005644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800564c:	d112      	bne.n	8005674 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	78fa      	ldrb	r2, [r7, #3]
 8005654:	4611      	mov	r1, r2
 8005656:	4618      	mov	r0, r3
 8005658:	f005 fac3 	bl	800abe2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	4413      	add	r3, r2
 8005664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005668:	461a      	mov	r2, r3
 800566a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800566e:	6093      	str	r3, [r2, #8]
 8005670:	f000 bd75 	b.w	800615e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	78fa      	ldrb	r2, [r7, #3]
 800567a:	4611      	mov	r1, r2
 800567c:	4618      	mov	r0, r3
 800567e:	f004 fd0c 	bl	800a09a <USB_ReadChInterrupts>
 8005682:	4603      	mov	r3, r0
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	f040 8128 	bne.w	80058de <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	4413      	add	r3, r2
 8005696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800569a:	461a      	mov	r2, r3
 800569c:	2320      	movs	r3, #32
 800569e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80056a0:	78fa      	ldrb	r2, [r7, #3]
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	4613      	mov	r3, r2
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	331b      	adds	r3, #27
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d119      	bne.n	80056ea <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	331b      	adds	r3, #27
 80056c6:	2200      	movs	r2, #0
 80056c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	78fa      	ldrb	r2, [r7, #3]
 80056da:	0151      	lsls	r1, r2, #5
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	440a      	add	r2, r1
 80056e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056e8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	799b      	ldrb	r3, [r3, #6]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d01b      	beq.n	800572a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80056f2:	78fa      	ldrb	r2, [r7, #3]
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	3330      	adds	r3, #48	@ 0x30
 8005702:	6819      	ldr	r1, [r3, #0]
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	1ac9      	subs	r1, r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	4613      	mov	r3, r2
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	1a9b      	subs	r3, r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4403      	add	r3, r0
 8005726:	3338      	adds	r3, #56	@ 0x38
 8005728:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800572a:	78fa      	ldrb	r2, [r7, #3]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	1a9b      	subs	r3, r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	334d      	adds	r3, #77	@ 0x4d
 800573a:	2201      	movs	r2, #1
 800573c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800573e:	78fa      	ldrb	r2, [r7, #3]
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	3344      	adds	r3, #68	@ 0x44
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	4413      	add	r3, r2
 800575a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800575e:	461a      	mov	r2, r3
 8005760:	2301      	movs	r3, #1
 8005762:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005764:	78fa      	ldrb	r2, [r7, #3]
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	4613      	mov	r3, r2
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	3326      	adds	r3, #38	@ 0x26
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800577a:	78fa      	ldrb	r2, [r7, #3]
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	4613      	mov	r3, r2
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	3326      	adds	r3, #38	@ 0x26
 800578a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800578c:	2b02      	cmp	r3, #2
 800578e:	d110      	bne.n	80057b2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	78fa      	ldrb	r2, [r7, #3]
 8005796:	4611      	mov	r1, r2
 8005798:	4618      	mov	r0, r3
 800579a:	f005 fa22 	bl	800abe2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057aa:	461a      	mov	r2, r3
 80057ac:	2310      	movs	r3, #16
 80057ae:	6093      	str	r3, [r2, #8]
 80057b0:	e03d      	b.n	800582e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	3326      	adds	r3, #38	@ 0x26
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b03      	cmp	r3, #3
 80057c6:	d00a      	beq.n	80057de <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80057c8:	78fa      	ldrb	r2, [r7, #3]
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	4613      	mov	r3, r2
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	1a9b      	subs	r3, r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	3326      	adds	r3, #38	@ 0x26
 80057d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d127      	bne.n	800582e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057de:	78fb      	ldrb	r3, [r7, #3]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	78fa      	ldrb	r2, [r7, #3]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057fc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	334c      	adds	r3, #76	@ 0x4c
 800580e:	2201      	movs	r2, #1
 8005810:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005812:	78fa      	ldrb	r2, [r7, #3]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	334c      	adds	r3, #76	@ 0x4c
 8005822:	781a      	ldrb	r2, [r3, #0]
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f008 fa7d 	bl	800dd28 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	799b      	ldrb	r3, [r3, #6]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d13b      	bne.n	80058ae <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005836:	78fa      	ldrb	r2, [r7, #3]
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	1a9b      	subs	r3, r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	3338      	adds	r3, #56	@ 0x38
 8005846:	6819      	ldr	r1, [r3, #0]
 8005848:	78fa      	ldrb	r2, [r7, #3]
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4403      	add	r3, r0
 8005856:	3328      	adds	r3, #40	@ 0x28
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	440b      	add	r3, r1
 800585c:	1e59      	subs	r1, r3, #1
 800585e:	78fa      	ldrb	r2, [r7, #3]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4403      	add	r3, r0
 800586c:	3328      	adds	r3, #40	@ 0x28
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	fbb1 f3f3 	udiv	r3, r1, r3
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 8470 	beq.w	800615e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800587e:	78fa      	ldrb	r2, [r7, #3]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	440b      	add	r3, r1
 800588c:	333c      	adds	r3, #60	@ 0x3c
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	78fa      	ldrb	r2, [r7, #3]
 8005892:	f083 0301 	eor.w	r3, r3, #1
 8005896:	b2d8      	uxtb	r0, r3
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	1a9b      	subs	r3, r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	440b      	add	r3, r1
 80058a4:	333c      	adds	r3, #60	@ 0x3c
 80058a6:	4602      	mov	r2, r0
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	f000 bc58 	b.w	800615e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80058ae:	78fa      	ldrb	r2, [r7, #3]
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	333c      	adds	r3, #60	@ 0x3c
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	78fa      	ldrb	r2, [r7, #3]
 80058c2:	f083 0301 	eor.w	r3, r3, #1
 80058c6:	b2d8      	uxtb	r0, r3
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	333c      	adds	r3, #60	@ 0x3c
 80058d6:	4602      	mov	r2, r0
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	f000 bc40 	b.w	800615e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	78fa      	ldrb	r2, [r7, #3]
 80058e4:	4611      	mov	r1, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f004 fbd7 	bl	800a09a <USB_ReadChInterrupts>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d131      	bne.n	800595a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80058f6:	78fb      	ldrb	r3, [r7, #3]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005902:	461a      	mov	r2, r3
 8005904:	2320      	movs	r3, #32
 8005906:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	331a      	adds	r3, #26
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b01      	cmp	r3, #1
 800591c:	f040 841f 	bne.w	800615e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005920:	78fa      	ldrb	r2, [r7, #3]
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	4613      	mov	r3, r2
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	1a9b      	subs	r3, r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	331b      	adds	r3, #27
 8005930:	2201      	movs	r2, #1
 8005932:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005934:	78fa      	ldrb	r2, [r7, #3]
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	334d      	adds	r3, #77	@ 0x4d
 8005944:	2203      	movs	r2, #3
 8005946:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	78fa      	ldrb	r2, [r7, #3]
 800594e:	4611      	mov	r1, r2
 8005950:	4618      	mov	r0, r3
 8005952:	f005 f946 	bl	800abe2 <USB_HC_Halt>
 8005956:	f000 bc02 	b.w	800615e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	78fa      	ldrb	r2, [r7, #3]
 8005960:	4611      	mov	r1, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f004 fb99 	bl	800a09a <USB_ReadChInterrupts>
 8005968:	4603      	mov	r3, r0
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b02      	cmp	r3, #2
 8005970:	f040 8305 	bne.w	8005f7e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	4413      	add	r3, r2
 800597c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005980:	461a      	mov	r2, r3
 8005982:	2302      	movs	r3, #2
 8005984:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005986:	78fa      	ldrb	r2, [r7, #3]
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	334d      	adds	r3, #77	@ 0x4d
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d114      	bne.n	80059c6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	440b      	add	r3, r1
 80059aa:	334d      	adds	r3, #77	@ 0x4d
 80059ac:	2202      	movs	r2, #2
 80059ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80059b0:	78fa      	ldrb	r2, [r7, #3]
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	1a9b      	subs	r3, r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	334c      	adds	r3, #76	@ 0x4c
 80059c0:	2201      	movs	r2, #1
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	e2cc      	b.n	8005f60 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80059c6:	78fa      	ldrb	r2, [r7, #3]
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	440b      	add	r3, r1
 80059d4:	334d      	adds	r3, #77	@ 0x4d
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b06      	cmp	r3, #6
 80059da:	d114      	bne.n	8005a06 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80059dc:	78fa      	ldrb	r2, [r7, #3]
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	4613      	mov	r3, r2
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	334d      	adds	r3, #77	@ 0x4d
 80059ec:	2202      	movs	r2, #2
 80059ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80059f0:	78fa      	ldrb	r2, [r7, #3]
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	4613      	mov	r3, r2
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	334c      	adds	r3, #76	@ 0x4c
 8005a00:	2205      	movs	r2, #5
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	e2ac      	b.n	8005f60 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005a06:	78fa      	ldrb	r2, [r7, #3]
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	334d      	adds	r3, #77	@ 0x4d
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b07      	cmp	r3, #7
 8005a1a:	d00b      	beq.n	8005a34 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005a1c:	78fa      	ldrb	r2, [r7, #3]
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	4613      	mov	r3, r2
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	334d      	adds	r3, #77	@ 0x4d
 8005a2c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005a2e:	2b09      	cmp	r3, #9
 8005a30:	f040 80a6 	bne.w	8005b80 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a34:	78fa      	ldrb	r2, [r7, #3]
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	1a9b      	subs	r3, r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	334d      	adds	r3, #77	@ 0x4d
 8005a44:	2202      	movs	r2, #2
 8005a46:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005a48:	78fa      	ldrb	r2, [r7, #3]
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	1a9b      	subs	r3, r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	3344      	adds	r3, #68	@ 0x44
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	1c59      	adds	r1, r3, #1
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4403      	add	r3, r0
 8005a68:	3344      	adds	r3, #68	@ 0x44
 8005a6a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a6c:	78fa      	ldrb	r2, [r7, #3]
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	3344      	adds	r3, #68	@ 0x44
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d943      	bls.n	8005b0a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005a82:	78fa      	ldrb	r2, [r7, #3]
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	011b      	lsls	r3, r3, #4
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	3344      	adds	r3, #68	@ 0x44
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005a96:	78fa      	ldrb	r2, [r7, #3]
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	1a9b      	subs	r3, r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	440b      	add	r3, r1
 8005aa4:	331a      	adds	r3, #26
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d123      	bne.n	8005af4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005aac:	78fa      	ldrb	r2, [r7, #3]
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	331b      	adds	r3, #27
 8005abc:	2200      	movs	r2, #0
 8005abe:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005ac0:	78fa      	ldrb	r2, [r7, #3]
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	331c      	adds	r3, #28
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	78fa      	ldrb	r2, [r7, #3]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005af2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005af4:	78fa      	ldrb	r2, [r7, #3]
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	4613      	mov	r3, r2
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	1a9b      	subs	r3, r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	334c      	adds	r3, #76	@ 0x4c
 8005b04:	2204      	movs	r2, #4
 8005b06:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005b08:	e229      	b.n	8005f5e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b0a:	78fa      	ldrb	r2, [r7, #3]
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	011b      	lsls	r3, r3, #4
 8005b12:	1a9b      	subs	r3, r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	440b      	add	r3, r1
 8005b18:	334c      	adds	r3, #76	@ 0x4c
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b1e:	78fa      	ldrb	r2, [r7, #3]
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	3326      	adds	r3, #38	@ 0x26
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005b34:	78fa      	ldrb	r2, [r7, #3]
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	3326      	adds	r3, #38	@ 0x26
 8005b44:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	f040 8209 	bne.w	8005f5e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b62:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b6a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b78:	461a      	mov	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005b7e:	e1ee      	b.n	8005f5e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005b80:	78fa      	ldrb	r2, [r7, #3]
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	1a9b      	subs	r3, r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	334d      	adds	r3, #77	@ 0x4d
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b05      	cmp	r3, #5
 8005b94:	f040 80c8 	bne.w	8005d28 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	334d      	adds	r3, #77	@ 0x4d
 8005ba8:	2202      	movs	r2, #2
 8005baa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005bac:	78fa      	ldrb	r2, [r7, #3]
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	331b      	adds	r3, #27
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	f040 81ce 	bne.w	8005f60 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005bc4:	78fa      	ldrb	r2, [r7, #3]
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	3326      	adds	r3, #38	@ 0x26
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d16b      	bne.n	8005cb2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	3348      	adds	r3, #72	@ 0x48
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	1c59      	adds	r1, r3, #1
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	1a9b      	subs	r3, r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4403      	add	r3, r0
 8005bfa:	3348      	adds	r3, #72	@ 0x48
 8005bfc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005bfe:	78fa      	ldrb	r2, [r7, #3]
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	3348      	adds	r3, #72	@ 0x48
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d943      	bls.n	8005c9c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	1a9b      	subs	r3, r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	3348      	adds	r3, #72	@ 0x48
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005c28:	78fa      	ldrb	r2, [r7, #3]
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	331b      	adds	r3, #27
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005c3c:	78fa      	ldrb	r2, [r7, #3]
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	4613      	mov	r3, r2
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	3344      	adds	r3, #68	@ 0x44
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d809      	bhi.n	8005c66 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005c52:	78fa      	ldrb	r2, [r7, #3]
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	4613      	mov	r3, r2
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	1a9b      	subs	r3, r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	331c      	adds	r3, #28
 8005c62:	2201      	movs	r2, #1
 8005c64:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	78fa      	ldrb	r2, [r7, #3]
 8005c76:	0151      	lsls	r1, r2, #5
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	440a      	add	r2, r1
 8005c7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c84:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005c86:	78fa      	ldrb	r2, [r7, #3]
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	1a9b      	subs	r3, r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	334c      	adds	r3, #76	@ 0x4c
 8005c96:	2204      	movs	r2, #4
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	e014      	b.n	8005cc6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c9c:	78fa      	ldrb	r2, [r7, #3]
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	334c      	adds	r3, #76	@ 0x4c
 8005cac:	2202      	movs	r2, #2
 8005cae:	701a      	strb	r2, [r3, #0]
 8005cb0:	e009      	b.n	8005cc6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005cb2:	78fa      	ldrb	r2, [r7, #3]
 8005cb4:	6879      	ldr	r1, [r7, #4]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	334c      	adds	r3, #76	@ 0x4c
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005cc6:	78fa      	ldrb	r2, [r7, #3]
 8005cc8:	6879      	ldr	r1, [r7, #4]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	440b      	add	r3, r1
 8005cd4:	3326      	adds	r3, #38	@ 0x26
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00b      	beq.n	8005cf4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005cdc:	78fa      	ldrb	r2, [r7, #3]
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	440b      	add	r3, r1
 8005cea:	3326      	adds	r3, #38	@ 0x26
 8005cec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	f040 8136 	bne.w	8005f60 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d0a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d12:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d20:	461a      	mov	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e11b      	b.n	8005f60 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005d28:	78fa      	ldrb	r2, [r7, #3]
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	1a9b      	subs	r3, r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	334d      	adds	r3, #77	@ 0x4d
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	f040 8081 	bne.w	8005e42 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d40:	78fa      	ldrb	r2, [r7, #3]
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	4613      	mov	r3, r2
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	1a9b      	subs	r3, r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	334d      	adds	r3, #77	@ 0x4d
 8005d50:	2202      	movs	r2, #2
 8005d52:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	1a9b      	subs	r3, r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	331b      	adds	r3, #27
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	f040 80fa 	bne.w	8005f60 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005d6c:	78fa      	ldrb	r2, [r7, #3]
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	4613      	mov	r3, r2
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	334c      	adds	r3, #76	@ 0x4c
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	78fa      	ldrb	r2, [r7, #3]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d9e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	78fa      	ldrb	r2, [r7, #3]
 8005db0:	0151      	lsls	r1, r2, #5
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	440a      	add	r2, r1
 8005db6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dbe:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	78fa      	ldrb	r2, [r7, #3]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dda:	f023 0320 	bic.w	r3, r3, #32
 8005dde:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005de0:	78fa      	ldrb	r2, [r7, #3]
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	4613      	mov	r3, r2
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	3326      	adds	r3, #38	@ 0x26
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00b      	beq.n	8005e0e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	3326      	adds	r3, #38	@ 0x26
 8005e06:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	f040 80a9 	bne.w	8005f60 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e24:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e2c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	e08e      	b.n	8005f60 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005e42:	78fa      	ldrb	r2, [r7, #3]
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	011b      	lsls	r3, r3, #4
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	334d      	adds	r3, #77	@ 0x4d
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d143      	bne.n	8005ee0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e58:	78fa      	ldrb	r2, [r7, #3]
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	1a9b      	subs	r3, r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	334d      	adds	r3, #77	@ 0x4d
 8005e68:	2202      	movs	r2, #2
 8005e6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	334c      	adds	r3, #76	@ 0x4c
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	4613      	mov	r3, r2
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	1a9b      	subs	r3, r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	3326      	adds	r3, #38	@ 0x26
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	3326      	adds	r3, #38	@ 0x26
 8005ea6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d159      	bne.n	8005f60 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ec2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005eca:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ecc:	78fb      	ldrb	r3, [r7, #3]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	e03f      	b.n	8005f60 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005ee0:	78fa      	ldrb	r2, [r7, #3]
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	1a9b      	subs	r3, r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	334d      	adds	r3, #77	@ 0x4d
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b08      	cmp	r3, #8
 8005ef4:	d126      	bne.n	8005f44 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ef6:	78fa      	ldrb	r2, [r7, #3]
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	4613      	mov	r3, r2
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	1a9b      	subs	r3, r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	440b      	add	r3, r1
 8005f04:	334d      	adds	r3, #77	@ 0x4d
 8005f06:	2202      	movs	r2, #2
 8005f08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005f0a:	78fa      	ldrb	r2, [r7, #3]
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	1a9b      	subs	r3, r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	440b      	add	r3, r1
 8005f18:	3344      	adds	r3, #68	@ 0x44
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	1c59      	adds	r1, r3, #1
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	4613      	mov	r3, r2
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4403      	add	r3, r0
 8005f2a:	3344      	adds	r3, #68	@ 0x44
 8005f2c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005f2e:	78fa      	ldrb	r2, [r7, #3]
 8005f30:	6879      	ldr	r1, [r7, #4]
 8005f32:	4613      	mov	r3, r2
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	334c      	adds	r3, #76	@ 0x4c
 8005f3e:	2204      	movs	r2, #4
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	e00d      	b.n	8005f60 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005f44:	78fa      	ldrb	r2, [r7, #3]
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	1a9b      	subs	r3, r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	334d      	adds	r3, #77	@ 0x4d
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	f000 8100 	beq.w	800615c <HCD_HC_IN_IRQHandler+0xcca>
 8005f5c:	e000      	b.n	8005f60 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005f5e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005f60:	78fa      	ldrb	r2, [r7, #3]
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	4613      	mov	r3, r2
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	334c      	adds	r3, #76	@ 0x4c
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f007 fed6 	bl	800dd28 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005f7c:	e0ef      	b.n	800615e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	78fa      	ldrb	r2, [r7, #3]
 8005f84:	4611      	mov	r1, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f004 f887 	bl	800a09a <USB_ReadChInterrupts>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f92:	2b40      	cmp	r3, #64	@ 0x40
 8005f94:	d12f      	bne.n	8005ff6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	2340      	movs	r3, #64	@ 0x40
 8005fa6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005fa8:	78fa      	ldrb	r2, [r7, #3]
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	4613      	mov	r3, r2
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	1a9b      	subs	r3, r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	334d      	adds	r3, #77	@ 0x4d
 8005fb8:	2205      	movs	r2, #5
 8005fba:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005fbc:	78fa      	ldrb	r2, [r7, #3]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	1a9b      	subs	r3, r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	331a      	adds	r3, #26
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005fd2:	78fa      	ldrb	r2, [r7, #3]
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	1a9b      	subs	r3, r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	440b      	add	r3, r1
 8005fe0:	3344      	adds	r3, #68	@ 0x44
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	78fa      	ldrb	r2, [r7, #3]
 8005fec:	4611      	mov	r1, r2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f004 fdf7 	bl	800abe2 <USB_HC_Halt>
 8005ff4:	e0b3      	b.n	800615e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	78fa      	ldrb	r2, [r7, #3]
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f004 f84b 	bl	800a09a <USB_ReadChInterrupts>
 8006004:	4603      	mov	r3, r0
 8006006:	f003 0310 	and.w	r3, r3, #16
 800600a:	2b10      	cmp	r3, #16
 800600c:	f040 80a7 	bne.w	800615e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006010:	78fa      	ldrb	r2, [r7, #3]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	3326      	adds	r3, #38	@ 0x26
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b03      	cmp	r3, #3
 8006024:	d11b      	bne.n	800605e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006026:	78fa      	ldrb	r2, [r7, #3]
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	3344      	adds	r3, #68	@ 0x44
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	334d      	adds	r3, #77	@ 0x4d
 800604a:	2204      	movs	r2, #4
 800604c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	78fa      	ldrb	r2, [r7, #3]
 8006054:	4611      	mov	r1, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f004 fdc3 	bl	800abe2 <USB_HC_Halt>
 800605c:	e03f      	b.n	80060de <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800605e:	78fa      	ldrb	r2, [r7, #3]
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	1a9b      	subs	r3, r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	3326      	adds	r3, #38	@ 0x26
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006074:	78fa      	ldrb	r2, [r7, #3]
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	4613      	mov	r3, r2
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	1a9b      	subs	r3, r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	3326      	adds	r3, #38	@ 0x26
 8006084:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006086:	2b02      	cmp	r3, #2
 8006088:	d129      	bne.n	80060de <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800608a:	78fa      	ldrb	r2, [r7, #3]
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	440b      	add	r3, r1
 8006098:	3344      	adds	r3, #68	@ 0x44
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	799b      	ldrb	r3, [r3, #6]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HCD_HC_IN_IRQHandler+0xc2a>
 80060a6:	78fa      	ldrb	r2, [r7, #3]
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	1a9b      	subs	r3, r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	331b      	adds	r3, #27
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d110      	bne.n	80060de <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80060bc:	78fa      	ldrb	r2, [r7, #3]
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	1a9b      	subs	r3, r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	334d      	adds	r3, #77	@ 0x4d
 80060cc:	2204      	movs	r2, #4
 80060ce:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	78fa      	ldrb	r2, [r7, #3]
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f004 fd82 	bl	800abe2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80060de:	78fa      	ldrb	r2, [r7, #3]
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	4613      	mov	r3, r2
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	1a9b      	subs	r3, r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	440b      	add	r3, r1
 80060ec:	331b      	adds	r3, #27
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d129      	bne.n	8006148 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80060f4:	78fa      	ldrb	r2, [r7, #3]
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	4613      	mov	r3, r2
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	1a9b      	subs	r3, r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	440b      	add	r3, r1
 8006102:	331b      	adds	r3, #27
 8006104:	2200      	movs	r2, #0
 8006106:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	4413      	add	r3, r2
 8006110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	78fa      	ldrb	r2, [r7, #3]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	440a      	add	r2, r1
 800611e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006126:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4413      	add	r3, r2
 8006130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	78fa      	ldrb	r2, [r7, #3]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	440a      	add	r2, r1
 800613e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006142:	f043 0320 	orr.w	r3, r3, #32
 8006146:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	4413      	add	r3, r2
 8006150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006154:	461a      	mov	r2, r3
 8006156:	2310      	movs	r3, #16
 8006158:	6093      	str	r3, [r2, #8]
 800615a:	e000      	b.n	800615e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800615c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	78fa      	ldrb	r2, [r7, #3]
 8006180:	4611      	mov	r1, r2
 8006182:	4618      	mov	r0, r3
 8006184:	f003 ff89 	bl	800a09a <USB_ReadChInterrupts>
 8006188:	4603      	mov	r3, r0
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	2b04      	cmp	r3, #4
 8006190:	d11b      	bne.n	80061ca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4413      	add	r3, r2
 800619a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800619e:	461a      	mov	r2, r3
 80061a0:	2304      	movs	r3, #4
 80061a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80061a4:	78fa      	ldrb	r2, [r7, #3]
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	4613      	mov	r3, r2
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	334d      	adds	r3, #77	@ 0x4d
 80061b4:	2207      	movs	r2, #7
 80061b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	4611      	mov	r1, r2
 80061c0:	4618      	mov	r0, r3
 80061c2:	f004 fd0e 	bl	800abe2 <USB_HC_Halt>
 80061c6:	f000 bc89 	b.w	8006adc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	78fa      	ldrb	r2, [r7, #3]
 80061d0:	4611      	mov	r1, r2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f003 ff61 	bl	800a09a <USB_ReadChInterrupts>
 80061d8:	4603      	mov	r3, r0
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b20      	cmp	r3, #32
 80061e0:	f040 8082 	bne.w	80062e8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f0:	461a      	mov	r2, r3
 80061f2:	2320      	movs	r3, #32
 80061f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80061f6:	78fa      	ldrb	r2, [r7, #3]
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	3319      	adds	r3, #25
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d124      	bne.n	8006256 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800620c:	78fa      	ldrb	r2, [r7, #3]
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	4613      	mov	r3, r2
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	1a9b      	subs	r3, r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	3319      	adds	r3, #25
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006220:	78fa      	ldrb	r2, [r7, #3]
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	4613      	mov	r3, r2
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	1a9b      	subs	r3, r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	334c      	adds	r3, #76	@ 0x4c
 8006230:	2202      	movs	r2, #2
 8006232:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006234:	78fa      	ldrb	r2, [r7, #3]
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	4613      	mov	r3, r2
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	1a9b      	subs	r3, r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	334d      	adds	r3, #77	@ 0x4d
 8006244:	2203      	movs	r2, #3
 8006246:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	78fa      	ldrb	r2, [r7, #3]
 800624e:	4611      	mov	r1, r2
 8006250:	4618      	mov	r0, r3
 8006252:	f004 fcc6 	bl	800abe2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8006256:	78fa      	ldrb	r2, [r7, #3]
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	4613      	mov	r3, r2
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	1a9b      	subs	r3, r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	440b      	add	r3, r1
 8006264:	331a      	adds	r3, #26
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b01      	cmp	r3, #1
 800626a:	f040 8437 	bne.w	8006adc <HCD_HC_OUT_IRQHandler+0x978>
 800626e:	78fa      	ldrb	r2, [r7, #3]
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	4613      	mov	r3, r2
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	1a9b      	subs	r3, r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	440b      	add	r3, r1
 800627c:	331b      	adds	r3, #27
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	f040 842b 	bne.w	8006adc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8006286:	78fa      	ldrb	r2, [r7, #3]
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	1a9b      	subs	r3, r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	440b      	add	r3, r1
 8006294:	3326      	adds	r3, #38	@ 0x26
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d009      	beq.n	80062b0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800629c:	78fa      	ldrb	r2, [r7, #3]
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	4613      	mov	r3, r2
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	331b      	adds	r3, #27
 80062ac:	2201      	movs	r2, #1
 80062ae:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80062b0:	78fa      	ldrb	r2, [r7, #3]
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	4613      	mov	r3, r2
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	1a9b      	subs	r3, r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	440b      	add	r3, r1
 80062be:	334d      	adds	r3, #77	@ 0x4d
 80062c0:	2203      	movs	r2, #3
 80062c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	78fa      	ldrb	r2, [r7, #3]
 80062ca:	4611      	mov	r1, r2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f004 fc88 	bl	800abe2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80062d2:	78fa      	ldrb	r2, [r7, #3]
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	1a9b      	subs	r3, r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	3344      	adds	r3, #68	@ 0x44
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	e3f9      	b.n	8006adc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	78fa      	ldrb	r2, [r7, #3]
 80062ee:	4611      	mov	r1, r2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f003 fed2 	bl	800a09a <USB_ReadChInterrupts>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006300:	d111      	bne.n	8006326 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006302:	78fb      	ldrb	r3, [r7, #3]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	4413      	add	r3, r2
 800630a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800630e:	461a      	mov	r2, r3
 8006310:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006314:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	4611      	mov	r1, r2
 800631e:	4618      	mov	r0, r3
 8006320:	f004 fc5f 	bl	800abe2 <USB_HC_Halt>
 8006324:	e3da      	b.n	8006adc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	78fa      	ldrb	r2, [r7, #3]
 800632c:	4611      	mov	r1, r2
 800632e:	4618      	mov	r0, r3
 8006330:	f003 feb3 	bl	800a09a <USB_ReadChInterrupts>
 8006334:	4603      	mov	r3, r0
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b01      	cmp	r3, #1
 800633c:	d168      	bne.n	8006410 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800633e:	78fa      	ldrb	r2, [r7, #3]
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	4613      	mov	r3, r2
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	440b      	add	r3, r1
 800634c:	3344      	adds	r3, #68	@ 0x44
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	78fa      	ldrb	r2, [r7, #3]
 8006358:	4611      	mov	r1, r2
 800635a:	4618      	mov	r0, r3
 800635c:	f003 fe9d 	bl	800a09a <USB_ReadChInterrupts>
 8006360:	4603      	mov	r3, r0
 8006362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006366:	2b40      	cmp	r3, #64	@ 0x40
 8006368:	d112      	bne.n	8006390 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	1a9b      	subs	r3, r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	440b      	add	r3, r1
 8006378:	3319      	adds	r3, #25
 800637a:	2201      	movs	r2, #1
 800637c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800638a:	461a      	mov	r2, r3
 800638c:	2340      	movs	r3, #64	@ 0x40
 800638e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006390:	78fa      	ldrb	r2, [r7, #3]
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	4613      	mov	r3, r2
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	331b      	adds	r3, #27
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d019      	beq.n	80063da <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80063a6:	78fa      	ldrb	r2, [r7, #3]
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	4613      	mov	r3, r2
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	1a9b      	subs	r3, r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	440b      	add	r3, r1
 80063b4:	331b      	adds	r3, #27
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	78fa      	ldrb	r2, [r7, #3]
 80063ca:	0151      	lsls	r1, r2, #5
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	440a      	add	r2, r1
 80063d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e6:	461a      	mov	r2, r3
 80063e8:	2301      	movs	r3, #1
 80063ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80063ec:	78fa      	ldrb	r2, [r7, #3]
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	4613      	mov	r3, r2
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	1a9b      	subs	r3, r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	334d      	adds	r3, #77	@ 0x4d
 80063fc:	2201      	movs	r2, #1
 80063fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	78fa      	ldrb	r2, [r7, #3]
 8006406:	4611      	mov	r1, r2
 8006408:	4618      	mov	r0, r3
 800640a:	f004 fbea 	bl	800abe2 <USB_HC_Halt>
 800640e:	e365      	b.n	8006adc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	78fa      	ldrb	r2, [r7, #3]
 8006416:	4611      	mov	r1, r2
 8006418:	4618      	mov	r0, r3
 800641a:	f003 fe3e 	bl	800a09a <USB_ReadChInterrupts>
 800641e:	4603      	mov	r3, r0
 8006420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006424:	2b40      	cmp	r3, #64	@ 0x40
 8006426:	d139      	bne.n	800649c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8006428:	78fa      	ldrb	r2, [r7, #3]
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	4613      	mov	r3, r2
 800642e:	011b      	lsls	r3, r3, #4
 8006430:	1a9b      	subs	r3, r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	440b      	add	r3, r1
 8006436:	334d      	adds	r3, #77	@ 0x4d
 8006438:	2205      	movs	r2, #5
 800643a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800643c:	78fa      	ldrb	r2, [r7, #3]
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	4613      	mov	r3, r2
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	1a9b      	subs	r3, r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	440b      	add	r3, r1
 800644a:	331a      	adds	r3, #26
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d109      	bne.n	8006466 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8006452:	78fa      	ldrb	r2, [r7, #3]
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	4613      	mov	r3, r2
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	1a9b      	subs	r3, r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	440b      	add	r3, r1
 8006460:	3319      	adds	r3, #25
 8006462:	2201      	movs	r2, #1
 8006464:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8006466:	78fa      	ldrb	r2, [r7, #3]
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	4613      	mov	r3, r2
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	1a9b      	subs	r3, r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	440b      	add	r3, r1
 8006474:	3344      	adds	r3, #68	@ 0x44
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	78fa      	ldrb	r2, [r7, #3]
 8006480:	4611      	mov	r1, r2
 8006482:	4618      	mov	r0, r3
 8006484:	f004 fbad 	bl	800abe2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	4413      	add	r3, r2
 8006490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006494:	461a      	mov	r2, r3
 8006496:	2340      	movs	r3, #64	@ 0x40
 8006498:	6093      	str	r3, [r2, #8]
 800649a:	e31f      	b.n	8006adc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	78fa      	ldrb	r2, [r7, #3]
 80064a2:	4611      	mov	r1, r2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f003 fdf8 	bl	800a09a <USB_ReadChInterrupts>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d11a      	bne.n	80064ea <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064c0:	461a      	mov	r2, r3
 80064c2:	2308      	movs	r3, #8
 80064c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80064c6:	78fa      	ldrb	r2, [r7, #3]
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	4613      	mov	r3, r2
 80064cc:	011b      	lsls	r3, r3, #4
 80064ce:	1a9b      	subs	r3, r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	440b      	add	r3, r1
 80064d4:	334d      	adds	r3, #77	@ 0x4d
 80064d6:	2206      	movs	r2, #6
 80064d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	4611      	mov	r1, r2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f004 fb7d 	bl	800abe2 <USB_HC_Halt>
 80064e8:	e2f8      	b.n	8006adc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	78fa      	ldrb	r2, [r7, #3]
 80064f0:	4611      	mov	r1, r2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f003 fdd1 	bl	800a09a <USB_ReadChInterrupts>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	2b10      	cmp	r3, #16
 8006500:	d144      	bne.n	800658c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006502:	78fa      	ldrb	r2, [r7, #3]
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	4613      	mov	r3, r2
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	1a9b      	subs	r3, r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	3344      	adds	r3, #68	@ 0x44
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006516:	78fa      	ldrb	r2, [r7, #3]
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	334d      	adds	r3, #77	@ 0x4d
 8006526:	2204      	movs	r2, #4
 8006528:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800652a:	78fa      	ldrb	r2, [r7, #3]
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	4613      	mov	r3, r2
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	1a9b      	subs	r3, r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	440b      	add	r3, r1
 8006538:	3319      	adds	r3, #25
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d114      	bne.n	800656a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006540:	78fa      	ldrb	r2, [r7, #3]
 8006542:	6879      	ldr	r1, [r7, #4]
 8006544:	4613      	mov	r3, r2
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	1a9b      	subs	r3, r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	3318      	adds	r3, #24
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d109      	bne.n	800656a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006556:	78fa      	ldrb	r2, [r7, #3]
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	4613      	mov	r3, r2
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	1a9b      	subs	r3, r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	440b      	add	r3, r1
 8006564:	3319      	adds	r3, #25
 8006566:	2201      	movs	r2, #1
 8006568:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	78fa      	ldrb	r2, [r7, #3]
 8006570:	4611      	mov	r1, r2
 8006572:	4618      	mov	r0, r3
 8006574:	f004 fb35 	bl	800abe2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	4413      	add	r3, r2
 8006580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006584:	461a      	mov	r2, r3
 8006586:	2310      	movs	r3, #16
 8006588:	6093      	str	r3, [r2, #8]
 800658a:	e2a7      	b.n	8006adc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	78fa      	ldrb	r2, [r7, #3]
 8006592:	4611      	mov	r1, r2
 8006594:	4618      	mov	r0, r3
 8006596:	f003 fd80 	bl	800a09a <USB_ReadChInterrupts>
 800659a:	4603      	mov	r3, r0
 800659c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a0:	2b80      	cmp	r3, #128	@ 0x80
 80065a2:	f040 8083 	bne.w	80066ac <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	799b      	ldrb	r3, [r3, #6]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d111      	bne.n	80065d2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80065ae:	78fa      	ldrb	r2, [r7, #3]
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	4613      	mov	r3, r2
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	1a9b      	subs	r3, r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	334d      	adds	r3, #77	@ 0x4d
 80065be:	2207      	movs	r2, #7
 80065c0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	78fa      	ldrb	r2, [r7, #3]
 80065c8:	4611      	mov	r1, r2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f004 fb09 	bl	800abe2 <USB_HC_Halt>
 80065d0:	e062      	b.n	8006698 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80065d2:	78fa      	ldrb	r2, [r7, #3]
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	4613      	mov	r3, r2
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	1a9b      	subs	r3, r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	440b      	add	r3, r1
 80065e0:	3344      	adds	r3, #68	@ 0x44
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	1c59      	adds	r1, r3, #1
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4613      	mov	r3, r2
 80065ea:	011b      	lsls	r3, r3, #4
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4403      	add	r3, r0
 80065f2:	3344      	adds	r3, #68	@ 0x44
 80065f4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80065f6:	78fa      	ldrb	r2, [r7, #3]
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	4613      	mov	r3, r2
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	1a9b      	subs	r3, r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	440b      	add	r3, r1
 8006604:	3344      	adds	r3, #68	@ 0x44
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b02      	cmp	r3, #2
 800660a:	d922      	bls.n	8006652 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800660c:	78fa      	ldrb	r2, [r7, #3]
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	4613      	mov	r3, r2
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	3344      	adds	r3, #68	@ 0x44
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006620:	78fa      	ldrb	r2, [r7, #3]
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	4613      	mov	r3, r2
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	1a9b      	subs	r3, r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	334c      	adds	r3, #76	@ 0x4c
 8006630:	2204      	movs	r2, #4
 8006632:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006634:	78fa      	ldrb	r2, [r7, #3]
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4613      	mov	r3, r2
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	1a9b      	subs	r3, r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	334c      	adds	r3, #76	@ 0x4c
 8006644:	781a      	ldrb	r2, [r3, #0]
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f007 fb6c 	bl	800dd28 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006650:	e022      	b.n	8006698 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006652:	78fa      	ldrb	r2, [r7, #3]
 8006654:	6879      	ldr	r1, [r7, #4]
 8006656:	4613      	mov	r3, r2
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	334c      	adds	r3, #76	@ 0x4c
 8006662:	2202      	movs	r2, #2
 8006664:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	4413      	add	r3, r2
 800666e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800667c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006684:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	4413      	add	r3, r2
 800668e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006692:	461a      	mov	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066a4:	461a      	mov	r2, r3
 80066a6:	2380      	movs	r3, #128	@ 0x80
 80066a8:	6093      	str	r3, [r2, #8]
 80066aa:	e217      	b.n	8006adc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	78fa      	ldrb	r2, [r7, #3]
 80066b2:	4611      	mov	r1, r2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f003 fcf0 	bl	800a09a <USB_ReadChInterrupts>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066c4:	d11b      	bne.n	80066fe <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80066c6:	78fa      	ldrb	r2, [r7, #3]
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	1a9b      	subs	r3, r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	334d      	adds	r3, #77	@ 0x4d
 80066d6:	2209      	movs	r2, #9
 80066d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	78fa      	ldrb	r2, [r7, #3]
 80066e0:	4611      	mov	r1, r2
 80066e2:	4618      	mov	r0, r3
 80066e4:	f004 fa7d 	bl	800abe2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f4:	461a      	mov	r2, r3
 80066f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066fa:	6093      	str	r3, [r2, #8]
 80066fc:	e1ee      	b.n	8006adc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	78fa      	ldrb	r2, [r7, #3]
 8006704:	4611      	mov	r1, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f003 fcc7 	bl	800a09a <USB_ReadChInterrupts>
 800670c:	4603      	mov	r3, r0
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b02      	cmp	r3, #2
 8006714:	f040 81df 	bne.w	8006ad6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	4413      	add	r3, r2
 8006720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006724:	461a      	mov	r2, r3
 8006726:	2302      	movs	r3, #2
 8006728:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800672a:	78fa      	ldrb	r2, [r7, #3]
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	4613      	mov	r3, r2
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	334d      	adds	r3, #77	@ 0x4d
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b01      	cmp	r3, #1
 800673e:	f040 8093 	bne.w	8006868 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006742:	78fa      	ldrb	r2, [r7, #3]
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	440b      	add	r3, r1
 8006750:	334d      	adds	r3, #77	@ 0x4d
 8006752:	2202      	movs	r2, #2
 8006754:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006756:	78fa      	ldrb	r2, [r7, #3]
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	4613      	mov	r3, r2
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	440b      	add	r3, r1
 8006764:	334c      	adds	r3, #76	@ 0x4c
 8006766:	2201      	movs	r2, #1
 8006768:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800676a:	78fa      	ldrb	r2, [r7, #3]
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	011b      	lsls	r3, r3, #4
 8006772:	1a9b      	subs	r3, r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	3326      	adds	r3, #38	@ 0x26
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b02      	cmp	r3, #2
 800677e:	d00b      	beq.n	8006798 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006780:	78fa      	ldrb	r2, [r7, #3]
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	4613      	mov	r3, r2
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	3326      	adds	r3, #38	@ 0x26
 8006790:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006792:	2b03      	cmp	r3, #3
 8006794:	f040 8190 	bne.w	8006ab8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	799b      	ldrb	r3, [r3, #6]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d115      	bne.n	80067cc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80067a0:	78fa      	ldrb	r2, [r7, #3]
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	4613      	mov	r3, r2
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	1a9b      	subs	r3, r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	440b      	add	r3, r1
 80067ae:	333d      	adds	r3, #61	@ 0x3d
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	78fa      	ldrb	r2, [r7, #3]
 80067b4:	f083 0301 	eor.w	r3, r3, #1
 80067b8:	b2d8      	uxtb	r0, r3
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	4613      	mov	r3, r2
 80067be:	011b      	lsls	r3, r3, #4
 80067c0:	1a9b      	subs	r3, r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	333d      	adds	r3, #61	@ 0x3d
 80067c8:	4602      	mov	r2, r0
 80067ca:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	799b      	ldrb	r3, [r3, #6]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	f040 8171 	bne.w	8006ab8 <HCD_HC_OUT_IRQHandler+0x954>
 80067d6:	78fa      	ldrb	r2, [r7, #3]
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	3334      	adds	r3, #52	@ 0x34
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8165 	beq.w	8006ab8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80067ee:	78fa      	ldrb	r2, [r7, #3]
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	3334      	adds	r3, #52	@ 0x34
 80067fe:	6819      	ldr	r1, [r3, #0]
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4613      	mov	r3, r2
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	1a9b      	subs	r3, r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4403      	add	r3, r0
 800680e:	3328      	adds	r3, #40	@ 0x28
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	440b      	add	r3, r1
 8006814:	1e59      	subs	r1, r3, #1
 8006816:	78fa      	ldrb	r2, [r7, #3]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4403      	add	r3, r0
 8006824:	3328      	adds	r3, #40	@ 0x28
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	fbb1 f3f3 	udiv	r3, r1, r3
 800682c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 813f 	beq.w	8006ab8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	4613      	mov	r3, r2
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	440b      	add	r3, r1
 8006848:	333d      	adds	r3, #61	@ 0x3d
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	78fa      	ldrb	r2, [r7, #3]
 800684e:	f083 0301 	eor.w	r3, r3, #1
 8006852:	b2d8      	uxtb	r0, r3
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	4613      	mov	r3, r2
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	1a9b      	subs	r3, r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	333d      	adds	r3, #61	@ 0x3d
 8006862:	4602      	mov	r2, r0
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	e127      	b.n	8006ab8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006868:	78fa      	ldrb	r2, [r7, #3]
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	4613      	mov	r3, r2
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	1a9b      	subs	r3, r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	440b      	add	r3, r1
 8006876:	334d      	adds	r3, #77	@ 0x4d
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b03      	cmp	r3, #3
 800687c:	d120      	bne.n	80068c0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	4613      	mov	r3, r2
 8006884:	011b      	lsls	r3, r3, #4
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	440b      	add	r3, r1
 800688c:	334d      	adds	r3, #77	@ 0x4d
 800688e:	2202      	movs	r2, #2
 8006890:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	1a9b      	subs	r3, r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	331b      	adds	r3, #27
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	f040 8107 	bne.w	8006ab8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80068aa:	78fa      	ldrb	r2, [r7, #3]
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	440b      	add	r3, r1
 80068b8:	334c      	adds	r3, #76	@ 0x4c
 80068ba:	2202      	movs	r2, #2
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	e0fb      	b.n	8006ab8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80068c0:	78fa      	ldrb	r2, [r7, #3]
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	4613      	mov	r3, r2
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	1a9b      	subs	r3, r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	440b      	add	r3, r1
 80068ce:	334d      	adds	r3, #77	@ 0x4d
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d13a      	bne.n	800694c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80068d6:	78fa      	ldrb	r2, [r7, #3]
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	334d      	adds	r3, #77	@ 0x4d
 80068e6:	2202      	movs	r2, #2
 80068e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80068ea:	78fa      	ldrb	r2, [r7, #3]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	1a9b      	subs	r3, r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	334c      	adds	r3, #76	@ 0x4c
 80068fa:	2202      	movs	r2, #2
 80068fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80068fe:	78fa      	ldrb	r2, [r7, #3]
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	4613      	mov	r3, r2
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	1a9b      	subs	r3, r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	440b      	add	r3, r1
 800690c:	331b      	adds	r3, #27
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b01      	cmp	r3, #1
 8006912:	f040 80d1 	bne.w	8006ab8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006916:	78fa      	ldrb	r2, [r7, #3]
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	4613      	mov	r3, r2
 800691c:	011b      	lsls	r3, r3, #4
 800691e:	1a9b      	subs	r3, r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	440b      	add	r3, r1
 8006924:	331b      	adds	r3, #27
 8006926:	2200      	movs	r2, #0
 8006928:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	4413      	add	r3, r2
 8006932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	78fa      	ldrb	r2, [r7, #3]
 800693a:	0151      	lsls	r1, r2, #5
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	440a      	add	r2, r1
 8006940:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006948:	6053      	str	r3, [r2, #4]
 800694a:	e0b5      	b.n	8006ab8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800694c:	78fa      	ldrb	r2, [r7, #3]
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	4613      	mov	r3, r2
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	334d      	adds	r3, #77	@ 0x4d
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b05      	cmp	r3, #5
 8006960:	d114      	bne.n	800698c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006962:	78fa      	ldrb	r2, [r7, #3]
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	4613      	mov	r3, r2
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	1a9b      	subs	r3, r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	440b      	add	r3, r1
 8006970:	334d      	adds	r3, #77	@ 0x4d
 8006972:	2202      	movs	r2, #2
 8006974:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006976:	78fa      	ldrb	r2, [r7, #3]
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	1a9b      	subs	r3, r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	440b      	add	r3, r1
 8006984:	334c      	adds	r3, #76	@ 0x4c
 8006986:	2202      	movs	r2, #2
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	e095      	b.n	8006ab8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800698c:	78fa      	ldrb	r2, [r7, #3]
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4613      	mov	r3, r2
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	334d      	adds	r3, #77	@ 0x4d
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b06      	cmp	r3, #6
 80069a0:	d114      	bne.n	80069cc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80069a2:	78fa      	ldrb	r2, [r7, #3]
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	1a9b      	subs	r3, r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	334d      	adds	r3, #77	@ 0x4d
 80069b2:	2202      	movs	r2, #2
 80069b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80069b6:	78fa      	ldrb	r2, [r7, #3]
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	4613      	mov	r3, r2
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	334c      	adds	r3, #76	@ 0x4c
 80069c6:	2205      	movs	r2, #5
 80069c8:	701a      	strb	r2, [r3, #0]
 80069ca:	e075      	b.n	8006ab8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80069cc:	78fa      	ldrb	r2, [r7, #3]
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	4613      	mov	r3, r2
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	440b      	add	r3, r1
 80069da:	334d      	adds	r3, #77	@ 0x4d
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b07      	cmp	r3, #7
 80069e0:	d00a      	beq.n	80069f8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80069e2:	78fa      	ldrb	r2, [r7, #3]
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	4613      	mov	r3, r2
 80069e8:	011b      	lsls	r3, r3, #4
 80069ea:	1a9b      	subs	r3, r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	440b      	add	r3, r1
 80069f0:	334d      	adds	r3, #77	@ 0x4d
 80069f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80069f4:	2b09      	cmp	r3, #9
 80069f6:	d170      	bne.n	8006ada <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80069f8:	78fa      	ldrb	r2, [r7, #3]
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	4613      	mov	r3, r2
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	1a9b      	subs	r3, r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	440b      	add	r3, r1
 8006a06:	334d      	adds	r3, #77	@ 0x4d
 8006a08:	2202      	movs	r2, #2
 8006a0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006a0c:	78fa      	ldrb	r2, [r7, #3]
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	4613      	mov	r3, r2
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	1a9b      	subs	r3, r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	3344      	adds	r3, #68	@ 0x44
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	1c59      	adds	r1, r3, #1
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	4613      	mov	r3, r2
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	1a9b      	subs	r3, r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4403      	add	r3, r0
 8006a2c:	3344      	adds	r3, #68	@ 0x44
 8006a2e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006a30:	78fa      	ldrb	r2, [r7, #3]
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	4613      	mov	r3, r2
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	1a9b      	subs	r3, r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	440b      	add	r3, r1
 8006a3e:	3344      	adds	r3, #68	@ 0x44
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d914      	bls.n	8006a70 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006a46:	78fa      	ldrb	r2, [r7, #3]
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	1a9b      	subs	r3, r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	440b      	add	r3, r1
 8006a54:	3344      	adds	r3, #68	@ 0x44
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006a5a:	78fa      	ldrb	r2, [r7, #3]
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	1a9b      	subs	r3, r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	334c      	adds	r3, #76	@ 0x4c
 8006a6a:	2204      	movs	r2, #4
 8006a6c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006a6e:	e022      	b.n	8006ab6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006a70:	78fa      	ldrb	r2, [r7, #3]
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	4613      	mov	r3, r2
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	1a9b      	subs	r3, r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	334c      	adds	r3, #76	@ 0x4c
 8006a80:	2202      	movs	r2, #2
 8006a82:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a9a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006aa2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006ab6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006ab8:	78fa      	ldrb	r2, [r7, #3]
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	4613      	mov	r3, r2
 8006abe:	011b      	lsls	r3, r3, #4
 8006ac0:	1a9b      	subs	r3, r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	334c      	adds	r3, #76	@ 0x4c
 8006ac8:	781a      	ldrb	r2, [r3, #0]
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f007 f92a 	bl	800dd28 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006ad4:	e002      	b.n	8006adc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006ad6:	bf00      	nop
 8006ad8:	e000      	b.n	8006adc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8006ada:	bf00      	nop
  }
}
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b08a      	sub	sp, #40	@ 0x28
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f003 030f 	and.w	r3, r3, #15
 8006b02:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	0c5b      	lsrs	r3, r3, #17
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	091b      	lsrs	r3, r3, #4
 8006b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b16:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d004      	beq.n	8006b28 <HCD_RXQLVL_IRQHandler+0x46>
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b05      	cmp	r3, #5
 8006b22:	f000 80b6 	beq.w	8006c92 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006b26:	e0b7      	b.n	8006c98 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 80b3 	beq.w	8006c96 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	4613      	mov	r3, r2
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	332c      	adds	r3, #44	@ 0x2c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 80a7 	beq.w	8006c96 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	1a9b      	subs	r3, r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	3338      	adds	r3, #56	@ 0x38
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	18d1      	adds	r1, r2, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	4613      	mov	r3, r2
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	1a9b      	subs	r3, r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4403      	add	r3, r0
 8006b6c:	3334      	adds	r3, #52	@ 0x34
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4299      	cmp	r1, r3
 8006b72:	f200 8083 	bhi.w	8006c7c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	011b      	lsls	r3, r3, #4
 8006b82:	1a9b      	subs	r3, r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	440b      	add	r3, r1
 8006b88:	332c      	adds	r3, #44	@ 0x2c
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	b292      	uxth	r2, r2
 8006b90:	4619      	mov	r1, r3
 8006b92:	f003 fa17 	bl	8009fc4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	1a9b      	subs	r3, r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	332c      	adds	r3, #44	@ 0x2c
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	18d1      	adds	r1, r2, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4403      	add	r3, r0
 8006bba:	332c      	adds	r3, #44	@ 0x2c
 8006bbc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	1a9b      	subs	r3, r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	3338      	adds	r3, #56	@ 0x38
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	18d1      	adds	r1, r2, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	1a9b      	subs	r3, r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4403      	add	r3, r0
 8006be2:	3338      	adds	r3, #56	@ 0x38
 8006be4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	0cdb      	lsrs	r3, r3, #19
 8006bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bfa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	4613      	mov	r3, r2
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	1a9b      	subs	r3, r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	440b      	add	r3, r1
 8006c0a:	3328      	adds	r3, #40	@ 0x28
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d13f      	bne.n	8006c96 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d03c      	beq.n	8006c96 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006c32:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c3a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c48:	461a      	mov	r2, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	4613      	mov	r3, r2
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	333c      	adds	r3, #60	@ 0x3c
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	f083 0301 	eor.w	r3, r3, #1
 8006c64:	b2d8      	uxtb	r0, r3
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	1a9b      	subs	r3, r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	333c      	adds	r3, #60	@ 0x3c
 8006c76:	4602      	mov	r2, r0
 8006c78:	701a      	strb	r2, [r3, #0]
      break;
 8006c7a:	e00c      	b.n	8006c96 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	4613      	mov	r3, r2
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	1a9b      	subs	r3, r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	440b      	add	r3, r1
 8006c8a:	334c      	adds	r3, #76	@ 0x4c
 8006c8c:	2204      	movs	r2, #4
 8006c8e:	701a      	strb	r2, [r3, #0]
      break;
 8006c90:	e001      	b.n	8006c96 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006c92:	bf00      	nop
 8006c94:	e000      	b.n	8006c98 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006c96:	bf00      	nop
  }
}
 8006c98:	bf00      	nop
 8006c9a:	3728      	adds	r7, #40	@ 0x28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006ccc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d10b      	bne.n	8006cf0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d102      	bne.n	8006ce8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f007 f804 	bl	800dcf0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f043 0302 	orr.w	r3, r3, #2
 8006cee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d132      	bne.n	8006d60 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f043 0308 	orr.w	r3, r3, #8
 8006d00:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d126      	bne.n	8006d5a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	7a5b      	ldrb	r3, [r3, #9]
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d113      	bne.n	8006d3c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006d1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d1e:	d106      	bne.n	8006d2e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2102      	movs	r1, #2
 8006d26:	4618      	mov	r0, r3
 8006d28:	f003 fadc 	bl	800a2e4 <USB_InitFSLSPClkSel>
 8006d2c:	e011      	b.n	8006d52 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2101      	movs	r1, #1
 8006d34:	4618      	mov	r0, r3
 8006d36:	f003 fad5 	bl	800a2e4 <USB_InitFSLSPClkSel>
 8006d3a:	e00a      	b.n	8006d52 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	79db      	ldrb	r3, [r3, #7]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d106      	bne.n	8006d52 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006d50:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f006 fff6 	bl	800dd44 <HAL_HCD_PortEnabled_Callback>
 8006d58:	e002      	b.n	8006d60 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f007 f800 	bl	800dd60 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	d103      	bne.n	8006d72 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f043 0320 	orr.w	r3, r3, #32
 8006d70:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006d78:	461a      	mov	r2, r3
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6013      	str	r3, [r2, #0]
}
 8006d7e:	bf00      	nop
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e267      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d075      	beq.n	8006e92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006da6:	4b88      	ldr	r3, [pc, #544]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 030c 	and.w	r3, r3, #12
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d00c      	beq.n	8006dcc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006db2:	4b85      	ldr	r3, [pc, #532]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006dba:	2b08      	cmp	r3, #8
 8006dbc:	d112      	bne.n	8006de4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dbe:	4b82      	ldr	r3, [pc, #520]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dca:	d10b      	bne.n	8006de4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dcc:	4b7e      	ldr	r3, [pc, #504]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d05b      	beq.n	8006e90 <HAL_RCC_OscConfig+0x108>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d157      	bne.n	8006e90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e242      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dec:	d106      	bne.n	8006dfc <HAL_RCC_OscConfig+0x74>
 8006dee:	4b76      	ldr	r3, [pc, #472]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a75      	ldr	r2, [pc, #468]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	e01d      	b.n	8006e38 <HAL_RCC_OscConfig+0xb0>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e04:	d10c      	bne.n	8006e20 <HAL_RCC_OscConfig+0x98>
 8006e06:	4b70      	ldr	r3, [pc, #448]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a6f      	ldr	r2, [pc, #444]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006e0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	4b6d      	ldr	r3, [pc, #436]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a6c      	ldr	r2, [pc, #432]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	e00b      	b.n	8006e38 <HAL_RCC_OscConfig+0xb0>
 8006e20:	4b69      	ldr	r3, [pc, #420]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a68      	ldr	r2, [pc, #416]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006e26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	4b66      	ldr	r3, [pc, #408]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a65      	ldr	r2, [pc, #404]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006e32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d013      	beq.n	8006e68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e40:	f7fd f890 	bl	8003f64 <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e48:	f7fd f88c 	bl	8003f64 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b64      	cmp	r3, #100	@ 0x64
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e207      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0f0      	beq.n	8006e48 <HAL_RCC_OscConfig+0xc0>
 8006e66:	e014      	b.n	8006e92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e68:	f7fd f87c 	bl	8003f64 <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e70:	f7fd f878 	bl	8003f64 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b64      	cmp	r3, #100	@ 0x64
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e1f3      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e82:	4b51      	ldr	r3, [pc, #324]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f0      	bne.n	8006e70 <HAL_RCC_OscConfig+0xe8>
 8006e8e:	e000      	b.n	8006e92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d063      	beq.n	8006f66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 030c 	and.w	r3, r3, #12
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00b      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eaa:	4b47      	ldr	r3, [pc, #284]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006eb2:	2b08      	cmp	r3, #8
 8006eb4:	d11c      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eb6:	4b44      	ldr	r3, [pc, #272]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d116      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ec2:	4b41      	ldr	r3, [pc, #260]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <HAL_RCC_OscConfig+0x152>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d001      	beq.n	8006eda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e1c7      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eda:	4b3b      	ldr	r3, [pc, #236]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	4937      	ldr	r1, [pc, #220]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eee:	e03a      	b.n	8006f66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d020      	beq.n	8006f3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ef8:	4b34      	ldr	r3, [pc, #208]	@ (8006fcc <HAL_RCC_OscConfig+0x244>)
 8006efa:	2201      	movs	r2, #1
 8006efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efe:	f7fd f831 	bl	8003f64 <HAL_GetTick>
 8006f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f04:	e008      	b.n	8006f18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f06:	f7fd f82d 	bl	8003f64 <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d901      	bls.n	8006f18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e1a8      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f18:	4b2b      	ldr	r3, [pc, #172]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d0f0      	beq.n	8006f06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f24:	4b28      	ldr	r3, [pc, #160]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	4925      	ldr	r1, [pc, #148]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	600b      	str	r3, [r1, #0]
 8006f38:	e015      	b.n	8006f66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f3a:	4b24      	ldr	r3, [pc, #144]	@ (8006fcc <HAL_RCC_OscConfig+0x244>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f40:	f7fd f810 	bl	8003f64 <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f48:	f7fd f80c 	bl	8003f64 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e187      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1f0      	bne.n	8006f48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0308 	and.w	r3, r3, #8
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d036      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d016      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f7a:	4b15      	ldr	r3, [pc, #84]	@ (8006fd0 <HAL_RCC_OscConfig+0x248>)
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f80:	f7fc fff0 	bl	8003f64 <HAL_GetTick>
 8006f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f88:	f7fc ffec 	bl	8003f64 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e167      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc8 <HAL_RCC_OscConfig+0x240>)
 8006f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0f0      	beq.n	8006f88 <HAL_RCC_OscConfig+0x200>
 8006fa6:	e01b      	b.n	8006fe0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fa8:	4b09      	ldr	r3, [pc, #36]	@ (8006fd0 <HAL_RCC_OscConfig+0x248>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fae:	f7fc ffd9 	bl	8003f64 <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fb4:	e00e      	b.n	8006fd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fb6:	f7fc ffd5 	bl	8003f64 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d907      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e150      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
 8006fc8:	40023800 	.word	0x40023800
 8006fcc:	42470000 	.word	0x42470000
 8006fd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fd4:	4b88      	ldr	r3, [pc, #544]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 8006fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1ea      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 8097 	beq.w	800711c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ff2:	4b81      	ldr	r3, [pc, #516]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10f      	bne.n	800701e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ffe:	2300      	movs	r3, #0
 8007000:	60bb      	str	r3, [r7, #8]
 8007002:	4b7d      	ldr	r3, [pc, #500]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 8007004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007006:	4a7c      	ldr	r2, [pc, #496]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 8007008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800700c:	6413      	str	r3, [r2, #64]	@ 0x40
 800700e:	4b7a      	ldr	r3, [pc, #488]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 8007010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007016:	60bb      	str	r3, [r7, #8]
 8007018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800701a:	2301      	movs	r3, #1
 800701c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800701e:	4b77      	ldr	r3, [pc, #476]	@ (80071fc <HAL_RCC_OscConfig+0x474>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007026:	2b00      	cmp	r3, #0
 8007028:	d118      	bne.n	800705c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800702a:	4b74      	ldr	r3, [pc, #464]	@ (80071fc <HAL_RCC_OscConfig+0x474>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a73      	ldr	r2, [pc, #460]	@ (80071fc <HAL_RCC_OscConfig+0x474>)
 8007030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007036:	f7fc ff95 	bl	8003f64 <HAL_GetTick>
 800703a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800703c:	e008      	b.n	8007050 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800703e:	f7fc ff91 	bl	8003f64 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e10c      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007050:	4b6a      	ldr	r3, [pc, #424]	@ (80071fc <HAL_RCC_OscConfig+0x474>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0f0      	beq.n	800703e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d106      	bne.n	8007072 <HAL_RCC_OscConfig+0x2ea>
 8007064:	4b64      	ldr	r3, [pc, #400]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 8007066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007068:	4a63      	ldr	r2, [pc, #396]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 800706a:	f043 0301 	orr.w	r3, r3, #1
 800706e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007070:	e01c      	b.n	80070ac <HAL_RCC_OscConfig+0x324>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	2b05      	cmp	r3, #5
 8007078:	d10c      	bne.n	8007094 <HAL_RCC_OscConfig+0x30c>
 800707a:	4b5f      	ldr	r3, [pc, #380]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 800707c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800707e:	4a5e      	ldr	r2, [pc, #376]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 8007080:	f043 0304 	orr.w	r3, r3, #4
 8007084:	6713      	str	r3, [r2, #112]	@ 0x70
 8007086:	4b5c      	ldr	r3, [pc, #368]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 8007088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800708a:	4a5b      	ldr	r2, [pc, #364]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 800708c:	f043 0301 	orr.w	r3, r3, #1
 8007090:	6713      	str	r3, [r2, #112]	@ 0x70
 8007092:	e00b      	b.n	80070ac <HAL_RCC_OscConfig+0x324>
 8007094:	4b58      	ldr	r3, [pc, #352]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 8007096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007098:	4a57      	ldr	r2, [pc, #348]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 800709a:	f023 0301 	bic.w	r3, r3, #1
 800709e:	6713      	str	r3, [r2, #112]	@ 0x70
 80070a0:	4b55      	ldr	r3, [pc, #340]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 80070a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a4:	4a54      	ldr	r2, [pc, #336]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 80070a6:	f023 0304 	bic.w	r3, r3, #4
 80070aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d015      	beq.n	80070e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b4:	f7fc ff56 	bl	8003f64 <HAL_GetTick>
 80070b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ba:	e00a      	b.n	80070d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070bc:	f7fc ff52 	bl	8003f64 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e0cb      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070d2:	4b49      	ldr	r3, [pc, #292]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 80070d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0ee      	beq.n	80070bc <HAL_RCC_OscConfig+0x334>
 80070de:	e014      	b.n	800710a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070e0:	f7fc ff40 	bl	8003f64 <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070e6:	e00a      	b.n	80070fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070e8:	f7fc ff3c 	bl	8003f64 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e0b5      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070fe:	4b3e      	ldr	r3, [pc, #248]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 8007100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1ee      	bne.n	80070e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800710a:	7dfb      	ldrb	r3, [r7, #23]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d105      	bne.n	800711c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007110:	4b39      	ldr	r3, [pc, #228]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 8007112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007114:	4a38      	ldr	r2, [pc, #224]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 8007116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800711a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 80a1 	beq.w	8007268 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007126:	4b34      	ldr	r3, [pc, #208]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 030c 	and.w	r3, r3, #12
 800712e:	2b08      	cmp	r3, #8
 8007130:	d05c      	beq.n	80071ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	2b02      	cmp	r3, #2
 8007138:	d141      	bne.n	80071be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800713a:	4b31      	ldr	r3, [pc, #196]	@ (8007200 <HAL_RCC_OscConfig+0x478>)
 800713c:	2200      	movs	r2, #0
 800713e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007140:	f7fc ff10 	bl	8003f64 <HAL_GetTick>
 8007144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007148:	f7fc ff0c 	bl	8003f64 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b02      	cmp	r3, #2
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e087      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800715a:	4b27      	ldr	r3, [pc, #156]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1f0      	bne.n	8007148 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69da      	ldr	r2, [r3, #28]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	019b      	lsls	r3, r3, #6
 8007176:	431a      	orrs	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717c:	085b      	lsrs	r3, r3, #1
 800717e:	3b01      	subs	r3, #1
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007188:	061b      	lsls	r3, r3, #24
 800718a:	491b      	ldr	r1, [pc, #108]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 800718c:	4313      	orrs	r3, r2
 800718e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007190:	4b1b      	ldr	r3, [pc, #108]	@ (8007200 <HAL_RCC_OscConfig+0x478>)
 8007192:	2201      	movs	r2, #1
 8007194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007196:	f7fc fee5 	bl	8003f64 <HAL_GetTick>
 800719a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800719c:	e008      	b.n	80071b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800719e:	f7fc fee1 	bl	8003f64 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d901      	bls.n	80071b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e05c      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071b0:	4b11      	ldr	r3, [pc, #68]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0f0      	beq.n	800719e <HAL_RCC_OscConfig+0x416>
 80071bc:	e054      	b.n	8007268 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071be:	4b10      	ldr	r3, [pc, #64]	@ (8007200 <HAL_RCC_OscConfig+0x478>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c4:	f7fc fece 	bl	8003f64 <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ca:	e008      	b.n	80071de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071cc:	f7fc feca 	bl	8003f64 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d901      	bls.n	80071de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e045      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071de:	4b06      	ldr	r3, [pc, #24]	@ (80071f8 <HAL_RCC_OscConfig+0x470>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1f0      	bne.n	80071cc <HAL_RCC_OscConfig+0x444>
 80071ea:	e03d      	b.n	8007268 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d107      	bne.n	8007204 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e038      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
 80071f8:	40023800 	.word	0x40023800
 80071fc:	40007000 	.word	0x40007000
 8007200:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007204:	4b1b      	ldr	r3, [pc, #108]	@ (8007274 <HAL_RCC_OscConfig+0x4ec>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d028      	beq.n	8007264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800721c:	429a      	cmp	r2, r3
 800721e:	d121      	bne.n	8007264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800722a:	429a      	cmp	r2, r3
 800722c:	d11a      	bne.n	8007264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007234:	4013      	ands	r3, r2
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800723a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800723c:	4293      	cmp	r3, r2
 800723e:	d111      	bne.n	8007264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	3b01      	subs	r3, #1
 800724e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007250:	429a      	cmp	r2, r3
 8007252:	d107      	bne.n	8007264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007260:	429a      	cmp	r2, r3
 8007262:	d001      	beq.n	8007268 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e000      	b.n	800726a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40023800 	.word	0x40023800

08007278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e0cc      	b.n	8007426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800728c:	4b68      	ldr	r3, [pc, #416]	@ (8007430 <HAL_RCC_ClockConfig+0x1b8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d90c      	bls.n	80072b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729a:	4b65      	ldr	r3, [pc, #404]	@ (8007430 <HAL_RCC_ClockConfig+0x1b8>)
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072a2:	4b63      	ldr	r3, [pc, #396]	@ (8007430 <HAL_RCC_ClockConfig+0x1b8>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d001      	beq.n	80072b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e0b8      	b.n	8007426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d020      	beq.n	8007302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d005      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072cc:	4b59      	ldr	r3, [pc, #356]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	4a58      	ldr	r2, [pc, #352]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 80072d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80072d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0308 	and.w	r3, r3, #8
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d005      	beq.n	80072f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072e4:	4b53      	ldr	r3, [pc, #332]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	4a52      	ldr	r2, [pc, #328]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 80072ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80072ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072f0:	4b50      	ldr	r3, [pc, #320]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	494d      	ldr	r1, [pc, #308]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d044      	beq.n	8007398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d107      	bne.n	8007326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007316:	4b47      	ldr	r3, [pc, #284]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d119      	bne.n	8007356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e07f      	b.n	8007426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2b02      	cmp	r3, #2
 800732c:	d003      	beq.n	8007336 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007332:	2b03      	cmp	r3, #3
 8007334:	d107      	bne.n	8007346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007336:	4b3f      	ldr	r3, [pc, #252]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d109      	bne.n	8007356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e06f      	b.n	8007426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007346:	4b3b      	ldr	r3, [pc, #236]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e067      	b.n	8007426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007356:	4b37      	ldr	r3, [pc, #220]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f023 0203 	bic.w	r2, r3, #3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	4934      	ldr	r1, [pc, #208]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 8007364:	4313      	orrs	r3, r2
 8007366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007368:	f7fc fdfc 	bl	8003f64 <HAL_GetTick>
 800736c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800736e:	e00a      	b.n	8007386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007370:	f7fc fdf8 	bl	8003f64 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800737e:	4293      	cmp	r3, r2
 8007380:	d901      	bls.n	8007386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e04f      	b.n	8007426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007386:	4b2b      	ldr	r3, [pc, #172]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 020c 	and.w	r2, r3, #12
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	429a      	cmp	r2, r3
 8007396:	d1eb      	bne.n	8007370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007398:	4b25      	ldr	r3, [pc, #148]	@ (8007430 <HAL_RCC_ClockConfig+0x1b8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 030f 	and.w	r3, r3, #15
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d20c      	bcs.n	80073c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073a6:	4b22      	ldr	r3, [pc, #136]	@ (8007430 <HAL_RCC_ClockConfig+0x1b8>)
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ae:	4b20      	ldr	r3, [pc, #128]	@ (8007430 <HAL_RCC_ClockConfig+0x1b8>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d001      	beq.n	80073c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e032      	b.n	8007426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d008      	beq.n	80073de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073cc:	4b19      	ldr	r3, [pc, #100]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	4916      	ldr	r1, [pc, #88]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d009      	beq.n	80073fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073ea:	4b12      	ldr	r3, [pc, #72]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	490e      	ldr	r1, [pc, #56]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073fe:	f000 f821 	bl	8007444 <HAL_RCC_GetSysClockFreq>
 8007402:	4602      	mov	r2, r0
 8007404:	4b0b      	ldr	r3, [pc, #44]	@ (8007434 <HAL_RCC_ClockConfig+0x1bc>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	091b      	lsrs	r3, r3, #4
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	490a      	ldr	r1, [pc, #40]	@ (8007438 <HAL_RCC_ClockConfig+0x1c0>)
 8007410:	5ccb      	ldrb	r3, [r1, r3]
 8007412:	fa22 f303 	lsr.w	r3, r2, r3
 8007416:	4a09      	ldr	r2, [pc, #36]	@ (800743c <HAL_RCC_ClockConfig+0x1c4>)
 8007418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800741a:	4b09      	ldr	r3, [pc, #36]	@ (8007440 <HAL_RCC_ClockConfig+0x1c8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4618      	mov	r0, r3
 8007420:	f7fc fd5c 	bl	8003edc <HAL_InitTick>

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	40023c00 	.word	0x40023c00
 8007434:	40023800 	.word	0x40023800
 8007438:	08011c10 	.word	0x08011c10
 800743c:	20000268 	.word	0x20000268
 8007440:	2000026c 	.word	0x2000026c

08007444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007448:	b094      	sub	sp, #80	@ 0x50
 800744a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800745c:	4b79      	ldr	r3, [pc, #484]	@ (8007644 <HAL_RCC_GetSysClockFreq+0x200>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f003 030c 	and.w	r3, r3, #12
 8007464:	2b08      	cmp	r3, #8
 8007466:	d00d      	beq.n	8007484 <HAL_RCC_GetSysClockFreq+0x40>
 8007468:	2b08      	cmp	r3, #8
 800746a:	f200 80e1 	bhi.w	8007630 <HAL_RCC_GetSysClockFreq+0x1ec>
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <HAL_RCC_GetSysClockFreq+0x34>
 8007472:	2b04      	cmp	r3, #4
 8007474:	d003      	beq.n	800747e <HAL_RCC_GetSysClockFreq+0x3a>
 8007476:	e0db      	b.n	8007630 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007478:	4b73      	ldr	r3, [pc, #460]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x204>)
 800747a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800747c:	e0db      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800747e:	4b72      	ldr	r3, [pc, #456]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x204>)
 8007480:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007482:	e0d8      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007484:	4b6f      	ldr	r3, [pc, #444]	@ (8007644 <HAL_RCC_GetSysClockFreq+0x200>)
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800748c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800748e:	4b6d      	ldr	r3, [pc, #436]	@ (8007644 <HAL_RCC_GetSysClockFreq+0x200>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d063      	beq.n	8007562 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800749a:	4b6a      	ldr	r3, [pc, #424]	@ (8007644 <HAL_RCC_GetSysClockFreq+0x200>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	099b      	lsrs	r3, r3, #6
 80074a0:	2200      	movs	r2, #0
 80074a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80074a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80074ae:	2300      	movs	r3, #0
 80074b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80074b6:	4622      	mov	r2, r4
 80074b8:	462b      	mov	r3, r5
 80074ba:	f04f 0000 	mov.w	r0, #0
 80074be:	f04f 0100 	mov.w	r1, #0
 80074c2:	0159      	lsls	r1, r3, #5
 80074c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074c8:	0150      	lsls	r0, r2, #5
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4621      	mov	r1, r4
 80074d0:	1a51      	subs	r1, r2, r1
 80074d2:	6139      	str	r1, [r7, #16]
 80074d4:	4629      	mov	r1, r5
 80074d6:	eb63 0301 	sbc.w	r3, r3, r1
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074e8:	4659      	mov	r1, fp
 80074ea:	018b      	lsls	r3, r1, #6
 80074ec:	4651      	mov	r1, sl
 80074ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074f2:	4651      	mov	r1, sl
 80074f4:	018a      	lsls	r2, r1, #6
 80074f6:	4651      	mov	r1, sl
 80074f8:	ebb2 0801 	subs.w	r8, r2, r1
 80074fc:	4659      	mov	r1, fp
 80074fe:	eb63 0901 	sbc.w	r9, r3, r1
 8007502:	f04f 0200 	mov.w	r2, #0
 8007506:	f04f 0300 	mov.w	r3, #0
 800750a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800750e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007516:	4690      	mov	r8, r2
 8007518:	4699      	mov	r9, r3
 800751a:	4623      	mov	r3, r4
 800751c:	eb18 0303 	adds.w	r3, r8, r3
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	462b      	mov	r3, r5
 8007524:	eb49 0303 	adc.w	r3, r9, r3
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	f04f 0200 	mov.w	r2, #0
 800752e:	f04f 0300 	mov.w	r3, #0
 8007532:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007536:	4629      	mov	r1, r5
 8007538:	028b      	lsls	r3, r1, #10
 800753a:	4621      	mov	r1, r4
 800753c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007540:	4621      	mov	r1, r4
 8007542:	028a      	lsls	r2, r1, #10
 8007544:	4610      	mov	r0, r2
 8007546:	4619      	mov	r1, r3
 8007548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800754a:	2200      	movs	r2, #0
 800754c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800754e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007550:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007554:	f7f8 fea4 	bl	80002a0 <__aeabi_uldivmod>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	4613      	mov	r3, r2
 800755e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007560:	e058      	b.n	8007614 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007562:	4b38      	ldr	r3, [pc, #224]	@ (8007644 <HAL_RCC_GetSysClockFreq+0x200>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	099b      	lsrs	r3, r3, #6
 8007568:	2200      	movs	r2, #0
 800756a:	4618      	mov	r0, r3
 800756c:	4611      	mov	r1, r2
 800756e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007572:	623b      	str	r3, [r7, #32]
 8007574:	2300      	movs	r3, #0
 8007576:	627b      	str	r3, [r7, #36]	@ 0x24
 8007578:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800757c:	4642      	mov	r2, r8
 800757e:	464b      	mov	r3, r9
 8007580:	f04f 0000 	mov.w	r0, #0
 8007584:	f04f 0100 	mov.w	r1, #0
 8007588:	0159      	lsls	r1, r3, #5
 800758a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800758e:	0150      	lsls	r0, r2, #5
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4641      	mov	r1, r8
 8007596:	ebb2 0a01 	subs.w	sl, r2, r1
 800759a:	4649      	mov	r1, r9
 800759c:	eb63 0b01 	sbc.w	fp, r3, r1
 80075a0:	f04f 0200 	mov.w	r2, #0
 80075a4:	f04f 0300 	mov.w	r3, #0
 80075a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80075ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80075b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80075b4:	ebb2 040a 	subs.w	r4, r2, sl
 80075b8:	eb63 050b 	sbc.w	r5, r3, fp
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	f04f 0300 	mov.w	r3, #0
 80075c4:	00eb      	lsls	r3, r5, #3
 80075c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075ca:	00e2      	lsls	r2, r4, #3
 80075cc:	4614      	mov	r4, r2
 80075ce:	461d      	mov	r5, r3
 80075d0:	4643      	mov	r3, r8
 80075d2:	18e3      	adds	r3, r4, r3
 80075d4:	603b      	str	r3, [r7, #0]
 80075d6:	464b      	mov	r3, r9
 80075d8:	eb45 0303 	adc.w	r3, r5, r3
 80075dc:	607b      	str	r3, [r7, #4]
 80075de:	f04f 0200 	mov.w	r2, #0
 80075e2:	f04f 0300 	mov.w	r3, #0
 80075e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075ea:	4629      	mov	r1, r5
 80075ec:	028b      	lsls	r3, r1, #10
 80075ee:	4621      	mov	r1, r4
 80075f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075f4:	4621      	mov	r1, r4
 80075f6:	028a      	lsls	r2, r1, #10
 80075f8:	4610      	mov	r0, r2
 80075fa:	4619      	mov	r1, r3
 80075fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075fe:	2200      	movs	r2, #0
 8007600:	61bb      	str	r3, [r7, #24]
 8007602:	61fa      	str	r2, [r7, #28]
 8007604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007608:	f7f8 fe4a 	bl	80002a0 <__aeabi_uldivmod>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4613      	mov	r3, r2
 8007612:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007614:	4b0b      	ldr	r3, [pc, #44]	@ (8007644 <HAL_RCC_GetSysClockFreq+0x200>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	0c1b      	lsrs	r3, r3, #16
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	3301      	adds	r3, #1
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007624:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007628:	fbb2 f3f3 	udiv	r3, r2, r3
 800762c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800762e:	e002      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007630:	4b05      	ldr	r3, [pc, #20]	@ (8007648 <HAL_RCC_GetSysClockFreq+0x204>)
 8007632:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007638:	4618      	mov	r0, r3
 800763a:	3750      	adds	r7, #80	@ 0x50
 800763c:	46bd      	mov	sp, r7
 800763e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007642:	bf00      	nop
 8007644:	40023800 	.word	0x40023800
 8007648:	00f42400 	.word	0x00f42400

0800764c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800764c:	b480      	push	{r7}
 800764e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007650:	4b03      	ldr	r3, [pc, #12]	@ (8007660 <HAL_RCC_GetHCLKFreq+0x14>)
 8007652:	681b      	ldr	r3, [r3, #0]
}
 8007654:	4618      	mov	r0, r3
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	20000268 	.word	0x20000268

08007664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007668:	f7ff fff0 	bl	800764c <HAL_RCC_GetHCLKFreq>
 800766c:	4602      	mov	r2, r0
 800766e:	4b05      	ldr	r3, [pc, #20]	@ (8007684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	0a9b      	lsrs	r3, r3, #10
 8007674:	f003 0307 	and.w	r3, r3, #7
 8007678:	4903      	ldr	r1, [pc, #12]	@ (8007688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800767a:	5ccb      	ldrb	r3, [r1, r3]
 800767c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007680:	4618      	mov	r0, r3
 8007682:	bd80      	pop	{r7, pc}
 8007684:	40023800 	.word	0x40023800
 8007688:	08011c20 	.word	0x08011c20

0800768c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007690:	f7ff ffdc 	bl	800764c <HAL_RCC_GetHCLKFreq>
 8007694:	4602      	mov	r2, r0
 8007696:	4b05      	ldr	r3, [pc, #20]	@ (80076ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	0b5b      	lsrs	r3, r3, #13
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	4903      	ldr	r1, [pc, #12]	@ (80076b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076a2:	5ccb      	ldrb	r3, [r1, r3]
 80076a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40023800 	.word	0x40023800
 80076b0:	08011c20 	.word	0x08011c20

080076b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e07b      	b.n	80077be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d108      	bne.n	80076e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076d6:	d009      	beq.n	80076ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	61da      	str	r2, [r3, #28]
 80076de:	e005      	b.n	80076ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7fc f96e 	bl	80039e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007722:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007734:	431a      	orrs	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800773e:	431a      	orrs	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007770:	ea42 0103 	orr.w	r1, r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007778:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	430a      	orrs	r2, r1
 8007782:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	0c1b      	lsrs	r3, r3, #16
 800778a:	f003 0104 	and.w	r1, r3, #4
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007792:	f003 0210 	and.w	r2, r3, #16
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69da      	ldr	r2, [r3, #28]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b088      	sub	sp, #32
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	603b      	str	r3, [r7, #0]
 80077d2:	4613      	mov	r3, r2
 80077d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077d6:	f7fc fbc5 	bl	8003f64 <HAL_GetTick>
 80077da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80077dc:	88fb      	ldrh	r3, [r7, #6]
 80077de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d001      	beq.n	80077f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80077ec:	2302      	movs	r3, #2
 80077ee:	e12a      	b.n	8007a46 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_SPI_Transmit+0x36>
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e122      	b.n	8007a46 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_SPI_Transmit+0x48>
 800780a:	2302      	movs	r3, #2
 800780c:	e11b      	b.n	8007a46 <HAL_SPI_Transmit+0x280>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2203      	movs	r2, #3
 800781a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	88fa      	ldrh	r2, [r7, #6]
 800782e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	88fa      	ldrh	r2, [r7, #6]
 8007834:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800785c:	d10f      	bne.n	800787e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800786c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800787c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007888:	2b40      	cmp	r3, #64	@ 0x40
 800788a:	d007      	beq.n	800789c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800789a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078a4:	d152      	bne.n	800794c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <HAL_SPI_Transmit+0xee>
 80078ae:	8b7b      	ldrh	r3, [r7, #26]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d145      	bne.n	8007940 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b8:	881a      	ldrh	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c4:	1c9a      	adds	r2, r3, #2
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80078d8:	e032      	b.n	8007940 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d112      	bne.n	800790e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ec:	881a      	ldrh	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800790c:	e018      	b.n	8007940 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800790e:	f7fc fb29 	bl	8003f64 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d803      	bhi.n	8007926 <HAL_SPI_Transmit+0x160>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007924:	d102      	bne.n	800792c <HAL_SPI_Transmit+0x166>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d109      	bne.n	8007940 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e082      	b.n	8007a46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1c7      	bne.n	80078da <HAL_SPI_Transmit+0x114>
 800794a:	e053      	b.n	80079f4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <HAL_SPI_Transmit+0x194>
 8007954:	8b7b      	ldrh	r3, [r7, #26]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d147      	bne.n	80079ea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	330c      	adds	r3, #12
 8007964:	7812      	ldrb	r2, [r2, #0]
 8007966:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007976:	b29b      	uxth	r3, r3
 8007978:	3b01      	subs	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007980:	e033      	b.n	80079ea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b02      	cmp	r3, #2
 800798e:	d113      	bne.n	80079b8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	330c      	adds	r3, #12
 800799a:	7812      	ldrb	r2, [r2, #0]
 800799c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80079b6:	e018      	b.n	80079ea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079b8:	f7fc fad4 	bl	8003f64 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d803      	bhi.n	80079d0 <HAL_SPI_Transmit+0x20a>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ce:	d102      	bne.n	80079d6 <HAL_SPI_Transmit+0x210>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d109      	bne.n	80079ea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e02d      	b.n	8007a46 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1c6      	bne.n	8007982 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 fa59 	bl	8007eb0 <SPI_EndRxTxTransaction>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2220      	movs	r2, #32
 8007a08:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a12:	2300      	movs	r3, #0
 8007a14:	617b      	str	r3, [r7, #20]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007a44:	2300      	movs	r3, #0
  }
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3720      	adds	r7, #32
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b08a      	sub	sp, #40	@ 0x28
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	60b9      	str	r1, [r7, #8]
 8007a58:	607a      	str	r2, [r7, #4]
 8007a5a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a60:	f7fc fa80 	bl	8003f64 <HAL_GetTick>
 8007a64:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a6c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007a74:	887b      	ldrh	r3, [r7, #2]
 8007a76:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a78:	7ffb      	ldrb	r3, [r7, #31]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d00c      	beq.n	8007a98 <HAL_SPI_TransmitReceive+0x4a>
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a84:	d106      	bne.n	8007a94 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d102      	bne.n	8007a94 <HAL_SPI_TransmitReceive+0x46>
 8007a8e:	7ffb      	ldrb	r3, [r7, #31]
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d001      	beq.n	8007a98 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007a94:	2302      	movs	r3, #2
 8007a96:	e17f      	b.n	8007d98 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d005      	beq.n	8007aaa <HAL_SPI_TransmitReceive+0x5c>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <HAL_SPI_TransmitReceive+0x5c>
 8007aa4:	887b      	ldrh	r3, [r7, #2]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e174      	b.n	8007d98 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d101      	bne.n	8007abc <HAL_SPI_TransmitReceive+0x6e>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e16d      	b.n	8007d98 <HAL_SPI_TransmitReceive+0x34a>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d003      	beq.n	8007ad8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2205      	movs	r2, #5
 8007ad4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	887a      	ldrh	r2, [r7, #2]
 8007ae8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	887a      	ldrh	r2, [r7, #2]
 8007aee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	887a      	ldrh	r2, [r7, #2]
 8007afa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	887a      	ldrh	r2, [r7, #2]
 8007b00:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b18:	2b40      	cmp	r3, #64	@ 0x40
 8007b1a:	d007      	beq.n	8007b2c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b34:	d17e      	bne.n	8007c34 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <HAL_SPI_TransmitReceive+0xf6>
 8007b3e:	8afb      	ldrh	r3, [r7, #22]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d16c      	bne.n	8007c1e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b48:	881a      	ldrh	r2, [r3, #0]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b54:	1c9a      	adds	r2, r3, #2
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	3b01      	subs	r3, #1
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b68:	e059      	b.n	8007c1e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d11b      	bne.n	8007bb0 <HAL_SPI_TransmitReceive+0x162>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d016      	beq.n	8007bb0 <HAL_SPI_TransmitReceive+0x162>
 8007b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d113      	bne.n	8007bb0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8c:	881a      	ldrh	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b98:	1c9a      	adds	r2, r3, #2
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d119      	bne.n	8007bf2 <HAL_SPI_TransmitReceive+0x1a4>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d014      	beq.n	8007bf2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd2:	b292      	uxth	r2, r2
 8007bd4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bda:	1c9a      	adds	r2, r3, #2
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bf2:	f7fc f9b7 	bl	8003f64 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d80d      	bhi.n	8007c1e <HAL_SPI_TransmitReceive+0x1d0>
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d009      	beq.n	8007c1e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e0bc      	b.n	8007d98 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1a0      	bne.n	8007b6a <HAL_SPI_TransmitReceive+0x11c>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d19b      	bne.n	8007b6a <HAL_SPI_TransmitReceive+0x11c>
 8007c32:	e082      	b.n	8007d3a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <HAL_SPI_TransmitReceive+0x1f4>
 8007c3c:	8afb      	ldrh	r3, [r7, #22]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d171      	bne.n	8007d26 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	7812      	ldrb	r2, [r2, #0]
 8007c4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	3b01      	subs	r3, #1
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c68:	e05d      	b.n	8007d26 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d11c      	bne.n	8007cb2 <HAL_SPI_TransmitReceive+0x264>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d017      	beq.n	8007cb2 <HAL_SPI_TransmitReceive+0x264>
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d114      	bne.n	8007cb2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	330c      	adds	r3, #12
 8007c92:	7812      	ldrb	r2, [r2, #0]
 8007c94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d119      	bne.n	8007cf4 <HAL_SPI_TransmitReceive+0x2a6>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d014      	beq.n	8007cf4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cf4:	f7fc f936 	bl	8003f64 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d803      	bhi.n	8007d0c <HAL_SPI_TransmitReceive+0x2be>
 8007d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0a:	d102      	bne.n	8007d12 <HAL_SPI_TransmitReceive+0x2c4>
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d109      	bne.n	8007d26 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e038      	b.n	8007d98 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d19c      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x21c>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d197      	bne.n	8007c6a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d3a:	6a3a      	ldr	r2, [r7, #32]
 8007d3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 f8b6 	bl	8007eb0 <SPI_EndRxTxTransaction>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d008      	beq.n	8007d5c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e01d      	b.n	8007d98 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10a      	bne.n	8007d7a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d64:	2300      	movs	r3, #0
 8007d66:	613b      	str	r3, [r7, #16]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	613b      	str	r3, [r7, #16]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	613b      	str	r3, [r7, #16]
 8007d78:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e000      	b.n	8007d98 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007d96:	2300      	movs	r3, #0
  }
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3728      	adds	r7, #40	@ 0x28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	4613      	mov	r3, r2
 8007dae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007db0:	f7fc f8d8 	bl	8003f64 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007dc0:	f7fc f8d0 	bl	8003f64 <HAL_GetTick>
 8007dc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dc6:	4b39      	ldr	r3, [pc, #228]	@ (8007eac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	015b      	lsls	r3, r3, #5
 8007dcc:	0d1b      	lsrs	r3, r3, #20
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	fb02 f303 	mul.w	r3, r2, r3
 8007dd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dd6:	e054      	b.n	8007e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dde:	d050      	beq.n	8007e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007de0:	f7fc f8c0 	bl	8003f64 <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d902      	bls.n	8007df6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d13d      	bne.n	8007e72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e0e:	d111      	bne.n	8007e34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e18:	d004      	beq.n	8007e24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e22:	d107      	bne.n	8007e34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e3c:	d10f      	bne.n	8007e5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e017      	b.n	8007ea2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	bf0c      	ite	eq
 8007e92:	2301      	moveq	r3, #1
 8007e94:	2300      	movne	r3, #0
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	461a      	mov	r2, r3
 8007e9a:	79fb      	ldrb	r3, [r7, #7]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d19b      	bne.n	8007dd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3720      	adds	r7, #32
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000268 	.word	0x20000268

08007eb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	2102      	movs	r1, #2
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f7ff ff6a 	bl	8007da0 <SPI_WaitFlagStateUntilTimeout>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d007      	beq.n	8007ee2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ed6:	f043 0220 	orr.w	r2, r3, #32
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e032      	b.n	8007f48 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f50 <SPI_EndRxTxTransaction+0xa0>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8007f54 <SPI_EndRxTxTransaction+0xa4>)
 8007ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8007eec:	0d5b      	lsrs	r3, r3, #21
 8007eee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007ef2:	fb02 f303 	mul.w	r3, r2, r3
 8007ef6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f00:	d112      	bne.n	8007f28 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2180      	movs	r1, #128	@ 0x80
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7ff ff47 	bl	8007da0 <SPI_WaitFlagStateUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d016      	beq.n	8007f46 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f1c:	f043 0220 	orr.w	r2, r3, #32
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e00f      	b.n	8007f48 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f3e:	2b80      	cmp	r3, #128	@ 0x80
 8007f40:	d0f2      	beq.n	8007f28 <SPI_EndRxTxTransaction+0x78>
 8007f42:	e000      	b.n	8007f46 <SPI_EndRxTxTransaction+0x96>
        break;
 8007f44:	bf00      	nop
  }

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	20000268 	.word	0x20000268
 8007f54:	165e9f81 	.word	0x165e9f81

08007f58 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e038      	b.n	8007fe0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d106      	bne.n	8007f88 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7fb fe70 	bl	8003c68 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	3308      	adds	r3, #8
 8007f90:	4619      	mov	r1, r3
 8007f92:	4610      	mov	r0, r2
 8007f94:	f001 fd98 	bl	8009ac8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	68b9      	ldr	r1, [r7, #8]
 8007fa4:	f001 fe16 	bl	8009bd4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6858      	ldr	r0, [r3, #4]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	f001 fe5d 	bl	8009c74 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	6892      	ldr	r2, [r2, #8]
 8007fc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	6892      	ldr	r2, [r2, #8]
 8007fce:	f041 0101 	orr.w	r1, r1, #1
 8007fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e041      	b.n	800807e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d106      	bne.n	8008014 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7fb fd32 	bl	8003a78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3304      	adds	r3, #4
 8008024:	4619      	mov	r1, r3
 8008026:	4610      	mov	r0, r2
 8008028:	f000 f9b8 	bl	800839c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d109      	bne.n	80080ac <HAL_TIM_PWM_Start+0x24>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	bf14      	ite	ne
 80080a4:	2301      	movne	r3, #1
 80080a6:	2300      	moveq	r3, #0
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	e022      	b.n	80080f2 <HAL_TIM_PWM_Start+0x6a>
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d109      	bne.n	80080c6 <HAL_TIM_PWM_Start+0x3e>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	bf14      	ite	ne
 80080be:	2301      	movne	r3, #1
 80080c0:	2300      	moveq	r3, #0
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	e015      	b.n	80080f2 <HAL_TIM_PWM_Start+0x6a>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b08      	cmp	r3, #8
 80080ca:	d109      	bne.n	80080e0 <HAL_TIM_PWM_Start+0x58>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	bf14      	ite	ne
 80080d8:	2301      	movne	r3, #1
 80080da:	2300      	moveq	r3, #0
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	e008      	b.n	80080f2 <HAL_TIM_PWM_Start+0x6a>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	bf14      	ite	ne
 80080ec:	2301      	movne	r3, #1
 80080ee:	2300      	moveq	r3, #0
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e07c      	b.n	80081f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <HAL_TIM_PWM_Start+0x82>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008108:	e013      	b.n	8008132 <HAL_TIM_PWM_Start+0xaa>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b04      	cmp	r3, #4
 800810e:	d104      	bne.n	800811a <HAL_TIM_PWM_Start+0x92>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008118:	e00b      	b.n	8008132 <HAL_TIM_PWM_Start+0xaa>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b08      	cmp	r3, #8
 800811e:	d104      	bne.n	800812a <HAL_TIM_PWM_Start+0xa2>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008128:	e003      	b.n	8008132 <HAL_TIM_PWM_Start+0xaa>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2202      	movs	r2, #2
 800812e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2201      	movs	r2, #1
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fb8a 	bl	8008854 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a2d      	ldr	r2, [pc, #180]	@ (80081fc <HAL_TIM_PWM_Start+0x174>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d004      	beq.n	8008154 <HAL_TIM_PWM_Start+0xcc>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a2c      	ldr	r2, [pc, #176]	@ (8008200 <HAL_TIM_PWM_Start+0x178>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d101      	bne.n	8008158 <HAL_TIM_PWM_Start+0xd0>
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <HAL_TIM_PWM_Start+0xd2>
 8008158:	2300      	movs	r3, #0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d007      	beq.n	800816e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800816c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a22      	ldr	r2, [pc, #136]	@ (80081fc <HAL_TIM_PWM_Start+0x174>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d022      	beq.n	80081be <HAL_TIM_PWM_Start+0x136>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008180:	d01d      	beq.n	80081be <HAL_TIM_PWM_Start+0x136>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a1f      	ldr	r2, [pc, #124]	@ (8008204 <HAL_TIM_PWM_Start+0x17c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d018      	beq.n	80081be <HAL_TIM_PWM_Start+0x136>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1d      	ldr	r2, [pc, #116]	@ (8008208 <HAL_TIM_PWM_Start+0x180>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d013      	beq.n	80081be <HAL_TIM_PWM_Start+0x136>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a1c      	ldr	r2, [pc, #112]	@ (800820c <HAL_TIM_PWM_Start+0x184>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00e      	beq.n	80081be <HAL_TIM_PWM_Start+0x136>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a16      	ldr	r2, [pc, #88]	@ (8008200 <HAL_TIM_PWM_Start+0x178>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d009      	beq.n	80081be <HAL_TIM_PWM_Start+0x136>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a18      	ldr	r2, [pc, #96]	@ (8008210 <HAL_TIM_PWM_Start+0x188>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d004      	beq.n	80081be <HAL_TIM_PWM_Start+0x136>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a16      	ldr	r2, [pc, #88]	@ (8008214 <HAL_TIM_PWM_Start+0x18c>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d111      	bne.n	80081e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f003 0307 	and.w	r3, r3, #7
 80081c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b06      	cmp	r3, #6
 80081ce:	d010      	beq.n	80081f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0201 	orr.w	r2, r2, #1
 80081de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e0:	e007      	b.n	80081f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f042 0201 	orr.w	r2, r2, #1
 80081f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	40010000 	.word	0x40010000
 8008200:	40010400 	.word	0x40010400
 8008204:	40000400 	.word	0x40000400
 8008208:	40000800 	.word	0x40000800
 800820c:	40000c00 	.word	0x40000c00
 8008210:	40014000 	.word	0x40014000
 8008214:	40001800 	.word	0x40001800

08008218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008224:	2300      	movs	r3, #0
 8008226:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008232:	2302      	movs	r3, #2
 8008234:	e0ae      	b.n	8008394 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b0c      	cmp	r3, #12
 8008242:	f200 809f 	bhi.w	8008384 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008246:	a201      	add	r2, pc, #4	@ (adr r2, 800824c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824c:	08008281 	.word	0x08008281
 8008250:	08008385 	.word	0x08008385
 8008254:	08008385 	.word	0x08008385
 8008258:	08008385 	.word	0x08008385
 800825c:	080082c1 	.word	0x080082c1
 8008260:	08008385 	.word	0x08008385
 8008264:	08008385 	.word	0x08008385
 8008268:	08008385 	.word	0x08008385
 800826c:	08008303 	.word	0x08008303
 8008270:	08008385 	.word	0x08008385
 8008274:	08008385 	.word	0x08008385
 8008278:	08008385 	.word	0x08008385
 800827c:	08008343 	.word	0x08008343
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68b9      	ldr	r1, [r7, #8]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f934 	bl	80084f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	699a      	ldr	r2, [r3, #24]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f042 0208 	orr.w	r2, r2, #8
 800829a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699a      	ldr	r2, [r3, #24]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0204 	bic.w	r2, r2, #4
 80082aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6999      	ldr	r1, [r3, #24]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	691a      	ldr	r2, [r3, #16]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	619a      	str	r2, [r3, #24]
      break;
 80082be:	e064      	b.n	800838a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68b9      	ldr	r1, [r7, #8]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f984 	bl	80085d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699a      	ldr	r2, [r3, #24]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	699a      	ldr	r2, [r3, #24]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6999      	ldr	r1, [r3, #24]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	021a      	lsls	r2, r3, #8
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	619a      	str	r2, [r3, #24]
      break;
 8008300:	e043      	b.n	800838a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68b9      	ldr	r1, [r7, #8]
 8008308:	4618      	mov	r0, r3
 800830a:	f000 f9d9 	bl	80086c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69da      	ldr	r2, [r3, #28]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f042 0208 	orr.w	r2, r2, #8
 800831c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69da      	ldr	r2, [r3, #28]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f022 0204 	bic.w	r2, r2, #4
 800832c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69d9      	ldr	r1, [r3, #28]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	691a      	ldr	r2, [r3, #16]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	61da      	str	r2, [r3, #28]
      break;
 8008340:	e023      	b.n	800838a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68b9      	ldr	r1, [r7, #8]
 8008348:	4618      	mov	r0, r3
 800834a:	f000 fa2d 	bl	80087a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69da      	ldr	r2, [r3, #28]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800835c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	69da      	ldr	r2, [r3, #28]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800836c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69d9      	ldr	r1, [r3, #28]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	021a      	lsls	r2, r3, #8
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	61da      	str	r2, [r3, #28]
      break;
 8008382:	e002      	b.n	800838a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	75fb      	strb	r3, [r7, #23]
      break;
 8008388:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008392:	7dfb      	ldrb	r3, [r7, #23]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a46      	ldr	r2, [pc, #280]	@ (80084c8 <TIM_Base_SetConfig+0x12c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d013      	beq.n	80083dc <TIM_Base_SetConfig+0x40>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ba:	d00f      	beq.n	80083dc <TIM_Base_SetConfig+0x40>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a43      	ldr	r2, [pc, #268]	@ (80084cc <TIM_Base_SetConfig+0x130>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d00b      	beq.n	80083dc <TIM_Base_SetConfig+0x40>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a42      	ldr	r2, [pc, #264]	@ (80084d0 <TIM_Base_SetConfig+0x134>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d007      	beq.n	80083dc <TIM_Base_SetConfig+0x40>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a41      	ldr	r2, [pc, #260]	@ (80084d4 <TIM_Base_SetConfig+0x138>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d003      	beq.n	80083dc <TIM_Base_SetConfig+0x40>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a40      	ldr	r2, [pc, #256]	@ (80084d8 <TIM_Base_SetConfig+0x13c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d108      	bne.n	80083ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a35      	ldr	r2, [pc, #212]	@ (80084c8 <TIM_Base_SetConfig+0x12c>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d02b      	beq.n	800844e <TIM_Base_SetConfig+0xb2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083fc:	d027      	beq.n	800844e <TIM_Base_SetConfig+0xb2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a32      	ldr	r2, [pc, #200]	@ (80084cc <TIM_Base_SetConfig+0x130>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d023      	beq.n	800844e <TIM_Base_SetConfig+0xb2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a31      	ldr	r2, [pc, #196]	@ (80084d0 <TIM_Base_SetConfig+0x134>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d01f      	beq.n	800844e <TIM_Base_SetConfig+0xb2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a30      	ldr	r2, [pc, #192]	@ (80084d4 <TIM_Base_SetConfig+0x138>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d01b      	beq.n	800844e <TIM_Base_SetConfig+0xb2>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a2f      	ldr	r2, [pc, #188]	@ (80084d8 <TIM_Base_SetConfig+0x13c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d017      	beq.n	800844e <TIM_Base_SetConfig+0xb2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a2e      	ldr	r2, [pc, #184]	@ (80084dc <TIM_Base_SetConfig+0x140>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d013      	beq.n	800844e <TIM_Base_SetConfig+0xb2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a2d      	ldr	r2, [pc, #180]	@ (80084e0 <TIM_Base_SetConfig+0x144>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d00f      	beq.n	800844e <TIM_Base_SetConfig+0xb2>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a2c      	ldr	r2, [pc, #176]	@ (80084e4 <TIM_Base_SetConfig+0x148>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d00b      	beq.n	800844e <TIM_Base_SetConfig+0xb2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a2b      	ldr	r2, [pc, #172]	@ (80084e8 <TIM_Base_SetConfig+0x14c>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d007      	beq.n	800844e <TIM_Base_SetConfig+0xb2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a2a      	ldr	r2, [pc, #168]	@ (80084ec <TIM_Base_SetConfig+0x150>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d003      	beq.n	800844e <TIM_Base_SetConfig+0xb2>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a29      	ldr	r2, [pc, #164]	@ (80084f0 <TIM_Base_SetConfig+0x154>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d108      	bne.n	8008460 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	4313      	orrs	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a10      	ldr	r2, [pc, #64]	@ (80084c8 <TIM_Base_SetConfig+0x12c>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d003      	beq.n	8008494 <TIM_Base_SetConfig+0xf8>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a12      	ldr	r2, [pc, #72]	@ (80084d8 <TIM_Base_SetConfig+0x13c>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d103      	bne.n	800849c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	691a      	ldr	r2, [r3, #16]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d105      	bne.n	80084ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	f023 0201 	bic.w	r2, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	611a      	str	r2, [r3, #16]
  }
}
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	40010000 	.word	0x40010000
 80084cc:	40000400 	.word	0x40000400
 80084d0:	40000800 	.word	0x40000800
 80084d4:	40000c00 	.word	0x40000c00
 80084d8:	40010400 	.word	0x40010400
 80084dc:	40014000 	.word	0x40014000
 80084e0:	40014400 	.word	0x40014400
 80084e4:	40014800 	.word	0x40014800
 80084e8:	40001800 	.word	0x40001800
 80084ec:	40001c00 	.word	0x40001c00
 80084f0:	40002000 	.word	0x40002000

080084f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	f023 0201 	bic.w	r2, r3, #1
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0303 	bic.w	r3, r3, #3
 800852a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f023 0302 	bic.w	r3, r3, #2
 800853c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	4313      	orrs	r3, r2
 8008546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a20      	ldr	r2, [pc, #128]	@ (80085cc <TIM_OC1_SetConfig+0xd8>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d003      	beq.n	8008558 <TIM_OC1_SetConfig+0x64>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a1f      	ldr	r2, [pc, #124]	@ (80085d0 <TIM_OC1_SetConfig+0xdc>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d10c      	bne.n	8008572 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f023 0308 	bic.w	r3, r3, #8
 800855e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f023 0304 	bic.w	r3, r3, #4
 8008570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a15      	ldr	r2, [pc, #84]	@ (80085cc <TIM_OC1_SetConfig+0xd8>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d003      	beq.n	8008582 <TIM_OC1_SetConfig+0x8e>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a14      	ldr	r2, [pc, #80]	@ (80085d0 <TIM_OC1_SetConfig+0xdc>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d111      	bne.n	80085a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	4313      	orrs	r3, r2
 800859a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	621a      	str	r2, [r3, #32]
}
 80085c0:	bf00      	nop
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	40010000 	.word	0x40010000
 80085d0:	40010400 	.word	0x40010400

080085d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a1b      	ldr	r3, [r3, #32]
 80085e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	f023 0210 	bic.w	r2, r3, #16
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800860a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	021b      	lsls	r3, r3, #8
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	4313      	orrs	r3, r2
 8008616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f023 0320 	bic.w	r3, r3, #32
 800861e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	011b      	lsls	r3, r3, #4
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	4313      	orrs	r3, r2
 800862a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a22      	ldr	r2, [pc, #136]	@ (80086b8 <TIM_OC2_SetConfig+0xe4>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d003      	beq.n	800863c <TIM_OC2_SetConfig+0x68>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a21      	ldr	r2, [pc, #132]	@ (80086bc <TIM_OC2_SetConfig+0xe8>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d10d      	bne.n	8008658 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	011b      	lsls	r3, r3, #4
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	4313      	orrs	r3, r2
 800864e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008656:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a17      	ldr	r2, [pc, #92]	@ (80086b8 <TIM_OC2_SetConfig+0xe4>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d003      	beq.n	8008668 <TIM_OC2_SetConfig+0x94>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a16      	ldr	r2, [pc, #88]	@ (80086bc <TIM_OC2_SetConfig+0xe8>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d113      	bne.n	8008690 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800866e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	4313      	orrs	r3, r2
 8008682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	4313      	orrs	r3, r2
 800868e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	621a      	str	r2, [r3, #32]
}
 80086aa:	bf00      	nop
 80086ac:	371c      	adds	r7, #28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	40010000 	.word	0x40010000
 80086bc:	40010400 	.word	0x40010400

080086c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	69db      	ldr	r3, [r3, #28]
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f023 0303 	bic.w	r3, r3, #3
 80086f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	021b      	lsls	r3, r3, #8
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	4313      	orrs	r3, r2
 8008714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a21      	ldr	r2, [pc, #132]	@ (80087a0 <TIM_OC3_SetConfig+0xe0>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d003      	beq.n	8008726 <TIM_OC3_SetConfig+0x66>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a20      	ldr	r2, [pc, #128]	@ (80087a4 <TIM_OC3_SetConfig+0xe4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d10d      	bne.n	8008742 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800872c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	021b      	lsls	r3, r3, #8
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	4313      	orrs	r3, r2
 8008738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a16      	ldr	r2, [pc, #88]	@ (80087a0 <TIM_OC3_SetConfig+0xe0>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d003      	beq.n	8008752 <TIM_OC3_SetConfig+0x92>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a15      	ldr	r2, [pc, #84]	@ (80087a4 <TIM_OC3_SetConfig+0xe4>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d113      	bne.n	800877a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	011b      	lsls	r3, r3, #4
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	4313      	orrs	r3, r2
 800876c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	011b      	lsls	r3, r3, #4
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	4313      	orrs	r3, r2
 8008778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	621a      	str	r2, [r3, #32]
}
 8008794:	bf00      	nop
 8008796:	371c      	adds	r7, #28
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	40010000 	.word	0x40010000
 80087a4:	40010400 	.word	0x40010400

080087a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b087      	sub	sp, #28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a1b      	ldr	r3, [r3, #32]
 80087bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	031b      	lsls	r3, r3, #12
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4a12      	ldr	r2, [pc, #72]	@ (800884c <TIM_OC4_SetConfig+0xa4>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d003      	beq.n	8008810 <TIM_OC4_SetConfig+0x68>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a11      	ldr	r2, [pc, #68]	@ (8008850 <TIM_OC4_SetConfig+0xa8>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d109      	bne.n	8008824 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	019b      	lsls	r3, r3, #6
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	4313      	orrs	r3, r2
 8008822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	621a      	str	r2, [r3, #32]
}
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	40010000 	.word	0x40010000
 8008850:	40010400 	.word	0x40010400

08008854 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f003 031f 	and.w	r3, r3, #31
 8008866:	2201      	movs	r2, #1
 8008868:	fa02 f303 	lsl.w	r3, r2, r3
 800886c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6a1a      	ldr	r2, [r3, #32]
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	43db      	mvns	r3, r3
 8008876:	401a      	ands	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6a1a      	ldr	r2, [r3, #32]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f003 031f 	and.w	r3, r3, #31
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	fa01 f303 	lsl.w	r3, r1, r3
 800888c:	431a      	orrs	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	621a      	str	r2, [r3, #32]
}
 8008892:	bf00      	nop
 8008894:	371c      	adds	r7, #28
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
	...

080088a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d101      	bne.n	80088b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088b4:	2302      	movs	r3, #2
 80088b6:	e05a      	b.n	800896e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a21      	ldr	r2, [pc, #132]	@ (800897c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d022      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008904:	d01d      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a1d      	ldr	r2, [pc, #116]	@ (8008980 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d018      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a1b      	ldr	r2, [pc, #108]	@ (8008984 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d013      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a1a      	ldr	r2, [pc, #104]	@ (8008988 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d00e      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a18      	ldr	r2, [pc, #96]	@ (800898c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d009      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a17      	ldr	r2, [pc, #92]	@ (8008990 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d004      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a15      	ldr	r2, [pc, #84]	@ (8008994 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d10c      	bne.n	800895c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	4313      	orrs	r3, r2
 8008952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	40010000 	.word	0x40010000
 8008980:	40000400 	.word	0x40000400
 8008984:	40000800 	.word	0x40000800
 8008988:	40000c00 	.word	0x40000c00
 800898c:	40010400 	.word	0x40010400
 8008990:	40014000 	.word	0x40014000
 8008994:	40001800 	.word	0x40001800

08008998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e042      	b.n	8008a30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d106      	bne.n	80089c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7fb f8b6 	bl	8003b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2224      	movs	r2, #36	@ 0x24
 80089c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80089da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fdff 	bl	80095e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	691a      	ldr	r2, [r3, #16]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	695a      	ldr	r2, [r3, #20]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2220      	movs	r2, #32
 8008a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08a      	sub	sp, #40	@ 0x28
 8008a3c:	af02      	add	r7, sp, #8
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	4613      	mov	r3, r2
 8008a46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b20      	cmp	r3, #32
 8008a56:	d175      	bne.n	8008b44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <HAL_UART_Transmit+0x2c>
 8008a5e:	88fb      	ldrh	r3, [r7, #6]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e06e      	b.n	8008b46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2221      	movs	r2, #33	@ 0x21
 8008a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a76:	f7fb fa75 	bl	8003f64 <HAL_GetTick>
 8008a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	88fa      	ldrh	r2, [r7, #6]
 8008a80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	88fa      	ldrh	r2, [r7, #6]
 8008a86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a90:	d108      	bne.n	8008aa4 <HAL_UART_Transmit+0x6c>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d104      	bne.n	8008aa4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	61bb      	str	r3, [r7, #24]
 8008aa2:	e003      	b.n	8008aac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008aac:	e02e      	b.n	8008b0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2180      	movs	r1, #128	@ 0x80
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fb9b 	bl	80091f4 <UART_WaitOnFlagUntilTimeout>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e03a      	b.n	8008b46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10b      	bne.n	8008aee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ae4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	3302      	adds	r3, #2
 8008aea:	61bb      	str	r3, [r7, #24]
 8008aec:	e007      	b.n	8008afe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	781a      	ldrb	r2, [r3, #0]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	3301      	adds	r3, #1
 8008afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	3b01      	subs	r3, #1
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1cb      	bne.n	8008aae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2140      	movs	r1, #64	@ 0x40
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 fb67 	bl	80091f4 <UART_WaitOnFlagUntilTimeout>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e006      	b.n	8008b46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	e000      	b.n	8008b46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008b44:	2302      	movs	r3, #2
  }
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3720      	adds	r7, #32
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b08a      	sub	sp, #40	@ 0x28
 8008b52:	af02      	add	r7, sp, #8
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	603b      	str	r3, [r7, #0]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b20      	cmp	r3, #32
 8008b6c:	f040 8081 	bne.w	8008c72 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <HAL_UART_Receive+0x2e>
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e079      	b.n	8008c74 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2222      	movs	r2, #34	@ 0x22
 8008b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b94:	f7fb f9e6 	bl	8003f64 <HAL_GetTick>
 8008b98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	88fa      	ldrh	r2, [r7, #6]
 8008b9e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	88fa      	ldrh	r2, [r7, #6]
 8008ba4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bae:	d108      	bne.n	8008bc2 <HAL_UART_Receive+0x74>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d104      	bne.n	8008bc2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	61bb      	str	r3, [r7, #24]
 8008bc0:	e003      	b.n	8008bca <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008bca:	e047      	b.n	8008c5c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2120      	movs	r1, #32
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 fb0c 	bl	80091f4 <UART_WaitOnFlagUntilTimeout>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d005      	beq.n	8008bee <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2220      	movs	r2, #32
 8008be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e042      	b.n	8008c74 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10c      	bne.n	8008c0e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	3302      	adds	r3, #2
 8008c0a:	61bb      	str	r3, [r7, #24]
 8008c0c:	e01f      	b.n	8008c4e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c16:	d007      	beq.n	8008c28 <HAL_UART_Receive+0xda>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10a      	bne.n	8008c36 <HAL_UART_Receive+0xe8>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d106      	bne.n	8008c36 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	701a      	strb	r2, [r3, #0]
 8008c34:	e008      	b.n	8008c48 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	3b01      	subs	r3, #1
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1b2      	bne.n	8008bcc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e000      	b.n	8008c74 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008c72:	2302      	movs	r3, #2
  }
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3720      	adds	r7, #32
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b0ba      	sub	sp, #232	@ 0xe8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cb2:	f003 030f 	and.w	r3, r3, #15
 8008cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10f      	bne.n	8008ce2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d009      	beq.n	8008ce2 <HAL_UART_IRQHandler+0x66>
 8008cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cd2:	f003 0320 	and.w	r3, r3, #32
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fbc2 	bl	8009464 <UART_Receive_IT>
      return;
 8008ce0:	e25b      	b.n	800919a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 80de 	beq.w	8008ea8 <HAL_UART_IRQHandler+0x22c>
 8008cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d106      	bne.n	8008d06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cfc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 80d1 	beq.w	8008ea8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <HAL_UART_IRQHandler+0xae>
 8008d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d005      	beq.n	8008d2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d22:	f043 0201 	orr.w	r2, r3, #1
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d2e:	f003 0304 	and.w	r3, r3, #4
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00b      	beq.n	8008d4e <HAL_UART_IRQHandler+0xd2>
 8008d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d005      	beq.n	8008d4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d46:	f043 0202 	orr.w	r2, r3, #2
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00b      	beq.n	8008d72 <HAL_UART_IRQHandler+0xf6>
 8008d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d5e:	f003 0301 	and.w	r3, r3, #1
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d005      	beq.n	8008d72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d6a:	f043 0204 	orr.w	r2, r3, #4
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d76:	f003 0308 	and.w	r3, r3, #8
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d011      	beq.n	8008da2 <HAL_UART_IRQHandler+0x126>
 8008d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d82:	f003 0320 	and.w	r3, r3, #32
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d105      	bne.n	8008d96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d005      	beq.n	8008da2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d9a:	f043 0208 	orr.w	r2, r3, #8
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 81f2 	beq.w	8009190 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d008      	beq.n	8008dca <HAL_UART_IRQHandler+0x14e>
 8008db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dbc:	f003 0320 	and.w	r3, r3, #32
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d002      	beq.n	8008dca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fb4d 	bl	8009464 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dd4:	2b40      	cmp	r3, #64	@ 0x40
 8008dd6:	bf0c      	ite	eq
 8008dd8:	2301      	moveq	r3, #1
 8008dda:	2300      	movne	r3, #0
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008de6:	f003 0308 	and.w	r3, r3, #8
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d103      	bne.n	8008df6 <HAL_UART_IRQHandler+0x17a>
 8008dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d04f      	beq.n	8008e96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa55 	bl	80092a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e06:	2b40      	cmp	r3, #64	@ 0x40
 8008e08:	d141      	bne.n	8008e8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3314      	adds	r3, #20
 8008e10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3314      	adds	r3, #20
 8008e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008e36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1d9      	bne.n	8008e0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d013      	beq.n	8008e86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e62:	4a7e      	ldr	r2, [pc, #504]	@ (800905c <HAL_UART_IRQHandler+0x3e0>)
 8008e64:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fb fa2b 	bl	80042c6 <HAL_DMA_Abort_IT>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d016      	beq.n	8008ea4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008e80:	4610      	mov	r0, r2
 8008e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e84:	e00e      	b.n	8008ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f99e 	bl	80091c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e8c:	e00a      	b.n	8008ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f99a 	bl	80091c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e94:	e006      	b.n	8008ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f996 	bl	80091c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008ea2:	e175      	b.n	8009190 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea4:	bf00      	nop
    return;
 8008ea6:	e173      	b.n	8009190 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	f040 814f 	bne.w	8009150 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eb6:	f003 0310 	and.w	r3, r3, #16
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 8148 	beq.w	8009150 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ec4:	f003 0310 	and.w	r3, r3, #16
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 8141 	beq.w	8009150 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60bb      	str	r3, [r7, #8]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	60bb      	str	r3, [r7, #8]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	60bb      	str	r3, [r7, #8]
 8008ee2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eee:	2b40      	cmp	r3, #64	@ 0x40
 8008ef0:	f040 80b6 	bne.w	8009060 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 8145 	beq.w	8009194 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f12:	429a      	cmp	r2, r3
 8008f14:	f080 813e 	bcs.w	8009194 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f2a:	f000 8088 	beq.w	800903e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	330c      	adds	r3, #12
 8008f34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	330c      	adds	r3, #12
 8008f56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008f5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f6a:	e841 2300 	strex	r3, r2, [r1]
 8008f6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1d9      	bne.n	8008f2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3314      	adds	r3, #20
 8008f80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f84:	e853 3f00 	ldrex	r3, [r3]
 8008f88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008f8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f8c:	f023 0301 	bic.w	r3, r3, #1
 8008f90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	3314      	adds	r3, #20
 8008f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008fa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008fa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008faa:	e841 2300 	strex	r3, r2, [r1]
 8008fae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008fb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e1      	bne.n	8008f7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3314      	adds	r3, #20
 8008fbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008fc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3314      	adds	r3, #20
 8008fd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008fda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008fe0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008fe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e3      	bne.n	8008fb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	330c      	adds	r3, #12
 8009002:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009006:	e853 3f00 	ldrex	r3, [r3]
 800900a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800900c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800900e:	f023 0310 	bic.w	r3, r3, #16
 8009012:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	330c      	adds	r3, #12
 800901c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009020:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009022:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009024:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009026:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009028:	e841 2300 	strex	r3, r2, [r1]
 800902c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800902e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1e3      	bne.n	8008ffc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009038:	4618      	mov	r0, r3
 800903a:	f7fb f8d4 	bl	80041e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2202      	movs	r2, #2
 8009042:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800904c:	b29b      	uxth	r3, r3
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	b29b      	uxth	r3, r3
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f8c1 	bl	80091dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800905a:	e09b      	b.n	8009194 <HAL_UART_IRQHandler+0x518>
 800905c:	0800936d 	.word	0x0800936d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009068:	b29b      	uxth	r3, r3
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009074:	b29b      	uxth	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 808e 	beq.w	8009198 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800907c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 8089 	beq.w	8009198 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	330c      	adds	r3, #12
 800908c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800909c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	330c      	adds	r3, #12
 80090a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80090aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80090ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090b2:	e841 2300 	strex	r3, r2, [r1]
 80090b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1e3      	bne.n	8009086 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3314      	adds	r3, #20
 80090c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c8:	e853 3f00 	ldrex	r3, [r3]
 80090cc:	623b      	str	r3, [r7, #32]
   return(result);
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	f023 0301 	bic.w	r3, r3, #1
 80090d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3314      	adds	r3, #20
 80090de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80090e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80090e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090ea:	e841 2300 	strex	r3, r2, [r1]
 80090ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1e3      	bne.n	80090be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2220      	movs	r2, #32
 80090fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	330c      	adds	r3, #12
 800910a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	e853 3f00 	ldrex	r3, [r3]
 8009112:	60fb      	str	r3, [r7, #12]
   return(result);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f023 0310 	bic.w	r3, r3, #16
 800911a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	330c      	adds	r3, #12
 8009124:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009128:	61fa      	str	r2, [r7, #28]
 800912a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	69b9      	ldr	r1, [r7, #24]
 800912e:	69fa      	ldr	r2, [r7, #28]
 8009130:	e841 2300 	strex	r3, r2, [r1]
 8009134:	617b      	str	r3, [r7, #20]
   return(result);
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e3      	bne.n	8009104 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2202      	movs	r2, #2
 8009140:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009142:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f847 	bl	80091dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800914e:	e023      	b.n	8009198 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009158:	2b00      	cmp	r3, #0
 800915a:	d009      	beq.n	8009170 <HAL_UART_IRQHandler+0x4f4>
 800915c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f913 	bl	8009394 <UART_Transmit_IT>
    return;
 800916e:	e014      	b.n	800919a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00e      	beq.n	800919a <HAL_UART_IRQHandler+0x51e>
 800917c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009184:	2b00      	cmp	r3, #0
 8009186:	d008      	beq.n	800919a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f953 	bl	8009434 <UART_EndTransmit_IT>
    return;
 800918e:	e004      	b.n	800919a <HAL_UART_IRQHandler+0x51e>
    return;
 8009190:	bf00      	nop
 8009192:	e002      	b.n	800919a <HAL_UART_IRQHandler+0x51e>
      return;
 8009194:	bf00      	nop
 8009196:	e000      	b.n	800919a <HAL_UART_IRQHandler+0x51e>
      return;
 8009198:	bf00      	nop
  }
}
 800919a:	37e8      	adds	r7, #232	@ 0xe8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	460b      	mov	r3, r1
 80091e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	603b      	str	r3, [r7, #0]
 8009200:	4613      	mov	r3, r2
 8009202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009204:	e03b      	b.n	800927e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920c:	d037      	beq.n	800927e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800920e:	f7fa fea9 	bl	8003f64 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	6a3a      	ldr	r2, [r7, #32]
 800921a:	429a      	cmp	r2, r3
 800921c:	d302      	bcc.n	8009224 <UART_WaitOnFlagUntilTimeout+0x30>
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e03a      	b.n	800929e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	f003 0304 	and.w	r3, r3, #4
 8009232:	2b00      	cmp	r3, #0
 8009234:	d023      	beq.n	800927e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b80      	cmp	r3, #128	@ 0x80
 800923a:	d020      	beq.n	800927e <UART_WaitOnFlagUntilTimeout+0x8a>
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b40      	cmp	r3, #64	@ 0x40
 8009240:	d01d      	beq.n	800927e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b08      	cmp	r3, #8
 800924e:	d116      	bne.n	800927e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009250:	2300      	movs	r3, #0
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	617b      	str	r3, [r7, #20]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	617b      	str	r3, [r7, #20]
 8009264:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 f81d 	bl	80092a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2208      	movs	r2, #8
 8009270:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e00f      	b.n	800929e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	4013      	ands	r3, r2
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	429a      	cmp	r2, r3
 800928c:	bf0c      	ite	eq
 800928e:	2301      	moveq	r3, #1
 8009290:	2300      	movne	r3, #0
 8009292:	b2db      	uxtb	r3, r3
 8009294:	461a      	mov	r2, r3
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	429a      	cmp	r2, r3
 800929a:	d0b4      	beq.n	8009206 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b095      	sub	sp, #84	@ 0x54
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	330c      	adds	r3, #12
 80092b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	330c      	adds	r3, #12
 80092cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80092ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80092d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092d6:	e841 2300 	strex	r3, r2, [r1]
 80092da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1e5      	bne.n	80092ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3314      	adds	r3, #20
 80092e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	e853 3f00 	ldrex	r3, [r3]
 80092f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	f023 0301 	bic.w	r3, r3, #1
 80092f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3314      	adds	r3, #20
 8009300:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009302:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009304:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800930a:	e841 2300 	strex	r3, r2, [r1]
 800930e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1e5      	bne.n	80092e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931a:	2b01      	cmp	r3, #1
 800931c:	d119      	bne.n	8009352 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	330c      	adds	r3, #12
 8009324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	60bb      	str	r3, [r7, #8]
   return(result);
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	f023 0310 	bic.w	r3, r3, #16
 8009334:	647b      	str	r3, [r7, #68]	@ 0x44
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	330c      	adds	r3, #12
 800933c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800933e:	61ba      	str	r2, [r7, #24]
 8009340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	6979      	ldr	r1, [r7, #20]
 8009344:	69ba      	ldr	r2, [r7, #24]
 8009346:	e841 2300 	strex	r3, r2, [r1]
 800934a:	613b      	str	r3, [r7, #16]
   return(result);
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e5      	bne.n	800931e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2220      	movs	r2, #32
 8009356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009360:	bf00      	nop
 8009362:	3754      	adds	r7, #84	@ 0x54
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009378:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f7ff ff1e 	bl	80091c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800938c:	bf00      	nop
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b21      	cmp	r3, #33	@ 0x21
 80093a6:	d13e      	bne.n	8009426 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093b0:	d114      	bne.n	80093dc <UART_Transmit_IT+0x48>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d110      	bne.n	80093dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	461a      	mov	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	1c9a      	adds	r2, r3, #2
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	621a      	str	r2, [r3, #32]
 80093da:	e008      	b.n	80093ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a1b      	ldr	r3, [r3, #32]
 80093e0:	1c59      	adds	r1, r3, #1
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	6211      	str	r1, [r2, #32]
 80093e6:	781a      	ldrb	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	3b01      	subs	r3, #1
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	4619      	mov	r1, r3
 80093fc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10f      	bne.n	8009422 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009410:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009420:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	e000      	b.n	8009428 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009426:	2302      	movs	r3, #2
  }
}
 8009428:	4618      	mov	r0, r3
 800942a:	3714      	adds	r7, #20
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68da      	ldr	r2, [r3, #12]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800944a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2220      	movs	r2, #32
 8009450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff fea3 	bl	80091a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b08c      	sub	sp, #48	@ 0x30
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b22      	cmp	r3, #34	@ 0x22
 8009476:	f040 80ae 	bne.w	80095d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009482:	d117      	bne.n	80094b4 <UART_Receive_IT+0x50>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d113      	bne.n	80094b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800948c:	2300      	movs	r3, #0
 800948e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009494:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	b29b      	uxth	r3, r3
 800949e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ac:	1c9a      	adds	r2, r3, #2
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80094b2:	e026      	b.n	8009502 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094c6:	d007      	beq.n	80094d8 <UART_Receive_IT+0x74>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10a      	bne.n	80094e6 <UART_Receive_IT+0x82>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d106      	bne.n	80094e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e2:	701a      	strb	r2, [r3, #0]
 80094e4:	e008      	b.n	80094f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009506:	b29b      	uxth	r3, r3
 8009508:	3b01      	subs	r3, #1
 800950a:	b29b      	uxth	r3, r3
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	4619      	mov	r1, r3
 8009510:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009512:	2b00      	cmp	r3, #0
 8009514:	d15d      	bne.n	80095d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68da      	ldr	r2, [r3, #12]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f022 0220 	bic.w	r2, r2, #32
 8009524:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009534:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	695a      	ldr	r2, [r3, #20]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f022 0201 	bic.w	r2, r2, #1
 8009544:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2220      	movs	r2, #32
 800954a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009558:	2b01      	cmp	r3, #1
 800955a:	d135      	bne.n	80095c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	330c      	adds	r3, #12
 8009568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	e853 3f00 	ldrex	r3, [r3]
 8009570:	613b      	str	r3, [r7, #16]
   return(result);
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	f023 0310 	bic.w	r3, r3, #16
 8009578:	627b      	str	r3, [r7, #36]	@ 0x24
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	330c      	adds	r3, #12
 8009580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009582:	623a      	str	r2, [r7, #32]
 8009584:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009586:	69f9      	ldr	r1, [r7, #28]
 8009588:	6a3a      	ldr	r2, [r7, #32]
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e5      	bne.n	8009562 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0310 	and.w	r3, r3, #16
 80095a0:	2b10      	cmp	r3, #16
 80095a2:	d10a      	bne.n	80095ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095a4:	2300      	movs	r3, #0
 80095a6:	60fb      	str	r3, [r7, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	60fb      	str	r3, [r7, #12]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	60fb      	str	r3, [r7, #12]
 80095b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff fe0b 	bl	80091dc <HAL_UARTEx_RxEventCallback>
 80095c6:	e002      	b.n	80095ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7ff fdf3 	bl	80091b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	e002      	b.n	80095d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	e000      	b.n	80095d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80095d6:	2302      	movs	r3, #2
  }
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3730      	adds	r7, #48	@ 0x30
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095e4:	b0c0      	sub	sp, #256	@ 0x100
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80095f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095fc:	68d9      	ldr	r1, [r3, #12]
 80095fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	ea40 0301 	orr.w	r3, r0, r1
 8009608:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800960a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800960e:	689a      	ldr	r2, [r3, #8]
 8009610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	431a      	orrs	r2, r3
 8009618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	431a      	orrs	r2, r3
 8009620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	4313      	orrs	r3, r2
 8009628:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800962c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009638:	f021 010c 	bic.w	r1, r1, #12
 800963c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009646:	430b      	orrs	r3, r1
 8009648:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800964a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800965a:	6999      	ldr	r1, [r3, #24]
 800965c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	ea40 0301 	orr.w	r3, r0, r1
 8009666:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	4b8f      	ldr	r3, [pc, #572]	@ (80098ac <UART_SetConfig+0x2cc>)
 8009670:	429a      	cmp	r2, r3
 8009672:	d005      	beq.n	8009680 <UART_SetConfig+0xa0>
 8009674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	4b8d      	ldr	r3, [pc, #564]	@ (80098b0 <UART_SetConfig+0x2d0>)
 800967c:	429a      	cmp	r2, r3
 800967e:	d104      	bne.n	800968a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009680:	f7fe f804 	bl	800768c <HAL_RCC_GetPCLK2Freq>
 8009684:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009688:	e003      	b.n	8009692 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800968a:	f7fd ffeb 	bl	8007664 <HAL_RCC_GetPCLK1Freq>
 800968e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800969c:	f040 810c 	bne.w	80098b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096a4:	2200      	movs	r2, #0
 80096a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80096aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80096ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80096b2:	4622      	mov	r2, r4
 80096b4:	462b      	mov	r3, r5
 80096b6:	1891      	adds	r1, r2, r2
 80096b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80096ba:	415b      	adcs	r3, r3
 80096bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80096c2:	4621      	mov	r1, r4
 80096c4:	eb12 0801 	adds.w	r8, r2, r1
 80096c8:	4629      	mov	r1, r5
 80096ca:	eb43 0901 	adc.w	r9, r3, r1
 80096ce:	f04f 0200 	mov.w	r2, #0
 80096d2:	f04f 0300 	mov.w	r3, #0
 80096d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096e2:	4690      	mov	r8, r2
 80096e4:	4699      	mov	r9, r3
 80096e6:	4623      	mov	r3, r4
 80096e8:	eb18 0303 	adds.w	r3, r8, r3
 80096ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80096f0:	462b      	mov	r3, r5
 80096f2:	eb49 0303 	adc.w	r3, r9, r3
 80096f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80096fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009706:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800970a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800970e:	460b      	mov	r3, r1
 8009710:	18db      	adds	r3, r3, r3
 8009712:	653b      	str	r3, [r7, #80]	@ 0x50
 8009714:	4613      	mov	r3, r2
 8009716:	eb42 0303 	adc.w	r3, r2, r3
 800971a:	657b      	str	r3, [r7, #84]	@ 0x54
 800971c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009720:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009724:	f7f6 fdbc 	bl	80002a0 <__aeabi_uldivmod>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4b61      	ldr	r3, [pc, #388]	@ (80098b4 <UART_SetConfig+0x2d4>)
 800972e:	fba3 2302 	umull	r2, r3, r3, r2
 8009732:	095b      	lsrs	r3, r3, #5
 8009734:	011c      	lsls	r4, r3, #4
 8009736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800973a:	2200      	movs	r2, #0
 800973c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009740:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009744:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009748:	4642      	mov	r2, r8
 800974a:	464b      	mov	r3, r9
 800974c:	1891      	adds	r1, r2, r2
 800974e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009750:	415b      	adcs	r3, r3
 8009752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009754:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009758:	4641      	mov	r1, r8
 800975a:	eb12 0a01 	adds.w	sl, r2, r1
 800975e:	4649      	mov	r1, r9
 8009760:	eb43 0b01 	adc.w	fp, r3, r1
 8009764:	f04f 0200 	mov.w	r2, #0
 8009768:	f04f 0300 	mov.w	r3, #0
 800976c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009770:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009778:	4692      	mov	sl, r2
 800977a:	469b      	mov	fp, r3
 800977c:	4643      	mov	r3, r8
 800977e:	eb1a 0303 	adds.w	r3, sl, r3
 8009782:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009786:	464b      	mov	r3, r9
 8009788:	eb4b 0303 	adc.w	r3, fp, r3
 800978c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800979c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80097a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80097a4:	460b      	mov	r3, r1
 80097a6:	18db      	adds	r3, r3, r3
 80097a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80097aa:	4613      	mov	r3, r2
 80097ac:	eb42 0303 	adc.w	r3, r2, r3
 80097b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80097b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80097b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80097ba:	f7f6 fd71 	bl	80002a0 <__aeabi_uldivmod>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4611      	mov	r1, r2
 80097c4:	4b3b      	ldr	r3, [pc, #236]	@ (80098b4 <UART_SetConfig+0x2d4>)
 80097c6:	fba3 2301 	umull	r2, r3, r3, r1
 80097ca:	095b      	lsrs	r3, r3, #5
 80097cc:	2264      	movs	r2, #100	@ 0x64
 80097ce:	fb02 f303 	mul.w	r3, r2, r3
 80097d2:	1acb      	subs	r3, r1, r3
 80097d4:	00db      	lsls	r3, r3, #3
 80097d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80097da:	4b36      	ldr	r3, [pc, #216]	@ (80098b4 <UART_SetConfig+0x2d4>)
 80097dc:	fba3 2302 	umull	r2, r3, r3, r2
 80097e0:	095b      	lsrs	r3, r3, #5
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80097e8:	441c      	add	r4, r3
 80097ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097ee:	2200      	movs	r2, #0
 80097f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80097f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80097f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80097fc:	4642      	mov	r2, r8
 80097fe:	464b      	mov	r3, r9
 8009800:	1891      	adds	r1, r2, r2
 8009802:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009804:	415b      	adcs	r3, r3
 8009806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009808:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800980c:	4641      	mov	r1, r8
 800980e:	1851      	adds	r1, r2, r1
 8009810:	6339      	str	r1, [r7, #48]	@ 0x30
 8009812:	4649      	mov	r1, r9
 8009814:	414b      	adcs	r3, r1
 8009816:	637b      	str	r3, [r7, #52]	@ 0x34
 8009818:	f04f 0200 	mov.w	r2, #0
 800981c:	f04f 0300 	mov.w	r3, #0
 8009820:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009824:	4659      	mov	r1, fp
 8009826:	00cb      	lsls	r3, r1, #3
 8009828:	4651      	mov	r1, sl
 800982a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800982e:	4651      	mov	r1, sl
 8009830:	00ca      	lsls	r2, r1, #3
 8009832:	4610      	mov	r0, r2
 8009834:	4619      	mov	r1, r3
 8009836:	4603      	mov	r3, r0
 8009838:	4642      	mov	r2, r8
 800983a:	189b      	adds	r3, r3, r2
 800983c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009840:	464b      	mov	r3, r9
 8009842:	460a      	mov	r2, r1
 8009844:	eb42 0303 	adc.w	r3, r2, r3
 8009848:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800984c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009858:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800985c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009860:	460b      	mov	r3, r1
 8009862:	18db      	adds	r3, r3, r3
 8009864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009866:	4613      	mov	r3, r2
 8009868:	eb42 0303 	adc.w	r3, r2, r3
 800986c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800986e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009872:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009876:	f7f6 fd13 	bl	80002a0 <__aeabi_uldivmod>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4b0d      	ldr	r3, [pc, #52]	@ (80098b4 <UART_SetConfig+0x2d4>)
 8009880:	fba3 1302 	umull	r1, r3, r3, r2
 8009884:	095b      	lsrs	r3, r3, #5
 8009886:	2164      	movs	r1, #100	@ 0x64
 8009888:	fb01 f303 	mul.w	r3, r1, r3
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	3332      	adds	r3, #50	@ 0x32
 8009892:	4a08      	ldr	r2, [pc, #32]	@ (80098b4 <UART_SetConfig+0x2d4>)
 8009894:	fba2 2303 	umull	r2, r3, r2, r3
 8009898:	095b      	lsrs	r3, r3, #5
 800989a:	f003 0207 	and.w	r2, r3, #7
 800989e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4422      	add	r2, r4
 80098a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80098a8:	e106      	b.n	8009ab8 <UART_SetConfig+0x4d8>
 80098aa:	bf00      	nop
 80098ac:	40011000 	.word	0x40011000
 80098b0:	40011400 	.word	0x40011400
 80098b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098bc:	2200      	movs	r2, #0
 80098be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80098c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80098c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80098ca:	4642      	mov	r2, r8
 80098cc:	464b      	mov	r3, r9
 80098ce:	1891      	adds	r1, r2, r2
 80098d0:	6239      	str	r1, [r7, #32]
 80098d2:	415b      	adcs	r3, r3
 80098d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80098d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098da:	4641      	mov	r1, r8
 80098dc:	1854      	adds	r4, r2, r1
 80098de:	4649      	mov	r1, r9
 80098e0:	eb43 0501 	adc.w	r5, r3, r1
 80098e4:	f04f 0200 	mov.w	r2, #0
 80098e8:	f04f 0300 	mov.w	r3, #0
 80098ec:	00eb      	lsls	r3, r5, #3
 80098ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098f2:	00e2      	lsls	r2, r4, #3
 80098f4:	4614      	mov	r4, r2
 80098f6:	461d      	mov	r5, r3
 80098f8:	4643      	mov	r3, r8
 80098fa:	18e3      	adds	r3, r4, r3
 80098fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009900:	464b      	mov	r3, r9
 8009902:	eb45 0303 	adc.w	r3, r5, r3
 8009906:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800990a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009916:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800991a:	f04f 0200 	mov.w	r2, #0
 800991e:	f04f 0300 	mov.w	r3, #0
 8009922:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009926:	4629      	mov	r1, r5
 8009928:	008b      	lsls	r3, r1, #2
 800992a:	4621      	mov	r1, r4
 800992c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009930:	4621      	mov	r1, r4
 8009932:	008a      	lsls	r2, r1, #2
 8009934:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009938:	f7f6 fcb2 	bl	80002a0 <__aeabi_uldivmod>
 800993c:	4602      	mov	r2, r0
 800993e:	460b      	mov	r3, r1
 8009940:	4b60      	ldr	r3, [pc, #384]	@ (8009ac4 <UART_SetConfig+0x4e4>)
 8009942:	fba3 2302 	umull	r2, r3, r3, r2
 8009946:	095b      	lsrs	r3, r3, #5
 8009948:	011c      	lsls	r4, r3, #4
 800994a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800994e:	2200      	movs	r2, #0
 8009950:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009954:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009958:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800995c:	4642      	mov	r2, r8
 800995e:	464b      	mov	r3, r9
 8009960:	1891      	adds	r1, r2, r2
 8009962:	61b9      	str	r1, [r7, #24]
 8009964:	415b      	adcs	r3, r3
 8009966:	61fb      	str	r3, [r7, #28]
 8009968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800996c:	4641      	mov	r1, r8
 800996e:	1851      	adds	r1, r2, r1
 8009970:	6139      	str	r1, [r7, #16]
 8009972:	4649      	mov	r1, r9
 8009974:	414b      	adcs	r3, r1
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	f04f 0200 	mov.w	r2, #0
 800997c:	f04f 0300 	mov.w	r3, #0
 8009980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009984:	4659      	mov	r1, fp
 8009986:	00cb      	lsls	r3, r1, #3
 8009988:	4651      	mov	r1, sl
 800998a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800998e:	4651      	mov	r1, sl
 8009990:	00ca      	lsls	r2, r1, #3
 8009992:	4610      	mov	r0, r2
 8009994:	4619      	mov	r1, r3
 8009996:	4603      	mov	r3, r0
 8009998:	4642      	mov	r2, r8
 800999a:	189b      	adds	r3, r3, r2
 800999c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80099a0:	464b      	mov	r3, r9
 80099a2:	460a      	mov	r2, r1
 80099a4:	eb42 0303 	adc.w	r3, r2, r3
 80099a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80099ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80099b8:	f04f 0200 	mov.w	r2, #0
 80099bc:	f04f 0300 	mov.w	r3, #0
 80099c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80099c4:	4649      	mov	r1, r9
 80099c6:	008b      	lsls	r3, r1, #2
 80099c8:	4641      	mov	r1, r8
 80099ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099ce:	4641      	mov	r1, r8
 80099d0:	008a      	lsls	r2, r1, #2
 80099d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80099d6:	f7f6 fc63 	bl	80002a0 <__aeabi_uldivmod>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4611      	mov	r1, r2
 80099e0:	4b38      	ldr	r3, [pc, #224]	@ (8009ac4 <UART_SetConfig+0x4e4>)
 80099e2:	fba3 2301 	umull	r2, r3, r3, r1
 80099e6:	095b      	lsrs	r3, r3, #5
 80099e8:	2264      	movs	r2, #100	@ 0x64
 80099ea:	fb02 f303 	mul.w	r3, r2, r3
 80099ee:	1acb      	subs	r3, r1, r3
 80099f0:	011b      	lsls	r3, r3, #4
 80099f2:	3332      	adds	r3, #50	@ 0x32
 80099f4:	4a33      	ldr	r2, [pc, #204]	@ (8009ac4 <UART_SetConfig+0x4e4>)
 80099f6:	fba2 2303 	umull	r2, r3, r2, r3
 80099fa:	095b      	lsrs	r3, r3, #5
 80099fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a00:	441c      	add	r4, r3
 8009a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a06:	2200      	movs	r2, #0
 8009a08:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8009a0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009a10:	4642      	mov	r2, r8
 8009a12:	464b      	mov	r3, r9
 8009a14:	1891      	adds	r1, r2, r2
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	415b      	adcs	r3, r3
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a20:	4641      	mov	r1, r8
 8009a22:	1851      	adds	r1, r2, r1
 8009a24:	6039      	str	r1, [r7, #0]
 8009a26:	4649      	mov	r1, r9
 8009a28:	414b      	adcs	r3, r1
 8009a2a:	607b      	str	r3, [r7, #4]
 8009a2c:	f04f 0200 	mov.w	r2, #0
 8009a30:	f04f 0300 	mov.w	r3, #0
 8009a34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a38:	4659      	mov	r1, fp
 8009a3a:	00cb      	lsls	r3, r1, #3
 8009a3c:	4651      	mov	r1, sl
 8009a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a42:	4651      	mov	r1, sl
 8009a44:	00ca      	lsls	r2, r1, #3
 8009a46:	4610      	mov	r0, r2
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	4642      	mov	r2, r8
 8009a4e:	189b      	adds	r3, r3, r2
 8009a50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a52:	464b      	mov	r3, r9
 8009a54:	460a      	mov	r2, r1
 8009a56:	eb42 0303 	adc.w	r3, r2, r3
 8009a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a66:	667a      	str	r2, [r7, #100]	@ 0x64
 8009a68:	f04f 0200 	mov.w	r2, #0
 8009a6c:	f04f 0300 	mov.w	r3, #0
 8009a70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009a74:	4649      	mov	r1, r9
 8009a76:	008b      	lsls	r3, r1, #2
 8009a78:	4641      	mov	r1, r8
 8009a7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a7e:	4641      	mov	r1, r8
 8009a80:	008a      	lsls	r2, r1, #2
 8009a82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009a86:	f7f6 fc0b 	bl	80002a0 <__aeabi_uldivmod>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac4 <UART_SetConfig+0x4e4>)
 8009a90:	fba3 1302 	umull	r1, r3, r3, r2
 8009a94:	095b      	lsrs	r3, r3, #5
 8009a96:	2164      	movs	r1, #100	@ 0x64
 8009a98:	fb01 f303 	mul.w	r3, r1, r3
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	011b      	lsls	r3, r3, #4
 8009aa0:	3332      	adds	r3, #50	@ 0x32
 8009aa2:	4a08      	ldr	r2, [pc, #32]	@ (8009ac4 <UART_SetConfig+0x4e4>)
 8009aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa8:	095b      	lsrs	r3, r3, #5
 8009aaa:	f003 020f 	and.w	r2, r3, #15
 8009aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4422      	add	r2, r4
 8009ab6:	609a      	str	r2, [r3, #8]
}
 8009ab8:	bf00      	nop
 8009aba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ac4:	51eb851f 	.word	0x51eb851f

08009ac8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FMC_BCR1_WFDIS */
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	6812      	ldr	r2, [r2, #0]
 8009ae0:	f023 0101 	bic.w	r1, r3, #1
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	2b08      	cmp	r3, #8
 8009af0:	d102      	bne.n	8009af8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009af2:	2340      	movs	r3, #64	@ 0x40
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	e001      	b.n	8009afc <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009af8:	2300      	movs	r3, #0
 8009afa:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009b08:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009b0e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009b14:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009b1a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009b20:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8009b26:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8009b2c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8009b32:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8009b38:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	613b      	str	r3, [r7, #16]

#if defined(FMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  btcr_reg |= Init->ContinuousClock;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_CCLKEN */
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b5a:	693a      	ldr	r2, [r7, #16]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8009b60:	4b1b      	ldr	r3, [pc, #108]	@ (8009bd0 <FMC_NORSRAM_Init+0x108>)
 8009b62:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

#if defined(FMC_BCR1_WRAPMOD)
  mask |= FMC_BCR1_WRAPMOD;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009b6a:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WRAPMOD */
#if defined(FMC_BCR1_CCLKEN)
  mask |= FMC_BCR1_CCLKEN;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b72:	60fb      	str	r3, [r7, #12]
#endif
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
#endif /* FMC_BCR1_WFDIS */
  mask |= FMC_BCR1_CPSIZE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8009b7a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	43db      	mvns	r3, r3
 8009b8a:	ea02 0103 	and.w	r1, r2, r3
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	4319      	orrs	r1, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(FMC_BCR1_CCLKEN)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ba0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ba4:	d10c      	bne.n	8009bc0 <FMC_NORSRAM_Init+0xf8>
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d008      	beq.n	8009bc0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bba:	431a      	orrs	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	601a      	str	r2, [r3, #0]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FMC_BCR1_WFDIS */

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	0008fb7f 	.word	0x0008fb7f

08009bd4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bea:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	011b      	lsls	r3, r3, #4
 8009bf8:	431a      	orrs	r2, r3
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	021b      	lsls	r3, r3, #8
 8009c00:	431a      	orrs	r2, r3
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	041b      	lsls	r3, r3, #16
 8009c08:	431a      	orrs	r2, r3
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	051b      	lsls	r3, r3, #20
 8009c12:	431a      	orrs	r2, r3
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	3b02      	subs	r3, #2
 8009c1a:	061b      	lsls	r3, r3, #24
 8009c1c:	431a      	orrs	r2, r3
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	3201      	adds	r2, #1
 8009c28:	4319      	orrs	r1, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

#if defined(FMC_BCR1_CCLKEN)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c3c:	d113      	bne.n	8009c66 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009c46:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	051b      	lsls	r3, r3, #20
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	431a      	orrs	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	605a      	str	r2, [r3, #4]
  }

#endif
  return HAL_OK;
 8009c66:	2300      	movs	r3, #0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	371c      	adds	r7, #28
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
 8009c80:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c88:	d11d      	bne.n	8009cc6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c92:	4b13      	ldr	r3, [pc, #76]	@ (8009ce0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009c94:	4013      	ands	r3, r2
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	6811      	ldr	r1, [r2, #0]
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	6852      	ldr	r2, [r2, #4]
 8009c9e:	0112      	lsls	r2, r2, #4
 8009ca0:	4311      	orrs	r1, r2
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	6892      	ldr	r2, [r2, #8]
 8009ca6:	0212      	lsls	r2, r2, #8
 8009ca8:	4311      	orrs	r1, r2
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	6992      	ldr	r2, [r2, #24]
 8009cae:	4311      	orrs	r1, r2
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	68d2      	ldr	r2, [r2, #12]
 8009cb4:	0412      	lsls	r2, r2, #16
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	ea43 0102 	orr.w	r1, r3, r2
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009cc4:	e005      	b.n	8009cd2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8009cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009cd2:	2300      	movs	r3, #0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr
 8009ce0:	cff00000 	.word	0xcff00000

08009ce4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b084      	sub	sp, #16
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	f107 001c 	add.w	r0, r7, #28
 8009cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cf6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d123      	bne.n	8009d46 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009d26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d105      	bne.n	8009d3a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f9dc 	bl	800a0f8 <USB_CoreReset>
 8009d40:	4603      	mov	r3, r0
 8009d42:	73fb      	strb	r3, [r7, #15]
 8009d44:	e01b      	b.n	8009d7e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f9d0 	bl	800a0f8 <USB_CoreReset>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009d5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d106      	bne.n	8009d72 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009d70:	e005      	b.n	8009d7e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009d7e:	7fbb      	ldrb	r3, [r7, #30]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d10b      	bne.n	8009d9c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	f043 0206 	orr.w	r2, r3, #6
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f043 0220 	orr.w	r2, r3, #32
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009da8:	b004      	add	sp, #16
 8009daa:	4770      	bx	lr

08009dac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	f043 0201 	orr.w	r2, r3, #1
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	f023 0201 	bic.w	r2, r3, #1
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d115      	bne.n	8009e3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009e1e:	200a      	movs	r0, #10
 8009e20:	f7fa f8ac 	bl	8003f7c <HAL_Delay>
      ms += 10U;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	330a      	adds	r3, #10
 8009e28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f956 	bl	800a0dc <USB_GetMode>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d01e      	beq.n	8009e74 <USB_SetCurrentMode+0x84>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2bc7      	cmp	r3, #199	@ 0xc7
 8009e3a:	d9f0      	bls.n	8009e1e <USB_SetCurrentMode+0x2e>
 8009e3c:	e01a      	b.n	8009e74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009e3e:	78fb      	ldrb	r3, [r7, #3]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d115      	bne.n	8009e70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009e50:	200a      	movs	r0, #10
 8009e52:	f7fa f893 	bl	8003f7c <HAL_Delay>
      ms += 10U;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	330a      	adds	r3, #10
 8009e5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f93d 	bl	800a0dc <USB_GetMode>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d005      	beq.n	8009e74 <USB_SetCurrentMode+0x84>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2bc7      	cmp	r3, #199	@ 0xc7
 8009e6c:	d9f0      	bls.n	8009e50 <USB_SetCurrentMode+0x60>
 8009e6e:	e001      	b.n	8009e74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e005      	b.n	8009e80 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2bc8      	cmp	r3, #200	@ 0xc8
 8009e78:	d101      	bne.n	8009e7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e000      	b.n	8009e80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e92:	2300      	movs	r3, #0
 8009e94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ea2:	d901      	bls.n	8009ea8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e01b      	b.n	8009ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	daf2      	bge.n	8009e96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	019b      	lsls	r3, r3, #6
 8009eb8:	f043 0220 	orr.w	r2, r3, #32
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ecc:	d901      	bls.n	8009ed2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e006      	b.n	8009ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	f003 0320 	and.w	r3, r3, #32
 8009eda:	2b20      	cmp	r3, #32
 8009edc:	d0f0      	beq.n	8009ec0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3301      	adds	r3, #1
 8009efc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f04:	d901      	bls.n	8009f0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e018      	b.n	8009f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	daf2      	bge.n	8009ef8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2210      	movs	r2, #16
 8009f1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f28:	d901      	bls.n	8009f2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e006      	b.n	8009f3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	f003 0310 	and.w	r3, r3, #16
 8009f36:	2b10      	cmp	r3, #16
 8009f38:	d0f0      	beq.n	8009f1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b089      	sub	sp, #36	@ 0x24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	4611      	mov	r1, r2
 8009f54:	461a      	mov	r2, r3
 8009f56:	460b      	mov	r3, r1
 8009f58:	71fb      	strb	r3, [r7, #7]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009f66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d123      	bne.n	8009fb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009f6e:	88bb      	ldrh	r3, [r7, #4]
 8009f70:	3303      	adds	r3, #3
 8009f72:	089b      	lsrs	r3, r3, #2
 8009f74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009f76:	2300      	movs	r3, #0
 8009f78:	61bb      	str	r3, [r7, #24]
 8009f7a:	e018      	b.n	8009fae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009f7c:	79fb      	ldrb	r3, [r7, #7]
 8009f7e:	031a      	lsls	r2, r3, #12
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f88:	461a      	mov	r2, r3
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	3301      	adds	r3, #1
 8009f94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	3301      	adds	r3, #1
 8009fac:	61bb      	str	r3, [r7, #24]
 8009fae:	69ba      	ldr	r2, [r7, #24]
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d3e2      	bcc.n	8009f7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3724      	adds	r7, #36	@ 0x24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b08b      	sub	sp, #44	@ 0x2c
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009fda:	88fb      	ldrh	r3, [r7, #6]
 8009fdc:	089b      	lsrs	r3, r3, #2
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009fe2:	88fb      	ldrh	r3, [r7, #6]
 8009fe4:	f003 0303 	and.w	r3, r3, #3
 8009fe8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009fea:	2300      	movs	r3, #0
 8009fec:	623b      	str	r3, [r7, #32]
 8009fee:	e014      	b.n	800a01a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffa:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffe:	3301      	adds	r3, #1
 800a000:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a004:	3301      	adds	r3, #1
 800a006:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00a:	3301      	adds	r3, #1
 800a00c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a010:	3301      	adds	r3, #1
 800a012:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	3301      	adds	r3, #1
 800a018:	623b      	str	r3, [r7, #32]
 800a01a:	6a3a      	ldr	r2, [r7, #32]
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d3e6      	bcc.n	8009ff0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a022:	8bfb      	ldrh	r3, [r7, #30]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d01e      	beq.n	800a066 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a028:	2300      	movs	r3, #0
 800a02a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a032:	461a      	mov	r2, r3
 800a034:	f107 0310 	add.w	r3, r7, #16
 800a038:	6812      	ldr	r2, [r2, #0]
 800a03a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	b2db      	uxtb	r3, r3
 800a042:	00db      	lsls	r3, r3, #3
 800a044:	fa22 f303 	lsr.w	r3, r2, r3
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	701a      	strb	r2, [r3, #0]
      i++;
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	3301      	adds	r3, #1
 800a052:	623b      	str	r3, [r7, #32]
      pDest++;
 800a054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a056:	3301      	adds	r3, #1
 800a058:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a05a:	8bfb      	ldrh	r3, [r7, #30]
 800a05c:	3b01      	subs	r3, #1
 800a05e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a060:	8bfb      	ldrh	r3, [r7, #30]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1ea      	bne.n	800a03c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a068:	4618      	mov	r0, r3
 800a06a:	372c      	adds	r7, #44	@ 0x2c
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	4013      	ands	r3, r2
 800a08a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a08c:	68fb      	ldr	r3, [r7, #12]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b085      	sub	sp, #20
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a0aa:	78fb      	ldrb	r3, [r7, #3]
 800a0ac:	015a      	lsls	r2, r3, #5
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	f003 0301 	and.w	r3, r3, #1
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a100:	2300      	movs	r3, #0
 800a102:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3301      	adds	r3, #1
 800a108:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a110:	d901      	bls.n	800a116 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	e01b      	b.n	800a14e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	daf2      	bge.n	800a104 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a11e:	2300      	movs	r3, #0
 800a120:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	f043 0201 	orr.w	r2, r3, #1
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3301      	adds	r3, #1
 800a132:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a13a:	d901      	bls.n	800a140 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e006      	b.n	800a14e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d0f0      	beq.n	800a12e <USB_CoreReset+0x36>

  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3714      	adds	r7, #20
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
	...

0800a15c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a15c:	b084      	sub	sp, #16
 800a15e:	b580      	push	{r7, lr}
 800a160:	b086      	sub	sp, #24
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a16a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a17c:	461a      	mov	r2, r3
 800a17e:	2300      	movs	r3, #0
 800a180:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a186:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a192:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a19e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d119      	bne.n	800a1e6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a1b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d10a      	bne.n	800a1d0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a1c8:	f043 0304 	orr.w	r3, r3, #4
 800a1cc:	6013      	str	r3, [r2, #0]
 800a1ce:	e014      	b.n	800a1fa <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a1de:	f023 0304 	bic.w	r3, r3, #4
 800a1e2:	6013      	str	r3, [r2, #0]
 800a1e4:	e009      	b.n	800a1fa <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a1f4:	f023 0304 	bic.w	r3, r3, #4
 800a1f8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a1fa:	2110      	movs	r1, #16
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7ff fe43 	bl	8009e88 <USB_FlushTxFifo>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f7ff fe6d 	bl	8009eec <USB_FlushRxFifo>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a21c:	2300      	movs	r3, #0
 800a21e:	613b      	str	r3, [r7, #16]
 800a220:	e015      	b.n	800a24e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a22e:	461a      	mov	r2, r3
 800a230:	f04f 33ff 	mov.w	r3, #4294967295
 800a234:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	015a      	lsls	r2, r3, #5
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	4413      	add	r3, r2
 800a23e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a242:	461a      	mov	r2, r3
 800a244:	2300      	movs	r3, #0
 800a246:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	3301      	adds	r3, #1
 800a24c:	613b      	str	r3, [r7, #16]
 800a24e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a252:	461a      	mov	r2, r3
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	4293      	cmp	r3, r2
 800a258:	d3e3      	bcc.n	800a222 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f04f 32ff 	mov.w	r2, #4294967295
 800a266:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a18      	ldr	r2, [pc, #96]	@ (800a2cc <USB_HostInit+0x170>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d10b      	bne.n	800a288 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a276:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a15      	ldr	r2, [pc, #84]	@ (800a2d0 <USB_HostInit+0x174>)
 800a27c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a14      	ldr	r2, [pc, #80]	@ (800a2d4 <USB_HostInit+0x178>)
 800a282:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800a286:	e009      	b.n	800a29c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2280      	movs	r2, #128	@ 0x80
 800a28c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a11      	ldr	r2, [pc, #68]	@ (800a2d8 <USB_HostInit+0x17c>)
 800a292:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a11      	ldr	r2, [pc, #68]	@ (800a2dc <USB_HostInit+0x180>)
 800a298:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a29c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	f043 0210 	orr.w	r2, r3, #16
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	699a      	ldr	r2, [r3, #24]
 800a2b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a2e0 <USB_HostInit+0x184>)
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3718      	adds	r7, #24
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2c8:	b004      	add	sp, #16
 800a2ca:	4770      	bx	lr
 800a2cc:	40040000 	.word	0x40040000
 800a2d0:	01000200 	.word	0x01000200
 800a2d4:	00e00300 	.word	0x00e00300
 800a2d8:	00600080 	.word	0x00600080
 800a2dc:	004000e0 	.word	0x004000e0
 800a2e0:	a3200008 	.word	0xa3200008

0800a2e4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a302:	f023 0303 	bic.w	r3, r3, #3
 800a306:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	78fb      	ldrb	r3, [r7, #3]
 800a312:	f003 0303 	and.w	r3, r3, #3
 800a316:	68f9      	ldr	r1, [r7, #12]
 800a318:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a31c:	4313      	orrs	r3, r2
 800a31e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a320:	78fb      	ldrb	r3, [r7, #3]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d107      	bne.n	800a336 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a32c:	461a      	mov	r2, r3
 800a32e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a332:	6053      	str	r3, [r2, #4]
 800a334:	e00c      	b.n	800a350 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a336:	78fb      	ldrb	r3, [r7, #3]
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d107      	bne.n	800a34c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a342:	461a      	mov	r2, r3
 800a344:	f241 7370 	movw	r3, #6000	@ 0x1770
 800a348:	6053      	str	r3, [r2, #4]
 800a34a:	e001      	b.n	800a350 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e000      	b.n	800a352 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3714      	adds	r7, #20
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b084      	sub	sp, #16
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a36a:	2300      	movs	r3, #0
 800a36c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a37e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a38c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a38e:	2064      	movs	r0, #100	@ 0x64
 800a390:	f7f9 fdf4 	bl	8003f7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a39c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3a0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a3a2:	200a      	movs	r0, #10
 800a3a4:	f7f9 fdea 	bl	8003f7c <HAL_Delay>

  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b085      	sub	sp, #20
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a3d6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d109      	bne.n	800a3f6 <USB_DriveVbus+0x44>
 800a3e2:	78fb      	ldrb	r3, [r7, #3]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d106      	bne.n	800a3f6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a3f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a3f4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a3fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a400:	d109      	bne.n	800a416 <USB_DriveVbus+0x64>
 800a402:	78fb      	ldrb	r3, [r7, #3]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d106      	bne.n	800a416 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a410:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a414:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3714      	adds	r7, #20
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a430:	2300      	movs	r3, #0
 800a432:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	0c5b      	lsrs	r3, r3, #17
 800a442:	f003 0303 	and.w	r3, r3, #3
}
 800a446:	4618      	mov	r0, r3
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a452:	b480      	push	{r7}
 800a454:	b085      	sub	sp, #20
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	b29b      	uxth	r3, r3
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b088      	sub	sp, #32
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	4608      	mov	r0, r1
 800a47e:	4611      	mov	r1, r2
 800a480:	461a      	mov	r2, r3
 800a482:	4603      	mov	r3, r0
 800a484:	70fb      	strb	r3, [r7, #3]
 800a486:	460b      	mov	r3, r1
 800a488:	70bb      	strb	r3, [r7, #2]
 800a48a:	4613      	mov	r3, r2
 800a48c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a496:	78fb      	ldrb	r3, [r7, #3]
 800a498:	015a      	lsls	r2, r3, #5
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	4413      	add	r3, r2
 800a49e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a4aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d87c      	bhi.n	800a5ac <USB_HC_Init+0x138>
 800a4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b8 <USB_HC_Init+0x44>)
 800a4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b8:	0800a4c9 	.word	0x0800a4c9
 800a4bc:	0800a56f 	.word	0x0800a56f
 800a4c0:	0800a4c9 	.word	0x0800a4c9
 800a4c4:	0800a531 	.word	0x0800a531
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a4c8:	78fb      	ldrb	r3, [r7, #3]
 800a4ca:	015a      	lsls	r2, r3, #5
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	f240 439d 	movw	r3, #1181	@ 0x49d
 800a4da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a4dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	da10      	bge.n	800a506 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a4e4:	78fb      	ldrb	r3, [r7, #3]
 800a4e6:	015a      	lsls	r2, r3, #5
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	78fa      	ldrb	r2, [r7, #3]
 800a4f4:	0151      	lsls	r1, r2, #5
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	440a      	add	r2, r1
 800a4fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a4fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a502:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800a504:	e055      	b.n	800a5b2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a6f      	ldr	r2, [pc, #444]	@ (800a6c8 <USB_HC_Init+0x254>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d151      	bne.n	800a5b2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a50e:	78fb      	ldrb	r3, [r7, #3]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	4413      	add	r3, r2
 800a516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	78fa      	ldrb	r2, [r7, #3]
 800a51e:	0151      	lsls	r1, r2, #5
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	440a      	add	r2, r1
 800a524:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a528:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a52c:	60d3      	str	r3, [r2, #12]
      break;
 800a52e:	e040      	b.n	800a5b2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a530:	78fb      	ldrb	r3, [r7, #3]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	4413      	add	r3, r2
 800a538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a53c:	461a      	mov	r2, r3
 800a53e:	f240 639d 	movw	r3, #1693	@ 0x69d
 800a542:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a544:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	da34      	bge.n	800a5b6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a54c:	78fb      	ldrb	r3, [r7, #3]
 800a54e:	015a      	lsls	r2, r3, #5
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	4413      	add	r3, r2
 800a554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	78fa      	ldrb	r2, [r7, #3]
 800a55c:	0151      	lsls	r1, r2, #5
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	440a      	add	r2, r1
 800a562:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a56a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a56c:	e023      	b.n	800a5b6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a56e:	78fb      	ldrb	r3, [r7, #3]
 800a570:	015a      	lsls	r2, r3, #5
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	4413      	add	r3, r2
 800a576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a57a:	461a      	mov	r2, r3
 800a57c:	f240 2325 	movw	r3, #549	@ 0x225
 800a580:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a582:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a586:	2b00      	cmp	r3, #0
 800a588:	da17      	bge.n	800a5ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a58a:	78fb      	ldrb	r3, [r7, #3]
 800a58c:	015a      	lsls	r2, r3, #5
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	4413      	add	r3, r2
 800a592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	78fa      	ldrb	r2, [r7, #3]
 800a59a:	0151      	lsls	r1, r2, #5
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	440a      	add	r2, r1
 800a5a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5a4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800a5a8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a5aa:	e006      	b.n	800a5ba <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	77fb      	strb	r3, [r7, #31]
      break;
 800a5b0:	e004      	b.n	800a5bc <USB_HC_Init+0x148>
      break;
 800a5b2:	bf00      	nop
 800a5b4:	e002      	b.n	800a5bc <USB_HC_Init+0x148>
      break;
 800a5b6:	bf00      	nop
 800a5b8:	e000      	b.n	800a5bc <USB_HC_Init+0x148>
      break;
 800a5ba:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	015a      	lsls	r2, r3, #5
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a5ce:	78fb      	ldrb	r3, [r7, #3]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	78fa      	ldrb	r2, [r7, #3]
 800a5de:	0151      	lsls	r1, r2, #5
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	440a      	add	r2, r1
 800a5e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5e8:	f043 0302 	orr.w	r3, r3, #2
 800a5ec:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a5f4:	699a      	ldr	r2, [r3, #24]
 800a5f6:	78fb      	ldrb	r3, [r7, #3]
 800a5f8:	f003 030f 	and.w	r3, r3, #15
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a602:	6939      	ldr	r1, [r7, #16]
 800a604:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a608:	4313      	orrs	r3, r2
 800a60a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a618:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	da03      	bge.n	800a628 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a620:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a624:	61bb      	str	r3, [r7, #24]
 800a626:	e001      	b.n	800a62c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800a628:	2300      	movs	r3, #0
 800a62a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f7ff fef9 	bl	800a424 <USB_GetHostSpeed>
 800a632:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a634:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d106      	bne.n	800a64a <USB_HC_Init+0x1d6>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d003      	beq.n	800a64a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a642:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a646:	617b      	str	r3, [r7, #20]
 800a648:	e001      	b.n	800a64e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a64a:	2300      	movs	r3, #0
 800a64c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a64e:	787b      	ldrb	r3, [r7, #1]
 800a650:	059b      	lsls	r3, r3, #22
 800a652:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a656:	78bb      	ldrb	r3, [r7, #2]
 800a658:	02db      	lsls	r3, r3, #11
 800a65a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a65e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a660:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a664:	049b      	lsls	r3, r3, #18
 800a666:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a66a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a66c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a66e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a672:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	431a      	orrs	r2, r3
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a67c:	78fa      	ldrb	r2, [r7, #3]
 800a67e:	0151      	lsls	r1, r2, #5
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	440a      	add	r2, r1
 800a684:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a688:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a68c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a68e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a692:	2b03      	cmp	r3, #3
 800a694:	d003      	beq.n	800a69e <USB_HC_Init+0x22a>
 800a696:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d10f      	bne.n	800a6be <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a69e:	78fb      	ldrb	r3, [r7, #3]
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	78fa      	ldrb	r2, [r7, #3]
 800a6ae:	0151      	lsls	r1, r2, #5
 800a6b0:	693a      	ldr	r2, [r7, #16]
 800a6b2:	440a      	add	r2, r1
 800a6b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a6bc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a6be:	7ffb      	ldrb	r3, [r7, #31]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3720      	adds	r7, #32
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	40040000 	.word	0x40040000

0800a6cc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08c      	sub	sp, #48	@ 0x30
 800a6d0:	af02      	add	r7, sp, #8
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	785b      	ldrb	r3, [r3, #1]
 800a6e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800a6e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6e8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4a5d      	ldr	r2, [pc, #372]	@ (800a864 <USB_HC_StartXfer+0x198>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d12f      	bne.n	800a752 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800a6f2:	79fb      	ldrb	r3, [r7, #7]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d11c      	bne.n	800a732 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	7c9b      	ldrb	r3, [r3, #18]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d003      	beq.n	800a708 <USB_HC_StartXfer+0x3c>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	7c9b      	ldrb	r3, [r3, #18]
 800a704:	2b02      	cmp	r3, #2
 800a706:	d124      	bne.n	800a752 <USB_HC_StartXfer+0x86>
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	799b      	ldrb	r3, [r3, #6]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d120      	bne.n	800a752 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	015a      	lsls	r2, r3, #5
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	4413      	add	r3, r2
 800a718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	69fa      	ldr	r2, [r7, #28]
 800a720:	0151      	lsls	r1, r2, #5
 800a722:	6a3a      	ldr	r2, [r7, #32]
 800a724:	440a      	add	r2, r1
 800a726:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a72a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a72e:	60d3      	str	r3, [r2, #12]
 800a730:	e00f      	b.n	800a752 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	791b      	ldrb	r3, [r3, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10b      	bne.n	800a752 <USB_HC_StartXfer+0x86>
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	795b      	ldrb	r3, [r3, #5]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d107      	bne.n	800a752 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	785b      	ldrb	r3, [r3, #1]
 800a746:	4619      	mov	r1, r3
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f000 fb6b 	bl	800ae24 <USB_DoPing>
        return HAL_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	e232      	b.n	800abb8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	799b      	ldrb	r3, [r3, #6]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d158      	bne.n	800a80c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a75a:	2301      	movs	r3, #1
 800a75c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	78db      	ldrb	r3, [r3, #3]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d007      	beq.n	800a776 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a766:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	8a92      	ldrh	r2, [r2, #20]
 800a76c:	fb03 f202 	mul.w	r2, r3, r2
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	61da      	str	r2, [r3, #28]
 800a774:	e07c      	b.n	800a870 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	7c9b      	ldrb	r3, [r3, #18]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d130      	bne.n	800a7e0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	2bbc      	cmp	r3, #188	@ 0xbc
 800a784:	d918      	bls.n	800a7b8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	8a9b      	ldrh	r3, [r3, #20]
 800a78a:	461a      	mov	r2, r3
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	69da      	ldr	r2, [r3, #28]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d003      	beq.n	800a7a8 <USB_HC_StartXfer+0xdc>
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d103      	bne.n	800a7b0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	60da      	str	r2, [r3, #12]
 800a7ae:	e05f      	b.n	800a870 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	60da      	str	r2, [r3, #12]
 800a7b6:	e05b      	b.n	800a870 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	6a1a      	ldr	r2, [r3, #32]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d007      	beq.n	800a7d8 <USB_HC_StartXfer+0x10c>
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d003      	beq.n	800a7d8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	2204      	movs	r2, #4
 800a7d4:	60da      	str	r2, [r3, #12]
 800a7d6:	e04b      	b.n	800a870 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	2203      	movs	r2, #3
 800a7dc:	60da      	str	r2, [r3, #12]
 800a7de:	e047      	b.n	800a870 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a7e0:	79fb      	ldrb	r3, [r7, #7]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d10d      	bne.n	800a802 <USB_HC_StartXfer+0x136>
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	6a1b      	ldr	r3, [r3, #32]
 800a7ea:	68ba      	ldr	r2, [r7, #8]
 800a7ec:	8a92      	ldrh	r2, [r2, #20]
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d907      	bls.n	800a802 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a7f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	8a92      	ldrh	r2, [r2, #20]
 800a7f8:	fb03 f202 	mul.w	r2, r3, r2
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	61da      	str	r2, [r3, #28]
 800a800:	e036      	b.n	800a870 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	6a1a      	ldr	r2, [r3, #32]
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	61da      	str	r2, [r3, #28]
 800a80a:	e031      	b.n	800a870 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	6a1b      	ldr	r3, [r3, #32]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d018      	beq.n	800a846 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	6a1b      	ldr	r3, [r3, #32]
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	8a92      	ldrh	r2, [r2, #20]
 800a81c:	4413      	add	r3, r2
 800a81e:	3b01      	subs	r3, #1
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	8a92      	ldrh	r2, [r2, #20]
 800a824:	fbb3 f3f2 	udiv	r3, r3, r2
 800a828:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800a82a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a82c:	8b7b      	ldrh	r3, [r7, #26]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d90b      	bls.n	800a84a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a832:	8b7b      	ldrh	r3, [r7, #26]
 800a834:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a836:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a838:	68ba      	ldr	r2, [r7, #8]
 800a83a:	8a92      	ldrh	r2, [r2, #20]
 800a83c:	fb03 f202 	mul.w	r2, r3, r2
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	61da      	str	r2, [r3, #28]
 800a844:	e001      	b.n	800a84a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a846:	2301      	movs	r3, #1
 800a848:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	78db      	ldrb	r3, [r3, #3]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00a      	beq.n	800a868 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a852:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	8a92      	ldrh	r2, [r2, #20]
 800a858:	fb03 f202 	mul.w	r2, r3, r2
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	61da      	str	r2, [r3, #28]
 800a860:	e006      	b.n	800a870 <USB_HC_StartXfer+0x1a4>
 800a862:	bf00      	nop
 800a864:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	6a1a      	ldr	r2, [r3, #32]
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	69db      	ldr	r3, [r3, #28]
 800a874:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a878:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a87a:	04d9      	lsls	r1, r3, #19
 800a87c:	4ba3      	ldr	r3, [pc, #652]	@ (800ab0c <USB_HC_StartXfer+0x440>)
 800a87e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a880:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	7d9b      	ldrb	r3, [r3, #22]
 800a886:	075b      	lsls	r3, r3, #29
 800a888:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a88c:	69f9      	ldr	r1, [r7, #28]
 800a88e:	0148      	lsls	r0, r1, #5
 800a890:	6a39      	ldr	r1, [r7, #32]
 800a892:	4401      	add	r1, r0
 800a894:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a898:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a89a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a89c:	79fb      	ldrb	r3, [r7, #7]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d009      	beq.n	800a8b6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	6999      	ldr	r1, [r3, #24]
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	015a      	lsls	r2, r3, #5
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a8b2:	460a      	mov	r2, r1
 800a8b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f003 0301 	and.w	r3, r3, #1
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	bf0c      	ite	eq
 800a8c6:	2301      	moveq	r3, #1
 800a8c8:	2300      	movne	r3, #0
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	015a      	lsls	r2, r3, #5
 800a8d2:	6a3b      	ldr	r3, [r7, #32]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	69fa      	ldr	r2, [r7, #28]
 800a8de:	0151      	lsls	r1, r2, #5
 800a8e0:	6a3a      	ldr	r2, [r7, #32]
 800a8e2:	440a      	add	r2, r1
 800a8e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a8e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a8ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	015a      	lsls	r2, r3, #5
 800a8f2:	6a3b      	ldr	r3, [r7, #32]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	7e7b      	ldrb	r3, [r7, #25]
 800a8fe:	075b      	lsls	r3, r3, #29
 800a900:	69f9      	ldr	r1, [r7, #28]
 800a902:	0148      	lsls	r0, r1, #5
 800a904:	6a39      	ldr	r1, [r7, #32]
 800a906:	4401      	add	r1, r0
 800a908:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800a90c:	4313      	orrs	r3, r2
 800a90e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	799b      	ldrb	r3, [r3, #6]
 800a914:	2b01      	cmp	r3, #1
 800a916:	f040 80c3 	bne.w	800aaa0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	7c5b      	ldrb	r3, [r3, #17]
 800a91e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a924:	4313      	orrs	r3, r2
 800a926:	69fa      	ldr	r2, [r7, #28]
 800a928:	0151      	lsls	r1, r2, #5
 800a92a:	6a3a      	ldr	r2, [r7, #32]
 800a92c:	440a      	add	r2, r1
 800a92e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a932:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a936:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	6a3b      	ldr	r3, [r7, #32]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	69fa      	ldr	r2, [r7, #28]
 800a948:	0151      	lsls	r1, r2, #5
 800a94a:	6a3a      	ldr	r2, [r7, #32]
 800a94c:	440a      	add	r2, r1
 800a94e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a952:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a956:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	79db      	ldrb	r3, [r3, #7]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d123      	bne.n	800a9a8 <USB_HC_StartXfer+0x2dc>
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	78db      	ldrb	r3, [r3, #3]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d11f      	bne.n	800a9a8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	6a3b      	ldr	r3, [r7, #32]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	69fa      	ldr	r2, [r7, #28]
 800a978:	0151      	lsls	r1, r2, #5
 800a97a:	6a3a      	ldr	r2, [r7, #32]
 800a97c:	440a      	add	r2, r1
 800a97e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a986:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	015a      	lsls	r2, r3, #5
 800a98c:	6a3b      	ldr	r3, [r7, #32]
 800a98e:	4413      	add	r3, r2
 800a990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	69fa      	ldr	r2, [r7, #28]
 800a998:	0151      	lsls	r1, r2, #5
 800a99a:	6a3a      	ldr	r2, [r7, #32]
 800a99c:	440a      	add	r2, r1
 800a99e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a9a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9a6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	7c9b      	ldrb	r3, [r3, #18]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d003      	beq.n	800a9b8 <USB_HC_StartXfer+0x2ec>
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	7c9b      	ldrb	r3, [r3, #18]
 800a9b4:	2b03      	cmp	r3, #3
 800a9b6:	d117      	bne.n	800a9e8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d113      	bne.n	800a9e8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	78db      	ldrb	r3, [r3, #3]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d10f      	bne.n	800a9e8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	015a      	lsls	r2, r3, #5
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	69fa      	ldr	r2, [r7, #28]
 800a9d8:	0151      	lsls	r1, r2, #5
 800a9da:	6a3a      	ldr	r2, [r7, #32]
 800a9dc:	440a      	add	r2, r1
 800a9de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a9e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9e6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	7c9b      	ldrb	r3, [r3, #18]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d162      	bne.n	800aab6 <USB_HC_StartXfer+0x3ea>
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	78db      	ldrb	r3, [r3, #3]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d15e      	bne.n	800aab6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	d858      	bhi.n	800aab4 <USB_HC_StartXfer+0x3e8>
 800aa02:	a201      	add	r2, pc, #4	@ (adr r2, 800aa08 <USB_HC_StartXfer+0x33c>)
 800aa04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa08:	0800aa19 	.word	0x0800aa19
 800aa0c:	0800aa3b 	.word	0x0800aa3b
 800aa10:	0800aa5d 	.word	0x0800aa5d
 800aa14:	0800aa7f 	.word	0x0800aa7f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	69fa      	ldr	r2, [r7, #28]
 800aa28:	0151      	lsls	r1, r2, #5
 800aa2a:	6a3a      	ldr	r2, [r7, #32]
 800aa2c:	440a      	add	r2, r1
 800aa2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa36:	6053      	str	r3, [r2, #4]
          break;
 800aa38:	e03d      	b.n	800aab6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	6a3b      	ldr	r3, [r7, #32]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	69fa      	ldr	r2, [r7, #28]
 800aa4a:	0151      	lsls	r1, r2, #5
 800aa4c:	6a3a      	ldr	r2, [r7, #32]
 800aa4e:	440a      	add	r2, r1
 800aa50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa54:	f043 030e 	orr.w	r3, r3, #14
 800aa58:	6053      	str	r3, [r2, #4]
          break;
 800aa5a:	e02c      	b.n	800aab6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	6a3b      	ldr	r3, [r7, #32]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	69fa      	ldr	r2, [r7, #28]
 800aa6c:	0151      	lsls	r1, r2, #5
 800aa6e:	6a3a      	ldr	r2, [r7, #32]
 800aa70:	440a      	add	r2, r1
 800aa72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aa7a:	6053      	str	r3, [r2, #4]
          break;
 800aa7c:	e01b      	b.n	800aab6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	015a      	lsls	r2, r3, #5
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	4413      	add	r3, r2
 800aa86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	69fa      	ldr	r2, [r7, #28]
 800aa8e:	0151      	lsls	r1, r2, #5
 800aa90:	6a3a      	ldr	r2, [r7, #32]
 800aa92:	440a      	add	r2, r1
 800aa94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aa9c:	6053      	str	r3, [r2, #4]
          break;
 800aa9e:	e00a      	b.n	800aab6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	015a      	lsls	r2, r3, #5
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aaac:	461a      	mov	r2, r3
 800aaae:	2300      	movs	r3, #0
 800aab0:	6053      	str	r3, [r2, #4]
 800aab2:	e000      	b.n	800aab6 <USB_HC_StartXfer+0x3ea>
          break;
 800aab4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	015a      	lsls	r2, r3, #5
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	4413      	add	r3, r2
 800aabe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aacc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	78db      	ldrb	r3, [r3, #3]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d004      	beq.n	800aae0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aadc:	613b      	str	r3, [r7, #16]
 800aade:	e003      	b.n	800aae8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aae6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aaee:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	015a      	lsls	r2, r3, #5
 800aaf4:	6a3b      	ldr	r3, [r7, #32]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aafc:	461a      	mov	r2, r3
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d003      	beq.n	800ab10 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	e055      	b.n	800abb8 <USB_HC_StartXfer+0x4ec>
 800ab0c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	78db      	ldrb	r3, [r3, #3]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d14e      	bne.n	800abb6 <USB_HC_StartXfer+0x4ea>
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	6a1b      	ldr	r3, [r3, #32]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d04a      	beq.n	800abb6 <USB_HC_StartXfer+0x4ea>
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	79db      	ldrb	r3, [r3, #7]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d146      	bne.n	800abb6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	7c9b      	ldrb	r3, [r3, #18]
 800ab2c:	2b03      	cmp	r3, #3
 800ab2e:	d831      	bhi.n	800ab94 <USB_HC_StartXfer+0x4c8>
 800ab30:	a201      	add	r2, pc, #4	@ (adr r2, 800ab38 <USB_HC_StartXfer+0x46c>)
 800ab32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab36:	bf00      	nop
 800ab38:	0800ab49 	.word	0x0800ab49
 800ab3c:	0800ab6d 	.word	0x0800ab6d
 800ab40:	0800ab49 	.word	0x0800ab49
 800ab44:	0800ab6d 	.word	0x0800ab6d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	3303      	adds	r3, #3
 800ab4e:	089b      	lsrs	r3, r3, #2
 800ab50:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ab52:	8afa      	ldrh	r2, [r7, #22]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d91c      	bls.n	800ab98 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	f043 0220 	orr.w	r2, r3, #32
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	619a      	str	r2, [r3, #24]
        }
        break;
 800ab6a:	e015      	b.n	800ab98 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	6a1b      	ldr	r3, [r3, #32]
 800ab70:	3303      	adds	r3, #3
 800ab72:	089b      	lsrs	r3, r3, #2
 800ab74:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ab76:	8afa      	ldrh	r2, [r7, #22]
 800ab78:	6a3b      	ldr	r3, [r7, #32]
 800ab7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d90a      	bls.n	800ab9c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	619a      	str	r2, [r3, #24]
        }
        break;
 800ab92:	e003      	b.n	800ab9c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800ab94:	bf00      	nop
 800ab96:	e002      	b.n	800ab9e <USB_HC_StartXfer+0x4d2>
        break;
 800ab98:	bf00      	nop
 800ab9a:	e000      	b.n	800ab9e <USB_HC_StartXfer+0x4d2>
        break;
 800ab9c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	6999      	ldr	r1, [r3, #24]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	785a      	ldrb	r2, [r3, #1]
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	6a1b      	ldr	r3, [r3, #32]
 800abaa:	b29b      	uxth	r3, r3
 800abac:	2000      	movs	r0, #0
 800abae:	9000      	str	r0, [sp, #0]
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f7ff f9c9 	bl	8009f48 <USB_WritePacket>
  }

  return HAL_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3728      	adds	r7, #40	@ 0x28
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abd2:	695b      	ldr	r3, [r3, #20]
 800abd4:	b29b      	uxth	r3, r3
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800abe2:	b480      	push	{r7}
 800abe4:	b089      	sub	sp, #36	@ 0x24
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	460b      	mov	r3, r1
 800abec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800abf2:	78fb      	ldrb	r3, [r7, #3]
 800abf4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	015a      	lsls	r2, r3, #5
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	4413      	add	r3, r2
 800ac02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	0c9b      	lsrs	r3, r3, #18
 800ac0a:	f003 0303 	and.w	r3, r3, #3
 800ac0e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	015a      	lsls	r2, r3, #5
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	4413      	add	r3, r2
 800ac18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	0fdb      	lsrs	r3, r3, #31
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	015a      	lsls	r2, r3, #5
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	0fdb      	lsrs	r3, r3, #31
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f003 0320 	and.w	r3, r3, #32
 800ac44:	2b20      	cmp	r3, #32
 800ac46:	d10d      	bne.n	800ac64 <USB_HC_Halt+0x82>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10a      	bne.n	800ac64 <USB_HC_Halt+0x82>
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d005      	beq.n	800ac60 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d002      	beq.n	800ac60 <USB_HC_Halt+0x7e>
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d101      	bne.n	800ac64 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ac60:	2300      	movs	r3, #0
 800ac62:	e0d8      	b.n	800ae16 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d002      	beq.n	800ac70 <USB_HC_Halt+0x8e>
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d173      	bne.n	800ad58 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	015a      	lsls	r2, r3, #5
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	4413      	add	r3, r2
 800ac78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	69ba      	ldr	r2, [r7, #24]
 800ac80:	0151      	lsls	r1, r2, #5
 800ac82:	69fa      	ldr	r2, [r7, #28]
 800ac84:	440a      	add	r2, r1
 800ac86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ac8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac8e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	f003 0320 	and.w	r3, r3, #32
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d14a      	bne.n	800ad32 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d133      	bne.n	800ad10 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	015a      	lsls	r2, r3, #5
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	4413      	add	r3, r2
 800acb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	69ba      	ldr	r2, [r7, #24]
 800acb8:	0151      	lsls	r1, r2, #5
 800acba:	69fa      	ldr	r2, [r7, #28]
 800acbc:	440a      	add	r2, r1
 800acbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800acc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800acc6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	015a      	lsls	r2, r3, #5
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	4413      	add	r3, r2
 800acd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	69ba      	ldr	r2, [r7, #24]
 800acd8:	0151      	lsls	r1, r2, #5
 800acda:	69fa      	ldr	r2, [r7, #28]
 800acdc:	440a      	add	r2, r1
 800acde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ace2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ace6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	3301      	adds	r3, #1
 800acec:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800acf4:	d82e      	bhi.n	800ad54 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	015a      	lsls	r2, r3, #5
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	4413      	add	r3, r2
 800acfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad0c:	d0ec      	beq.n	800ace8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad0e:	e081      	b.n	800ae14 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	015a      	lsls	r2, r3, #5
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	4413      	add	r3, r2
 800ad18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	69ba      	ldr	r2, [r7, #24]
 800ad20:	0151      	lsls	r1, r2, #5
 800ad22:	69fa      	ldr	r2, [r7, #28]
 800ad24:	440a      	add	r2, r1
 800ad26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ad2e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad30:	e070      	b.n	800ae14 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	0151      	lsls	r1, r2, #5
 800ad44:	69fa      	ldr	r2, [r7, #28]
 800ad46:	440a      	add	r2, r1
 800ad48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ad50:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad52:	e05f      	b.n	800ae14 <USB_HC_Halt+0x232>
            break;
 800ad54:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad56:	e05d      	b.n	800ae14 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	69ba      	ldr	r2, [r7, #24]
 800ad68:	0151      	lsls	r1, r2, #5
 800ad6a:	69fa      	ldr	r2, [r7, #28]
 800ad6c:	440a      	add	r2, r1
 800ad6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad76:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d133      	bne.n	800adf0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	69ba      	ldr	r2, [r7, #24]
 800ad98:	0151      	lsls	r1, r2, #5
 800ad9a:	69fa      	ldr	r2, [r7, #28]
 800ad9c:	440a      	add	r2, r1
 800ad9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ada2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ada6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	015a      	lsls	r2, r3, #5
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	4413      	add	r3, r2
 800adb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	69ba      	ldr	r2, [r7, #24]
 800adb8:	0151      	lsls	r1, r2, #5
 800adba:	69fa      	ldr	r2, [r7, #28]
 800adbc:	440a      	add	r2, r1
 800adbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800adc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800adc6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	3301      	adds	r3, #1
 800adcc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800add4:	d81d      	bhi.n	800ae12 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	015a      	lsls	r2, r3, #5
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	4413      	add	r3, r2
 800adde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ade8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adec:	d0ec      	beq.n	800adc8 <USB_HC_Halt+0x1e6>
 800adee:	e011      	b.n	800ae14 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	015a      	lsls	r2, r3, #5
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	0151      	lsls	r1, r2, #5
 800ae02:	69fa      	ldr	r2, [r7, #28]
 800ae04:	440a      	add	r2, r1
 800ae06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	e000      	b.n	800ae14 <USB_HC_Halt+0x232>
          break;
 800ae12:	bf00      	nop
    }
  }

  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3724      	adds	r7, #36	@ 0x24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
	...

0800ae24 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b087      	sub	sp, #28
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ae34:	78fb      	ldrb	r3, [r7, #3]
 800ae36:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	04da      	lsls	r2, r3, #19
 800ae40:	4b15      	ldr	r3, [pc, #84]	@ (800ae98 <USB_DoPing+0x74>)
 800ae42:	4013      	ands	r3, r2
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	0151      	lsls	r1, r2, #5
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	440a      	add	r2, r1
 800ae4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae54:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	015a      	lsls	r2, r3, #5
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ae6c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae74:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	015a      	lsls	r2, r3, #5
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae82:	461a      	mov	r2, r3
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	371c      	adds	r7, #28
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	1ff80000 	.word	0x1ff80000

0800ae9c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800aeac:	2300      	movs	r3, #0
 800aeae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7fe ff8c 	bl	8009dce <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aeb6:	2110      	movs	r1, #16
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7fe ffe5 	bl	8009e88 <USB_FlushTxFifo>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d001      	beq.n	800aec8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7ff f80f 	bl	8009eec <USB_FlushRxFifo>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800aed8:	2300      	movs	r3, #0
 800aeda:	61bb      	str	r3, [r7, #24]
 800aedc:	e01f      	b.n	800af1e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	015a      	lsls	r2, r3, #5
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aef4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aefc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800af04:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	015a      	lsls	r2, r3, #5
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	4413      	add	r3, r2
 800af0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af12:	461a      	mov	r2, r3
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	3301      	adds	r3, #1
 800af1c:	61bb      	str	r3, [r7, #24]
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	2b0f      	cmp	r3, #15
 800af22:	d9dc      	bls.n	800aede <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800af24:	2300      	movs	r3, #0
 800af26:	61bb      	str	r3, [r7, #24]
 800af28:	e034      	b.n	800af94 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	015a      	lsls	r2, r3, #5
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	4413      	add	r3, r2
 800af32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800af40:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800af50:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	015a      	lsls	r2, r3, #5
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	4413      	add	r3, r2
 800af5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af5e:	461a      	mov	r2, r3
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	3301      	adds	r3, #1
 800af68:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af70:	d80c      	bhi.n	800af8c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	015a      	lsls	r2, r3, #5
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	4413      	add	r3, r2
 800af7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af88:	d0ec      	beq.n	800af64 <USB_StopHost+0xc8>
 800af8a:	e000      	b.n	800af8e <USB_StopHost+0xf2>
        break;
 800af8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	3301      	adds	r3, #1
 800af92:	61bb      	str	r3, [r7, #24]
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	2b0f      	cmp	r3, #15
 800af98:	d9c7      	bls.n	800af2a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800afa0:	461a      	mov	r2, r3
 800afa2:	f04f 33ff 	mov.w	r3, #4294967295
 800afa6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f04f 32ff 	mov.w	r2, #4294967295
 800afae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f7fe fefb 	bl	8009dac <USB_EnableGlobalInt>

  return ret;
 800afb6:	7ffb      	ldrb	r3, [r7, #31]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3720      	adds	r7, #32
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800afc0:	b590      	push	{r4, r7, lr}
 800afc2:	b08b      	sub	sp, #44	@ 0x2c
 800afc4:	af04      	add	r7, sp, #16
 800afc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 800afc8:	2300      	movs	r3, #0
 800afca:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800afd2:	7919      	ldrb	r1, [r3, #4]
 800afd4:	23ff      	movs	r3, #255	@ 0xff
 800afd6:	2201      	movs	r2, #1
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f001 f873 	bl	800c0c4 <USBH_FindInterface>
 800afde:	4603      	mov	r3, r0
 800afe0:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800afe2:	7dbb      	ldrb	r3, [r7, #22]
 800afe4:	2bff      	cmp	r3, #255	@ 0xff
 800afe6:	d002      	beq.n	800afee <USBH_HID_InterfaceInit+0x2e>
 800afe8:	7dbb      	ldrb	r3, [r7, #22]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d90f      	bls.n	800b00e <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800afee:	48a9      	ldr	r0, [pc, #676]	@ (800b294 <USBH_HID_InterfaceInit+0x2d4>)
 800aff0:	f003 fa3a 	bl	800e468 <iprintf>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4619      	mov	r1, r3
 800affe:	48a6      	ldr	r0, [pc, #664]	@ (800b298 <USBH_HID_InterfaceInit+0x2d8>)
 800b000:	f003 fa32 	bl	800e468 <iprintf>
 800b004:	200a      	movs	r0, #10
 800b006:	f003 fa41 	bl	800e48c <putchar>
    return USBH_FAIL;
 800b00a:	2302      	movs	r3, #2
 800b00c:	e13d      	b.n	800b28a <USBH_HID_InterfaceInit+0x2ca>
  }

  status = USBH_SelectInterface(phost, interface);
 800b00e:	7dbb      	ldrb	r3, [r7, #22]
 800b010:	4619      	mov	r1, r3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 ffee 	bl	800bff4 <USBH_SelectInterface>
 800b018:	4603      	mov	r3, r0
 800b01a:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800b01c:	7d7b      	ldrb	r3, [r7, #21]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 800b022:	2302      	movs	r3, #2
 800b024:	e131      	b.n	800b28a <USBH_HID_InterfaceInit+0x2ca>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800b02c:	2034      	movs	r0, #52	@ 0x34
 800b02e:	f003 f89b 	bl	800e168 <malloc>
 800b032:	4603      	mov	r3, r0
 800b034:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b03c:	69db      	ldr	r3, [r3, #28]
 800b03e:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d10a      	bne.n	800b05c <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 800b046:	4893      	ldr	r0, [pc, #588]	@ (800b294 <USBH_HID_InterfaceInit+0x2d4>)
 800b048:	f003 fa0e 	bl	800e468 <iprintf>
 800b04c:	4893      	ldr	r0, [pc, #588]	@ (800b29c <USBH_HID_InterfaceInit+0x2dc>)
 800b04e:	f003 fa0b 	bl	800e468 <iprintf>
 800b052:	200a      	movs	r0, #10
 800b054:	f003 fa1a 	bl	800e48c <putchar>
    return USBH_FAIL;
 800b058:	2302      	movs	r3, #2
 800b05a:	e116      	b.n	800b28a <USBH_HID_InterfaceInit+0x2ca>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800b05c:	2234      	movs	r2, #52	@ 0x34
 800b05e:	2100      	movs	r1, #0
 800b060:	6938      	ldr	r0, [r7, #16]
 800b062:	f003 fa9f 	bl	800e5a4 <memset>

  HID_Handle->state = USBH_HID_ERROR;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	2207      	movs	r2, #7
 800b06a:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800b06c:	7dbb      	ldrb	r3, [r7, #22]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	211a      	movs	r1, #26
 800b072:	fb01 f303 	mul.w	r3, r1, r3
 800b076:	4413      	add	r3, r2
 800b078:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d109      	bne.n	800b096 <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 800b082:	4887      	ldr	r0, [pc, #540]	@ (800b2a0 <USBH_HID_InterfaceInit+0x2e0>)
 800b084:	f003 f9f0 	bl	800e468 <iprintf>
 800b088:	200a      	movs	r0, #10
 800b08a:	f003 f9ff 	bl	800e48c <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	4a84      	ldr	r2, [pc, #528]	@ (800b2a4 <USBH_HID_InterfaceInit+0x2e4>)
 800b092:	631a      	str	r2, [r3, #48]	@ 0x30
 800b094:	e01c      	b.n	800b0d0 <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800b096:	7dbb      	ldrb	r3, [r7, #22]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	211a      	movs	r1, #26
 800b09c:	fb01 f303 	mul.w	r3, r1, r3
 800b0a0:	4413      	add	r3, r2
 800b0a2:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d109      	bne.n	800b0c0 <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 800b0ac:	487e      	ldr	r0, [pc, #504]	@ (800b2a8 <USBH_HID_InterfaceInit+0x2e8>)
 800b0ae:	f003 f9db 	bl	800e468 <iprintf>
 800b0b2:	200a      	movs	r0, #10
 800b0b4:	f003 f9ea 	bl	800e48c <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	4a7c      	ldr	r2, [pc, #496]	@ (800b2ac <USBH_HID_InterfaceInit+0x2ec>)
 800b0bc:	631a      	str	r2, [r3, #48]	@ 0x30
 800b0be:	e007      	b.n	800b0d0 <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 800b0c0:	487b      	ldr	r0, [pc, #492]	@ (800b2b0 <USBH_HID_InterfaceInit+0x2f0>)
 800b0c2:	f003 f9d1 	bl	800e468 <iprintf>
 800b0c6:	200a      	movs	r0, #10
 800b0c8:	f003 f9e0 	bl	800e48c <putchar>
    return USBH_FAIL;
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	e0dc      	b.n	800b28a <USBH_HID_InterfaceInit+0x2ca>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b0dc:	7dbb      	ldrb	r3, [r7, #22]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	211a      	movs	r1, #26
 800b0e2:	fb01 f303 	mul.w	r3, r1, r3
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b0ec:	781a      	ldrb	r2, [r3, #0]
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b0f2:	7dbb      	ldrb	r3, [r7, #22]
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	211a      	movs	r1, #26
 800b0f8:	fb01 f303 	mul.w	r3, r1, r3
 800b0fc:	4413      	add	r3, r2
 800b0fe:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b102:	881a      	ldrh	r2, [r3, #0]
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800b108:	7dbb      	ldrb	r3, [r7, #22]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	211a      	movs	r1, #26
 800b10e:	fb01 f303 	mul.w	r3, r1, r3
 800b112:	4413      	add	r3, r2
 800b114:	f203 3352 	addw	r3, r3, #850	@ 0x352
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	461a      	mov	r2, r3
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	8b9b      	ldrh	r3, [r3, #28]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d102      	bne.n	800b12e <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	2201      	movs	r2, #1
 800b12c:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800b12e:	7dbb      	ldrb	r3, [r7, #22]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	211a      	movs	r1, #26
 800b134:	fb01 f303 	mul.w	r3, r1, r3
 800b138:	4413      	add	r3, r2
 800b13a:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b02      	cmp	r3, #2
 800b142:	bf28      	it	cs
 800b144:	2302      	movcs	r3, #2
 800b146:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800b148:	2300      	movs	r3, #0
 800b14a:	75fb      	strb	r3, [r7, #23]
 800b14c:	e097      	b.n	800b27e <USBH_HID_InterfaceInit+0x2be>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800b14e:	7dbb      	ldrb	r3, [r7, #22]
 800b150:	7df9      	ldrb	r1, [r7, #23]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	3101      	adds	r1, #1
 800b156:	00c9      	lsls	r1, r1, #3
 800b158:	201a      	movs	r0, #26
 800b15a:	fb00 f303 	mul.w	r3, r0, r3
 800b15e:	440b      	add	r3, r1
 800b160:	4413      	add	r3, r2
 800b162:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	b25b      	sxtb	r3, r3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	da42      	bge.n	800b1f4 <USBH_HID_InterfaceInit+0x234>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800b16e:	7dbb      	ldrb	r3, [r7, #22]
 800b170:	7df9      	ldrb	r1, [r7, #23]
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	3101      	adds	r1, #1
 800b176:	00c9      	lsls	r1, r1, #3
 800b178:	201a      	movs	r0, #26
 800b17a:	fb00 f303 	mul.w	r3, r0, r3
 800b17e:	440b      	add	r3, r1
 800b180:	4413      	add	r3, r2
 800b182:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800b186:	781a      	ldrb	r2, [r3, #0]
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	791b      	ldrb	r3, [r3, #4]
 800b190:	4619      	mov	r1, r3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f002 fc89 	bl	800daaa <USBH_AllocPipe>
 800b198:	4603      	mov	r3, r0
 800b19a:	461a      	mov	r2, r3
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800b1a0:	7dbb      	ldrb	r3, [r7, #22]
 800b1a2:	7df9      	ldrb	r1, [r7, #23]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	3101      	adds	r1, #1
 800b1a8:	00c9      	lsls	r1, r1, #3
 800b1aa:	201a      	movs	r0, #26
 800b1ac:	fb00 f303 	mul.w	r3, r0, r3
 800b1b0:	440b      	add	r3, r1
 800b1b2:	4413      	add	r3, r2
 800b1b4:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800b1b8:	881b      	ldrh	r3, [r3, #0]
 800b1ba:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	7859      	ldrb	r1, [r3, #1]
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	7918      	ldrb	r0, [r3, #4]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b1d0:	89ba      	ldrh	r2, [r7, #12]
 800b1d2:	9202      	str	r2, [sp, #8]
 800b1d4:	2203      	movs	r2, #3
 800b1d6:	9201      	str	r2, [sp, #4]
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	4623      	mov	r3, r4
 800b1dc:	4602      	mov	r2, r0
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f002 fc34 	bl	800da4c <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	785b      	ldrb	r3, [r3, #1]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f002 ff35 	bl	800e05c <USBH_LL_SetToggle>
 800b1f2:	e041      	b.n	800b278 <USBH_HID_InterfaceInit+0x2b8>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800b1f4:	7dbb      	ldrb	r3, [r7, #22]
 800b1f6:	7df9      	ldrb	r1, [r7, #23]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	3101      	adds	r1, #1
 800b1fc:	00c9      	lsls	r1, r1, #3
 800b1fe:	201a      	movs	r0, #26
 800b200:	fb00 f303 	mul.w	r3, r0, r3
 800b204:	440b      	add	r3, r1
 800b206:	4413      	add	r3, r2
 800b208:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800b20c:	781a      	ldrb	r2, [r3, #0]
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	78db      	ldrb	r3, [r3, #3]
 800b216:	4619      	mov	r1, r3
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f002 fc46 	bl	800daaa <USBH_AllocPipe>
 800b21e:	4603      	mov	r3, r0
 800b220:	461a      	mov	r2, r3
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800b226:	7dbb      	ldrb	r3, [r7, #22]
 800b228:	7df9      	ldrb	r1, [r7, #23]
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	3101      	adds	r1, #1
 800b22e:	00c9      	lsls	r1, r1, #3
 800b230:	201a      	movs	r0, #26
 800b232:	fb00 f303 	mul.w	r3, r0, r3
 800b236:	440b      	add	r3, r1
 800b238:	4413      	add	r3, r2
 800b23a:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	7819      	ldrb	r1, [r3, #0]
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	78d8      	ldrb	r0, [r3, #3]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b256:	89ba      	ldrh	r2, [r7, #12]
 800b258:	9202      	str	r2, [sp, #8]
 800b25a:	2203      	movs	r2, #3
 800b25c:	9201      	str	r2, [sp, #4]
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	4623      	mov	r3, r4
 800b262:	4602      	mov	r2, r0
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f002 fbf1 	bl	800da4c <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	2200      	movs	r2, #0
 800b270:	4619      	mov	r1, r3
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f002 fef2 	bl	800e05c <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800b278:	7dfb      	ldrb	r3, [r7, #23]
 800b27a:	3301      	adds	r3, #1
 800b27c:	75fb      	strb	r3, [r7, #23]
 800b27e:	7dfa      	ldrb	r2, [r7, #23]
 800b280:	7bfb      	ldrb	r3, [r7, #15]
 800b282:	429a      	cmp	r2, r3
 800b284:	f4ff af63 	bcc.w	800b14e <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	371c      	adds	r7, #28
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd90      	pop	{r4, r7, pc}
 800b292:	bf00      	nop
 800b294:	0800f5b0 	.word	0x0800f5b0
 800b298:	0800f5bc 	.word	0x0800f5bc
 800b29c:	0800f5e4 	.word	0x0800f5e4
 800b2a0:	0800f60c 	.word	0x0800f60c
 800b2a4:	0800b9e5 	.word	0x0800b9e5
 800b2a8:	0800f624 	.word	0x0800f624
 800b2ac:	0800bc35 	.word	0x0800bc35
 800b2b0:	0800f638 	.word	0x0800f638

0800b2b4 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b2c2:	69db      	ldr	r3, [r3, #28]
 800b2c4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	785b      	ldrb	r3, [r3, #1]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d00e      	beq.n	800b2ec <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	785b      	ldrb	r3, [r3, #1]
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f002 fbd8 	bl	800da8a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	785b      	ldrb	r3, [r3, #1]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f002 fc03 	bl	800daec <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00e      	beq.n	800b312 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f002 fbc5 	bl	800da8a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	4619      	mov	r1, r3
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f002 fbf0 	bl	800daec <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b318:	69db      	ldr	r3, [r3, #28]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00b      	beq.n	800b336 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b324:	69db      	ldr	r3, [r3, #28]
 800b326:	4618      	mov	r0, r3
 800b328:	f002 ff26 	bl	800e178 <free>
    phost->pActiveClass->pData = 0U;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b332:	2200      	movs	r2, #0
 800b334:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800b348:	2301      	movs	r3, #1
 800b34a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800b34c:	2301      	movs	r3, #1
 800b34e:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	795b      	ldrb	r3, [r3, #5]
 800b35e:	2b05      	cmp	r3, #5
 800b360:	d872      	bhi.n	800b448 <USBH_HID_ClassRequest+0x108>
 800b362:	a201      	add	r2, pc, #4	@ (adr r2, 800b368 <USBH_HID_ClassRequest+0x28>)
 800b364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b368:	0800b381 	.word	0x0800b381
 800b36c:	0800b449 	.word	0x0800b449
 800b370:	0800b39b 	.word	0x0800b39b
 800b374:	0800b381 	.word	0x0800b381
 800b378:	0800b3d7 	.word	0x0800b3d7
 800b37c:	0800b401 	.word	0x0800b401
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	331c      	adds	r3, #28
 800b38a:	4619      	mov	r1, r3
 800b38c:	4610      	mov	r0, r2
 800b38e:	f000 fa15 	bl	800b7bc <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2202      	movs	r2, #2
 800b396:	715a      	strb	r2, [r3, #5]

      break;
 800b398:	e05d      	b.n	800b456 <USBH_HID_ClassRequest+0x116>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 f965 	bl	800b670 <USBH_HID_GetHIDReportDescriptor>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800b3aa:	7bbb      	ldrb	r3, [r7, #14]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d103      	bne.n	800b3b8 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2204      	movs	r2, #4
 800b3b4:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800b3b6:	e049      	b.n	800b44c <USBH_HID_ClassRequest+0x10c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800b3b8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ba:	2b03      	cmp	r3, #3
 800b3bc:	d146      	bne.n	800b44c <USBH_HID_ClassRequest+0x10c>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 800b3be:	4828      	ldr	r0, [pc, #160]	@ (800b460 <USBH_HID_ClassRequest+0x120>)
 800b3c0:	f003 f852 	bl	800e468 <iprintf>
 800b3c4:	4827      	ldr	r0, [pc, #156]	@ (800b464 <USBH_HID_ClassRequest+0x124>)
 800b3c6:	f003 f84f 	bl	800e468 <iprintf>
 800b3ca:	200a      	movs	r0, #10
 800b3cc:	f003 f85e 	bl	800e48c <putchar>
        status = USBH_FAIL;
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3d4:	e03a      	b.n	800b44c <USBH_HID_ClassRequest+0x10c>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	2100      	movs	r1, #0
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 f974 	bl	800b6c8 <USBH_HID_SetIdle>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800b3e4:	7bbb      	ldrb	r3, [r7, #14]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d103      	bne.n	800b3f2 <USBH_HID_ClassRequest+0xb2>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	2205      	movs	r2, #5
 800b3ee:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800b3f0:	e02e      	b.n	800b450 <USBH_HID_ClassRequest+0x110>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800b3f2:	7bbb      	ldrb	r3, [r7, #14]
 800b3f4:	2b03      	cmp	r3, #3
 800b3f6:	d12b      	bne.n	800b450 <USBH_HID_ClassRequest+0x110>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2205      	movs	r2, #5
 800b3fc:	715a      	strb	r2, [r3, #5]
      break;
 800b3fe:	e027      	b.n	800b450 <USBH_HID_ClassRequest+0x110>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800b400:	2100      	movs	r1, #0
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f9b4 	bl	800b770 <USBH_HID_SetProtocol>
 800b408:	4603      	mov	r3, r0
 800b40a:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800b40c:	7bbb      	ldrb	r3, [r7, #14]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10b      	bne.n	800b42a <USBH_HID_ClassRequest+0xea>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	2201      	movs	r2, #1
 800b416:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b41e:	2102      	movs	r1, #2
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	4798      	blx	r3
        status = USBH_OK;
 800b424:	2300      	movs	r3, #0
 800b426:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800b428:	e014      	b.n	800b454 <USBH_HID_ClassRequest+0x114>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800b42a:	7bbb      	ldrb	r3, [r7, #14]
 800b42c:	2b03      	cmp	r3, #3
 800b42e:	d111      	bne.n	800b454 <USBH_HID_ClassRequest+0x114>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 800b430:	480b      	ldr	r0, [pc, #44]	@ (800b460 <USBH_HID_ClassRequest+0x120>)
 800b432:	f003 f819 	bl	800e468 <iprintf>
 800b436:	480c      	ldr	r0, [pc, #48]	@ (800b468 <USBH_HID_ClassRequest+0x128>)
 800b438:	f003 f816 	bl	800e468 <iprintf>
 800b43c:	200a      	movs	r0, #10
 800b43e:	f003 f825 	bl	800e48c <putchar>
        status = USBH_FAIL;
 800b442:	2302      	movs	r3, #2
 800b444:	73fb      	strb	r3, [r7, #15]
      break;
 800b446:	e005      	b.n	800b454 <USBH_HID_ClassRequest+0x114>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 800b448:	bf00      	nop
 800b44a:	e004      	b.n	800b456 <USBH_HID_ClassRequest+0x116>
      break;
 800b44c:	bf00      	nop
 800b44e:	e002      	b.n	800b456 <USBH_HID_ClassRequest+0x116>
      break;
 800b450:	bf00      	nop
 800b452:	e000      	b.n	800b456 <USBH_HID_ClassRequest+0x116>
      break;
 800b454:	bf00      	nop
  }

  return status;
 800b456:	7bfb      	ldrb	r3, [r7, #15]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	0800f650 	.word	0x0800f650
 800b464:	0800f658 	.word	0x0800f658
 800b468:	0800f698 	.word	0x0800f698

0800b46c <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af02      	add	r7, sp, #8
 800b472:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b47e:	69db      	ldr	r3, [r3, #28]
 800b480:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	789b      	ldrb	r3, [r3, #2]
 800b486:	2b06      	cmp	r3, #6
 800b488:	f200 80c1 	bhi.w	800b60e <USBH_HID_Process+0x1a2>
 800b48c:	a201      	add	r2, pc, #4	@ (adr r2, 800b494 <USBH_HID_Process+0x28>)
 800b48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b492:	bf00      	nop
 800b494:	0800b4b1 	.word	0x0800b4b1
 800b498:	0800b4e9 	.word	0x0800b4e9
 800b49c:	0800b60f 	.word	0x0800b60f
 800b4a0:	0800b60f 	.word	0x0800b60f
 800b4a4:	0800b559 	.word	0x0800b559
 800b4a8:	0800b543 	.word	0x0800b543
 800b4ac:	0800b587 	.word	0x0800b587
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	4798      	blx	r3
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800b4bc:	7dfb      	ldrb	r3, [r7, #23]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d103      	bne.n	800b4ca <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b4c8:	e0a6      	b.n	800b618 <USBH_HID_Process+0x1ac>
        USBH_ErrLog("HID Class Init failed");
 800b4ca:	4856      	ldr	r0, [pc, #344]	@ (800b624 <USBH_HID_Process+0x1b8>)
 800b4cc:	f002 ffcc 	bl	800e468 <iprintf>
 800b4d0:	4855      	ldr	r0, [pc, #340]	@ (800b628 <USBH_HID_Process+0x1bc>)
 800b4d2:	f002 ffc9 	bl	800e468 <iprintf>
 800b4d6:	200a      	movs	r0, #10
 800b4d8:	f002 ffd8 	bl	800e48c <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	2207      	movs	r2, #7
 800b4e0:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800b4e2:	2302      	movs	r3, #2
 800b4e4:	75fb      	strb	r3, [r7, #23]
      break;
 800b4e6:	e097      	b.n	800b618 <USBH_HID_Process+0x1ac>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	695a      	ldr	r2, [r3, #20]
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	8b1b      	ldrh	r3, [r3, #24]
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	2101      	movs	r1, #1
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 f90c 	bl	800b718 <USBH_HID_GetReport>
 800b500:	4603      	mov	r3, r0
 800b502:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800b504:	7dfb      	ldrb	r3, [r7, #23]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d103      	bne.n	800b512 <USBH_HID_Process+0xa6>
      {
        HID_Handle->state = USBH_HID_SYNC;
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	2205      	movs	r2, #5
 800b50e:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b510:	e082      	b.n	800b618 <USBH_HID_Process+0x1ac>
      else if (status == USBH_BUSY)
 800b512:	7dfb      	ldrb	r3, [r7, #23]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d105      	bne.n	800b524 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_IDLE;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	2201      	movs	r2, #1
 800b51c:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	75fb      	strb	r3, [r7, #23]
      break;
 800b522:	e079      	b.n	800b618 <USBH_HID_Process+0x1ac>
      else if (status == USBH_NOT_SUPPORTED)
 800b524:	7dfb      	ldrb	r3, [r7, #23]
 800b526:	2b03      	cmp	r3, #3
 800b528:	d105      	bne.n	800b536 <USBH_HID_Process+0xca>
        HID_Handle->state = USBH_HID_SYNC;
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	2205      	movs	r2, #5
 800b52e:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	75fb      	strb	r3, [r7, #23]
      break;
 800b534:	e070      	b.n	800b618 <USBH_HID_Process+0x1ac>
        HID_Handle->state = USBH_HID_ERROR;
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	2207      	movs	r2, #7
 800b53a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800b53c:	2302      	movs	r3, #2
 800b53e:	75fb      	strb	r3, [r7, #23]
      break;
 800b540:	e06a      	b.n	800b618 <USBH_HID_Process+0x1ac>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b548:	f003 0301 	and.w	r3, r3, #1
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d060      	beq.n	800b612 <USBH_HID_Process+0x1a6>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	2204      	movs	r2, #4
 800b554:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b556:	e05c      	b.n	800b612 <USBH_HID_Process+0x1a6>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800b560:	b2da      	uxtb	r2, r3
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	785b      	ldrb	r3, [r3, #1]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f002 fa51 	bl	800da0e <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	2206      	movs	r2, #6
 800b570:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	2200      	movs	r2, #0
 800b580:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 800b584:	e048      	b.n	800b618 <USBH_HID_Process+0x1ac>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	785b      	ldrb	r3, [r3, #1]
 800b58a:	4619      	mov	r1, r3
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f002 fd3b 	bl	800e008 <USBH_LL_GetURBState>
 800b592:	4603      	mov	r3, r0
 800b594:	2b01      	cmp	r3, #1
 800b596:	d124      	bne.n	800b5e2 <USBH_HID_Process+0x176>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	785b      	ldrb	r3, [r3, #1]
 800b59c:	4619      	mov	r1, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f002 fca0 	bl	800dee4 <USBH_LL_GetLastXferSize>
 800b5a4:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d132      	bne.n	800b616 <USBH_HID_Process+0x1aa>
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d02f      	beq.n	800b616 <USBH_HID_Process+0x1aa>
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d02b      	beq.n	800b616 <USBH_HID_Process+0x1aa>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	f103 0008 	add.w	r0, r3, #8
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	6959      	ldr	r1, [r3, #20]
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	8b1b      	ldrh	r3, [r3, #24]
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	f000 f9b5 	bl	800b93c <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7f5 fe30 	bl	8001240 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 800b5e0:	e019      	b.n	800b616 <USBH_HID_Process+0x1aa>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	785b      	ldrb	r3, [r3, #1]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f002 fd0d 	bl	800e008 <USBH_LL_GetURBState>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b05      	cmp	r3, #5
 800b5f2:	d110      	bne.n	800b616 <USBH_HID_Process+0x1aa>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	7e9b      	ldrb	r3, [r3, #26]
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f001 fcb6 	bl	800cf6c <USBH_ClrFeature>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d107      	bne.n	800b616 <USBH_HID_Process+0x1aa>
            HID_Handle->state = USBH_HID_GET_DATA;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	2204      	movs	r2, #4
 800b60a:	709a      	strb	r2, [r3, #2]
      break;
 800b60c:	e003      	b.n	800b616 <USBH_HID_Process+0x1aa>

    default:
      break;
 800b60e:	bf00      	nop
 800b610:	e002      	b.n	800b618 <USBH_HID_Process+0x1ac>
      break;
 800b612:	bf00      	nop
 800b614:	e000      	b.n	800b618 <USBH_HID_Process+0x1ac>
      break;
 800b616:	bf00      	nop
  }

  return status;
 800b618:	7dfb      	ldrb	r3, [r7, #23]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3718      	adds	r7, #24
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	0800f650 	.word	0x0800f650
 800b628:	0800f6d0 	.word	0x0800f6d0

0800b62c <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b63a:	69db      	ldr	r3, [r3, #28]
 800b63c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	789b      	ldrb	r3, [r3, #2]
 800b642:	2b06      	cmp	r3, #6
 800b644:	d10c      	bne.n	800b660 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6a1b      	ldr	r3, [r3, #32]
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	8b92      	ldrh	r2, [r2, #28]
 800b656:	4293      	cmp	r3, r2
 800b658:	d302      	bcc.n	800b660 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2204      	movs	r2, #4
 800b65e:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
	...

0800b670 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af02      	add	r7, sp, #8
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	460b      	mov	r3, r1
 800b67a:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b67c:	887b      	ldrh	r3, [r7, #2]
 800b67e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b682:	d90a      	bls.n	800b69a <USBH_HID_GetHIDReportDescriptor+0x2a>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 800b684:	480e      	ldr	r0, [pc, #56]	@ (800b6c0 <USBH_HID_GetHIDReportDescriptor+0x50>)
 800b686:	f002 feef 	bl	800e468 <iprintf>
 800b68a:	480e      	ldr	r0, [pc, #56]	@ (800b6c4 <USBH_HID_GetHIDReportDescriptor+0x54>)
 800b68c:	f002 feec 	bl	800e468 <iprintf>
 800b690:	200a      	movs	r0, #10
 800b692:	f002 fefb 	bl	800e48c <putchar>
    return USBH_NOT_SUPPORTED;
 800b696:	2303      	movs	r3, #3
 800b698:	e00e      	b.n	800b6b8 <USBH_HID_GetHIDReportDescriptor+0x48>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800b6a0:	887b      	ldrh	r3, [r7, #2]
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f001 fbbd 	bl	800ce2c <USBH_GetDescriptor>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800b6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3710      	adds	r7, #16
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	0800f650 	.word	0x0800f650
 800b6c4:	0800f6e8 	.word	0x0800f6e8

0800b6c8 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	70fb      	strb	r3, [r7, #3]
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2221      	movs	r2, #33	@ 0x21
 800b6dc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	220a      	movs	r2, #10
 800b6e2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800b6e4:	78fb      	ldrb	r3, [r7, #3]
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	021b      	lsls	r3, r3, #8
 800b6ea:	b29a      	uxth	r2, r3
 800b6ec:	78bb      	ldrb	r3, [r7, #2]
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2200      	movs	r2, #0
 800b702:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b704:	2200      	movs	r2, #0
 800b706:	2100      	movs	r1, #0
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f001 ff64 	bl	800d5d6 <USBH_CtlReq>
 800b70e:	4603      	mov	r3, r0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	607b      	str	r3, [r7, #4]
 800b722:	460b      	mov	r3, r1
 800b724:	72fb      	strb	r3, [r7, #11]
 800b726:	4613      	mov	r3, r2
 800b728:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	22a1      	movs	r2, #161	@ 0xa1
 800b72e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2201      	movs	r2, #1
 800b734:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800b736:	7afb      	ldrb	r3, [r7, #11]
 800b738:	b29b      	uxth	r3, r3
 800b73a:	021b      	lsls	r3, r3, #8
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	7abb      	ldrb	r3, [r7, #10]
 800b740:	b29b      	uxth	r3, r3
 800b742:	4313      	orrs	r3, r2
 800b744:	b29a      	uxth	r2, r3
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800b750:	7e3b      	ldrb	r3, [r7, #24]
 800b752:	b29a      	uxth	r2, r3
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800b758:	7e3b      	ldrb	r3, [r7, #24]
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	461a      	mov	r2, r3
 800b75e:	6879      	ldr	r1, [r7, #4]
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f001 ff38 	bl	800d5d6 <USBH_CtlReq>
 800b766:	4603      	mov	r3, r0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	460b      	mov	r3, r1
 800b77a:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2221      	movs	r2, #33	@ 0x21
 800b780:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	220b      	movs	r2, #11
 800b786:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800b788:	78fb      	ldrb	r3, [r7, #3]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d003      	beq.n	800b796 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	825a      	strh	r2, [r3, #18]
 800b794:	e002      	b.n	800b79c <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f001 ff12 	bl	800d5d6 <USBH_CtlReq>
 800b7b2:	4603      	mov	r3, r0

}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	3302      	adds	r3, #2
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	3303      	adds	r3, #3
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	021b      	lsls	r3, r3, #8
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800b7e0:	897b      	ldrh	r3, [r7, #10]
 800b7e2:	2b09      	cmp	r3, #9
 800b7e4:	d941      	bls.n	800b86a <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 800b7e6:	2309      	movs	r3, #9
 800b7e8:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800b7ea:	e03a      	b.n	800b862 <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b7ec:	f107 0308 	add.w	r3, r7, #8
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f001 fed5 	bl	800d5a2 <USBH_GetNextDesc>
 800b7f8:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	785b      	ldrb	r3, [r3, #1]
 800b7fe:	2b21      	cmp	r3, #33	@ 0x21
 800b800:	d12f      	bne.n	800b862 <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	781a      	ldrb	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	785a      	ldrb	r2, [r3, #1]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	3302      	adds	r3, #2
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	461a      	mov	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	3303      	adds	r3, #3
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	021b      	lsls	r3, r3, #8
 800b822:	b29b      	uxth	r3, r3
 800b824:	4313      	orrs	r3, r2
 800b826:	b29a      	uxth	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	791a      	ldrb	r2, [r3, #4]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	795a      	ldrb	r2, [r3, #5]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	799a      	ldrb	r2, [r3, #6]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3307      	adds	r3, #7
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	461a      	mov	r2, r3
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	3308      	adds	r3, #8
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	021b      	lsls	r3, r3, #8
 800b854:	b29b      	uxth	r3, r3
 800b856:	4313      	orrs	r3, r2
 800b858:	b29a      	uxth	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	811a      	strh	r2, [r3, #8]
        break;
 800b85e:	bf00      	nop
      }
    }
  }
}
 800b860:	e003      	b.n	800b86a <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800b862:	893b      	ldrh	r3, [r7, #8]
 800b864:	897a      	ldrh	r2, [r7, #10]
 800b866:	429a      	cmp	r2, r3
 800b868:	d8c0      	bhi.n	800b7ec <USBH_HID_ParseHIDDesc+0x30>
}
 800b86a:	bf00      	nop
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800b872:	b480      	push	{r7}
 800b874:	b085      	sub	sp, #20
 800b876:	af00      	add	r7, sp, #0
 800b878:	60f8      	str	r0, [r7, #12]
 800b87a:	60b9      	str	r1, [r7, #8]
 800b87c:	4613      	mov	r3, r2
 800b87e:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2200      	movs	r2, #0
 800b88a:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2200      	movs	r2, #0
 800b890:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	88fa      	ldrh	r2, [r7, #6]
 800b896:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	601a      	str	r2, [r3, #0]
}
 800b89e:	bf00      	nop
 800b8a0:	3714      	adds	r7, #20
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b087      	sub	sp, #28
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	60f8      	str	r0, [r7, #12]
 800b8b2:	60b9      	str	r1, [r7, #8]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	7a9b      	ldrb	r3, [r3, #10]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d131      	bne.n	800b928 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	82fb      	strh	r3, [r7, #22]
 800b8ce:	e027      	b.n	800b920 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	88da      	ldrh	r2, [r3, #6]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	889b      	ldrh	r3, [r3, #4]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d019      	beq.n	800b910 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	88d2      	ldrh	r2, [r2, #6]
 800b8e4:	441a      	add	r2, r3
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	1c59      	adds	r1, r3, #1
 800b8ea:	6139      	str	r1, [r7, #16]
 800b8ec:	7812      	ldrb	r2, [r2, #0]
 800b8ee:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	88db      	ldrh	r3, [r3, #6]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	88da      	ldrh	r2, [r3, #6]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	891b      	ldrh	r3, [r3, #8]
 800b904:	429a      	cmp	r2, r3
 800b906:	d108      	bne.n	800b91a <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2200      	movs	r2, #0
 800b90c:	80da      	strh	r2, [r3, #6]
 800b90e:	e004      	b.n	800b91a <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2200      	movs	r2, #0
 800b914:	729a      	strb	r2, [r3, #10]
        return i;
 800b916:	8afb      	ldrh	r3, [r7, #22]
 800b918:	e00a      	b.n	800b930 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800b91a:	8afb      	ldrh	r3, [r7, #22]
 800b91c:	3301      	adds	r3, #1
 800b91e:	82fb      	strh	r3, [r7, #22]
 800b920:	8afa      	ldrh	r2, [r7, #22]
 800b922:	88fb      	ldrh	r3, [r7, #6]
 800b924:	429a      	cmp	r2, r3
 800b926:	d3d3      	bcc.n	800b8d0 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800b92e:	88fb      	ldrh	r3, [r7, #6]
}
 800b930:	4618      	mov	r0, r3
 800b932:	371c      	adds	r7, #28
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	4613      	mov	r3, r2
 800b948:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	7a9b      	ldrb	r3, [r3, #10]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d13c      	bne.n	800b9d0 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2201      	movs	r2, #1
 800b95a:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800b95c:	2300      	movs	r3, #0
 800b95e:	82fb      	strh	r3, [r7, #22]
 800b960:	e032      	b.n	800b9c8 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	889b      	ldrh	r3, [r3, #4]
 800b966:	3301      	adds	r3, #1
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	88d2      	ldrh	r2, [r2, #6]
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d00a      	beq.n	800b986 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	889b      	ldrh	r3, [r3, #4]
 800b974:	3301      	adds	r3, #1
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d108      	bne.n	800b990 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	88db      	ldrh	r3, [r3, #6]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d104      	bne.n	800b990 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2200      	movs	r2, #0
 800b98a:	729a      	strb	r2, [r3, #10]
        return i;
 800b98c:	8afb      	ldrh	r3, [r7, #22]
 800b98e:	e023      	b.n	800b9d8 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	1c5a      	adds	r2, r3, #1
 800b994:	613a      	str	r2, [r7, #16]
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	6812      	ldr	r2, [r2, #0]
 800b99a:	68f9      	ldr	r1, [r7, #12]
 800b99c:	8889      	ldrh	r1, [r1, #4]
 800b99e:	440a      	add	r2, r1
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	7013      	strb	r3, [r2, #0]
        f->head++;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	889b      	ldrh	r3, [r3, #4]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	b29a      	uxth	r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	889a      	ldrh	r2, [r3, #4]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	891b      	ldrh	r3, [r3, #8]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d102      	bne.n	800b9c2 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800b9c2:	8afb      	ldrh	r3, [r7, #22]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	82fb      	strh	r3, [r7, #22]
 800b9c8:	8afa      	ldrh	r2, [r7, #22]
 800b9ca:	88fb      	ldrh	r3, [r7, #6]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d3c8      	bcc.n	800b962 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800b9d6:	88fb      	ldrh	r3, [r7, #6]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	371c      	adds	r7, #28
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b9f2:	69db      	ldr	r3, [r3, #28]
 800b9f4:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800b9f6:	4b22      	ldr	r3, [pc, #136]	@ (800ba80 <USBH_HID_KeybdInit+0x9c>)
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800b9fc:	4b20      	ldr	r3, [pc, #128]	@ (800ba80 <USBH_HID_KeybdInit+0x9c>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800ba02:	4b1f      	ldr	r3, [pc, #124]	@ (800ba80 <USBH_HID_KeybdInit+0x9c>)
 800ba04:	2200      	movs	r2, #0
 800ba06:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800ba08:	4b1d      	ldr	r3, [pc, #116]	@ (800ba80 <USBH_HID_KeybdInit+0x9c>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800ba0e:	4b1c      	ldr	r3, [pc, #112]	@ (800ba80 <USBH_HID_KeybdInit+0x9c>)
 800ba10:	2200      	movs	r2, #0
 800ba12:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800ba14:	4b1a      	ldr	r3, [pc, #104]	@ (800ba80 <USBH_HID_KeybdInit+0x9c>)
 800ba16:	2200      	movs	r2, #0
 800ba18:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800ba1a:	4b19      	ldr	r3, [pc, #100]	@ (800ba80 <USBH_HID_KeybdInit+0x9c>)
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800ba20:	4b17      	ldr	r3, [pc, #92]	@ (800ba80 <USBH_HID_KeybdInit+0x9c>)
 800ba22:	2200      	movs	r2, #0
 800ba24:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800ba26:	2300      	movs	r3, #0
 800ba28:	60fb      	str	r3, [r7, #12]
 800ba2a:	e00c      	b.n	800ba46 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800ba2c:	4a15      	ldr	r2, [pc, #84]	@ (800ba84 <USBH_HID_KeybdInit+0xa0>)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	4413      	add	r3, r2
 800ba32:	2200      	movs	r2, #0
 800ba34:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 800ba36:	4a14      	ldr	r2, [pc, #80]	@ (800ba88 <USBH_HID_KeybdInit+0xa4>)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	3301      	adds	r3, #1
 800ba44:	60fb      	str	r3, [r7, #12]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2b07      	cmp	r3, #7
 800ba4a:	d9ef      	bls.n	800ba2c <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	8b1b      	ldrh	r3, [r3, #24]
 800ba50:	2b08      	cmp	r3, #8
 800ba52:	d902      	bls.n	800ba5a <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	2208      	movs	r2, #8
 800ba58:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	4a0a      	ldr	r2, [pc, #40]	@ (800ba88 <USBH_HID_KeybdInit+0xa4>)
 800ba5e:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	f103 0008 	add.w	r0, r3, #8
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ba6c:	2250      	movs	r2, #80	@ 0x50
 800ba6e:	4619      	mov	r1, r3
 800ba70:	f7ff feff 	bl	800b872 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	200118a4 	.word	0x200118a4
 800ba84:	200118bc 	.word	0x200118bc
 800ba88:	200118b4 	.word	0x200118b4

0800ba8c <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 f80d 	bl	800bab4 <USBH_HID_KeybdDecode>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d101      	bne.n	800baa4 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800baa0:	4b03      	ldr	r3, [pc, #12]	@ (800bab0 <USBH_HID_GetKeybdInfo+0x24>)
 800baa2:	e000      	b.n	800baa6 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800baa4:	2300      	movs	r3, #0
  }
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3708      	adds	r7, #8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	200118a4 	.word	0x200118a4

0800bab4 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bac2:	69db      	ldr	r3, [r3, #28]
 800bac4:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	8b1b      	ldrh	r3, [r3, #24]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d003      	beq.n	800bad6 <USBH_HID_KeybdDecode+0x22>
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d101      	bne.n	800bada <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 800bad6:	2302      	movs	r3, #2
 800bad8:	e066      	b.n	800bba8 <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	f103 0008 	add.w	r0, r3, #8
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	8b1b      	ldrh	r3, [r3, #24]
 800bae4:	461a      	mov	r2, r3
 800bae6:	4932      	ldr	r1, [pc, #200]	@ (800bbb0 <USBH_HID_KeybdDecode+0xfc>)
 800bae8:	f7ff fedf 	bl	800b8aa <USBH_HID_FifoRead>
 800baec:	4603      	mov	r3, r0
 800baee:	461a      	mov	r2, r3
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	8b1b      	ldrh	r3, [r3, #24]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d156      	bne.n	800bba6 <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800baf8:	2100      	movs	r1, #0
 800bafa:	482e      	ldr	r0, [pc, #184]	@ (800bbb4 <USBH_HID_KeybdDecode+0x100>)
 800bafc:	f000 f8e4 	bl	800bcc8 <HID_ReadItem>
 800bb00:	4603      	mov	r3, r0
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	4b2c      	ldr	r3, [pc, #176]	@ (800bbb8 <USBH_HID_KeybdDecode+0x104>)
 800bb06:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800bb08:	2100      	movs	r1, #0
 800bb0a:	482c      	ldr	r0, [pc, #176]	@ (800bbbc <USBH_HID_KeybdDecode+0x108>)
 800bb0c:	f000 f8dc 	bl	800bcc8 <HID_ReadItem>
 800bb10:	4603      	mov	r3, r0
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	4b28      	ldr	r3, [pc, #160]	@ (800bbb8 <USBH_HID_KeybdDecode+0x104>)
 800bb16:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800bb18:	2100      	movs	r1, #0
 800bb1a:	4829      	ldr	r0, [pc, #164]	@ (800bbc0 <USBH_HID_KeybdDecode+0x10c>)
 800bb1c:	f000 f8d4 	bl	800bcc8 <HID_ReadItem>
 800bb20:	4603      	mov	r3, r0
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	4b24      	ldr	r3, [pc, #144]	@ (800bbb8 <USBH_HID_KeybdDecode+0x104>)
 800bb26:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800bb28:	2100      	movs	r1, #0
 800bb2a:	4826      	ldr	r0, [pc, #152]	@ (800bbc4 <USBH_HID_KeybdDecode+0x110>)
 800bb2c:	f000 f8cc 	bl	800bcc8 <HID_ReadItem>
 800bb30:	4603      	mov	r3, r0
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	4b20      	ldr	r3, [pc, #128]	@ (800bbb8 <USBH_HID_KeybdDecode+0x104>)
 800bb36:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800bb38:	2100      	movs	r1, #0
 800bb3a:	4823      	ldr	r0, [pc, #140]	@ (800bbc8 <USBH_HID_KeybdDecode+0x114>)
 800bb3c:	f000 f8c4 	bl	800bcc8 <HID_ReadItem>
 800bb40:	4603      	mov	r3, r0
 800bb42:	b2da      	uxtb	r2, r3
 800bb44:	4b1c      	ldr	r3, [pc, #112]	@ (800bbb8 <USBH_HID_KeybdDecode+0x104>)
 800bb46:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800bb48:	2100      	movs	r1, #0
 800bb4a:	4820      	ldr	r0, [pc, #128]	@ (800bbcc <USBH_HID_KeybdDecode+0x118>)
 800bb4c:	f000 f8bc 	bl	800bcc8 <HID_ReadItem>
 800bb50:	4603      	mov	r3, r0
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	4b18      	ldr	r3, [pc, #96]	@ (800bbb8 <USBH_HID_KeybdDecode+0x104>)
 800bb56:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800bb58:	2100      	movs	r1, #0
 800bb5a:	481d      	ldr	r0, [pc, #116]	@ (800bbd0 <USBH_HID_KeybdDecode+0x11c>)
 800bb5c:	f000 f8b4 	bl	800bcc8 <HID_ReadItem>
 800bb60:	4603      	mov	r3, r0
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	4b14      	ldr	r3, [pc, #80]	@ (800bbb8 <USBH_HID_KeybdDecode+0x104>)
 800bb66:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800bb68:	2100      	movs	r1, #0
 800bb6a:	481a      	ldr	r0, [pc, #104]	@ (800bbd4 <USBH_HID_KeybdDecode+0x120>)
 800bb6c:	f000 f8ac 	bl	800bcc8 <HID_ReadItem>
 800bb70:	4603      	mov	r3, r0
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	4b10      	ldr	r3, [pc, #64]	@ (800bbb8 <USBH_HID_KeybdDecode+0x104>)
 800bb76:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800bb78:	2300      	movs	r3, #0
 800bb7a:	73fb      	strb	r3, [r7, #15]
 800bb7c:	e00e      	b.n	800bb9c <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
 800bb80:	4619      	mov	r1, r3
 800bb82:	4815      	ldr	r0, [pc, #84]	@ (800bbd8 <USBH_HID_KeybdDecode+0x124>)
 800bb84:	f000 f8a0 	bl	800bcc8 <HID_ReadItem>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	7bfb      	ldrb	r3, [r7, #15]
 800bb8c:	b2d1      	uxtb	r1, r2
 800bb8e:	4a0a      	ldr	r2, [pc, #40]	@ (800bbb8 <USBH_HID_KeybdDecode+0x104>)
 800bb90:	4413      	add	r3, r2
 800bb92:	460a      	mov	r2, r1
 800bb94:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800bb96:	7bfb      	ldrb	r3, [r7, #15]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	73fb      	strb	r3, [r7, #15]
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	2b05      	cmp	r3, #5
 800bba0:	d9ed      	bls.n	800bb7e <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	e000      	b.n	800bba8 <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 800bba6:	2302      	movs	r3, #2
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	200118bc 	.word	0x200118bc
 800bbb4:	08011c28 	.word	0x08011c28
 800bbb8:	200118a4 	.word	0x200118a4
 800bbbc:	08011c48 	.word	0x08011c48
 800bbc0:	08011c68 	.word	0x08011c68
 800bbc4:	08011c88 	.word	0x08011c88
 800bbc8:	08011ca8 	.word	0x08011ca8
 800bbcc:	08011cc8 	.word	0x08011cc8
 800bbd0:	08011ce8 	.word	0x08011ce8
 800bbd4:	08011d08 	.word	0x08011d08
 800bbd8:	08011d28 	.word	0x08011d28

0800bbdc <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	789b      	ldrb	r3, [r3, #2]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d103      	bne.n	800bbf4 <USBH_HID_GetASCIICode+0x18>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	799b      	ldrb	r3, [r3, #6]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d009      	beq.n	800bc08 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	7a5b      	ldrb	r3, [r3, #9]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	4b0b      	ldr	r3, [pc, #44]	@ (800bc28 <USBH_HID_GetASCIICode+0x4c>)
 800bbfc:	5c9b      	ldrb	r3, [r3, r2]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	4b0a      	ldr	r3, [pc, #40]	@ (800bc2c <USBH_HID_GetASCIICode+0x50>)
 800bc02:	5c9b      	ldrb	r3, [r3, r2]
 800bc04:	73fb      	strb	r3, [r7, #15]
 800bc06:	e008      	b.n	800bc1a <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	7a5b      	ldrb	r3, [r3, #9]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	4b06      	ldr	r3, [pc, #24]	@ (800bc28 <USBH_HID_GetASCIICode+0x4c>)
 800bc10:	5c9b      	ldrb	r3, [r3, r2]
 800bc12:	461a      	mov	r2, r3
 800bc14:	4b06      	ldr	r3, [pc, #24]	@ (800bc30 <USBH_HID_GetASCIICode+0x54>)
 800bc16:	5c9b      	ldrb	r3, [r3, r2]
 800bc18:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	08011e50 	.word	0x08011e50
 800bc2c:	08011dcc 	.word	0x08011dcc
 800bc30:	08011d48 	.word	0x08011d48

0800bc34 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800bc46:	4b1d      	ldr	r3, [pc, #116]	@ (800bcbc <USBH_HID_MouseInit+0x88>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800bc4c:	4b1b      	ldr	r3, [pc, #108]	@ (800bcbc <USBH_HID_MouseInit+0x88>)
 800bc4e:	2200      	movs	r2, #0
 800bc50:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800bc52:	4b1a      	ldr	r3, [pc, #104]	@ (800bcbc <USBH_HID_MouseInit+0x88>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800bc58:	4b18      	ldr	r3, [pc, #96]	@ (800bcbc <USBH_HID_MouseInit+0x88>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800bc5e:	4b17      	ldr	r3, [pc, #92]	@ (800bcbc <USBH_HID_MouseInit+0x88>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800bc64:	2300      	movs	r3, #0
 800bc66:	60fb      	str	r3, [r7, #12]
 800bc68:	e00c      	b.n	800bc84 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800bc6a:	4a15      	ldr	r2, [pc, #84]	@ (800bcc0 <USBH_HID_MouseInit+0x8c>)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	4413      	add	r3, r2
 800bc70:	2200      	movs	r2, #0
 800bc72:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800bc74:	4a13      	ldr	r2, [pc, #76]	@ (800bcc4 <USBH_HID_MouseInit+0x90>)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	4413      	add	r3, r2
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	3301      	adds	r3, #1
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2b07      	cmp	r3, #7
 800bc88:	d9ef      	bls.n	800bc6a <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	8b1b      	ldrh	r3, [r3, #24]
 800bc8e:	2b08      	cmp	r3, #8
 800bc90:	d902      	bls.n	800bc98 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	2208      	movs	r2, #8
 800bc96:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	4a0a      	ldr	r2, [pc, #40]	@ (800bcc4 <USBH_HID_MouseInit+0x90>)
 800bc9c:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	f103 0008 	add.w	r0, r3, #8
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bcaa:	2250      	movs	r2, #80	@ 0x50
 800bcac:	4619      	mov	r1, r3
 800bcae:	f7ff fde0 	bl	800b872 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	200118c4 	.word	0x200118c4
 800bcc0:	200118cc 	.word	0x200118cc
 800bcc4:	200118d4 	.word	0x200118d4

0800bcc8 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b089      	sub	sp, #36	@ 0x24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	7a1b      	ldrb	r3, [r3, #8]
 800bce6:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	7a5b      	ldrb	r3, [r3, #9]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d01a      	beq.n	800bd26 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	7a5b      	ldrb	r3, [r3, #9]
 800bcf4:	78fa      	ldrb	r2, [r7, #3]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d301      	bcc.n	800bcfe <HID_ReadItem+0x36>
    {
      return (0U);
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	e078      	b.n	800bdf0 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800bcfe:	78fb      	ldrb	r3, [r7, #3]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	6852      	ldr	r2, [r2, #4]
 800bd04:	fb02 f303 	mul.w	r3, r2, r3
 800bd08:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800bd0a:	7cfb      	ldrb	r3, [r7, #19]
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	4413      	add	r3, r2
 800bd10:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	08db      	lsrs	r3, r3, #3
 800bd16:	697a      	ldr	r2, [r7, #20]
 800bd18:	4413      	add	r3, r2
 800bd1a:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	f003 0307 	and.w	r3, r3, #7
 800bd24:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800bd26:	2300      	movs	r3, #0
 800bd28:	61bb      	str	r3, [r7, #24]
 800bd2a:	e00a      	b.n	800bd42 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	461a      	mov	r2, r3
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	00db      	lsls	r3, r3, #3
 800bd36:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3a:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	61bb      	str	r3, [r7, #24]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f003 0307 	and.w	r3, r3, #7
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d004      	beq.n	800bd58 <HID_ReadItem+0x90>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	08db      	lsrs	r3, r3, #3
 800bd54:	3301      	adds	r3, #1
 800bd56:	e002      	b.n	800bd5e <HID_ReadItem+0x96>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	08db      	lsrs	r3, r3, #3
 800bd5e:	69ba      	ldr	r2, [r7, #24]
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d8e3      	bhi.n	800bd2c <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800bd64:	7cfb      	ldrb	r3, [r7, #19]
 800bd66:	69fa      	ldr	r2, [r7, #28]
 800bd68:	40da      	lsrs	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	f04f 31ff 	mov.w	r1, #4294967295
 800bd72:	fa01 f303 	lsl.w	r3, r1, r3
 800bd76:	43db      	mvns	r3, r3
 800bd78:	4013      	ands	r3, r2
 800bd7a:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	69fa      	ldr	r2, [r7, #28]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d304      	bcc.n	800bd90 <HID_ReadItem+0xc8>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	69fa      	ldr	r2, [r7, #28]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d901      	bls.n	800bd94 <HID_ReadItem+0xcc>
  {
    return (0U);
 800bd90:	2300      	movs	r3, #0
 800bd92:	e02d      	b.n	800bdf0 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	7a9b      	ldrb	r3, [r3, #10]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d01e      	beq.n	800bdda <HID_ReadItem+0x112>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	3b01      	subs	r3, #1
 800bda2:	69fa      	ldr	r2, [r7, #28]
 800bda4:	fa22 f303 	lsr.w	r3, r2, r3
 800bda8:	f003 0301 	and.w	r3, r3, #1
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d014      	beq.n	800bdda <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdba:	425b      	negs	r3, r3
 800bdbc:	69fa      	ldr	r2, [r7, #28]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	69db      	ldr	r3, [r3, #28]
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d101      	bne.n	800bdce <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	e010      	b.n	800bdf0 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	69db      	ldr	r3, [r3, #28]
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	fb02 f303 	mul.w	r3, r2, r3
 800bdd8:	e00a      	b.n	800bdf0 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	69db      	ldr	r3, [r3, #28]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d101      	bne.n	800bde6 <HID_ReadItem+0x11e>
    {
      return (val);
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	e004      	b.n	800bdf0 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	69fa      	ldr	r2, [r7, #28]
 800bdec:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3724      	adds	r7, #36	@ 0x24
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	4613      	mov	r3, r2
 800be08:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d10a      	bne.n	800be26 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800be10:	481c      	ldr	r0, [pc, #112]	@ (800be84 <USBH_Init+0x88>)
 800be12:	f002 fb29 	bl	800e468 <iprintf>
 800be16:	481c      	ldr	r0, [pc, #112]	@ (800be88 <USBH_Init+0x8c>)
 800be18:	f002 fb26 	bl	800e468 <iprintf>
 800be1c:	200a      	movs	r0, #10
 800be1e:	f002 fb35 	bl	800e48c <putchar>
    return USBH_FAIL;
 800be22:	2302      	movs	r3, #2
 800be24:	e029      	b.n	800be7a <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	79fa      	ldrb	r2, [r7, #7]
 800be2a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2200      	movs	r2, #0
 800be32:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2200      	movs	r2, #0
 800be3a:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f000 f824 	bl	800be8c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2200      	movs	r2, #0
 800be48:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2200      	movs	r2, #0
 800be58:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d003      	beq.n	800be72 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800be72:	68f8      	ldr	r0, [r7, #12]
 800be74:	f001 ff82 	bl	800dd7c <USBH_LL_Init>

  return USBH_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	0800f774 	.word	0x0800f774
 800be88:	0800f77c 	.word	0x0800f77c

0800be8c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800be94:	2300      	movs	r3, #0
 800be96:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800be98:	2300      	movs	r3, #0
 800be9a:	60fb      	str	r3, [r7, #12]
 800be9c:	e009      	b.n	800beb2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	33e0      	adds	r3, #224	@ 0xe0
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4413      	add	r3, r2
 800bea8:	2200      	movs	r2, #0
 800beaa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	3301      	adds	r3, #1
 800beb0:	60fb      	str	r3, [r7, #12]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2b0f      	cmp	r3, #15
 800beb6:	d9f2      	bls.n	800be9e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800beb8:	2300      	movs	r3, #0
 800beba:	60fb      	str	r3, [r7, #12]
 800bebc:	e009      	b.n	800bed2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	4413      	add	r3, r2
 800bec4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bec8:	2200      	movs	r2, #0
 800beca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	3301      	adds	r3, #1
 800bed0:	60fb      	str	r3, [r7, #12]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bed8:	d3f1      	bcc.n	800bebe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2201      	movs	r2, #1
 800beea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2240      	movs	r2, #64	@ 0x40
 800befe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2201      	movs	r2, #1
 800bf12:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	331c      	adds	r3, #28
 800bf2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bf2e:	2100      	movs	r1, #0
 800bf30:	4618      	mov	r0, r3
 800bf32:	f002 fb37 	bl	800e5a4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bf3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf40:	2100      	movs	r1, #0
 800bf42:	4618      	mov	r0, r3
 800bf44:	f002 fb2e 	bl	800e5a4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800bf4e:	2212      	movs	r2, #18
 800bf50:	2100      	movs	r1, #0
 800bf52:	4618      	mov	r0, r3
 800bf54:	f002 fb26 	bl	800e5a4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bf5e:	223e      	movs	r2, #62	@ 0x3e
 800bf60:	2100      	movs	r1, #0
 800bf62:	4618      	mov	r0, r3
 800bf64:	f002 fb1e 	bl	800e5a4 <memset>

  return USBH_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
	...

0800bf74 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d01f      	beq.n	800bfc8 <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10e      	bne.n	800bfb0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800bf98:	1c59      	adds	r1, r3, #1
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	33de      	adds	r3, #222	@ 0xde
 800bfa4:	6839      	ldr	r1, [r7, #0]
 800bfa6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	73fb      	strb	r3, [r7, #15]
 800bfae:	e016      	b.n	800bfde <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800bfb0:	480d      	ldr	r0, [pc, #52]	@ (800bfe8 <USBH_RegisterClass+0x74>)
 800bfb2:	f002 fa59 	bl	800e468 <iprintf>
 800bfb6:	480d      	ldr	r0, [pc, #52]	@ (800bfec <USBH_RegisterClass+0x78>)
 800bfb8:	f002 fa56 	bl	800e468 <iprintf>
 800bfbc:	200a      	movs	r0, #10
 800bfbe:	f002 fa65 	bl	800e48c <putchar>
      status = USBH_FAIL;
 800bfc2:	2302      	movs	r3, #2
 800bfc4:	73fb      	strb	r3, [r7, #15]
 800bfc6:	e00a      	b.n	800bfde <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800bfc8:	4807      	ldr	r0, [pc, #28]	@ (800bfe8 <USBH_RegisterClass+0x74>)
 800bfca:	f002 fa4d 	bl	800e468 <iprintf>
 800bfce:	4808      	ldr	r0, [pc, #32]	@ (800bff0 <USBH_RegisterClass+0x7c>)
 800bfd0:	f002 fa4a 	bl	800e468 <iprintf>
 800bfd4:	200a      	movs	r0, #10
 800bfd6:	f002 fa59 	bl	800e48c <putchar>
    status = USBH_FAIL;
 800bfda:	2302      	movs	r3, #2
 800bfdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bfde:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	0800f774 	.word	0x0800f774
 800bfec:	0800f790 	.word	0x0800f790
 800bff0:	0800f7ac 	.word	0x0800f7ac

0800bff4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c000:	2300      	movs	r3, #0
 800c002:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c00a:	78fa      	ldrb	r2, [r7, #3]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d23c      	bcs.n	800c08a <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	78fa      	ldrb	r2, [r7, #3]
 800c014:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800c018:	78fb      	ldrb	r3, [r7, #3]
 800c01a:	4619      	mov	r1, r3
 800c01c:	4823      	ldr	r0, [pc, #140]	@ (800c0ac <USBH_SelectInterface+0xb8>)
 800c01e:	f002 fa23 	bl	800e468 <iprintf>
 800c022:	200a      	movs	r0, #10
 800c024:	f002 fa32 	bl	800e48c <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800c028:	78fb      	ldrb	r3, [r7, #3]
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	211a      	movs	r1, #26
 800c02e:	fb01 f303 	mul.w	r3, r1, r3
 800c032:	4413      	add	r3, r2
 800c034:	f203 3347 	addw	r3, r3, #839	@ 0x347
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	4619      	mov	r1, r3
 800c03c:	481c      	ldr	r0, [pc, #112]	@ (800c0b0 <USBH_SelectInterface+0xbc>)
 800c03e:	f002 fa13 	bl	800e468 <iprintf>
 800c042:	200a      	movs	r0, #10
 800c044:	f002 fa22 	bl	800e48c <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800c048:	78fb      	ldrb	r3, [r7, #3]
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	211a      	movs	r1, #26
 800c04e:	fb01 f303 	mul.w	r3, r1, r3
 800c052:	4413      	add	r3, r2
 800c054:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	4619      	mov	r1, r3
 800c05c:	4815      	ldr	r0, [pc, #84]	@ (800c0b4 <USBH_SelectInterface+0xc0>)
 800c05e:	f002 fa03 	bl	800e468 <iprintf>
 800c062:	200a      	movs	r0, #10
 800c064:	f002 fa12 	bl	800e48c <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800c068:	78fb      	ldrb	r3, [r7, #3]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	211a      	movs	r1, #26
 800c06e:	fb01 f303 	mul.w	r3, r1, r3
 800c072:	4413      	add	r3, r2
 800c074:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	4619      	mov	r1, r3
 800c07c:	480e      	ldr	r0, [pc, #56]	@ (800c0b8 <USBH_SelectInterface+0xc4>)
 800c07e:	f002 f9f3 	bl	800e468 <iprintf>
 800c082:	200a      	movs	r0, #10
 800c084:	f002 fa02 	bl	800e48c <putchar>
 800c088:	e00a      	b.n	800c0a0 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800c08a:	480c      	ldr	r0, [pc, #48]	@ (800c0bc <USBH_SelectInterface+0xc8>)
 800c08c:	f002 f9ec 	bl	800e468 <iprintf>
 800c090:	480b      	ldr	r0, [pc, #44]	@ (800c0c0 <USBH_SelectInterface+0xcc>)
 800c092:	f002 f9e9 	bl	800e468 <iprintf>
 800c096:	200a      	movs	r0, #10
 800c098:	f002 f9f8 	bl	800e48c <putchar>
    status = USBH_FAIL;
 800c09c:	2302      	movs	r3, #2
 800c09e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	0800f7c4 	.word	0x0800f7c4
 800c0b0:	0800f7e4 	.word	0x0800f7e4
 800c0b4:	0800f7f4 	.word	0x0800f7f4
 800c0b8:	0800f804 	.word	0x0800f804
 800c0bc:	0800f774 	.word	0x0800f774
 800c0c0:	0800f814 	.word	0x0800f814

0800c0c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b087      	sub	sp, #28
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	4608      	mov	r0, r1
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	70fb      	strb	r3, [r7, #3]
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	70bb      	strb	r3, [r7, #2]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c0ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c0ee:	e025      	b.n	800c13c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c0f0:	7dfb      	ldrb	r3, [r7, #23]
 800c0f2:	221a      	movs	r2, #26
 800c0f4:	fb02 f303 	mul.w	r3, r2, r3
 800c0f8:	3308      	adds	r3, #8
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	3302      	adds	r3, #2
 800c100:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	795b      	ldrb	r3, [r3, #5]
 800c106:	78fa      	ldrb	r2, [r7, #3]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d002      	beq.n	800c112 <USBH_FindInterface+0x4e>
 800c10c:	78fb      	ldrb	r3, [r7, #3]
 800c10e:	2bff      	cmp	r3, #255	@ 0xff
 800c110:	d111      	bne.n	800c136 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c116:	78ba      	ldrb	r2, [r7, #2]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d002      	beq.n	800c122 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c11c:	78bb      	ldrb	r3, [r7, #2]
 800c11e:	2bff      	cmp	r3, #255	@ 0xff
 800c120:	d109      	bne.n	800c136 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c126:	787a      	ldrb	r2, [r7, #1]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d002      	beq.n	800c132 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c12c:	787b      	ldrb	r3, [r7, #1]
 800c12e:	2bff      	cmp	r3, #255	@ 0xff
 800c130:	d101      	bne.n	800c136 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c132:	7dfb      	ldrb	r3, [r7, #23]
 800c134:	e006      	b.n	800c144 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c136:	7dfb      	ldrb	r3, [r7, #23]
 800c138:	3301      	adds	r3, #1
 800c13a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c13c:	7dfb      	ldrb	r3, [r7, #23]
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d9d6      	bls.n	800c0f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c142:	23ff      	movs	r3, #255	@ 0xff
}
 800c144:	4618      	mov	r0, r3
 800c146:	371c      	adds	r7, #28
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f001 fe4b 	bl	800ddf4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c15e:	2101      	movs	r1, #1
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f001 ff64 	bl	800e02e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c166:	2300      	movs	r3, #0
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b088      	sub	sp, #32
 800c174:	af04      	add	r7, sp, #16
 800c176:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c178:	2302      	movs	r3, #2
 800c17a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c17c:	2300      	movs	r3, #0
 800c17e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800c186:	b2db      	uxtb	r3, r3
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d102      	bne.n	800c192 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2203      	movs	r2, #3
 800c190:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b0b      	cmp	r3, #11
 800c19a:	f200 8237 	bhi.w	800c60c <USBH_Process+0x49c>
 800c19e:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a4 <USBH_Process+0x34>)
 800c1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a4:	0800c1d5 	.word	0x0800c1d5
 800c1a8:	0800c213 	.word	0x0800c213
 800c1ac:	0800c293 	.word	0x0800c293
 800c1b0:	0800c59b 	.word	0x0800c59b
 800c1b4:	0800c60d 	.word	0x0800c60d
 800c1b8:	0800c333 	.word	0x0800c333
 800c1bc:	0800c51d 	.word	0x0800c51d
 800c1c0:	0800c381 	.word	0x0800c381
 800c1c4:	0800c3a1 	.word	0x0800c3a1
 800c1c8:	0800c3cb 	.word	0x0800c3cb
 800c1cc:	0800c427 	.word	0x0800c427
 800c1d0:	0800c583 	.word	0x0800c583
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 8217 	beq.w	800c610 <USBH_Process+0x4a0>
      {
        USBH_UsrLog("USB Device Connected");
 800c1e2:	48a4      	ldr	r0, [pc, #656]	@ (800c474 <USBH_Process+0x304>)
 800c1e4:	f002 f940 	bl	800e468 <iprintf>
 800c1e8:	200a      	movs	r0, #10
 800c1ea:	f002 f94f 	bl	800e48c <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c1f4:	20c8      	movs	r0, #200	@ 0xc8
 800c1f6:	f001 ff64 	bl	800e0c2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f001 fe57 	bl	800deae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c210:	e1fe      	b.n	800c610 <USBH_Process+0x4a0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d10d      	bne.n	800c238 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800c21c:	4896      	ldr	r0, [pc, #600]	@ (800c478 <USBH_Process+0x308>)
 800c21e:	f002 f923 	bl	800e468 <iprintf>
 800c222:	200a      	movs	r0, #10
 800c224:	f002 f932 	bl	800e48c <putchar>
        phost->device.RstCnt = 0U;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2202      	movs	r2, #2
 800c234:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c236:	e1f8      	b.n	800c62a <USBH_Process+0x4ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c23e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c242:	d91a      	bls.n	800c27a <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c24a:	3301      	adds	r3, #1
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c25a:	2b03      	cmp	r3, #3
 800c25c:	d909      	bls.n	800c272 <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800c25e:	4887      	ldr	r0, [pc, #540]	@ (800c47c <USBH_Process+0x30c>)
 800c260:	f002 f902 	bl	800e468 <iprintf>
 800c264:	200a      	movs	r0, #10
 800c266:	f002 f911 	bl	800e48c <putchar>
            phost->gState = HOST_ABORT_STATE;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	220d      	movs	r2, #13
 800c26e:	701a      	strb	r2, [r3, #0]
      break;
 800c270:	e1db      	b.n	800c62a <USBH_Process+0x4ba>
            phost->gState = HOST_IDLE;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	701a      	strb	r2, [r3, #0]
      break;
 800c278:	e1d7      	b.n	800c62a <USBH_Process+0x4ba>
          phost->Timeout += 10U;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c280:	f103 020a 	add.w	r2, r3, #10
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800c28a:	200a      	movs	r0, #10
 800c28c:	f001 ff19 	bl	800e0c2 <USBH_Delay>
      break;
 800c290:	e1cb      	b.n	800c62a <USBH_Process+0x4ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d005      	beq.n	800c2a8 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c2a2:	2104      	movs	r1, #4
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c2a8:	2064      	movs	r0, #100	@ 0x64
 800c2aa:	f001 ff0a 	bl	800e0c2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f001 fdd6 	bl	800de60 <USBH_LL_GetSpeed>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2205      	movs	r2, #5
 800c2c2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f001 fbef 	bl	800daaa <USBH_AllocPipe>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c2d4:	2180      	movs	r1, #128	@ 0x80
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f001 fbe7 	bl	800daaa <USBH_AllocPipe>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	461a      	mov	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	7919      	ldrb	r1, [r3, #4]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c2f8:	9202      	str	r2, [sp, #8]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	9201      	str	r2, [sp, #4]
 800c2fe:	9300      	str	r3, [sp, #0]
 800c300:	4603      	mov	r3, r0
 800c302:	2280      	movs	r2, #128	@ 0x80
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f001 fba1 	bl	800da4c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	7959      	ldrb	r1, [r3, #5]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c31e:	9202      	str	r2, [sp, #8]
 800c320:	2200      	movs	r2, #0
 800c322:	9201      	str	r2, [sp, #4]
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	4603      	mov	r3, r0
 800c328:	2200      	movs	r2, #0
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f001 fb8e 	bl	800da4c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c330:	e17b      	b.n	800c62a <USBH_Process+0x4ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 f98c 	bl	800c650 <USBH_HandleEnum>
 800c338:	4603      	mov	r3, r0
 800c33a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	2b00      	cmp	r3, #0
 800c342:	f040 8167 	bne.w	800c614 <USBH_Process+0x4a4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800c346:	484e      	ldr	r0, [pc, #312]	@ (800c480 <USBH_Process+0x310>)
 800c348:	f002 f88e 	bl	800e468 <iprintf>
 800c34c:	200a      	movs	r0, #10
 800c34e:	f002 f89d 	bl	800e48c <putchar>

        phost->device.current_interface = 0U;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2200      	movs	r2, #0
 800c356:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800c360:	2b01      	cmp	r3, #1
 800c362:	d109      	bne.n	800c378 <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800c364:	4847      	ldr	r0, [pc, #284]	@ (800c484 <USBH_Process+0x314>)
 800c366:	f002 f87f 	bl	800e468 <iprintf>
 800c36a:	200a      	movs	r0, #10
 800c36c:	f002 f88e 	bl	800e48c <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2208      	movs	r2, #8
 800c374:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c376:	e14d      	b.n	800c614 <USBH_Process+0x4a4>
          phost->gState = HOST_INPUT;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2207      	movs	r2, #7
 800c37c:	701a      	strb	r2, [r3, #0]
      break;
 800c37e:	e149      	b.n	800c614 <USBH_Process+0x4a4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c386:	2b00      	cmp	r3, #0
 800c388:	f000 8146 	beq.w	800c618 <USBH_Process+0x4a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c392:	2101      	movs	r1, #1
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2208      	movs	r2, #8
 800c39c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c39e:	e13b      	b.n	800c618 <USBH_Process+0x4a8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fd98 	bl	800cede <USBH_SetCfg>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f040 8133 	bne.w	800c61c <USBH_Process+0x4ac>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2209      	movs	r2, #9
 800c3ba:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800c3bc:	4832      	ldr	r0, [pc, #200]	@ (800c488 <USBH_Process+0x318>)
 800c3be:	f002 f853 	bl	800e468 <iprintf>
 800c3c2:	200a      	movs	r0, #10
 800c3c4:	f002 f862 	bl	800e48c <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c3c8:	e128      	b.n	800c61c <USBH_Process+0x4ac>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800c3d0:	f003 0320 	and.w	r3, r3, #32
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d022      	beq.n	800c41e <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c3d8:	2101      	movs	r1, #1
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 fda2 	bl	800cf24 <USBH_SetFeature>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c3e4:	7bbb      	ldrb	r3, [r7, #14]
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d109      	bne.n	800c400 <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800c3ec:	4827      	ldr	r0, [pc, #156]	@ (800c48c <USBH_Process+0x31c>)
 800c3ee:	f002 f83b 	bl	800e468 <iprintf>
 800c3f2:	200a      	movs	r0, #10
 800c3f4:	f002 f84a 	bl	800e48c <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	220a      	movs	r2, #10
 800c3fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c3fe:	e10f      	b.n	800c620 <USBH_Process+0x4b0>
        else if (status == USBH_NOT_SUPPORTED)
 800c400:	7bbb      	ldrb	r3, [r7, #14]
 800c402:	b2db      	uxtb	r3, r3
 800c404:	2b03      	cmp	r3, #3
 800c406:	f040 810b 	bne.w	800c620 <USBH_Process+0x4b0>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800c40a:	4821      	ldr	r0, [pc, #132]	@ (800c490 <USBH_Process+0x320>)
 800c40c:	f002 f82c 	bl	800e468 <iprintf>
 800c410:	200a      	movs	r0, #10
 800c412:	f002 f83b 	bl	800e48c <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	220a      	movs	r2, #10
 800c41a:	701a      	strb	r2, [r3, #0]
      break;
 800c41c:	e100      	b.n	800c620 <USBH_Process+0x4b0>
        phost->gState = HOST_CHECK_CLASS;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	220a      	movs	r2, #10
 800c422:	701a      	strb	r2, [r3, #0]
      break;
 800c424:	e0fc      	b.n	800c620 <USBH_Process+0x4b0>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d106      	bne.n	800c43e <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 800c430:	4818      	ldr	r0, [pc, #96]	@ (800c494 <USBH_Process+0x324>)
 800c432:	f002 f819 	bl	800e468 <iprintf>
 800c436:	200a      	movs	r0, #10
 800c438:	f002 f828 	bl	800e48c <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c43c:	e0f5      	b.n	800c62a <USBH_Process+0x4ba>
        phost->pActiveClass = NULL;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c446:	2300      	movs	r3, #0
 800c448:	73fb      	strb	r3, [r7, #15]
 800c44a:	e028      	b.n	800c49e <USBH_Process+0x32e>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c44c:	7bfa      	ldrb	r2, [r7, #15]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	32de      	adds	r2, #222	@ 0xde
 800c452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c456:	791a      	ldrb	r2, [r3, #4]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800c45e:	429a      	cmp	r2, r3
 800c460:	d11a      	bne.n	800c498 <USBH_Process+0x328>
            phost->pActiveClass = phost->pClass[idx];
 800c462:	7bfa      	ldrb	r2, [r7, #15]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	32de      	adds	r2, #222	@ 0xde
 800c468:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800c472:	e017      	b.n	800c4a4 <USBH_Process+0x334>
 800c474:	0800f834 	.word	0x0800f834
 800c478:	0800f84c 	.word	0x0800f84c
 800c47c:	0800f868 	.word	0x0800f868
 800c480:	0800f894 	.word	0x0800f894
 800c484:	0800f8a8 	.word	0x0800f8a8
 800c488:	0800f8d0 	.word	0x0800f8d0
 800c48c:	0800f8ec 	.word	0x0800f8ec
 800c490:	0800f90c 	.word	0x0800f90c
 800c494:	0800f938 	.word	0x0800f938
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c498:	7bfb      	ldrb	r3, [r7, #15]
 800c49a:	3301      	adds	r3, #1
 800c49c:	73fb      	strb	r3, [r7, #15]
 800c49e:	7bfb      	ldrb	r3, [r7, #15]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0d3      	beq.n	800c44c <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d02c      	beq.n	800c508 <USBH_Process+0x398>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	4798      	blx	r3
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d114      	bne.n	800c4ea <USBH_Process+0x37a>
            phost->gState = HOST_CLASS_REQUEST;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2206      	movs	r2, #6
 800c4c4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	4858      	ldr	r0, [pc, #352]	@ (800c634 <USBH_Process+0x4c4>)
 800c4d2:	f001 ffc9 	bl	800e468 <iprintf>
 800c4d6:	200a      	movs	r0, #10
 800c4d8:	f001 ffd8 	bl	800e48c <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c4e2:	2103      	movs	r1, #3
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	4798      	blx	r3
      break;
 800c4e8:	e09f      	b.n	800c62a <USBH_Process+0x4ba>
            phost->gState = HOST_ABORT_STATE;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	220d      	movs	r2, #13
 800c4ee:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	484f      	ldr	r0, [pc, #316]	@ (800c638 <USBH_Process+0x4c8>)
 800c4fc:	f001 ffb4 	bl	800e468 <iprintf>
 800c500:	200a      	movs	r0, #10
 800c502:	f001 ffc3 	bl	800e48c <putchar>
      break;
 800c506:	e090      	b.n	800c62a <USBH_Process+0x4ba>
          phost->gState = HOST_ABORT_STATE;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	220d      	movs	r2, #13
 800c50c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800c50e:	484b      	ldr	r0, [pc, #300]	@ (800c63c <USBH_Process+0x4cc>)
 800c510:	f001 ffaa 	bl	800e468 <iprintf>
 800c514:	200a      	movs	r0, #10
 800c516:	f001 ffb9 	bl	800e48c <putchar>
      break;
 800c51a:	e086      	b.n	800c62a <USBH_Process+0x4ba>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c522:	2b00      	cmp	r3, #0
 800c524:	d020      	beq.n	800c568 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c52c:	691b      	ldr	r3, [r3, #16]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	4798      	blx	r3
 800c532:	4603      	mov	r3, r0
 800c534:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c536:	7bbb      	ldrb	r3, [r7, #14]
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d103      	bne.n	800c546 <USBH_Process+0x3d6>
        {
          phost->gState = HOST_CLASS;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	220b      	movs	r2, #11
 800c542:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c544:	e06e      	b.n	800c624 <USBH_Process+0x4b4>
        else if (status == USBH_FAIL)
 800c546:	7bbb      	ldrb	r3, [r7, #14]
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d16a      	bne.n	800c624 <USBH_Process+0x4b4>
          phost->gState = HOST_ABORT_STATE;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	220d      	movs	r2, #13
 800c552:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800c554:	483a      	ldr	r0, [pc, #232]	@ (800c640 <USBH_Process+0x4d0>)
 800c556:	f001 ff87 	bl	800e468 <iprintf>
 800c55a:	483a      	ldr	r0, [pc, #232]	@ (800c644 <USBH_Process+0x4d4>)
 800c55c:	f001 ff84 	bl	800e468 <iprintf>
 800c560:	200a      	movs	r0, #10
 800c562:	f001 ff93 	bl	800e48c <putchar>
      break;
 800c566:	e05d      	b.n	800c624 <USBH_Process+0x4b4>
        phost->gState = HOST_ABORT_STATE;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	220d      	movs	r2, #13
 800c56c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800c56e:	4834      	ldr	r0, [pc, #208]	@ (800c640 <USBH_Process+0x4d0>)
 800c570:	f001 ff7a 	bl	800e468 <iprintf>
 800c574:	4834      	ldr	r0, [pc, #208]	@ (800c648 <USBH_Process+0x4d8>)
 800c576:	f001 ff77 	bl	800e468 <iprintf>
 800c57a:	200a      	movs	r0, #10
 800c57c:	f001 ff86 	bl	800e48c <putchar>
      break;
 800c580:	e050      	b.n	800c624 <USBH_Process+0x4b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d04d      	beq.n	800c628 <USBH_Process+0x4b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c592:	695b      	ldr	r3, [r3, #20]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	4798      	blx	r3
      }
      break;
 800c598:	e046      	b.n	800c628 <USBH_Process+0x4b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff fc72 	bl	800be8c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d009      	beq.n	800c5c6 <USBH_Process+0x456>
      {
        phost->pActiveClass->DeInit(phost);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d005      	beq.n	800c5dc <USBH_Process+0x46c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c5d6:	2105      	movs	r1, #5
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800c5dc:	481b      	ldr	r0, [pc, #108]	@ (800c64c <USBH_Process+0x4dc>)
 800c5de:	f001 ff43 	bl	800e468 <iprintf>
 800c5e2:	200a      	movs	r0, #10
 800c5e4:	f001 ff52 	bl	800e48c <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d107      	bne.n	800c604 <USBH_Process+0x494>
      {
        phost->device.is_ReEnumerated = 0U;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f7ff fda7 	bl	800c150 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c602:	e012      	b.n	800c62a <USBH_Process+0x4ba>
        (void)USBH_LL_Start(phost);
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f001 fbf5 	bl	800ddf4 <USBH_LL_Start>
      break;
 800c60a:	e00e      	b.n	800c62a <USBH_Process+0x4ba>

    case HOST_ABORT_STATE:
    default :
      break;
 800c60c:	bf00      	nop
 800c60e:	e00c      	b.n	800c62a <USBH_Process+0x4ba>
      break;
 800c610:	bf00      	nop
 800c612:	e00a      	b.n	800c62a <USBH_Process+0x4ba>
      break;
 800c614:	bf00      	nop
 800c616:	e008      	b.n	800c62a <USBH_Process+0x4ba>
    break;
 800c618:	bf00      	nop
 800c61a:	e006      	b.n	800c62a <USBH_Process+0x4ba>
      break;
 800c61c:	bf00      	nop
 800c61e:	e004      	b.n	800c62a <USBH_Process+0x4ba>
      break;
 800c620:	bf00      	nop
 800c622:	e002      	b.n	800c62a <USBH_Process+0x4ba>
      break;
 800c624:	bf00      	nop
 800c626:	e000      	b.n	800c62a <USBH_Process+0x4ba>
      break;
 800c628:	bf00      	nop
  }
  return USBH_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	0800f958 	.word	0x0800f958
 800c638:	0800f96c 	.word	0x0800f96c
 800c63c:	0800f98c 	.word	0x0800f98c
 800c640:	0800f774 	.word	0x0800f774
 800c644:	0800f9b4 	.word	0x0800f9b4
 800c648:	0800f9dc 	.word	0x0800f9dc
 800c64c:	0800f9f4 	.word	0x0800f9f4

0800c650 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b088      	sub	sp, #32
 800c654:	af04      	add	r7, sp, #16
 800c656:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c658:	2301      	movs	r3, #1
 800c65a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c65c:	2301      	movs	r3, #1
 800c65e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	785b      	ldrb	r3, [r3, #1]
 800c664:	2b07      	cmp	r3, #7
 800c666:	f200 827b 	bhi.w	800cb60 <USBH_HandleEnum+0x510>
 800c66a:	a201      	add	r2, pc, #4	@ (adr r2, 800c670 <USBH_HandleEnum+0x20>)
 800c66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c670:	0800c691 	.word	0x0800c691
 800c674:	0800c769 	.word	0x0800c769
 800c678:	0800c819 	.word	0x0800c819
 800c67c:	0800c8d5 	.word	0x0800c8d5
 800c680:	0800c95d 	.word	0x0800c95d
 800c684:	0800ca0f 	.word	0x0800ca0f
 800c688:	0800ca83 	.word	0x0800ca83
 800c68c:	0800caf5 	.word	0x0800caf5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c690:	2108      	movs	r1, #8
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 fb16 	bl	800ccc4 <USBH_Get_DevDesc>
 800c698:	4603      	mov	r3, r0
 800c69a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c69c:	7bbb      	ldrb	r3, [r7, #14]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d12e      	bne.n	800c700 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	7919      	ldrb	r1, [r3, #4]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c6c6:	9202      	str	r2, [sp, #8]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	9201      	str	r2, [sp, #4]
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2280      	movs	r2, #128	@ 0x80
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f001 f9ba 	bl	800da4c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	7959      	ldrb	r1, [r3, #5]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c6e8:	687a      	ldr	r2, [r7, #4]
 800c6ea:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c6ec:	9202      	str	r2, [sp, #8]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	9201      	str	r2, [sp, #4]
 800c6f2:	9300      	str	r3, [sp, #0]
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f001 f9a7 	bl	800da4c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c6fe:	e231      	b.n	800cb64 <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c700:	7bbb      	ldrb	r3, [r7, #14]
 800c702:	2b03      	cmp	r3, #3
 800c704:	f040 822e 	bne.w	800cb64 <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800c708:	48ae      	ldr	r0, [pc, #696]	@ (800c9c4 <USBH_HandleEnum+0x374>)
 800c70a:	f001 fead 	bl	800e468 <iprintf>
 800c70e:	48ae      	ldr	r0, [pc, #696]	@ (800c9c8 <USBH_HandleEnum+0x378>)
 800c710:	f001 feaa 	bl	800e468 <iprintf>
 800c714:	200a      	movs	r0, #10
 800c716:	f001 feb9 	bl	800e48c <putchar>
        phost->device.EnumCnt++;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c720:	3301      	adds	r3, #1
 800c722:	b2da      	uxtb	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c730:	2b03      	cmp	r3, #3
 800c732:	d909      	bls.n	800c748 <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800c734:	48a5      	ldr	r0, [pc, #660]	@ (800c9cc <USBH_HandleEnum+0x37c>)
 800c736:	f001 fe97 	bl	800e468 <iprintf>
 800c73a:	200a      	movs	r0, #10
 800c73c:	f001 fea6 	bl	800e48c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	220d      	movs	r2, #13
 800c744:	701a      	strb	r2, [r3, #0]
      break;
 800c746:	e20d      	b.n	800cb64 <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	795b      	ldrb	r3, [r3, #5]
 800c74c:	4619      	mov	r1, r3
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f001 f9cc 	bl	800daec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	791b      	ldrb	r3, [r3, #4]
 800c758:	4619      	mov	r1, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f001 f9c6 	bl	800daec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	701a      	strb	r2, [r3, #0]
      break;
 800c766:	e1fd      	b.n	800cb64 <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c768:	2112      	movs	r1, #18
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 faaa 	bl	800ccc4 <USBH_Get_DevDesc>
 800c770:	4603      	mov	r3, r0
 800c772:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c774:	7bbb      	ldrb	r3, [r7, #14]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d117      	bne.n	800c7aa <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8b3 3330 	ldrh.w	r3, [r3, #816]	@ 0x330
 800c780:	4619      	mov	r1, r3
 800c782:	4893      	ldr	r0, [pc, #588]	@ (800c9d0 <USBH_HandleEnum+0x380>)
 800c784:	f001 fe70 	bl	800e468 <iprintf>
 800c788:	200a      	movs	r0, #10
 800c78a:	f001 fe7f 	bl	800e48c <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8b3 332e 	ldrh.w	r3, [r3, #814]	@ 0x32e
 800c794:	4619      	mov	r1, r3
 800c796:	488f      	ldr	r0, [pc, #572]	@ (800c9d4 <USBH_HandleEnum+0x384>)
 800c798:	f001 fe66 	bl	800e468 <iprintf>
 800c79c:	200a      	movs	r0, #10
 800c79e:	f001 fe75 	bl	800e48c <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2202      	movs	r2, #2
 800c7a6:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c7a8:	e1de      	b.n	800cb68 <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7aa:	7bbb      	ldrb	r3, [r7, #14]
 800c7ac:	2b03      	cmp	r3, #3
 800c7ae:	f040 81db 	bne.w	800cb68 <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800c7b2:	4884      	ldr	r0, [pc, #528]	@ (800c9c4 <USBH_HandleEnum+0x374>)
 800c7b4:	f001 fe58 	bl	800e468 <iprintf>
 800c7b8:	4887      	ldr	r0, [pc, #540]	@ (800c9d8 <USBH_HandleEnum+0x388>)
 800c7ba:	f001 fe55 	bl	800e468 <iprintf>
 800c7be:	200a      	movs	r0, #10
 800c7c0:	f001 fe64 	bl	800e48c <putchar>
        phost->device.EnumCnt++;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	b2da      	uxtb	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c7da:	2b03      	cmp	r3, #3
 800c7dc:	d909      	bls.n	800c7f2 <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800c7de:	487b      	ldr	r0, [pc, #492]	@ (800c9cc <USBH_HandleEnum+0x37c>)
 800c7e0:	f001 fe42 	bl	800e468 <iprintf>
 800c7e4:	200a      	movs	r0, #10
 800c7e6:	f001 fe51 	bl	800e48c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	220d      	movs	r2, #13
 800c7ee:	701a      	strb	r2, [r3, #0]
      break;
 800c7f0:	e1ba      	b.n	800cb68 <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	795b      	ldrb	r3, [r3, #5]
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f001 f977 	bl	800daec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	791b      	ldrb	r3, [r3, #4]
 800c802:	4619      	mov	r1, r3
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f001 f971 	bl	800daec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	701a      	strb	r2, [r3, #0]
      break;
 800c816:	e1a7      	b.n	800cb68 <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c818:	2101      	movs	r1, #1
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 fb3b 	bl	800ce96 <USBH_SetAddress>
 800c820:	4603      	mov	r3, r0
 800c822:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c824:	7bbb      	ldrb	r3, [r7, #14]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d13a      	bne.n	800c8a0 <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 800c82a:	2002      	movs	r0, #2
 800c82c:	f001 fc49 	bl	800e0c2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f893 331c 	ldrb.w	r3, [r3, #796]	@ 0x31c
 800c83e:	4619      	mov	r1, r3
 800c840:	4866      	ldr	r0, [pc, #408]	@ (800c9dc <USBH_HandleEnum+0x38c>)
 800c842:	f001 fe11 	bl	800e468 <iprintf>
 800c846:	200a      	movs	r0, #10
 800c848:	f001 fe20 	bl	800e48c <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2203      	movs	r2, #3
 800c850:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	7919      	ldrb	r1, [r3, #4]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c866:	9202      	str	r2, [sp, #8]
 800c868:	2200      	movs	r2, #0
 800c86a:	9201      	str	r2, [sp, #4]
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	4603      	mov	r3, r0
 800c870:	2280      	movs	r2, #128	@ 0x80
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f001 f8ea 	bl	800da4c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	7959      	ldrb	r1, [r3, #5]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c88c:	9202      	str	r2, [sp, #8]
 800c88e:	2200      	movs	r2, #0
 800c890:	9201      	str	r2, [sp, #4]
 800c892:	9300      	str	r3, [sp, #0]
 800c894:	4603      	mov	r3, r0
 800c896:	2200      	movs	r2, #0
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f001 f8d7 	bl	800da4c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c89e:	e165      	b.n	800cb6c <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8a0:	7bbb      	ldrb	r3, [r7, #14]
 800c8a2:	2b03      	cmp	r3, #3
 800c8a4:	f040 8162 	bne.w	800cb6c <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800c8a8:	4846      	ldr	r0, [pc, #280]	@ (800c9c4 <USBH_HandleEnum+0x374>)
 800c8aa:	f001 fddd 	bl	800e468 <iprintf>
 800c8ae:	484c      	ldr	r0, [pc, #304]	@ (800c9e0 <USBH_HandleEnum+0x390>)
 800c8b0:	f001 fdda 	bl	800e468 <iprintf>
 800c8b4:	200a      	movs	r0, #10
 800c8b6:	f001 fde9 	bl	800e48c <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800c8ba:	4844      	ldr	r0, [pc, #272]	@ (800c9cc <USBH_HandleEnum+0x37c>)
 800c8bc:	f001 fdd4 	bl	800e468 <iprintf>
 800c8c0:	200a      	movs	r0, #10
 800c8c2:	f001 fde3 	bl	800e48c <putchar>
        phost->gState = HOST_ABORT_STATE;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	220d      	movs	r2, #13
 800c8ca:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	705a      	strb	r2, [r3, #1]
      break;
 800c8d2:	e14b      	b.n	800cb6c <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c8d4:	2109      	movs	r1, #9
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fa2e 	bl	800cd38 <USBH_Get_CfgDesc>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c8e0:	7bbb      	ldrb	r3, [r7, #14]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d103      	bne.n	800c8ee <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2204      	movs	r2, #4
 800c8ea:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c8ec:	e140      	b.n	800cb70 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8ee:	7bbb      	ldrb	r3, [r7, #14]
 800c8f0:	2b03      	cmp	r3, #3
 800c8f2:	f040 813d 	bne.w	800cb70 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800c8f6:	4833      	ldr	r0, [pc, #204]	@ (800c9c4 <USBH_HandleEnum+0x374>)
 800c8f8:	f001 fdb6 	bl	800e468 <iprintf>
 800c8fc:	4839      	ldr	r0, [pc, #228]	@ (800c9e4 <USBH_HandleEnum+0x394>)
 800c8fe:	f001 fdb3 	bl	800e468 <iprintf>
 800c902:	200a      	movs	r0, #10
 800c904:	f001 fdc2 	bl	800e48c <putchar>
        phost->device.EnumCnt++;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c90e:	3301      	adds	r3, #1
 800c910:	b2da      	uxtb	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c91e:	2b03      	cmp	r3, #3
 800c920:	d909      	bls.n	800c936 <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800c922:	482a      	ldr	r0, [pc, #168]	@ (800c9cc <USBH_HandleEnum+0x37c>)
 800c924:	f001 fda0 	bl	800e468 <iprintf>
 800c928:	200a      	movs	r0, #10
 800c92a:	f001 fdaf 	bl	800e48c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	220d      	movs	r2, #13
 800c932:	701a      	strb	r2, [r3, #0]
      break;
 800c934:	e11c      	b.n	800cb70 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	795b      	ldrb	r3, [r3, #5]
 800c93a:	4619      	mov	r1, r3
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f001 f8d5 	bl	800daec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	791b      	ldrb	r3, [r3, #4]
 800c946:	4619      	mov	r1, r3
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f001 f8cf 	bl	800daec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2200      	movs	r2, #0
 800c952:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2200      	movs	r2, #0
 800c958:	701a      	strb	r2, [r3, #0]
      break;
 800c95a:	e109      	b.n	800cb70 <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800c962:	4619      	mov	r1, r3
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f9e7 	bl	800cd38 <USBH_Get_CfgDesc>
 800c96a:	4603      	mov	r3, r0
 800c96c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c96e:	7bbb      	ldrb	r3, [r7, #14]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d103      	bne.n	800c97c <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2205      	movs	r2, #5
 800c978:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c97a:	e0fb      	b.n	800cb74 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c97c:	7bbb      	ldrb	r3, [r7, #14]
 800c97e:	2b03      	cmp	r3, #3
 800c980:	f040 80f8 	bne.w	800cb74 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800c984:	480f      	ldr	r0, [pc, #60]	@ (800c9c4 <USBH_HandleEnum+0x374>)
 800c986:	f001 fd6f 	bl	800e468 <iprintf>
 800c98a:	4816      	ldr	r0, [pc, #88]	@ (800c9e4 <USBH_HandleEnum+0x394>)
 800c98c:	f001 fd6c 	bl	800e468 <iprintf>
 800c990:	200a      	movs	r0, #10
 800c992:	f001 fd7b 	bl	800e48c <putchar>
        phost->device.EnumCnt++;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c99c:	3301      	adds	r3, #1
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c9ac:	2b03      	cmp	r3, #3
 800c9ae:	d91b      	bls.n	800c9e8 <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800c9b0:	4806      	ldr	r0, [pc, #24]	@ (800c9cc <USBH_HandleEnum+0x37c>)
 800c9b2:	f001 fd59 	bl	800e468 <iprintf>
 800c9b6:	200a      	movs	r0, #10
 800c9b8:	f001 fd68 	bl	800e48c <putchar>
          phost->gState = HOST_ABORT_STATE;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	220d      	movs	r2, #13
 800c9c0:	701a      	strb	r2, [r3, #0]
      break;
 800c9c2:	e0d7      	b.n	800cb74 <USBH_HandleEnum+0x524>
 800c9c4:	0800f774 	.word	0x0800f774
 800c9c8:	0800fa0c 	.word	0x0800fa0c
 800c9cc:	0800fa40 	.word	0x0800fa40
 800c9d0:	0800fa80 	.word	0x0800fa80
 800c9d4:	0800fa8c 	.word	0x0800fa8c
 800c9d8:	0800fa98 	.word	0x0800fa98
 800c9dc:	0800fad4 	.word	0x0800fad4
 800c9e0:	0800faec 	.word	0x0800faec
 800c9e4:	0800fb20 	.word	0x0800fb20
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	795b      	ldrb	r3, [r3, #5]
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f001 f87c 	bl	800daec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	791b      	ldrb	r3, [r3, #4]
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f001 f876 	bl	800daec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	701a      	strb	r2, [r3, #0]
      break;
 800ca0c:	e0b2      	b.n	800cb74 <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d02a      	beq.n	800ca6e <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ca24:	23ff      	movs	r3, #255	@ 0xff
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 f9be 	bl	800cda8 <USBH_Get_StringDesc>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10d      	bne.n	800ca52 <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	4853      	ldr	r0, [pc, #332]	@ (800cb8c <USBH_HandleEnum+0x53c>)
 800ca40:	f001 fd12 	bl	800e468 <iprintf>
 800ca44:	200a      	movs	r0, #10
 800ca46:	f001 fd21 	bl	800e48c <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2206      	movs	r2, #6
 800ca4e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ca50:	e092      	b.n	800cb78 <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca52:	7bbb      	ldrb	r3, [r7, #14]
 800ca54:	2b03      	cmp	r3, #3
 800ca56:	f040 808f 	bne.w	800cb78 <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 800ca5a:	484d      	ldr	r0, [pc, #308]	@ (800cb90 <USBH_HandleEnum+0x540>)
 800ca5c:	f001 fd04 	bl	800e468 <iprintf>
 800ca60:	200a      	movs	r0, #10
 800ca62:	f001 fd13 	bl	800e48c <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2206      	movs	r2, #6
 800ca6a:	705a      	strb	r2, [r3, #1]
      break;
 800ca6c:	e084      	b.n	800cb78 <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 800ca6e:	4848      	ldr	r0, [pc, #288]	@ (800cb90 <USBH_HandleEnum+0x540>)
 800ca70:	f001 fcfa 	bl	800e468 <iprintf>
 800ca74:	200a      	movs	r0, #10
 800ca76:	f001 fd09 	bl	800e48c <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2206      	movs	r2, #6
 800ca7e:	705a      	strb	r2, [r3, #1]
      break;
 800ca80:	e07a      	b.n	800cb78 <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d029      	beq.n	800cae0 <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ca98:	23ff      	movs	r3, #255	@ 0xff
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f984 	bl	800cda8 <USBH_Get_StringDesc>
 800caa0:	4603      	mov	r3, r0
 800caa2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800caa4:	7bbb      	ldrb	r3, [r7, #14]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d10d      	bne.n	800cac6 <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cab0:	4619      	mov	r1, r3
 800cab2:	4838      	ldr	r0, [pc, #224]	@ (800cb94 <USBH_HandleEnum+0x544>)
 800cab4:	f001 fcd8 	bl	800e468 <iprintf>
 800cab8:	200a      	movs	r0, #10
 800caba:	f001 fce7 	bl	800e48c <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2207      	movs	r2, #7
 800cac2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cac4:	e05a      	b.n	800cb7c <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cac6:	7bbb      	ldrb	r3, [r7, #14]
 800cac8:	2b03      	cmp	r3, #3
 800caca:	d157      	bne.n	800cb7c <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 800cacc:	4832      	ldr	r0, [pc, #200]	@ (800cb98 <USBH_HandleEnum+0x548>)
 800cace:	f001 fccb 	bl	800e468 <iprintf>
 800cad2:	200a      	movs	r0, #10
 800cad4:	f001 fcda 	bl	800e48c <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2207      	movs	r2, #7
 800cadc:	705a      	strb	r2, [r3, #1]
      break;
 800cade:	e04d      	b.n	800cb7c <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 800cae0:	482d      	ldr	r0, [pc, #180]	@ (800cb98 <USBH_HandleEnum+0x548>)
 800cae2:	f001 fcc1 	bl	800e468 <iprintf>
 800cae6:	200a      	movs	r0, #10
 800cae8:	f001 fcd0 	bl	800e48c <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2207      	movs	r2, #7
 800caf0:	705a      	strb	r2, [r3, #1]
      break;
 800caf2:	e043      	b.n	800cb7c <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d027      	beq.n	800cb4e <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cb0a:	23ff      	movs	r3, #255	@ 0xff
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f94b 	bl	800cda8 <USBH_Get_StringDesc>
 800cb12:	4603      	mov	r3, r0
 800cb14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cb16:	7bbb      	ldrb	r3, [r7, #14]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10c      	bne.n	800cb36 <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cb22:	4619      	mov	r1, r3
 800cb24:	481d      	ldr	r0, [pc, #116]	@ (800cb9c <USBH_HandleEnum+0x54c>)
 800cb26:	f001 fc9f 	bl	800e468 <iprintf>
 800cb2a:	200a      	movs	r0, #10
 800cb2c:	f001 fcae 	bl	800e48c <putchar>
          Status = USBH_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cb34:	e024      	b.n	800cb80 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb36:	7bbb      	ldrb	r3, [r7, #14]
 800cb38:	2b03      	cmp	r3, #3
 800cb3a:	d121      	bne.n	800cb80 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 800cb3c:	4818      	ldr	r0, [pc, #96]	@ (800cba0 <USBH_HandleEnum+0x550>)
 800cb3e:	f001 fc93 	bl	800e468 <iprintf>
 800cb42:	200a      	movs	r0, #10
 800cb44:	f001 fca2 	bl	800e48c <putchar>
          Status = USBH_OK;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	73fb      	strb	r3, [r7, #15]
      break;
 800cb4c:	e018      	b.n	800cb80 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 800cb4e:	4814      	ldr	r0, [pc, #80]	@ (800cba0 <USBH_HandleEnum+0x550>)
 800cb50:	f001 fc8a 	bl	800e468 <iprintf>
 800cb54:	200a      	movs	r0, #10
 800cb56:	f001 fc99 	bl	800e48c <putchar>
        Status = USBH_OK;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb5e:	e00f      	b.n	800cb80 <USBH_HandleEnum+0x530>

    default:
      break;
 800cb60:	bf00      	nop
 800cb62:	e00e      	b.n	800cb82 <USBH_HandleEnum+0x532>
      break;
 800cb64:	bf00      	nop
 800cb66:	e00c      	b.n	800cb82 <USBH_HandleEnum+0x532>
      break;
 800cb68:	bf00      	nop
 800cb6a:	e00a      	b.n	800cb82 <USBH_HandleEnum+0x532>
      break;
 800cb6c:	bf00      	nop
 800cb6e:	e008      	b.n	800cb82 <USBH_HandleEnum+0x532>
      break;
 800cb70:	bf00      	nop
 800cb72:	e006      	b.n	800cb82 <USBH_HandleEnum+0x532>
      break;
 800cb74:	bf00      	nop
 800cb76:	e004      	b.n	800cb82 <USBH_HandleEnum+0x532>
      break;
 800cb78:	bf00      	nop
 800cb7a:	e002      	b.n	800cb82 <USBH_HandleEnum+0x532>
      break;
 800cb7c:	bf00      	nop
 800cb7e:	e000      	b.n	800cb82 <USBH_HandleEnum+0x532>
      break;
 800cb80:	bf00      	nop
  }
  return Status;
 800cb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	0800fb64 	.word	0x0800fb64
 800cb90:	0800fb78 	.word	0x0800fb78
 800cb94:	0800fb8c 	.word	0x0800fb8c
 800cb98:	0800fb9c 	.word	0x0800fb9c
 800cb9c:	0800fbac 	.word	0x0800fbac
 800cba0:	0800fbc0 	.word	0x0800fbc0

0800cba4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	683a      	ldr	r2, [r7, #0]
 800cbb2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800cbb6:	bf00      	nop
 800cbb8:	370c      	adds	r7, #12
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b082      	sub	sp, #8
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800cbd0:	1c5a      	adds	r2, r3, #1
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 f804 	bl	800cbe6 <USBH_HandleSof>
}
 800cbde:	bf00      	nop
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b082      	sub	sp, #8
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b0b      	cmp	r3, #11
 800cbf6:	d10a      	bne.n	800cc0e <USBH_HandleSof+0x28>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d005      	beq.n	800cc0e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc08:	699b      	ldr	r3, [r3, #24]
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	4798      	blx	r3
  }
}
 800cc0e:	bf00      	nop
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cc16:	b480      	push	{r7}
 800cc18:	b083      	sub	sp, #12
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2201      	movs	r2, #1
 800cc22:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800cc26:	bf00      	nop
}
 800cc28:	370c      	adds	r7, #12
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr

0800cc32 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cc32:	b480      	push	{r7}
 800cc34:	b083      	sub	sp, #12
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800cc42:	bf00      	nop
}
 800cc44:	370c      	adds	r7, #12
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr

0800cc4e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cc4e:	b480      	push	{r7}
 800cc50:	b083      	sub	sp, #12
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2201      	movs	r2, #1
 800cc5a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cc6e:	2300      	movs	r3, #0
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	370c      	adds	r7, #12
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f001 f8c4 	bl	800de2a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	791b      	ldrb	r3, [r3, #4]
 800cca6:	4619      	mov	r1, r3
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 ff1f 	bl	800daec <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	795b      	ldrb	r3, [r3, #5]
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 ff19 	bl	800daec <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b086      	sub	sp, #24
 800ccc8:	af02      	add	r7, sp, #8
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	460b      	mov	r3, r1
 800ccce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800ccd0:	887b      	ldrh	r3, [r7, #2]
 800ccd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ccd6:	d90a      	bls.n	800ccee <USBH_Get_DevDesc+0x2a>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800ccd8:	4815      	ldr	r0, [pc, #84]	@ (800cd30 <USBH_Get_DevDesc+0x6c>)
 800ccda:	f001 fbc5 	bl	800e468 <iprintf>
 800ccde:	4815      	ldr	r0, [pc, #84]	@ (800cd34 <USBH_Get_DevDesc+0x70>)
 800cce0:	f001 fbc2 	bl	800e468 <iprintf>
 800cce4:	200a      	movs	r0, #10
 800cce6:	f001 fbd1 	bl	800e48c <putchar>
    return USBH_NOT_SUPPORTED;
 800ccea:	2303      	movs	r3, #3
 800ccec:	e01b      	b.n	800cd26 <USBH_Get_DevDesc+0x62>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ccf4:	887b      	ldrh	r3, [r7, #2]
 800ccf6:	9300      	str	r3, [sp, #0]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ccfe:	2100      	movs	r1, #0
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 f893 	bl	800ce2c <USBH_GetDescriptor>
 800cd06:	4603      	mov	r3, r0
 800cd08:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800cd0a:	7bfb      	ldrb	r3, [r7, #15]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d109      	bne.n	800cd24 <USBH_Get_DevDesc+0x60>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cd16:	887a      	ldrh	r2, [r7, #2]
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 f94a 	bl	800cfb4 <USBH_ParseDevDesc>
 800cd20:	4603      	mov	r3, r0
 800cd22:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	0800fbd4 	.word	0x0800fbd4
 800cd34:	0800fbdc 	.word	0x0800fbdc

0800cd38 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b086      	sub	sp, #24
 800cd3c:	af02      	add	r7, sp, #8
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	460b      	mov	r3, r1
 800cd42:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	331c      	adds	r3, #28
 800cd48:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800cd4a:	887b      	ldrh	r3, [r7, #2]
 800cd4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd50:	d90a      	bls.n	800cd68 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 800cd52:	4813      	ldr	r0, [pc, #76]	@ (800cda0 <USBH_Get_CfgDesc+0x68>)
 800cd54:	f001 fb88 	bl	800e468 <iprintf>
 800cd58:	4812      	ldr	r0, [pc, #72]	@ (800cda4 <USBH_Get_CfgDesc+0x6c>)
 800cd5a:	f001 fb85 	bl	800e468 <iprintf>
 800cd5e:	200a      	movs	r0, #10
 800cd60:	f001 fb94 	bl	800e48c <putchar>
    return USBH_NOT_SUPPORTED;
 800cd64:	2303      	movs	r3, #3
 800cd66:	e016      	b.n	800cd96 <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cd68:	887b      	ldrh	r3, [r7, #2]
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd72:	2100      	movs	r1, #0
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 f859 	bl	800ce2c <USBH_GetDescriptor>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800cd7e:	7bfb      	ldrb	r3, [r7, #15]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d107      	bne.n	800cd94 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800cd84:	887b      	ldrh	r3, [r7, #2]
 800cd86:	461a      	mov	r2, r3
 800cd88:	68b9      	ldr	r1, [r7, #8]
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 f9c2 	bl	800d114 <USBH_ParseCfgDesc>
 800cd90:	4603      	mov	r3, r0
 800cd92:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	0800fbd4 	.word	0x0800fbd4
 800cda4:	0800fc20 	.word	0x0800fc20

0800cda8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b088      	sub	sp, #32
 800cdac:	af02      	add	r7, sp, #8
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	607a      	str	r2, [r7, #4]
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	72fb      	strb	r3, [r7, #11]
 800cdb8:	4613      	mov	r3, r2
 800cdba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800cdbc:	893b      	ldrh	r3, [r7, #8]
 800cdbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdc2:	d802      	bhi.n	800cdca <USBH_Get_StringDesc+0x22>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d10a      	bne.n	800cde0 <USBH_Get_StringDesc+0x38>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800cdca:	4816      	ldr	r0, [pc, #88]	@ (800ce24 <USBH_Get_StringDesc+0x7c>)
 800cdcc:	f001 fb4c 	bl	800e468 <iprintf>
 800cdd0:	4815      	ldr	r0, [pc, #84]	@ (800ce28 <USBH_Get_StringDesc+0x80>)
 800cdd2:	f001 fb49 	bl	800e468 <iprintf>
 800cdd6:	200a      	movs	r0, #10
 800cdd8:	f001 fb58 	bl	800e48c <putchar>
    return USBH_NOT_SUPPORTED;
 800cddc:	2303      	movs	r3, #3
 800cdde:	e01c      	b.n	800ce1a <USBH_Get_StringDesc+0x72>
  }

  status = USBH_GetDescriptor(phost,
 800cde0:	7afb      	ldrb	r3, [r7, #11]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800cde8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800cdf0:	893b      	ldrh	r3, [r7, #8]
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f000 f817 	bl	800ce2c <USBH_GetDescriptor>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ce02:	7dfb      	ldrb	r3, [r7, #23]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d107      	bne.n	800ce18 <USBH_Get_StringDesc+0x70>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ce0e:	893a      	ldrh	r2, [r7, #8]
 800ce10:	6879      	ldr	r1, [r7, #4]
 800ce12:	4618      	mov	r0, r3
 800ce14:	f000 fb92 	bl	800d53c <USBH_ParseStringDesc>
  }

  return status;
 800ce18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3718      	adds	r7, #24
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop
 800ce24:	0800fbd4 	.word	0x0800fbd4
 800ce28:	0800fc6c 	.word	0x0800fc6c

0800ce2c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	607b      	str	r3, [r7, #4]
 800ce36:	460b      	mov	r3, r1
 800ce38:	72fb      	strb	r3, [r7, #11]
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	789b      	ldrb	r3, [r3, #2]
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d11c      	bne.n	800ce80 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ce46:	7afb      	ldrb	r3, [r7, #11]
 800ce48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2206      	movs	r2, #6
 800ce56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	893a      	ldrh	r2, [r7, #8]
 800ce5c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ce5e:	893b      	ldrh	r3, [r7, #8]
 800ce60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ce64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce68:	d104      	bne.n	800ce74 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f240 4209 	movw	r2, #1033	@ 0x409
 800ce70:	829a      	strh	r2, [r3, #20]
 800ce72:	e002      	b.n	800ce7a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2200      	movs	r2, #0
 800ce78:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	8b3a      	ldrh	r2, [r7, #24]
 800ce7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ce80:	8b3b      	ldrh	r3, [r7, #24]
 800ce82:	461a      	mov	r2, r3
 800ce84:	6879      	ldr	r1, [r7, #4]
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f000 fba5 	bl	800d5d6 <USBH_CtlReq>
 800ce8c:	4603      	mov	r3, r0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b082      	sub	sp, #8
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
 800ce9e:	460b      	mov	r3, r1
 800cea0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	789b      	ldrb	r3, [r3, #2]
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d10f      	bne.n	800ceca <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2205      	movs	r2, #5
 800ceb4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ceb6:	78fb      	ldrb	r3, [r7, #3]
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ceca:	2200      	movs	r2, #0
 800cecc:	2100      	movs	r1, #0
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 fb81 	bl	800d5d6 <USBH_CtlReq>
 800ced4:	4603      	mov	r3, r0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b082      	sub	sp, #8
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	460b      	mov	r3, r1
 800cee8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	789b      	ldrb	r3, [r3, #2]
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d10e      	bne.n	800cf10 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2209      	movs	r2, #9
 800cefc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	887a      	ldrh	r2, [r7, #2]
 800cf02:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cf10:	2200      	movs	r2, #0
 800cf12:	2100      	movs	r1, #0
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fb5e 	bl	800d5d6 <USBH_CtlReq>
 800cf1a:	4603      	mov	r3, r0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	789b      	ldrb	r3, [r3, #2]
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d10f      	bne.n	800cf58 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2203      	movs	r2, #3
 800cf42:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800cf44:	78fb      	ldrb	r3, [r7, #3]
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cf58:	2200      	movs	r2, #0
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 fb3a 	bl	800d5d6 <USBH_CtlReq>
 800cf62:	4603      	mov	r3, r0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	460b      	mov	r3, r1
 800cf76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	789b      	ldrb	r3, [r3, #2]
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d10f      	bne.n	800cfa0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2202      	movs	r2, #2
 800cf84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800cf92:	78fb      	ldrb	r3, [r7, #3]
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fb16 	bl	800d5d6 <USBH_CtlReq>
 800cfaa:	4603      	mov	r3, r0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b087      	sub	sp, #28
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800cfc8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d101      	bne.n	800cfd8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800cfd4:	2302      	movs	r3, #2
 800cfd6:	e094      	b.n	800d102 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	781a      	ldrb	r2, [r3, #0]
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	785a      	ldrb	r2, [r3, #1]
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	3302      	adds	r3, #2
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	461a      	mov	r2, r3
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	3303      	adds	r3, #3
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	021b      	lsls	r3, r3, #8
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	4313      	orrs	r3, r2
 800cffc:	b29a      	uxth	r2, r3
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	791a      	ldrb	r2, [r3, #4]
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	795a      	ldrb	r2, [r3, #5]
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	799a      	ldrb	r2, [r3, #6]
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	79da      	ldrb	r2, [r3, #7]
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d004      	beq.n	800d036 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d032:	2b01      	cmp	r3, #1
 800d034:	d11b      	bne.n	800d06e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	79db      	ldrb	r3, [r3, #7]
 800d03a:	2b20      	cmp	r3, #32
 800d03c:	dc0f      	bgt.n	800d05e <USBH_ParseDevDesc+0xaa>
 800d03e:	2b08      	cmp	r3, #8
 800d040:	db0f      	blt.n	800d062 <USBH_ParseDevDesc+0xae>
 800d042:	3b08      	subs	r3, #8
 800d044:	4a32      	ldr	r2, [pc, #200]	@ (800d110 <USBH_ParseDevDesc+0x15c>)
 800d046:	fa22 f303 	lsr.w	r3, r2, r3
 800d04a:	f003 0301 	and.w	r3, r3, #1
 800d04e:	2b00      	cmp	r3, #0
 800d050:	bf14      	ite	ne
 800d052:	2301      	movne	r3, #1
 800d054:	2300      	moveq	r3, #0
 800d056:	b2db      	uxtb	r3, r3
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d106      	bne.n	800d06a <USBH_ParseDevDesc+0xb6>
 800d05c:	e001      	b.n	800d062 <USBH_ParseDevDesc+0xae>
 800d05e:	2b40      	cmp	r3, #64	@ 0x40
 800d060:	d003      	beq.n	800d06a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	2208      	movs	r2, #8
 800d066:	71da      	strb	r2, [r3, #7]
        break;
 800d068:	e000      	b.n	800d06c <USBH_ParseDevDesc+0xb8>
        break;
 800d06a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d06c:	e00e      	b.n	800d08c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d074:	2b02      	cmp	r3, #2
 800d076:	d107      	bne.n	800d088 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	79db      	ldrb	r3, [r3, #7]
 800d07c:	2b08      	cmp	r3, #8
 800d07e:	d005      	beq.n	800d08c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	2208      	movs	r2, #8
 800d084:	71da      	strb	r2, [r3, #7]
 800d086:	e001      	b.n	800d08c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d088:	2303      	movs	r3, #3
 800d08a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d08c:	88fb      	ldrh	r3, [r7, #6]
 800d08e:	2b08      	cmp	r3, #8
 800d090:	d936      	bls.n	800d100 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	3308      	adds	r3, #8
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	461a      	mov	r2, r3
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	3309      	adds	r3, #9
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	021b      	lsls	r3, r3, #8
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	330a      	adds	r3, #10
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	330b      	adds	r3, #11
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	021b      	lsls	r3, r3, #8
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	330c      	adds	r3, #12
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	330d      	adds	r3, #13
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	021b      	lsls	r3, r3, #8
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	7b9a      	ldrb	r2, [r3, #14]
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	7bda      	ldrb	r2, [r3, #15]
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	7c1a      	ldrb	r2, [r3, #16]
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	7c5a      	ldrb	r2, [r3, #17]
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d100:	7dfb      	ldrb	r3, [r7, #23]
}
 800d102:	4618      	mov	r0, r3
 800d104:	371c      	adds	r7, #28
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	01000101 	.word	0x01000101

0800d114 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b08c      	sub	sp, #48	@ 0x30
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	4613      	mov	r3, r2
 800d120:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d128:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d130:	2300      	movs	r3, #0
 800d132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d136:	2300      	movs	r3, #0
 800d138:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d101      	bne.n	800d146 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d142:	2302      	movs	r3, #2
 800d144:	e0da      	b.n	800d2fc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	2b09      	cmp	r3, #9
 800d150:	d002      	beq.n	800d158 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d154:	2209      	movs	r2, #9
 800d156:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	781a      	ldrb	r2, [r3, #0]
 800d15c:	6a3b      	ldr	r3, [r7, #32]
 800d15e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	785a      	ldrb	r2, [r3, #1]
 800d164:	6a3b      	ldr	r3, [r7, #32]
 800d166:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	3302      	adds	r3, #2
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	461a      	mov	r2, r3
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	3303      	adds	r3, #3
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	021b      	lsls	r3, r3, #8
 800d178:	b29b      	uxth	r3, r3
 800d17a:	4313      	orrs	r3, r2
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d182:	bf28      	it	cs
 800d184:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d188:	b29a      	uxth	r2, r3
 800d18a:	6a3b      	ldr	r3, [r7, #32]
 800d18c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	791a      	ldrb	r2, [r3, #4]
 800d192:	6a3b      	ldr	r3, [r7, #32]
 800d194:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	795a      	ldrb	r2, [r3, #5]
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	799a      	ldrb	r2, [r3, #6]
 800d1a2:	6a3b      	ldr	r3, [r7, #32]
 800d1a4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	79da      	ldrb	r2, [r3, #7]
 800d1aa:	6a3b      	ldr	r3, [r7, #32]
 800d1ac:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	7a1a      	ldrb	r2, [r3, #8]
 800d1b2:	6a3b      	ldr	r3, [r7, #32]
 800d1b4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d1b6:	88fb      	ldrh	r3, [r7, #6]
 800d1b8:	2b09      	cmp	r3, #9
 800d1ba:	f240 809d 	bls.w	800d2f8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800d1be:	2309      	movs	r3, #9
 800d1c0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d1c6:	e081      	b.n	800d2cc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d1c8:	f107 0316 	add.w	r3, r7, #22
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d1d0:	f000 f9e7 	bl	800d5a2 <USBH_GetNextDesc>
 800d1d4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d8:	785b      	ldrb	r3, [r3, #1]
 800d1da:	2b04      	cmp	r3, #4
 800d1dc:	d176      	bne.n	800d2cc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	2b09      	cmp	r3, #9
 800d1e4:	d002      	beq.n	800d1ec <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e8:	2209      	movs	r2, #9
 800d1ea:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1f0:	221a      	movs	r2, #26
 800d1f2:	fb02 f303 	mul.w	r3, r2, r3
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	6a3a      	ldr	r2, [r7, #32]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	3302      	adds	r3, #2
 800d1fe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d202:	69f8      	ldr	r0, [r7, #28]
 800d204:	f000 f87e 	bl	800d304 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d208:	2300      	movs	r3, #0
 800d20a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d20e:	2300      	movs	r3, #0
 800d210:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d212:	e043      	b.n	800d29c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d214:	f107 0316 	add.w	r3, r7, #22
 800d218:	4619      	mov	r1, r3
 800d21a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d21c:	f000 f9c1 	bl	800d5a2 <USBH_GetNextDesc>
 800d220:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d224:	785b      	ldrb	r3, [r3, #1]
 800d226:	2b05      	cmp	r3, #5
 800d228:	d138      	bne.n	800d29c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	795b      	ldrb	r3, [r3, #5]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d113      	bne.n	800d25a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d236:	2b02      	cmp	r3, #2
 800d238:	d003      	beq.n	800d242 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	799b      	ldrb	r3, [r3, #6]
 800d23e:	2b03      	cmp	r3, #3
 800d240:	d10b      	bne.n	800d25a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	79db      	ldrb	r3, [r3, #7]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10b      	bne.n	800d262 <USBH_ParseCfgDesc+0x14e>
 800d24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	2b09      	cmp	r3, #9
 800d250:	d007      	beq.n	800d262 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800d252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d254:	2209      	movs	r2, #9
 800d256:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d258:	e003      	b.n	800d262 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d25c:	2207      	movs	r2, #7
 800d25e:	701a      	strb	r2, [r3, #0]
 800d260:	e000      	b.n	800d264 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d262:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d268:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d26c:	3201      	adds	r2, #1
 800d26e:	00d2      	lsls	r2, r2, #3
 800d270:	211a      	movs	r1, #26
 800d272:	fb01 f303 	mul.w	r3, r1, r3
 800d276:	4413      	add	r3, r2
 800d278:	3308      	adds	r3, #8
 800d27a:	6a3a      	ldr	r2, [r7, #32]
 800d27c:	4413      	add	r3, r2
 800d27e:	3304      	adds	r3, #4
 800d280:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d284:	69b9      	ldr	r1, [r7, #24]
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f000 f870 	bl	800d36c <USBH_ParseEPDesc>
 800d28c:	4603      	mov	r3, r0
 800d28e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d292:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d296:	3301      	adds	r3, #1
 800d298:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	791b      	ldrb	r3, [r3, #4]
 800d2a0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d204      	bcs.n	800d2b2 <USBH_ParseCfgDesc+0x19e>
 800d2a8:	6a3b      	ldr	r3, [r7, #32]
 800d2aa:	885a      	ldrh	r2, [r3, #2]
 800d2ac:	8afb      	ldrh	r3, [r7, #22]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d8b0      	bhi.n	800d214 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	791b      	ldrb	r3, [r3, #4]
 800d2b6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d201      	bcs.n	800d2c2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800d2be:	2303      	movs	r3, #3
 800d2c0:	e01c      	b.n	800d2fc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800d2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d2cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d805      	bhi.n	800d2e0 <USBH_ParseCfgDesc+0x1cc>
 800d2d4:	6a3b      	ldr	r3, [r7, #32]
 800d2d6:	885a      	ldrh	r2, [r3, #2]
 800d2d8:	8afb      	ldrh	r3, [r7, #22]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	f63f af74 	bhi.w	800d1c8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d2e0:	6a3b      	ldr	r3, [r7, #32]
 800d2e2:	791b      	ldrb	r3, [r3, #4]
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	bf28      	it	cs
 800d2e8:	2302      	movcs	r3, #2
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d201      	bcs.n	800d2f8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800d2f4:	2303      	movs	r3, #3
 800d2f6:	e001      	b.n	800d2fc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800d2f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3730      	adds	r7, #48	@ 0x30
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	781a      	ldrb	r2, [r3, #0]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	785a      	ldrb	r2, [r3, #1]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	789a      	ldrb	r2, [r3, #2]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	78da      	ldrb	r2, [r3, #3]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	3304      	adds	r3, #4
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	2b02      	cmp	r3, #2
 800d336:	bf28      	it	cs
 800d338:	2302      	movcs	r3, #2
 800d33a:	b2da      	uxtb	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	795a      	ldrb	r2, [r3, #5]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	799a      	ldrb	r2, [r3, #6]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	79da      	ldrb	r2, [r3, #7]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	7a1a      	ldrb	r2, [r3, #8]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	721a      	strb	r2, [r3, #8]
}
 800d360:	bf00      	nop
 800d362:	370c      	adds	r7, #12
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b087      	sub	sp, #28
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d378:	2300      	movs	r3, #0
 800d37a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	781a      	ldrb	r2, [r3, #0]
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	785a      	ldrb	r2, [r3, #1]
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	789a      	ldrb	r2, [r3, #2]
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	78da      	ldrb	r2, [r3, #3]
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	3304      	adds	r3, #4
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	3305      	adds	r3, #5
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	021b      	lsls	r3, r3, #8
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	799a      	ldrb	r2, [r3, #6]
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	889b      	ldrh	r3, [r3, #4]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d009      	beq.n	800d3da <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d3ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d3ce:	d804      	bhi.n	800d3da <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d3d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3d8:	d901      	bls.n	800d3de <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800d3da:	2303      	movs	r3, #3
 800d3dc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d136      	bne.n	800d456 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	78db      	ldrb	r3, [r3, #3]
 800d3ec:	f003 0303 	and.w	r3, r3, #3
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	d108      	bne.n	800d406 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	889b      	ldrh	r3, [r3, #4]
 800d3f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3fc:	f240 8097 	bls.w	800d52e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d400:	2303      	movs	r3, #3
 800d402:	75fb      	strb	r3, [r7, #23]
 800d404:	e093      	b.n	800d52e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	78db      	ldrb	r3, [r3, #3]
 800d40a:	f003 0303 	and.w	r3, r3, #3
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d107      	bne.n	800d422 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	889b      	ldrh	r3, [r3, #4]
 800d416:	2b40      	cmp	r3, #64	@ 0x40
 800d418:	f240 8089 	bls.w	800d52e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d41c:	2303      	movs	r3, #3
 800d41e:	75fb      	strb	r3, [r7, #23]
 800d420:	e085      	b.n	800d52e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	78db      	ldrb	r3, [r3, #3]
 800d426:	f003 0303 	and.w	r3, r3, #3
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d005      	beq.n	800d43a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	78db      	ldrb	r3, [r3, #3]
 800d432:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d436:	2b03      	cmp	r3, #3
 800d438:	d10a      	bne.n	800d450 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	799b      	ldrb	r3, [r3, #6]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d003      	beq.n	800d44a <USBH_ParseEPDesc+0xde>
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	799b      	ldrb	r3, [r3, #6]
 800d446:	2b10      	cmp	r3, #16
 800d448:	d970      	bls.n	800d52c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800d44a:	2303      	movs	r3, #3
 800d44c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d44e:	e06d      	b.n	800d52c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d450:	2303      	movs	r3, #3
 800d452:	75fb      	strb	r3, [r7, #23]
 800d454:	e06b      	b.n	800d52e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d13c      	bne.n	800d4da <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	78db      	ldrb	r3, [r3, #3]
 800d464:	f003 0303 	and.w	r3, r3, #3
 800d468:	2b02      	cmp	r3, #2
 800d46a:	d005      	beq.n	800d478 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	78db      	ldrb	r3, [r3, #3]
 800d470:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d474:	2b00      	cmp	r3, #0
 800d476:	d106      	bne.n	800d486 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	889b      	ldrh	r3, [r3, #4]
 800d47c:	2b40      	cmp	r3, #64	@ 0x40
 800d47e:	d956      	bls.n	800d52e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d480:	2303      	movs	r3, #3
 800d482:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d484:	e053      	b.n	800d52e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	78db      	ldrb	r3, [r3, #3]
 800d48a:	f003 0303 	and.w	r3, r3, #3
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d10e      	bne.n	800d4b0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	799b      	ldrb	r3, [r3, #6]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d007      	beq.n	800d4aa <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800d49e:	2b10      	cmp	r3, #16
 800d4a0:	d803      	bhi.n	800d4aa <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800d4a6:	2b40      	cmp	r3, #64	@ 0x40
 800d4a8:	d941      	bls.n	800d52e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d4aa:	2303      	movs	r3, #3
 800d4ac:	75fb      	strb	r3, [r7, #23]
 800d4ae:	e03e      	b.n	800d52e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	78db      	ldrb	r3, [r3, #3]
 800d4b4:	f003 0303 	and.w	r3, r3, #3
 800d4b8:	2b03      	cmp	r3, #3
 800d4ba:	d10b      	bne.n	800d4d4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	799b      	ldrb	r3, [r3, #6]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d004      	beq.n	800d4ce <USBH_ParseEPDesc+0x162>
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	889b      	ldrh	r3, [r3, #4]
 800d4c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4cc:	d32f      	bcc.n	800d52e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	75fb      	strb	r3, [r7, #23]
 800d4d2:	e02c      	b.n	800d52e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d4d4:	2303      	movs	r3, #3
 800d4d6:	75fb      	strb	r3, [r7, #23]
 800d4d8:	e029      	b.n	800d52e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d4e0:	2b02      	cmp	r3, #2
 800d4e2:	d120      	bne.n	800d526 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	78db      	ldrb	r3, [r3, #3]
 800d4e8:	f003 0303 	and.w	r3, r3, #3
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d106      	bne.n	800d4fe <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	889b      	ldrh	r3, [r3, #4]
 800d4f4:	2b08      	cmp	r3, #8
 800d4f6:	d01a      	beq.n	800d52e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d4f8:	2303      	movs	r3, #3
 800d4fa:	75fb      	strb	r3, [r7, #23]
 800d4fc:	e017      	b.n	800d52e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	78db      	ldrb	r3, [r3, #3]
 800d502:	f003 0303 	and.w	r3, r3, #3
 800d506:	2b03      	cmp	r3, #3
 800d508:	d10a      	bne.n	800d520 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	799b      	ldrb	r3, [r3, #6]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d003      	beq.n	800d51a <USBH_ParseEPDesc+0x1ae>
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	889b      	ldrh	r3, [r3, #4]
 800d516:	2b08      	cmp	r3, #8
 800d518:	d909      	bls.n	800d52e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d51a:	2303      	movs	r3, #3
 800d51c:	75fb      	strb	r3, [r7, #23]
 800d51e:	e006      	b.n	800d52e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d520:	2303      	movs	r3, #3
 800d522:	75fb      	strb	r3, [r7, #23]
 800d524:	e003      	b.n	800d52e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d526:	2303      	movs	r3, #3
 800d528:	75fb      	strb	r3, [r7, #23]
 800d52a:	e000      	b.n	800d52e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d52c:	bf00      	nop
  }

  return status;
 800d52e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d530:	4618      	mov	r0, r3
 800d532:	371c      	adds	r7, #28
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b087      	sub	sp, #28
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	4613      	mov	r3, r2
 800d548:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	3301      	adds	r3, #1
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	2b03      	cmp	r3, #3
 800d552:	d120      	bne.n	800d596 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	1e9a      	subs	r2, r3, #2
 800d55a:	88fb      	ldrh	r3, [r7, #6]
 800d55c:	4293      	cmp	r3, r2
 800d55e:	bf28      	it	cs
 800d560:	4613      	movcs	r3, r2
 800d562:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	3302      	adds	r3, #2
 800d568:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d56a:	2300      	movs	r3, #0
 800d56c:	82fb      	strh	r3, [r7, #22]
 800d56e:	e00b      	b.n	800d588 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d570:	8afb      	ldrh	r3, [r7, #22]
 800d572:	68fa      	ldr	r2, [r7, #12]
 800d574:	4413      	add	r3, r2
 800d576:	781a      	ldrb	r2, [r3, #0]
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	3301      	adds	r3, #1
 800d580:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d582:	8afb      	ldrh	r3, [r7, #22]
 800d584:	3302      	adds	r3, #2
 800d586:	82fb      	strh	r3, [r7, #22]
 800d588:	8afa      	ldrh	r2, [r7, #22]
 800d58a:	8abb      	ldrh	r3, [r7, #20]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d3ef      	bcc.n	800d570 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	2200      	movs	r2, #0
 800d594:	701a      	strb	r2, [r3, #0]
  }
}
 800d596:	bf00      	nop
 800d598:	371c      	adds	r7, #28
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr

0800d5a2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d5a2:	b480      	push	{r7}
 800d5a4:	b085      	sub	sp, #20
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	881b      	ldrh	r3, [r3, #0]
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	7812      	ldrb	r2, [r2, #0]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3714      	adds	r7, #20
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr

0800d5d6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b086      	sub	sp, #24
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	60f8      	str	r0, [r7, #12]
 800d5de:	60b9      	str	r1, [r7, #8]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	789b      	ldrb	r3, [r3, #2]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d002      	beq.n	800d5f6 <USBH_CtlReq+0x20>
 800d5f0:	2b02      	cmp	r3, #2
 800d5f2:	d00f      	beq.n	800d614 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d5f4:	e027      	b.n	800d646 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	88fa      	ldrh	r2, [r7, #6]
 800d600:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2201      	movs	r2, #1
 800d606:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2202      	movs	r2, #2
 800d60c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d60e:	2301      	movs	r3, #1
 800d610:	75fb      	strb	r3, [r7, #23]
      break;
 800d612:	e018      	b.n	800d646 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f000 f81b 	bl	800d650 <USBH_HandleControl>
 800d61a:	4603      	mov	r3, r0
 800d61c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d61e:	7dfb      	ldrb	r3, [r7, #23]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d002      	beq.n	800d62a <USBH_CtlReq+0x54>
 800d624:	7dfb      	ldrb	r3, [r7, #23]
 800d626:	2b03      	cmp	r3, #3
 800d628:	d106      	bne.n	800d638 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2201      	movs	r2, #1
 800d62e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2200      	movs	r2, #0
 800d634:	761a      	strb	r2, [r3, #24]
      break;
 800d636:	e005      	b.n	800d644 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d638:	7dfb      	ldrb	r3, [r7, #23]
 800d63a:	2b02      	cmp	r3, #2
 800d63c:	d102      	bne.n	800d644 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2201      	movs	r2, #1
 800d642:	709a      	strb	r2, [r3, #2]
      break;
 800d644:	bf00      	nop
  }
  return status;
 800d646:	7dfb      	ldrb	r3, [r7, #23]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3718      	adds	r7, #24
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af02      	add	r7, sp, #8
 800d656:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d658:	2301      	movs	r3, #1
 800d65a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d65c:	2300      	movs	r3, #0
 800d65e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	7e1b      	ldrb	r3, [r3, #24]
 800d664:	3b01      	subs	r3, #1
 800d666:	2b0a      	cmp	r3, #10
 800d668:	f200 815f 	bhi.w	800d92a <USBH_HandleControl+0x2da>
 800d66c:	a201      	add	r2, pc, #4	@ (adr r2, 800d674 <USBH_HandleControl+0x24>)
 800d66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d672:	bf00      	nop
 800d674:	0800d6a1 	.word	0x0800d6a1
 800d678:	0800d6bb 	.word	0x0800d6bb
 800d67c:	0800d725 	.word	0x0800d725
 800d680:	0800d74b 	.word	0x0800d74b
 800d684:	0800d783 	.word	0x0800d783
 800d688:	0800d7ad 	.word	0x0800d7ad
 800d68c:	0800d7ff 	.word	0x0800d7ff
 800d690:	0800d821 	.word	0x0800d821
 800d694:	0800d85d 	.word	0x0800d85d
 800d698:	0800d883 	.word	0x0800d883
 800d69c:	0800d8c1 	.word	0x0800d8c1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f103 0110 	add.w	r1, r3, #16
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	795b      	ldrb	r3, [r3, #5]
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f951 	bl	800d954 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2202      	movs	r2, #2
 800d6b6:	761a      	strb	r2, [r3, #24]
      break;
 800d6b8:	e142      	b.n	800d940 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	795b      	ldrb	r3, [r3, #5]
 800d6be:	4619      	mov	r1, r3
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 fca1 	bl	800e008 <USBH_LL_GetURBState>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d6ca:	7bbb      	ldrb	r3, [r7, #14]
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d11e      	bne.n	800d70e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	7c1b      	ldrb	r3, [r3, #16]
 800d6d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d6d8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	8adb      	ldrh	r3, [r3, #22]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d00a      	beq.n	800d6f8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d6e2:	7b7b      	ldrb	r3, [r7, #13]
 800d6e4:	2b80      	cmp	r3, #128	@ 0x80
 800d6e6:	d103      	bne.n	800d6f0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2203      	movs	r2, #3
 800d6ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d6ee:	e11e      	b.n	800d92e <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2205      	movs	r2, #5
 800d6f4:	761a      	strb	r2, [r3, #24]
      break;
 800d6f6:	e11a      	b.n	800d92e <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800d6f8:	7b7b      	ldrb	r3, [r7, #13]
 800d6fa:	2b80      	cmp	r3, #128	@ 0x80
 800d6fc:	d103      	bne.n	800d706 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2209      	movs	r2, #9
 800d702:	761a      	strb	r2, [r3, #24]
      break;
 800d704:	e113      	b.n	800d92e <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2207      	movs	r2, #7
 800d70a:	761a      	strb	r2, [r3, #24]
      break;
 800d70c:	e10f      	b.n	800d92e <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d70e:	7bbb      	ldrb	r3, [r7, #14]
 800d710:	2b04      	cmp	r3, #4
 800d712:	d003      	beq.n	800d71c <USBH_HandleControl+0xcc>
 800d714:	7bbb      	ldrb	r3, [r7, #14]
 800d716:	2b02      	cmp	r3, #2
 800d718:	f040 8109 	bne.w	800d92e <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	220b      	movs	r2, #11
 800d720:	761a      	strb	r2, [r3, #24]
      break;
 800d722:	e104      	b.n	800d92e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d72a:	b29a      	uxth	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6899      	ldr	r1, [r3, #8]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	899a      	ldrh	r2, [r3, #12]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	791b      	ldrb	r3, [r3, #4]
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 f948 	bl	800d9d2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2204      	movs	r2, #4
 800d746:	761a      	strb	r2, [r3, #24]
      break;
 800d748:	e0fa      	b.n	800d940 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	791b      	ldrb	r3, [r3, #4]
 800d74e:	4619      	mov	r1, r3
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 fc59 	bl	800e008 <USBH_LL_GetURBState>
 800d756:	4603      	mov	r3, r0
 800d758:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d75a:	7bbb      	ldrb	r3, [r7, #14]
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d102      	bne.n	800d766 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2209      	movs	r2, #9
 800d764:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d766:	7bbb      	ldrb	r3, [r7, #14]
 800d768:	2b05      	cmp	r3, #5
 800d76a:	d102      	bne.n	800d772 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d76c:	2303      	movs	r3, #3
 800d76e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d770:	e0df      	b.n	800d932 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800d772:	7bbb      	ldrb	r3, [r7, #14]
 800d774:	2b04      	cmp	r3, #4
 800d776:	f040 80dc 	bne.w	800d932 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	220b      	movs	r2, #11
 800d77e:	761a      	strb	r2, [r3, #24]
      break;
 800d780:	e0d7      	b.n	800d932 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6899      	ldr	r1, [r3, #8]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	899a      	ldrh	r2, [r3, #12]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	795b      	ldrb	r3, [r3, #5]
 800d78e:	2001      	movs	r0, #1
 800d790:	9000      	str	r0, [sp, #0]
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 f8f8 	bl	800d988 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d79e:	b29a      	uxth	r2, r3
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2206      	movs	r2, #6
 800d7a8:	761a      	strb	r2, [r3, #24]
      break;
 800d7aa:	e0c9      	b.n	800d940 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	795b      	ldrb	r3, [r3, #5]
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fc28 	bl	800e008 <USBH_LL_GetURBState>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d7bc:	7bbb      	ldrb	r3, [r7, #14]
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d103      	bne.n	800d7ca <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2207      	movs	r2, #7
 800d7c6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d7c8:	e0b5      	b.n	800d936 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800d7ca:	7bbb      	ldrb	r3, [r7, #14]
 800d7cc:	2b05      	cmp	r3, #5
 800d7ce:	d105      	bne.n	800d7dc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	220c      	movs	r2, #12
 800d7d4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d7d6:	2303      	movs	r3, #3
 800d7d8:	73fb      	strb	r3, [r7, #15]
      break;
 800d7da:	e0ac      	b.n	800d936 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d7dc:	7bbb      	ldrb	r3, [r7, #14]
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	d103      	bne.n	800d7ea <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2205      	movs	r2, #5
 800d7e6:	761a      	strb	r2, [r3, #24]
      break;
 800d7e8:	e0a5      	b.n	800d936 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800d7ea:	7bbb      	ldrb	r3, [r7, #14]
 800d7ec:	2b04      	cmp	r3, #4
 800d7ee:	f040 80a2 	bne.w	800d936 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	220b      	movs	r2, #11
 800d7f6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d7f8:	2302      	movs	r3, #2
 800d7fa:	73fb      	strb	r3, [r7, #15]
      break;
 800d7fc:	e09b      	b.n	800d936 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	791b      	ldrb	r3, [r3, #4]
 800d802:	2200      	movs	r2, #0
 800d804:	2100      	movs	r1, #0
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 f8e3 	bl	800d9d2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d812:	b29a      	uxth	r2, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2208      	movs	r2, #8
 800d81c:	761a      	strb	r2, [r3, #24]

      break;
 800d81e:	e08f      	b.n	800d940 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	791b      	ldrb	r3, [r3, #4]
 800d824:	4619      	mov	r1, r3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 fbee 	bl	800e008 <USBH_LL_GetURBState>
 800d82c:	4603      	mov	r3, r0
 800d82e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d830:	7bbb      	ldrb	r3, [r7, #14]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d105      	bne.n	800d842 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	220d      	movs	r2, #13
 800d83a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d83c:	2300      	movs	r3, #0
 800d83e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d840:	e07b      	b.n	800d93a <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800d842:	7bbb      	ldrb	r3, [r7, #14]
 800d844:	2b04      	cmp	r3, #4
 800d846:	d103      	bne.n	800d850 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	220b      	movs	r2, #11
 800d84c:	761a      	strb	r2, [r3, #24]
      break;
 800d84e:	e074      	b.n	800d93a <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800d850:	7bbb      	ldrb	r3, [r7, #14]
 800d852:	2b05      	cmp	r3, #5
 800d854:	d171      	bne.n	800d93a <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800d856:	2303      	movs	r3, #3
 800d858:	73fb      	strb	r3, [r7, #15]
      break;
 800d85a:	e06e      	b.n	800d93a <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	795b      	ldrb	r3, [r3, #5]
 800d860:	2201      	movs	r2, #1
 800d862:	9200      	str	r2, [sp, #0]
 800d864:	2200      	movs	r2, #0
 800d866:	2100      	movs	r1, #0
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f88d 	bl	800d988 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d874:	b29a      	uxth	r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	220a      	movs	r2, #10
 800d87e:	761a      	strb	r2, [r3, #24]
      break;
 800d880:	e05e      	b.n	800d940 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	795b      	ldrb	r3, [r3, #5]
 800d886:	4619      	mov	r1, r3
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fbbd 	bl	800e008 <USBH_LL_GetURBState>
 800d88e:	4603      	mov	r3, r0
 800d890:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d892:	7bbb      	ldrb	r3, [r7, #14]
 800d894:	2b01      	cmp	r3, #1
 800d896:	d105      	bne.n	800d8a4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d898:	2300      	movs	r3, #0
 800d89a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	220d      	movs	r2, #13
 800d8a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d8a2:	e04c      	b.n	800d93e <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d8a4:	7bbb      	ldrb	r3, [r7, #14]
 800d8a6:	2b02      	cmp	r3, #2
 800d8a8:	d103      	bne.n	800d8b2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2209      	movs	r2, #9
 800d8ae:	761a      	strb	r2, [r3, #24]
      break;
 800d8b0:	e045      	b.n	800d93e <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800d8b2:	7bbb      	ldrb	r3, [r7, #14]
 800d8b4:	2b04      	cmp	r3, #4
 800d8b6:	d142      	bne.n	800d93e <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	220b      	movs	r2, #11
 800d8bc:	761a      	strb	r2, [r3, #24]
      break;
 800d8be:	e03e      	b.n	800d93e <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	7e5b      	ldrb	r3, [r3, #25]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	b2da      	uxtb	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	765a      	strb	r2, [r3, #25]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	7e5b      	ldrb	r3, [r3, #25]
 800d8d0:	2b02      	cmp	r3, #2
 800d8d2:	d806      	bhi.n	800d8e2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2201      	movs	r2, #1
 800d8de:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d8e0:	e02e      	b.n	800d940 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d8e8:	2106      	movs	r1, #6
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800d8f4:	4815      	ldr	r0, [pc, #84]	@ (800d94c <USBH_HandleControl+0x2fc>)
 800d8f6:	f000 fdb7 	bl	800e468 <iprintf>
 800d8fa:	4815      	ldr	r0, [pc, #84]	@ (800d950 <USBH_HandleControl+0x300>)
 800d8fc:	f000 fdb4 	bl	800e468 <iprintf>
 800d900:	200a      	movs	r0, #10
 800d902:	f000 fdc3 	bl	800e48c <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	795b      	ldrb	r3, [r3, #5]
 800d90a:	4619      	mov	r1, r3
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 f8ed 	bl	800daec <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	791b      	ldrb	r3, [r3, #4]
 800d916:	4619      	mov	r1, r3
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f000 f8e7 	bl	800daec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d924:	2302      	movs	r3, #2
 800d926:	73fb      	strb	r3, [r7, #15]
      break;
 800d928:	e00a      	b.n	800d940 <USBH_HandleControl+0x2f0>

    default:
      break;
 800d92a:	bf00      	nop
 800d92c:	e008      	b.n	800d940 <USBH_HandleControl+0x2f0>
      break;
 800d92e:	bf00      	nop
 800d930:	e006      	b.n	800d940 <USBH_HandleControl+0x2f0>
      break;
 800d932:	bf00      	nop
 800d934:	e004      	b.n	800d940 <USBH_HandleControl+0x2f0>
      break;
 800d936:	bf00      	nop
 800d938:	e002      	b.n	800d940 <USBH_HandleControl+0x2f0>
      break;
 800d93a:	bf00      	nop
 800d93c:	e000      	b.n	800d940 <USBH_HandleControl+0x2f0>
      break;
 800d93e:	bf00      	nop
  }

  return status;
 800d940:	7bfb      	ldrb	r3, [r7, #15]
}
 800d942:	4618      	mov	r0, r3
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	0800fbd4 	.word	0x0800fbd4
 800d950:	0800fcb0 	.word	0x0800fcb0

0800d954 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b088      	sub	sp, #32
 800d958:	af04      	add	r7, sp, #16
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	4613      	mov	r3, r2
 800d960:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d962:	79f9      	ldrb	r1, [r7, #7]
 800d964:	2300      	movs	r3, #0
 800d966:	9303      	str	r3, [sp, #12]
 800d968:	2308      	movs	r3, #8
 800d96a:	9302      	str	r3, [sp, #8]
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	9301      	str	r3, [sp, #4]
 800d970:	2300      	movs	r3, #0
 800d972:	9300      	str	r3, [sp, #0]
 800d974:	2300      	movs	r3, #0
 800d976:	2200      	movs	r2, #0
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f000 fb14 	bl	800dfa6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d97e:	2300      	movs	r3, #0
}
 800d980:	4618      	mov	r0, r3
 800d982:	3710      	adds	r7, #16
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b088      	sub	sp, #32
 800d98c:	af04      	add	r7, sp, #16
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	4611      	mov	r1, r2
 800d994:	461a      	mov	r2, r3
 800d996:	460b      	mov	r3, r1
 800d998:	80fb      	strh	r3, [r7, #6]
 800d99a:	4613      	mov	r3, r2
 800d99c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d001      	beq.n	800d9ac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d9ac:	7979      	ldrb	r1, [r7, #5]
 800d9ae:	7e3b      	ldrb	r3, [r7, #24]
 800d9b0:	9303      	str	r3, [sp, #12]
 800d9b2:	88fb      	ldrh	r3, [r7, #6]
 800d9b4:	9302      	str	r3, [sp, #8]
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	9301      	str	r3, [sp, #4]
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	9300      	str	r3, [sp, #0]
 800d9be:	2300      	movs	r3, #0
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	68f8      	ldr	r0, [r7, #12]
 800d9c4:	f000 faef 	bl	800dfa6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d9c8:	2300      	movs	r3, #0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3710      	adds	r7, #16
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b088      	sub	sp, #32
 800d9d6:	af04      	add	r7, sp, #16
 800d9d8:	60f8      	str	r0, [r7, #12]
 800d9da:	60b9      	str	r1, [r7, #8]
 800d9dc:	4611      	mov	r1, r2
 800d9de:	461a      	mov	r2, r3
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	80fb      	strh	r3, [r7, #6]
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d9e8:	7979      	ldrb	r1, [r7, #5]
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	9303      	str	r3, [sp, #12]
 800d9ee:	88fb      	ldrh	r3, [r7, #6]
 800d9f0:	9302      	str	r3, [sp, #8]
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	9301      	str	r3, [sp, #4]
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	9300      	str	r3, [sp, #0]
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f000 fad1 	bl	800dfa6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800da04:	2300      	movs	r3, #0

}
 800da06:	4618      	mov	r0, r3
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800da0e:	b580      	push	{r7, lr}
 800da10:	b088      	sub	sp, #32
 800da12:	af04      	add	r7, sp, #16
 800da14:	60f8      	str	r0, [r7, #12]
 800da16:	60b9      	str	r1, [r7, #8]
 800da18:	4611      	mov	r1, r2
 800da1a:	461a      	mov	r2, r3
 800da1c:	460b      	mov	r3, r1
 800da1e:	71fb      	strb	r3, [r7, #7]
 800da20:	4613      	mov	r3, r2
 800da22:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800da24:	79fb      	ldrb	r3, [r7, #7]
 800da26:	b29b      	uxth	r3, r3
 800da28:	79b9      	ldrb	r1, [r7, #6]
 800da2a:	2200      	movs	r2, #0
 800da2c:	9203      	str	r2, [sp, #12]
 800da2e:	9302      	str	r3, [sp, #8]
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	9301      	str	r3, [sp, #4]
 800da34:	2301      	movs	r3, #1
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	2303      	movs	r3, #3
 800da3a:	2201      	movs	r2, #1
 800da3c:	68f8      	ldr	r0, [r7, #12]
 800da3e:	f000 fab2 	bl	800dfa6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b086      	sub	sp, #24
 800da50:	af04      	add	r7, sp, #16
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	4608      	mov	r0, r1
 800da56:	4611      	mov	r1, r2
 800da58:	461a      	mov	r2, r3
 800da5a:	4603      	mov	r3, r0
 800da5c:	70fb      	strb	r3, [r7, #3]
 800da5e:	460b      	mov	r3, r1
 800da60:	70bb      	strb	r3, [r7, #2]
 800da62:	4613      	mov	r3, r2
 800da64:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800da66:	7878      	ldrb	r0, [r7, #1]
 800da68:	78ba      	ldrb	r2, [r7, #2]
 800da6a:	78f9      	ldrb	r1, [r7, #3]
 800da6c:	8b3b      	ldrh	r3, [r7, #24]
 800da6e:	9302      	str	r3, [sp, #8]
 800da70:	7d3b      	ldrb	r3, [r7, #20]
 800da72:	9301      	str	r3, [sp, #4]
 800da74:	7c3b      	ldrb	r3, [r7, #16]
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	4603      	mov	r3, r0
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 fa45 	bl	800df0a <USBH_LL_OpenPipe>

  return USBH_OK;
 800da80:	2300      	movs	r3, #0
}
 800da82:	4618      	mov	r0, r3
 800da84:	3708      	adds	r7, #8
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b082      	sub	sp, #8
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	460b      	mov	r3, r1
 800da94:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800da96:	78fb      	ldrb	r3, [r7, #3]
 800da98:	4619      	mov	r1, r3
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 fa64 	bl	800df68 <USBH_LL_ClosePipe>

  return USBH_OK;
 800daa0:	2300      	movs	r3, #0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b084      	sub	sp, #16
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
 800dab2:	460b      	mov	r3, r1
 800dab4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f836 	bl	800db28 <USBH_GetFreePipe>
 800dabc:	4603      	mov	r3, r0
 800dabe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800dac0:	89fb      	ldrh	r3, [r7, #14]
 800dac2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d00a      	beq.n	800dae0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800daca:	78fa      	ldrb	r2, [r7, #3]
 800dacc:	89fb      	ldrh	r3, [r7, #14]
 800dace:	f003 030f 	and.w	r3, r3, #15
 800dad2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dad6:	6879      	ldr	r1, [r7, #4]
 800dad8:	33e0      	adds	r3, #224	@ 0xe0
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	440b      	add	r3, r1
 800dade:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800dae0:	89fb      	ldrh	r3, [r7, #14]
 800dae2:	b2db      	uxtb	r3, r3
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800daf8:	78fb      	ldrb	r3, [r7, #3]
 800dafa:	2b0f      	cmp	r3, #15
 800dafc:	d80d      	bhi.n	800db1a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800dafe:	78fb      	ldrb	r3, [r7, #3]
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	33e0      	adds	r3, #224	@ 0xe0
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	4413      	add	r3, r2
 800db08:	685a      	ldr	r2, [r3, #4]
 800db0a:	78fb      	ldrb	r3, [r7, #3]
 800db0c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800db10:	6879      	ldr	r1, [r7, #4]
 800db12:	33e0      	adds	r3, #224	@ 0xe0
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	440b      	add	r3, r1
 800db18:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	370c      	adds	r7, #12
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800db28:	b480      	push	{r7}
 800db2a:	b085      	sub	sp, #20
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800db30:	2300      	movs	r3, #0
 800db32:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800db34:	2300      	movs	r3, #0
 800db36:	73fb      	strb	r3, [r7, #15]
 800db38:	e00f      	b.n	800db5a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800db3a:	7bfb      	ldrb	r3, [r7, #15]
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	33e0      	adds	r3, #224	@ 0xe0
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	4413      	add	r3, r2
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d102      	bne.n	800db54 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800db4e:	7bfb      	ldrb	r3, [r7, #15]
 800db50:	b29b      	uxth	r3, r3
 800db52:	e007      	b.n	800db64 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800db54:	7bfb      	ldrb	r3, [r7, #15]
 800db56:	3301      	adds	r3, #1
 800db58:	73fb      	strb	r3, [r7, #15]
 800db5a:	7bfb      	ldrb	r3, [r7, #15]
 800db5c:	2b0f      	cmp	r3, #15
 800db5e:	d9ec      	bls.n	800db3a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800db60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800db64:	4618      	mov	r0, r3
 800db66:	3714      	adds	r7, #20
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800db74:	2201      	movs	r2, #1
 800db76:	490e      	ldr	r1, [pc, #56]	@ (800dbb0 <MX_USB_HOST_Init+0x40>)
 800db78:	480e      	ldr	r0, [pc, #56]	@ (800dbb4 <MX_USB_HOST_Init+0x44>)
 800db7a:	f7fe f93f 	bl	800bdfc <USBH_Init>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d001      	beq.n	800db88 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800db84:	f7f5 ff02 	bl	800398c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800db88:	490b      	ldr	r1, [pc, #44]	@ (800dbb8 <MX_USB_HOST_Init+0x48>)
 800db8a:	480a      	ldr	r0, [pc, #40]	@ (800dbb4 <MX_USB_HOST_Init+0x44>)
 800db8c:	f7fe f9f2 	bl	800bf74 <USBH_RegisterClass>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d001      	beq.n	800db9a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800db96:	f7f5 fef9 	bl	800398c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800db9a:	4806      	ldr	r0, [pc, #24]	@ (800dbb4 <MX_USB_HOST_Init+0x44>)
 800db9c:	f7fe fad8 	bl	800c150 <USBH_Start>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d001      	beq.n	800dbaa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800dba6:	f7f5 fef1 	bl	800398c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800dbaa:	bf00      	nop
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	0800dbd1 	.word	0x0800dbd1
 800dbb4:	200118dc 	.word	0x200118dc
 800dbb8:	20000274 	.word	0x20000274

0800dbbc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800dbc0:	4802      	ldr	r0, [pc, #8]	@ (800dbcc <MX_USB_HOST_Process+0x10>)
 800dbc2:	f7fe fad5 	bl	800c170 <USBH_Process>
}
 800dbc6:	bf00      	nop
 800dbc8:	bd80      	pop	{r7, pc}
 800dbca:	bf00      	nop
 800dbcc:	200118dc 	.word	0x200118dc

0800dbd0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800dbdc:	78fb      	ldrb	r3, [r7, #3]
 800dbde:	3b01      	subs	r3, #1
 800dbe0:	2b04      	cmp	r3, #4
 800dbe2:	d819      	bhi.n	800dc18 <USBH_UserProcess+0x48>
 800dbe4:	a201      	add	r2, pc, #4	@ (adr r2, 800dbec <USBH_UserProcess+0x1c>)
 800dbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbea:	bf00      	nop
 800dbec:	0800dc19 	.word	0x0800dc19
 800dbf0:	0800dc09 	.word	0x0800dc09
 800dbf4:	0800dc19 	.word	0x0800dc19
 800dbf8:	0800dc11 	.word	0x0800dc11
 800dbfc:	0800dc01 	.word	0x0800dc01
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dc00:	4b09      	ldr	r3, [pc, #36]	@ (800dc28 <USBH_UserProcess+0x58>)
 800dc02:	2203      	movs	r2, #3
 800dc04:	701a      	strb	r2, [r3, #0]
  break;
 800dc06:	e008      	b.n	800dc1a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800dc08:	4b07      	ldr	r3, [pc, #28]	@ (800dc28 <USBH_UserProcess+0x58>)
 800dc0a:	2202      	movs	r2, #2
 800dc0c:	701a      	strb	r2, [r3, #0]
  break;
 800dc0e:	e004      	b.n	800dc1a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dc10:	4b05      	ldr	r3, [pc, #20]	@ (800dc28 <USBH_UserProcess+0x58>)
 800dc12:	2201      	movs	r2, #1
 800dc14:	701a      	strb	r2, [r3, #0]
  break;
 800dc16:	e000      	b.n	800dc1a <USBH_UserProcess+0x4a>

  default:
  break;
 800dc18:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800dc1a:	bf00      	nop
 800dc1c:	370c      	adds	r7, #12
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	20011cb4 	.word	0x20011cb4

0800dc2c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b08a      	sub	sp, #40	@ 0x28
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc34:	f107 0314 	add.w	r3, r7, #20
 800dc38:	2200      	movs	r2, #0
 800dc3a:	601a      	str	r2, [r3, #0]
 800dc3c:	605a      	str	r2, [r3, #4]
 800dc3e:	609a      	str	r2, [r3, #8]
 800dc40:	60da      	str	r2, [r3, #12]
 800dc42:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dc4c:	d13a      	bne.n	800dcc4 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc4e:	2300      	movs	r3, #0
 800dc50:	613b      	str	r3, [r7, #16]
 800dc52:	4b1e      	ldr	r3, [pc, #120]	@ (800dccc <HAL_HCD_MspInit+0xa0>)
 800dc54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc56:	4a1d      	ldr	r2, [pc, #116]	@ (800dccc <HAL_HCD_MspInit+0xa0>)
 800dc58:	f043 0301 	orr.w	r3, r3, #1
 800dc5c:	6313      	str	r3, [r2, #48]	@ 0x30
 800dc5e:	4b1b      	ldr	r3, [pc, #108]	@ (800dccc <HAL_HCD_MspInit+0xa0>)
 800dc60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc62:	f003 0301 	and.w	r3, r3, #1
 800dc66:	613b      	str	r3, [r7, #16]
 800dc68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dc6a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800dc6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc70:	2302      	movs	r3, #2
 800dc72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc74:	2300      	movs	r3, #0
 800dc76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc78:	2303      	movs	r3, #3
 800dc7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dc7c:	230a      	movs	r3, #10
 800dc7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc80:	f107 0314 	add.w	r3, r7, #20
 800dc84:	4619      	mov	r1, r3
 800dc86:	4812      	ldr	r0, [pc, #72]	@ (800dcd0 <HAL_HCD_MspInit+0xa4>)
 800dc88:	f7f6 fd54 	bl	8004734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dc8c:	4b0f      	ldr	r3, [pc, #60]	@ (800dccc <HAL_HCD_MspInit+0xa0>)
 800dc8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc90:	4a0e      	ldr	r2, [pc, #56]	@ (800dccc <HAL_HCD_MspInit+0xa0>)
 800dc92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc96:	6353      	str	r3, [r2, #52]	@ 0x34
 800dc98:	2300      	movs	r3, #0
 800dc9a:	60fb      	str	r3, [r7, #12]
 800dc9c:	4b0b      	ldr	r3, [pc, #44]	@ (800dccc <HAL_HCD_MspInit+0xa0>)
 800dc9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dca0:	4a0a      	ldr	r2, [pc, #40]	@ (800dccc <HAL_HCD_MspInit+0xa0>)
 800dca2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dca6:	6453      	str	r3, [r2, #68]	@ 0x44
 800dca8:	4b08      	ldr	r3, [pc, #32]	@ (800dccc <HAL_HCD_MspInit+0xa0>)
 800dcaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dcb0:	60fb      	str	r3, [r7, #12]
 800dcb2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	2043      	movs	r0, #67	@ 0x43
 800dcba:	f7f6 fa5e 	bl	800417a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dcbe:	2043      	movs	r0, #67	@ 0x43
 800dcc0:	f7f6 fa77 	bl	80041b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dcc4:	bf00      	nop
 800dcc6:	3728      	adds	r7, #40	@ 0x28
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	40023800 	.word	0x40023800
 800dcd0:	40020000 	.word	0x40020000

0800dcd4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fe ff6d 	bl	800cbc2 <USBH_LL_IncTimer>
}
 800dce8:	bf00      	nop
 800dcea:	3708      	adds	r7, #8
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fe ffa5 	bl	800cc4e <USBH_LL_Connect>
}
 800dd04:	bf00      	nop
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7fe ffae 	bl	800cc7c <USBH_LL_Disconnect>
}
 800dd20:	bf00      	nop
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	460b      	mov	r3, r1
 800dd32:	70fb      	strb	r3, [r7, #3]
 800dd34:	4613      	mov	r3, r2
 800dd36:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dd38:	bf00      	nop
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fe ff5f 	bl	800cc16 <USBH_LL_PortEnabled>
}
 800dd58:	bf00      	nop
 800dd5a:	3708      	adds	r7, #8
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fe ff5f 	bl	800cc32 <USBH_LL_PortDisabled>
}
 800dd74:	bf00      	nop
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d12a      	bne.n	800dde4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800dd8e:	4a18      	ldr	r2, [pc, #96]	@ (800ddf0 <USBH_LL_Init+0x74>)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a15      	ldr	r2, [pc, #84]	@ (800ddf0 <USBH_LL_Init+0x74>)
 800dd9a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dd9e:	4b14      	ldr	r3, [pc, #80]	@ (800ddf0 <USBH_LL_Init+0x74>)
 800dda0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800dda4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800dda6:	4b12      	ldr	r3, [pc, #72]	@ (800ddf0 <USBH_LL_Init+0x74>)
 800dda8:	2208      	movs	r2, #8
 800ddaa:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ddac:	4b10      	ldr	r3, [pc, #64]	@ (800ddf0 <USBH_LL_Init+0x74>)
 800ddae:	2201      	movs	r2, #1
 800ddb0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ddb2:	4b0f      	ldr	r3, [pc, #60]	@ (800ddf0 <USBH_LL_Init+0x74>)
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ddb8:	4b0d      	ldr	r3, [pc, #52]	@ (800ddf0 <USBH_LL_Init+0x74>)
 800ddba:	2202      	movs	r2, #2
 800ddbc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ddbe:	4b0c      	ldr	r3, [pc, #48]	@ (800ddf0 <USBH_LL_Init+0x74>)
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ddc4:	480a      	ldr	r0, [pc, #40]	@ (800ddf0 <USBH_LL_Init+0x74>)
 800ddc6:	f7f6 feab 	bl	8004b20 <HAL_HCD_Init>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d001      	beq.n	800ddd4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ddd0:	f7f5 fddc 	bl	800398c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ddd4:	4806      	ldr	r0, [pc, #24]	@ (800ddf0 <USBH_LL_Init+0x74>)
 800ddd6:	f7f7 fb0b 	bl	80053f0 <HAL_HCD_GetCurrentFrame>
 800ddda:	4603      	mov	r3, r0
 800dddc:	4619      	mov	r1, r3
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f7fe fee0 	bl	800cba4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dde4:	2300      	movs	r3, #0
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3708      	adds	r7, #8
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	20011cb8 	.word	0x20011cb8

0800ddf4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b084      	sub	sp, #16
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de00:	2300      	movs	r3, #0
 800de02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7f7 fa78 	bl	8005300 <HAL_HCD_Start>
 800de10:	4603      	mov	r3, r0
 800de12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de14:	7bfb      	ldrb	r3, [r7, #15]
 800de16:	4618      	mov	r0, r3
 800de18:	f000 f95e 	bl	800e0d8 <USBH_Get_USB_Status>
 800de1c:	4603      	mov	r3, r0
 800de1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de20:	7bbb      	ldrb	r3, [r7, #14]
}
 800de22:	4618      	mov	r0, r3
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}

0800de2a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800de2a:	b580      	push	{r7, lr}
 800de2c:	b084      	sub	sp, #16
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de32:	2300      	movs	r3, #0
 800de34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de36:	2300      	movs	r3, #0
 800de38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800de40:	4618      	mov	r0, r3
 800de42:	f7f7 fa80 	bl	8005346 <HAL_HCD_Stop>
 800de46:	4603      	mov	r3, r0
 800de48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de4a:	7bfb      	ldrb	r3, [r7, #15]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f000 f943 	bl	800e0d8 <USBH_Get_USB_Status>
 800de52:	4603      	mov	r3, r0
 800de54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de56:	7bbb      	ldrb	r3, [r7, #14]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800de68:	2301      	movs	r3, #1
 800de6a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800de72:	4618      	mov	r0, r3
 800de74:	f7f7 faca 	bl	800540c <HAL_HCD_GetCurrentSpeed>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b02      	cmp	r3, #2
 800de7c:	d00c      	beq.n	800de98 <USBH_LL_GetSpeed+0x38>
 800de7e:	2b02      	cmp	r3, #2
 800de80:	d80d      	bhi.n	800de9e <USBH_LL_GetSpeed+0x3e>
 800de82:	2b00      	cmp	r3, #0
 800de84:	d002      	beq.n	800de8c <USBH_LL_GetSpeed+0x2c>
 800de86:	2b01      	cmp	r3, #1
 800de88:	d003      	beq.n	800de92 <USBH_LL_GetSpeed+0x32>
 800de8a:	e008      	b.n	800de9e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800de8c:	2300      	movs	r3, #0
 800de8e:	73fb      	strb	r3, [r7, #15]
    break;
 800de90:	e008      	b.n	800dea4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800de92:	2301      	movs	r3, #1
 800de94:	73fb      	strb	r3, [r7, #15]
    break;
 800de96:	e005      	b.n	800dea4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800de98:	2302      	movs	r3, #2
 800de9a:	73fb      	strb	r3, [r7, #15]
    break;
 800de9c:	e002      	b.n	800dea4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800de9e:	2301      	movs	r3, #1
 800dea0:	73fb      	strb	r3, [r7, #15]
    break;
 800dea2:	bf00      	nop
  }
  return  speed;
 800dea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3710      	adds	r7, #16
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800deae:	b580      	push	{r7, lr}
 800deb0:	b084      	sub	sp, #16
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deb6:	2300      	movs	r3, #0
 800deb8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800deba:	2300      	movs	r3, #0
 800debc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7f7 fa5b 	bl	8005380 <HAL_HCD_ResetPort>
 800deca:	4603      	mov	r3, r0
 800decc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dece:	7bfb      	ldrb	r3, [r7, #15]
 800ded0:	4618      	mov	r0, r3
 800ded2:	f000 f901 	bl	800e0d8 <USBH_Get_USB_Status>
 800ded6:	4603      	mov	r3, r0
 800ded8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800deda:	7bbb      	ldrb	r3, [r7, #14]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	460b      	mov	r3, r1
 800deee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800def6:	78fa      	ldrb	r2, [r7, #3]
 800def8:	4611      	mov	r1, r2
 800defa:	4618      	mov	r0, r3
 800defc:	f7f7 fa63 	bl	80053c6 <HAL_HCD_HC_GetXferCount>
 800df00:	4603      	mov	r3, r0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800df0a:	b590      	push	{r4, r7, lr}
 800df0c:	b089      	sub	sp, #36	@ 0x24
 800df0e:	af04      	add	r7, sp, #16
 800df10:	6078      	str	r0, [r7, #4]
 800df12:	4608      	mov	r0, r1
 800df14:	4611      	mov	r1, r2
 800df16:	461a      	mov	r2, r3
 800df18:	4603      	mov	r3, r0
 800df1a:	70fb      	strb	r3, [r7, #3]
 800df1c:	460b      	mov	r3, r1
 800df1e:	70bb      	strb	r3, [r7, #2]
 800df20:	4613      	mov	r3, r2
 800df22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df24:	2300      	movs	r3, #0
 800df26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df28:	2300      	movs	r3, #0
 800df2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800df32:	787c      	ldrb	r4, [r7, #1]
 800df34:	78ba      	ldrb	r2, [r7, #2]
 800df36:	78f9      	ldrb	r1, [r7, #3]
 800df38:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800df3a:	9302      	str	r3, [sp, #8]
 800df3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800df40:	9301      	str	r3, [sp, #4]
 800df42:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	4623      	mov	r3, r4
 800df4a:	f7f6 fe50 	bl	8004bee <HAL_HCD_HC_Init>
 800df4e:	4603      	mov	r3, r0
 800df50:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800df52:	7bfb      	ldrb	r3, [r7, #15]
 800df54:	4618      	mov	r0, r3
 800df56:	f000 f8bf 	bl	800e0d8 <USBH_Get_USB_Status>
 800df5a:	4603      	mov	r3, r0
 800df5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3714      	adds	r7, #20
 800df64:	46bd      	mov	sp, r7
 800df66:	bd90      	pop	{r4, r7, pc}

0800df68 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	460b      	mov	r3, r1
 800df72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df74:	2300      	movs	r3, #0
 800df76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800df78:	2300      	movs	r3, #0
 800df7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800df82:	78fa      	ldrb	r2, [r7, #3]
 800df84:	4611      	mov	r1, r2
 800df86:	4618      	mov	r0, r3
 800df88:	f7f6 fee9 	bl	8004d5e <HAL_HCD_HC_Halt>
 800df8c:	4603      	mov	r3, r0
 800df8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800df90:	7bfb      	ldrb	r3, [r7, #15]
 800df92:	4618      	mov	r0, r3
 800df94:	f000 f8a0 	bl	800e0d8 <USBH_Get_USB_Status>
 800df98:	4603      	mov	r3, r0
 800df9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3710      	adds	r7, #16
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dfa6:	b590      	push	{r4, r7, lr}
 800dfa8:	b089      	sub	sp, #36	@ 0x24
 800dfaa:	af04      	add	r7, sp, #16
 800dfac:	6078      	str	r0, [r7, #4]
 800dfae:	4608      	mov	r0, r1
 800dfb0:	4611      	mov	r1, r2
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	70fb      	strb	r3, [r7, #3]
 800dfb8:	460b      	mov	r3, r1
 800dfba:	70bb      	strb	r3, [r7, #2]
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800dfce:	787c      	ldrb	r4, [r7, #1]
 800dfd0:	78ba      	ldrb	r2, [r7, #2]
 800dfd2:	78f9      	ldrb	r1, [r7, #3]
 800dfd4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dfd8:	9303      	str	r3, [sp, #12]
 800dfda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dfdc:	9302      	str	r3, [sp, #8]
 800dfde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfe0:	9301      	str	r3, [sp, #4]
 800dfe2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dfe6:	9300      	str	r3, [sp, #0]
 800dfe8:	4623      	mov	r3, r4
 800dfea:	f7f6 fedb 	bl	8004da4 <HAL_HCD_HC_SubmitRequest>
 800dfee:	4603      	mov	r3, r0
 800dff0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dff2:	7bfb      	ldrb	r3, [r7, #15]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f000 f86f 	bl	800e0d8 <USBH_Get_USB_Status>
 800dffa:	4603      	mov	r3, r0
 800dffc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dffe:	7bbb      	ldrb	r3, [r7, #14]
}
 800e000:	4618      	mov	r0, r3
 800e002:	3714      	adds	r7, #20
 800e004:	46bd      	mov	sp, r7
 800e006:	bd90      	pop	{r4, r7, pc}

0800e008 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	460b      	mov	r3, r1
 800e012:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e01a:	78fa      	ldrb	r2, [r7, #3]
 800e01c:	4611      	mov	r1, r2
 800e01e:	4618      	mov	r0, r3
 800e020:	f7f7 f9bc 	bl	800539c <HAL_HCD_HC_GetURBState>
 800e024:	4603      	mov	r3, r0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b082      	sub	sp, #8
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
 800e036:	460b      	mov	r3, r1
 800e038:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800e040:	2b01      	cmp	r3, #1
 800e042:	d103      	bne.n	800e04c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e044:	78fb      	ldrb	r3, [r7, #3]
 800e046:	4618      	mov	r0, r3
 800e048:	f000 f872 	bl	800e130 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e04c:	20c8      	movs	r0, #200	@ 0xc8
 800e04e:	f7f5 ff95 	bl	8003f7c <HAL_Delay>
  return USBH_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	3708      	adds	r7, #8
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	460b      	mov	r3, r1
 800e066:	70fb      	strb	r3, [r7, #3]
 800e068:	4613      	mov	r3, r2
 800e06a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e072:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e074:	78fa      	ldrb	r2, [r7, #3]
 800e076:	68f9      	ldr	r1, [r7, #12]
 800e078:	4613      	mov	r3, r2
 800e07a:	011b      	lsls	r3, r3, #4
 800e07c:	1a9b      	subs	r3, r3, r2
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	440b      	add	r3, r1
 800e082:	3317      	adds	r3, #23
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00a      	beq.n	800e0a0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e08a:	78fa      	ldrb	r2, [r7, #3]
 800e08c:	68f9      	ldr	r1, [r7, #12]
 800e08e:	4613      	mov	r3, r2
 800e090:	011b      	lsls	r3, r3, #4
 800e092:	1a9b      	subs	r3, r3, r2
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	440b      	add	r3, r1
 800e098:	333c      	adds	r3, #60	@ 0x3c
 800e09a:	78ba      	ldrb	r2, [r7, #2]
 800e09c:	701a      	strb	r2, [r3, #0]
 800e09e:	e009      	b.n	800e0b4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e0a0:	78fa      	ldrb	r2, [r7, #3]
 800e0a2:	68f9      	ldr	r1, [r7, #12]
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	011b      	lsls	r3, r3, #4
 800e0a8:	1a9b      	subs	r3, r3, r2
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	440b      	add	r3, r1
 800e0ae:	333d      	adds	r3, #61	@ 0x3d
 800e0b0:	78ba      	ldrb	r2, [r7, #2]
 800e0b2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3714      	adds	r7, #20
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr

0800e0c2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b082      	sub	sp, #8
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f7f5 ff56 	bl	8003f7c <HAL_Delay>
}
 800e0d0:	bf00      	nop
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	4603      	mov	r3, r0
 800e0e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	d817      	bhi.n	800e11c <USBH_Get_USB_Status+0x44>
 800e0ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e0f4 <USBH_Get_USB_Status+0x1c>)
 800e0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f2:	bf00      	nop
 800e0f4:	0800e105 	.word	0x0800e105
 800e0f8:	0800e10b 	.word	0x0800e10b
 800e0fc:	0800e111 	.word	0x0800e111
 800e100:	0800e117 	.word	0x0800e117
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e104:	2300      	movs	r3, #0
 800e106:	73fb      	strb	r3, [r7, #15]
    break;
 800e108:	e00b      	b.n	800e122 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e10a:	2302      	movs	r3, #2
 800e10c:	73fb      	strb	r3, [r7, #15]
    break;
 800e10e:	e008      	b.n	800e122 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e110:	2301      	movs	r3, #1
 800e112:	73fb      	strb	r3, [r7, #15]
    break;
 800e114:	e005      	b.n	800e122 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e116:	2302      	movs	r3, #2
 800e118:	73fb      	strb	r3, [r7, #15]
    break;
 800e11a:	e002      	b.n	800e122 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e11c:	2302      	movs	r3, #2
 800e11e:	73fb      	strb	r3, [r7, #15]
    break;
 800e120:	bf00      	nop
  }
  return usb_status;
 800e122:	7bfb      	ldrb	r3, [r7, #15]
}
 800e124:	4618      	mov	r0, r3
 800e126:	3714      	adds	r7, #20
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr

0800e130 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	4603      	mov	r3, r0
 800e138:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e13a:	79fb      	ldrb	r3, [r7, #7]
 800e13c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e13e:	79fb      	ldrb	r3, [r7, #7]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d102      	bne.n	800e14a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800e144:	2300      	movs	r3, #0
 800e146:	73fb      	strb	r3, [r7, #15]
 800e148:	e001      	b.n	800e14e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800e14a:	2301      	movs	r3, #1
 800e14c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,(GPIO_PinState)data);
 800e14e:	7bfb      	ldrb	r3, [r7, #15]
 800e150:	461a      	mov	r2, r3
 800e152:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e156:	4803      	ldr	r0, [pc, #12]	@ (800e164 <MX_DriverVbusFS+0x34>)
 800e158:	f7f6 fcb0 	bl	8004abc <HAL_GPIO_WritePin>
}
 800e15c:	bf00      	nop
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}
 800e164:	40020000 	.word	0x40020000

0800e168 <malloc>:
 800e168:	4b02      	ldr	r3, [pc, #8]	@ (800e174 <malloc+0xc>)
 800e16a:	4601      	mov	r1, r0
 800e16c:	6818      	ldr	r0, [r3, #0]
 800e16e:	f000 b82d 	b.w	800e1cc <_malloc_r>
 800e172:	bf00      	nop
 800e174:	200002a0 	.word	0x200002a0

0800e178 <free>:
 800e178:	4b02      	ldr	r3, [pc, #8]	@ (800e184 <free+0xc>)
 800e17a:	4601      	mov	r1, r0
 800e17c:	6818      	ldr	r0, [r3, #0]
 800e17e:	f000 baa5 	b.w	800e6cc <_free_r>
 800e182:	bf00      	nop
 800e184:	200002a0 	.word	0x200002a0

0800e188 <sbrk_aligned>:
 800e188:	b570      	push	{r4, r5, r6, lr}
 800e18a:	4e0f      	ldr	r6, [pc, #60]	@ (800e1c8 <sbrk_aligned+0x40>)
 800e18c:	460c      	mov	r4, r1
 800e18e:	6831      	ldr	r1, [r6, #0]
 800e190:	4605      	mov	r5, r0
 800e192:	b911      	cbnz	r1, 800e19a <sbrk_aligned+0x12>
 800e194:	f000 fa42 	bl	800e61c <_sbrk_r>
 800e198:	6030      	str	r0, [r6, #0]
 800e19a:	4621      	mov	r1, r4
 800e19c:	4628      	mov	r0, r5
 800e19e:	f000 fa3d 	bl	800e61c <_sbrk_r>
 800e1a2:	1c43      	adds	r3, r0, #1
 800e1a4:	d103      	bne.n	800e1ae <sbrk_aligned+0x26>
 800e1a6:	f04f 34ff 	mov.w	r4, #4294967295
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	bd70      	pop	{r4, r5, r6, pc}
 800e1ae:	1cc4      	adds	r4, r0, #3
 800e1b0:	f024 0403 	bic.w	r4, r4, #3
 800e1b4:	42a0      	cmp	r0, r4
 800e1b6:	d0f8      	beq.n	800e1aa <sbrk_aligned+0x22>
 800e1b8:	1a21      	subs	r1, r4, r0
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	f000 fa2e 	bl	800e61c <_sbrk_r>
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	d1f2      	bne.n	800e1aa <sbrk_aligned+0x22>
 800e1c4:	e7ef      	b.n	800e1a6 <sbrk_aligned+0x1e>
 800e1c6:	bf00      	nop
 800e1c8:	20012098 	.word	0x20012098

0800e1cc <_malloc_r>:
 800e1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1d0:	1ccd      	adds	r5, r1, #3
 800e1d2:	f025 0503 	bic.w	r5, r5, #3
 800e1d6:	3508      	adds	r5, #8
 800e1d8:	2d0c      	cmp	r5, #12
 800e1da:	bf38      	it	cc
 800e1dc:	250c      	movcc	r5, #12
 800e1de:	2d00      	cmp	r5, #0
 800e1e0:	4606      	mov	r6, r0
 800e1e2:	db01      	blt.n	800e1e8 <_malloc_r+0x1c>
 800e1e4:	42a9      	cmp	r1, r5
 800e1e6:	d904      	bls.n	800e1f2 <_malloc_r+0x26>
 800e1e8:	230c      	movs	r3, #12
 800e1ea:	6033      	str	r3, [r6, #0]
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2c8 <_malloc_r+0xfc>
 800e1f6:	f000 f869 	bl	800e2cc <__malloc_lock>
 800e1fa:	f8d8 3000 	ldr.w	r3, [r8]
 800e1fe:	461c      	mov	r4, r3
 800e200:	bb44      	cbnz	r4, 800e254 <_malloc_r+0x88>
 800e202:	4629      	mov	r1, r5
 800e204:	4630      	mov	r0, r6
 800e206:	f7ff ffbf 	bl	800e188 <sbrk_aligned>
 800e20a:	1c43      	adds	r3, r0, #1
 800e20c:	4604      	mov	r4, r0
 800e20e:	d158      	bne.n	800e2c2 <_malloc_r+0xf6>
 800e210:	f8d8 4000 	ldr.w	r4, [r8]
 800e214:	4627      	mov	r7, r4
 800e216:	2f00      	cmp	r7, #0
 800e218:	d143      	bne.n	800e2a2 <_malloc_r+0xd6>
 800e21a:	2c00      	cmp	r4, #0
 800e21c:	d04b      	beq.n	800e2b6 <_malloc_r+0xea>
 800e21e:	6823      	ldr	r3, [r4, #0]
 800e220:	4639      	mov	r1, r7
 800e222:	4630      	mov	r0, r6
 800e224:	eb04 0903 	add.w	r9, r4, r3
 800e228:	f000 f9f8 	bl	800e61c <_sbrk_r>
 800e22c:	4581      	cmp	r9, r0
 800e22e:	d142      	bne.n	800e2b6 <_malloc_r+0xea>
 800e230:	6821      	ldr	r1, [r4, #0]
 800e232:	1a6d      	subs	r5, r5, r1
 800e234:	4629      	mov	r1, r5
 800e236:	4630      	mov	r0, r6
 800e238:	f7ff ffa6 	bl	800e188 <sbrk_aligned>
 800e23c:	3001      	adds	r0, #1
 800e23e:	d03a      	beq.n	800e2b6 <_malloc_r+0xea>
 800e240:	6823      	ldr	r3, [r4, #0]
 800e242:	442b      	add	r3, r5
 800e244:	6023      	str	r3, [r4, #0]
 800e246:	f8d8 3000 	ldr.w	r3, [r8]
 800e24a:	685a      	ldr	r2, [r3, #4]
 800e24c:	bb62      	cbnz	r2, 800e2a8 <_malloc_r+0xdc>
 800e24e:	f8c8 7000 	str.w	r7, [r8]
 800e252:	e00f      	b.n	800e274 <_malloc_r+0xa8>
 800e254:	6822      	ldr	r2, [r4, #0]
 800e256:	1b52      	subs	r2, r2, r5
 800e258:	d420      	bmi.n	800e29c <_malloc_r+0xd0>
 800e25a:	2a0b      	cmp	r2, #11
 800e25c:	d917      	bls.n	800e28e <_malloc_r+0xc2>
 800e25e:	1961      	adds	r1, r4, r5
 800e260:	42a3      	cmp	r3, r4
 800e262:	6025      	str	r5, [r4, #0]
 800e264:	bf18      	it	ne
 800e266:	6059      	strne	r1, [r3, #4]
 800e268:	6863      	ldr	r3, [r4, #4]
 800e26a:	bf08      	it	eq
 800e26c:	f8c8 1000 	streq.w	r1, [r8]
 800e270:	5162      	str	r2, [r4, r5]
 800e272:	604b      	str	r3, [r1, #4]
 800e274:	4630      	mov	r0, r6
 800e276:	f000 f82f 	bl	800e2d8 <__malloc_unlock>
 800e27a:	f104 000b 	add.w	r0, r4, #11
 800e27e:	1d23      	adds	r3, r4, #4
 800e280:	f020 0007 	bic.w	r0, r0, #7
 800e284:	1ac2      	subs	r2, r0, r3
 800e286:	bf1c      	itt	ne
 800e288:	1a1b      	subne	r3, r3, r0
 800e28a:	50a3      	strne	r3, [r4, r2]
 800e28c:	e7af      	b.n	800e1ee <_malloc_r+0x22>
 800e28e:	6862      	ldr	r2, [r4, #4]
 800e290:	42a3      	cmp	r3, r4
 800e292:	bf0c      	ite	eq
 800e294:	f8c8 2000 	streq.w	r2, [r8]
 800e298:	605a      	strne	r2, [r3, #4]
 800e29a:	e7eb      	b.n	800e274 <_malloc_r+0xa8>
 800e29c:	4623      	mov	r3, r4
 800e29e:	6864      	ldr	r4, [r4, #4]
 800e2a0:	e7ae      	b.n	800e200 <_malloc_r+0x34>
 800e2a2:	463c      	mov	r4, r7
 800e2a4:	687f      	ldr	r7, [r7, #4]
 800e2a6:	e7b6      	b.n	800e216 <_malloc_r+0x4a>
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	42a3      	cmp	r3, r4
 800e2ae:	d1fb      	bne.n	800e2a8 <_malloc_r+0xdc>
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	6053      	str	r3, [r2, #4]
 800e2b4:	e7de      	b.n	800e274 <_malloc_r+0xa8>
 800e2b6:	230c      	movs	r3, #12
 800e2b8:	6033      	str	r3, [r6, #0]
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	f000 f80c 	bl	800e2d8 <__malloc_unlock>
 800e2c0:	e794      	b.n	800e1ec <_malloc_r+0x20>
 800e2c2:	6005      	str	r5, [r0, #0]
 800e2c4:	e7d6      	b.n	800e274 <_malloc_r+0xa8>
 800e2c6:	bf00      	nop
 800e2c8:	2001209c 	.word	0x2001209c

0800e2cc <__malloc_lock>:
 800e2cc:	4801      	ldr	r0, [pc, #4]	@ (800e2d4 <__malloc_lock+0x8>)
 800e2ce:	f000 b9f2 	b.w	800e6b6 <__retarget_lock_acquire_recursive>
 800e2d2:	bf00      	nop
 800e2d4:	200121e0 	.word	0x200121e0

0800e2d8 <__malloc_unlock>:
 800e2d8:	4801      	ldr	r0, [pc, #4]	@ (800e2e0 <__malloc_unlock+0x8>)
 800e2da:	f000 b9ed 	b.w	800e6b8 <__retarget_lock_release_recursive>
 800e2de:	bf00      	nop
 800e2e0:	200121e0 	.word	0x200121e0

0800e2e4 <std>:
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	b510      	push	{r4, lr}
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	e9c0 3300 	strd	r3, r3, [r0]
 800e2ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2f2:	6083      	str	r3, [r0, #8]
 800e2f4:	8181      	strh	r1, [r0, #12]
 800e2f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800e2f8:	81c2      	strh	r2, [r0, #14]
 800e2fa:	6183      	str	r3, [r0, #24]
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	2208      	movs	r2, #8
 800e300:	305c      	adds	r0, #92	@ 0x5c
 800e302:	f000 f94f 	bl	800e5a4 <memset>
 800e306:	4b0d      	ldr	r3, [pc, #52]	@ (800e33c <std+0x58>)
 800e308:	6263      	str	r3, [r4, #36]	@ 0x24
 800e30a:	4b0d      	ldr	r3, [pc, #52]	@ (800e340 <std+0x5c>)
 800e30c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e30e:	4b0d      	ldr	r3, [pc, #52]	@ (800e344 <std+0x60>)
 800e310:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e312:	4b0d      	ldr	r3, [pc, #52]	@ (800e348 <std+0x64>)
 800e314:	6323      	str	r3, [r4, #48]	@ 0x30
 800e316:	4b0d      	ldr	r3, [pc, #52]	@ (800e34c <std+0x68>)
 800e318:	6224      	str	r4, [r4, #32]
 800e31a:	429c      	cmp	r4, r3
 800e31c:	d006      	beq.n	800e32c <std+0x48>
 800e31e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e322:	4294      	cmp	r4, r2
 800e324:	d002      	beq.n	800e32c <std+0x48>
 800e326:	33d0      	adds	r3, #208	@ 0xd0
 800e328:	429c      	cmp	r4, r3
 800e32a:	d105      	bne.n	800e338 <std+0x54>
 800e32c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e334:	f000 b9be 	b.w	800e6b4 <__retarget_lock_init_recursive>
 800e338:	bd10      	pop	{r4, pc}
 800e33a:	bf00      	nop
 800e33c:	0800e4dd 	.word	0x0800e4dd
 800e340:	0800e4ff 	.word	0x0800e4ff
 800e344:	0800e537 	.word	0x0800e537
 800e348:	0800e55b 	.word	0x0800e55b
 800e34c:	200120a0 	.word	0x200120a0

0800e350 <stdio_exit_handler>:
 800e350:	4a02      	ldr	r2, [pc, #8]	@ (800e35c <stdio_exit_handler+0xc>)
 800e352:	4903      	ldr	r1, [pc, #12]	@ (800e360 <stdio_exit_handler+0x10>)
 800e354:	4803      	ldr	r0, [pc, #12]	@ (800e364 <stdio_exit_handler+0x14>)
 800e356:	f000 b869 	b.w	800e42c <_fwalk_sglue>
 800e35a:	bf00      	nop
 800e35c:	20000294 	.word	0x20000294
 800e360:	0800f0b9 	.word	0x0800f0b9
 800e364:	200002a4 	.word	0x200002a4

0800e368 <cleanup_stdio>:
 800e368:	6841      	ldr	r1, [r0, #4]
 800e36a:	4b0c      	ldr	r3, [pc, #48]	@ (800e39c <cleanup_stdio+0x34>)
 800e36c:	4299      	cmp	r1, r3
 800e36e:	b510      	push	{r4, lr}
 800e370:	4604      	mov	r4, r0
 800e372:	d001      	beq.n	800e378 <cleanup_stdio+0x10>
 800e374:	f000 fea0 	bl	800f0b8 <_fflush_r>
 800e378:	68a1      	ldr	r1, [r4, #8]
 800e37a:	4b09      	ldr	r3, [pc, #36]	@ (800e3a0 <cleanup_stdio+0x38>)
 800e37c:	4299      	cmp	r1, r3
 800e37e:	d002      	beq.n	800e386 <cleanup_stdio+0x1e>
 800e380:	4620      	mov	r0, r4
 800e382:	f000 fe99 	bl	800f0b8 <_fflush_r>
 800e386:	68e1      	ldr	r1, [r4, #12]
 800e388:	4b06      	ldr	r3, [pc, #24]	@ (800e3a4 <cleanup_stdio+0x3c>)
 800e38a:	4299      	cmp	r1, r3
 800e38c:	d004      	beq.n	800e398 <cleanup_stdio+0x30>
 800e38e:	4620      	mov	r0, r4
 800e390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e394:	f000 be90 	b.w	800f0b8 <_fflush_r>
 800e398:	bd10      	pop	{r4, pc}
 800e39a:	bf00      	nop
 800e39c:	200120a0 	.word	0x200120a0
 800e3a0:	20012108 	.word	0x20012108
 800e3a4:	20012170 	.word	0x20012170

0800e3a8 <global_stdio_init.part.0>:
 800e3a8:	b510      	push	{r4, lr}
 800e3aa:	4b0b      	ldr	r3, [pc, #44]	@ (800e3d8 <global_stdio_init.part.0+0x30>)
 800e3ac:	4c0b      	ldr	r4, [pc, #44]	@ (800e3dc <global_stdio_init.part.0+0x34>)
 800e3ae:	4a0c      	ldr	r2, [pc, #48]	@ (800e3e0 <global_stdio_init.part.0+0x38>)
 800e3b0:	601a      	str	r2, [r3, #0]
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	2104      	movs	r1, #4
 800e3b8:	f7ff ff94 	bl	800e2e4 <std>
 800e3bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	2109      	movs	r1, #9
 800e3c4:	f7ff ff8e 	bl	800e2e4 <std>
 800e3c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e3cc:	2202      	movs	r2, #2
 800e3ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3d2:	2112      	movs	r1, #18
 800e3d4:	f7ff bf86 	b.w	800e2e4 <std>
 800e3d8:	200121d8 	.word	0x200121d8
 800e3dc:	200120a0 	.word	0x200120a0
 800e3e0:	0800e351 	.word	0x0800e351

0800e3e4 <__sfp_lock_acquire>:
 800e3e4:	4801      	ldr	r0, [pc, #4]	@ (800e3ec <__sfp_lock_acquire+0x8>)
 800e3e6:	f000 b966 	b.w	800e6b6 <__retarget_lock_acquire_recursive>
 800e3ea:	bf00      	nop
 800e3ec:	200121e1 	.word	0x200121e1

0800e3f0 <__sfp_lock_release>:
 800e3f0:	4801      	ldr	r0, [pc, #4]	@ (800e3f8 <__sfp_lock_release+0x8>)
 800e3f2:	f000 b961 	b.w	800e6b8 <__retarget_lock_release_recursive>
 800e3f6:	bf00      	nop
 800e3f8:	200121e1 	.word	0x200121e1

0800e3fc <__sinit>:
 800e3fc:	b510      	push	{r4, lr}
 800e3fe:	4604      	mov	r4, r0
 800e400:	f7ff fff0 	bl	800e3e4 <__sfp_lock_acquire>
 800e404:	6a23      	ldr	r3, [r4, #32]
 800e406:	b11b      	cbz	r3, 800e410 <__sinit+0x14>
 800e408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e40c:	f7ff bff0 	b.w	800e3f0 <__sfp_lock_release>
 800e410:	4b04      	ldr	r3, [pc, #16]	@ (800e424 <__sinit+0x28>)
 800e412:	6223      	str	r3, [r4, #32]
 800e414:	4b04      	ldr	r3, [pc, #16]	@ (800e428 <__sinit+0x2c>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1f5      	bne.n	800e408 <__sinit+0xc>
 800e41c:	f7ff ffc4 	bl	800e3a8 <global_stdio_init.part.0>
 800e420:	e7f2      	b.n	800e408 <__sinit+0xc>
 800e422:	bf00      	nop
 800e424:	0800e369 	.word	0x0800e369
 800e428:	200121d8 	.word	0x200121d8

0800e42c <_fwalk_sglue>:
 800e42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e430:	4607      	mov	r7, r0
 800e432:	4688      	mov	r8, r1
 800e434:	4614      	mov	r4, r2
 800e436:	2600      	movs	r6, #0
 800e438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e43c:	f1b9 0901 	subs.w	r9, r9, #1
 800e440:	d505      	bpl.n	800e44e <_fwalk_sglue+0x22>
 800e442:	6824      	ldr	r4, [r4, #0]
 800e444:	2c00      	cmp	r4, #0
 800e446:	d1f7      	bne.n	800e438 <_fwalk_sglue+0xc>
 800e448:	4630      	mov	r0, r6
 800e44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e44e:	89ab      	ldrh	r3, [r5, #12]
 800e450:	2b01      	cmp	r3, #1
 800e452:	d907      	bls.n	800e464 <_fwalk_sglue+0x38>
 800e454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e458:	3301      	adds	r3, #1
 800e45a:	d003      	beq.n	800e464 <_fwalk_sglue+0x38>
 800e45c:	4629      	mov	r1, r5
 800e45e:	4638      	mov	r0, r7
 800e460:	47c0      	blx	r8
 800e462:	4306      	orrs	r6, r0
 800e464:	3568      	adds	r5, #104	@ 0x68
 800e466:	e7e9      	b.n	800e43c <_fwalk_sglue+0x10>

0800e468 <iprintf>:
 800e468:	b40f      	push	{r0, r1, r2, r3}
 800e46a:	b507      	push	{r0, r1, r2, lr}
 800e46c:	4906      	ldr	r1, [pc, #24]	@ (800e488 <iprintf+0x20>)
 800e46e:	ab04      	add	r3, sp, #16
 800e470:	6808      	ldr	r0, [r1, #0]
 800e472:	f853 2b04 	ldr.w	r2, [r3], #4
 800e476:	6881      	ldr	r1, [r0, #8]
 800e478:	9301      	str	r3, [sp, #4]
 800e47a:	f000 faf3 	bl	800ea64 <_vfiprintf_r>
 800e47e:	b003      	add	sp, #12
 800e480:	f85d eb04 	ldr.w	lr, [sp], #4
 800e484:	b004      	add	sp, #16
 800e486:	4770      	bx	lr
 800e488:	200002a0 	.word	0x200002a0

0800e48c <putchar>:
 800e48c:	4b02      	ldr	r3, [pc, #8]	@ (800e498 <putchar+0xc>)
 800e48e:	4601      	mov	r1, r0
 800e490:	6818      	ldr	r0, [r3, #0]
 800e492:	6882      	ldr	r2, [r0, #8]
 800e494:	f000 be38 	b.w	800f108 <_putc_r>
 800e498:	200002a0 	.word	0x200002a0

0800e49c <siprintf>:
 800e49c:	b40e      	push	{r1, r2, r3}
 800e49e:	b500      	push	{lr}
 800e4a0:	b09c      	sub	sp, #112	@ 0x70
 800e4a2:	ab1d      	add	r3, sp, #116	@ 0x74
 800e4a4:	9002      	str	r0, [sp, #8]
 800e4a6:	9006      	str	r0, [sp, #24]
 800e4a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e4ac:	4809      	ldr	r0, [pc, #36]	@ (800e4d4 <siprintf+0x38>)
 800e4ae:	9107      	str	r1, [sp, #28]
 800e4b0:	9104      	str	r1, [sp, #16]
 800e4b2:	4909      	ldr	r1, [pc, #36]	@ (800e4d8 <siprintf+0x3c>)
 800e4b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4b8:	9105      	str	r1, [sp, #20]
 800e4ba:	6800      	ldr	r0, [r0, #0]
 800e4bc:	9301      	str	r3, [sp, #4]
 800e4be:	a902      	add	r1, sp, #8
 800e4c0:	f000 f9aa 	bl	800e818 <_svfiprintf_r>
 800e4c4:	9b02      	ldr	r3, [sp, #8]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	701a      	strb	r2, [r3, #0]
 800e4ca:	b01c      	add	sp, #112	@ 0x70
 800e4cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4d0:	b003      	add	sp, #12
 800e4d2:	4770      	bx	lr
 800e4d4:	200002a0 	.word	0x200002a0
 800e4d8:	ffff0208 	.word	0xffff0208

0800e4dc <__sread>:
 800e4dc:	b510      	push	{r4, lr}
 800e4de:	460c      	mov	r4, r1
 800e4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4e4:	f000 f888 	bl	800e5f8 <_read_r>
 800e4e8:	2800      	cmp	r0, #0
 800e4ea:	bfab      	itete	ge
 800e4ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e4ee:	89a3      	ldrhlt	r3, [r4, #12]
 800e4f0:	181b      	addge	r3, r3, r0
 800e4f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e4f6:	bfac      	ite	ge
 800e4f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e4fa:	81a3      	strhlt	r3, [r4, #12]
 800e4fc:	bd10      	pop	{r4, pc}

0800e4fe <__swrite>:
 800e4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e502:	461f      	mov	r7, r3
 800e504:	898b      	ldrh	r3, [r1, #12]
 800e506:	05db      	lsls	r3, r3, #23
 800e508:	4605      	mov	r5, r0
 800e50a:	460c      	mov	r4, r1
 800e50c:	4616      	mov	r6, r2
 800e50e:	d505      	bpl.n	800e51c <__swrite+0x1e>
 800e510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e514:	2302      	movs	r3, #2
 800e516:	2200      	movs	r2, #0
 800e518:	f000 f85c 	bl	800e5d4 <_lseek_r>
 800e51c:	89a3      	ldrh	r3, [r4, #12]
 800e51e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e522:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e526:	81a3      	strh	r3, [r4, #12]
 800e528:	4632      	mov	r2, r6
 800e52a:	463b      	mov	r3, r7
 800e52c:	4628      	mov	r0, r5
 800e52e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e532:	f000 b883 	b.w	800e63c <_write_r>

0800e536 <__sseek>:
 800e536:	b510      	push	{r4, lr}
 800e538:	460c      	mov	r4, r1
 800e53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e53e:	f000 f849 	bl	800e5d4 <_lseek_r>
 800e542:	1c43      	adds	r3, r0, #1
 800e544:	89a3      	ldrh	r3, [r4, #12]
 800e546:	bf15      	itete	ne
 800e548:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e54a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e54e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e552:	81a3      	strheq	r3, [r4, #12]
 800e554:	bf18      	it	ne
 800e556:	81a3      	strhne	r3, [r4, #12]
 800e558:	bd10      	pop	{r4, pc}

0800e55a <__sclose>:
 800e55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e55e:	f000 b829 	b.w	800e5b4 <_close_r>
	...

0800e564 <_vsiprintf_r>:
 800e564:	b500      	push	{lr}
 800e566:	b09b      	sub	sp, #108	@ 0x6c
 800e568:	9100      	str	r1, [sp, #0]
 800e56a:	9104      	str	r1, [sp, #16]
 800e56c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e570:	9105      	str	r1, [sp, #20]
 800e572:	9102      	str	r1, [sp, #8]
 800e574:	4905      	ldr	r1, [pc, #20]	@ (800e58c <_vsiprintf_r+0x28>)
 800e576:	9103      	str	r1, [sp, #12]
 800e578:	4669      	mov	r1, sp
 800e57a:	f000 f94d 	bl	800e818 <_svfiprintf_r>
 800e57e:	9b00      	ldr	r3, [sp, #0]
 800e580:	2200      	movs	r2, #0
 800e582:	701a      	strb	r2, [r3, #0]
 800e584:	b01b      	add	sp, #108	@ 0x6c
 800e586:	f85d fb04 	ldr.w	pc, [sp], #4
 800e58a:	bf00      	nop
 800e58c:	ffff0208 	.word	0xffff0208

0800e590 <vsiprintf>:
 800e590:	4613      	mov	r3, r2
 800e592:	460a      	mov	r2, r1
 800e594:	4601      	mov	r1, r0
 800e596:	4802      	ldr	r0, [pc, #8]	@ (800e5a0 <vsiprintf+0x10>)
 800e598:	6800      	ldr	r0, [r0, #0]
 800e59a:	f7ff bfe3 	b.w	800e564 <_vsiprintf_r>
 800e59e:	bf00      	nop
 800e5a0:	200002a0 	.word	0x200002a0

0800e5a4 <memset>:
 800e5a4:	4402      	add	r2, r0
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d100      	bne.n	800e5ae <memset+0xa>
 800e5ac:	4770      	bx	lr
 800e5ae:	f803 1b01 	strb.w	r1, [r3], #1
 800e5b2:	e7f9      	b.n	800e5a8 <memset+0x4>

0800e5b4 <_close_r>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	4d06      	ldr	r5, [pc, #24]	@ (800e5d0 <_close_r+0x1c>)
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	4608      	mov	r0, r1
 800e5be:	602b      	str	r3, [r5, #0]
 800e5c0:	f7f5 fbc3 	bl	8003d4a <_close>
 800e5c4:	1c43      	adds	r3, r0, #1
 800e5c6:	d102      	bne.n	800e5ce <_close_r+0x1a>
 800e5c8:	682b      	ldr	r3, [r5, #0]
 800e5ca:	b103      	cbz	r3, 800e5ce <_close_r+0x1a>
 800e5cc:	6023      	str	r3, [r4, #0]
 800e5ce:	bd38      	pop	{r3, r4, r5, pc}
 800e5d0:	200121dc 	.word	0x200121dc

0800e5d4 <_lseek_r>:
 800e5d4:	b538      	push	{r3, r4, r5, lr}
 800e5d6:	4d07      	ldr	r5, [pc, #28]	@ (800e5f4 <_lseek_r+0x20>)
 800e5d8:	4604      	mov	r4, r0
 800e5da:	4608      	mov	r0, r1
 800e5dc:	4611      	mov	r1, r2
 800e5de:	2200      	movs	r2, #0
 800e5e0:	602a      	str	r2, [r5, #0]
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	f7f5 fbd8 	bl	8003d98 <_lseek>
 800e5e8:	1c43      	adds	r3, r0, #1
 800e5ea:	d102      	bne.n	800e5f2 <_lseek_r+0x1e>
 800e5ec:	682b      	ldr	r3, [r5, #0]
 800e5ee:	b103      	cbz	r3, 800e5f2 <_lseek_r+0x1e>
 800e5f0:	6023      	str	r3, [r4, #0]
 800e5f2:	bd38      	pop	{r3, r4, r5, pc}
 800e5f4:	200121dc 	.word	0x200121dc

0800e5f8 <_read_r>:
 800e5f8:	b538      	push	{r3, r4, r5, lr}
 800e5fa:	4d07      	ldr	r5, [pc, #28]	@ (800e618 <_read_r+0x20>)
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	4608      	mov	r0, r1
 800e600:	4611      	mov	r1, r2
 800e602:	2200      	movs	r2, #0
 800e604:	602a      	str	r2, [r5, #0]
 800e606:	461a      	mov	r2, r3
 800e608:	f7f5 fb82 	bl	8003d10 <_read>
 800e60c:	1c43      	adds	r3, r0, #1
 800e60e:	d102      	bne.n	800e616 <_read_r+0x1e>
 800e610:	682b      	ldr	r3, [r5, #0]
 800e612:	b103      	cbz	r3, 800e616 <_read_r+0x1e>
 800e614:	6023      	str	r3, [r4, #0]
 800e616:	bd38      	pop	{r3, r4, r5, pc}
 800e618:	200121dc 	.word	0x200121dc

0800e61c <_sbrk_r>:
 800e61c:	b538      	push	{r3, r4, r5, lr}
 800e61e:	4d06      	ldr	r5, [pc, #24]	@ (800e638 <_sbrk_r+0x1c>)
 800e620:	2300      	movs	r3, #0
 800e622:	4604      	mov	r4, r0
 800e624:	4608      	mov	r0, r1
 800e626:	602b      	str	r3, [r5, #0]
 800e628:	f7f5 fbc4 	bl	8003db4 <_sbrk>
 800e62c:	1c43      	adds	r3, r0, #1
 800e62e:	d102      	bne.n	800e636 <_sbrk_r+0x1a>
 800e630:	682b      	ldr	r3, [r5, #0]
 800e632:	b103      	cbz	r3, 800e636 <_sbrk_r+0x1a>
 800e634:	6023      	str	r3, [r4, #0]
 800e636:	bd38      	pop	{r3, r4, r5, pc}
 800e638:	200121dc 	.word	0x200121dc

0800e63c <_write_r>:
 800e63c:	b538      	push	{r3, r4, r5, lr}
 800e63e:	4d07      	ldr	r5, [pc, #28]	@ (800e65c <_write_r+0x20>)
 800e640:	4604      	mov	r4, r0
 800e642:	4608      	mov	r0, r1
 800e644:	4611      	mov	r1, r2
 800e646:	2200      	movs	r2, #0
 800e648:	602a      	str	r2, [r5, #0]
 800e64a:	461a      	mov	r2, r3
 800e64c:	f7f2 fddc 	bl	8001208 <_write>
 800e650:	1c43      	adds	r3, r0, #1
 800e652:	d102      	bne.n	800e65a <_write_r+0x1e>
 800e654:	682b      	ldr	r3, [r5, #0]
 800e656:	b103      	cbz	r3, 800e65a <_write_r+0x1e>
 800e658:	6023      	str	r3, [r4, #0]
 800e65a:	bd38      	pop	{r3, r4, r5, pc}
 800e65c:	200121dc 	.word	0x200121dc

0800e660 <__errno>:
 800e660:	4b01      	ldr	r3, [pc, #4]	@ (800e668 <__errno+0x8>)
 800e662:	6818      	ldr	r0, [r3, #0]
 800e664:	4770      	bx	lr
 800e666:	bf00      	nop
 800e668:	200002a0 	.word	0x200002a0

0800e66c <__libc_init_array>:
 800e66c:	b570      	push	{r4, r5, r6, lr}
 800e66e:	4d0d      	ldr	r5, [pc, #52]	@ (800e6a4 <__libc_init_array+0x38>)
 800e670:	4c0d      	ldr	r4, [pc, #52]	@ (800e6a8 <__libc_init_array+0x3c>)
 800e672:	1b64      	subs	r4, r4, r5
 800e674:	10a4      	asrs	r4, r4, #2
 800e676:	2600      	movs	r6, #0
 800e678:	42a6      	cmp	r6, r4
 800e67a:	d109      	bne.n	800e690 <__libc_init_array+0x24>
 800e67c:	4d0b      	ldr	r5, [pc, #44]	@ (800e6ac <__libc_init_array+0x40>)
 800e67e:	4c0c      	ldr	r4, [pc, #48]	@ (800e6b0 <__libc_init_array+0x44>)
 800e680:	f000 feec 	bl	800f45c <_init>
 800e684:	1b64      	subs	r4, r4, r5
 800e686:	10a4      	asrs	r4, r4, #2
 800e688:	2600      	movs	r6, #0
 800e68a:	42a6      	cmp	r6, r4
 800e68c:	d105      	bne.n	800e69a <__libc_init_array+0x2e>
 800e68e:	bd70      	pop	{r4, r5, r6, pc}
 800e690:	f855 3b04 	ldr.w	r3, [r5], #4
 800e694:	4798      	blx	r3
 800e696:	3601      	adds	r6, #1
 800e698:	e7ee      	b.n	800e678 <__libc_init_array+0xc>
 800e69a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e69e:	4798      	blx	r3
 800e6a0:	3601      	adds	r6, #1
 800e6a2:	e7f2      	b.n	800e68a <__libc_init_array+0x1e>
 800e6a4:	08011f74 	.word	0x08011f74
 800e6a8:	08011f74 	.word	0x08011f74
 800e6ac:	08011f74 	.word	0x08011f74
 800e6b0:	08011f78 	.word	0x08011f78

0800e6b4 <__retarget_lock_init_recursive>:
 800e6b4:	4770      	bx	lr

0800e6b6 <__retarget_lock_acquire_recursive>:
 800e6b6:	4770      	bx	lr

0800e6b8 <__retarget_lock_release_recursive>:
 800e6b8:	4770      	bx	lr

0800e6ba <strcpy>:
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6c0:	f803 2b01 	strb.w	r2, [r3], #1
 800e6c4:	2a00      	cmp	r2, #0
 800e6c6:	d1f9      	bne.n	800e6bc <strcpy+0x2>
 800e6c8:	4770      	bx	lr
	...

0800e6cc <_free_r>:
 800e6cc:	b538      	push	{r3, r4, r5, lr}
 800e6ce:	4605      	mov	r5, r0
 800e6d0:	2900      	cmp	r1, #0
 800e6d2:	d041      	beq.n	800e758 <_free_r+0x8c>
 800e6d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6d8:	1f0c      	subs	r4, r1, #4
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	bfb8      	it	lt
 800e6de:	18e4      	addlt	r4, r4, r3
 800e6e0:	f7ff fdf4 	bl	800e2cc <__malloc_lock>
 800e6e4:	4a1d      	ldr	r2, [pc, #116]	@ (800e75c <_free_r+0x90>)
 800e6e6:	6813      	ldr	r3, [r2, #0]
 800e6e8:	b933      	cbnz	r3, 800e6f8 <_free_r+0x2c>
 800e6ea:	6063      	str	r3, [r4, #4]
 800e6ec:	6014      	str	r4, [r2, #0]
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6f4:	f7ff bdf0 	b.w	800e2d8 <__malloc_unlock>
 800e6f8:	42a3      	cmp	r3, r4
 800e6fa:	d908      	bls.n	800e70e <_free_r+0x42>
 800e6fc:	6820      	ldr	r0, [r4, #0]
 800e6fe:	1821      	adds	r1, r4, r0
 800e700:	428b      	cmp	r3, r1
 800e702:	bf01      	itttt	eq
 800e704:	6819      	ldreq	r1, [r3, #0]
 800e706:	685b      	ldreq	r3, [r3, #4]
 800e708:	1809      	addeq	r1, r1, r0
 800e70a:	6021      	streq	r1, [r4, #0]
 800e70c:	e7ed      	b.n	800e6ea <_free_r+0x1e>
 800e70e:	461a      	mov	r2, r3
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	b10b      	cbz	r3, 800e718 <_free_r+0x4c>
 800e714:	42a3      	cmp	r3, r4
 800e716:	d9fa      	bls.n	800e70e <_free_r+0x42>
 800e718:	6811      	ldr	r1, [r2, #0]
 800e71a:	1850      	adds	r0, r2, r1
 800e71c:	42a0      	cmp	r0, r4
 800e71e:	d10b      	bne.n	800e738 <_free_r+0x6c>
 800e720:	6820      	ldr	r0, [r4, #0]
 800e722:	4401      	add	r1, r0
 800e724:	1850      	adds	r0, r2, r1
 800e726:	4283      	cmp	r3, r0
 800e728:	6011      	str	r1, [r2, #0]
 800e72a:	d1e0      	bne.n	800e6ee <_free_r+0x22>
 800e72c:	6818      	ldr	r0, [r3, #0]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	6053      	str	r3, [r2, #4]
 800e732:	4408      	add	r0, r1
 800e734:	6010      	str	r0, [r2, #0]
 800e736:	e7da      	b.n	800e6ee <_free_r+0x22>
 800e738:	d902      	bls.n	800e740 <_free_r+0x74>
 800e73a:	230c      	movs	r3, #12
 800e73c:	602b      	str	r3, [r5, #0]
 800e73e:	e7d6      	b.n	800e6ee <_free_r+0x22>
 800e740:	6820      	ldr	r0, [r4, #0]
 800e742:	1821      	adds	r1, r4, r0
 800e744:	428b      	cmp	r3, r1
 800e746:	bf04      	itt	eq
 800e748:	6819      	ldreq	r1, [r3, #0]
 800e74a:	685b      	ldreq	r3, [r3, #4]
 800e74c:	6063      	str	r3, [r4, #4]
 800e74e:	bf04      	itt	eq
 800e750:	1809      	addeq	r1, r1, r0
 800e752:	6021      	streq	r1, [r4, #0]
 800e754:	6054      	str	r4, [r2, #4]
 800e756:	e7ca      	b.n	800e6ee <_free_r+0x22>
 800e758:	bd38      	pop	{r3, r4, r5, pc}
 800e75a:	bf00      	nop
 800e75c:	2001209c 	.word	0x2001209c

0800e760 <__ssputs_r>:
 800e760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e764:	688e      	ldr	r6, [r1, #8]
 800e766:	461f      	mov	r7, r3
 800e768:	42be      	cmp	r6, r7
 800e76a:	680b      	ldr	r3, [r1, #0]
 800e76c:	4682      	mov	sl, r0
 800e76e:	460c      	mov	r4, r1
 800e770:	4690      	mov	r8, r2
 800e772:	d82d      	bhi.n	800e7d0 <__ssputs_r+0x70>
 800e774:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e778:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e77c:	d026      	beq.n	800e7cc <__ssputs_r+0x6c>
 800e77e:	6965      	ldr	r5, [r4, #20]
 800e780:	6909      	ldr	r1, [r1, #16]
 800e782:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e786:	eba3 0901 	sub.w	r9, r3, r1
 800e78a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e78e:	1c7b      	adds	r3, r7, #1
 800e790:	444b      	add	r3, r9
 800e792:	106d      	asrs	r5, r5, #1
 800e794:	429d      	cmp	r5, r3
 800e796:	bf38      	it	cc
 800e798:	461d      	movcc	r5, r3
 800e79a:	0553      	lsls	r3, r2, #21
 800e79c:	d527      	bpl.n	800e7ee <__ssputs_r+0x8e>
 800e79e:	4629      	mov	r1, r5
 800e7a0:	f7ff fd14 	bl	800e1cc <_malloc_r>
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	b360      	cbz	r0, 800e802 <__ssputs_r+0xa2>
 800e7a8:	6921      	ldr	r1, [r4, #16]
 800e7aa:	464a      	mov	r2, r9
 800e7ac:	f000 fd8e 	bl	800f2cc <memcpy>
 800e7b0:	89a3      	ldrh	r3, [r4, #12]
 800e7b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e7b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7ba:	81a3      	strh	r3, [r4, #12]
 800e7bc:	6126      	str	r6, [r4, #16]
 800e7be:	6165      	str	r5, [r4, #20]
 800e7c0:	444e      	add	r6, r9
 800e7c2:	eba5 0509 	sub.w	r5, r5, r9
 800e7c6:	6026      	str	r6, [r4, #0]
 800e7c8:	60a5      	str	r5, [r4, #8]
 800e7ca:	463e      	mov	r6, r7
 800e7cc:	42be      	cmp	r6, r7
 800e7ce:	d900      	bls.n	800e7d2 <__ssputs_r+0x72>
 800e7d0:	463e      	mov	r6, r7
 800e7d2:	6820      	ldr	r0, [r4, #0]
 800e7d4:	4632      	mov	r2, r6
 800e7d6:	4641      	mov	r1, r8
 800e7d8:	f000 fd5e 	bl	800f298 <memmove>
 800e7dc:	68a3      	ldr	r3, [r4, #8]
 800e7de:	1b9b      	subs	r3, r3, r6
 800e7e0:	60a3      	str	r3, [r4, #8]
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	4433      	add	r3, r6
 800e7e6:	6023      	str	r3, [r4, #0]
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ee:	462a      	mov	r2, r5
 800e7f0:	f000 fd7a 	bl	800f2e8 <_realloc_r>
 800e7f4:	4606      	mov	r6, r0
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d1e0      	bne.n	800e7bc <__ssputs_r+0x5c>
 800e7fa:	6921      	ldr	r1, [r4, #16]
 800e7fc:	4650      	mov	r0, sl
 800e7fe:	f7ff ff65 	bl	800e6cc <_free_r>
 800e802:	230c      	movs	r3, #12
 800e804:	f8ca 3000 	str.w	r3, [sl]
 800e808:	89a3      	ldrh	r3, [r4, #12]
 800e80a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e80e:	81a3      	strh	r3, [r4, #12]
 800e810:	f04f 30ff 	mov.w	r0, #4294967295
 800e814:	e7e9      	b.n	800e7ea <__ssputs_r+0x8a>
	...

0800e818 <_svfiprintf_r>:
 800e818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e81c:	4698      	mov	r8, r3
 800e81e:	898b      	ldrh	r3, [r1, #12]
 800e820:	061b      	lsls	r3, r3, #24
 800e822:	b09d      	sub	sp, #116	@ 0x74
 800e824:	4607      	mov	r7, r0
 800e826:	460d      	mov	r5, r1
 800e828:	4614      	mov	r4, r2
 800e82a:	d510      	bpl.n	800e84e <_svfiprintf_r+0x36>
 800e82c:	690b      	ldr	r3, [r1, #16]
 800e82e:	b973      	cbnz	r3, 800e84e <_svfiprintf_r+0x36>
 800e830:	2140      	movs	r1, #64	@ 0x40
 800e832:	f7ff fccb 	bl	800e1cc <_malloc_r>
 800e836:	6028      	str	r0, [r5, #0]
 800e838:	6128      	str	r0, [r5, #16]
 800e83a:	b930      	cbnz	r0, 800e84a <_svfiprintf_r+0x32>
 800e83c:	230c      	movs	r3, #12
 800e83e:	603b      	str	r3, [r7, #0]
 800e840:	f04f 30ff 	mov.w	r0, #4294967295
 800e844:	b01d      	add	sp, #116	@ 0x74
 800e846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84a:	2340      	movs	r3, #64	@ 0x40
 800e84c:	616b      	str	r3, [r5, #20]
 800e84e:	2300      	movs	r3, #0
 800e850:	9309      	str	r3, [sp, #36]	@ 0x24
 800e852:	2320      	movs	r3, #32
 800e854:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e858:	f8cd 800c 	str.w	r8, [sp, #12]
 800e85c:	2330      	movs	r3, #48	@ 0x30
 800e85e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e9fc <_svfiprintf_r+0x1e4>
 800e862:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e866:	f04f 0901 	mov.w	r9, #1
 800e86a:	4623      	mov	r3, r4
 800e86c:	469a      	mov	sl, r3
 800e86e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e872:	b10a      	cbz	r2, 800e878 <_svfiprintf_r+0x60>
 800e874:	2a25      	cmp	r2, #37	@ 0x25
 800e876:	d1f9      	bne.n	800e86c <_svfiprintf_r+0x54>
 800e878:	ebba 0b04 	subs.w	fp, sl, r4
 800e87c:	d00b      	beq.n	800e896 <_svfiprintf_r+0x7e>
 800e87e:	465b      	mov	r3, fp
 800e880:	4622      	mov	r2, r4
 800e882:	4629      	mov	r1, r5
 800e884:	4638      	mov	r0, r7
 800e886:	f7ff ff6b 	bl	800e760 <__ssputs_r>
 800e88a:	3001      	adds	r0, #1
 800e88c:	f000 80a7 	beq.w	800e9de <_svfiprintf_r+0x1c6>
 800e890:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e892:	445a      	add	r2, fp
 800e894:	9209      	str	r2, [sp, #36]	@ 0x24
 800e896:	f89a 3000 	ldrb.w	r3, [sl]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	f000 809f 	beq.w	800e9de <_svfiprintf_r+0x1c6>
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8aa:	f10a 0a01 	add.w	sl, sl, #1
 800e8ae:	9304      	str	r3, [sp, #16]
 800e8b0:	9307      	str	r3, [sp, #28]
 800e8b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8b8:	4654      	mov	r4, sl
 800e8ba:	2205      	movs	r2, #5
 800e8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c0:	484e      	ldr	r0, [pc, #312]	@ (800e9fc <_svfiprintf_r+0x1e4>)
 800e8c2:	f7f1 fc9d 	bl	8000200 <memchr>
 800e8c6:	9a04      	ldr	r2, [sp, #16]
 800e8c8:	b9d8      	cbnz	r0, 800e902 <_svfiprintf_r+0xea>
 800e8ca:	06d0      	lsls	r0, r2, #27
 800e8cc:	bf44      	itt	mi
 800e8ce:	2320      	movmi	r3, #32
 800e8d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8d4:	0711      	lsls	r1, r2, #28
 800e8d6:	bf44      	itt	mi
 800e8d8:	232b      	movmi	r3, #43	@ 0x2b
 800e8da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8de:	f89a 3000 	ldrb.w	r3, [sl]
 800e8e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8e4:	d015      	beq.n	800e912 <_svfiprintf_r+0xfa>
 800e8e6:	9a07      	ldr	r2, [sp, #28]
 800e8e8:	4654      	mov	r4, sl
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	f04f 0c0a 	mov.w	ip, #10
 800e8f0:	4621      	mov	r1, r4
 800e8f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8f6:	3b30      	subs	r3, #48	@ 0x30
 800e8f8:	2b09      	cmp	r3, #9
 800e8fa:	d94b      	bls.n	800e994 <_svfiprintf_r+0x17c>
 800e8fc:	b1b0      	cbz	r0, 800e92c <_svfiprintf_r+0x114>
 800e8fe:	9207      	str	r2, [sp, #28]
 800e900:	e014      	b.n	800e92c <_svfiprintf_r+0x114>
 800e902:	eba0 0308 	sub.w	r3, r0, r8
 800e906:	fa09 f303 	lsl.w	r3, r9, r3
 800e90a:	4313      	orrs	r3, r2
 800e90c:	9304      	str	r3, [sp, #16]
 800e90e:	46a2      	mov	sl, r4
 800e910:	e7d2      	b.n	800e8b8 <_svfiprintf_r+0xa0>
 800e912:	9b03      	ldr	r3, [sp, #12]
 800e914:	1d19      	adds	r1, r3, #4
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	9103      	str	r1, [sp, #12]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	bfbb      	ittet	lt
 800e91e:	425b      	neglt	r3, r3
 800e920:	f042 0202 	orrlt.w	r2, r2, #2
 800e924:	9307      	strge	r3, [sp, #28]
 800e926:	9307      	strlt	r3, [sp, #28]
 800e928:	bfb8      	it	lt
 800e92a:	9204      	strlt	r2, [sp, #16]
 800e92c:	7823      	ldrb	r3, [r4, #0]
 800e92e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e930:	d10a      	bne.n	800e948 <_svfiprintf_r+0x130>
 800e932:	7863      	ldrb	r3, [r4, #1]
 800e934:	2b2a      	cmp	r3, #42	@ 0x2a
 800e936:	d132      	bne.n	800e99e <_svfiprintf_r+0x186>
 800e938:	9b03      	ldr	r3, [sp, #12]
 800e93a:	1d1a      	adds	r2, r3, #4
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	9203      	str	r2, [sp, #12]
 800e940:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e944:	3402      	adds	r4, #2
 800e946:	9305      	str	r3, [sp, #20]
 800e948:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ea0c <_svfiprintf_r+0x1f4>
 800e94c:	7821      	ldrb	r1, [r4, #0]
 800e94e:	2203      	movs	r2, #3
 800e950:	4650      	mov	r0, sl
 800e952:	f7f1 fc55 	bl	8000200 <memchr>
 800e956:	b138      	cbz	r0, 800e968 <_svfiprintf_r+0x150>
 800e958:	9b04      	ldr	r3, [sp, #16]
 800e95a:	eba0 000a 	sub.w	r0, r0, sl
 800e95e:	2240      	movs	r2, #64	@ 0x40
 800e960:	4082      	lsls	r2, r0
 800e962:	4313      	orrs	r3, r2
 800e964:	3401      	adds	r4, #1
 800e966:	9304      	str	r3, [sp, #16]
 800e968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e96c:	4824      	ldr	r0, [pc, #144]	@ (800ea00 <_svfiprintf_r+0x1e8>)
 800e96e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e972:	2206      	movs	r2, #6
 800e974:	f7f1 fc44 	bl	8000200 <memchr>
 800e978:	2800      	cmp	r0, #0
 800e97a:	d036      	beq.n	800e9ea <_svfiprintf_r+0x1d2>
 800e97c:	4b21      	ldr	r3, [pc, #132]	@ (800ea04 <_svfiprintf_r+0x1ec>)
 800e97e:	bb1b      	cbnz	r3, 800e9c8 <_svfiprintf_r+0x1b0>
 800e980:	9b03      	ldr	r3, [sp, #12]
 800e982:	3307      	adds	r3, #7
 800e984:	f023 0307 	bic.w	r3, r3, #7
 800e988:	3308      	adds	r3, #8
 800e98a:	9303      	str	r3, [sp, #12]
 800e98c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e98e:	4433      	add	r3, r6
 800e990:	9309      	str	r3, [sp, #36]	@ 0x24
 800e992:	e76a      	b.n	800e86a <_svfiprintf_r+0x52>
 800e994:	fb0c 3202 	mla	r2, ip, r2, r3
 800e998:	460c      	mov	r4, r1
 800e99a:	2001      	movs	r0, #1
 800e99c:	e7a8      	b.n	800e8f0 <_svfiprintf_r+0xd8>
 800e99e:	2300      	movs	r3, #0
 800e9a0:	3401      	adds	r4, #1
 800e9a2:	9305      	str	r3, [sp, #20]
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	f04f 0c0a 	mov.w	ip, #10
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9b0:	3a30      	subs	r2, #48	@ 0x30
 800e9b2:	2a09      	cmp	r2, #9
 800e9b4:	d903      	bls.n	800e9be <_svfiprintf_r+0x1a6>
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d0c6      	beq.n	800e948 <_svfiprintf_r+0x130>
 800e9ba:	9105      	str	r1, [sp, #20]
 800e9bc:	e7c4      	b.n	800e948 <_svfiprintf_r+0x130>
 800e9be:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	e7f0      	b.n	800e9aa <_svfiprintf_r+0x192>
 800e9c8:	ab03      	add	r3, sp, #12
 800e9ca:	9300      	str	r3, [sp, #0]
 800e9cc:	462a      	mov	r2, r5
 800e9ce:	4b0e      	ldr	r3, [pc, #56]	@ (800ea08 <_svfiprintf_r+0x1f0>)
 800e9d0:	a904      	add	r1, sp, #16
 800e9d2:	4638      	mov	r0, r7
 800e9d4:	f3af 8000 	nop.w
 800e9d8:	1c42      	adds	r2, r0, #1
 800e9da:	4606      	mov	r6, r0
 800e9dc:	d1d6      	bne.n	800e98c <_svfiprintf_r+0x174>
 800e9de:	89ab      	ldrh	r3, [r5, #12]
 800e9e0:	065b      	lsls	r3, r3, #25
 800e9e2:	f53f af2d 	bmi.w	800e840 <_svfiprintf_r+0x28>
 800e9e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9e8:	e72c      	b.n	800e844 <_svfiprintf_r+0x2c>
 800e9ea:	ab03      	add	r3, sp, #12
 800e9ec:	9300      	str	r3, [sp, #0]
 800e9ee:	462a      	mov	r2, r5
 800e9f0:	4b05      	ldr	r3, [pc, #20]	@ (800ea08 <_svfiprintf_r+0x1f0>)
 800e9f2:	a904      	add	r1, sp, #16
 800e9f4:	4638      	mov	r0, r7
 800e9f6:	f000 f9bb 	bl	800ed70 <_printf_i>
 800e9fa:	e7ed      	b.n	800e9d8 <_svfiprintf_r+0x1c0>
 800e9fc:	08011f38 	.word	0x08011f38
 800ea00:	08011f42 	.word	0x08011f42
 800ea04:	00000000 	.word	0x00000000
 800ea08:	0800e761 	.word	0x0800e761
 800ea0c:	08011f3e 	.word	0x08011f3e

0800ea10 <__sfputc_r>:
 800ea10:	6893      	ldr	r3, [r2, #8]
 800ea12:	3b01      	subs	r3, #1
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	b410      	push	{r4}
 800ea18:	6093      	str	r3, [r2, #8]
 800ea1a:	da08      	bge.n	800ea2e <__sfputc_r+0x1e>
 800ea1c:	6994      	ldr	r4, [r2, #24]
 800ea1e:	42a3      	cmp	r3, r4
 800ea20:	db01      	blt.n	800ea26 <__sfputc_r+0x16>
 800ea22:	290a      	cmp	r1, #10
 800ea24:	d103      	bne.n	800ea2e <__sfputc_r+0x1e>
 800ea26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea2a:	f000 bba1 	b.w	800f170 <__swbuf_r>
 800ea2e:	6813      	ldr	r3, [r2, #0]
 800ea30:	1c58      	adds	r0, r3, #1
 800ea32:	6010      	str	r0, [r2, #0]
 800ea34:	7019      	strb	r1, [r3, #0]
 800ea36:	4608      	mov	r0, r1
 800ea38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea3c:	4770      	bx	lr

0800ea3e <__sfputs_r>:
 800ea3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea40:	4606      	mov	r6, r0
 800ea42:	460f      	mov	r7, r1
 800ea44:	4614      	mov	r4, r2
 800ea46:	18d5      	adds	r5, r2, r3
 800ea48:	42ac      	cmp	r4, r5
 800ea4a:	d101      	bne.n	800ea50 <__sfputs_r+0x12>
 800ea4c:	2000      	movs	r0, #0
 800ea4e:	e007      	b.n	800ea60 <__sfputs_r+0x22>
 800ea50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea54:	463a      	mov	r2, r7
 800ea56:	4630      	mov	r0, r6
 800ea58:	f7ff ffda 	bl	800ea10 <__sfputc_r>
 800ea5c:	1c43      	adds	r3, r0, #1
 800ea5e:	d1f3      	bne.n	800ea48 <__sfputs_r+0xa>
 800ea60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea64 <_vfiprintf_r>:
 800ea64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea68:	460d      	mov	r5, r1
 800ea6a:	b09d      	sub	sp, #116	@ 0x74
 800ea6c:	4614      	mov	r4, r2
 800ea6e:	4698      	mov	r8, r3
 800ea70:	4606      	mov	r6, r0
 800ea72:	b118      	cbz	r0, 800ea7c <_vfiprintf_r+0x18>
 800ea74:	6a03      	ldr	r3, [r0, #32]
 800ea76:	b90b      	cbnz	r3, 800ea7c <_vfiprintf_r+0x18>
 800ea78:	f7ff fcc0 	bl	800e3fc <__sinit>
 800ea7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea7e:	07d9      	lsls	r1, r3, #31
 800ea80:	d405      	bmi.n	800ea8e <_vfiprintf_r+0x2a>
 800ea82:	89ab      	ldrh	r3, [r5, #12]
 800ea84:	059a      	lsls	r2, r3, #22
 800ea86:	d402      	bmi.n	800ea8e <_vfiprintf_r+0x2a>
 800ea88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea8a:	f7ff fe14 	bl	800e6b6 <__retarget_lock_acquire_recursive>
 800ea8e:	89ab      	ldrh	r3, [r5, #12]
 800ea90:	071b      	lsls	r3, r3, #28
 800ea92:	d501      	bpl.n	800ea98 <_vfiprintf_r+0x34>
 800ea94:	692b      	ldr	r3, [r5, #16]
 800ea96:	b99b      	cbnz	r3, 800eac0 <_vfiprintf_r+0x5c>
 800ea98:	4629      	mov	r1, r5
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	f000 fba6 	bl	800f1ec <__swsetup_r>
 800eaa0:	b170      	cbz	r0, 800eac0 <_vfiprintf_r+0x5c>
 800eaa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eaa4:	07dc      	lsls	r4, r3, #31
 800eaa6:	d504      	bpl.n	800eab2 <_vfiprintf_r+0x4e>
 800eaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800eaac:	b01d      	add	sp, #116	@ 0x74
 800eaae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab2:	89ab      	ldrh	r3, [r5, #12]
 800eab4:	0598      	lsls	r0, r3, #22
 800eab6:	d4f7      	bmi.n	800eaa8 <_vfiprintf_r+0x44>
 800eab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eaba:	f7ff fdfd 	bl	800e6b8 <__retarget_lock_release_recursive>
 800eabe:	e7f3      	b.n	800eaa8 <_vfiprintf_r+0x44>
 800eac0:	2300      	movs	r3, #0
 800eac2:	9309      	str	r3, [sp, #36]	@ 0x24
 800eac4:	2320      	movs	r3, #32
 800eac6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eaca:	f8cd 800c 	str.w	r8, [sp, #12]
 800eace:	2330      	movs	r3, #48	@ 0x30
 800ead0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ec80 <_vfiprintf_r+0x21c>
 800ead4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ead8:	f04f 0901 	mov.w	r9, #1
 800eadc:	4623      	mov	r3, r4
 800eade:	469a      	mov	sl, r3
 800eae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eae4:	b10a      	cbz	r2, 800eaea <_vfiprintf_r+0x86>
 800eae6:	2a25      	cmp	r2, #37	@ 0x25
 800eae8:	d1f9      	bne.n	800eade <_vfiprintf_r+0x7a>
 800eaea:	ebba 0b04 	subs.w	fp, sl, r4
 800eaee:	d00b      	beq.n	800eb08 <_vfiprintf_r+0xa4>
 800eaf0:	465b      	mov	r3, fp
 800eaf2:	4622      	mov	r2, r4
 800eaf4:	4629      	mov	r1, r5
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	f7ff ffa1 	bl	800ea3e <__sfputs_r>
 800eafc:	3001      	adds	r0, #1
 800eafe:	f000 80a7 	beq.w	800ec50 <_vfiprintf_r+0x1ec>
 800eb02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb04:	445a      	add	r2, fp
 800eb06:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb08:	f89a 3000 	ldrb.w	r3, [sl]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f000 809f 	beq.w	800ec50 <_vfiprintf_r+0x1ec>
 800eb12:	2300      	movs	r3, #0
 800eb14:	f04f 32ff 	mov.w	r2, #4294967295
 800eb18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb1c:	f10a 0a01 	add.w	sl, sl, #1
 800eb20:	9304      	str	r3, [sp, #16]
 800eb22:	9307      	str	r3, [sp, #28]
 800eb24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb28:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb2a:	4654      	mov	r4, sl
 800eb2c:	2205      	movs	r2, #5
 800eb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb32:	4853      	ldr	r0, [pc, #332]	@ (800ec80 <_vfiprintf_r+0x21c>)
 800eb34:	f7f1 fb64 	bl	8000200 <memchr>
 800eb38:	9a04      	ldr	r2, [sp, #16]
 800eb3a:	b9d8      	cbnz	r0, 800eb74 <_vfiprintf_r+0x110>
 800eb3c:	06d1      	lsls	r1, r2, #27
 800eb3e:	bf44      	itt	mi
 800eb40:	2320      	movmi	r3, #32
 800eb42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb46:	0713      	lsls	r3, r2, #28
 800eb48:	bf44      	itt	mi
 800eb4a:	232b      	movmi	r3, #43	@ 0x2b
 800eb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb50:	f89a 3000 	ldrb.w	r3, [sl]
 800eb54:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb56:	d015      	beq.n	800eb84 <_vfiprintf_r+0x120>
 800eb58:	9a07      	ldr	r2, [sp, #28]
 800eb5a:	4654      	mov	r4, sl
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	f04f 0c0a 	mov.w	ip, #10
 800eb62:	4621      	mov	r1, r4
 800eb64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb68:	3b30      	subs	r3, #48	@ 0x30
 800eb6a:	2b09      	cmp	r3, #9
 800eb6c:	d94b      	bls.n	800ec06 <_vfiprintf_r+0x1a2>
 800eb6e:	b1b0      	cbz	r0, 800eb9e <_vfiprintf_r+0x13a>
 800eb70:	9207      	str	r2, [sp, #28]
 800eb72:	e014      	b.n	800eb9e <_vfiprintf_r+0x13a>
 800eb74:	eba0 0308 	sub.w	r3, r0, r8
 800eb78:	fa09 f303 	lsl.w	r3, r9, r3
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	9304      	str	r3, [sp, #16]
 800eb80:	46a2      	mov	sl, r4
 800eb82:	e7d2      	b.n	800eb2a <_vfiprintf_r+0xc6>
 800eb84:	9b03      	ldr	r3, [sp, #12]
 800eb86:	1d19      	adds	r1, r3, #4
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	9103      	str	r1, [sp, #12]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	bfbb      	ittet	lt
 800eb90:	425b      	neglt	r3, r3
 800eb92:	f042 0202 	orrlt.w	r2, r2, #2
 800eb96:	9307      	strge	r3, [sp, #28]
 800eb98:	9307      	strlt	r3, [sp, #28]
 800eb9a:	bfb8      	it	lt
 800eb9c:	9204      	strlt	r2, [sp, #16]
 800eb9e:	7823      	ldrb	r3, [r4, #0]
 800eba0:	2b2e      	cmp	r3, #46	@ 0x2e
 800eba2:	d10a      	bne.n	800ebba <_vfiprintf_r+0x156>
 800eba4:	7863      	ldrb	r3, [r4, #1]
 800eba6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eba8:	d132      	bne.n	800ec10 <_vfiprintf_r+0x1ac>
 800ebaa:	9b03      	ldr	r3, [sp, #12]
 800ebac:	1d1a      	adds	r2, r3, #4
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	9203      	str	r2, [sp, #12]
 800ebb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ebb6:	3402      	adds	r4, #2
 800ebb8:	9305      	str	r3, [sp, #20]
 800ebba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ec90 <_vfiprintf_r+0x22c>
 800ebbe:	7821      	ldrb	r1, [r4, #0]
 800ebc0:	2203      	movs	r2, #3
 800ebc2:	4650      	mov	r0, sl
 800ebc4:	f7f1 fb1c 	bl	8000200 <memchr>
 800ebc8:	b138      	cbz	r0, 800ebda <_vfiprintf_r+0x176>
 800ebca:	9b04      	ldr	r3, [sp, #16]
 800ebcc:	eba0 000a 	sub.w	r0, r0, sl
 800ebd0:	2240      	movs	r2, #64	@ 0x40
 800ebd2:	4082      	lsls	r2, r0
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	3401      	adds	r4, #1
 800ebd8:	9304      	str	r3, [sp, #16]
 800ebda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebde:	4829      	ldr	r0, [pc, #164]	@ (800ec84 <_vfiprintf_r+0x220>)
 800ebe0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebe4:	2206      	movs	r2, #6
 800ebe6:	f7f1 fb0b 	bl	8000200 <memchr>
 800ebea:	2800      	cmp	r0, #0
 800ebec:	d03f      	beq.n	800ec6e <_vfiprintf_r+0x20a>
 800ebee:	4b26      	ldr	r3, [pc, #152]	@ (800ec88 <_vfiprintf_r+0x224>)
 800ebf0:	bb1b      	cbnz	r3, 800ec3a <_vfiprintf_r+0x1d6>
 800ebf2:	9b03      	ldr	r3, [sp, #12]
 800ebf4:	3307      	adds	r3, #7
 800ebf6:	f023 0307 	bic.w	r3, r3, #7
 800ebfa:	3308      	adds	r3, #8
 800ebfc:	9303      	str	r3, [sp, #12]
 800ebfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec00:	443b      	add	r3, r7
 800ec02:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec04:	e76a      	b.n	800eadc <_vfiprintf_r+0x78>
 800ec06:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec0a:	460c      	mov	r4, r1
 800ec0c:	2001      	movs	r0, #1
 800ec0e:	e7a8      	b.n	800eb62 <_vfiprintf_r+0xfe>
 800ec10:	2300      	movs	r3, #0
 800ec12:	3401      	adds	r4, #1
 800ec14:	9305      	str	r3, [sp, #20]
 800ec16:	4619      	mov	r1, r3
 800ec18:	f04f 0c0a 	mov.w	ip, #10
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec22:	3a30      	subs	r2, #48	@ 0x30
 800ec24:	2a09      	cmp	r2, #9
 800ec26:	d903      	bls.n	800ec30 <_vfiprintf_r+0x1cc>
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d0c6      	beq.n	800ebba <_vfiprintf_r+0x156>
 800ec2c:	9105      	str	r1, [sp, #20]
 800ec2e:	e7c4      	b.n	800ebba <_vfiprintf_r+0x156>
 800ec30:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec34:	4604      	mov	r4, r0
 800ec36:	2301      	movs	r3, #1
 800ec38:	e7f0      	b.n	800ec1c <_vfiprintf_r+0x1b8>
 800ec3a:	ab03      	add	r3, sp, #12
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	462a      	mov	r2, r5
 800ec40:	4b12      	ldr	r3, [pc, #72]	@ (800ec8c <_vfiprintf_r+0x228>)
 800ec42:	a904      	add	r1, sp, #16
 800ec44:	4630      	mov	r0, r6
 800ec46:	f3af 8000 	nop.w
 800ec4a:	4607      	mov	r7, r0
 800ec4c:	1c78      	adds	r0, r7, #1
 800ec4e:	d1d6      	bne.n	800ebfe <_vfiprintf_r+0x19a>
 800ec50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec52:	07d9      	lsls	r1, r3, #31
 800ec54:	d405      	bmi.n	800ec62 <_vfiprintf_r+0x1fe>
 800ec56:	89ab      	ldrh	r3, [r5, #12]
 800ec58:	059a      	lsls	r2, r3, #22
 800ec5a:	d402      	bmi.n	800ec62 <_vfiprintf_r+0x1fe>
 800ec5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec5e:	f7ff fd2b 	bl	800e6b8 <__retarget_lock_release_recursive>
 800ec62:	89ab      	ldrh	r3, [r5, #12]
 800ec64:	065b      	lsls	r3, r3, #25
 800ec66:	f53f af1f 	bmi.w	800eaa8 <_vfiprintf_r+0x44>
 800ec6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec6c:	e71e      	b.n	800eaac <_vfiprintf_r+0x48>
 800ec6e:	ab03      	add	r3, sp, #12
 800ec70:	9300      	str	r3, [sp, #0]
 800ec72:	462a      	mov	r2, r5
 800ec74:	4b05      	ldr	r3, [pc, #20]	@ (800ec8c <_vfiprintf_r+0x228>)
 800ec76:	a904      	add	r1, sp, #16
 800ec78:	4630      	mov	r0, r6
 800ec7a:	f000 f879 	bl	800ed70 <_printf_i>
 800ec7e:	e7e4      	b.n	800ec4a <_vfiprintf_r+0x1e6>
 800ec80:	08011f38 	.word	0x08011f38
 800ec84:	08011f42 	.word	0x08011f42
 800ec88:	00000000 	.word	0x00000000
 800ec8c:	0800ea3f 	.word	0x0800ea3f
 800ec90:	08011f3e 	.word	0x08011f3e

0800ec94 <_printf_common>:
 800ec94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec98:	4616      	mov	r6, r2
 800ec9a:	4698      	mov	r8, r3
 800ec9c:	688a      	ldr	r2, [r1, #8]
 800ec9e:	690b      	ldr	r3, [r1, #16]
 800eca0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eca4:	4293      	cmp	r3, r2
 800eca6:	bfb8      	it	lt
 800eca8:	4613      	movlt	r3, r2
 800ecaa:	6033      	str	r3, [r6, #0]
 800ecac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ecb0:	4607      	mov	r7, r0
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	b10a      	cbz	r2, 800ecba <_printf_common+0x26>
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	6033      	str	r3, [r6, #0]
 800ecba:	6823      	ldr	r3, [r4, #0]
 800ecbc:	0699      	lsls	r1, r3, #26
 800ecbe:	bf42      	ittt	mi
 800ecc0:	6833      	ldrmi	r3, [r6, #0]
 800ecc2:	3302      	addmi	r3, #2
 800ecc4:	6033      	strmi	r3, [r6, #0]
 800ecc6:	6825      	ldr	r5, [r4, #0]
 800ecc8:	f015 0506 	ands.w	r5, r5, #6
 800eccc:	d106      	bne.n	800ecdc <_printf_common+0x48>
 800ecce:	f104 0a19 	add.w	sl, r4, #25
 800ecd2:	68e3      	ldr	r3, [r4, #12]
 800ecd4:	6832      	ldr	r2, [r6, #0]
 800ecd6:	1a9b      	subs	r3, r3, r2
 800ecd8:	42ab      	cmp	r3, r5
 800ecda:	dc26      	bgt.n	800ed2a <_printf_common+0x96>
 800ecdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ece0:	6822      	ldr	r2, [r4, #0]
 800ece2:	3b00      	subs	r3, #0
 800ece4:	bf18      	it	ne
 800ece6:	2301      	movne	r3, #1
 800ece8:	0692      	lsls	r2, r2, #26
 800ecea:	d42b      	bmi.n	800ed44 <_printf_common+0xb0>
 800ecec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ecf0:	4641      	mov	r1, r8
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	47c8      	blx	r9
 800ecf6:	3001      	adds	r0, #1
 800ecf8:	d01e      	beq.n	800ed38 <_printf_common+0xa4>
 800ecfa:	6823      	ldr	r3, [r4, #0]
 800ecfc:	6922      	ldr	r2, [r4, #16]
 800ecfe:	f003 0306 	and.w	r3, r3, #6
 800ed02:	2b04      	cmp	r3, #4
 800ed04:	bf02      	ittt	eq
 800ed06:	68e5      	ldreq	r5, [r4, #12]
 800ed08:	6833      	ldreq	r3, [r6, #0]
 800ed0a:	1aed      	subeq	r5, r5, r3
 800ed0c:	68a3      	ldr	r3, [r4, #8]
 800ed0e:	bf0c      	ite	eq
 800ed10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed14:	2500      	movne	r5, #0
 800ed16:	4293      	cmp	r3, r2
 800ed18:	bfc4      	itt	gt
 800ed1a:	1a9b      	subgt	r3, r3, r2
 800ed1c:	18ed      	addgt	r5, r5, r3
 800ed1e:	2600      	movs	r6, #0
 800ed20:	341a      	adds	r4, #26
 800ed22:	42b5      	cmp	r5, r6
 800ed24:	d11a      	bne.n	800ed5c <_printf_common+0xc8>
 800ed26:	2000      	movs	r0, #0
 800ed28:	e008      	b.n	800ed3c <_printf_common+0xa8>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	4652      	mov	r2, sl
 800ed2e:	4641      	mov	r1, r8
 800ed30:	4638      	mov	r0, r7
 800ed32:	47c8      	blx	r9
 800ed34:	3001      	adds	r0, #1
 800ed36:	d103      	bne.n	800ed40 <_printf_common+0xac>
 800ed38:	f04f 30ff 	mov.w	r0, #4294967295
 800ed3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed40:	3501      	adds	r5, #1
 800ed42:	e7c6      	b.n	800ecd2 <_printf_common+0x3e>
 800ed44:	18e1      	adds	r1, r4, r3
 800ed46:	1c5a      	adds	r2, r3, #1
 800ed48:	2030      	movs	r0, #48	@ 0x30
 800ed4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed4e:	4422      	add	r2, r4
 800ed50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed58:	3302      	adds	r3, #2
 800ed5a:	e7c7      	b.n	800ecec <_printf_common+0x58>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	4622      	mov	r2, r4
 800ed60:	4641      	mov	r1, r8
 800ed62:	4638      	mov	r0, r7
 800ed64:	47c8      	blx	r9
 800ed66:	3001      	adds	r0, #1
 800ed68:	d0e6      	beq.n	800ed38 <_printf_common+0xa4>
 800ed6a:	3601      	adds	r6, #1
 800ed6c:	e7d9      	b.n	800ed22 <_printf_common+0x8e>
	...

0800ed70 <_printf_i>:
 800ed70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed74:	7e0f      	ldrb	r7, [r1, #24]
 800ed76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed78:	2f78      	cmp	r7, #120	@ 0x78
 800ed7a:	4691      	mov	r9, r2
 800ed7c:	4680      	mov	r8, r0
 800ed7e:	460c      	mov	r4, r1
 800ed80:	469a      	mov	sl, r3
 800ed82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed86:	d807      	bhi.n	800ed98 <_printf_i+0x28>
 800ed88:	2f62      	cmp	r7, #98	@ 0x62
 800ed8a:	d80a      	bhi.n	800eda2 <_printf_i+0x32>
 800ed8c:	2f00      	cmp	r7, #0
 800ed8e:	f000 80d2 	beq.w	800ef36 <_printf_i+0x1c6>
 800ed92:	2f58      	cmp	r7, #88	@ 0x58
 800ed94:	f000 80b9 	beq.w	800ef0a <_printf_i+0x19a>
 800ed98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eda0:	e03a      	b.n	800ee18 <_printf_i+0xa8>
 800eda2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eda6:	2b15      	cmp	r3, #21
 800eda8:	d8f6      	bhi.n	800ed98 <_printf_i+0x28>
 800edaa:	a101      	add	r1, pc, #4	@ (adr r1, 800edb0 <_printf_i+0x40>)
 800edac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edb0:	0800ee09 	.word	0x0800ee09
 800edb4:	0800ee1d 	.word	0x0800ee1d
 800edb8:	0800ed99 	.word	0x0800ed99
 800edbc:	0800ed99 	.word	0x0800ed99
 800edc0:	0800ed99 	.word	0x0800ed99
 800edc4:	0800ed99 	.word	0x0800ed99
 800edc8:	0800ee1d 	.word	0x0800ee1d
 800edcc:	0800ed99 	.word	0x0800ed99
 800edd0:	0800ed99 	.word	0x0800ed99
 800edd4:	0800ed99 	.word	0x0800ed99
 800edd8:	0800ed99 	.word	0x0800ed99
 800eddc:	0800ef1d 	.word	0x0800ef1d
 800ede0:	0800ee47 	.word	0x0800ee47
 800ede4:	0800eed7 	.word	0x0800eed7
 800ede8:	0800ed99 	.word	0x0800ed99
 800edec:	0800ed99 	.word	0x0800ed99
 800edf0:	0800ef3f 	.word	0x0800ef3f
 800edf4:	0800ed99 	.word	0x0800ed99
 800edf8:	0800ee47 	.word	0x0800ee47
 800edfc:	0800ed99 	.word	0x0800ed99
 800ee00:	0800ed99 	.word	0x0800ed99
 800ee04:	0800eedf 	.word	0x0800eedf
 800ee08:	6833      	ldr	r3, [r6, #0]
 800ee0a:	1d1a      	adds	r2, r3, #4
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	6032      	str	r2, [r6, #0]
 800ee10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ee18:	2301      	movs	r3, #1
 800ee1a:	e09d      	b.n	800ef58 <_printf_i+0x1e8>
 800ee1c:	6833      	ldr	r3, [r6, #0]
 800ee1e:	6820      	ldr	r0, [r4, #0]
 800ee20:	1d19      	adds	r1, r3, #4
 800ee22:	6031      	str	r1, [r6, #0]
 800ee24:	0606      	lsls	r6, r0, #24
 800ee26:	d501      	bpl.n	800ee2c <_printf_i+0xbc>
 800ee28:	681d      	ldr	r5, [r3, #0]
 800ee2a:	e003      	b.n	800ee34 <_printf_i+0xc4>
 800ee2c:	0645      	lsls	r5, r0, #25
 800ee2e:	d5fb      	bpl.n	800ee28 <_printf_i+0xb8>
 800ee30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ee34:	2d00      	cmp	r5, #0
 800ee36:	da03      	bge.n	800ee40 <_printf_i+0xd0>
 800ee38:	232d      	movs	r3, #45	@ 0x2d
 800ee3a:	426d      	negs	r5, r5
 800ee3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee40:	4859      	ldr	r0, [pc, #356]	@ (800efa8 <_printf_i+0x238>)
 800ee42:	230a      	movs	r3, #10
 800ee44:	e011      	b.n	800ee6a <_printf_i+0xfa>
 800ee46:	6821      	ldr	r1, [r4, #0]
 800ee48:	6833      	ldr	r3, [r6, #0]
 800ee4a:	0608      	lsls	r0, r1, #24
 800ee4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee50:	d402      	bmi.n	800ee58 <_printf_i+0xe8>
 800ee52:	0649      	lsls	r1, r1, #25
 800ee54:	bf48      	it	mi
 800ee56:	b2ad      	uxthmi	r5, r5
 800ee58:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee5a:	4853      	ldr	r0, [pc, #332]	@ (800efa8 <_printf_i+0x238>)
 800ee5c:	6033      	str	r3, [r6, #0]
 800ee5e:	bf14      	ite	ne
 800ee60:	230a      	movne	r3, #10
 800ee62:	2308      	moveq	r3, #8
 800ee64:	2100      	movs	r1, #0
 800ee66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee6a:	6866      	ldr	r6, [r4, #4]
 800ee6c:	60a6      	str	r6, [r4, #8]
 800ee6e:	2e00      	cmp	r6, #0
 800ee70:	bfa2      	ittt	ge
 800ee72:	6821      	ldrge	r1, [r4, #0]
 800ee74:	f021 0104 	bicge.w	r1, r1, #4
 800ee78:	6021      	strge	r1, [r4, #0]
 800ee7a:	b90d      	cbnz	r5, 800ee80 <_printf_i+0x110>
 800ee7c:	2e00      	cmp	r6, #0
 800ee7e:	d04b      	beq.n	800ef18 <_printf_i+0x1a8>
 800ee80:	4616      	mov	r6, r2
 800ee82:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee86:	fb03 5711 	mls	r7, r3, r1, r5
 800ee8a:	5dc7      	ldrb	r7, [r0, r7]
 800ee8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee90:	462f      	mov	r7, r5
 800ee92:	42bb      	cmp	r3, r7
 800ee94:	460d      	mov	r5, r1
 800ee96:	d9f4      	bls.n	800ee82 <_printf_i+0x112>
 800ee98:	2b08      	cmp	r3, #8
 800ee9a:	d10b      	bne.n	800eeb4 <_printf_i+0x144>
 800ee9c:	6823      	ldr	r3, [r4, #0]
 800ee9e:	07df      	lsls	r7, r3, #31
 800eea0:	d508      	bpl.n	800eeb4 <_printf_i+0x144>
 800eea2:	6923      	ldr	r3, [r4, #16]
 800eea4:	6861      	ldr	r1, [r4, #4]
 800eea6:	4299      	cmp	r1, r3
 800eea8:	bfde      	ittt	le
 800eeaa:	2330      	movle	r3, #48	@ 0x30
 800eeac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eeb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eeb4:	1b92      	subs	r2, r2, r6
 800eeb6:	6122      	str	r2, [r4, #16]
 800eeb8:	f8cd a000 	str.w	sl, [sp]
 800eebc:	464b      	mov	r3, r9
 800eebe:	aa03      	add	r2, sp, #12
 800eec0:	4621      	mov	r1, r4
 800eec2:	4640      	mov	r0, r8
 800eec4:	f7ff fee6 	bl	800ec94 <_printf_common>
 800eec8:	3001      	adds	r0, #1
 800eeca:	d14a      	bne.n	800ef62 <_printf_i+0x1f2>
 800eecc:	f04f 30ff 	mov.w	r0, #4294967295
 800eed0:	b004      	add	sp, #16
 800eed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed6:	6823      	ldr	r3, [r4, #0]
 800eed8:	f043 0320 	orr.w	r3, r3, #32
 800eedc:	6023      	str	r3, [r4, #0]
 800eede:	4833      	ldr	r0, [pc, #204]	@ (800efac <_printf_i+0x23c>)
 800eee0:	2778      	movs	r7, #120	@ 0x78
 800eee2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eee6:	6823      	ldr	r3, [r4, #0]
 800eee8:	6831      	ldr	r1, [r6, #0]
 800eeea:	061f      	lsls	r7, r3, #24
 800eeec:	f851 5b04 	ldr.w	r5, [r1], #4
 800eef0:	d402      	bmi.n	800eef8 <_printf_i+0x188>
 800eef2:	065f      	lsls	r7, r3, #25
 800eef4:	bf48      	it	mi
 800eef6:	b2ad      	uxthmi	r5, r5
 800eef8:	6031      	str	r1, [r6, #0]
 800eefa:	07d9      	lsls	r1, r3, #31
 800eefc:	bf44      	itt	mi
 800eefe:	f043 0320 	orrmi.w	r3, r3, #32
 800ef02:	6023      	strmi	r3, [r4, #0]
 800ef04:	b11d      	cbz	r5, 800ef0e <_printf_i+0x19e>
 800ef06:	2310      	movs	r3, #16
 800ef08:	e7ac      	b.n	800ee64 <_printf_i+0xf4>
 800ef0a:	4827      	ldr	r0, [pc, #156]	@ (800efa8 <_printf_i+0x238>)
 800ef0c:	e7e9      	b.n	800eee2 <_printf_i+0x172>
 800ef0e:	6823      	ldr	r3, [r4, #0]
 800ef10:	f023 0320 	bic.w	r3, r3, #32
 800ef14:	6023      	str	r3, [r4, #0]
 800ef16:	e7f6      	b.n	800ef06 <_printf_i+0x196>
 800ef18:	4616      	mov	r6, r2
 800ef1a:	e7bd      	b.n	800ee98 <_printf_i+0x128>
 800ef1c:	6833      	ldr	r3, [r6, #0]
 800ef1e:	6825      	ldr	r5, [r4, #0]
 800ef20:	6961      	ldr	r1, [r4, #20]
 800ef22:	1d18      	adds	r0, r3, #4
 800ef24:	6030      	str	r0, [r6, #0]
 800ef26:	062e      	lsls	r6, r5, #24
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	d501      	bpl.n	800ef30 <_printf_i+0x1c0>
 800ef2c:	6019      	str	r1, [r3, #0]
 800ef2e:	e002      	b.n	800ef36 <_printf_i+0x1c6>
 800ef30:	0668      	lsls	r0, r5, #25
 800ef32:	d5fb      	bpl.n	800ef2c <_printf_i+0x1bc>
 800ef34:	8019      	strh	r1, [r3, #0]
 800ef36:	2300      	movs	r3, #0
 800ef38:	6123      	str	r3, [r4, #16]
 800ef3a:	4616      	mov	r6, r2
 800ef3c:	e7bc      	b.n	800eeb8 <_printf_i+0x148>
 800ef3e:	6833      	ldr	r3, [r6, #0]
 800ef40:	1d1a      	adds	r2, r3, #4
 800ef42:	6032      	str	r2, [r6, #0]
 800ef44:	681e      	ldr	r6, [r3, #0]
 800ef46:	6862      	ldr	r2, [r4, #4]
 800ef48:	2100      	movs	r1, #0
 800ef4a:	4630      	mov	r0, r6
 800ef4c:	f7f1 f958 	bl	8000200 <memchr>
 800ef50:	b108      	cbz	r0, 800ef56 <_printf_i+0x1e6>
 800ef52:	1b80      	subs	r0, r0, r6
 800ef54:	6060      	str	r0, [r4, #4]
 800ef56:	6863      	ldr	r3, [r4, #4]
 800ef58:	6123      	str	r3, [r4, #16]
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef60:	e7aa      	b.n	800eeb8 <_printf_i+0x148>
 800ef62:	6923      	ldr	r3, [r4, #16]
 800ef64:	4632      	mov	r2, r6
 800ef66:	4649      	mov	r1, r9
 800ef68:	4640      	mov	r0, r8
 800ef6a:	47d0      	blx	sl
 800ef6c:	3001      	adds	r0, #1
 800ef6e:	d0ad      	beq.n	800eecc <_printf_i+0x15c>
 800ef70:	6823      	ldr	r3, [r4, #0]
 800ef72:	079b      	lsls	r3, r3, #30
 800ef74:	d413      	bmi.n	800ef9e <_printf_i+0x22e>
 800ef76:	68e0      	ldr	r0, [r4, #12]
 800ef78:	9b03      	ldr	r3, [sp, #12]
 800ef7a:	4298      	cmp	r0, r3
 800ef7c:	bfb8      	it	lt
 800ef7e:	4618      	movlt	r0, r3
 800ef80:	e7a6      	b.n	800eed0 <_printf_i+0x160>
 800ef82:	2301      	movs	r3, #1
 800ef84:	4632      	mov	r2, r6
 800ef86:	4649      	mov	r1, r9
 800ef88:	4640      	mov	r0, r8
 800ef8a:	47d0      	blx	sl
 800ef8c:	3001      	adds	r0, #1
 800ef8e:	d09d      	beq.n	800eecc <_printf_i+0x15c>
 800ef90:	3501      	adds	r5, #1
 800ef92:	68e3      	ldr	r3, [r4, #12]
 800ef94:	9903      	ldr	r1, [sp, #12]
 800ef96:	1a5b      	subs	r3, r3, r1
 800ef98:	42ab      	cmp	r3, r5
 800ef9a:	dcf2      	bgt.n	800ef82 <_printf_i+0x212>
 800ef9c:	e7eb      	b.n	800ef76 <_printf_i+0x206>
 800ef9e:	2500      	movs	r5, #0
 800efa0:	f104 0619 	add.w	r6, r4, #25
 800efa4:	e7f5      	b.n	800ef92 <_printf_i+0x222>
 800efa6:	bf00      	nop
 800efa8:	08011f49 	.word	0x08011f49
 800efac:	08011f5a 	.word	0x08011f5a

0800efb0 <__sflush_r>:
 800efb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800efb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb8:	0716      	lsls	r6, r2, #28
 800efba:	4605      	mov	r5, r0
 800efbc:	460c      	mov	r4, r1
 800efbe:	d454      	bmi.n	800f06a <__sflush_r+0xba>
 800efc0:	684b      	ldr	r3, [r1, #4]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	dc02      	bgt.n	800efcc <__sflush_r+0x1c>
 800efc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800efc8:	2b00      	cmp	r3, #0
 800efca:	dd48      	ble.n	800f05e <__sflush_r+0xae>
 800efcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800efce:	2e00      	cmp	r6, #0
 800efd0:	d045      	beq.n	800f05e <__sflush_r+0xae>
 800efd2:	2300      	movs	r3, #0
 800efd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800efd8:	682f      	ldr	r7, [r5, #0]
 800efda:	6a21      	ldr	r1, [r4, #32]
 800efdc:	602b      	str	r3, [r5, #0]
 800efde:	d030      	beq.n	800f042 <__sflush_r+0x92>
 800efe0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800efe2:	89a3      	ldrh	r3, [r4, #12]
 800efe4:	0759      	lsls	r1, r3, #29
 800efe6:	d505      	bpl.n	800eff4 <__sflush_r+0x44>
 800efe8:	6863      	ldr	r3, [r4, #4]
 800efea:	1ad2      	subs	r2, r2, r3
 800efec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800efee:	b10b      	cbz	r3, 800eff4 <__sflush_r+0x44>
 800eff0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eff2:	1ad2      	subs	r2, r2, r3
 800eff4:	2300      	movs	r3, #0
 800eff6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eff8:	6a21      	ldr	r1, [r4, #32]
 800effa:	4628      	mov	r0, r5
 800effc:	47b0      	blx	r6
 800effe:	1c43      	adds	r3, r0, #1
 800f000:	89a3      	ldrh	r3, [r4, #12]
 800f002:	d106      	bne.n	800f012 <__sflush_r+0x62>
 800f004:	6829      	ldr	r1, [r5, #0]
 800f006:	291d      	cmp	r1, #29
 800f008:	d82b      	bhi.n	800f062 <__sflush_r+0xb2>
 800f00a:	4a2a      	ldr	r2, [pc, #168]	@ (800f0b4 <__sflush_r+0x104>)
 800f00c:	410a      	asrs	r2, r1
 800f00e:	07d6      	lsls	r6, r2, #31
 800f010:	d427      	bmi.n	800f062 <__sflush_r+0xb2>
 800f012:	2200      	movs	r2, #0
 800f014:	6062      	str	r2, [r4, #4]
 800f016:	04d9      	lsls	r1, r3, #19
 800f018:	6922      	ldr	r2, [r4, #16]
 800f01a:	6022      	str	r2, [r4, #0]
 800f01c:	d504      	bpl.n	800f028 <__sflush_r+0x78>
 800f01e:	1c42      	adds	r2, r0, #1
 800f020:	d101      	bne.n	800f026 <__sflush_r+0x76>
 800f022:	682b      	ldr	r3, [r5, #0]
 800f024:	b903      	cbnz	r3, 800f028 <__sflush_r+0x78>
 800f026:	6560      	str	r0, [r4, #84]	@ 0x54
 800f028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f02a:	602f      	str	r7, [r5, #0]
 800f02c:	b1b9      	cbz	r1, 800f05e <__sflush_r+0xae>
 800f02e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f032:	4299      	cmp	r1, r3
 800f034:	d002      	beq.n	800f03c <__sflush_r+0x8c>
 800f036:	4628      	mov	r0, r5
 800f038:	f7ff fb48 	bl	800e6cc <_free_r>
 800f03c:	2300      	movs	r3, #0
 800f03e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f040:	e00d      	b.n	800f05e <__sflush_r+0xae>
 800f042:	2301      	movs	r3, #1
 800f044:	4628      	mov	r0, r5
 800f046:	47b0      	blx	r6
 800f048:	4602      	mov	r2, r0
 800f04a:	1c50      	adds	r0, r2, #1
 800f04c:	d1c9      	bne.n	800efe2 <__sflush_r+0x32>
 800f04e:	682b      	ldr	r3, [r5, #0]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d0c6      	beq.n	800efe2 <__sflush_r+0x32>
 800f054:	2b1d      	cmp	r3, #29
 800f056:	d001      	beq.n	800f05c <__sflush_r+0xac>
 800f058:	2b16      	cmp	r3, #22
 800f05a:	d11e      	bne.n	800f09a <__sflush_r+0xea>
 800f05c:	602f      	str	r7, [r5, #0]
 800f05e:	2000      	movs	r0, #0
 800f060:	e022      	b.n	800f0a8 <__sflush_r+0xf8>
 800f062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f066:	b21b      	sxth	r3, r3
 800f068:	e01b      	b.n	800f0a2 <__sflush_r+0xf2>
 800f06a:	690f      	ldr	r7, [r1, #16]
 800f06c:	2f00      	cmp	r7, #0
 800f06e:	d0f6      	beq.n	800f05e <__sflush_r+0xae>
 800f070:	0793      	lsls	r3, r2, #30
 800f072:	680e      	ldr	r6, [r1, #0]
 800f074:	bf08      	it	eq
 800f076:	694b      	ldreq	r3, [r1, #20]
 800f078:	600f      	str	r7, [r1, #0]
 800f07a:	bf18      	it	ne
 800f07c:	2300      	movne	r3, #0
 800f07e:	eba6 0807 	sub.w	r8, r6, r7
 800f082:	608b      	str	r3, [r1, #8]
 800f084:	f1b8 0f00 	cmp.w	r8, #0
 800f088:	dde9      	ble.n	800f05e <__sflush_r+0xae>
 800f08a:	6a21      	ldr	r1, [r4, #32]
 800f08c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f08e:	4643      	mov	r3, r8
 800f090:	463a      	mov	r2, r7
 800f092:	4628      	mov	r0, r5
 800f094:	47b0      	blx	r6
 800f096:	2800      	cmp	r0, #0
 800f098:	dc08      	bgt.n	800f0ac <__sflush_r+0xfc>
 800f09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f09e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0a2:	81a3      	strh	r3, [r4, #12]
 800f0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ac:	4407      	add	r7, r0
 800f0ae:	eba8 0800 	sub.w	r8, r8, r0
 800f0b2:	e7e7      	b.n	800f084 <__sflush_r+0xd4>
 800f0b4:	dfbffffe 	.word	0xdfbffffe

0800f0b8 <_fflush_r>:
 800f0b8:	b538      	push	{r3, r4, r5, lr}
 800f0ba:	690b      	ldr	r3, [r1, #16]
 800f0bc:	4605      	mov	r5, r0
 800f0be:	460c      	mov	r4, r1
 800f0c0:	b913      	cbnz	r3, 800f0c8 <_fflush_r+0x10>
 800f0c2:	2500      	movs	r5, #0
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	bd38      	pop	{r3, r4, r5, pc}
 800f0c8:	b118      	cbz	r0, 800f0d2 <_fflush_r+0x1a>
 800f0ca:	6a03      	ldr	r3, [r0, #32]
 800f0cc:	b90b      	cbnz	r3, 800f0d2 <_fflush_r+0x1a>
 800f0ce:	f7ff f995 	bl	800e3fc <__sinit>
 800f0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d0f3      	beq.n	800f0c2 <_fflush_r+0xa>
 800f0da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f0dc:	07d0      	lsls	r0, r2, #31
 800f0de:	d404      	bmi.n	800f0ea <_fflush_r+0x32>
 800f0e0:	0599      	lsls	r1, r3, #22
 800f0e2:	d402      	bmi.n	800f0ea <_fflush_r+0x32>
 800f0e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f0e6:	f7ff fae6 	bl	800e6b6 <__retarget_lock_acquire_recursive>
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	4621      	mov	r1, r4
 800f0ee:	f7ff ff5f 	bl	800efb0 <__sflush_r>
 800f0f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f0f4:	07da      	lsls	r2, r3, #31
 800f0f6:	4605      	mov	r5, r0
 800f0f8:	d4e4      	bmi.n	800f0c4 <_fflush_r+0xc>
 800f0fa:	89a3      	ldrh	r3, [r4, #12]
 800f0fc:	059b      	lsls	r3, r3, #22
 800f0fe:	d4e1      	bmi.n	800f0c4 <_fflush_r+0xc>
 800f100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f102:	f7ff fad9 	bl	800e6b8 <__retarget_lock_release_recursive>
 800f106:	e7dd      	b.n	800f0c4 <_fflush_r+0xc>

0800f108 <_putc_r>:
 800f108:	b570      	push	{r4, r5, r6, lr}
 800f10a:	460d      	mov	r5, r1
 800f10c:	4614      	mov	r4, r2
 800f10e:	4606      	mov	r6, r0
 800f110:	b118      	cbz	r0, 800f11a <_putc_r+0x12>
 800f112:	6a03      	ldr	r3, [r0, #32]
 800f114:	b90b      	cbnz	r3, 800f11a <_putc_r+0x12>
 800f116:	f7ff f971 	bl	800e3fc <__sinit>
 800f11a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f11c:	07d8      	lsls	r0, r3, #31
 800f11e:	d405      	bmi.n	800f12c <_putc_r+0x24>
 800f120:	89a3      	ldrh	r3, [r4, #12]
 800f122:	0599      	lsls	r1, r3, #22
 800f124:	d402      	bmi.n	800f12c <_putc_r+0x24>
 800f126:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f128:	f7ff fac5 	bl	800e6b6 <__retarget_lock_acquire_recursive>
 800f12c:	68a3      	ldr	r3, [r4, #8]
 800f12e:	3b01      	subs	r3, #1
 800f130:	2b00      	cmp	r3, #0
 800f132:	60a3      	str	r3, [r4, #8]
 800f134:	da05      	bge.n	800f142 <_putc_r+0x3a>
 800f136:	69a2      	ldr	r2, [r4, #24]
 800f138:	4293      	cmp	r3, r2
 800f13a:	db12      	blt.n	800f162 <_putc_r+0x5a>
 800f13c:	b2eb      	uxtb	r3, r5
 800f13e:	2b0a      	cmp	r3, #10
 800f140:	d00f      	beq.n	800f162 <_putc_r+0x5a>
 800f142:	6823      	ldr	r3, [r4, #0]
 800f144:	1c5a      	adds	r2, r3, #1
 800f146:	6022      	str	r2, [r4, #0]
 800f148:	701d      	strb	r5, [r3, #0]
 800f14a:	b2ed      	uxtb	r5, r5
 800f14c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f14e:	07da      	lsls	r2, r3, #31
 800f150:	d405      	bmi.n	800f15e <_putc_r+0x56>
 800f152:	89a3      	ldrh	r3, [r4, #12]
 800f154:	059b      	lsls	r3, r3, #22
 800f156:	d402      	bmi.n	800f15e <_putc_r+0x56>
 800f158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f15a:	f7ff faad 	bl	800e6b8 <__retarget_lock_release_recursive>
 800f15e:	4628      	mov	r0, r5
 800f160:	bd70      	pop	{r4, r5, r6, pc}
 800f162:	4629      	mov	r1, r5
 800f164:	4622      	mov	r2, r4
 800f166:	4630      	mov	r0, r6
 800f168:	f000 f802 	bl	800f170 <__swbuf_r>
 800f16c:	4605      	mov	r5, r0
 800f16e:	e7ed      	b.n	800f14c <_putc_r+0x44>

0800f170 <__swbuf_r>:
 800f170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f172:	460e      	mov	r6, r1
 800f174:	4614      	mov	r4, r2
 800f176:	4605      	mov	r5, r0
 800f178:	b118      	cbz	r0, 800f182 <__swbuf_r+0x12>
 800f17a:	6a03      	ldr	r3, [r0, #32]
 800f17c:	b90b      	cbnz	r3, 800f182 <__swbuf_r+0x12>
 800f17e:	f7ff f93d 	bl	800e3fc <__sinit>
 800f182:	69a3      	ldr	r3, [r4, #24]
 800f184:	60a3      	str	r3, [r4, #8]
 800f186:	89a3      	ldrh	r3, [r4, #12]
 800f188:	071a      	lsls	r2, r3, #28
 800f18a:	d501      	bpl.n	800f190 <__swbuf_r+0x20>
 800f18c:	6923      	ldr	r3, [r4, #16]
 800f18e:	b943      	cbnz	r3, 800f1a2 <__swbuf_r+0x32>
 800f190:	4621      	mov	r1, r4
 800f192:	4628      	mov	r0, r5
 800f194:	f000 f82a 	bl	800f1ec <__swsetup_r>
 800f198:	b118      	cbz	r0, 800f1a2 <__swbuf_r+0x32>
 800f19a:	f04f 37ff 	mov.w	r7, #4294967295
 800f19e:	4638      	mov	r0, r7
 800f1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1a2:	6823      	ldr	r3, [r4, #0]
 800f1a4:	6922      	ldr	r2, [r4, #16]
 800f1a6:	1a98      	subs	r0, r3, r2
 800f1a8:	6963      	ldr	r3, [r4, #20]
 800f1aa:	b2f6      	uxtb	r6, r6
 800f1ac:	4283      	cmp	r3, r0
 800f1ae:	4637      	mov	r7, r6
 800f1b0:	dc05      	bgt.n	800f1be <__swbuf_r+0x4e>
 800f1b2:	4621      	mov	r1, r4
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	f7ff ff7f 	bl	800f0b8 <_fflush_r>
 800f1ba:	2800      	cmp	r0, #0
 800f1bc:	d1ed      	bne.n	800f19a <__swbuf_r+0x2a>
 800f1be:	68a3      	ldr	r3, [r4, #8]
 800f1c0:	3b01      	subs	r3, #1
 800f1c2:	60a3      	str	r3, [r4, #8]
 800f1c4:	6823      	ldr	r3, [r4, #0]
 800f1c6:	1c5a      	adds	r2, r3, #1
 800f1c8:	6022      	str	r2, [r4, #0]
 800f1ca:	701e      	strb	r6, [r3, #0]
 800f1cc:	6962      	ldr	r2, [r4, #20]
 800f1ce:	1c43      	adds	r3, r0, #1
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d004      	beq.n	800f1de <__swbuf_r+0x6e>
 800f1d4:	89a3      	ldrh	r3, [r4, #12]
 800f1d6:	07db      	lsls	r3, r3, #31
 800f1d8:	d5e1      	bpl.n	800f19e <__swbuf_r+0x2e>
 800f1da:	2e0a      	cmp	r6, #10
 800f1dc:	d1df      	bne.n	800f19e <__swbuf_r+0x2e>
 800f1de:	4621      	mov	r1, r4
 800f1e0:	4628      	mov	r0, r5
 800f1e2:	f7ff ff69 	bl	800f0b8 <_fflush_r>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d0d9      	beq.n	800f19e <__swbuf_r+0x2e>
 800f1ea:	e7d6      	b.n	800f19a <__swbuf_r+0x2a>

0800f1ec <__swsetup_r>:
 800f1ec:	b538      	push	{r3, r4, r5, lr}
 800f1ee:	4b29      	ldr	r3, [pc, #164]	@ (800f294 <__swsetup_r+0xa8>)
 800f1f0:	4605      	mov	r5, r0
 800f1f2:	6818      	ldr	r0, [r3, #0]
 800f1f4:	460c      	mov	r4, r1
 800f1f6:	b118      	cbz	r0, 800f200 <__swsetup_r+0x14>
 800f1f8:	6a03      	ldr	r3, [r0, #32]
 800f1fa:	b90b      	cbnz	r3, 800f200 <__swsetup_r+0x14>
 800f1fc:	f7ff f8fe 	bl	800e3fc <__sinit>
 800f200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f204:	0719      	lsls	r1, r3, #28
 800f206:	d422      	bmi.n	800f24e <__swsetup_r+0x62>
 800f208:	06da      	lsls	r2, r3, #27
 800f20a:	d407      	bmi.n	800f21c <__swsetup_r+0x30>
 800f20c:	2209      	movs	r2, #9
 800f20e:	602a      	str	r2, [r5, #0]
 800f210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f214:	81a3      	strh	r3, [r4, #12]
 800f216:	f04f 30ff 	mov.w	r0, #4294967295
 800f21a:	e033      	b.n	800f284 <__swsetup_r+0x98>
 800f21c:	0758      	lsls	r0, r3, #29
 800f21e:	d512      	bpl.n	800f246 <__swsetup_r+0x5a>
 800f220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f222:	b141      	cbz	r1, 800f236 <__swsetup_r+0x4a>
 800f224:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f228:	4299      	cmp	r1, r3
 800f22a:	d002      	beq.n	800f232 <__swsetup_r+0x46>
 800f22c:	4628      	mov	r0, r5
 800f22e:	f7ff fa4d 	bl	800e6cc <_free_r>
 800f232:	2300      	movs	r3, #0
 800f234:	6363      	str	r3, [r4, #52]	@ 0x34
 800f236:	89a3      	ldrh	r3, [r4, #12]
 800f238:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f23c:	81a3      	strh	r3, [r4, #12]
 800f23e:	2300      	movs	r3, #0
 800f240:	6063      	str	r3, [r4, #4]
 800f242:	6923      	ldr	r3, [r4, #16]
 800f244:	6023      	str	r3, [r4, #0]
 800f246:	89a3      	ldrh	r3, [r4, #12]
 800f248:	f043 0308 	orr.w	r3, r3, #8
 800f24c:	81a3      	strh	r3, [r4, #12]
 800f24e:	6923      	ldr	r3, [r4, #16]
 800f250:	b94b      	cbnz	r3, 800f266 <__swsetup_r+0x7a>
 800f252:	89a3      	ldrh	r3, [r4, #12]
 800f254:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f25c:	d003      	beq.n	800f266 <__swsetup_r+0x7a>
 800f25e:	4621      	mov	r1, r4
 800f260:	4628      	mov	r0, r5
 800f262:	f000 f895 	bl	800f390 <__smakebuf_r>
 800f266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f26a:	f013 0201 	ands.w	r2, r3, #1
 800f26e:	d00a      	beq.n	800f286 <__swsetup_r+0x9a>
 800f270:	2200      	movs	r2, #0
 800f272:	60a2      	str	r2, [r4, #8]
 800f274:	6962      	ldr	r2, [r4, #20]
 800f276:	4252      	negs	r2, r2
 800f278:	61a2      	str	r2, [r4, #24]
 800f27a:	6922      	ldr	r2, [r4, #16]
 800f27c:	b942      	cbnz	r2, 800f290 <__swsetup_r+0xa4>
 800f27e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f282:	d1c5      	bne.n	800f210 <__swsetup_r+0x24>
 800f284:	bd38      	pop	{r3, r4, r5, pc}
 800f286:	0799      	lsls	r1, r3, #30
 800f288:	bf58      	it	pl
 800f28a:	6962      	ldrpl	r2, [r4, #20]
 800f28c:	60a2      	str	r2, [r4, #8]
 800f28e:	e7f4      	b.n	800f27a <__swsetup_r+0x8e>
 800f290:	2000      	movs	r0, #0
 800f292:	e7f7      	b.n	800f284 <__swsetup_r+0x98>
 800f294:	200002a0 	.word	0x200002a0

0800f298 <memmove>:
 800f298:	4288      	cmp	r0, r1
 800f29a:	b510      	push	{r4, lr}
 800f29c:	eb01 0402 	add.w	r4, r1, r2
 800f2a0:	d902      	bls.n	800f2a8 <memmove+0x10>
 800f2a2:	4284      	cmp	r4, r0
 800f2a4:	4623      	mov	r3, r4
 800f2a6:	d807      	bhi.n	800f2b8 <memmove+0x20>
 800f2a8:	1e43      	subs	r3, r0, #1
 800f2aa:	42a1      	cmp	r1, r4
 800f2ac:	d008      	beq.n	800f2c0 <memmove+0x28>
 800f2ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2b6:	e7f8      	b.n	800f2aa <memmove+0x12>
 800f2b8:	4402      	add	r2, r0
 800f2ba:	4601      	mov	r1, r0
 800f2bc:	428a      	cmp	r2, r1
 800f2be:	d100      	bne.n	800f2c2 <memmove+0x2a>
 800f2c0:	bd10      	pop	{r4, pc}
 800f2c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2ca:	e7f7      	b.n	800f2bc <memmove+0x24>

0800f2cc <memcpy>:
 800f2cc:	440a      	add	r2, r1
 800f2ce:	4291      	cmp	r1, r2
 800f2d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f2d4:	d100      	bne.n	800f2d8 <memcpy+0xc>
 800f2d6:	4770      	bx	lr
 800f2d8:	b510      	push	{r4, lr}
 800f2da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2e2:	4291      	cmp	r1, r2
 800f2e4:	d1f9      	bne.n	800f2da <memcpy+0xe>
 800f2e6:	bd10      	pop	{r4, pc}

0800f2e8 <_realloc_r>:
 800f2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ec:	4680      	mov	r8, r0
 800f2ee:	4615      	mov	r5, r2
 800f2f0:	460c      	mov	r4, r1
 800f2f2:	b921      	cbnz	r1, 800f2fe <_realloc_r+0x16>
 800f2f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2f8:	4611      	mov	r1, r2
 800f2fa:	f7fe bf67 	b.w	800e1cc <_malloc_r>
 800f2fe:	b92a      	cbnz	r2, 800f30c <_realloc_r+0x24>
 800f300:	f7ff f9e4 	bl	800e6cc <_free_r>
 800f304:	2400      	movs	r4, #0
 800f306:	4620      	mov	r0, r4
 800f308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f30c:	f000 f89e 	bl	800f44c <_malloc_usable_size_r>
 800f310:	4285      	cmp	r5, r0
 800f312:	4606      	mov	r6, r0
 800f314:	d802      	bhi.n	800f31c <_realloc_r+0x34>
 800f316:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f31a:	d8f4      	bhi.n	800f306 <_realloc_r+0x1e>
 800f31c:	4629      	mov	r1, r5
 800f31e:	4640      	mov	r0, r8
 800f320:	f7fe ff54 	bl	800e1cc <_malloc_r>
 800f324:	4607      	mov	r7, r0
 800f326:	2800      	cmp	r0, #0
 800f328:	d0ec      	beq.n	800f304 <_realloc_r+0x1c>
 800f32a:	42b5      	cmp	r5, r6
 800f32c:	462a      	mov	r2, r5
 800f32e:	4621      	mov	r1, r4
 800f330:	bf28      	it	cs
 800f332:	4632      	movcs	r2, r6
 800f334:	f7ff ffca 	bl	800f2cc <memcpy>
 800f338:	4621      	mov	r1, r4
 800f33a:	4640      	mov	r0, r8
 800f33c:	f7ff f9c6 	bl	800e6cc <_free_r>
 800f340:	463c      	mov	r4, r7
 800f342:	e7e0      	b.n	800f306 <_realloc_r+0x1e>

0800f344 <__swhatbuf_r>:
 800f344:	b570      	push	{r4, r5, r6, lr}
 800f346:	460c      	mov	r4, r1
 800f348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f34c:	2900      	cmp	r1, #0
 800f34e:	b096      	sub	sp, #88	@ 0x58
 800f350:	4615      	mov	r5, r2
 800f352:	461e      	mov	r6, r3
 800f354:	da0d      	bge.n	800f372 <__swhatbuf_r+0x2e>
 800f356:	89a3      	ldrh	r3, [r4, #12]
 800f358:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f35c:	f04f 0100 	mov.w	r1, #0
 800f360:	bf14      	ite	ne
 800f362:	2340      	movne	r3, #64	@ 0x40
 800f364:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f368:	2000      	movs	r0, #0
 800f36a:	6031      	str	r1, [r6, #0]
 800f36c:	602b      	str	r3, [r5, #0]
 800f36e:	b016      	add	sp, #88	@ 0x58
 800f370:	bd70      	pop	{r4, r5, r6, pc}
 800f372:	466a      	mov	r2, sp
 800f374:	f000 f848 	bl	800f408 <_fstat_r>
 800f378:	2800      	cmp	r0, #0
 800f37a:	dbec      	blt.n	800f356 <__swhatbuf_r+0x12>
 800f37c:	9901      	ldr	r1, [sp, #4]
 800f37e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f382:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f386:	4259      	negs	r1, r3
 800f388:	4159      	adcs	r1, r3
 800f38a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f38e:	e7eb      	b.n	800f368 <__swhatbuf_r+0x24>

0800f390 <__smakebuf_r>:
 800f390:	898b      	ldrh	r3, [r1, #12]
 800f392:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f394:	079d      	lsls	r5, r3, #30
 800f396:	4606      	mov	r6, r0
 800f398:	460c      	mov	r4, r1
 800f39a:	d507      	bpl.n	800f3ac <__smakebuf_r+0x1c>
 800f39c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f3a0:	6023      	str	r3, [r4, #0]
 800f3a2:	6123      	str	r3, [r4, #16]
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	6163      	str	r3, [r4, #20]
 800f3a8:	b003      	add	sp, #12
 800f3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3ac:	ab01      	add	r3, sp, #4
 800f3ae:	466a      	mov	r2, sp
 800f3b0:	f7ff ffc8 	bl	800f344 <__swhatbuf_r>
 800f3b4:	9f00      	ldr	r7, [sp, #0]
 800f3b6:	4605      	mov	r5, r0
 800f3b8:	4639      	mov	r1, r7
 800f3ba:	4630      	mov	r0, r6
 800f3bc:	f7fe ff06 	bl	800e1cc <_malloc_r>
 800f3c0:	b948      	cbnz	r0, 800f3d6 <__smakebuf_r+0x46>
 800f3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3c6:	059a      	lsls	r2, r3, #22
 800f3c8:	d4ee      	bmi.n	800f3a8 <__smakebuf_r+0x18>
 800f3ca:	f023 0303 	bic.w	r3, r3, #3
 800f3ce:	f043 0302 	orr.w	r3, r3, #2
 800f3d2:	81a3      	strh	r3, [r4, #12]
 800f3d4:	e7e2      	b.n	800f39c <__smakebuf_r+0xc>
 800f3d6:	89a3      	ldrh	r3, [r4, #12]
 800f3d8:	6020      	str	r0, [r4, #0]
 800f3da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3de:	81a3      	strh	r3, [r4, #12]
 800f3e0:	9b01      	ldr	r3, [sp, #4]
 800f3e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f3e6:	b15b      	cbz	r3, 800f400 <__smakebuf_r+0x70>
 800f3e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	f000 f81d 	bl	800f42c <_isatty_r>
 800f3f2:	b128      	cbz	r0, 800f400 <__smakebuf_r+0x70>
 800f3f4:	89a3      	ldrh	r3, [r4, #12]
 800f3f6:	f023 0303 	bic.w	r3, r3, #3
 800f3fa:	f043 0301 	orr.w	r3, r3, #1
 800f3fe:	81a3      	strh	r3, [r4, #12]
 800f400:	89a3      	ldrh	r3, [r4, #12]
 800f402:	431d      	orrs	r5, r3
 800f404:	81a5      	strh	r5, [r4, #12]
 800f406:	e7cf      	b.n	800f3a8 <__smakebuf_r+0x18>

0800f408 <_fstat_r>:
 800f408:	b538      	push	{r3, r4, r5, lr}
 800f40a:	4d07      	ldr	r5, [pc, #28]	@ (800f428 <_fstat_r+0x20>)
 800f40c:	2300      	movs	r3, #0
 800f40e:	4604      	mov	r4, r0
 800f410:	4608      	mov	r0, r1
 800f412:	4611      	mov	r1, r2
 800f414:	602b      	str	r3, [r5, #0]
 800f416:	f7f4 fca4 	bl	8003d62 <_fstat>
 800f41a:	1c43      	adds	r3, r0, #1
 800f41c:	d102      	bne.n	800f424 <_fstat_r+0x1c>
 800f41e:	682b      	ldr	r3, [r5, #0]
 800f420:	b103      	cbz	r3, 800f424 <_fstat_r+0x1c>
 800f422:	6023      	str	r3, [r4, #0]
 800f424:	bd38      	pop	{r3, r4, r5, pc}
 800f426:	bf00      	nop
 800f428:	200121dc 	.word	0x200121dc

0800f42c <_isatty_r>:
 800f42c:	b538      	push	{r3, r4, r5, lr}
 800f42e:	4d06      	ldr	r5, [pc, #24]	@ (800f448 <_isatty_r+0x1c>)
 800f430:	2300      	movs	r3, #0
 800f432:	4604      	mov	r4, r0
 800f434:	4608      	mov	r0, r1
 800f436:	602b      	str	r3, [r5, #0]
 800f438:	f7f4 fca3 	bl	8003d82 <_isatty>
 800f43c:	1c43      	adds	r3, r0, #1
 800f43e:	d102      	bne.n	800f446 <_isatty_r+0x1a>
 800f440:	682b      	ldr	r3, [r5, #0]
 800f442:	b103      	cbz	r3, 800f446 <_isatty_r+0x1a>
 800f444:	6023      	str	r3, [r4, #0]
 800f446:	bd38      	pop	{r3, r4, r5, pc}
 800f448:	200121dc 	.word	0x200121dc

0800f44c <_malloc_usable_size_r>:
 800f44c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f450:	1f18      	subs	r0, r3, #4
 800f452:	2b00      	cmp	r3, #0
 800f454:	bfbc      	itt	lt
 800f456:	580b      	ldrlt	r3, [r1, r0]
 800f458:	18c0      	addlt	r0, r0, r3
 800f45a:	4770      	bx	lr

0800f45c <_init>:
 800f45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f45e:	bf00      	nop
 800f460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f462:	bc08      	pop	{r3}
 800f464:	469e      	mov	lr, r3
 800f466:	4770      	bx	lr

0800f468 <_fini>:
 800f468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46a:	bf00      	nop
 800f46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f46e:	bc08      	pop	{r3}
 800f470:	469e      	mov	lr, r3
 800f472:	4770      	bx	lr
