
usb_AND_touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b04  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040ec  08012cb4  08012cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016da0  08016da0  000182ec  2**0
                  CONTENTS
  4 .ARM          00000008  08016da0  08016da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016da8  08016da8  000182ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016da8  08016da8  00017da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016dac  08016dac  00017dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ec  20000000  08016db0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000182ec  2**0
                  CONTENTS
 10 .bss          0000a2d8  200002ec  200002ec  000182ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a5c4  2000a5c4  000182ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000182ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d82a  00000000  00000000  0001831c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a34  00000000  00000000  00045b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025c8  00000000  00000000  0004c580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d39  00000000  00000000  0004eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d8c3  00000000  00000000  00050881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030917  00000000  00000000  0007e144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4c51  00000000  00000000  000aea5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a36ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a92c  00000000  00000000  001a36f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001ae01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012c9c 	.word	0x08012c9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002f0 	.word	0x200002f0
 80001ec:	08012c9c 	.word	0x08012c9c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <USBH_HID_EventCallback>:
static uint8_t USB_BUSY = 0;
char qr_code_data[MAX_LINES][MAX_LINE_LENGTH] = { { '\0' } }; //static initializes strings with all null characters
HID_KEYBD_Info_TypeDef *Keyboard_Info;

/***DORJEE YOU HAVE TO CHANGE USBH_HID.H WHEN YOU GENERATE CODE****/
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) { //2.6s for 54 lines
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f00e fe39 	bl	800f210 <USBH_HID_GetKeybdInfo>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a41      	ldr	r2, [pc, #260]	@ (80006a8 <USBH_HID_EventCallback+0x118>)
 80005a2:	6013      	str	r3, [r2, #0]
	char key = USBH_HID_GetASCIICode(Keyboard_Info);
 80005a4:	4b40      	ldr	r3, [pc, #256]	@ (80006a8 <USBH_HID_EventCallback+0x118>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f00e fed9 	bl	800f360 <USBH_HID_GetASCIICode>
 80005ae:	4603      	mov	r3, r0
 80005b0:	72fb      	strb	r3, [r7, #11]
	//disable the touchscreen interrupt functionality when usb transmission starts
	//after tab it calls itself one more time, so disable after i=0
	if (i == 1) {
 80005b2:	4b3e      	ldr	r3, [pc, #248]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d102      	bne.n	80005c0 <USBH_HID_EventCallback+0x30>
		USB_BUSY = 1;
 80005ba:	4b3d      	ldr	r3, [pc, #244]	@ (80006b0 <USBH_HID_EventCallback+0x120>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
	}

	//store incoming chars. ignore null characters that come in for some reason
	if ((key != NULL_CHAR) && (key != SOH)) {
 80005c0:	7afb      	ldrb	r3, [r7, #11]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d011      	beq.n	80005ea <USBH_HID_EventCallback+0x5a>
 80005c6:	7afb      	ldrb	r3, [r7, #11]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d00e      	beq.n	80005ea <USBH_HID_EventCallback+0x5a>
		qr_code_data[i][j] = key;
 80005cc:	4b37      	ldr	r3, [pc, #220]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b38      	ldr	r3, [pc, #224]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4938      	ldr	r1, [pc, #224]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 80005d6:	0152      	lsls	r2, r2, #5
 80005d8:	440a      	add	r2, r1
 80005da:	4413      	add	r3, r2
 80005dc:	7afa      	ldrb	r2, [r7, #11]
 80005de:	701a      	strb	r2, [r3, #0]
		j++;
 80005e0:	4b34      	ldr	r3, [pc, #208]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a33      	ldr	r2, [pc, #204]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005e8:	6013      	str	r3, [r2, #0]
	}
	//handle new line
	if (key == NEWLINE_CHAR) {
 80005ea:	7afb      	ldrb	r3, [r7, #11]
 80005ec:	2b0a      	cmp	r3, #10
 80005ee:	d107      	bne.n	8000600 <USBH_HID_EventCallback+0x70>
		j = 0;
 80005f0:	4b30      	ldr	r3, [pc, #192]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
		i++;
 80005f6:	4b2d      	ldr	r3, [pc, #180]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	4a2b      	ldr	r2, [pc, #172]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005fe:	6013      	str	r3, [r2, #0]
	}
	//tab is the end of the qr code
	if (key == TAB) {
 8000600:	7afb      	ldrb	r3, [r7, #11]
 8000602:	2b09      	cmp	r3, #9
 8000604:	d14c      	bne.n	80006a0 <USBH_HID_EventCallback+0x110>
		for (int a = 0; a < 15; a++) {
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e002      	b.n	8000612 <USBH_HID_EventCallback+0x82>
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	3301      	adds	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b0e      	cmp	r3, #14
 8000616:	ddf9      	ble.n	800060c <USBH_HID_EventCallback+0x7c>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
			//printf("%s", qr_code_data[a]);
		}
		__disable_irq();
		//output_protocol(qr_code_data, i + 1);
		//check if the title is (10 chars + newline char) or less
		if (strlen(qr_code_data[0]) < (MAX_TITLE_SIZE + 1)) {
 800061c:	4826      	ldr	r0, [pc, #152]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 800061e:	f7ff fde7 	bl	80001f0 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	2b0c      	cmp	r3, #12
 8000626:	d835      	bhi.n	8000694 <USBH_HID_EventCallback+0x104>
			uint8_t freeSectorNumber = getFreeSector();
 8000628:	f000 fee8 	bl	80013fc <getFreeSector>
 800062c:	4603      	mov	r3, r0
 800062e:	72bb      	strb	r3, [r7, #10]
			//printf("free sector is %d\n", freeSectorNumber);
			//only store the protocol if all memory isnt full
			if (freeSectorNumber <= 10) { //i only got 10 pages rn
 8000630:	7abb      	ldrb	r3, [r7, #10]
 8000632:	2b0a      	cmp	r3, #10
 8000634:	d829      	bhi.n	800068a <USBH_HID_EventCallback+0xfa>
				//printf("why\n");
				storeProtocol(qr_code_data, freeSectorNumber);
 8000636:	7abb      	ldrb	r3, [r7, #10]
 8000638:	4619      	mov	r1, r3
 800063a:	481f      	ldr	r0, [pc, #124]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 800063c:	f000 fd10 	bl	8001060 <storeProtocol>
				//go to the page num the new protocol is on
				pageNum = freeSectorNumber;
 8000640:	4a1e      	ldr	r2, [pc, #120]	@ (80006bc <USBH_HID_EventCallback+0x12c>)
 8000642:	7abb      	ldrb	r3, [r7, #10]
 8000644:	7013      	strb	r3, [r2, #0]
				DrawMainPage(pageNum);
 8000646:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <USBH_HID_EventCallback+0x12c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f001 f9a0 	bl	8001990 <DrawMainPage>
				currentPage = PAGE_MAIN;
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <USBH_HID_EventCallback+0x130>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < MAX_LINES; a++) {
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	e013      	b.n	8000684 <USBH_HID_EventCallback+0xf4>
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e00a      	b.n	8000678 <USBH_HID_EventCallback+0xe8>
						qr_code_data[a][b] = '\0';
 8000662:	4a15      	ldr	r2, [pc, #84]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	015b      	lsls	r3, r3, #5
 8000668:	441a      	add	r2, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4413      	add	r3, r2
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
					for (int b = 0; b < MAX_LINE_LENGTH; b++) {
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2b1f      	cmp	r3, #31
 800067c:	ddf1      	ble.n	8000662 <USBH_HID_EventCallback+0xd2>
				for (int a = 0; a < MAX_LINES; a++) {
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	3301      	adds	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	2b63      	cmp	r3, #99	@ 0x63
 8000688:	dde8      	ble.n	800065c <USBH_HID_EventCallback+0xcc>
  __ASM volatile ("cpsie i" : : : "memory");
 800068a:	b662      	cpsie	i
}
 800068c:	bf00      	nop
					}
				}

			}
			__enable_irq();
			USB_BUSY = 0;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <USBH_HID_EventCallback+0x120>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 8000694:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
		j = 0;
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
	}

}
 80006a0:	bf00      	nop
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20008f94 	.word	0x20008f94
 80006ac:	20000608 	.word	0x20000608
 80006b0:	20008311 	.word	0x20008311
 80006b4:	2000060c 	.word	0x2000060c
 80006b8:	20008314 	.word	0x20008314
 80006bc:	200001de 	.word	0x200001de
 80006c0:	20000605 	.word	0x20000605

080006c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006c8:	f004 fec6 	bl	8005458 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006cc:	f000 f846 	bl	800075c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006d0:	f000 fb02 	bl	8000cd8 <MX_GPIO_Init>
	MX_CRC_Init();
 80006d4:	f000 f8ac 	bl	8000830 <MX_CRC_Init>
	MX_DMA2D_Init();
 80006d8:	f000 f8be 	bl	8000858 <MX_DMA2D_Init>
	MX_FMC_Init();
 80006dc:	f000 faac 	bl	8000c38 <MX_FMC_Init>
	MX_I2C3_Init();
 80006e0:	f000 f8ec 	bl	80008bc <MX_I2C3_Init>
	MX_LTDC_Init();
 80006e4:	f000 f92a 	bl	800093c <MX_LTDC_Init>
	MX_SPI5_Init();
 80006e8:	f000 f9a8 	bl	8000a3c <MX_SPI5_Init>
	MX_TIM1_Init();
 80006ec:	f000 f9dc 	bl	8000aa8 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80006f0:	f000 fa78 	bl	8000be4 <MX_USART1_UART_Init>
	MX_USB_HOST_Init();
 80006f4:	f010 fe0a 	bl	801130c <MX_USB_HOST_Init>
	MX_TIM10_Init();
 80006f8:	f000 fa26 	bl	8000b48 <MX_TIM10_Init>
	MX_UART5_Init();
 80006fc:	f000 fa48 	bl	8000b90 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */
	printf("USB and Touchscreen Test\n");
 8000700:	4812      	ldr	r0, [pc, #72]	@ (800074c <main+0x88>)
 8000702:	f011 fb03 	bl	8011d0c <puts>
//	erase_sector(6);
//	erase_sector(7);
//	erase_sector(8);
//	erase_sector(9);
//	erase_sector(10);
	printf("Sectors may have been erased\n");
 8000706:	4812      	ldr	r0, [pc, #72]	@ (8000750 <main+0x8c>)
 8000708:	f011 fb00 	bl	8011d0c <puts>

	/******* TOUCHSCREEN INIT**********/
	BSP_LCD_Init();
 800070c:	f003 ff4a 	bl	80045a4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 8000710:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000714:	2000      	movs	r0, #0
 8000716:	f003 ffc7 	bl	80046a8 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800071a:	f04f 30ff 	mov.w	r0, #4294967295
 800071e:	f004 f873 	bl	8004808 <BSP_LCD_Clear>
	Touch_Init();
 8000722:	f001 f90d 	bl	8001940 <Touch_Init>

	/******** START PROGRAM ************/
	DrawMainPage(1);
 8000726:	2001      	movs	r0, #1
 8000728:	f001 f932 	bl	8001990 <DrawMainPage>
	HAL_TIM_Base_Start_IT(&htim10);   //start Interrupt Timer
 800072c:	4809      	ldr	r0, [pc, #36]	@ (8000754 <main+0x90>)
 800072e:	f00b fd4d 	bl	800c1cc <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000732:	f010 fe11 	bl	8011358 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */

		if (checkTouchFlag) {
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <main+0x94>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d0f9      	beq.n	8000732 <main+0x6e>
			HandleTouch();
 800073e:	f001 fd4b 	bl	80021d8 <HandleTouch>
			checkTouchFlag = 0;
 8000742:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <main+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
		MX_USB_HOST_Process();
 8000748:	e7f3      	b.n	8000732 <main+0x6e>
 800074a:	bf00      	nop
 800074c:	08012cb4 	.word	0x08012cb4
 8000750:	08012cd0 	.word	0x08012cd0
 8000754:	200004ec 	.word	0x200004ec
 8000758:	20000604 	.word	0x20000604

0800075c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	@ 0x50
 8000760:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	2230      	movs	r2, #48	@ 0x30
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f011 fbce 	bl	8011f0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <SystemClock_Config+0xcc>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	4a27      	ldr	r2, [pc, #156]	@ (8000828 <SystemClock_Config+0xcc>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000790:	4b25      	ldr	r3, [pc, #148]	@ (8000828 <SystemClock_Config+0xcc>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	4b22      	ldr	r3, [pc, #136]	@ (800082c <SystemClock_Config+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a21      	ldr	r2, [pc, #132]	@ (800082c <SystemClock_Config+0xd0>)
 80007a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <SystemClock_Config+0xd0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80007cc:	2308      	movs	r3, #8
 80007ce:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80007d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007d4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80007da:	2307      	movs	r3, #7
 80007dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f009 ff80 	bl	800a6e8 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x96>
		Error_Handler();
 80007ee:	f002 f97b 	bl	8002ae8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000802:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000808:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2105      	movs	r1, #5
 8000810:	4618      	mov	r0, r3
 8000812:	f00a f9e1 	bl	800abd8 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xc4>
		Error_Handler();
 800081c:	f002 f964 	bl	8002ae8 <Error_Handler>
	}
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	@ 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <MX_CRC_Init+0x20>)
 8000836:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <MX_CRC_Init+0x24>)
 8000838:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800083a:	4805      	ldr	r0, [pc, #20]	@ (8000850 <MX_CRC_Init+0x20>)
 800083c:	f004 ff54 	bl	80056e8 <HAL_CRC_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_CRC_Init+0x1a>
		Error_Handler();
 8000846:	f002 f94f 	bl	8002ae8 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000308 	.word	0x20000308
 8000854:	40023000 	.word	0x40023000

08000858 <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 800085c:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 800085e:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <MX_DMA2D_Init+0x60>)
 8000860:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000876:	2200      	movs	r2, #0
 8000878:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 800087c:	2200      	movs	r2, #0
 800087e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000882:	2200      	movs	r2, #0
 8000884:	631a      	str	r2, [r3, #48]	@ 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 8000888:	2200      	movs	r2, #0
 800088a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 800088c:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 800088e:	f005 f905 	bl	8005a9c <HAL_DMA2D_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_DMA2D_Init+0x44>
		Error_Handler();
 8000898:	f002 f926 	bl	8002ae8 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 800089c:	2101      	movs	r1, #1
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_DMA2D_Init+0x5c>)
 80008a0:	f005 fb6a 	bl	8005f78 <HAL_DMA2D_ConfigLayer>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_DMA2D_Init+0x56>
		Error_Handler();
 80008aa:	f002 f91d 	bl	8002ae8 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000310 	.word	0x20000310
 80008b8:	4002b000 	.word	0x4002b000

080008bc <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000934 <MX_I2C3_Init+0x78>)
 80008c4:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000938 <MX_I2C3_Init+0x7c>)
 80008ca:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008cc:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80008d2:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d8:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008de:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80008e6:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ec:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 80008f8:	480d      	ldr	r0, [pc, #52]	@ (8000930 <MX_I2C3_Init+0x74>)
 80008fa:	f008 fa85 	bl	8008e08 <HAL_I2C_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_I2C3_Init+0x4c>
		Error_Handler();
 8000904:	f002 f8f0 	bl	8002ae8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 8000908:	2100      	movs	r1, #0
 800090a:	4809      	ldr	r0, [pc, #36]	@ (8000930 <MX_I2C3_Init+0x74>)
 800090c:	f009 fade 	bl	8009ecc <HAL_I2CEx_ConfigAnalogFilter>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C3_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000916:	f002 f8e7 	bl	8002ae8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 800091a:	2100      	movs	r1, #0
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_I2C3_Init+0x74>)
 800091e:	f009 fb11 	bl	8009f44 <HAL_I2CEx_ConfigDigitalFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C3_Init+0x70>
		Error_Handler();
 8000928:	f002 f8de 	bl	8002ae8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000350 	.word	0x20000350
 8000934:	40005c00 	.word	0x40005c00
 8000938:	000186a0 	.word	0x000186a0

0800093c <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b08e      	sub	sp, #56	@ 0x38
 8000940:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2234      	movs	r2, #52	@ 0x34
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f011 fadf 	bl	8011f0c <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 800094e:	4b39      	ldr	r3, [pc, #228]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000950:	4a39      	ldr	r2, [pc, #228]	@ (8000a38 <MX_LTDC_Init+0xfc>)
 8000952:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000954:	4b37      	ldr	r3, [pc, #220]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800095a:	4b36      	ldr	r3, [pc, #216]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000960:	4b34      	ldr	r3, [pc, #208]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000966:	4b33      	ldr	r3, [pc, #204]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 9;
 800096c:	4b31      	ldr	r3, [pc, #196]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800096e:	2209      	movs	r2, #9
 8000970:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 1;
 8000972:	4b30      	ldr	r3, [pc, #192]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000974:	2201      	movs	r2, #1
 8000976:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 29;
 8000978:	4b2e      	ldr	r3, [pc, #184]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800097a:	221d      	movs	r2, #29
 800097c:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 3;
 800097e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000980:	2203      	movs	r2, #3
 8000982:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 269;
 8000984:	4b2b      	ldr	r3, [pc, #172]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000986:	f240 120d 	movw	r2, #269	@ 0x10d
 800098a:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 323;
 800098c:	4b29      	ldr	r3, [pc, #164]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800098e:	f240 1243 	movw	r2, #323	@ 0x143
 8000992:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 279;
 8000994:	4b27      	ldr	r3, [pc, #156]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000996:	f240 1217 	movw	r2, #279	@ 0x117
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 327;
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 800099e:	f240 1247 	movw	r2, #327	@ 0x147
 80009a2:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80009a4:	4b23      	ldr	r3, [pc, #140]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80009ac:	4b21      	ldr	r3, [pc, #132]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 80009bc:	481d      	ldr	r0, [pc, #116]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 80009be:	f009 fb01 	bl	8009fc4 <HAL_LTDC_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_LTDC_Init+0x90>
		Error_Handler();
 80009c8:	f002 f88e 	bl	8002ae8 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 240;
 80009d0:	23f0      	movs	r3, #240	@ 0xf0
 80009d2:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 320;
 80009d8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009dc:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009de:	2302      	movs	r3, #2
 80009e0:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 80009e2:	23ff      	movs	r3, #255	@ 0xff
 80009e4:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009ee:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009f0:	2307      	movs	r3, #7
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.FBStartAdress = 0xD0000000;
 80009f4:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.ImageWidth = 240;
 80009fa:	23f0      	movs	r3, #240	@ 0xf0
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg.ImageHeight = 320;
 80009fe:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a02:	633b      	str	r3, [r7, #48]	@ 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	pLayerCfg.Backcolor.Green = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	pLayerCfg.Backcolor.Red = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_LTDC_Init+0xf8>)
 8000a1e:	f009 fc63 	bl	800a2e8 <HAL_LTDC_ConfigLayer>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_LTDC_Init+0xf0>
		Error_Handler();
 8000a28:	f002 f85e 	bl	8002ae8 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	3738      	adds	r7, #56	@ 0x38
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200003a4 	.word	0x200003a4
 8000a38:	40016800 	.word	0x40016800

08000a3c <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a42:	4a18      	ldr	r2, [pc, #96]	@ (8000aa4 <MX_SPI5_Init+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a4c:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4e:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a6c:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a70:	2218      	movs	r2, #24
 8000a72:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a88:	220a      	movs	r2, #10
 8000a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8000a8c:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <MX_SPI5_Init+0x64>)
 8000a8e:	f00a fd46 	bl	800b51e <HAL_SPI_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_SPI5_Init+0x60>
		Error_Handler();
 8000a98:	f002 f826 	bl	8002ae8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000044c 	.word	0x2000044c
 8000aa4:	40015000 	.word	0x40015000

08000aa8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b44 <MX_TIM1_Init+0x9c>)
 8000ac8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 167;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000acc:	22a7      	movs	r2, #167	@ 0xa7
 8000ace:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000adc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000af0:	4813      	ldr	r0, [pc, #76]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000af2:	f00b fb1b 	bl	800c12c <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x58>
		Error_Handler();
 8000afc:	f001 fff4 	bl	8002ae8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b04:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000b0e:	f00b fcbd 	bl	800c48c <HAL_TIM_ConfigClockSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0x74>
		Error_Handler();
 8000b18:	f001 ffe6 	bl	8002ae8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_TIM1_Init+0x98>)
 8000b2a:	f00b fee5 	bl	800c8f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000b34:	f001 ffd8 	bl	8002ae8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200004a4 	.word	0x200004a4
 8000b44:	40010000 	.word	0x40010000

08000b48 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <MX_TIM10_Init+0x44>)
 8000b50:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 1680 - 1;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b54:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000b58:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 10000;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000b66:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b70:	2280      	movs	r2, #128	@ 0x80
 8000b72:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8000b74:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <MX_TIM10_Init+0x40>)
 8000b76:	f00b fad9 	bl	800c12c <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM10_Init+0x3c>
		Error_Handler();
 8000b80:	f001 ffb2 	bl	8002ae8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200004ec 	.word	0x200004ec
 8000b8c:	40014400 	.word	0x40014400

08000b90 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <MX_UART5_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_UART5_Init+0x4c>)
 8000bc8:	f00b ff26 	bl	800ca18 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_UART5_Init+0x46>
		Error_Handler();
 8000bd2:	f001 ff89 	bl	8002ae8 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000534 	.word	0x20000534
 8000be0:	40005000 	.word	0x40005000

08000be4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <MX_USART1_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USART1_UART_Init+0x4c>)
 8000c1c:	f00b fefc 	bl	800ca18 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000c26:	f001 ff5f 	bl	8002ae8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000057c 	.word	0x2000057c
 8000c34:	40011000 	.word	0x40011000

08000c38 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
 8000c4c:	615a      	str	r2, [r3, #20]
 8000c4e:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c52:	4a20      	ldr	r2, [pc, #128]	@ (8000cd4 <MX_FMC_Init+0x9c>)
 8000c54:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c64:	2204      	movs	r2, #4
 8000c66:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c68:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c6a:	2210      	movs	r2, #16
 8000c6c:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c70:	2240      	movs	r2, #64	@ 0x40
 8000c72:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c76:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000c7a:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c88:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000c92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_FMC_Init+0x98>)
 8000cba:	f00a fb9f 	bl	800b3fc <HAL_SDRAM_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_FMC_Init+0x90>
		Error_Handler();
 8000cc4:	f001 ff10 	bl	8002ae8 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200005c4 	.word	0x200005c4
 8000cd4:	a0000140 	.word	0xa0000140

08000cd8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	@ 0x38
 8000cdc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
 8000cf2:	4b83      	ldr	r3, [pc, #524]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a82      	ldr	r2, [pc, #520]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b80      	ldr	r3, [pc, #512]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	623b      	str	r3, [r7, #32]
 8000d08:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a7b      	ldr	r2, [pc, #492]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d14:	f043 0320 	orr.w	r3, r3, #32
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b79      	ldr	r3, [pc, #484]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0320 	and.w	r3, r3, #32
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	4b75      	ldr	r3, [pc, #468]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a74      	ldr	r2, [pc, #464]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b72      	ldr	r3, [pc, #456]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	4b6e      	ldr	r3, [pc, #440]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a6d      	ldr	r2, [pc, #436]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b6b      	ldr	r3, [pc, #428]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b67      	ldr	r3, [pc, #412]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a66      	ldr	r2, [pc, #408]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b64      	ldr	r3, [pc, #400]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b60      	ldr	r3, [pc, #384]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a5f      	ldr	r2, [pc, #380]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b59      	ldr	r3, [pc, #356]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a58      	ldr	r2, [pc, #352]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000da0:	f043 0310 	orr.w	r3, r3, #16
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b56      	ldr	r3, [pc, #344]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b52      	ldr	r3, [pc, #328]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a51      	ldr	r2, [pc, #324]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b4f      	ldr	r3, [pc, #316]	@ (8000f00 <MX_GPIO_Init+0x228>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin,
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2116      	movs	r1, #22
 8000dd2:	484c      	ldr	r0, [pc, #304]	@ (8000f04 <MX_GPIO_Init+0x22c>)
 8000dd4:	f005 feca 	bl	8006b6c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2180      	movs	r1, #128	@ 0x80
 8000ddc:	484a      	ldr	r0, [pc, #296]	@ (8000f08 <MX_GPIO_Init+0x230>)
 8000dde:	f005 fec5 	bl	8006b6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin | WRX_DCX_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000de8:	4848      	ldr	r0, [pc, #288]	@ (8000f0c <MX_GPIO_Init+0x234>)
 8000dea:	f005 febf 	bl	8006b6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin | LD4_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000df4:	4846      	ldr	r0, [pc, #280]	@ (8000f10 <MX_GPIO_Init+0x238>)
 8000df6:	f005 feb9 	bl	8006b6c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 8000dfa:	2316      	movs	r3, #22
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	483c      	ldr	r0, [pc, #240]	@ (8000f04 <MX_GPIO_Init+0x22c>)
 8000e12:	f005 fbf3 	bl	80065fc <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 8000e16:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e1c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4836      	ldr	r0, [pc, #216]	@ (8000f08 <MX_GPIO_Init+0x230>)
 8000e2e:	f005 fbe5 	bl	80065fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e32:	2380      	movs	r3, #128	@ 0x80
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	482f      	ldr	r0, [pc, #188]	@ (8000f08 <MX_GPIO_Init+0x230>)
 8000e4a:	f005 fbd7 	bl	80065fc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e52:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4828      	ldr	r0, [pc, #160]	@ (8000f04 <MX_GPIO_Init+0x22c>)
 8000e64:	f005 fbca 	bl	80065fc <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4826      	ldr	r0, [pc, #152]	@ (8000f14 <MX_GPIO_Init+0x23c>)
 8000e7c:	f005 fbbe 	bl	80065fc <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8000e80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	481d      	ldr	r0, [pc, #116]	@ (8000f0c <MX_GPIO_Init+0x234>)
 8000e96:	f005 fbb1 	bl	80065fc <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin | WRX_DCX_Pin;
 8000e9a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4816      	ldr	r0, [pc, #88]	@ (8000f0c <MX_GPIO_Init+0x234>)
 8000eb4:	f005 fba2 	bl	80065fc <HAL_GPIO_Init>

	/*Configure GPIO pin : PD5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000eb8:	2320      	movs	r3, #32
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480e      	ldr	r0, [pc, #56]	@ (8000f0c <MX_GPIO_Init+0x234>)
 8000ed4:	f005 fb92 	bl	80065fc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin;
 8000ed8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <MX_GPIO_Init+0x238>)
 8000ef2:	f005 fb83 	bl	80065fc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3738      	adds	r7, #56	@ 0x38
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020c00 	.word	0x40020c00
 8000f10:	40021800 	.word	0x40021800
 8000f14:	40020400 	.word	0x40020400

08000f18 <output_protocol>:
/* USER CODE BEGIN 4 */

/******************* DORJEE'S FUNCTIONS ***************/

//debugging print of qr scanned data
void output_protocol(char line[MAX_LINES][MAX_LINE_LENGTH], int lines) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < lines; i++) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	e009      	b.n	8000f3c <output_protocol+0x24>
		printf("%s\n", line[i]);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	015b      	lsls	r3, r3, #5
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f010 feeb 	bl	8011d0c <puts>
	for (int i = 0; i < lines; i++) {
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf1      	blt.n	8000f28 <output_protocol+0x10>
	}
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <_write>:
int _write(int file, char *ptr, int len) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	4804      	ldr	r0, [pc, #16]	@ (8000f78 <_write+0x28>)
 8000f68:	f00b fda6 	bl	800cab8 <HAL_UART_Transmit>
	return len;
 8000f6c:	687b      	ldr	r3, [r7, #4]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000057c 	.word	0x2000057c

08000f7c <erase_sector>:
/**
 * @brief: Erase the memory from an entire sector
 * @param Sector: The sector number
 * @retval: none
 */
void erase_sector(uint32_t Sector) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();  // Unlock flash to enable erasing
 8000f84:	f005 f97a 	bl	800627c <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(sector_mapping(Sector), VOLTAGE_RANGE_3);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fd33 	bl	80029f4 <sector_mapping>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2102      	movs	r1, #2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f005 fae4 	bl	8006560 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();  // Lock flash after erasing
 8000f98:	f005 f992 	bl	80062c0 <HAL_FLASH_Lock>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <write_to_flash>:
 * @param flash_address: address of string in flash memory that will be stored
 * @retval: none
 * Note: PLEASE UNLOCK AND LOCK FLASH BEFORE AND AFTER USING THIS FUNCTION,
 * IT DOES NOT DO IT ITSELF
 */
void write_to_flash(const char *data, uint32_t flash_address) {
 8000fa4:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8000fa8:	b085      	sub	sp, #20
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();  // Unlock flash for writing

	for (uint8_t i = 0; i < strlen(data); i++) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e012      	b.n	8000fdc <write_to_flash+0x38>
		//printf("%c", data[i]);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address + i, data[i]); // Write to flash
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	18d1      	adds	r1, r2, r3
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4698      	mov	r8, r3
 8000fca:	4691      	mov	r9, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	464b      	mov	r3, r9
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f005 f8ff 	bl	80061d4 <HAL_FLASH_Program>
	for (uint8_t i = 0; i < strlen(data); i++) {
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	7bfc      	ldrb	r4, [r7, #15]
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff f906 	bl	80001f0 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	429c      	cmp	r4, r3
 8000fe8:	d3e5      	bcc.n	8000fb6 <write_to_flash+0x12>
	}

	//HAL_FLASH_Lock();  // Lock flash after writing
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08000ff6 <read_from_flash>:
 * @param flash_address: address of string in flash memory that will be read
 * @retval: failure if its reading trash from flash memory.
 * it literally does not read from flash btw if it detects 0xFF at the start
 * that means your output buffer will not be updated
 */
uint8_t read_from_flash(char *output, uint32_t flash_address) {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
	// Read byte by byte from flash memory, get a whole string in output variable
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e014      	b.n	8001030 <read_from_flash+0x3a>
		char key = *(char*) (flash_address + i);
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	73bb      	strb	r3, [r7, #14]
		//check if reading trash (0xFF) from flash memory
		if (key == 0xFF) {
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	2bff      	cmp	r3, #255	@ 0xff
 8001014:	d104      	bne.n	8001020 <read_from_flash+0x2a>
			if (i == 0) {
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d106      	bne.n	800102a <read_from_flash+0x34>
				return 0;
 800101c:	2300      	movs	r3, #0
 800101e:	e01b      	b.n	8001058 <read_from_flash+0x62>
			}
		} else {
			output[i] = key;
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	7bba      	ldrb	r2, [r7, #14]
 8001028:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	3301      	adds	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	2b1f      	cmp	r3, #31
 8001034:	d9e7      	bls.n	8001006 <read_from_flash+0x10>
		}
	}
	output[strlen(output)] = '\0'; //add null to the end of string for printing
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff f8da 	bl	80001f0 <strlen>
 800103c:	4602      	mov	r2, r0
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
	//printf("output is %s and strlen: %d\n", output, strlen(output));

	//error handling. G-codes are less than 32 chars, anything more is trash
	if (strlen(output) < MAX_LINE_LENGTH) {
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff f8d2 	bl	80001f0 <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	2b1f      	cmp	r3, #31
 8001050:	d801      	bhi.n	8001056 <read_from_flash+0x60>
		return 1;
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <read_from_flash+0x62>
	} else {
		return 0;
 8001056:	2300      	movs	r3, #0
	}

}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <storeProtocol>:
 * @param gcode_file: array of G-code commands
 * @param sector: which sector to store protocol in
 * @retval: failure if sector is "full"
 */
uint8_t storeProtocol(char new_protocol[MAX_LINES][MAX_LINE_LENGTH],
		uint32_t sector) {
 8001060:	b580      	push	{r7, lr}
 8001062:	f5ad 5d16 	sub.w	sp, sp, #9600	@ 0x2580
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 800106e:	f2a3 539c 	subw	r3, r3, #1436	@ 0x59c
 8001072:	6018      	str	r0, [r3, #0]
 8001074:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8001078:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 800107c:	6019      	str	r1, [r3, #0]

	//initialize variables
	int i = 0;  //protocol index
 800107e:	2300      	movs	r3, #0
 8001080:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001084:	f102 021c 	add.w	r2, r2, #28
 8001088:	6013      	str	r3, [r2, #0]
	int j = 0;  //line index
 800108a:	2300      	movs	r3, #0
 800108c:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001090:	f102 0218 	add.w	r2, r2, #24
 8001094:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 8001096:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 800109a:	f5a3 63b3 	sub.w	r3, r3, #1432	@ 0x598
 800109e:	4618      	mov	r0, r3
 80010a0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80010a4:	461a      	mov	r2, r3
 80010a6:	2100      	movs	r1, #0
 80010a8:	f010 ff30 	bl	8011f0c <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 80010ac:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 80010b0:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	f001 fc35 	bl	8002924 <get_sector_address>
 80010ba:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80010be:	f103 0314 	add.w	r3, r3, #20
 80010c2:	6018      	str	r0, [r3, #0]

	//check if all sectors are full before storing a protocol
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 80010c4:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 80010c8:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	f000 f96e 	bl	80013ae <get_num_protocols_in_sector>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80010d8:	f102 0213 	add.w	r2, r2, #19
 80010dc:	7013      	strb	r3, [r2, #0]
	if (num_protocols == MAX_PROTOCOLS_IN_SECTOR) {
 80010de:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80010e2:	f103 0313 	add.w	r3, r3, #19
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d101      	bne.n	80010f0 <storeProtocol+0x90>
		return 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	e158      	b.n	80013a2 <storeProtocol+0x342>
	}

	//read existing protocols in sector and put into the temp protocol storage
	for (i = 0; i < num_protocols; i++) {
 80010f0:	2300      	movs	r3, #0
 80010f2:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80010f6:	f102 021c 	add.w	r2, r2, #28
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	e05a      	b.n	80011b4 <storeProtocol+0x154>
		for (j = 0; j < MAX_LINES; j++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001104:	f102 0218 	add.w	r2, r2, #24
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e041      	b.n	8001190 <storeProtocol+0x130>
			//get the address for the current line in the current protocol
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800110c:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001110:	f103 031c 	add.w	r3, r3, #28
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800111a:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 800111e:	461a      	mov	r2, r3
 8001120:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001124:	f103 0318 	add.w	r3, r3, #24
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	015b      	lsls	r3, r3, #5
 800112c:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800112e:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001132:	f102 0214 	add.w	r2, r2, #20
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	4413      	add	r3, r2
 800113a:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800113e:	f102 0208 	add.w	r2, r2, #8
 8001142:	6013      	str	r3, [r2, #0]
			//read lines from memory into buffer until you reach garbage
			read_from_flash(protocolStorage[i][j], temp_address); //only updates protocolStorage if its a valid line from memory
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	3b18      	subs	r3, #24
 800114a:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800114e:	f102 021c 	add.w	r2, r2, #28
 8001152:	6812      	ldr	r2, [r2, #0]
 8001154:	2164      	movs	r1, #100	@ 0x64
 8001156:	fb02 f101 	mul.w	r1, r2, r1
 800115a:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800115e:	f102 0218 	add.w	r2, r2, #24
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	440a      	add	r2, r1
 8001166:	0152      	lsls	r2, r2, #5
 8001168:	4413      	add	r3, r2
 800116a:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800116e:	f102 0208 	add.w	r2, r2, #8
 8001172:	6811      	ldr	r1, [r2, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff3e 	bl	8000ff6 <read_from_flash>
		for (j = 0; j < MAX_LINES; j++) {
 800117a:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800117e:	f103 0318 	add.w	r3, r3, #24
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800118a:	f102 0218 	add.w	r2, r2, #24
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001194:	f103 0318 	add.w	r3, r3, #24
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b63      	cmp	r3, #99	@ 0x63
 800119c:	ddb6      	ble.n	800110c <storeProtocol+0xac>
	for (i = 0; i < num_protocols; i++) {
 800119e:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80011a2:	f103 031c 	add.w	r3, r3, #28
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80011ae:	f102 021c 	add.w	r2, r2, #28
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80011b8:	f103 0313 	add.w	r3, r3, #19
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80011c2:	f102 021c 	add.w	r2, r2, #28
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	db98      	blt.n	80010fe <storeProtocol+0x9e>
	}
	//output: we now have the existing protocols in the buffer.
	//they only have their first number of lines in. the rest of lines are null

	//put the new protocol into the temp protocol storage
	for (j = 0; j < MAX_LINES; j++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80011d2:	f102 0218 	add.w	r2, r2, #24
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	e03b      	b.n	8001252 <storeProtocol+0x1f2>
		//copy each line into the buffer from new protocol, should be null terminated from qr scanner
		if (new_protocol[j][0] != '\0') {
 80011da:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80011de:	f103 0318 	add.w	r3, r3, #24
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	015b      	lsls	r3, r3, #5
 80011e6:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 80011ea:	f2a2 529c 	subw	r2, r2, #1436	@ 0x59c
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d021      	beq.n	800123c <storeProtocol+0x1dc>
			strcpy(protocolStorage[i][j], new_protocol[j]);
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	3b18      	subs	r3, #24
 80011fe:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001202:	f102 021c 	add.w	r2, r2, #28
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	2164      	movs	r1, #100	@ 0x64
 800120a:	fb02 f101 	mul.w	r1, r2, r1
 800120e:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001212:	f102 0218 	add.w	r2, r2, #24
 8001216:	6812      	ldr	r2, [r2, #0]
 8001218:	440a      	add	r2, r1
 800121a:	0152      	lsls	r2, r2, #5
 800121c:	1898      	adds	r0, r3, r2
 800121e:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001222:	f103 0318 	add.w	r3, r3, #24
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	015b      	lsls	r3, r3, #5
 800122a:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 800122e:	f2a2 529c 	subw	r2, r2, #1436	@ 0x59c
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	4413      	add	r3, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f010 fef3 	bl	8012022 <strcpy>
	for (j = 0; j < MAX_LINES; j++) {
 800123c:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001240:	f103 0318 	add.w	r3, r3, #24
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800124c:	f102 0218 	add.w	r2, r2, #24
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001256:	f103 0318 	add.w	r3, r3, #24
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b63      	cmp	r3, #99	@ 0x63
 800125e:	ddbc      	ble.n	80011da <storeProtocol+0x17a>
		}
	}
	//we now have the new protocol in the buffer.
	//it only has the first number of lines in. the rest of lines are null

	output_protocol(protocolStorage[0], 10);
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	3b18      	subs	r3, #24
 8001266:	210a      	movs	r1, #10
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fe55 	bl	8000f18 <output_protocol>
	output_protocol(protocolStorage[1], 10);
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	3b18      	subs	r3, #24
 8001274:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 8001278:	210a      	movs	r1, #10
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe4c 	bl	8000f18 <output_protocol>

	//write existing protocols and new protocol to flash memory, string-by-string
	erase_sector(sector); //erase sector before writing
 8001280:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8001284:	f5a3 63b4 	sub.w	r3, r3, #1440	@ 0x5a0
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	f7ff fe77 	bl	8000f7c <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 800128e:	f004 fff5 	bl	800627c <HAL_FLASH_Unlock>
	for (i = 0; i < (num_protocols + 1); i++) {
 8001292:	2300      	movs	r3, #0
 8001294:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001298:	f102 021c 	add.w	r2, r2, #28
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e071      	b.n	8001384 <storeProtocol+0x324>
		for (j = 0; j < MAX_LINES; j++) {
 80012a0:	2300      	movs	r3, #0
 80012a2:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80012a6:	f102 0218 	add.w	r2, r2, #24
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	e058      	b.n	8001360 <storeProtocol+0x300>
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80012ae:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80012b2:	f103 031c 	add.w	r3, r3, #28
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 80012c0:	461a      	mov	r2, r3
 80012c2:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80012c6:	f103 0318 	add.w	r3, r3, #24
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	015b      	lsls	r3, r3, #5
 80012ce:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 80012d0:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80012d4:	f102 0214 	add.w	r2, r2, #20
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 80012e0:	f102 020c 	add.w	r2, r2, #12
 80012e4:	6013      	str	r3, [r2, #0]
			//write all strings that dont start with null to flash memory
			if (protocolStorage[i][j][0] != NULL) {
 80012e6:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 80012ea:	f5a3 62b3 	sub.w	r2, r3, #1432	@ 0x598
 80012ee:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 80012f2:	f103 031c 	add.w	r3, r3, #28
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2164      	movs	r1, #100	@ 0x64
 80012fa:	fb03 f101 	mul.w	r1, r3, r1
 80012fe:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001302:	f103 0318 	add.w	r3, r3, #24
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	440b      	add	r3, r1
 800130a:	015b      	lsls	r3, r3, #5
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d01a      	beq.n	800134a <storeProtocol+0x2ea>
				write_to_flash(protocolStorage[i][j], temp_address);
 8001314:	f107 0320 	add.w	r3, r7, #32
 8001318:	3b18      	subs	r3, #24
 800131a:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800131e:	f102 021c 	add.w	r2, r2, #28
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	2164      	movs	r1, #100	@ 0x64
 8001326:	fb02 f101 	mul.w	r1, r2, r1
 800132a:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800132e:	f102 0218 	add.w	r2, r2, #24
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	440a      	add	r2, r1
 8001336:	0152      	lsls	r2, r2, #5
 8001338:	4413      	add	r3, r2
 800133a:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800133e:	f102 020c 	add.w	r2, r2, #12
 8001342:	6811      	ldr	r1, [r2, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fe2d 	bl	8000fa4 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 800134a:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 800134e:	f103 0318 	add.w	r3, r3, #24
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800135a:	f102 0218 	add.w	r2, r2, #24
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001364:	f103 0318 	add.w	r3, r3, #24
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b63      	cmp	r3, #99	@ 0x63
 800136c:	dd9f      	ble.n	80012ae <storeProtocol+0x24e>
	for (i = 0; i < (num_protocols + 1); i++) {
 800136e:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001372:	f103 031c 	add.w	r3, r3, #28
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 800137e:	f102 021c 	add.w	r2, r2, #28
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	f507 5316 	add.w	r3, r7, #9600	@ 0x2580
 8001388:	f103 0313 	add.w	r3, r3, #19
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	f507 5216 	add.w	r2, r7, #9600	@ 0x2580
 8001392:	f102 021c 	add.w	r2, r2, #28
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	dd81      	ble.n	80012a0 <storeProtocol+0x240>
//				//printf("len: %d and data: %s", strlen(protocolStorage[i][j]), protocolStorage[i][j]);
//				write_to_flash(protocolStorage[i][j], temp_address);
//			}
		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 800139c:	f004 ff90 	bl	80062c0 <HAL_FLASH_Lock>

	//output:flash memory now has the lines of protocol storage in there
	//the remaining space is still 0xFF in flash
	return 1;
 80013a0:	2301      	movs	r3, #1
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	f507 5716 	add.w	r7, r7, #9600	@ 0x2580
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <get_num_protocols_in_sector>:

//return number of protocols in the sector
//NOTE: it doesnt actually do that. it checks the top of the sector first
//if there is no protocol there. it will just assume the rest is empty.
uint8_t get_num_protocols_in_sector(uint32_t sector) {
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
	uint32_t flash_address = get_sector_address(sector);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f001 fab4 	bl	8002924 <get_sector_address>
 80013bc:	6138      	str	r0, [r7, #16]

	uint8_t i = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	75fb      	strb	r3, [r7, #23]
 80013c6:	e011      	b.n	80013ec <get_num_protocols_in_sector+0x3e>
		uint8_t first_char = *(uint8_t*) (flash_address + i * PROTOCOL_SIZE);
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	73fb      	strb	r3, [r7, #15]
		//memory in flash is default 0xFF
		if (first_char == 0xFF) {
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	2bff      	cmp	r3, #255	@ 0xff
 80013e0:	d101      	bne.n	80013e6 <get_num_protocols_in_sector+0x38>
			return i;
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	e006      	b.n	80013f4 <get_num_protocols_in_sector+0x46>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
 80013e8:	3301      	adds	r3, #1
 80013ea:	75fb      	strb	r3, [r7, #23]
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d9ea      	bls.n	80013c8 <get_num_protocols_in_sector+0x1a>
		}
	}
	return i;
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <getFreeSector>:

//check each sector sequentially for any space.
//return the first sector number you find that has space
uint8_t getFreeSector(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
	uint8_t i = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
	//check every sector starting at 1
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 8001406:	2301      	movs	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e01f      	b.n	800144c <getFreeSector+0x50>
		//check each potential protocol slot in the current sector
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 800140c:	2300      	movs	r3, #0
 800140e:	73bb      	strb	r3, [r7, #14]
 8001410:	e016      	b.n	8001440 <getFreeSector+0x44>
			//check first char of the given protocol in the current sector
			uint32_t flash_address = get_sector_address(i) + j * PROTOCOL_SIZE;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	4618      	mov	r0, r3
 8001416:	f001 fa85 	bl	8002924 <get_sector_address>
 800141a:	4602      	mov	r2, r0
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	4413      	add	r3, r2
 8001428:	60bb      	str	r3, [r7, #8]
			char first_char = *(char*) (flash_address);
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
			//if memory address is empty, this sector is free
			if (first_char == 0xFF) {
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2bff      	cmp	r3, #255	@ 0xff
 8001434:	d101      	bne.n	800143a <getFreeSector+0x3e>
				return i;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	e00e      	b.n	8001458 <getFreeSector+0x5c>
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	3301      	adds	r3, #1
 800143e:	73bb      	strb	r3, [r7, #14]
 8001440:	7bbb      	ldrb	r3, [r7, #14]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d9e5      	bls.n	8001412 <getFreeSector+0x16>
	for (i = 1; i < (NUMBER_OF_SECTORS + 1); i++) {
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	3301      	adds	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	2b0e      	cmp	r3, #14
 8001450:	d9dc      	bls.n	800140c <getFreeSector+0x10>
			}
		}
	}
	//if somehow all sectors are full, return 15 or higher (16 in this case)
	return i + 1;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	3301      	adds	r3, #1
 8001456:	b2db      	uxtb	r3, r3
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <transmitProtocol>:

/**
 * @brief: Transmit protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 */
void transmitProtocol(uint32_t sector, uint32_t offset) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	@ 0x30
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
 800147e:	615a      	str	r2, [r3, #20]
 8001480:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f001 fa4e 	bl	8002924 <get_sector_address>
 8001488:	4602      	mov	r2, r0
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	4413      	add	r3, r2
 8001496:	62bb      	str	r3, [r7, #40]	@ 0x28

	//printf("\nNew Protocol\n"); //just for debugging

	//we need to process up to 1028 G-code commands
	//but if we run into an invalid string, gcode file is over
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800149e:	e036      	b.n	800150e <transmitProtocol+0xae>
		//an alternative to resetting the temp buffer is to only read up to newline
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 80014a0:	f107 0308 	add.w	r3, r7, #8
 80014a4:	2220      	movs	r2, #32
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f010 fd2f 	bl	8011f0c <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 80014ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014b2:	015b      	lsls	r3, r3, #5
 80014b4:	461a      	mov	r2, r3
 80014b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b8:	441a      	add	r2, r3
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fd98 	bl	8000ff6 <read_from_flash>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01b      	beq.n	8001504 <transmitProtocol+0xa4>
			//printf("%s", output);
			HAL_UART_Transmit(&huart1, (uint8_t*) output, strlen(output),
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe fe8d 	bl	80001f0 <strlen>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b29a      	uxth	r2, r3
 80014da:	f107 0108 	add.w	r1, r7, #8
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	480f      	ldr	r0, [pc, #60]	@ (8001520 <transmitProtocol+0xc0>)
 80014e4:	f00b fae8 	bl	800cab8 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			HAL_UART_Transmit(&huart5, (uint8_t*) output, strlen(output),
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe fe7f 	bl	80001f0 <strlen>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	f107 0108 	add.w	r1, r7, #8
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	4809      	ldr	r0, [pc, #36]	@ (8001524 <transmitProtocol+0xc4>)
 8001500:	f00b fada 	bl	800cab8 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8001504:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001508:	3301      	adds	r3, #1
 800150a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800150e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001512:	2b63      	cmp	r3, #99	@ 0x63
 8001514:	d9c4      	bls.n	80014a0 <transmitProtocol+0x40>
			HAL_MAX_DELAY);
		}
	}
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3730      	adds	r7, #48	@ 0x30
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000057c 	.word	0x2000057c
 8001524:	20000534 	.word	0x20000534

08001528 <queueProtocol>:

/**
 * @brief: Queue protocol from flash memory to RAM buffer
 * @param sector: which sector the protocol is stored in
 */
void queueProtocol(uint32_t sector, uint32_t offset) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b08c      	sub	sp, #48	@ 0x30
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = { '\0' };
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	619a      	str	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset * PROTOCOL_SIZE;
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f001 f9ea 	bl	8002924 <get_sector_address>
 8001550:	4602      	mov	r2, r0
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001558:	fb01 f303 	mul.w	r3, r1, r3
 800155c:	4413      	add	r3, r2
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28

	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8001560:	2300      	movs	r3, #0
 8001562:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001566:	e02c      	b.n	80015c2 <queueProtocol+0x9a>
		memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	2220      	movs	r2, #32
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f010 fccb 	bl	8011f0c <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 8001576:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800157a:	015b      	lsls	r3, r3, #5
 800157c:	461a      	mov	r2, r3
 800157e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001580:	441a      	add	r2, r3
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fd34 	bl	8000ff6 <read_from_flash>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d011      	beq.n	80015b8 <queueProtocol+0x90>
			strcpy(queueBuffer[queueSize][i], output);
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <queueProtocol+0xac>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800159e:	2264      	movs	r2, #100	@ 0x64
 80015a0:	fb01 f202 	mul.w	r2, r1, r2
 80015a4:	4413      	add	r3, r2
 80015a6:	015b      	lsls	r3, r3, #5
 80015a8:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <queueProtocol+0xb0>)
 80015aa:	4413      	add	r3, r2
 80015ac:	f107 0208 	add.w	r2, r7, #8
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f010 fd35 	bl	8012022 <strcpy>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 80015b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015bc:	3301      	adds	r3, #1
 80015be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80015c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015c6:	2b63      	cmp	r3, #99	@ 0x63
 80015c8:	d9ce      	bls.n	8001568 <queueProtocol+0x40>
		}
	}
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3730      	adds	r7, #48	@ 0x30
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20008310 	.word	0x20008310
 80015d8:	20000610 	.word	0x20000610

080015dc <transmitQueuedProtocols>:

/**
 * @brief: Transmit queued protocols from RAM buffer to ESP32 via UART string-by-string
 * @param queueSize:
 */
void transmitQueuedProtocols(uint8_t queueSize) {
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < queueSize; i++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	e028      	b.n	800163e <transmitQueuedProtocols+0x62>
		for (uint8_t j = 0; j < MAX_LINES; j++) {
 80015ec:	2300      	movs	r3, #0
 80015ee:	73bb      	strb	r3, [r7, #14]
 80015f0:	e01f      	b.n	8001632 <transmitQueuedProtocols+0x56>
			HAL_UART_Transmit(&huart1, (uint8_t*) queueBuffer[i][j],
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	7bbb      	ldrb	r3, [r7, #14]
 80015f6:	2164      	movs	r1, #100	@ 0x64
 80015f8:	fb01 f202 	mul.w	r2, r1, r2
 80015fc:	4413      	add	r3, r2
 80015fe:	015b      	lsls	r3, r3, #5
 8001600:	4a13      	ldr	r2, [pc, #76]	@ (8001650 <transmitQueuedProtocols+0x74>)
 8001602:	189c      	adds	r4, r3, r2
					strlen(queueBuffer[i][j]), HAL_MAX_DELAY);
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	7bbb      	ldrb	r3, [r7, #14]
 8001608:	2164      	movs	r1, #100	@ 0x64
 800160a:	fb01 f202 	mul.w	r2, r1, r2
 800160e:	4413      	add	r3, r2
 8001610:	015b      	lsls	r3, r3, #5
 8001612:	4a0f      	ldr	r2, [pc, #60]	@ (8001650 <transmitQueuedProtocols+0x74>)
 8001614:	4413      	add	r3, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe fdea 	bl	80001f0 <strlen>
 800161c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart1, (uint8_t*) queueBuffer[i][j],
 800161e:	b29a      	uxth	r2, r3
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
 8001624:	4621      	mov	r1, r4
 8001626:	480b      	ldr	r0, [pc, #44]	@ (8001654 <transmitQueuedProtocols+0x78>)
 8001628:	f00b fa46 	bl	800cab8 <HAL_UART_Transmit>
		for (uint8_t j = 0; j < MAX_LINES; j++) {
 800162c:	7bbb      	ldrb	r3, [r7, #14]
 800162e:	3301      	adds	r3, #1
 8001630:	73bb      	strb	r3, [r7, #14]
 8001632:	7bbb      	ldrb	r3, [r7, #14]
 8001634:	2b63      	cmp	r3, #99	@ 0x63
 8001636:	d9dc      	bls.n	80015f2 <transmitQueuedProtocols+0x16>
	for (uint8_t i = 0; i < queueSize; i++) {
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	3301      	adds	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	7bfa      	ldrb	r2, [r7, #15]
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	429a      	cmp	r2, r3
 8001644:	d3d2      	bcc.n	80015ec <transmitQueuedProtocols+0x10>
		}
	}
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	bd90      	pop	{r4, r7, pc}
 8001650:	20000610 	.word	0x20000610
 8001654:	2000057c 	.word	0x2000057c

08001658 <deleteProtocol>:
 * @brief: Delete protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 * @param offset: the exact slot in the sector the protocol is stored in
 * @retval: none
 */
void deleteProtocol(uint32_t sector, uint32_t offset) {
 8001658:	b580      	push	{r7, lr}
 800165a:	f5ad 5d17 	sub.w	sp, sp, #9664	@ 0x25c0
 800165e:	b08c      	sub	sp, #48	@ 0x30
 8001660:	af00      	add	r7, sp, #0
 8001662:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 8001666:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 800166a:	6018      	str	r0, [r3, #0]
 800166c:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 8001670:	f5a3 63be 	sub.w	r3, r3, #1520	@ 0x5f0
 8001674:	6019      	str	r1, [r3, #0]
	//initialize variables
	uint8_t new_offset = offset + 1; //have it range from 1-3
 8001676:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 800167a:	f5a3 63be 	sub.w	r3, r3, #1520	@ 0x5f0
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	3301      	adds	r3, #1
 8001684:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001688:	f102 021f 	add.w	r2, r2, #31
 800168c:	7013      	strb	r3, [r2, #0]
	int i = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001694:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001698:	6013      	str	r3, [r2, #0]
	int j = 0; //indices for moving through flash memory
 800169a:	2300      	movs	r3, #0
 800169c:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80016a0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80016a4:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] =
 80016a6:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 80016aa:	f2a3 53a4 	subw	r3, r3, #1444	@ 0x5a4
 80016ae:	4618      	mov	r0, r3
 80016b0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80016b4:	461a      	mov	r2, r3
 80016b6:	2100      	movs	r1, #0
 80016b8:	f010 fc28 	bl	8011f0c <memset>
			{ { { '\0' } } };
	uint32_t flash_address = get_sector_address(sector);
 80016bc:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 80016c0:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	f001 f92d 	bl	8002924 <get_sector_address>
 80016ca:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80016ce:	f103 0318 	add.w	r3, r3, #24
 80016d2:	6018      	str	r0, [r3, #0]
	char trashLine[MAX_LINE_LENGTH];
	memset(trashLine, 0xFF, sizeof(trashLine));
 80016d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016d8:	3b04      	subs	r3, #4
 80016da:	2220      	movs	r2, #32
 80016dc:	21ff      	movs	r1, #255	@ 0xff
 80016de:	4618      	mov	r0, r3
 80016e0:	f010 fc14 	bl	8011f0c <memset>
	char nullLine[MAX_LINE_LENGTH];
	memset(nullLine, 0x00, sizeof(nullLine));
 80016e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016e8:	3b24      	subs	r3, #36	@ 0x24
 80016ea:	2220      	movs	r2, #32
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f010 fc0c 	bl	8011f0c <memset>
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 80016f4:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 80016f8:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	f7ff fe56 	bl	80013ae <get_num_protocols_in_sector>
 8001702:	4603      	mov	r3, r0
 8001704:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001708:	f102 0217 	add.w	r2, r2, #23
 800170c:	7013      	strb	r3, [r2, #0]

	int a = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001714:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001718:	6013      	str	r3, [r2, #0]
	int b = 0; //separate indices for protocolstorage
 800171a:	2300      	movs	r3, #0
 800171c:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001720:	f102 0220 	add.w	r2, r2, #32
 8001724:	6013      	str	r3, [r2, #0]

	//copy all protocols in sector to local buffer
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8001726:	2300      	movs	r3, #0
 8001728:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 800172c:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e082      	b.n	800183a <deleteProtocol+0x1e2>
		if (i != offset) {
 8001734:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 8001738:	f5a3 63be 	sub.w	r3, r3, #1520	@ 0x5f0
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001742:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d06b      	beq.n	8001824 <deleteProtocol+0x1cc>
			//copy all lines of the protocol into the buffer
			for (j = 0; j < MAX_LINES; j++) {
 800174c:	2300      	movs	r3, #0
 800174e:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001752:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e04c      	b.n	80017f4 <deleteProtocol+0x19c>
				//get the address for the current line in the current protocol
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800175a:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 800175e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001768:	fb02 f303 	mul.w	r3, r2, r3
						+ j * MAX_LINE_LENGTH;
 800176c:	461a      	mov	r2, r3
 800176e:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001772:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	015b      	lsls	r3, r3, #5
 800177a:	4413      	add	r3, r2
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800177c:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001780:	f102 0218 	add.w	r2, r2, #24
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	4413      	add	r3, r2
 8001788:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 800178c:	f102 020c 	add.w	r2, r2, #12
 8001790:	6013      	str	r3, [r2, #0]
				//read lines from memory into buffer until you reach garbage
				read_from_flash(protocolStorage[a][b], temp_address); //only updates protocolStorage if its a valid line from memory
 8001792:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001796:	3b24      	subs	r3, #36	@ 0x24
 8001798:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 800179c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	2164      	movs	r1, #100	@ 0x64
 80017a4:	fb02 f101 	mul.w	r1, r2, r1
 80017a8:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80017ac:	f102 0220 	add.w	r2, r2, #32
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	440a      	add	r2, r1
 80017b4:	0152      	lsls	r2, r2, #5
 80017b6:	4413      	add	r3, r2
 80017b8:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80017bc:	f102 020c 	add.w	r2, r2, #12
 80017c0:	6811      	ldr	r1, [r2, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fc17 	bl	8000ff6 <read_from_flash>
				b++;
 80017c8:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80017cc:	f103 0320 	add.w	r3, r3, #32
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80017d8:	f102 0220 	add.w	r2, r2, #32
 80017dc:	6013      	str	r3, [r2, #0]
			for (j = 0; j < MAX_LINES; j++) {
 80017de:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80017e2:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80017ee:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80017f8:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b63      	cmp	r3, #99	@ 0x63
 8001800:	ddab      	ble.n	800175a <deleteProtocol+0x102>
			}
			a++;
 8001802:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001806:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001812:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001816:	6013      	str	r3, [r2, #0]
			b = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 800181e:	f102 0220 	add.w	r2, r2, #32
 8001822:	6013      	str	r3, [r2, #0]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8001824:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001828:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001834:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 800183e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b02      	cmp	r3, #2
 8001846:	f77f af75 	ble.w	8001734 <deleteProtocol+0xdc>
		}
	}

	//write existing protocols except the one to be deleted back to flash
	erase_sector(sector); //erase sector before writing
 800184a:	f507 63be 	add.w	r3, r7, #1520	@ 0x5f0
 800184e:	f2a3 53ec 	subw	r3, r3, #1516	@ 0x5ec
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	f7ff fb92 	bl	8000f7c <erase_sector>
	HAL_FLASH_Unlock(); // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 8001858:	f004 fd10 	bl	800627c <HAL_FLASH_Unlock>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 800185c:	2300      	movs	r3, #0
 800185e:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001862:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e05a      	b.n	8001920 <deleteProtocol+0x2c8>
		for (j = 0; j < MAX_LINES; j++) {
 800186a:	2300      	movs	r3, #0
 800186c:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 8001870:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e041      	b.n	80018fc <deleteProtocol+0x2a4>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 8001878:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 800187c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001886:	fb02 f303 	mul.w	r3, r2, r3
					+ j * MAX_LINE_LENGTH;
 800188a:	461a      	mov	r2, r3
 800188c:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001890:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	015b      	lsls	r3, r3, #5
 8001898:	4413      	add	r3, r2
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE
 800189a:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 800189e:	f102 0218 	add.w	r2, r2, #24
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80018aa:	f102 0210 	add.w	r2, r2, #16
 80018ae:	6013      	str	r3, [r2, #0]
			write_to_flash(protocolStorage[i][j], temp_address);
 80018b0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80018b4:	3b24      	subs	r3, #36	@ 0x24
 80018b6:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80018ba:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	2164      	movs	r1, #100	@ 0x64
 80018c2:	fb02 f101 	mul.w	r1, r2, r1
 80018c6:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80018ca:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	440a      	add	r2, r1
 80018d2:	0152      	lsls	r2, r2, #5
 80018d4:	4413      	add	r3, r2
 80018d6:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80018da:	f102 0210 	add.w	r2, r2, #16
 80018de:	6811      	ldr	r1, [r2, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fb5f 	bl	8000fa4 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 80018e6:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 80018ea:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 80018f6:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001900:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b63      	cmp	r3, #99	@ 0x63
 8001908:	ddb6      	ble.n	8001878 <deleteProtocol+0x220>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 800190a:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 800190e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	f507 5217 	add.w	r2, r7, #9664	@ 0x25c0
 800191a:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	f507 5317 	add.w	r3, r7, #9664	@ 0x25c0
 8001924:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b02      	cmp	r3, #2
 800192c:	dd9d      	ble.n	800186a <deleteProtocol+0x212>

		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 800192e:	f004 fcc7 	bl	80062c0 <HAL_FLASH_Lock>
}
 8001932:	bf00      	nop
 8001934:	f507 5717 	add.w	r7, r7, #9664	@ 0x25c0
 8001938:	3730      	adds	r7, #48	@ 0x30
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <Touch_Init>:
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, number);
}

/******************** Touchscreen *********************/

void Touch_Init(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	if (BSP_TS_Init(240, 320) != TS_OK) {
 8001944:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001948:	20f0      	movs	r0, #240	@ 0xf0
 800194a:	f003 fc99 	bl	8005280 <BSP_TS_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d009      	beq.n	8001968 <Touch_Init+0x28>
		BSP_LCD_DisplayStringAt(0, 10, (uint8_t*) "Failure", CENTER_MODE);
 8001954:	2301      	movs	r3, #1
 8001956:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <Touch_Init+0x40>)
 8001958:	210a      	movs	r1, #10
 800195a:	2000      	movs	r0, #0
 800195c:	f002 ffc0 	bl	80048e0 <BSP_LCD_DisplayStringAt>
		printf("Touchscreen Initialization failure\n");
 8001960:	4808      	ldr	r0, [pc, #32]	@ (8001984 <Touch_Init+0x44>)
 8001962:	f010 f9d3 	bl	8011d0c <puts>
	} else {
		BSP_LCD_DisplayStringAt(0, 300, (uint8_t*) "Success", CENTER_MODE);
		printf("Touchscreen Initialization success\n");
	}
}
 8001966:	e009      	b.n	800197c <Touch_Init+0x3c>
		BSP_LCD_DisplayStringAt(0, 300, (uint8_t*) "Success", CENTER_MODE);
 8001968:	2301      	movs	r3, #1
 800196a:	4a07      	ldr	r2, [pc, #28]	@ (8001988 <Touch_Init+0x48>)
 800196c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001970:	2000      	movs	r0, #0
 8001972:	f002 ffb5 	bl	80048e0 <BSP_LCD_DisplayStringAt>
		printf("Touchscreen Initialization success\n");
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <Touch_Init+0x4c>)
 8001978:	f010 f9c8 	bl	8011d0c <puts>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	08012cf0 	.word	0x08012cf0
 8001984:	08012cf8 	.word	0x08012cf8
 8001988:	08012d1c 	.word	0x08012d1c
 800198c:	08012d24 	.word	0x08012d24

08001990 <DrawMainPage>:
/**
 * @brief: Draw main page and handle button label and status updates
 * @param: page_num: determines which page should be drawn from 1-10
 * @retval: none
 */
void DrawMainPage(uint8_t page_num) {
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b0a6      	sub	sp, #152	@ 0x98
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
	//Draw "Protocol Title" box
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800199a:	f04f 30ff 	mov.w	r0, #4294967295
 800199e:	f002 ff33 	bl	8004808 <BSP_LCD_Clear>
	char empty[20] = "Empty\n"; //strings from flash memory come with newline at end
 80019a2:	4a66      	ldr	r2, [pc, #408]	@ (8001b3c <DrawMainPage+0x1ac>)
 80019a4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80019a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ac:	6018      	str	r0, [r3, #0]
 80019ae:	3304      	adds	r3, #4
 80019b0:	8019      	strh	r1, [r3, #0]
 80019b2:	3302      	adds	r3, #2
 80019b4:	0c0a      	lsrs	r2, r1, #16
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	f107 0387 	add.w	r3, r7, #135	@ 0x87
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	731a      	strb	r2, [r3, #12]
	char pageTitle[20] = "";
 80019c6:	2300      	movs	r3, #0
 80019c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80019ca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Page %d", page_num);
 80019d8:	79fa      	ldrb	r2, [r7, #7]
 80019da:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019de:	4958      	ldr	r1, [pc, #352]	@ (8001b40 <DrawMainPage+0x1b0>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f010 f99b 	bl	8011d1c <siprintf>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80019e6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80019ea:	f002 fec1 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 80019ee:	4855      	ldr	r0, [pc, #340]	@ (8001b44 <DrawMainPage+0x1b4>)
 80019f0:	f002 fef0 	bl	80047d4 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80019f4:	4854      	ldr	r0, [pc, #336]	@ (8001b48 <DrawMainPage+0x1b8>)
 80019f6:	f002 fed3 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) pageTitle, CENTER_MODE);
 80019fa:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80019fe:	2301      	movs	r3, #1
 8001a00:	210a      	movs	r1, #10
 8001a02:	200a      	movs	r0, #10
 8001a04:	f002 ff6c 	bl	80048e0 <BSP_LCD_DisplayStringAt>

	//get button label info from flash memory
	char readBuffer1[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001a08:	2300      	movs	r3, #0
 8001a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a0c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
 8001a1c:	615a      	str	r2, [r3, #20]
 8001a1e:	619a      	str	r2, [r3, #24]
	char readBuffer2[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
 8001a34:	615a      	str	r2, [r3, #20]
 8001a36:	619a      	str	r2, [r3, #24]
	char readBuffer3[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
 8001a4c:	615a      	str	r2, [r3, #20]
 8001a4e:	619a      	str	r2, [r3, #24]

	//if the protocol exists, read from it. else, name it empty
	if (read_from_flash(readBuffer1, get_sector_address(page_num))) {
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 ff66 	bl	8002924 <get_sector_address>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fac8 	bl	8000ff6 <read_from_flash>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00a      	beq.n	8001a82 <DrawMainPage+0xf2>
		strcpy(buttons[0].label, readBuffer1);
 8001a6c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a70:	4619      	mov	r1, r3
 8001a72:	4836      	ldr	r0, [pc, #216]	@ (8001b4c <DrawMainPage+0x1bc>)
 8001a74:	f010 fad5 	bl	8012022 <strcpy>
		buttons[0].status = NOT_EMPTY;
 8001a78:	4b35      	ldr	r3, [pc, #212]	@ (8001b50 <DrawMainPage+0x1c0>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001a80:	e009      	b.n	8001a96 <DrawMainPage+0x106>
	} else {
		strcpy(buttons[0].label, empty);
 8001a82:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001a86:	4619      	mov	r1, r3
 8001a88:	4830      	ldr	r0, [pc, #192]	@ (8001b4c <DrawMainPage+0x1bc>)
 8001a8a:	f010 faca 	bl	8012022 <strcpy>
		buttons[0].status = EMPTY;
 8001a8e:	4b30      	ldr	r3, [pc, #192]	@ (8001b50 <DrawMainPage+0x1c0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
	if (read_from_flash(readBuffer2,
			get_sector_address(page_num) + PROTOCOL_SIZE)) {
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 ff43 	bl	8002924 <get_sector_address>
 8001a9e:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer2,
 8001aa0:	f603 32b8 	addw	r2, r3, #3000	@ 0xbb8
 8001aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff faa3 	bl	8000ff6 <read_from_flash>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00a      	beq.n	8001acc <DrawMainPage+0x13c>
		strcpy(buttons[1].label, readBuffer2);
 8001ab6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aba:	4619      	mov	r1, r3
 8001abc:	4825      	ldr	r0, [pc, #148]	@ (8001b54 <DrawMainPage+0x1c4>)
 8001abe:	f010 fab0 	bl	8012022 <strcpy>
		buttons[1].status = NOT_EMPTY;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <DrawMainPage+0x1c0>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8001aca:	e009      	b.n	8001ae0 <DrawMainPage+0x150>
	} else {
		strcpy(buttons[1].label, empty);
 8001acc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4820      	ldr	r0, [pc, #128]	@ (8001b54 <DrawMainPage+0x1c4>)
 8001ad4:	f010 faa5 	bl	8012022 <strcpy>
		buttons[1].status = EMPTY;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <DrawMainPage+0x1c0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	}
	if (read_from_flash(readBuffer3,
			get_sector_address(page_num) + 2 * PROTOCOL_SIZE)) {
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 ff1e 	bl	8002924 <get_sector_address>
 8001ae8:	4603      	mov	r3, r0
	if (read_from_flash(readBuffer3,
 8001aea:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 8001aee:	3310      	adds	r3, #16
 8001af0:	f107 020c 	add.w	r2, r7, #12
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f7ff fa7d 	bl	8000ff6 <read_from_flash>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00a      	beq.n	8001b18 <DrawMainPage+0x188>
		strcpy(buttons[2].label, readBuffer3);
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4619      	mov	r1, r3
 8001b08:	4813      	ldr	r0, [pc, #76]	@ (8001b58 <DrawMainPage+0x1c8>)
 8001b0a:	f010 fa8a 	bl	8012022 <strcpy>
		buttons[2].status = NOT_EMPTY;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <DrawMainPage+0x1c0>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
 8001b16:	e009      	b.n	8001b2c <DrawMainPage+0x19c>
	} else {
		strcpy(buttons[2].label, empty);
 8001b18:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480e      	ldr	r0, [pc, #56]	@ (8001b58 <DrawMainPage+0x1c8>)
 8001b20:	f010 fa7f 	bl	8012022 <strcpy>
		buttons[2].status = EMPTY;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <DrawMainPage+0x1c0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	}

	// Draw buttons
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001b2c:	480b      	ldr	r0, [pc, #44]	@ (8001b5c <DrawMainPage+0x1cc>)
 8001b2e:	f002 fe1f 	bl	8004770 <BSP_LCD_SetTextColor>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b38:	e07e      	b.n	8001c38 <DrawMainPage+0x2a8>
 8001b3a:	bf00      	nop
 8001b3c:	08012d50 	.word	0x08012d50
 8001b40:	08012d48 	.word	0x08012d48
 8001b44:	20000254 	.word	0x20000254
 8001b48:	ffff0000 	.word	0xffff0000
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000032 	.word	0x20000032
 8001b58:	2000005c 	.word	0x2000005c
 8001b5c:	ff0000ff 	.word	0xff0000ff
		BSP_LCD_FillRect(buttons[i].x, buttons[i].y, buttons[i].w,
 8001b60:	4a6f      	ldr	r2, [pc, #444]	@ (8001d20 <DrawMainPage+0x390>)
 8001b62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b66:	212a      	movs	r1, #42	@ 0x2a
 8001b68:	fb01 f303 	mul.w	r3, r1, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	8818      	ldrh	r0, [r3, #0]
 8001b70:	4a6b      	ldr	r2, [pc, #428]	@ (8001d20 <DrawMainPage+0x390>)
 8001b72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b76:	212a      	movs	r1, #42	@ 0x2a
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	8819      	ldrh	r1, [r3, #0]
 8001b82:	4a67      	ldr	r2, [pc, #412]	@ (8001d20 <DrawMainPage+0x390>)
 8001b84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b88:	242a      	movs	r4, #42	@ 0x2a
 8001b8a:	fb04 f303 	mul.w	r3, r4, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3304      	adds	r3, #4
 8001b92:	881a      	ldrh	r2, [r3, #0]
 8001b94:	4c62      	ldr	r4, [pc, #392]	@ (8001d20 <DrawMainPage+0x390>)
 8001b96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b9a:	252a      	movs	r5, #42	@ 0x2a
 8001b9c:	fb05 f303 	mul.w	r3, r5, r3
 8001ba0:	4423      	add	r3, r4
 8001ba2:	3306      	adds	r3, #6
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	f002 ff59 	bl	8004a5c <BSP_LCD_FillRect>
				buttons[i].h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001baa:	f04f 30ff 	mov.w	r0, #4294967295
 8001bae:	f002 fddf 	bl	8004770 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001bb2:	485c      	ldr	r0, [pc, #368]	@ (8001d24 <DrawMainPage+0x394>)
 8001bb4:	f002 fdf4 	bl	80047a0 <BSP_LCD_SetBackColor>
		if (buttons[i].label[10] == NEWLINE_CHAR) {
		}
		buttons[i].label[strlen(buttons[i].label) - 1] = ' '; //dont display null terminator
 8001bb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bbc:	222a      	movs	r2, #42	@ 0x2a
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	3308      	adds	r3, #8
 8001bc4:	4a56      	ldr	r2, [pc, #344]	@ (8001d20 <DrawMainPage+0x390>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fb11 	bl	80001f0 <strlen>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	4953      	ldr	r1, [pc, #332]	@ (8001d20 <DrawMainPage+0x390>)
 8001bd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001bd8:	202a      	movs	r0, #42	@ 0x2a
 8001bda:	fb00 f202 	mul.w	r2, r0, r2
 8001bde:	440a      	add	r2, r1
 8001be0:	4413      	add	r3, r2
 8001be2:	3308      	adds	r3, #8
 8001be4:	2220      	movs	r2, #32
 8001be6:	701a      	strb	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(buttons[i].x + 10, buttons[i].y + 10,
 8001be8:	4a4d      	ldr	r2, [pc, #308]	@ (8001d20 <DrawMainPage+0x390>)
 8001bea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bee:	212a      	movs	r1, #42	@ 0x2a
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	330a      	adds	r3, #10
 8001bfa:	b298      	uxth	r0, r3
 8001bfc:	4a48      	ldr	r2, [pc, #288]	@ (8001d20 <DrawMainPage+0x390>)
 8001bfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c02:	212a      	movs	r1, #42	@ 0x2a
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	330a      	adds	r3, #10
 8001c10:	b299      	uxth	r1, r3
				(uint8_t*) buttons[i].label, LEFT_MODE);
 8001c12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c16:	222a      	movs	r2, #42	@ 0x2a
 8001c18:	fb02 f303 	mul.w	r3, r2, r3
 8001c1c:	3308      	adds	r3, #8
 8001c1e:	4a40      	ldr	r2, [pc, #256]	@ (8001d20 <DrawMainPage+0x390>)
 8001c20:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(buttons[i].x + 10, buttons[i].y + 10,
 8001c22:	2303      	movs	r3, #3
 8001c24:	f002 fe5c 	bl	80048e0 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001c28:	483e      	ldr	r0, [pc, #248]	@ (8001d24 <DrawMainPage+0x394>)
 8001c2a:	f002 fda1 	bl	8004770 <BSP_LCD_SetTextColor>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8001c2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c32:	3301      	adds	r3, #1
 8001c34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	dd8f      	ble.n	8001b60 <DrawMainPage+0x1d0>
	}

	// Draw "Next" button
	if (page_num != 10) {
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	2b0a      	cmp	r3, #10
 8001c44:	d01f      	beq.n	8001c86 <DrawMainPage+0x2f6>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001c46:	4838      	ldr	r0, [pc, #224]	@ (8001d28 <DrawMainPage+0x398>)
 8001c48:	f002 fd92 	bl	8004770 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(nextButton.x, nextButton.y, nextButton.w,
 8001c4c:	4b37      	ldr	r3, [pc, #220]	@ (8001d2c <DrawMainPage+0x39c>)
 8001c4e:	8818      	ldrh	r0, [r3, #0]
 8001c50:	4b36      	ldr	r3, [pc, #216]	@ (8001d2c <DrawMainPage+0x39c>)
 8001c52:	8859      	ldrh	r1, [r3, #2]
 8001c54:	4b35      	ldr	r3, [pc, #212]	@ (8001d2c <DrawMainPage+0x39c>)
 8001c56:	889a      	ldrh	r2, [r3, #4]
 8001c58:	4b34      	ldr	r3, [pc, #208]	@ (8001d2c <DrawMainPage+0x39c>)
 8001c5a:	88db      	ldrh	r3, [r3, #6]
 8001c5c:	f002 fefe 	bl	8004a5c <BSP_LCD_FillRect>
				nextButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f002 fd84 	bl	8004770 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001c68:	482f      	ldr	r0, [pc, #188]	@ (8001d28 <DrawMainPage+0x398>)
 8001c6a:	f002 fd99 	bl	80047a0 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(nextButton.x + 10, nextButton.y + 10,
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <DrawMainPage+0x39c>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	330a      	adds	r3, #10
 8001c74:	b298      	uxth	r0, r3
 8001c76:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <DrawMainPage+0x39c>)
 8001c78:	885b      	ldrh	r3, [r3, #2]
 8001c7a:	330a      	adds	r3, #10
 8001c7c:	b299      	uxth	r1, r3
 8001c7e:	2303      	movs	r3, #3
 8001c80:	4a2b      	ldr	r2, [pc, #172]	@ (8001d30 <DrawMainPage+0x3a0>)
 8001c82:	f002 fe2d 	bl	80048e0 <BSP_LCD_DisplayStringAt>
				(uint8_t*) nextButton.label, LEFT_MODE);
	}

	// Draw "Back" button
	if (page_num != 1) {
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d01f      	beq.n	8001ccc <DrawMainPage+0x33c>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001c8c:	4826      	ldr	r0, [pc, #152]	@ (8001d28 <DrawMainPage+0x398>)
 8001c8e:	f002 fd6f 	bl	8004770 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w,
 8001c92:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <DrawMainPage+0x3a4>)
 8001c94:	8818      	ldrh	r0, [r3, #0]
 8001c96:	4b27      	ldr	r3, [pc, #156]	@ (8001d34 <DrawMainPage+0x3a4>)
 8001c98:	8859      	ldrh	r1, [r3, #2]
 8001c9a:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <DrawMainPage+0x3a4>)
 8001c9c:	889a      	ldrh	r2, [r3, #4]
 8001c9e:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <DrawMainPage+0x3a4>)
 8001ca0:	88db      	ldrh	r3, [r3, #6]
 8001ca2:	f002 fedb 	bl	8004a5c <BSP_LCD_FillRect>
				backButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8001caa:	f002 fd61 	bl	8004770 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001cae:	481e      	ldr	r0, [pc, #120]	@ (8001d28 <DrawMainPage+0x398>)
 8001cb0:	f002 fd76 	bl	80047a0 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <DrawMainPage+0x3a4>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	330a      	adds	r3, #10
 8001cba:	b298      	uxth	r0, r3
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d34 <DrawMainPage+0x3a4>)
 8001cbe:	885b      	ldrh	r3, [r3, #2]
 8001cc0:	330a      	adds	r3, #10
 8001cc2:	b299      	uxth	r1, r3
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d38 <DrawMainPage+0x3a8>)
 8001cc8:	f002 fe0a 	bl	80048e0 <BSP_LCD_DisplayStringAt>
				(uint8_t*) backButton.label, LEFT_MODE);
	}

	//draw "Queue" button on page 1
	if (page_num == 1) {
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d121      	bne.n	8001d16 <DrawMainPage+0x386>
		BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001cd2:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8001cd6:	f002 fd4b 	bl	8004770 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(queueButton.x, queueButton.y, queueButton.w,
 8001cda:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <DrawMainPage+0x3ac>)
 8001cdc:	8818      	ldrh	r0, [r3, #0]
 8001cde:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <DrawMainPage+0x3ac>)
 8001ce0:	8859      	ldrh	r1, [r3, #2]
 8001ce2:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <DrawMainPage+0x3ac>)
 8001ce4:	889a      	ldrh	r2, [r3, #4]
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <DrawMainPage+0x3ac>)
 8001ce8:	88db      	ldrh	r3, [r3, #6]
 8001cea:	f002 feb7 	bl	8004a5c <BSP_LCD_FillRect>
				queueButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001cee:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001cf2:	f002 fd3d 	bl	8004770 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_YELLOW);
 8001cf6:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8001cfa:	f002 fd51 	bl	80047a0 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(queueButton.x + 10, queueButton.y + 10,
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <DrawMainPage+0x3ac>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	330a      	adds	r3, #10
 8001d04:	b298      	uxth	r0, r3
 8001d06:	4b0d      	ldr	r3, [pc, #52]	@ (8001d3c <DrawMainPage+0x3ac>)
 8001d08:	885b      	ldrh	r3, [r3, #2]
 8001d0a:	330a      	adds	r3, #10
 8001d0c:	b299      	uxth	r1, r3
 8001d0e:	2303      	movs	r3, #3
 8001d10:	4a0b      	ldr	r2, [pc, #44]	@ (8001d40 <DrawMainPage+0x3b0>)
 8001d12:	f002 fde5 	bl	80048e0 <BSP_LCD_DisplayStringAt>
				(uint8_t*) queueButton.label, LEFT_MODE);
	}
}
 8001d16:	bf00      	nop
 8001d18:	3798      	adds	r7, #152	@ 0x98
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000000 	.word	0x20000000
 8001d24:	ff0000ff 	.word	0xff0000ff
 8001d28:	ffff0000 	.word	0xffff0000
 8001d2c:	200000d8 	.word	0x200000d8
 8001d30:	200000e0 	.word	0x200000e0
 8001d34:	200000ac 	.word	0x200000ac
 8001d38:	200000b4 	.word	0x200000b4
 8001d3c:	20000080 	.word	0x20000080
 8001d40:	20000088 	.word	0x20000088

08001d44 <DrawInfoPage>:

void DrawInfoPage(char protocolTitle[MAX_LINE_LENGTH]) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f002 fd5a 	bl	8004808 <BSP_LCD_Clear>
	//Display protocol name at top of screen
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001d54:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001d58:	f002 fd0a 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001d5c:	4846      	ldr	r0, [pc, #280]	@ (8001e78 <DrawInfoPage+0x134>)
 8001d5e:	f002 fd1f 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) protocolTitle, CENTER_MODE);
 8001d62:	2301      	movs	r3, #1
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	210a      	movs	r1, #10
 8001d68:	200a      	movs	r0, #10
 8001d6a:	f002 fdb9 	bl	80048e0 <BSP_LCD_DisplayStringAt>

	//Draw "QueueSelect" button on select page
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d6e:	4843      	ldr	r0, [pc, #268]	@ (8001e7c <DrawInfoPage+0x138>)
 8001d70:	f002 fcfe 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(queueSelectButton.x, queueSelectButton.y,
 8001d74:	4b42      	ldr	r3, [pc, #264]	@ (8001e80 <DrawInfoPage+0x13c>)
 8001d76:	8818      	ldrh	r0, [r3, #0]
 8001d78:	4b41      	ldr	r3, [pc, #260]	@ (8001e80 <DrawInfoPage+0x13c>)
 8001d7a:	8859      	ldrh	r1, [r3, #2]
 8001d7c:	4b40      	ldr	r3, [pc, #256]	@ (8001e80 <DrawInfoPage+0x13c>)
 8001d7e:	889a      	ldrh	r2, [r3, #4]
 8001d80:	4b3f      	ldr	r3, [pc, #252]	@ (8001e80 <DrawInfoPage+0x13c>)
 8001d82:	88db      	ldrh	r3, [r3, #6]
 8001d84:	f002 fe6a 	bl	8004a5c <BSP_LCD_FillRect>
			queueSelectButton.w, queueSelectButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f002 fcf0 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001d90:	483a      	ldr	r0, [pc, #232]	@ (8001e7c <DrawInfoPage+0x138>)
 8001d92:	f002 fd05 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(queueSelectButton.x + 10, queueSelectButton.y + 10,
 8001d96:	4b3a      	ldr	r3, [pc, #232]	@ (8001e80 <DrawInfoPage+0x13c>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	330a      	adds	r3, #10
 8001d9c:	b298      	uxth	r0, r3
 8001d9e:	4b38      	ldr	r3, [pc, #224]	@ (8001e80 <DrawInfoPage+0x13c>)
 8001da0:	885b      	ldrh	r3, [r3, #2]
 8001da2:	330a      	adds	r3, #10
 8001da4:	b299      	uxth	r1, r3
 8001da6:	2303      	movs	r3, #3
 8001da8:	4a36      	ldr	r2, [pc, #216]	@ (8001e84 <DrawInfoPage+0x140>)
 8001daa:	f002 fd99 	bl	80048e0 <BSP_LCD_DisplayStringAt>
			(uint8_t*) queueSelectButton.label, LEFT_MODE);

	//Draw "Select" button
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001dae:	4833      	ldr	r0, [pc, #204]	@ (8001e7c <DrawInfoPage+0x138>)
 8001db0:	f002 fcde 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(selectButton.x, selectButton.y, selectButton.w,
 8001db4:	4b34      	ldr	r3, [pc, #208]	@ (8001e88 <DrawInfoPage+0x144>)
 8001db6:	8818      	ldrh	r0, [r3, #0]
 8001db8:	4b33      	ldr	r3, [pc, #204]	@ (8001e88 <DrawInfoPage+0x144>)
 8001dba:	8859      	ldrh	r1, [r3, #2]
 8001dbc:	4b32      	ldr	r3, [pc, #200]	@ (8001e88 <DrawInfoPage+0x144>)
 8001dbe:	889a      	ldrh	r2, [r3, #4]
 8001dc0:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <DrawInfoPage+0x144>)
 8001dc2:	88db      	ldrh	r3, [r3, #6]
 8001dc4:	f002 fe4a 	bl	8004a5c <BSP_LCD_FillRect>
			selectButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f002 fcd0 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001dd0:	482a      	ldr	r0, [pc, #168]	@ (8001e7c <DrawInfoPage+0x138>)
 8001dd2:	f002 fce5 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(selectButton.x + 10, selectButton.y + 10,
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e88 <DrawInfoPage+0x144>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	330a      	adds	r3, #10
 8001ddc:	b298      	uxth	r0, r3
 8001dde:	4b2a      	ldr	r3, [pc, #168]	@ (8001e88 <DrawInfoPage+0x144>)
 8001de0:	885b      	ldrh	r3, [r3, #2]
 8001de2:	330a      	adds	r3, #10
 8001de4:	b299      	uxth	r1, r3
 8001de6:	2303      	movs	r3, #3
 8001de8:	4a28      	ldr	r2, [pc, #160]	@ (8001e8c <DrawInfoPage+0x148>)
 8001dea:	f002 fd79 	bl	80048e0 <BSP_LCD_DisplayStringAt>
			(uint8_t*) selectButton.label, LEFT_MODE);

	//Draw "Delete" button
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001dee:	4823      	ldr	r0, [pc, #140]	@ (8001e7c <DrawInfoPage+0x138>)
 8001df0:	f002 fcbe 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(deleteButton.x, deleteButton.y, deleteButton.w,
 8001df4:	4b26      	ldr	r3, [pc, #152]	@ (8001e90 <DrawInfoPage+0x14c>)
 8001df6:	8818      	ldrh	r0, [r3, #0]
 8001df8:	4b25      	ldr	r3, [pc, #148]	@ (8001e90 <DrawInfoPage+0x14c>)
 8001dfa:	8859      	ldrh	r1, [r3, #2]
 8001dfc:	4b24      	ldr	r3, [pc, #144]	@ (8001e90 <DrawInfoPage+0x14c>)
 8001dfe:	889a      	ldrh	r2, [r3, #4]
 8001e00:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <DrawInfoPage+0x14c>)
 8001e02:	88db      	ldrh	r3, [r3, #6]
 8001e04:	f002 fe2a 	bl	8004a5c <BSP_LCD_FillRect>
			deleteButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f002 fcb0 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001e10:	481a      	ldr	r0, [pc, #104]	@ (8001e7c <DrawInfoPage+0x138>)
 8001e12:	f002 fcc5 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(deleteButton.x + 10, deleteButton.y + 10,
 8001e16:	4b1e      	ldr	r3, [pc, #120]	@ (8001e90 <DrawInfoPage+0x14c>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	330a      	adds	r3, #10
 8001e1c:	b298      	uxth	r0, r3
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <DrawInfoPage+0x14c>)
 8001e20:	885b      	ldrh	r3, [r3, #2]
 8001e22:	330a      	adds	r3, #10
 8001e24:	b299      	uxth	r1, r3
 8001e26:	2303      	movs	r3, #3
 8001e28:	4a1a      	ldr	r2, [pc, #104]	@ (8001e94 <DrawInfoPage+0x150>)
 8001e2a:	f002 fd59 	bl	80048e0 <BSP_LCD_DisplayStringAt>
			(uint8_t*) deleteButton.label, LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001e2e:	4812      	ldr	r0, [pc, #72]	@ (8001e78 <DrawInfoPage+0x134>)
 8001e30:	f002 fc9e 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 8001e34:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <DrawInfoPage+0x154>)
 8001e36:	8818      	ldrh	r0, [r3, #0]
 8001e38:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <DrawInfoPage+0x154>)
 8001e3a:	8859      	ldrh	r1, [r3, #2]
 8001e3c:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <DrawInfoPage+0x154>)
 8001e3e:	889a      	ldrh	r2, [r3, #4]
 8001e40:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <DrawInfoPage+0x154>)
 8001e42:	88db      	ldrh	r3, [r3, #6]
 8001e44:	f002 fe0a 	bl	8004a5c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f002 fc90 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001e50:	4809      	ldr	r0, [pc, #36]	@ (8001e78 <DrawInfoPage+0x134>)
 8001e52:	f002 fca5 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8001e56:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <DrawInfoPage+0x154>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	330a      	adds	r3, #10
 8001e5c:	b298      	uxth	r0, r3
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <DrawInfoPage+0x154>)
 8001e60:	885b      	ldrh	r3, [r3, #2]
 8001e62:	330a      	adds	r3, #10
 8001e64:	b299      	uxth	r1, r3
 8001e66:	2303      	movs	r3, #3
 8001e68:	4a0c      	ldr	r2, [pc, #48]	@ (8001e9c <DrawInfoPage+0x158>)
 8001e6a:	f002 fd39 	bl	80048e0 <BSP_LCD_DisplayStringAt>
			(uint8_t*) backButton.label, LEFT_MODE);
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	ffff0000 	.word	0xffff0000
 8001e7c:	ff0000ff 	.word	0xff0000ff
 8001e80:	2000015c 	.word	0x2000015c
 8001e84:	20000164 	.word	0x20000164
 8001e88:	20000188 	.word	0x20000188
 8001e8c:	20000190 	.word	0x20000190
 8001e90:	200001b4 	.word	0x200001b4
 8001e94:	200001bc 	.word	0x200001bc
 8001e98:	200000ac 	.word	0x200000ac
 8001e9c:	200000b4 	.word	0x200000b4

08001ea0 <DrawQueuePage>:

void DrawQueuePage(uint8_t queueSize) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08e      	sub	sp, #56	@ 0x38
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8001eae:	f002 fcab 	bl	8004808 <BSP_LCD_Clear>
	char pageTitle[20] = "";
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
 8001eb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Queue Size: %d", queueSize);
 8001ec4:	79fa      	ldrb	r2, [r7, #7]
 8001ec6:	f107 0320 	add.w	r3, r7, #32
 8001eca:	4956      	ldr	r1, [pc, #344]	@ (8002024 <DrawQueuePage+0x184>)
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f00f ff25 	bl	8011d1c <siprintf>
	//Display Queue at top of the screen
	BSP_LCD_SetFont(&Font20);
 8001ed2:	4855      	ldr	r0, [pc, #340]	@ (8002028 <DrawQueuePage+0x188>)
 8001ed4:	f002 fc7e 	bl	80047d4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ed8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001edc:	f002 fc48 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001ee0:	4852      	ldr	r0, [pc, #328]	@ (800202c <DrawQueuePage+0x18c>)
 8001ee2:	f002 fc5d 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) pageTitle, CENTER_MODE);
 8001ee6:	f107 0220 	add.w	r2, r7, #32
 8001eea:	2301      	movs	r3, #1
 8001eec:	210a      	movs	r1, #10
 8001eee:	200a      	movs	r0, #10
 8001ef0:	f002 fcf6 	bl	80048e0 <BSP_LCD_DisplayStringAt>

	//display protocols in queue here
	BSP_LCD_SetFont(&Font16);
 8001ef4:	484e      	ldr	r0, [pc, #312]	@ (8002030 <DrawQueuePage+0x190>)
 8001ef6:	f002 fc6d 	bl	80047d4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001efa:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001efe:	f002 fc37 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001f02:	f04f 30ff 	mov.w	r0, #4294967295
 8001f06:	f002 fc4b 	bl	80047a0 <BSP_LCD_SetBackColor>
	char format[20] = "";
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	f107 0310 	add.w	r3, r7, #16
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
	for (uint8_t i = 0; i < queueSize; i++) {
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001f22:	e033      	b.n	8001f8c <DrawQueuePage+0xec>
		sprintf(format, "%d.) ", i + 1);
 8001f24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	4941      	ldr	r1, [pc, #260]	@ (8002034 <DrawQueuePage+0x194>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f00f fef3 	bl	8011d1c <siprintf>
		BSP_LCD_DisplayStringAt(10, 50 + i * 20, (uint8_t*) format, LEFT_MODE);
 8001f36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	0092      	lsls	r2, r2, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3332      	adds	r3, #50	@ 0x32
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	f107 020c 	add.w	r2, r7, #12
 8001f4e:	2303      	movs	r3, #3
 8001f50:	200a      	movs	r0, #10
 8001f52:	f002 fcc5 	bl	80048e0 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(60, 50 + i * 20, (uint8_t*) queueBuffer[i][0],
 8001f56:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3332      	adds	r3, #50	@ 0x32
 8001f68:	b299      	uxth	r1, r3
 8001f6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f6e:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	4a30      	ldr	r2, [pc, #192]	@ (8002038 <DrawQueuePage+0x198>)
 8001f78:	441a      	add	r2, r3
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	203c      	movs	r0, #60	@ 0x3c
 8001f7e:	f002 fcaf 	bl	80048e0 <BSP_LCD_DisplayStringAt>
	for (uint8_t i = 0; i < queueSize; i++) {
 8001f82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f86:	3301      	adds	r3, #1
 8001f88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001f8c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d3c6      	bcc.n	8001f24 <DrawQueuePage+0x84>
				LEFT_MODE);
	}
	BSP_LCD_SetFont(&Font20);
 8001f96:	4824      	ldr	r0, [pc, #144]	@ (8002028 <DrawQueuePage+0x188>)
 8001f98:	f002 fc1c 	bl	80047d4 <BSP_LCD_SetFont>

	//Draw "Run" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001f9c:	4823      	ldr	r0, [pc, #140]	@ (800202c <DrawQueuePage+0x18c>)
 8001f9e:	f002 fbe7 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(runButton.x, runButton.y, runButton.w, runButton.h);
 8001fa2:	4b26      	ldr	r3, [pc, #152]	@ (800203c <DrawQueuePage+0x19c>)
 8001fa4:	8818      	ldrh	r0, [r3, #0]
 8001fa6:	4b25      	ldr	r3, [pc, #148]	@ (800203c <DrawQueuePage+0x19c>)
 8001fa8:	8859      	ldrh	r1, [r3, #2]
 8001faa:	4b24      	ldr	r3, [pc, #144]	@ (800203c <DrawQueuePage+0x19c>)
 8001fac:	889a      	ldrh	r2, [r3, #4]
 8001fae:	4b23      	ldr	r3, [pc, #140]	@ (800203c <DrawQueuePage+0x19c>)
 8001fb0:	88db      	ldrh	r3, [r3, #6]
 8001fb2:	f002 fd53 	bl	8004a5c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fba:	f002 fbd9 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001fbe:	481b      	ldr	r0, [pc, #108]	@ (800202c <DrawQueuePage+0x18c>)
 8001fc0:	f002 fbee 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(runButton.x + 10, runButton.y + 10,
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <DrawQueuePage+0x19c>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	330a      	adds	r3, #10
 8001fca:	b298      	uxth	r0, r3
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <DrawQueuePage+0x19c>)
 8001fce:	885b      	ldrh	r3, [r3, #2]
 8001fd0:	330a      	adds	r3, #10
 8001fd2:	b299      	uxth	r1, r3
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8002040 <DrawQueuePage+0x1a0>)
 8001fd8:	f002 fc82 	bl	80048e0 <BSP_LCD_DisplayStringAt>
			(uint8_t*) runButton.label, LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001fdc:	4813      	ldr	r0, [pc, #76]	@ (800202c <DrawQueuePage+0x18c>)
 8001fde:	f002 fbc7 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 8001fe2:	4b18      	ldr	r3, [pc, #96]	@ (8002044 <DrawQueuePage+0x1a4>)
 8001fe4:	8818      	ldrh	r0, [r3, #0]
 8001fe6:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <DrawQueuePage+0x1a4>)
 8001fe8:	8859      	ldrh	r1, [r3, #2]
 8001fea:	4b16      	ldr	r3, [pc, #88]	@ (8002044 <DrawQueuePage+0x1a4>)
 8001fec:	889a      	ldrh	r2, [r3, #4]
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <DrawQueuePage+0x1a4>)
 8001ff0:	88db      	ldrh	r3, [r3, #6]
 8001ff2:	f002 fd33 	bl	8004a5c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffa:	f002 fbb9 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001ffe:	480b      	ldr	r0, [pc, #44]	@ (800202c <DrawQueuePage+0x18c>)
 8002000:	f002 fbce 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8002004:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <DrawQueuePage+0x1a4>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	330a      	adds	r3, #10
 800200a:	b298      	uxth	r0, r3
 800200c:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <DrawQueuePage+0x1a4>)
 800200e:	885b      	ldrh	r3, [r3, #2]
 8002010:	330a      	adds	r3, #10
 8002012:	b299      	uxth	r1, r3
 8002014:	2303      	movs	r3, #3
 8002016:	4a0c      	ldr	r2, [pc, #48]	@ (8002048 <DrawQueuePage+0x1a8>)
 8002018:	f002 fc62 	bl	80048e0 <BSP_LCD_DisplayStringAt>
			(uint8_t*) backButton.label, LEFT_MODE);
}
 800201c:	bf00      	nop
 800201e:	3738      	adds	r7, #56	@ 0x38
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	08012d64 	.word	0x08012d64
 8002028:	20000254 	.word	0x20000254
 800202c:	ffff0000 	.word	0xffff0000
 8002030:	2000025c 	.word	0x2000025c
 8002034:	08012d74 	.word	0x08012d74
 8002038:	20000610 	.word	0x20000610
 800203c:	20000104 	.word	0x20000104
 8002040:	2000010c 	.word	0x2000010c
 8002044:	200000ac 	.word	0x200000ac
 8002048:	200000b4 	.word	0x200000b4

0800204c <DrawConfirmationPage>:

void DrawConfirmationPage(uint32_t sector, uint32_t offset) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002056:	f04f 30ff 	mov.w	r0, #4294967295
 800205a:	f002 fbd5 	bl	8004808 <BSP_LCD_Clear>

	//display confirmation text
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800205e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8002062:	f002 fb85 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002066:	f04f 30ff 	mov.w	r0, #4294967295
 800206a:	f002 fb99 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) "Confirm Delete:", LEFT_MODE);
 800206e:	2303      	movs	r3, #3
 8002070:	4a2e      	ldr	r2, [pc, #184]	@ (800212c <DrawConfirmationPage+0xe0>)
 8002072:	210a      	movs	r1, #10
 8002074:	200a      	movs	r0, #10
 8002076:	f002 fc33 	bl	80048e0 <BSP_LCD_DisplayStringAt>

	//Display protocol name for deletion
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800207a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800207e:	f002 fb77 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002082:	f04f 30ff 	mov.w	r0, #4294967295
 8002086:	f002 fb8b 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 30, (uint8_t*) buttons[offset].label,
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	222a      	movs	r2, #42	@ 0x2a
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	3308      	adds	r3, #8
 8002094:	4a26      	ldr	r2, [pc, #152]	@ (8002130 <DrawConfirmationPage+0xe4>)
 8002096:	441a      	add	r2, r3
 8002098:	2301      	movs	r3, #1
 800209a:	211e      	movs	r1, #30
 800209c:	200a      	movs	r0, #10
 800209e:	f002 fc1f 	bl	80048e0 <BSP_LCD_DisplayStringAt>
			CENTER_MODE);

	//Draw "Confirm" button
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80020a2:	4824      	ldr	r0, [pc, #144]	@ (8002134 <DrawConfirmationPage+0xe8>)
 80020a4:	f002 fb64 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(confirmButton.x, confirmButton.y, confirmButton.w,
 80020a8:	4b23      	ldr	r3, [pc, #140]	@ (8002138 <DrawConfirmationPage+0xec>)
 80020aa:	8818      	ldrh	r0, [r3, #0]
 80020ac:	4b22      	ldr	r3, [pc, #136]	@ (8002138 <DrawConfirmationPage+0xec>)
 80020ae:	8859      	ldrh	r1, [r3, #2]
 80020b0:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <DrawConfirmationPage+0xec>)
 80020b2:	889a      	ldrh	r2, [r3, #4]
 80020b4:	4b20      	ldr	r3, [pc, #128]	@ (8002138 <DrawConfirmationPage+0xec>)
 80020b6:	88db      	ldrh	r3, [r3, #6]
 80020b8:	f002 fcd0 	bl	8004a5c <BSP_LCD_FillRect>
			confirmButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f002 fb56 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80020c4:	481b      	ldr	r0, [pc, #108]	@ (8002134 <DrawConfirmationPage+0xe8>)
 80020c6:	f002 fb6b 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(confirmButton.x + 10, confirmButton.y + 10,
 80020ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <DrawConfirmationPage+0xec>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	330a      	adds	r3, #10
 80020d0:	b298      	uxth	r0, r3
 80020d2:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <DrawConfirmationPage+0xec>)
 80020d4:	885b      	ldrh	r3, [r3, #2]
 80020d6:	330a      	adds	r3, #10
 80020d8:	b299      	uxth	r1, r3
 80020da:	2303      	movs	r3, #3
 80020dc:	4a17      	ldr	r2, [pc, #92]	@ (800213c <DrawConfirmationPage+0xf0>)
 80020de:	f002 fbff 	bl	80048e0 <BSP_LCD_DisplayStringAt>
			(uint8_t*) confirmButton.label, LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80020e2:	4817      	ldr	r0, [pc, #92]	@ (8002140 <DrawConfirmationPage+0xf4>)
 80020e4:	f002 fb44 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 80020e8:	4b16      	ldr	r3, [pc, #88]	@ (8002144 <DrawConfirmationPage+0xf8>)
 80020ea:	8818      	ldrh	r0, [r3, #0]
 80020ec:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <DrawConfirmationPage+0xf8>)
 80020ee:	8859      	ldrh	r1, [r3, #2]
 80020f0:	4b14      	ldr	r3, [pc, #80]	@ (8002144 <DrawConfirmationPage+0xf8>)
 80020f2:	889a      	ldrh	r2, [r3, #4]
 80020f4:	4b13      	ldr	r3, [pc, #76]	@ (8002144 <DrawConfirmationPage+0xf8>)
 80020f6:	88db      	ldrh	r3, [r3, #6]
 80020f8:	f002 fcb0 	bl	8004a5c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f002 fb36 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8002104:	480e      	ldr	r0, [pc, #56]	@ (8002140 <DrawConfirmationPage+0xf4>)
 8002106:	f002 fb4b 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 800210a:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <DrawConfirmationPage+0xf8>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	330a      	adds	r3, #10
 8002110:	b298      	uxth	r0, r3
 8002112:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <DrawConfirmationPage+0xf8>)
 8002114:	885b      	ldrh	r3, [r3, #2]
 8002116:	330a      	adds	r3, #10
 8002118:	b299      	uxth	r1, r3
 800211a:	2303      	movs	r3, #3
 800211c:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <DrawConfirmationPage+0xfc>)
 800211e:	f002 fbdf 	bl	80048e0 <BSP_LCD_DisplayStringAt>
			(uint8_t*) backButton.label, LEFT_MODE);
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	08012d7c 	.word	0x08012d7c
 8002130:	20000000 	.word	0x20000000
 8002134:	ff0000ff 	.word	0xff0000ff
 8002138:	20000130 	.word	0x20000130
 800213c:	20000138 	.word	0x20000138
 8002140:	ffff0000 	.word	0xffff0000
 8002144:	200000ac 	.word	0x200000ac
 8002148:	200000b4 	.word	0x200000b4

0800214c <DrawPageFinish>:

void DrawPageFinish() {
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f002 fb58 	bl	8004808 <BSP_LCD_Clear>

	//Draw "Success!" box
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002158:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800215c:	f002 fb08 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8002160:	4818      	ldr	r0, [pc, #96]	@ (80021c4 <DrawPageFinish+0x78>)
 8002162:	f002 fb1d 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(selectButton.x + 10, selectButton.y + 10,
 8002166:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <DrawPageFinish+0x7c>)
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	330a      	adds	r3, #10
 800216c:	b298      	uxth	r0, r3
 800216e:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <DrawPageFinish+0x7c>)
 8002170:	885b      	ldrh	r3, [r3, #2]
 8002172:	330a      	adds	r3, #10
 8002174:	b299      	uxth	r1, r3
 8002176:	2303      	movs	r3, #3
 8002178:	4a14      	ldr	r2, [pc, #80]	@ (80021cc <DrawPageFinish+0x80>)
 800217a:	f002 fbb1 	bl	80048e0 <BSP_LCD_DisplayStringAt>
			(uint8_t*) "Success!", LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800217e:	4811      	ldr	r0, [pc, #68]	@ (80021c4 <DrawPageFinish+0x78>)
 8002180:	f002 faf6 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <DrawPageFinish+0x84>)
 8002186:	8818      	ldrh	r0, [r3, #0]
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <DrawPageFinish+0x84>)
 800218a:	8859      	ldrh	r1, [r3, #2]
 800218c:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <DrawPageFinish+0x84>)
 800218e:	889a      	ldrh	r2, [r3, #4]
 8002190:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <DrawPageFinish+0x84>)
 8002192:	88db      	ldrh	r3, [r3, #6]
 8002194:	f002 fc62 	bl	8004a5c <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f002 fae8 	bl	8004770 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80021a0:	4808      	ldr	r0, [pc, #32]	@ (80021c4 <DrawPageFinish+0x78>)
 80021a2:	f002 fafd 	bl	80047a0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <DrawPageFinish+0x84>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	330a      	adds	r3, #10
 80021ac:	b298      	uxth	r0, r3
 80021ae:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <DrawPageFinish+0x84>)
 80021b0:	885b      	ldrh	r3, [r3, #2]
 80021b2:	330a      	adds	r3, #10
 80021b4:	b299      	uxth	r1, r3
 80021b6:	2303      	movs	r3, #3
 80021b8:	4a06      	ldr	r2, [pc, #24]	@ (80021d4 <DrawPageFinish+0x88>)
 80021ba:	f002 fb91 	bl	80048e0 <BSP_LCD_DisplayStringAt>
			(uint8_t*) "Done", LEFT_MODE);
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	ffff0000 	.word	0xffff0000
 80021c8:	20000188 	.word	0x20000188
 80021cc:	08012d8c 	.word	0x08012d8c
 80021d0:	200000ac 	.word	0x200000ac
 80021d4:	08012d98 	.word	0x08012d98

080021d8 <HandleTouch>:

//fix this function and give it a description
uint8_t HandleTouch(void) {
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
	//store the coordinates of the user touch in "TS_State"
	BSP_TS_GetState(&TS_State);
 80021de:	489e      	ldr	r0, [pc, #632]	@ (8002458 <HandleTouch+0x280>)
 80021e0:	f003 f888 	bl	80052f4 <BSP_TS_GetState>
	//do nothing if no touch detect
	if (!TS_State.TouchDetected) {
 80021e4:	4b9c      	ldr	r3, [pc, #624]	@ (8002458 <HandleTouch+0x280>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HandleTouch+0x18>
		return 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e381      	b.n	80028f4 <HandleTouch+0x71c>
	}

	//init variables if a touch is detected
	char Empty_str[20] = "Empty\n"; //strings from flash memory come with newline at end
 80021f0:	4a9a      	ldr	r2, [pc, #616]	@ (800245c <HandleTouch+0x284>)
 80021f2:	463b      	mov	r3, r7
 80021f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021f8:	6018      	str	r0, [r3, #0]
 80021fa:	3304      	adds	r3, #4
 80021fc:	8019      	strh	r1, [r3, #0]
 80021fe:	3302      	adds	r3, #2
 8002200:	0c0a      	lsrs	r2, r1, #16
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	1dfb      	adds	r3, r7, #7
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	731a      	strb	r2, [r3, #12]
	static uint8_t protocol_num;
	static uint8_t protocol_offset = 0;
	//the y value has issues of being flipped and also needing to click below button
	TS_State.Y = (BSP_LCD_GetYSize() - TS_State.Y) - Y_OFFSET;
 8002210:	f002 fa3e 	bl	8004690 <BSP_LCD_GetYSize>
 8002214:	4603      	mov	r3, r0
 8002216:	b29a      	uxth	r2, r3
 8002218:	4b8f      	ldr	r3, [pc, #572]	@ (8002458 <HandleTouch+0x280>)
 800221a:	889b      	ldrh	r3, [r3, #4]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b14      	subs	r3, #20
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b8c      	ldr	r3, [pc, #560]	@ (8002458 <HandleTouch+0x280>)
 8002226:	809a      	strh	r2, [r3, #4]

	//start state machine for touch handling
	switch (currentPage) {
 8002228:	4b8d      	ldr	r3, [pc, #564]	@ (8002460 <HandleTouch+0x288>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b04      	cmp	r3, #4
 800222e:	f200 8361 	bhi.w	80028f4 <HandleTouch+0x71c>
 8002232:	a201      	add	r2, pc, #4	@ (adr r2, 8002238 <HandleTouch+0x60>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	0800224d 	.word	0x0800224d
 800223c:	08002501 	.word	0x08002501
 8002240:	080026dd 	.word	0x080026dd
 8002244:	080027b5 	.word	0x080027b5
 8002248:	08002899 	.word	0x08002899
	case PAGE_MAIN:
		//back button
		if (TS_State.X >= backButton.x
 800224c:	4b82      	ldr	r3, [pc, #520]	@ (8002458 <HandleTouch+0x280>)
 800224e:	885a      	ldrh	r2, [r3, #2]
 8002250:	4b84      	ldr	r3, [pc, #528]	@ (8002464 <HandleTouch+0x28c>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d33c      	bcc.n	80022d2 <HandleTouch+0xfa>
				&& TS_State.X <= (backButton.x + backButton.w)
 8002258:	4b7f      	ldr	r3, [pc, #508]	@ (8002458 <HandleTouch+0x280>)
 800225a:	885b      	ldrh	r3, [r3, #2]
 800225c:	461a      	mov	r2, r3
 800225e:	4b81      	ldr	r3, [pc, #516]	@ (8002464 <HandleTouch+0x28c>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	4619      	mov	r1, r3
 8002264:	4b7f      	ldr	r3, [pc, #508]	@ (8002464 <HandleTouch+0x28c>)
 8002266:	889b      	ldrh	r3, [r3, #4]
 8002268:	440b      	add	r3, r1
 800226a:	429a      	cmp	r2, r3
 800226c:	dc31      	bgt.n	80022d2 <HandleTouch+0xfa>
				&& TS_State.Y >= backButton.y
 800226e:	4b7a      	ldr	r3, [pc, #488]	@ (8002458 <HandleTouch+0x280>)
 8002270:	889a      	ldrh	r2, [r3, #4]
 8002272:	4b7c      	ldr	r3, [pc, #496]	@ (8002464 <HandleTouch+0x28c>)
 8002274:	885b      	ldrh	r3, [r3, #2]
 8002276:	429a      	cmp	r2, r3
 8002278:	d32b      	bcc.n	80022d2 <HandleTouch+0xfa>
				&& TS_State.Y <= (backButton.y + backButton.h)
 800227a:	4b77      	ldr	r3, [pc, #476]	@ (8002458 <HandleTouch+0x280>)
 800227c:	889b      	ldrh	r3, [r3, #4]
 800227e:	461a      	mov	r2, r3
 8002280:	4b78      	ldr	r3, [pc, #480]	@ (8002464 <HandleTouch+0x28c>)
 8002282:	885b      	ldrh	r3, [r3, #2]
 8002284:	4619      	mov	r1, r3
 8002286:	4b77      	ldr	r3, [pc, #476]	@ (8002464 <HandleTouch+0x28c>)
 8002288:	88db      	ldrh	r3, [r3, #6]
 800228a:	440b      	add	r3, r1
 800228c:	429a      	cmp	r2, r3
 800228e:	dc20      	bgt.n	80022d2 <HandleTouch+0xfa>
				&& (pageNum != 1)) {
 8002290:	4b75      	ldr	r3, [pc, #468]	@ (8002468 <HandleTouch+0x290>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d01c      	beq.n	80022d2 <HandleTouch+0xfa>
			pageNum--;
 8002298:	4b73      	ldr	r3, [pc, #460]	@ (8002468 <HandleTouch+0x290>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	3b01      	subs	r3, #1
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b71      	ldr	r3, [pc, #452]	@ (8002468 <HandleTouch+0x290>)
 80022a2:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 80022a4:	4b70      	ldr	r3, [pc, #448]	@ (8002468 <HandleTouch+0x290>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fb71 	bl	8001990 <DrawMainPage>
			if (pageNum == 1) {
 80022ae:	4b6e      	ldr	r3, [pc, #440]	@ (8002468 <HandleTouch+0x290>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d10a      	bne.n	80022cc <HandleTouch+0xf4>
				//next page wont register touch until you let go
				while (TS_State.TouchDetected) {
 80022b6:	e005      	b.n	80022c4 <HandleTouch+0xec>
					BSP_TS_GetState(&TS_State);
 80022b8:	4867      	ldr	r0, [pc, #412]	@ (8002458 <HandleTouch+0x280>)
 80022ba:	f003 f81b 	bl	80052f4 <BSP_TS_GetState>
					if (!TS_State.TouchDetected) {
					}
					HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 80022be:	2014      	movs	r0, #20
 80022c0:	f003 f90c 	bl	80054dc <HAL_Delay>
				while (TS_State.TouchDetected) {
 80022c4:	4b64      	ldr	r3, [pc, #400]	@ (8002458 <HandleTouch+0x280>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f5      	bne.n	80022b8 <HandleTouch+0xe0>
				}
			}
			HAL_Delay(SCREEN_DELAY);
 80022cc:	2032      	movs	r0, #50	@ 0x32
 80022ce:	f003 f905 	bl	80054dc <HAL_Delay>
		}
		//next button
		if (TS_State.X >= nextButton.x
 80022d2:	4b61      	ldr	r3, [pc, #388]	@ (8002458 <HandleTouch+0x280>)
 80022d4:	885a      	ldrh	r2, [r3, #2]
 80022d6:	4b65      	ldr	r3, [pc, #404]	@ (800246c <HandleTouch+0x294>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d32d      	bcc.n	800233a <HandleTouch+0x162>
				&& TS_State.X <= (nextButton.x + nextButton.w)
 80022de:	4b5e      	ldr	r3, [pc, #376]	@ (8002458 <HandleTouch+0x280>)
 80022e0:	885b      	ldrh	r3, [r3, #2]
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b61      	ldr	r3, [pc, #388]	@ (800246c <HandleTouch+0x294>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	4b60      	ldr	r3, [pc, #384]	@ (800246c <HandleTouch+0x294>)
 80022ec:	889b      	ldrh	r3, [r3, #4]
 80022ee:	440b      	add	r3, r1
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dc22      	bgt.n	800233a <HandleTouch+0x162>
				&& TS_State.Y >= nextButton.y
 80022f4:	4b58      	ldr	r3, [pc, #352]	@ (8002458 <HandleTouch+0x280>)
 80022f6:	889a      	ldrh	r2, [r3, #4]
 80022f8:	4b5c      	ldr	r3, [pc, #368]	@ (800246c <HandleTouch+0x294>)
 80022fa:	885b      	ldrh	r3, [r3, #2]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d31c      	bcc.n	800233a <HandleTouch+0x162>
				&& TS_State.Y <= (nextButton.y + nextButton.h)
 8002300:	4b55      	ldr	r3, [pc, #340]	@ (8002458 <HandleTouch+0x280>)
 8002302:	889b      	ldrh	r3, [r3, #4]
 8002304:	461a      	mov	r2, r3
 8002306:	4b59      	ldr	r3, [pc, #356]	@ (800246c <HandleTouch+0x294>)
 8002308:	885b      	ldrh	r3, [r3, #2]
 800230a:	4619      	mov	r1, r3
 800230c:	4b57      	ldr	r3, [pc, #348]	@ (800246c <HandleTouch+0x294>)
 800230e:	88db      	ldrh	r3, [r3, #6]
 8002310:	440b      	add	r3, r1
 8002312:	429a      	cmp	r2, r3
 8002314:	dc11      	bgt.n	800233a <HandleTouch+0x162>
				&& (pageNum != 10)) {
 8002316:	4b54      	ldr	r3, [pc, #336]	@ (8002468 <HandleTouch+0x290>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b0a      	cmp	r3, #10
 800231c:	d00d      	beq.n	800233a <HandleTouch+0x162>
			pageNum++;
 800231e:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <HandleTouch+0x290>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <HandleTouch+0x290>)
 8002328:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 800232a:	4b4f      	ldr	r3, [pc, #316]	@ (8002468 <HandleTouch+0x290>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fb2e 	bl	8001990 <DrawMainPage>
			HAL_Delay(SCREEN_DELAY);
 8002334:	2032      	movs	r0, #50	@ 0x32
 8002336:	f003 f8d1 	bl	80054dc <HAL_Delay>
		}
		//queue button
		if (TS_State.X >= queueButton.x
 800233a:	4b47      	ldr	r3, [pc, #284]	@ (8002458 <HandleTouch+0x280>)
 800233c:	885a      	ldrh	r2, [r3, #2]
 800233e:	4b4c      	ldr	r3, [pc, #304]	@ (8002470 <HandleTouch+0x298>)
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d335      	bcc.n	80023b2 <HandleTouch+0x1da>
				&& TS_State.X <= (queueButton.x + queueButton.w)
 8002346:	4b44      	ldr	r3, [pc, #272]	@ (8002458 <HandleTouch+0x280>)
 8002348:	885b      	ldrh	r3, [r3, #2]
 800234a:	461a      	mov	r2, r3
 800234c:	4b48      	ldr	r3, [pc, #288]	@ (8002470 <HandleTouch+0x298>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	4b47      	ldr	r3, [pc, #284]	@ (8002470 <HandleTouch+0x298>)
 8002354:	889b      	ldrh	r3, [r3, #4]
 8002356:	440b      	add	r3, r1
 8002358:	429a      	cmp	r2, r3
 800235a:	dc2a      	bgt.n	80023b2 <HandleTouch+0x1da>
				&& TS_State.Y >= queueButton.y
 800235c:	4b3e      	ldr	r3, [pc, #248]	@ (8002458 <HandleTouch+0x280>)
 800235e:	889a      	ldrh	r2, [r3, #4]
 8002360:	4b43      	ldr	r3, [pc, #268]	@ (8002470 <HandleTouch+0x298>)
 8002362:	885b      	ldrh	r3, [r3, #2]
 8002364:	429a      	cmp	r2, r3
 8002366:	d324      	bcc.n	80023b2 <HandleTouch+0x1da>
				&& TS_State.Y <= (queueButton.y + queueButton.h)
 8002368:	4b3b      	ldr	r3, [pc, #236]	@ (8002458 <HandleTouch+0x280>)
 800236a:	889b      	ldrh	r3, [r3, #4]
 800236c:	461a      	mov	r2, r3
 800236e:	4b40      	ldr	r3, [pc, #256]	@ (8002470 <HandleTouch+0x298>)
 8002370:	885b      	ldrh	r3, [r3, #2]
 8002372:	4619      	mov	r1, r3
 8002374:	4b3e      	ldr	r3, [pc, #248]	@ (8002470 <HandleTouch+0x298>)
 8002376:	88db      	ldrh	r3, [r3, #6]
 8002378:	440b      	add	r3, r1
 800237a:	429a      	cmp	r2, r3
 800237c:	dc19      	bgt.n	80023b2 <HandleTouch+0x1da>
				&& (pageNum == 1)) {
 800237e:	4b3a      	ldr	r3, [pc, #232]	@ (8002468 <HandleTouch+0x290>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d115      	bne.n	80023b2 <HandleTouch+0x1da>
			DrawQueuePage(queueSize);
 8002386:	4b3b      	ldr	r3, [pc, #236]	@ (8002474 <HandleTouch+0x29c>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fd88 	bl	8001ea0 <DrawQueuePage>
			currentPage = PAGE_QUEUE;
 8002390:	4b33      	ldr	r3, [pc, #204]	@ (8002460 <HandleTouch+0x288>)
 8002392:	2202      	movs	r2, #2
 8002394:	701a      	strb	r2, [r3, #0]
			//next page wont register touch until you let go
			while (TS_State.TouchDetected) {
 8002396:	e005      	b.n	80023a4 <HandleTouch+0x1cc>
				BSP_TS_GetState(&TS_State);
 8002398:	482f      	ldr	r0, [pc, #188]	@ (8002458 <HandleTouch+0x280>)
 800239a:	f002 ffab 	bl	80052f4 <BSP_TS_GetState>
				if (!TS_State.TouchDetected) {
				}
				HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 800239e:	2014      	movs	r0, #20
 80023a0:	f003 f89c 	bl	80054dc <HAL_Delay>
			while (TS_State.TouchDetected) {
 80023a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002458 <HandleTouch+0x280>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f5      	bne.n	8002398 <HandleTouch+0x1c0>
			}
			HAL_Delay(SCREEN_DELAY);
 80023ac:	2032      	movs	r0, #50	@ 0x32
 80023ae:	f003 f895 	bl	80054dc <HAL_Delay>
		}
		//3 protocol buttons
		for (int i = 0; i < NUM_BUTTONS; i++) {
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e09e      	b.n	80024f6 <HandleTouch+0x31e>
			if (TS_State.X >= buttons[i].x
 80023b8:	4b27      	ldr	r3, [pc, #156]	@ (8002458 <HandleTouch+0x280>)
 80023ba:	885a      	ldrh	r2, [r3, #2]
 80023bc:	492e      	ldr	r1, [pc, #184]	@ (8002478 <HandleTouch+0x2a0>)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	202a      	movs	r0, #42	@ 0x2a
 80023c2:	fb00 f303 	mul.w	r3, r0, r3
 80023c6:	440b      	add	r3, r1
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	f0c0 8090 	bcc.w	80024f0 <HandleTouch+0x318>
					&& TS_State.X <= (buttons[i].x + buttons[i].w)
 80023d0:	4b21      	ldr	r3, [pc, #132]	@ (8002458 <HandleTouch+0x280>)
 80023d2:	885b      	ldrh	r3, [r3, #2]
 80023d4:	4618      	mov	r0, r3
 80023d6:	4a28      	ldr	r2, [pc, #160]	@ (8002478 <HandleTouch+0x2a0>)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	212a      	movs	r1, #42	@ 0x2a
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	461c      	mov	r4, r3
 80023e6:	4a24      	ldr	r2, [pc, #144]	@ (8002478 <HandleTouch+0x2a0>)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	212a      	movs	r1, #42	@ 0x2a
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3304      	adds	r3, #4
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	4423      	add	r3, r4
 80023f8:	4298      	cmp	r0, r3
 80023fa:	dc79      	bgt.n	80024f0 <HandleTouch+0x318>
					&& TS_State.Y >= buttons[i].y
 80023fc:	4b16      	ldr	r3, [pc, #88]	@ (8002458 <HandleTouch+0x280>)
 80023fe:	889a      	ldrh	r2, [r3, #4]
 8002400:	491d      	ldr	r1, [pc, #116]	@ (8002478 <HandleTouch+0x2a0>)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	202a      	movs	r0, #42	@ 0x2a
 8002406:	fb00 f303 	mul.w	r3, r0, r3
 800240a:	440b      	add	r3, r1
 800240c:	3302      	adds	r3, #2
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d36d      	bcc.n	80024f0 <HandleTouch+0x318>
					&& TS_State.Y <= (buttons[i].y + buttons[i].h)) {
 8002414:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <HandleTouch+0x280>)
 8002416:	889b      	ldrh	r3, [r3, #4]
 8002418:	4618      	mov	r0, r3
 800241a:	4a17      	ldr	r2, [pc, #92]	@ (8002478 <HandleTouch+0x2a0>)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	212a      	movs	r1, #42	@ 0x2a
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	3302      	adds	r3, #2
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	461c      	mov	r4, r3
 800242c:	4a12      	ldr	r2, [pc, #72]	@ (8002478 <HandleTouch+0x2a0>)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	212a      	movs	r1, #42	@ 0x2a
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	3306      	adds	r3, #6
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	4423      	add	r3, r4
 800243e:	4298      	cmp	r0, r3
 8002440:	dc56      	bgt.n	80024f0 <HandleTouch+0x318>
				//check which button has been pressed
				if (i == 0) {
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d11d      	bne.n	8002484 <HandleTouch+0x2ac>
					protocol_num = 1;
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <HandleTouch+0x2a4>)
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
					protocol_offset = 0;
 800244e:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <HandleTouch+0x2a8>)
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	e029      	b.n	80024aa <HandleTouch+0x2d2>
 8002456:	bf00      	nop
 8002458:	200005f8 	.word	0x200005f8
 800245c:	08012d50 	.word	0x08012d50
 8002460:	20000605 	.word	0x20000605
 8002464:	200000ac 	.word	0x200000ac
 8002468:	200001de 	.word	0x200001de
 800246c:	200000d8 	.word	0x200000d8
 8002470:	20000080 	.word	0x20000080
 8002474:	20008310 	.word	0x20008310
 8002478:	20000000 	.word	0x20000000
 800247c:	20008f98 	.word	0x20008f98
 8002480:	20008f99 	.word	0x20008f99
				} else if (i == 1) {
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d106      	bne.n	8002498 <HandleTouch+0x2c0>
					protocol_num = 1;
 800248a:	4b89      	ldr	r3, [pc, #548]	@ (80026b0 <HandleTouch+0x4d8>)
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
					protocol_offset = 1;
 8002490:	4b88      	ldr	r3, [pc, #544]	@ (80026b4 <HandleTouch+0x4dc>)
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	e008      	b.n	80024aa <HandleTouch+0x2d2>
				} else if (i == 2) {
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d105      	bne.n	80024aa <HandleTouch+0x2d2>
					protocol_num = 1;
 800249e:	4b84      	ldr	r3, [pc, #528]	@ (80026b0 <HandleTouch+0x4d8>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
					protocol_offset = 2;
 80024a4:	4b83      	ldr	r3, [pc, #524]	@ (80026b4 <HandleTouch+0x4dc>)
 80024a6:	2202      	movs	r2, #2
 80024a8:	701a      	strb	r2, [r3, #0]
				}
				//dont draw next page if the button says "Empty"
				if (buttons[i].status == NOT_EMPTY) {
 80024aa:	4a83      	ldr	r2, [pc, #524]	@ (80026b8 <HandleTouch+0x4e0>)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	212a      	movs	r1, #42	@ 0x2a
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	3328      	adds	r3, #40	@ 0x28
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d113      	bne.n	80024e6 <HandleTouch+0x30e>
					currentPage = PAGE_SELECT;
 80024be:	4b7f      	ldr	r3, [pc, #508]	@ (80026bc <HandleTouch+0x4e4>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
					DrawInfoPage(buttons[i].label);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	222a      	movs	r2, #42	@ 0x2a
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	3308      	adds	r3, #8
 80024ce:	4a7a      	ldr	r2, [pc, #488]	@ (80026b8 <HandleTouch+0x4e0>)
 80024d0:	4413      	add	r3, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fc36 	bl	8001d44 <DrawInfoPage>
				}
				//next page wont register touch until you let go
				while (TS_State.TouchDetected) {
 80024d8:	e005      	b.n	80024e6 <HandleTouch+0x30e>
					BSP_TS_GetState(&TS_State);
 80024da:	4879      	ldr	r0, [pc, #484]	@ (80026c0 <HandleTouch+0x4e8>)
 80024dc:	f002 ff0a 	bl	80052f4 <BSP_TS_GetState>
					if (!TS_State.TouchDetected) {
					}
					HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 80024e0:	2014      	movs	r0, #20
 80024e2:	f002 fffb 	bl	80054dc <HAL_Delay>
				while (TS_State.TouchDetected) {
 80024e6:	4b76      	ldr	r3, [pc, #472]	@ (80026c0 <HandleTouch+0x4e8>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f5      	bne.n	80024da <HandleTouch+0x302>
				}
				return;
 80024ee:	e201      	b.n	80028f4 <HandleTouch+0x71c>
		for (int i = 0; i < NUM_BUTTONS; i++) {
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3301      	adds	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	f77f af5d 	ble.w	80023b8 <HandleTouch+0x1e0>
			}
		}
		break;
 80024fe:	e1f9      	b.n	80028f4 <HandleTouch+0x71c>
	case PAGE_SELECT:
		//back button
		if (TS_State.X >= backButton.x
 8002500:	4b6f      	ldr	r3, [pc, #444]	@ (80026c0 <HandleTouch+0x4e8>)
 8002502:	885a      	ldrh	r2, [r3, #2]
 8002504:	4b6f      	ldr	r3, [pc, #444]	@ (80026c4 <HandleTouch+0x4ec>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d323      	bcc.n	8002554 <HandleTouch+0x37c>
				&& TS_State.X <= (backButton.x + backButton.w)
 800250c:	4b6c      	ldr	r3, [pc, #432]	@ (80026c0 <HandleTouch+0x4e8>)
 800250e:	885b      	ldrh	r3, [r3, #2]
 8002510:	461a      	mov	r2, r3
 8002512:	4b6c      	ldr	r3, [pc, #432]	@ (80026c4 <HandleTouch+0x4ec>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	4619      	mov	r1, r3
 8002518:	4b6a      	ldr	r3, [pc, #424]	@ (80026c4 <HandleTouch+0x4ec>)
 800251a:	889b      	ldrh	r3, [r3, #4]
 800251c:	440b      	add	r3, r1
 800251e:	429a      	cmp	r2, r3
 8002520:	dc18      	bgt.n	8002554 <HandleTouch+0x37c>
				&& TS_State.Y >= backButton.y
 8002522:	4b67      	ldr	r3, [pc, #412]	@ (80026c0 <HandleTouch+0x4e8>)
 8002524:	889a      	ldrh	r2, [r3, #4]
 8002526:	4b67      	ldr	r3, [pc, #412]	@ (80026c4 <HandleTouch+0x4ec>)
 8002528:	885b      	ldrh	r3, [r3, #2]
 800252a:	429a      	cmp	r2, r3
 800252c:	d312      	bcc.n	8002554 <HandleTouch+0x37c>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 800252e:	4b64      	ldr	r3, [pc, #400]	@ (80026c0 <HandleTouch+0x4e8>)
 8002530:	889b      	ldrh	r3, [r3, #4]
 8002532:	461a      	mov	r2, r3
 8002534:	4b63      	ldr	r3, [pc, #396]	@ (80026c4 <HandleTouch+0x4ec>)
 8002536:	885b      	ldrh	r3, [r3, #2]
 8002538:	4619      	mov	r1, r3
 800253a:	4b62      	ldr	r3, [pc, #392]	@ (80026c4 <HandleTouch+0x4ec>)
 800253c:	88db      	ldrh	r3, [r3, #6]
 800253e:	440b      	add	r3, r1
 8002540:	429a      	cmp	r2, r3
 8002542:	dc07      	bgt.n	8002554 <HandleTouch+0x37c>
			currentPage = PAGE_MAIN;
 8002544:	4b5d      	ldr	r3, [pc, #372]	@ (80026bc <HandleTouch+0x4e4>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 800254a:	4b5f      	ldr	r3, [pc, #380]	@ (80026c8 <HandleTouch+0x4f0>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fa1e 	bl	8001990 <DrawMainPage>
		}
		//queueSelect button
		if (TS_State.X >= queueSelectButton.x
 8002554:	4b5a      	ldr	r3, [pc, #360]	@ (80026c0 <HandleTouch+0x4e8>)
 8002556:	885a      	ldrh	r2, [r3, #2]
 8002558:	4b5c      	ldr	r3, [pc, #368]	@ (80026cc <HandleTouch+0x4f4>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d339      	bcc.n	80025d4 <HandleTouch+0x3fc>
				&& TS_State.X <= (queueSelectButton.x + queueSelectButton.w)
 8002560:	4b57      	ldr	r3, [pc, #348]	@ (80026c0 <HandleTouch+0x4e8>)
 8002562:	885b      	ldrh	r3, [r3, #2]
 8002564:	461a      	mov	r2, r3
 8002566:	4b59      	ldr	r3, [pc, #356]	@ (80026cc <HandleTouch+0x4f4>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	4b57      	ldr	r3, [pc, #348]	@ (80026cc <HandleTouch+0x4f4>)
 800256e:	889b      	ldrh	r3, [r3, #4]
 8002570:	440b      	add	r3, r1
 8002572:	429a      	cmp	r2, r3
 8002574:	dc2e      	bgt.n	80025d4 <HandleTouch+0x3fc>
				&& TS_State.Y >= queueSelectButton.y
 8002576:	4b52      	ldr	r3, [pc, #328]	@ (80026c0 <HandleTouch+0x4e8>)
 8002578:	889a      	ldrh	r2, [r3, #4]
 800257a:	4b54      	ldr	r3, [pc, #336]	@ (80026cc <HandleTouch+0x4f4>)
 800257c:	885b      	ldrh	r3, [r3, #2]
 800257e:	429a      	cmp	r2, r3
 8002580:	d328      	bcc.n	80025d4 <HandleTouch+0x3fc>
				&& TS_State.Y <= (queueSelectButton.y + queueSelectButton.h)) {
 8002582:	4b4f      	ldr	r3, [pc, #316]	@ (80026c0 <HandleTouch+0x4e8>)
 8002584:	889b      	ldrh	r3, [r3, #4]
 8002586:	461a      	mov	r2, r3
 8002588:	4b50      	ldr	r3, [pc, #320]	@ (80026cc <HandleTouch+0x4f4>)
 800258a:	885b      	ldrh	r3, [r3, #2]
 800258c:	4619      	mov	r1, r3
 800258e:	4b4f      	ldr	r3, [pc, #316]	@ (80026cc <HandleTouch+0x4f4>)
 8002590:	88db      	ldrh	r3, [r3, #6]
 8002592:	440b      	add	r3, r1
 8002594:	429a      	cmp	r2, r3
 8002596:	dc1d      	bgt.n	80025d4 <HandleTouch+0x3fc>
			HAL_Delay(20);
 8002598:	2014      	movs	r0, #20
 800259a:	f002 ff9f 	bl	80054dc <HAL_Delay>
			//store the protocol in queueBuffer
			if (queueSize < MAX_QUEUE_SIZE) {
 800259e:	4b4c      	ldr	r3, [pc, #304]	@ (80026d0 <HandleTouch+0x4f8>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b09      	cmp	r3, #9
 80025a4:	d816      	bhi.n	80025d4 <HandleTouch+0x3fc>
				queueProtocol(pageNum, protocol_offset);
 80025a6:	4b48      	ldr	r3, [pc, #288]	@ (80026c8 <HandleTouch+0x4f0>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b41      	ldr	r3, [pc, #260]	@ (80026b4 <HandleTouch+0x4dc>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	4610      	mov	r0, r2
 80025b4:	f7fe ffb8 	bl	8001528 <queueProtocol>
				queueSize++;
 80025b8:	4b45      	ldr	r3, [pc, #276]	@ (80026d0 <HandleTouch+0x4f8>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	4b43      	ldr	r3, [pc, #268]	@ (80026d0 <HandleTouch+0x4f8>)
 80025c2:	701a      	strb	r2, [r3, #0]
				currentPage = PAGE_QUEUE;
 80025c4:	4b3d      	ldr	r3, [pc, #244]	@ (80026bc <HandleTouch+0x4e4>)
 80025c6:	2202      	movs	r2, #2
 80025c8:	701a      	strb	r2, [r3, #0]
				DrawQueuePage(queueSize);
 80025ca:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <HandleTouch+0x4f8>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fc66 	bl	8001ea0 <DrawQueuePage>
			} else {
				//handle queue buffer being full
			}
		}
		//select button
		if (TS_State.X >= selectButton.x
 80025d4:	4b3a      	ldr	r3, [pc, #232]	@ (80026c0 <HandleTouch+0x4e8>)
 80025d6:	885a      	ldrh	r2, [r3, #2]
 80025d8:	4b3e      	ldr	r3, [pc, #248]	@ (80026d4 <HandleTouch+0x4fc>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d32c      	bcc.n	800263a <HandleTouch+0x462>
				&& TS_State.X <= (selectButton.x + selectButton.w)
 80025e0:	4b37      	ldr	r3, [pc, #220]	@ (80026c0 <HandleTouch+0x4e8>)
 80025e2:	885b      	ldrh	r3, [r3, #2]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b3b      	ldr	r3, [pc, #236]	@ (80026d4 <HandleTouch+0x4fc>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	4619      	mov	r1, r3
 80025ec:	4b39      	ldr	r3, [pc, #228]	@ (80026d4 <HandleTouch+0x4fc>)
 80025ee:	889b      	ldrh	r3, [r3, #4]
 80025f0:	440b      	add	r3, r1
 80025f2:	429a      	cmp	r2, r3
 80025f4:	dc21      	bgt.n	800263a <HandleTouch+0x462>
				&& TS_State.Y >= selectButton.y
 80025f6:	4b32      	ldr	r3, [pc, #200]	@ (80026c0 <HandleTouch+0x4e8>)
 80025f8:	889a      	ldrh	r2, [r3, #4]
 80025fa:	4b36      	ldr	r3, [pc, #216]	@ (80026d4 <HandleTouch+0x4fc>)
 80025fc:	885b      	ldrh	r3, [r3, #2]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d31b      	bcc.n	800263a <HandleTouch+0x462>
				&& TS_State.Y <= (selectButton.y + selectButton.h)) {
 8002602:	4b2f      	ldr	r3, [pc, #188]	@ (80026c0 <HandleTouch+0x4e8>)
 8002604:	889b      	ldrh	r3, [r3, #4]
 8002606:	461a      	mov	r2, r3
 8002608:	4b32      	ldr	r3, [pc, #200]	@ (80026d4 <HandleTouch+0x4fc>)
 800260a:	885b      	ldrh	r3, [r3, #2]
 800260c:	4619      	mov	r1, r3
 800260e:	4b31      	ldr	r3, [pc, #196]	@ (80026d4 <HandleTouch+0x4fc>)
 8002610:	88db      	ldrh	r3, [r3, #6]
 8002612:	440b      	add	r3, r1
 8002614:	429a      	cmp	r2, r3
 8002616:	dc10      	bgt.n	800263a <HandleTouch+0x462>
			HAL_Delay(20);
 8002618:	2014      	movs	r0, #20
 800261a:	f002 ff5f 	bl	80054dc <HAL_Delay>
			//transmit protocol and move to finish page
			transmitProtocol(pageNum, protocol_offset);
 800261e:	4b2a      	ldr	r3, [pc, #168]	@ (80026c8 <HandleTouch+0x4f0>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	4b23      	ldr	r3, [pc, #140]	@ (80026b4 <HandleTouch+0x4dc>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	4610      	mov	r0, r2
 800262c:	f7fe ff18 	bl	8001460 <transmitProtocol>
			currentPage = PAGE_FINISH;
 8002630:	4b22      	ldr	r3, [pc, #136]	@ (80026bc <HandleTouch+0x4e4>)
 8002632:	2204      	movs	r2, #4
 8002634:	701a      	strb	r2, [r3, #0]
			DrawPageFinish();
 8002636:	f7ff fd89 	bl	800214c <DrawPageFinish>
		}
		//delete button
		if (TS_State.X >= deleteButton.x
 800263a:	4b21      	ldr	r3, [pc, #132]	@ (80026c0 <HandleTouch+0x4e8>)
 800263c:	885a      	ldrh	r2, [r3, #2]
 800263e:	4b26      	ldr	r3, [pc, #152]	@ (80026d8 <HandleTouch+0x500>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d32e      	bcc.n	80026a4 <HandleTouch+0x4cc>
				&& TS_State.X <= (deleteButton.x + deleteButton.w)
 8002646:	4b1e      	ldr	r3, [pc, #120]	@ (80026c0 <HandleTouch+0x4e8>)
 8002648:	885b      	ldrh	r3, [r3, #2]
 800264a:	461a      	mov	r2, r3
 800264c:	4b22      	ldr	r3, [pc, #136]	@ (80026d8 <HandleTouch+0x500>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	4b21      	ldr	r3, [pc, #132]	@ (80026d8 <HandleTouch+0x500>)
 8002654:	889b      	ldrh	r3, [r3, #4]
 8002656:	440b      	add	r3, r1
 8002658:	429a      	cmp	r2, r3
 800265a:	dc23      	bgt.n	80026a4 <HandleTouch+0x4cc>
				&& TS_State.Y >= deleteButton.y
 800265c:	4b18      	ldr	r3, [pc, #96]	@ (80026c0 <HandleTouch+0x4e8>)
 800265e:	889a      	ldrh	r2, [r3, #4]
 8002660:	4b1d      	ldr	r3, [pc, #116]	@ (80026d8 <HandleTouch+0x500>)
 8002662:	885b      	ldrh	r3, [r3, #2]
 8002664:	429a      	cmp	r2, r3
 8002666:	d31d      	bcc.n	80026a4 <HandleTouch+0x4cc>
				&& TS_State.Y <= (deleteButton.y + deleteButton.h)) {
 8002668:	4b15      	ldr	r3, [pc, #84]	@ (80026c0 <HandleTouch+0x4e8>)
 800266a:	889b      	ldrh	r3, [r3, #4]
 800266c:	461a      	mov	r2, r3
 800266e:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <HandleTouch+0x500>)
 8002670:	885b      	ldrh	r3, [r3, #2]
 8002672:	4619      	mov	r1, r3
 8002674:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <HandleTouch+0x500>)
 8002676:	88db      	ldrh	r3, [r3, #6]
 8002678:	440b      	add	r3, r1
 800267a:	429a      	cmp	r2, r3
 800267c:	dc12      	bgt.n	80026a4 <HandleTouch+0x4cc>
			//move to delete confirmation page
			currentPage = PAGE_CONFIRMATION;
 800267e:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <HandleTouch+0x4e4>)
 8002680:	2203      	movs	r2, #3
 8002682:	701a      	strb	r2, [r3, #0]
			DrawConfirmationPage(pageNum, protocol_offset);
 8002684:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <HandleTouch+0x4f0>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <HandleTouch+0x4dc>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f7ff fcdb 	bl	800204c <DrawConfirmationPage>
		}
		//next page wont register touch until you let go
		while (TS_State.TouchDetected) {
 8002696:	e005      	b.n	80026a4 <HandleTouch+0x4cc>
			BSP_TS_GetState(&TS_State);
 8002698:	4809      	ldr	r0, [pc, #36]	@ (80026c0 <HandleTouch+0x4e8>)
 800269a:	f002 fe2b 	bl	80052f4 <BSP_TS_GetState>
			if (!TS_State.TouchDetected) {
			}
			HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 800269e:	2014      	movs	r0, #20
 80026a0:	f002 ff1c 	bl	80054dc <HAL_Delay>
		while (TS_State.TouchDetected) {
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HandleTouch+0x4e8>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f5      	bne.n	8002698 <HandleTouch+0x4c0>
		}
		break;
 80026ac:	e122      	b.n	80028f4 <HandleTouch+0x71c>
 80026ae:	bf00      	nop
 80026b0:	20008f98 	.word	0x20008f98
 80026b4:	20008f99 	.word	0x20008f99
 80026b8:	20000000 	.word	0x20000000
 80026bc:	20000605 	.word	0x20000605
 80026c0:	200005f8 	.word	0x200005f8
 80026c4:	200000ac 	.word	0x200000ac
 80026c8:	200001de 	.word	0x200001de
 80026cc:	2000015c 	.word	0x2000015c
 80026d0:	20008310 	.word	0x20008310
 80026d4:	20000188 	.word	0x20000188
 80026d8:	200001b4 	.word	0x200001b4
	case PAGE_QUEUE:
		//back button
		if (TS_State.X >= backButton.x
 80026dc:	4b87      	ldr	r3, [pc, #540]	@ (80028fc <HandleTouch+0x724>)
 80026de:	885a      	ldrh	r2, [r3, #2]
 80026e0:	4b87      	ldr	r3, [pc, #540]	@ (8002900 <HandleTouch+0x728>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d32e      	bcc.n	8002746 <HandleTouch+0x56e>
				&& TS_State.X <= (backButton.x + backButton.w)
 80026e8:	4b84      	ldr	r3, [pc, #528]	@ (80028fc <HandleTouch+0x724>)
 80026ea:	885b      	ldrh	r3, [r3, #2]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b84      	ldr	r3, [pc, #528]	@ (8002900 <HandleTouch+0x728>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	4619      	mov	r1, r3
 80026f4:	4b82      	ldr	r3, [pc, #520]	@ (8002900 <HandleTouch+0x728>)
 80026f6:	889b      	ldrh	r3, [r3, #4]
 80026f8:	440b      	add	r3, r1
 80026fa:	429a      	cmp	r2, r3
 80026fc:	dc23      	bgt.n	8002746 <HandleTouch+0x56e>
				&& TS_State.Y >= backButton.y
 80026fe:	4b7f      	ldr	r3, [pc, #508]	@ (80028fc <HandleTouch+0x724>)
 8002700:	889a      	ldrh	r2, [r3, #4]
 8002702:	4b7f      	ldr	r3, [pc, #508]	@ (8002900 <HandleTouch+0x728>)
 8002704:	885b      	ldrh	r3, [r3, #2]
 8002706:	429a      	cmp	r2, r3
 8002708:	d31d      	bcc.n	8002746 <HandleTouch+0x56e>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 800270a:	4b7c      	ldr	r3, [pc, #496]	@ (80028fc <HandleTouch+0x724>)
 800270c:	889b      	ldrh	r3, [r3, #4]
 800270e:	461a      	mov	r2, r3
 8002710:	4b7b      	ldr	r3, [pc, #492]	@ (8002900 <HandleTouch+0x728>)
 8002712:	885b      	ldrh	r3, [r3, #2]
 8002714:	4619      	mov	r1, r3
 8002716:	4b7a      	ldr	r3, [pc, #488]	@ (8002900 <HandleTouch+0x728>)
 8002718:	88db      	ldrh	r3, [r3, #6]
 800271a:	440b      	add	r3, r1
 800271c:	429a      	cmp	r2, r3
 800271e:	dc12      	bgt.n	8002746 <HandleTouch+0x56e>
			currentPage = PAGE_MAIN;
 8002720:	4b78      	ldr	r3, [pc, #480]	@ (8002904 <HandleTouch+0x72c>)
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8002726:	4b78      	ldr	r3, [pc, #480]	@ (8002908 <HandleTouch+0x730>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff f930 	bl	8001990 <DrawMainPage>
			//next page wont register touch until you let go
			while (TS_State.TouchDetected) {
 8002730:	e005      	b.n	800273e <HandleTouch+0x566>
				BSP_TS_GetState(&TS_State);
 8002732:	4872      	ldr	r0, [pc, #456]	@ (80028fc <HandleTouch+0x724>)
 8002734:	f002 fdde 	bl	80052f4 <BSP_TS_GetState>
				if (!TS_State.TouchDetected) {
				}
				HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8002738:	2014      	movs	r0, #20
 800273a:	f002 fecf 	bl	80054dc <HAL_Delay>
			while (TS_State.TouchDetected) {
 800273e:	4b6f      	ldr	r3, [pc, #444]	@ (80028fc <HandleTouch+0x724>)
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f5      	bne.n	8002732 <HandleTouch+0x55a>
			}
		}
		//run button
		if (TS_State.X >= runButton.x
 8002746:	4b6d      	ldr	r3, [pc, #436]	@ (80028fc <HandleTouch+0x724>)
 8002748:	885a      	ldrh	r2, [r3, #2]
 800274a:	4b70      	ldr	r3, [pc, #448]	@ (800290c <HandleTouch+0x734>)
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	f0c0 80cd 	bcc.w	80028ee <HandleTouch+0x716>
				&& TS_State.X <= (runButton.x + runButton.w)
 8002754:	4b69      	ldr	r3, [pc, #420]	@ (80028fc <HandleTouch+0x724>)
 8002756:	885b      	ldrh	r3, [r3, #2]
 8002758:	461a      	mov	r2, r3
 800275a:	4b6c      	ldr	r3, [pc, #432]	@ (800290c <HandleTouch+0x734>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	4619      	mov	r1, r3
 8002760:	4b6a      	ldr	r3, [pc, #424]	@ (800290c <HandleTouch+0x734>)
 8002762:	889b      	ldrh	r3, [r3, #4]
 8002764:	440b      	add	r3, r1
 8002766:	429a      	cmp	r2, r3
 8002768:	f300 80c1 	bgt.w	80028ee <HandleTouch+0x716>
				&& TS_State.Y >= runButton.y
 800276c:	4b63      	ldr	r3, [pc, #396]	@ (80028fc <HandleTouch+0x724>)
 800276e:	889a      	ldrh	r2, [r3, #4]
 8002770:	4b66      	ldr	r3, [pc, #408]	@ (800290c <HandleTouch+0x734>)
 8002772:	885b      	ldrh	r3, [r3, #2]
 8002774:	429a      	cmp	r2, r3
 8002776:	f0c0 80ba 	bcc.w	80028ee <HandleTouch+0x716>
				&& TS_State.Y <= (runButton.y + runButton.h)) {
 800277a:	4b60      	ldr	r3, [pc, #384]	@ (80028fc <HandleTouch+0x724>)
 800277c:	889b      	ldrh	r3, [r3, #4]
 800277e:	461a      	mov	r2, r3
 8002780:	4b62      	ldr	r3, [pc, #392]	@ (800290c <HandleTouch+0x734>)
 8002782:	885b      	ldrh	r3, [r3, #2]
 8002784:	4619      	mov	r1, r3
 8002786:	4b61      	ldr	r3, [pc, #388]	@ (800290c <HandleTouch+0x734>)
 8002788:	88db      	ldrh	r3, [r3, #6]
 800278a:	440b      	add	r3, r1
 800278c:	429a      	cmp	r2, r3
 800278e:	f300 80ae 	bgt.w	80028ee <HandleTouch+0x716>
			HAL_Delay(20);
 8002792:	2014      	movs	r0, #20
 8002794:	f002 fea2 	bl	80054dc <HAL_Delay>
			//handle queue functionality here dorjee
			transmitQueuedProtocols(queueSize);
 8002798:	4b5d      	ldr	r3, [pc, #372]	@ (8002910 <HandleTouch+0x738>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe ff1d 	bl	80015dc <transmitQueuedProtocols>
			queueSize = 0;
 80027a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002910 <HandleTouch+0x738>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
			currentPage = PAGE_FINISH;
 80027a8:	4b56      	ldr	r3, [pc, #344]	@ (8002904 <HandleTouch+0x72c>)
 80027aa:	2204      	movs	r2, #4
 80027ac:	701a      	strb	r2, [r3, #0]
			DrawPageFinish();
 80027ae:	f7ff fccd 	bl	800214c <DrawPageFinish>
		}
		break;
 80027b2:	e09c      	b.n	80028ee <HandleTouch+0x716>
	case PAGE_CONFIRMATION:
		//back button
		if (TS_State.X >= backButton.x
 80027b4:	4b51      	ldr	r3, [pc, #324]	@ (80028fc <HandleTouch+0x724>)
 80027b6:	885a      	ldrh	r2, [r3, #2]
 80027b8:	4b51      	ldr	r3, [pc, #324]	@ (8002900 <HandleTouch+0x728>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d329      	bcc.n	8002814 <HandleTouch+0x63c>
				&& TS_State.X <= (backButton.x + backButton.w)
 80027c0:	4b4e      	ldr	r3, [pc, #312]	@ (80028fc <HandleTouch+0x724>)
 80027c2:	885b      	ldrh	r3, [r3, #2]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002900 <HandleTouch+0x728>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	4619      	mov	r1, r3
 80027cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002900 <HandleTouch+0x728>)
 80027ce:	889b      	ldrh	r3, [r3, #4]
 80027d0:	440b      	add	r3, r1
 80027d2:	429a      	cmp	r2, r3
 80027d4:	dc1e      	bgt.n	8002814 <HandleTouch+0x63c>
				&& TS_State.Y >= backButton.y
 80027d6:	4b49      	ldr	r3, [pc, #292]	@ (80028fc <HandleTouch+0x724>)
 80027d8:	889a      	ldrh	r2, [r3, #4]
 80027da:	4b49      	ldr	r3, [pc, #292]	@ (8002900 <HandleTouch+0x728>)
 80027dc:	885b      	ldrh	r3, [r3, #2]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d318      	bcc.n	8002814 <HandleTouch+0x63c>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 80027e2:	4b46      	ldr	r3, [pc, #280]	@ (80028fc <HandleTouch+0x724>)
 80027e4:	889b      	ldrh	r3, [r3, #4]
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b45      	ldr	r3, [pc, #276]	@ (8002900 <HandleTouch+0x728>)
 80027ea:	885b      	ldrh	r3, [r3, #2]
 80027ec:	4619      	mov	r1, r3
 80027ee:	4b44      	ldr	r3, [pc, #272]	@ (8002900 <HandleTouch+0x728>)
 80027f0:	88db      	ldrh	r3, [r3, #6]
 80027f2:	440b      	add	r3, r1
 80027f4:	429a      	cmp	r2, r3
 80027f6:	dc0d      	bgt.n	8002814 <HandleTouch+0x63c>
			currentPage = PAGE_SELECT;
 80027f8:	4b42      	ldr	r3, [pc, #264]	@ (8002904 <HandleTouch+0x72c>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
			DrawInfoPage(buttons[i].label);
 80027fe:	4b45      	ldr	r3, [pc, #276]	@ (8002914 <HandleTouch+0x73c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	222a      	movs	r2, #42	@ 0x2a
 8002804:	fb02 f303 	mul.w	r3, r2, r3
 8002808:	3308      	adds	r3, #8
 800280a:	4a43      	ldr	r2, [pc, #268]	@ (8002918 <HandleTouch+0x740>)
 800280c:	4413      	add	r3, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fa98 	bl	8001d44 <DrawInfoPage>
		}
		//confirm button
		if (TS_State.X >= confirmButton.x
 8002814:	4b39      	ldr	r3, [pc, #228]	@ (80028fc <HandleTouch+0x724>)
 8002816:	885a      	ldrh	r2, [r3, #2]
 8002818:	4b40      	ldr	r3, [pc, #256]	@ (800291c <HandleTouch+0x744>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d336      	bcc.n	800288e <HandleTouch+0x6b6>
				&& TS_State.X <= (confirmButton.x + confirmButton.w)
 8002820:	4b36      	ldr	r3, [pc, #216]	@ (80028fc <HandleTouch+0x724>)
 8002822:	885b      	ldrh	r3, [r3, #2]
 8002824:	461a      	mov	r2, r3
 8002826:	4b3d      	ldr	r3, [pc, #244]	@ (800291c <HandleTouch+0x744>)
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	4b3b      	ldr	r3, [pc, #236]	@ (800291c <HandleTouch+0x744>)
 800282e:	889b      	ldrh	r3, [r3, #4]
 8002830:	440b      	add	r3, r1
 8002832:	429a      	cmp	r2, r3
 8002834:	dc2b      	bgt.n	800288e <HandleTouch+0x6b6>
				&& TS_State.Y >= confirmButton.y
 8002836:	4b31      	ldr	r3, [pc, #196]	@ (80028fc <HandleTouch+0x724>)
 8002838:	889a      	ldrh	r2, [r3, #4]
 800283a:	4b38      	ldr	r3, [pc, #224]	@ (800291c <HandleTouch+0x744>)
 800283c:	885b      	ldrh	r3, [r3, #2]
 800283e:	429a      	cmp	r2, r3
 8002840:	d325      	bcc.n	800288e <HandleTouch+0x6b6>
				&& TS_State.Y <= (confirmButton.y + confirmButton.h)) {
 8002842:	4b2e      	ldr	r3, [pc, #184]	@ (80028fc <HandleTouch+0x724>)
 8002844:	889b      	ldrh	r3, [r3, #4]
 8002846:	461a      	mov	r2, r3
 8002848:	4b34      	ldr	r3, [pc, #208]	@ (800291c <HandleTouch+0x744>)
 800284a:	885b      	ldrh	r3, [r3, #2]
 800284c:	4619      	mov	r1, r3
 800284e:	4b33      	ldr	r3, [pc, #204]	@ (800291c <HandleTouch+0x744>)
 8002850:	88db      	ldrh	r3, [r3, #6]
 8002852:	440b      	add	r3, r1
 8002854:	429a      	cmp	r2, r3
 8002856:	dc1a      	bgt.n	800288e <HandleTouch+0x6b6>
			HAL_Delay(20);
 8002858:	2014      	movs	r0, #20
 800285a:	f002 fe3f 	bl	80054dc <HAL_Delay>
			//delete protocol and go back to main page
			deleteProtocol(pageNum, protocol_offset);
 800285e:	4b2a      	ldr	r3, [pc, #168]	@ (8002908 <HandleTouch+0x730>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	4b2e      	ldr	r3, [pc, #184]	@ (8002920 <HandleTouch+0x748>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f7fe fef4 	bl	8001658 <deleteProtocol>
			currentPage = PAGE_MAIN;
 8002870:	4b24      	ldr	r3, [pc, #144]	@ (8002904 <HandleTouch+0x72c>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8002876:	4b24      	ldr	r3, [pc, #144]	@ (8002908 <HandleTouch+0x730>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f888 	bl	8001990 <DrawMainPage>
		}
		//next page wont register touch until you let go
		while (TS_State.TouchDetected) {
 8002880:	e005      	b.n	800288e <HandleTouch+0x6b6>
			BSP_TS_GetState(&TS_State);
 8002882:	481e      	ldr	r0, [pc, #120]	@ (80028fc <HandleTouch+0x724>)
 8002884:	f002 fd36 	bl	80052f4 <BSP_TS_GetState>
			if (!TS_State.TouchDetected) {
			}
			HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8002888:	2014      	movs	r0, #20
 800288a:	f002 fe27 	bl	80054dc <HAL_Delay>
		while (TS_State.TouchDetected) {
 800288e:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <HandleTouch+0x724>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f5      	bne.n	8002882 <HandleTouch+0x6aa>
		}
		break;
 8002896:	e02d      	b.n	80028f4 <HandleTouch+0x71c>
	case PAGE_FINISH:
		if (TS_State.X >= backButton.x
 8002898:	4b18      	ldr	r3, [pc, #96]	@ (80028fc <HandleTouch+0x724>)
 800289a:	885a      	ldrh	r2, [r3, #2]
 800289c:	4b18      	ldr	r3, [pc, #96]	@ (8002900 <HandleTouch+0x728>)
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d326      	bcc.n	80028f2 <HandleTouch+0x71a>
				&& TS_State.X <= (backButton.x + backButton.w)
 80028a4:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <HandleTouch+0x724>)
 80028a6:	885b      	ldrh	r3, [r3, #2]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <HandleTouch+0x728>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	4619      	mov	r1, r3
 80028b0:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <HandleTouch+0x728>)
 80028b2:	889b      	ldrh	r3, [r3, #4]
 80028b4:	440b      	add	r3, r1
 80028b6:	429a      	cmp	r2, r3
 80028b8:	dc1b      	bgt.n	80028f2 <HandleTouch+0x71a>
				&& TS_State.Y >= backButton.y
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <HandleTouch+0x724>)
 80028bc:	889a      	ldrh	r2, [r3, #4]
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <HandleTouch+0x728>)
 80028c0:	885b      	ldrh	r3, [r3, #2]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d315      	bcc.n	80028f2 <HandleTouch+0x71a>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 80028c6:	4b0d      	ldr	r3, [pc, #52]	@ (80028fc <HandleTouch+0x724>)
 80028c8:	889b      	ldrh	r3, [r3, #4]
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <HandleTouch+0x728>)
 80028ce:	885b      	ldrh	r3, [r3, #2]
 80028d0:	4619      	mov	r1, r3
 80028d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HandleTouch+0x728>)
 80028d4:	88db      	ldrh	r3, [r3, #6]
 80028d6:	440b      	add	r3, r1
 80028d8:	429a      	cmp	r2, r3
 80028da:	dc0a      	bgt.n	80028f2 <HandleTouch+0x71a>
			currentPage = PAGE_MAIN;
 80028dc:	4b09      	ldr	r3, [pc, #36]	@ (8002904 <HandleTouch+0x72c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 80028e2:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <HandleTouch+0x730>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff f852 	bl	8001990 <DrawMainPage>
		}
		break;
 80028ec:	e001      	b.n	80028f2 <HandleTouch+0x71a>
		break;
 80028ee:	bf00      	nop
 80028f0:	e000      	b.n	80028f4 <HandleTouch+0x71c>
		break;
 80028f2:	bf00      	nop
	}
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd90      	pop	{r4, r7, pc}
 80028fc:	200005f8 	.word	0x200005f8
 8002900:	200000ac 	.word	0x200000ac
 8002904:	20000605 	.word	0x20000605
 8002908:	200001de 	.word	0x200001de
 800290c:	20000104 	.word	0x20000104
 8002910:	20008310 	.word	0x20008310
 8002914:	20000608 	.word	0x20000608
 8002918:	20000000 	.word	0x20000000
 800291c:	20000130 	.word	0x20000130
 8002920:	20008f99 	.word	0x20008f99

08002924 <get_sector_address>:

//I name sectors from 1-14. the actual sectors are from 5-23. this functions maps them
uint32_t get_sector_address(uint32_t sector) {
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	switch (sector) {
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	2b0d      	cmp	r3, #13
 8002932:	d83b      	bhi.n	80029ac <get_sector_address+0x88>
 8002934:	a201      	add	r2, pc, #4	@ (adr r2, 800293c <get_sector_address+0x18>)
 8002936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293a:	bf00      	nop
 800293c:	08002975 	.word	0x08002975
 8002940:	08002979 	.word	0x08002979
 8002944:	0800297d 	.word	0x0800297d
 8002948:	08002981 	.word	0x08002981
 800294c:	08002985 	.word	0x08002985
 8002950:	08002989 	.word	0x08002989
 8002954:	0800298d 	.word	0x0800298d
 8002958:	08002991 	.word	0x08002991
 800295c:	08002995 	.word	0x08002995
 8002960:	08002999 	.word	0x08002999
 8002964:	0800299d 	.word	0x0800299d
 8002968:	080029a1 	.word	0x080029a1
 800296c:	080029a5 	.word	0x080029a5
 8002970:	080029a9 	.word	0x080029a9
	case 1:
		return SECTOR_5;
 8002974:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <get_sector_address+0x98>)
 8002976:	e01a      	b.n	80029ae <get_sector_address+0x8a>
	case 2:
		return SECTOR_6;
 8002978:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <get_sector_address+0x9c>)
 800297a:	e018      	b.n	80029ae <get_sector_address+0x8a>
	case 3:
		return SECTOR_7;
 800297c:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <get_sector_address+0xa0>)
 800297e:	e016      	b.n	80029ae <get_sector_address+0x8a>
	case 4:
		return SECTOR_8;
 8002980:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <get_sector_address+0xa4>)
 8002982:	e014      	b.n	80029ae <get_sector_address+0x8a>
	case 5:
		return SECTOR_9;
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <get_sector_address+0xa8>)
 8002986:	e012      	b.n	80029ae <get_sector_address+0x8a>
	case 6:
		return SECTOR_10;
 8002988:	4b11      	ldr	r3, [pc, #68]	@ (80029d0 <get_sector_address+0xac>)
 800298a:	e010      	b.n	80029ae <get_sector_address+0x8a>
	case 7:
		return SECTOR_11;
 800298c:	4b11      	ldr	r3, [pc, #68]	@ (80029d4 <get_sector_address+0xb0>)
 800298e:	e00e      	b.n	80029ae <get_sector_address+0x8a>
	case 8:
		return SECTOR_17;
 8002990:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <get_sector_address+0xb4>)
 8002992:	e00c      	b.n	80029ae <get_sector_address+0x8a>
	case 9:
		return SECTOR_18;
 8002994:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <get_sector_address+0xb8>)
 8002996:	e00a      	b.n	80029ae <get_sector_address+0x8a>
	case 10:
		return SECTOR_19;
 8002998:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <get_sector_address+0xbc>)
 800299a:	e008      	b.n	80029ae <get_sector_address+0x8a>
	case 11:
		return SECTOR_20;
 800299c:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <get_sector_address+0xc0>)
 800299e:	e006      	b.n	80029ae <get_sector_address+0x8a>
	case 12:
		return SECTOR_21;
 80029a0:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <get_sector_address+0xc4>)
 80029a2:	e004      	b.n	80029ae <get_sector_address+0x8a>
	case 13:
		return SECTOR_22;
 80029a4:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <get_sector_address+0xc8>)
 80029a6:	e002      	b.n	80029ae <get_sector_address+0x8a>
	case 14:
		return SECTOR_23;
 80029a8:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <get_sector_address+0xcc>)
 80029aa:	e000      	b.n	80029ae <get_sector_address+0x8a>
	default:
		break;
 80029ac:	bf00      	nop
	}
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	08020000 	.word	0x08020000
 80029c0:	08040000 	.word	0x08040000
 80029c4:	08060000 	.word	0x08060000
 80029c8:	08080000 	.word	0x08080000
 80029cc:	080a0000 	.word	0x080a0000
 80029d0:	080c0000 	.word	0x080c0000
 80029d4:	080e0000 	.word	0x080e0000
 80029d8:	08120000 	.word	0x08120000
 80029dc:	08140000 	.word	0x08140000
 80029e0:	08160000 	.word	0x08160000
 80029e4:	08180000 	.word	0x08180000
 80029e8:	081a0000 	.word	0x081a0000
 80029ec:	081c0000 	.word	0x081c0000
 80029f0:	081e0000 	.word	0x081e0000

080029f4 <sector_mapping>:

uint32_t sector_mapping(uint32_t sector) {
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
	switch (sector) {
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	2b0d      	cmp	r3, #13
 8002a02:	d83b      	bhi.n	8002a7c <sector_mapping+0x88>
 8002a04:	a201      	add	r2, pc, #4	@ (adr r2, 8002a0c <sector_mapping+0x18>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a45 	.word	0x08002a45
 8002a10:	08002a49 	.word	0x08002a49
 8002a14:	08002a4d 	.word	0x08002a4d
 8002a18:	08002a51 	.word	0x08002a51
 8002a1c:	08002a55 	.word	0x08002a55
 8002a20:	08002a59 	.word	0x08002a59
 8002a24:	08002a5d 	.word	0x08002a5d
 8002a28:	08002a61 	.word	0x08002a61
 8002a2c:	08002a65 	.word	0x08002a65
 8002a30:	08002a69 	.word	0x08002a69
 8002a34:	08002a6d 	.word	0x08002a6d
 8002a38:	08002a71 	.word	0x08002a71
 8002a3c:	08002a75 	.word	0x08002a75
 8002a40:	08002a79 	.word	0x08002a79
	case 1:
		return 5;
 8002a44:	2305      	movs	r3, #5
 8002a46:	e019      	b.n	8002a7c <sector_mapping+0x88>
	case 2:
		return 6;
 8002a48:	2306      	movs	r3, #6
 8002a4a:	e017      	b.n	8002a7c <sector_mapping+0x88>
	case 3:
		return 7;
 8002a4c:	2307      	movs	r3, #7
 8002a4e:	e015      	b.n	8002a7c <sector_mapping+0x88>
	case 4:
		return 8;
 8002a50:	2308      	movs	r3, #8
 8002a52:	e013      	b.n	8002a7c <sector_mapping+0x88>
	case 5:
		return 9;
 8002a54:	2309      	movs	r3, #9
 8002a56:	e011      	b.n	8002a7c <sector_mapping+0x88>
	case 6:
		return 10;
 8002a58:	230a      	movs	r3, #10
 8002a5a:	e00f      	b.n	8002a7c <sector_mapping+0x88>
	case 7:
		return 11;
 8002a5c:	230b      	movs	r3, #11
 8002a5e:	e00d      	b.n	8002a7c <sector_mapping+0x88>
	case 8:
		return 17;
 8002a60:	2311      	movs	r3, #17
 8002a62:	e00b      	b.n	8002a7c <sector_mapping+0x88>
	case 9:
		return 18;
 8002a64:	2312      	movs	r3, #18
 8002a66:	e009      	b.n	8002a7c <sector_mapping+0x88>
	case 10:
		return 19;
 8002a68:	2313      	movs	r3, #19
 8002a6a:	e007      	b.n	8002a7c <sector_mapping+0x88>
	case 11:
		return 20;
 8002a6c:	2314      	movs	r3, #20
 8002a6e:	e005      	b.n	8002a7c <sector_mapping+0x88>
	case 12:
		return 21;
 8002a70:	2315      	movs	r3, #21
 8002a72:	e003      	b.n	8002a7c <sector_mapping+0x88>
	case 13:
		return 22;
 8002a74:	2316      	movs	r3, #22
 8002a76:	e001      	b.n	8002a7c <sector_mapping+0x88>
	case 14:
		return 23;
 8002a78:	2317      	movs	r3, #23
 8002a7a:	e7ff      	b.n	8002a7c <sector_mapping+0x88>
	}
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002a9a:	f002 fcff 	bl	800549c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	//10 hz interrupt
	if (htim == &htim10) {
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d10b      	bne.n	8002abe <HAL_TIM_PeriodElapsedCallback+0x36>
		if (!USB_BUSY) {
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002adc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <HAL_TIM_PeriodElapsedCallback+0x2c>
			checkTouchFlag = 1;
 8002aae:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
		}
		count++;
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002abc:	6013      	str	r3, [r2, #0]
	}

	//use this for a slower frequency application
	if (count == 5) {
 8002abe:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d102      	bne.n	8002acc <HAL_TIM_PeriodElapsedCallback+0x44>
		//checkTouchFlag = 1;
		count = 0;
 8002ac6:	4b07      	ldr	r3, [pc, #28]	@ (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
	}
	/* USER CODE END Callback 1 */
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40001000 	.word	0x40001000
 8002ad8:	200004ec 	.word	0x200004ec
 8002adc:	20008311 	.word	0x20008311
 8002ae0:	20000604 	.word	0x20000604
 8002ae4:	20000600 	.word	0x20000600

08002ae8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002aec:	b672      	cpsid	i
}
 8002aee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002af0:	bf00      	nop
 8002af2:	e7fd      	b.n	8002af0 <Error_Handler+0x8>

08002af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <HAL_MspInit+0x4c>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	4a0f      	ldr	r2, [pc, #60]	@ (8002b40 <HAL_MspInit+0x4c>)
 8002b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <HAL_MspInit+0x4c>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	603b      	str	r3, [r7, #0]
 8002b1a:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <HAL_MspInit+0x4c>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	4a08      	ldr	r2, [pc, #32]	@ (8002b40 <HAL_MspInit+0x4c>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b26:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_MspInit+0x4c>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800

08002b44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0b      	ldr	r2, [pc, #44]	@ (8002b80 <HAL_CRC_MspInit+0x3c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d10d      	bne.n	8002b72 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <HAL_CRC_MspInit+0x40>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	4a09      	ldr	r2, [pc, #36]	@ (8002b84 <HAL_CRC_MspInit+0x40>)
 8002b60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b66:	4b07      	ldr	r3, [pc, #28]	@ (8002b84 <HAL_CRC_MspInit+0x40>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023000 	.word	0x40023000
 8002b84:	40023800 	.word	0x40023800

08002b88 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0e      	ldr	r2, [pc, #56]	@ (8002bd0 <HAL_DMA2D_MspInit+0x48>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d115      	bne.n	8002bc6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd4 <HAL_DMA2D_MspInit+0x4c>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd4 <HAL_DMA2D_MspInit+0x4c>)
 8002ba4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002baa:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <HAL_DMA2D_MspInit+0x4c>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2105      	movs	r1, #5
 8002bba:	205a      	movs	r0, #90	@ 0x5a
 8002bbc:	f002 fd6a 	bl	8005694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002bc0:	205a      	movs	r0, #90	@ 0x5a
 8002bc2:	f002 fd83 	bl	80056cc <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	4002b000 	.word	0x4002b000
 8002bd4:	40023800 	.word	0x40023800

08002bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	@ 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a29      	ldr	r2, [pc, #164]	@ (8002c9c <HAL_I2C_MspInit+0xc4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d14b      	bne.n	8002c92 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	4b28      	ldr	r3, [pc, #160]	@ (8002ca0 <HAL_I2C_MspInit+0xc8>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	4a27      	ldr	r2, [pc, #156]	@ (8002ca0 <HAL_I2C_MspInit+0xc8>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0a:	4b25      	ldr	r3, [pc, #148]	@ (8002ca0 <HAL_I2C_MspInit+0xc8>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b21      	ldr	r3, [pc, #132]	@ (8002ca0 <HAL_I2C_MspInit+0xc8>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	4a20      	ldr	r2, [pc, #128]	@ (8002ca0 <HAL_I2C_MspInit+0xc8>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca0 <HAL_I2C_MspInit+0xc8>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c38:	2312      	movs	r3, #18
 8002c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c40:	2300      	movs	r3, #0
 8002c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c44:	2304      	movs	r3, #4
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4815      	ldr	r0, [pc, #84]	@ (8002ca4 <HAL_I2C_MspInit+0xcc>)
 8002c50:	f003 fcd4 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002c54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c5a:	2312      	movs	r3, #18
 8002c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	2300      	movs	r3, #0
 8002c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c66:	2304      	movs	r3, #4
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	4619      	mov	r1, r3
 8002c70:	480d      	ldr	r0, [pc, #52]	@ (8002ca8 <HAL_I2C_MspInit+0xd0>)
 8002c72:	f003 fcc3 	bl	80065fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <HAL_I2C_MspInit+0xc8>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ca0 <HAL_I2C_MspInit+0xc8>)
 8002c80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <HAL_I2C_MspInit+0xc8>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002c92:	bf00      	nop
 8002c94:	3728      	adds	r7, #40	@ 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40005c00 	.word	0x40005c00
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40020800 	.word	0x40020800
 8002ca8:	40020000 	.word	0x40020000

08002cac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ce8 <HAL_I2C_MspDeInit+0x3c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10f      	bne.n	8002cde <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <HAL_I2C_MspDeInit+0x40>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002cec <HAL_I2C_MspDeInit+0x40>)
 8002cc4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002cc8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8002cca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002cce:	4808      	ldr	r0, [pc, #32]	@ (8002cf0 <HAL_I2C_MspDeInit+0x44>)
 8002cd0:	f003 fe40 	bl	8006954 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8002cd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002cd8:	4806      	ldr	r0, [pc, #24]	@ (8002cf4 <HAL_I2C_MspDeInit+0x48>)
 8002cda:	f003 fe3b 	bl	8006954 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40005c00 	.word	0x40005c00
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40020800 	.word	0x40020800
 8002cf4:	40020000 	.word	0x40020000

08002cf8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b09a      	sub	sp, #104	@ 0x68
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d14:	2230      	movs	r2, #48	@ 0x30
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f00f f8f7 	bl	8011f0c <memset>
  if(hltdc->Instance==LTDC)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a85      	ldr	r2, [pc, #532]	@ (8002f38 <HAL_LTDC_MspInit+0x240>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	f040 8103 	bne.w	8002f30 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002d2e:	23c0      	movs	r3, #192	@ 0xc0
 8002d30:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002d32:	2304      	movs	r3, #4
 8002d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002d36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d40:	4618      	mov	r0, r3
 8002d42:	f008 f99b 	bl	800b07c <HAL_RCCEx_PeriphCLKConfig>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002d4c:	f7ff fecc 	bl	8002ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
 8002d54:	4b79      	ldr	r3, [pc, #484]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d58:	4a78      	ldr	r2, [pc, #480]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002d5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d60:	4b76      	ldr	r3, [pc, #472]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d68:	623b      	str	r3, [r7, #32]
 8002d6a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	4b72      	ldr	r3, [pc, #456]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	4a71      	ldr	r2, [pc, #452]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002d76:	f043 0320 	orr.w	r3, r3, #32
 8002d7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	4b6b      	ldr	r3, [pc, #428]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d90:	4a6a      	ldr	r2, [pc, #424]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d98:	4b68      	ldr	r3, [pc, #416]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	4b64      	ldr	r3, [pc, #400]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	4a63      	ldr	r2, [pc, #396]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002dae:	f043 0302 	orr.w	r3, r3, #2
 8002db2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db4:	4b61      	ldr	r3, [pc, #388]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	4b5d      	ldr	r3, [pc, #372]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc8:	4a5c      	ldr	r2, [pc, #368]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002dca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	4b56      	ldr	r3, [pc, #344]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	4a55      	ldr	r2, [pc, #340]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002de6:	f043 0304 	orr.w	r3, r3, #4
 8002dea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dec:	4b53      	ldr	r3, [pc, #332]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	4a4e      	ldr	r2, [pc, #312]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002e02:	f043 0308 	orr.w	r3, r3, #8
 8002e06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e08:	4b4c      	ldr	r3, [pc, #304]	@ (8002f3c <HAL_LTDC_MspInit+0x244>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e18:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	2300      	movs	r3, #0
 8002e24:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e26:	230e      	movs	r3, #14
 8002e28:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002e2a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4843      	ldr	r0, [pc, #268]	@ (8002f40 <HAL_LTDC_MspInit+0x248>)
 8002e32:	f003 fbe3 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002e36:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002e3a:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e48:	230e      	movs	r3, #14
 8002e4a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e50:	4619      	mov	r1, r3
 8002e52:	483c      	ldr	r0, [pc, #240]	@ (8002f44 <HAL_LTDC_MspInit+0x24c>)
 8002e54:	f003 fbd2 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e64:	2300      	movs	r3, #0
 8002e66:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e68:	2309      	movs	r3, #9
 8002e6a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e70:	4619      	mov	r1, r3
 8002e72:	4835      	ldr	r0, [pc, #212]	@ (8002f48 <HAL_LTDC_MspInit+0x250>)
 8002e74:	f003 fbc2 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002e78:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002e7c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e86:	2300      	movs	r3, #0
 8002e88:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e8a:	230e      	movs	r3, #14
 8002e8c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e92:	4619      	mov	r1, r3
 8002e94:	482c      	ldr	r0, [pc, #176]	@ (8002f48 <HAL_LTDC_MspInit+0x250>)
 8002e96:	f003 fbb1 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002e9a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002e9e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002eac:	230e      	movs	r3, #14
 8002eae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eb0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4825      	ldr	r0, [pc, #148]	@ (8002f4c <HAL_LTDC_MspInit+0x254>)
 8002eb8:	f003 fba0 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002ebc:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002ec0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ece:	230e      	movs	r3, #14
 8002ed0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	481d      	ldr	r0, [pc, #116]	@ (8002f50 <HAL_LTDC_MspInit+0x258>)
 8002eda:	f003 fb8f 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002ede:	2348      	movs	r3, #72	@ 0x48
 8002ee0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eea:	2300      	movs	r3, #0
 8002eec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002eee:	230e      	movs	r3, #14
 8002ef0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ef2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4816      	ldr	r0, [pc, #88]	@ (8002f54 <HAL_LTDC_MspInit+0x25c>)
 8002efa:	f003 fb7f 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002efe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f02:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f04:	2302      	movs	r3, #2
 8002f06:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f10:	2309      	movs	r3, #9
 8002f12:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f18:	4619      	mov	r1, r3
 8002f1a:	480c      	ldr	r0, [pc, #48]	@ (8002f4c <HAL_LTDC_MspInit+0x254>)
 8002f1c:	f003 fb6e 	bl	80065fc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002f20:	2200      	movs	r2, #0
 8002f22:	2105      	movs	r1, #5
 8002f24:	2058      	movs	r0, #88	@ 0x58
 8002f26:	f002 fbb5 	bl	8005694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002f2a:	2058      	movs	r0, #88	@ 0x58
 8002f2c:	f002 fbce 	bl	80056cc <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002f30:	bf00      	nop
 8002f32:	3768      	adds	r7, #104	@ 0x68
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40016800 	.word	0x40016800
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40021400 	.word	0x40021400
 8002f44:	40020000 	.word	0x40020000
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	40021800 	.word	0x40021800
 8002f50:	40020800 	.word	0x40020800
 8002f54:	40020c00 	.word	0x40020c00

08002f58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	@ 0x28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a19      	ldr	r2, [pc, #100]	@ (8002fdc <HAL_SPI_MspInit+0x84>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d12c      	bne.n	8002fd4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	4b18      	ldr	r3, [pc, #96]	@ (8002fe0 <HAL_SPI_MspInit+0x88>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f82:	4a17      	ldr	r2, [pc, #92]	@ (8002fe0 <HAL_SPI_MspInit+0x88>)
 8002f84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f8a:	4b15      	ldr	r3, [pc, #84]	@ (8002fe0 <HAL_SPI_MspInit+0x88>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <HAL_SPI_MspInit+0x88>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <HAL_SPI_MspInit+0x88>)
 8002fa0:	f043 0320 	orr.w	r3, r3, #32
 8002fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <HAL_SPI_MspInit+0x88>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002fb2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002fc4:	2305      	movs	r3, #5
 8002fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4805      	ldr	r0, [pc, #20]	@ (8002fe4 <HAL_SPI_MspInit+0x8c>)
 8002fd0:	f003 fb14 	bl	80065fc <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002fd4:	bf00      	nop
 8002fd6:	3728      	adds	r7, #40	@ 0x28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40015000 	.word	0x40015000
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40021400 	.word	0x40021400

08002fe8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a08      	ldr	r2, [pc, #32]	@ (8003018 <HAL_SPI_MspDeInit+0x30>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d10a      	bne.n	8003010 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002ffa:	4b08      	ldr	r3, [pc, #32]	@ (800301c <HAL_SPI_MspDeInit+0x34>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffe:	4a07      	ldr	r2, [pc, #28]	@ (800301c <HAL_SPI_MspDeInit+0x34>)
 8003000:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003004:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003006:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800300a:	4805      	ldr	r0, [pc, #20]	@ (8003020 <HAL_SPI_MspDeInit+0x38>)
 800300c:	f003 fca2 	bl	8006954 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40015000 	.word	0x40015000
 800301c:	40023800 	.word	0x40023800
 8003020:	40021400 	.word	0x40021400

08003024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1c      	ldr	r2, [pc, #112]	@ (80030a4 <HAL_TIM_Base_MspInit+0x80>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d116      	bne.n	8003064 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_TIM_Base_MspInit+0x84>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	4a1a      	ldr	r2, [pc, #104]	@ (80030a8 <HAL_TIM_Base_MspInit+0x84>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6453      	str	r3, [r2, #68]	@ 0x44
 8003046:	4b18      	ldr	r3, [pc, #96]	@ (80030a8 <HAL_TIM_Base_MspInit+0x84>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	2019      	movs	r0, #25
 8003058:	f002 fb1c 	bl	8005694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800305c:	2019      	movs	r0, #25
 800305e:	f002 fb35 	bl	80056cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003062:	e01a      	b.n	800309a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a10      	ldr	r2, [pc, #64]	@ (80030ac <HAL_TIM_Base_MspInit+0x88>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d115      	bne.n	800309a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	4b0d      	ldr	r3, [pc, #52]	@ (80030a8 <HAL_TIM_Base_MspInit+0x84>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	4a0c      	ldr	r2, [pc, #48]	@ (80030a8 <HAL_TIM_Base_MspInit+0x84>)
 8003078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800307c:	6453      	str	r3, [r2, #68]	@ 0x44
 800307e:	4b0a      	ldr	r3, [pc, #40]	@ (80030a8 <HAL_TIM_Base_MspInit+0x84>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800308a:	2200      	movs	r2, #0
 800308c:	2100      	movs	r1, #0
 800308e:	2019      	movs	r0, #25
 8003090:	f002 fb00 	bl	8005694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003094:	2019      	movs	r0, #25
 8003096:	f002 fb19 	bl	80056cc <HAL_NVIC_EnableIRQ>
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40010000 	.word	0x40010000
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40014400 	.word	0x40014400

080030b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	@ 0x30
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 031c 	add.w	r3, r7, #28
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a42      	ldr	r2, [pc, #264]	@ (80031d8 <HAL_UART_MspInit+0x128>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d14b      	bne.n	800316a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	4b41      	ldr	r3, [pc, #260]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	4a40      	ldr	r2, [pc, #256]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 80030dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030e2:	4b3e      	ldr	r3, [pc, #248]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	4b3a      	ldr	r3, [pc, #232]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	4a39      	ldr	r2, [pc, #228]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030fe:	4b37      	ldr	r3, [pc, #220]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	4b33      	ldr	r3, [pc, #204]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	4a32      	ldr	r2, [pc, #200]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 8003114:	f043 0308 	orr.w	r3, r3, #8
 8003118:	6313      	str	r3, [r2, #48]	@ 0x30
 800311a:	4b30      	ldr	r3, [pc, #192]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003126:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800312a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003134:	2303      	movs	r3, #3
 8003136:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003138:	2308      	movs	r3, #8
 800313a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800313c:	f107 031c 	add.w	r3, r7, #28
 8003140:	4619      	mov	r1, r3
 8003142:	4827      	ldr	r0, [pc, #156]	@ (80031e0 <HAL_UART_MspInit+0x130>)
 8003144:	f003 fa5a 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003148:	2304      	movs	r3, #4
 800314a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003154:	2303      	movs	r3, #3
 8003156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003158:	2308      	movs	r3, #8
 800315a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800315c:	f107 031c 	add.w	r3, r7, #28
 8003160:	4619      	mov	r1, r3
 8003162:	4820      	ldr	r0, [pc, #128]	@ (80031e4 <HAL_UART_MspInit+0x134>)
 8003164:	f003 fa4a 	bl	80065fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003168:	e031      	b.n	80031ce <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1e      	ldr	r2, [pc, #120]	@ (80031e8 <HAL_UART_MspInit+0x138>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d12c      	bne.n	80031ce <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	4b18      	ldr	r3, [pc, #96]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 800317a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317c:	4a17      	ldr	r2, [pc, #92]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 800317e:	f043 0310 	orr.w	r3, r3, #16
 8003182:	6453      	str	r3, [r2, #68]	@ 0x44
 8003184:	4b15      	ldr	r3, [pc, #84]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 8003186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003190:	2300      	movs	r3, #0
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	4b11      	ldr	r3, [pc, #68]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003198:	4a10      	ldr	r2, [pc, #64]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6313      	str	r3, [r2, #48]	@ 0x30
 80031a0:	4b0e      	ldr	r3, [pc, #56]	@ (80031dc <HAL_UART_MspInit+0x12c>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80031ac:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80031b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ba:	2303      	movs	r3, #3
 80031bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031be:	2307      	movs	r3, #7
 80031c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c2:	f107 031c 	add.w	r3, r7, #28
 80031c6:	4619      	mov	r1, r3
 80031c8:	4808      	ldr	r0, [pc, #32]	@ (80031ec <HAL_UART_MspInit+0x13c>)
 80031ca:	f003 fa17 	bl	80065fc <HAL_GPIO_Init>
}
 80031ce:	bf00      	nop
 80031d0:	3730      	adds	r7, #48	@ 0x30
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40005000 	.word	0x40005000
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40011000 	.word	0x40011000
 80031ec:	40020000 	.word	0x40020000

080031f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003204:	4b3b      	ldr	r3, [pc, #236]	@ (80032f4 <HAL_FMC_MspInit+0x104>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d16f      	bne.n	80032ec <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800320c:	4b39      	ldr	r3, [pc, #228]	@ (80032f4 <HAL_FMC_MspInit+0x104>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	603b      	str	r3, [r7, #0]
 8003216:	4b38      	ldr	r3, [pc, #224]	@ (80032f8 <HAL_FMC_MspInit+0x108>)
 8003218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321a:	4a37      	ldr	r2, [pc, #220]	@ (80032f8 <HAL_FMC_MspInit+0x108>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6393      	str	r3, [r2, #56]	@ 0x38
 8003222:	4b35      	ldr	r3, [pc, #212]	@ (80032f8 <HAL_FMC_MspInit+0x108>)
 8003224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800322e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003232:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323c:	2303      	movs	r3, #3
 800323e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003240:	230c      	movs	r3, #12
 8003242:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003244:	1d3b      	adds	r3, r7, #4
 8003246:	4619      	mov	r1, r3
 8003248:	482c      	ldr	r0, [pc, #176]	@ (80032fc <HAL_FMC_MspInit+0x10c>)
 800324a:	f003 f9d7 	bl	80065fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800324e:	2301      	movs	r3, #1
 8003250:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	2302      	movs	r3, #2
 8003254:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325a:	2303      	movs	r3, #3
 800325c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800325e:	230c      	movs	r3, #12
 8003260:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	4619      	mov	r1, r3
 8003266:	4826      	ldr	r0, [pc, #152]	@ (8003300 <HAL_FMC_MspInit+0x110>)
 8003268:	f003 f9c8 	bl	80065fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800326c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003270:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	2302      	movs	r3, #2
 8003274:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327a:	2303      	movs	r3, #3
 800327c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800327e:	230c      	movs	r3, #12
 8003280:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	4619      	mov	r1, r3
 8003286:	481f      	ldr	r0, [pc, #124]	@ (8003304 <HAL_FMC_MspInit+0x114>)
 8003288:	f003 f9b8 	bl	80065fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800328c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003290:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003292:	2302      	movs	r3, #2
 8003294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329a:	2303      	movs	r3, #3
 800329c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800329e:	230c      	movs	r3, #12
 80032a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032a2:	1d3b      	adds	r3, r7, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4818      	ldr	r0, [pc, #96]	@ (8003308 <HAL_FMC_MspInit+0x118>)
 80032a8:	f003 f9a8 	bl	80065fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80032ac:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80032b0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ba:	2303      	movs	r3, #3
 80032bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032be:	230c      	movs	r3, #12
 80032c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	4619      	mov	r1, r3
 80032c6:	4811      	ldr	r0, [pc, #68]	@ (800330c <HAL_FMC_MspInit+0x11c>)
 80032c8:	f003 f998 	bl	80065fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80032cc:	2360      	movs	r3, #96	@ 0x60
 80032ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d8:	2303      	movs	r3, #3
 80032da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80032dc:	230c      	movs	r3, #12
 80032de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e0:	1d3b      	adds	r3, r7, #4
 80032e2:	4619      	mov	r1, r3
 80032e4:	480a      	ldr	r0, [pc, #40]	@ (8003310 <HAL_FMC_MspInit+0x120>)
 80032e6:	f003 f989 	bl	80065fc <HAL_GPIO_Init>
 80032ea:	e000      	b.n	80032ee <HAL_FMC_MspInit+0xfe>
    return;
 80032ec:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20008f9c 	.word	0x20008f9c
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40021400 	.word	0x40021400
 8003300:	40020800 	.word	0x40020800
 8003304:	40021800 	.word	0x40021800
 8003308:	40021000 	.word	0x40021000
 800330c:	40020c00 	.word	0x40020c00
 8003310:	40020400 	.word	0x40020400

08003314 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800331c:	f7ff ff68 	bl	80031f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08e      	sub	sp, #56	@ 0x38
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	4b33      	ldr	r3, [pc, #204]	@ (800340c <HAL_InitTick+0xe4>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	4a32      	ldr	r2, [pc, #200]	@ (800340c <HAL_InitTick+0xe4>)
 8003342:	f043 0310 	orr.w	r3, r3, #16
 8003346:	6413      	str	r3, [r2, #64]	@ 0x40
 8003348:	4b30      	ldr	r3, [pc, #192]	@ (800340c <HAL_InitTick+0xe4>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003354:	f107 0210 	add.w	r2, r7, #16
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f007 fe5a 	bl	800b018 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d103      	bne.n	8003376 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800336e:	f007 fe2b 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 8003372:	6378      	str	r0, [r7, #52]	@ 0x34
 8003374:	e004      	b.n	8003380 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003376:	f007 fe27 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 800337a:	4603      	mov	r3, r0
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003382:	4a23      	ldr	r2, [pc, #140]	@ (8003410 <HAL_InitTick+0xe8>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	0c9b      	lsrs	r3, r3, #18
 800338a:	3b01      	subs	r3, #1
 800338c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800338e:	4b21      	ldr	r3, [pc, #132]	@ (8003414 <HAL_InitTick+0xec>)
 8003390:	4a21      	ldr	r2, [pc, #132]	@ (8003418 <HAL_InitTick+0xf0>)
 8003392:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003394:	4b1f      	ldr	r3, [pc, #124]	@ (8003414 <HAL_InitTick+0xec>)
 8003396:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800339a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800339c:	4a1d      	ldr	r2, [pc, #116]	@ (8003414 <HAL_InitTick+0xec>)
 800339e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80033a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003414 <HAL_InitTick+0xec>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003414 <HAL_InitTick+0xec>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ae:	4b19      	ldr	r3, [pc, #100]	@ (8003414 <HAL_InitTick+0xec>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80033b4:	4817      	ldr	r0, [pc, #92]	@ (8003414 <HAL_InitTick+0xec>)
 80033b6:	f008 feb9 	bl	800c12c <HAL_TIM_Base_Init>
 80033ba:	4603      	mov	r3, r0
 80033bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80033c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d11b      	bne.n	8003400 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80033c8:	4812      	ldr	r0, [pc, #72]	@ (8003414 <HAL_InitTick+0xec>)
 80033ca:	f008 feff 	bl	800c1cc <HAL_TIM_Base_Start_IT>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80033d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d111      	bne.n	8003400 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80033dc:	2036      	movs	r0, #54	@ 0x36
 80033de:	f002 f975 	bl	80056cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b0f      	cmp	r3, #15
 80033e6:	d808      	bhi.n	80033fa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80033e8:	2200      	movs	r2, #0
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	2036      	movs	r0, #54	@ 0x36
 80033ee:	f002 f951 	bl	8005694 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033f2:	4a0a      	ldr	r2, [pc, #40]	@ (800341c <HAL_InitTick+0xf4>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	e002      	b.n	8003400 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003400:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003404:	4618      	mov	r0, r3
 8003406:	3738      	adds	r7, #56	@ 0x38
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40023800 	.word	0x40023800
 8003410:	431bde83 	.word	0x431bde83
 8003414:	20008fa0 	.word	0x20008fa0
 8003418:	40001000 	.word	0x40001000
 800341c:	20000268 	.word	0x20000268

08003420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <NMI_Handler+0x4>

08003428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <HardFault_Handler+0x4>

08003430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <MemManage_Handler+0x4>

08003438 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800343c:	bf00      	nop
 800343e:	e7fd      	b.n	800343c <BusFault_Handler+0x4>

08003440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003444:	bf00      	nop
 8003446:	e7fd      	b.n	8003444 <UsageFault_Handler+0x4>

08003448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003472:	b480      	push	{r7}
 8003474:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003484:	4803      	ldr	r0, [pc, #12]	@ (8003494 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003486:	f008 ff11 	bl	800c2ac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800348a:	4803      	ldr	r0, [pc, #12]	@ (8003498 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800348c:	f008 ff0e 	bl	800c2ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}
 8003494:	200004a4 	.word	0x200004a4
 8003498:	200004ec 	.word	0x200004ec

0800349c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80034a0:	4802      	ldr	r0, [pc, #8]	@ (80034ac <TIM6_DAC_IRQHandler+0x10>)
 80034a2:	f008 ff03 	bl	800c2ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20008fa0 	.word	0x20008fa0

080034b0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80034b4:	4802      	ldr	r0, [pc, #8]	@ (80034c0 <OTG_HS_IRQHandler+0x10>)
 80034b6:	f003 fe53 	bl	8007160 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	2000a098 	.word	0x2000a098

080034c4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80034c8:	4802      	ldr	r0, [pc, #8]	@ (80034d4 <LTDC_IRQHandler+0x10>)
 80034ca:	f006 fe4b 	bl	800a164 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200003a4 	.word	0x200003a4

080034d8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80034dc:	4802      	ldr	r0, [pc, #8]	@ (80034e8 <DMA2D_IRQHandler+0x10>)
 80034de:	f002 fc3a 	bl	8005d56 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000310 	.word	0x20000310

080034ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e00a      	b.n	8003514 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034fe:	f3af 8000 	nop.w
 8003502:	4601      	mov	r1, r0
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	60ba      	str	r2, [r7, #8]
 800350a:	b2ca      	uxtb	r2, r1
 800350c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	3301      	adds	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	dbf0      	blt.n	80034fe <_read+0x12>
  }

  return len;
 800351c:	687b      	ldr	r3, [r7, #4]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800354e:	605a      	str	r2, [r3, #4]
  return 0;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <_isatty>:

int _isatty(int file)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003566:	2301      	movs	r3, #1
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003598:	4a14      	ldr	r2, [pc, #80]	@ (80035ec <_sbrk+0x5c>)
 800359a:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <_sbrk+0x60>)
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035a4:	4b13      	ldr	r3, [pc, #76]	@ (80035f4 <_sbrk+0x64>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035ac:	4b11      	ldr	r3, [pc, #68]	@ (80035f4 <_sbrk+0x64>)
 80035ae:	4a12      	ldr	r2, [pc, #72]	@ (80035f8 <_sbrk+0x68>)
 80035b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035b2:	4b10      	ldr	r3, [pc, #64]	@ (80035f4 <_sbrk+0x64>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d207      	bcs.n	80035d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035c0:	f00e fd02 	bl	8011fc8 <__errno>
 80035c4:	4603      	mov	r3, r0
 80035c6:	220c      	movs	r2, #12
 80035c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295
 80035ce:	e009      	b.n	80035e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035d0:	4b08      	ldr	r3, [pc, #32]	@ (80035f4 <_sbrk+0x64>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035d6:	4b07      	ldr	r3, [pc, #28]	@ (80035f4 <_sbrk+0x64>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	4a05      	ldr	r2, [pc, #20]	@ (80035f4 <_sbrk+0x64>)
 80035e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035e2:	68fb      	ldr	r3, [r7, #12]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20030000 	.word	0x20030000
 80035f0:	00000400 	.word	0x00000400
 80035f4:	20008fe8 	.word	0x20008fe8
 80035f8:	2000a5c8 	.word	0x2000a5c8

080035fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003600:	4b06      	ldr	r3, [pc, #24]	@ (800361c <SystemInit+0x20>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003606:	4a05      	ldr	r2, [pc, #20]	@ (800361c <SystemInit+0x20>)
 8003608:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800360c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003658 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003624:	f7ff ffea 	bl	80035fc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003628:	480c      	ldr	r0, [pc, #48]	@ (800365c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800362a:	490d      	ldr	r1, [pc, #52]	@ (8003660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800362c:	4a0d      	ldr	r2, [pc, #52]	@ (8003664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003630:	e002      	b.n	8003638 <LoopCopyDataInit>

08003632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003636:	3304      	adds	r3, #4

08003638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800363a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800363c:	d3f9      	bcc.n	8003632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800363e:	4a0a      	ldr	r2, [pc, #40]	@ (8003668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003640:	4c0a      	ldr	r4, [pc, #40]	@ (800366c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003644:	e001      	b.n	800364a <LoopFillZerobss>

08003646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003648:	3204      	adds	r2, #4

0800364a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800364a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800364c:	d3fb      	bcc.n	8003646 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800364e:	f00e fcc1 	bl	8011fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003652:	f7fd f837 	bl	80006c4 <main>
  bx  lr    
 8003656:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003658:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800365c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003660:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8003664:	08016db0 	.word	0x08016db0
  ldr r2, =_sbss
 8003668:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 800366c:	2000a5c4 	.word	0x2000a5c4

08003670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003670:	e7fe      	b.n	8003670 <ADC_IRQHandler>

08003672 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003676:	f000 fe49 	bl	800430c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800367a:	20ca      	movs	r0, #202	@ 0xca
 800367c:	f000 f95d 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8003680:	20c3      	movs	r0, #195	@ 0xc3
 8003682:	f000 f967 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8003686:	2008      	movs	r0, #8
 8003688:	f000 f964 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800368c:	2050      	movs	r0, #80	@ 0x50
 800368e:	f000 f961 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8003692:	20cf      	movs	r0, #207	@ 0xcf
 8003694:	f000 f951 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003698:	2000      	movs	r0, #0
 800369a:	f000 f95b 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800369e:	20c1      	movs	r0, #193	@ 0xc1
 80036a0:	f000 f958 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80036a4:	2030      	movs	r0, #48	@ 0x30
 80036a6:	f000 f955 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80036aa:	20ed      	movs	r0, #237	@ 0xed
 80036ac:	f000 f945 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80036b0:	2064      	movs	r0, #100	@ 0x64
 80036b2:	f000 f94f 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80036b6:	2003      	movs	r0, #3
 80036b8:	f000 f94c 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80036bc:	2012      	movs	r0, #18
 80036be:	f000 f949 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80036c2:	2081      	movs	r0, #129	@ 0x81
 80036c4:	f000 f946 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80036c8:	20e8      	movs	r0, #232	@ 0xe8
 80036ca:	f000 f936 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80036ce:	2085      	movs	r0, #133	@ 0x85
 80036d0:	f000 f940 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80036d4:	2000      	movs	r0, #0
 80036d6:	f000 f93d 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80036da:	2078      	movs	r0, #120	@ 0x78
 80036dc:	f000 f93a 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80036e0:	20cb      	movs	r0, #203	@ 0xcb
 80036e2:	f000 f92a 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80036e6:	2039      	movs	r0, #57	@ 0x39
 80036e8:	f000 f934 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80036ec:	202c      	movs	r0, #44	@ 0x2c
 80036ee:	f000 f931 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80036f2:	2000      	movs	r0, #0
 80036f4:	f000 f92e 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80036f8:	2034      	movs	r0, #52	@ 0x34
 80036fa:	f000 f92b 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80036fe:	2002      	movs	r0, #2
 8003700:	f000 f928 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8003704:	20f7      	movs	r0, #247	@ 0xf7
 8003706:	f000 f918 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800370a:	2020      	movs	r0, #32
 800370c:	f000 f922 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8003710:	20ea      	movs	r0, #234	@ 0xea
 8003712:	f000 f912 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003716:	2000      	movs	r0, #0
 8003718:	f000 f91c 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800371c:	2000      	movs	r0, #0
 800371e:	f000 f919 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8003722:	20b1      	movs	r0, #177	@ 0xb1
 8003724:	f000 f909 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003728:	2000      	movs	r0, #0
 800372a:	f000 f913 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800372e:	201b      	movs	r0, #27
 8003730:	f000 f910 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003734:	20b6      	movs	r0, #182	@ 0xb6
 8003736:	f000 f900 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800373a:	200a      	movs	r0, #10
 800373c:	f000 f90a 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8003740:	20a2      	movs	r0, #162	@ 0xa2
 8003742:	f000 f907 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8003746:	20c0      	movs	r0, #192	@ 0xc0
 8003748:	f000 f8f7 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800374c:	2010      	movs	r0, #16
 800374e:	f000 f901 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8003752:	20c1      	movs	r0, #193	@ 0xc1
 8003754:	f000 f8f1 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003758:	2010      	movs	r0, #16
 800375a:	f000 f8fb 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800375e:	20c5      	movs	r0, #197	@ 0xc5
 8003760:	f000 f8eb 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8003764:	2045      	movs	r0, #69	@ 0x45
 8003766:	f000 f8f5 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800376a:	2015      	movs	r0, #21
 800376c:	f000 f8f2 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8003770:	20c7      	movs	r0, #199	@ 0xc7
 8003772:	f000 f8e2 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8003776:	2090      	movs	r0, #144	@ 0x90
 8003778:	f000 f8ec 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800377c:	2036      	movs	r0, #54	@ 0x36
 800377e:	f000 f8dc 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8003782:	20c8      	movs	r0, #200	@ 0xc8
 8003784:	f000 f8e6 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8003788:	20f2      	movs	r0, #242	@ 0xf2
 800378a:	f000 f8d6 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800378e:	2000      	movs	r0, #0
 8003790:	f000 f8e0 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8003794:	20b0      	movs	r0, #176	@ 0xb0
 8003796:	f000 f8d0 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800379a:	20c2      	movs	r0, #194	@ 0xc2
 800379c:	f000 f8da 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80037a0:	20b6      	movs	r0, #182	@ 0xb6
 80037a2:	f000 f8ca 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80037a6:	200a      	movs	r0, #10
 80037a8:	f000 f8d4 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80037ac:	20a7      	movs	r0, #167	@ 0xa7
 80037ae:	f000 f8d1 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80037b2:	2027      	movs	r0, #39	@ 0x27
 80037b4:	f000 f8ce 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80037b8:	2004      	movs	r0, #4
 80037ba:	f000 f8cb 	bl	8003954 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80037be:	202a      	movs	r0, #42	@ 0x2a
 80037c0:	f000 f8bb 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80037c4:	2000      	movs	r0, #0
 80037c6:	f000 f8c5 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80037ca:	2000      	movs	r0, #0
 80037cc:	f000 f8c2 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80037d0:	2000      	movs	r0, #0
 80037d2:	f000 f8bf 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80037d6:	20ef      	movs	r0, #239	@ 0xef
 80037d8:	f000 f8bc 	bl	8003954 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80037dc:	202b      	movs	r0, #43	@ 0x2b
 80037de:	f000 f8ac 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80037e2:	2000      	movs	r0, #0
 80037e4:	f000 f8b6 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80037e8:	2000      	movs	r0, #0
 80037ea:	f000 f8b3 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80037ee:	2001      	movs	r0, #1
 80037f0:	f000 f8b0 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80037f4:	203f      	movs	r0, #63	@ 0x3f
 80037f6:	f000 f8ad 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80037fa:	20f6      	movs	r0, #246	@ 0xf6
 80037fc:	f000 f89d 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003800:	2001      	movs	r0, #1
 8003802:	f000 f8a7 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003806:	2000      	movs	r0, #0
 8003808:	f000 f8a4 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800380c:	2006      	movs	r0, #6
 800380e:	f000 f8a1 	bl	8003954 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8003812:	202c      	movs	r0, #44	@ 0x2c
 8003814:	f000 f891 	bl	800393a <ili9341_WriteReg>
  LCD_Delay(200);
 8003818:	20c8      	movs	r0, #200	@ 0xc8
 800381a:	f000 fe65 	bl	80044e8 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800381e:	2026      	movs	r0, #38	@ 0x26
 8003820:	f000 f88b 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8003824:	2001      	movs	r0, #1
 8003826:	f000 f895 	bl	8003954 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800382a:	20e0      	movs	r0, #224	@ 0xe0
 800382c:	f000 f885 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8003830:	200f      	movs	r0, #15
 8003832:	f000 f88f 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8003836:	2029      	movs	r0, #41	@ 0x29
 8003838:	f000 f88c 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800383c:	2024      	movs	r0, #36	@ 0x24
 800383e:	f000 f889 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003842:	200c      	movs	r0, #12
 8003844:	f000 f886 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8003848:	200e      	movs	r0, #14
 800384a:	f000 f883 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800384e:	2009      	movs	r0, #9
 8003850:	f000 f880 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8003854:	204e      	movs	r0, #78	@ 0x4e
 8003856:	f000 f87d 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800385a:	2078      	movs	r0, #120	@ 0x78
 800385c:	f000 f87a 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8003860:	203c      	movs	r0, #60	@ 0x3c
 8003862:	f000 f877 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003866:	2009      	movs	r0, #9
 8003868:	f000 f874 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800386c:	2013      	movs	r0, #19
 800386e:	f000 f871 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003872:	2005      	movs	r0, #5
 8003874:	f000 f86e 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8003878:	2017      	movs	r0, #23
 800387a:	f000 f86b 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800387e:	2011      	movs	r0, #17
 8003880:	f000 f868 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003884:	2000      	movs	r0, #0
 8003886:	f000 f865 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800388a:	20e1      	movs	r0, #225	@ 0xe1
 800388c:	f000 f855 	bl	800393a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003890:	2000      	movs	r0, #0
 8003892:	f000 f85f 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8003896:	2016      	movs	r0, #22
 8003898:	f000 f85c 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800389c:	201b      	movs	r0, #27
 800389e:	f000 f859 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80038a2:	2004      	movs	r0, #4
 80038a4:	f000 f856 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80038a8:	2011      	movs	r0, #17
 80038aa:	f000 f853 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80038ae:	2007      	movs	r0, #7
 80038b0:	f000 f850 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80038b4:	2031      	movs	r0, #49	@ 0x31
 80038b6:	f000 f84d 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80038ba:	2033      	movs	r0, #51	@ 0x33
 80038bc:	f000 f84a 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80038c0:	2042      	movs	r0, #66	@ 0x42
 80038c2:	f000 f847 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80038c6:	2005      	movs	r0, #5
 80038c8:	f000 f844 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80038cc:	200c      	movs	r0, #12
 80038ce:	f000 f841 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80038d2:	200a      	movs	r0, #10
 80038d4:	f000 f83e 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80038d8:	2028      	movs	r0, #40	@ 0x28
 80038da:	f000 f83b 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80038de:	202f      	movs	r0, #47	@ 0x2f
 80038e0:	f000 f838 	bl	8003954 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80038e4:	200f      	movs	r0, #15
 80038e6:	f000 f835 	bl	8003954 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80038ea:	2011      	movs	r0, #17
 80038ec:	f000 f825 	bl	800393a <ili9341_WriteReg>
  LCD_Delay(200);
 80038f0:	20c8      	movs	r0, #200	@ 0xc8
 80038f2:	f000 fdf9 	bl	80044e8 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80038f6:	2029      	movs	r0, #41	@ 0x29
 80038f8:	f000 f81f 	bl	800393a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80038fc:	202c      	movs	r0, #44	@ 0x2c
 80038fe:	f000 f81c 	bl	800393a <ili9341_WriteReg>
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}

08003906 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800390a:	f000 fcff 	bl	800430c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800390e:	2103      	movs	r1, #3
 8003910:	20d3      	movs	r0, #211	@ 0xd3
 8003912:	f000 f82c 	bl	800396e <ili9341_ReadData>
 8003916:	4603      	mov	r3, r0
 8003918:	b29b      	uxth	r3, r3
}
 800391a:	4618      	mov	r0, r3
 800391c:	bd80      	pop	{r7, pc}

0800391e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003922:	2029      	movs	r0, #41	@ 0x29
 8003924:	f000 f809 	bl	800393a <ili9341_WriteReg>
}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}

0800392c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8003930:	2028      	movs	r0, #40	@ 0x28
 8003932:	f000 f802 	bl	800393a <ili9341_WriteReg>
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}

0800393a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	4603      	mov	r3, r0
 8003942:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fd7a 	bl	8004440 <LCD_IO_WriteReg>
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fd4b 	bl	80043fc <LCD_IO_WriteData>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	4603      	mov	r3, r0
 8003976:	460a      	mov	r2, r1
 8003978:	80fb      	strh	r3, [r7, #6]
 800397a:	4613      	mov	r3, r2
 800397c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800397e:	797a      	ldrb	r2, [r7, #5]
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fd7d 	bl	8004484 <LCD_IO_ReadData>
 800398a:	4603      	mov	r3, r0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8003998:	23f0      	movs	r3, #240	@ 0xf0
}
 800399a:	4618      	mov	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80039a8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80039c2:	88fb      	ldrh	r3, [r7, #6]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fa59 	bl	8003e7c <stmpe811_GetInstance>
 80039ca:	4603      	mov	r3, r0
 80039cc:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2bff      	cmp	r3, #255	@ 0xff
 80039d2:	d112      	bne.n	80039fa <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80039d4:	2000      	movs	r0, #0
 80039d6:	f000 fa51 	bl	8003e7c <stmpe811_GetInstance>
 80039da:	4603      	mov	r3, r0
 80039dc:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80039de:	7bbb      	ldrb	r3, [r7, #14]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d80a      	bhi.n	80039fa <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80039e4:	7bbb      	ldrb	r3, [r7, #14]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	b2d1      	uxtb	r1, r2
 80039ea:	4a06      	ldr	r2, [pc, #24]	@ (8003a04 <stmpe811_Init+0x4c>)
 80039ec:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80039ee:	f000 fd86 	bl	80044fe <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f807 	bl	8003a08 <stmpe811_Reset>
    }
  }
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20008fec 	.word	0x20008fec

08003a08 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2202      	movs	r2, #2
 8003a18:	2103      	movs	r1, #3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fd7b 	bl	8004516 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8003a20:	200a      	movs	r0, #10
 8003a22:	f000 fdb4 	bl	800458e <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2103      	movs	r1, #3
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fd71 	bl	8004516 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8003a34:	2002      	movs	r0, #2
 8003a36:	f000 fdaa 	bl	800458e <IOE_Delay>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8003a42:	b590      	push	{r4, r7, lr}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	4603      	mov	r3, r0
 8003a4a:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8003a4c:	f000 fd57 	bl	80044fe <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fd70 	bl	800453c <IOE_Read>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2101      	movs	r1, #1
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fd67 	bl	800453c <IOE_Read>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003a72:	4323      	orrs	r3, r4
 8003a74:	b21b      	sxth	r3, r3
 8003a76:	b29b      	uxth	r3, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd90      	pop	{r4, r7, pc}

08003a80 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2109      	movs	r1, #9
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fd51 	bl	800453c <IOE_Read>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	2109      	movs	r1, #9
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fd31 	bl	8004516 <IOE_Write>
}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2109      	movs	r1, #9
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fd33 	bl	800453c <IOE_Read>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	2109      	movs	r1, #9
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fd13 	bl	8004516 <IOE_Write>
    
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	460a      	mov	r2, r1
 8003b02:	80fb      	strh	r3, [r7, #6]
 8003b04:	4613      	mov	r3, r2
 8003b06:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	210a      	movs	r1, #10
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fd12 	bl	800453c <IOE_Read>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	797b      	ldrb	r3, [r7, #5]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	210a      	movs	r1, #10
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fcf2 	bl	8004516 <IOE_Write>
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	4603      	mov	r3, r0
 8003b42:	460a      	mov	r2, r1
 8003b44:	80fb      	strh	r3, [r7, #6]
 8003b46:	4613      	mov	r3, r2
 8003b48:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	210a      	movs	r1, #10
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fcf1 	bl	800453c <IOE_Read>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8003b5e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	b25a      	sxtb	r2, r3
 8003b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	210a      	movs	r1, #10
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fccc 	bl	8004516 <IOE_Write>
}
 8003b7e:	bf00      	nop
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	460a      	mov	r2, r1
 8003b90:	80fb      	strh	r3, [r7, #6]
 8003b92:	4613      	mov	r3, r2
 8003b94:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	210b      	movs	r1, #11
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 fccd 	bl	800453c <IOE_Read>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	797b      	ldrb	r3, [r7, #5]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b2db      	uxtb	r3, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	460a      	mov	r2, r1
 8003bbe:	80fb      	strh	r3, [r7, #6]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	797a      	ldrb	r2, [r7, #5]
 8003bca:	210b      	movs	r1, #11
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fca2 	bl	8004516 <IOE_Write>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	4603      	mov	r3, r0
 8003be2:	6039      	str	r1, [r7, #0]
 8003be4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2117      	movs	r1, #23
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fca3 	bl	800453c <IOE_Read>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	b25b      	sxtb	r3, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	b25a      	sxtb	r2, r3
 8003c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c06:	4013      	ands	r3, r2
 8003c08:	b25b      	sxtb	r3, r3
 8003c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	2117      	movs	r1, #23
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fc7e 	bl	8004516 <IOE_Write>
}
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	4603      	mov	r3, r0
 8003c2a:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2104      	movs	r1, #4
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fc82 	bl	800453c <IOE_Read>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	f023 0304 	bic.w	r3, r3, #4
 8003c42:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003c44:	88fb      	ldrh	r3, [r7, #6]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	2104      	movs	r1, #4
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fc62 	bl	8004516 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	21f0      	movs	r1, #240	@ 0xf0
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff ffbf 	bl	8003bda <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	f023 0303 	bic.w	r3, r3, #3
 8003c62:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	2104      	movs	r1, #4
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fc52 	bl	8004516 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2249      	movs	r2, #73	@ 0x49
 8003c78:	2120      	movs	r1, #32
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fc4b 	bl	8004516 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8003c80:	2002      	movs	r0, #2
 8003c82:	f000 fc84 	bl	800458e <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	2121      	movs	r1, #33	@ 0x21
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fc41 	bl	8004516 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	229a      	movs	r2, #154	@ 0x9a
 8003c9a:	2141      	movs	r1, #65	@ 0x41
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fc3a 	bl	8004516 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	214a      	movs	r1, #74	@ 0x4a
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fc33 	bl	8004516 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	214b      	movs	r1, #75	@ 0x4b
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fc2c 	bl	8004516 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	214b      	movs	r1, #75	@ 0x4b
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fc25 	bl	8004516 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	2156      	movs	r1, #86	@ 0x56
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fc1e 	bl	8004516 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2201      	movs	r2, #1
 8003ce0:	2158      	movs	r1, #88	@ 0x58
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fc17 	bl	8004516 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2201      	movs	r2, #1
 8003cee:	2140      	movs	r1, #64	@ 0x40
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fc10 	bl	8004516 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	22ff      	movs	r2, #255	@ 0xff
 8003cfc:	210b      	movs	r1, #11
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fc09 	bl	8004516 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8003d04:	2002      	movs	r0, #2
 8003d06:	f000 fc42 	bl	800458e <IOE_Delay>
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	4603      	mov	r3, r0
 8003d1a:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2140      	movs	r1, #64	@ 0x40
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fc08 	bl	800453c <IOE_Read>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d32:	2b80      	cmp	r3, #128	@ 0x80
 8003d34:	bf0c      	ite	eq
 8003d36:	2301      	moveq	r3, #1
 8003d38:	2300      	movne	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8003d3e:	7bbb      	ldrb	r3, [r7, #14]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00b      	beq.n	8003d5c <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	214c      	movs	r1, #76	@ 0x4c
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fbf6 	bl	800453c <IOE_Read>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d010      	beq.n	8003d78 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
 8003d5a:	e00d      	b.n	8003d78 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2201      	movs	r2, #1
 8003d62:	214b      	movs	r1, #75	@ 0x4b
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fbd6 	bl	8004516 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2200      	movs	r2, #0
 8003d70:	214b      	movs	r1, #75	@ 0x4b
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fbcf 	bl	8004516 <IOE_Write>
  }
  
  return ret;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b086      	sub	sp, #24
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	4603      	mov	r3, r0
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003d90:	89fb      	ldrh	r3, [r7, #14]
 8003d92:	b2d8      	uxtb	r0, r3
 8003d94:	f107 0210 	add.w	r2, r7, #16
 8003d98:	2304      	movs	r3, #4
 8003d9a:	21d7      	movs	r1, #215	@ 0xd7
 8003d9c:	f000 fbe1 	bl	8004562 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8003da0:	7c3b      	ldrb	r3, [r7, #16]
 8003da2:	061a      	lsls	r2, r3, #24
 8003da4:	7c7b      	ldrb	r3, [r7, #17]
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	431a      	orrs	r2, r3
 8003daa:	7cbb      	ldrb	r3, [r7, #18]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	4313      	orrs	r3, r2
 8003db0:	7cfa      	ldrb	r2, [r7, #19]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	0d1b      	lsrs	r3, r3, #20
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003dd0:	89fb      	ldrh	r3, [r7, #14]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	214b      	movs	r1, #75	@ 0x4b
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fb9c 	bl	8004516 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003dde:	89fb      	ldrh	r3, [r7, #14]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2200      	movs	r2, #0
 8003de4:	214b      	movs	r1, #75	@ 0x4b
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fb95 	bl	8004516 <IOE_Write>
}
 8003dec:	bf00      	nop
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8003dfe:	f000 fb84 	bl	800450a <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	211f      	movs	r1, #31
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fe76 	bl	8003af8 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fe36 	bl	8003a80 <stmpe811_EnableGlobalIT>
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fe47 	bl	8003abc <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	211f      	movs	r1, #31
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fe81 	bl	8003b3a <stmpe811_DisableITSource>
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	211f      	movs	r1, #31
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff fe99 	bl	8003b86 <stmpe811_ReadGITStatus>
 8003e54:	4603      	mov	r3, r0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	211f      	movs	r1, #31
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fea1 	bl	8003bb4 <stmpe811_ClearGlobalIT>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]
 8003e8e:	e00b      	b.n	8003ea8 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	4a0a      	ldr	r2, [pc, #40]	@ (8003ebc <stmpe811_GetInstance+0x40>)
 8003e94:	5cd3      	ldrb	r3, [r2, r3]
 8003e96:	461a      	mov	r2, r3
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	e006      	b.n	8003eb0 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d9f0      	bls.n	8003e90 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8003eae:	23ff      	movs	r3, #255	@ 0xff
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	20008fec 	.word	0x20008fec

08003ec0 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	@ 0x28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a33      	ldr	r2, [pc, #204]	@ (8003f9c <I2Cx_MspInit+0xdc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d15f      	bne.n	8003f92 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	4b32      	ldr	r3, [pc, #200]	@ (8003fa0 <I2Cx_MspInit+0xe0>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eda:	4a31      	ldr	r2, [pc, #196]	@ (8003fa0 <I2Cx_MspInit+0xe0>)
 8003edc:	f043 0304 	orr.w	r3, r3, #4
 8003ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8003fa0 <I2Cx_MspInit+0xe0>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa0 <I2Cx_MspInit+0xe0>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8003fa0 <I2Cx_MspInit+0xe0>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003efe:	4b28      	ldr	r3, [pc, #160]	@ (8003fa0 <I2Cx_MspInit+0xe0>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8003f0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003f10:	2312      	movs	r3, #18
 8003f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003f20:	f107 0314 	add.w	r3, r7, #20
 8003f24:	4619      	mov	r1, r3
 8003f26:	481f      	ldr	r0, [pc, #124]	@ (8003fa4 <I2Cx_MspInit+0xe4>)
 8003f28:	f002 fb68 	bl	80065fc <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8003f2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f30:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003f32:	f107 0314 	add.w	r3, r7, #20
 8003f36:	4619      	mov	r1, r3
 8003f38:	481b      	ldr	r0, [pc, #108]	@ (8003fa8 <I2Cx_MspInit+0xe8>)
 8003f3a:	f002 fb5f 	bl	80065fc <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <I2Cx_MspInit+0xe0>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	4a16      	ldr	r2, [pc, #88]	@ (8003fa0 <I2Cx_MspInit+0xe0>)
 8003f48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f4e:	4b14      	ldr	r3, [pc, #80]	@ (8003fa0 <I2Cx_MspInit+0xe0>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 8003f5a:	4b11      	ldr	r3, [pc, #68]	@ (8003fa0 <I2Cx_MspInit+0xe0>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	4a10      	ldr	r2, [pc, #64]	@ (8003fa0 <I2Cx_MspInit+0xe0>)
 8003f60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f64:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 8003f66:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa0 <I2Cx_MspInit+0xe0>)
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa0 <I2Cx_MspInit+0xe0>)
 8003f6c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f70:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003f72:	2200      	movs	r2, #0
 8003f74:	210f      	movs	r1, #15
 8003f76:	2048      	movs	r0, #72	@ 0x48
 8003f78:	f001 fb8c 	bl	8005694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003f7c:	2048      	movs	r0, #72	@ 0x48
 8003f7e:	f001 fba5 	bl	80056cc <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003f82:	2200      	movs	r2, #0
 8003f84:	210f      	movs	r1, #15
 8003f86:	2049      	movs	r0, #73	@ 0x49
 8003f88:	f001 fb84 	bl	8005694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003f8c:	2049      	movs	r0, #73	@ 0x49
 8003f8e:	f001 fb9d 	bl	80056cc <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8003f92:	bf00      	nop
 8003f94:	3728      	adds	r7, #40	@ 0x28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40005c00 	.word	0x40005c00
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40020000 	.word	0x40020000
 8003fa8:	40020800 	.word	0x40020800

08003fac <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003fb0:	4814      	ldr	r0, [pc, #80]	@ (8004004 <I2Cx_Init+0x58>)
 8003fb2:	f005 fbc9 	bl	8009748 <HAL_I2C_GetState>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d121      	bne.n	8004000 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8003fbc:	4b11      	ldr	r3, [pc, #68]	@ (8004004 <I2Cx_Init+0x58>)
 8003fbe:	4a12      	ldr	r2, [pc, #72]	@ (8004008 <I2Cx_Init+0x5c>)
 8003fc0:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8003fc2:	4b10      	ldr	r3, [pc, #64]	@ (8004004 <I2Cx_Init+0x58>)
 8003fc4:	4a11      	ldr	r2, [pc, #68]	@ (800400c <I2Cx_Init+0x60>)
 8003fc6:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004004 <I2Cx_Init+0x58>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <I2Cx_Init+0x58>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <I2Cx_Init+0x58>)
 8003fd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003fda:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003fdc:	4b09      	ldr	r3, [pc, #36]	@ (8004004 <I2Cx_Init+0x58>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8003fe2:	4b08      	ldr	r3, [pc, #32]	@ (8004004 <I2Cx_Init+0x58>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003fe8:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <I2Cx_Init+0x58>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 8003fee:	4b05      	ldr	r3, [pc, #20]	@ (8004004 <I2Cx_Init+0x58>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8003ff4:	4803      	ldr	r0, [pc, #12]	@ (8004004 <I2Cx_Init+0x58>)
 8003ff6:	f7ff ff63 	bl	8003ec0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8003ffa:	4802      	ldr	r0, [pc, #8]	@ (8004004 <I2Cx_Init+0x58>)
 8003ffc:	f004 ff04 	bl	8008e08 <HAL_I2C_Init>
  }
}
 8004000:	bf00      	nop
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20008ff0 	.word	0x20008ff0
 8004008:	40005c00 	.word	0x40005c00
 800400c:	000186a0 	.word	0x000186a0

08004010 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	603b      	str	r3, [r7, #0]
 800401a:	4b13      	ldr	r3, [pc, #76]	@ (8004068 <I2Cx_ITConfig+0x58>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401e:	4a12      	ldr	r2, [pc, #72]	@ (8004068 <I2Cx_ITConfig+0x58>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6313      	str	r3, [r2, #48]	@ 0x30
 8004026:	4b10      	ldr	r3, [pc, #64]	@ (8004068 <I2Cx_ITConfig+0x58>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8004032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004036:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8004038:	2301      	movs	r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800403c:	2300      	movs	r3, #0
 800403e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8004040:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004044:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8004046:	1d3b      	adds	r3, r7, #4
 8004048:	4619      	mov	r1, r3
 800404a:	4808      	ldr	r0, [pc, #32]	@ (800406c <I2Cx_ITConfig+0x5c>)
 800404c:	f002 fad6 	bl	80065fc <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8004050:	2200      	movs	r2, #0
 8004052:	210f      	movs	r1, #15
 8004054:	2028      	movs	r0, #40	@ 0x28
 8004056:	f001 fb1d 	bl	8005694 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800405a:	2028      	movs	r0, #40	@ 0x28
 800405c:	f001 fb36 	bl	80056cc <HAL_NVIC_EnableIRQ>
}
 8004060:	bf00      	nop
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40023800 	.word	0x40023800
 800406c:	40020000 	.word	0x40020000

08004070 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af04      	add	r7, sp, #16
 8004076:	4603      	mov	r3, r0
 8004078:	71fb      	strb	r3, [r7, #7]
 800407a:	460b      	mov	r3, r1
 800407c:	71bb      	strb	r3, [r7, #6]
 800407e:	4613      	mov	r3, r2
 8004080:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	b299      	uxth	r1, r3
 800408a:	79bb      	ldrb	r3, [r7, #6]
 800408c:	b29a      	uxth	r2, r3
 800408e:	4b0b      	ldr	r3, [pc, #44]	@ (80040bc <I2Cx_WriteData+0x4c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	9302      	str	r3, [sp, #8]
 8004094:	2301      	movs	r3, #1
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	1d7b      	adds	r3, r7, #5
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2301      	movs	r3, #1
 800409e:	4808      	ldr	r0, [pc, #32]	@ (80040c0 <I2Cx_WriteData+0x50>)
 80040a0:	f005 f826 	bl	80090f0 <HAL_I2C_Mem_Write>
 80040a4:	4603      	mov	r3, r0
 80040a6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80040ae:	f000 f863 	bl	8004178 <I2Cx_Error>
  }
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000244 	.word	0x20000244
 80040c0:	20008ff0 	.word	0x20008ff0

080040c4 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af04      	add	r7, sp, #16
 80040ca:	4603      	mov	r3, r0
 80040cc:	460a      	mov	r2, r1
 80040ce:	71fb      	strb	r3, [r7, #7]
 80040d0:	4613      	mov	r3, r2
 80040d2:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	b299      	uxth	r1, r3
 80040e0:	79bb      	ldrb	r3, [r7, #6]
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004114 <I2Cx_ReadData+0x50>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	9302      	str	r3, [sp, #8]
 80040ea:	2301      	movs	r3, #1
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	f107 030e 	add.w	r3, r7, #14
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	2301      	movs	r3, #1
 80040f6:	4808      	ldr	r0, [pc, #32]	@ (8004118 <I2Cx_ReadData+0x54>)
 80040f8:	f005 f8f4 	bl	80092e4 <HAL_I2C_Mem_Read>
 80040fc:	4603      	mov	r3, r0
 80040fe:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8004106:	f000 f837 	bl	8004178 <I2Cx_Error>

  }
  return value;
 800410a:	7bbb      	ldrb	r3, [r7, #14]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20000244 	.word	0x20000244
 8004118:	20008ff0 	.word	0x20008ff0

0800411c <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af04      	add	r7, sp, #16
 8004122:	603a      	str	r2, [r7, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	4603      	mov	r3, r0
 8004128:	71fb      	strb	r3, [r7, #7]
 800412a:	460b      	mov	r3, r1
 800412c:	71bb      	strb	r3, [r7, #6]
 800412e:	4613      	mov	r3, r2
 8004130:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	b299      	uxth	r1, r3
 800413a:	79bb      	ldrb	r3, [r7, #6]
 800413c:	b29a      	uxth	r2, r3
 800413e:	4b0c      	ldr	r3, [pc, #48]	@ (8004170 <I2Cx_ReadBuffer+0x54>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	9302      	str	r3, [sp, #8]
 8004144:	88bb      	ldrh	r3, [r7, #4]
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	2301      	movs	r3, #1
 800414e:	4809      	ldr	r0, [pc, #36]	@ (8004174 <I2Cx_ReadBuffer+0x58>)
 8004150:	f005 f8c8 	bl	80092e4 <HAL_I2C_Mem_Read>
 8004154:	4603      	mov	r3, r0
 8004156:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800415e:	2300      	movs	r3, #0
 8004160:	e002      	b.n	8004168 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8004162:	f000 f809 	bl	8004178 <I2Cx_Error>

    return 1;
 8004166:	2301      	movs	r3, #1
  }
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000244 	.word	0x20000244
 8004174:	20008ff0 	.word	0x20008ff0

08004178 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 800417c:	4803      	ldr	r0, [pc, #12]	@ (800418c <I2Cx_Error+0x14>)
 800417e:	f004 ff87 	bl	8009090 <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8004182:	f7ff ff13 	bl	8003fac <I2Cx_Init>
}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20008ff0 	.word	0x20008ff0

08004190 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8004194:	4819      	ldr	r0, [pc, #100]	@ (80041fc <SPIx_Init+0x6c>)
 8004196:	f007 fe79 	bl	800be8c <HAL_SPI_GetState>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d12b      	bne.n	80041f8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80041a0:	4b16      	ldr	r3, [pc, #88]	@ (80041fc <SPIx_Init+0x6c>)
 80041a2:	4a17      	ldr	r2, [pc, #92]	@ (8004200 <SPIx_Init+0x70>)
 80041a4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80041a6:	4b15      	ldr	r3, [pc, #84]	@ (80041fc <SPIx_Init+0x6c>)
 80041a8:	2218      	movs	r2, #24
 80041aa:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80041ac:	4b13      	ldr	r3, [pc, #76]	@ (80041fc <SPIx_Init+0x6c>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80041b2:	4b12      	ldr	r3, [pc, #72]	@ (80041fc <SPIx_Init+0x6c>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80041b8:	4b10      	ldr	r3, [pc, #64]	@ (80041fc <SPIx_Init+0x6c>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80041be:	4b0f      	ldr	r3, [pc, #60]	@ (80041fc <SPIx_Init+0x6c>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80041c4:	4b0d      	ldr	r3, [pc, #52]	@ (80041fc <SPIx_Init+0x6c>)
 80041c6:	2207      	movs	r2, #7
 80041c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80041ca:	4b0c      	ldr	r3, [pc, #48]	@ (80041fc <SPIx_Init+0x6c>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80041d0:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <SPIx_Init+0x6c>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80041d6:	4b09      	ldr	r3, [pc, #36]	@ (80041fc <SPIx_Init+0x6c>)
 80041d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041dc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80041de:	4b07      	ldr	r3, [pc, #28]	@ (80041fc <SPIx_Init+0x6c>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80041e4:	4b05      	ldr	r3, [pc, #20]	@ (80041fc <SPIx_Init+0x6c>)
 80041e6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80041ea:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80041ec:	4803      	ldr	r0, [pc, #12]	@ (80041fc <SPIx_Init+0x6c>)
 80041ee:	f000 f853 	bl	8004298 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80041f2:	4802      	ldr	r0, [pc, #8]	@ (80041fc <SPIx_Init+0x6c>)
 80041f4:	f007 f993 	bl	800b51e <HAL_SPI_Init>
  }
}
 80041f8:	bf00      	nop
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20009044 	.word	0x20009044
 8004200:	40015000 	.word	0x40015000

08004204 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	b29a      	uxth	r2, r3
 8004216:	4b09      	ldr	r3, [pc, #36]	@ (800423c <SPIx_Read+0x38>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f107 0108 	add.w	r1, r7, #8
 800421e:	4808      	ldr	r0, [pc, #32]	@ (8004240 <SPIx_Read+0x3c>)
 8004220:	f007 fb72 	bl	800b908 <HAL_SPI_Receive>
 8004224:	4603      	mov	r3, r0
 8004226:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800422e:	f000 f827 	bl	8004280 <SPIx_Error>
  }

  return readvalue;
 8004232:	68bb      	ldr	r3, [r7, #8]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20000248 	.word	0x20000248
 8004240:	20009044 	.word	0x20009044

08004244 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8004252:	4b09      	ldr	r3, [pc, #36]	@ (8004278 <SPIx_Write+0x34>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1db9      	adds	r1, r7, #6
 8004258:	2201      	movs	r2, #1
 800425a:	4808      	ldr	r0, [pc, #32]	@ (800427c <SPIx_Write+0x38>)
 800425c:	f007 fa10 	bl	800b680 <HAL_SPI_Transmit>
 8004260:	4603      	mov	r3, r0
 8004262:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800426a:	f000 f809 	bl	8004280 <SPIx_Error>
  }
}
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000248 	.word	0x20000248
 800427c:	20009044 	.word	0x20009044

08004280 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004284:	4803      	ldr	r0, [pc, #12]	@ (8004294 <SPIx_Error+0x14>)
 8004286:	f007 f9d3 	bl	800b630 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800428a:	f7ff ff81 	bl	8004190 <SPIx_Init>
}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20009044 	.word	0x20009044

08004298 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	@ 0x28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80042a0:	2300      	movs	r3, #0
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	4b17      	ldr	r3, [pc, #92]	@ (8004304 <SPIx_MspInit+0x6c>)
 80042a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a8:	4a16      	ldr	r2, [pc, #88]	@ (8004304 <SPIx_MspInit+0x6c>)
 80042aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80042b0:	4b14      	ldr	r3, [pc, #80]	@ (8004304 <SPIx_MspInit+0x6c>)
 80042b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	4b10      	ldr	r3, [pc, #64]	@ (8004304 <SPIx_MspInit+0x6c>)
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	4a0f      	ldr	r2, [pc, #60]	@ (8004304 <SPIx_MspInit+0x6c>)
 80042c6:	f043 0320 	orr.w	r3, r3, #32
 80042ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80042cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <SPIx_MspInit+0x6c>)
 80042ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80042d8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80042dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80042de:	2302      	movs	r3, #2
 80042e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80042e2:	2302      	movs	r3, #2
 80042e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80042e6:	2301      	movs	r3, #1
 80042e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80042ea:	2305      	movs	r3, #5
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80042ee:	f107 0314 	add.w	r3, r7, #20
 80042f2:	4619      	mov	r1, r3
 80042f4:	4804      	ldr	r0, [pc, #16]	@ (8004308 <SPIx_MspInit+0x70>)
 80042f6:	f002 f981 	bl	80065fc <HAL_GPIO_Init>
}
 80042fa:	bf00      	nop
 80042fc:	3728      	adds	r7, #40	@ 0x28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800
 8004308:	40021400 	.word	0x40021400

0800430c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8004312:	4b36      	ldr	r3, [pc, #216]	@ (80043ec <LCD_IO_Init+0xe0>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d164      	bne.n	80043e4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800431a:	4b34      	ldr	r3, [pc, #208]	@ (80043ec <LCD_IO_Init+0xe0>)
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8004320:	2300      	movs	r3, #0
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	4b32      	ldr	r3, [pc, #200]	@ (80043f0 <LCD_IO_Init+0xe4>)
 8004326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004328:	4a31      	ldr	r2, [pc, #196]	@ (80043f0 <LCD_IO_Init+0xe4>)
 800432a:	f043 0308 	orr.w	r3, r3, #8
 800432e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004330:	4b2f      	ldr	r3, [pc, #188]	@ (80043f0 <LCD_IO_Init+0xe4>)
 8004332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800433c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004340:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004342:	2301      	movs	r3, #1
 8004344:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800434a:	2302      	movs	r3, #2
 800434c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800434e:	f107 030c 	add.w	r3, r7, #12
 8004352:	4619      	mov	r1, r3
 8004354:	4827      	ldr	r0, [pc, #156]	@ (80043f4 <LCD_IO_Init+0xe8>)
 8004356:	f002 f951 	bl	80065fc <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	4b24      	ldr	r3, [pc, #144]	@ (80043f0 <LCD_IO_Init+0xe4>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004362:	4a23      	ldr	r2, [pc, #140]	@ (80043f0 <LCD_IO_Init+0xe4>)
 8004364:	f043 0308 	orr.w	r3, r3, #8
 8004368:	6313      	str	r3, [r2, #48]	@ 0x30
 800436a:	4b21      	ldr	r3, [pc, #132]	@ (80043f0 <LCD_IO_Init+0xe4>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8004376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800437a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800437c:	2301      	movs	r3, #1
 800437e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004384:	2302      	movs	r3, #2
 8004386:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8004388:	f107 030c 	add.w	r3, r7, #12
 800438c:	4619      	mov	r1, r3
 800438e:	4819      	ldr	r0, [pc, #100]	@ (80043f4 <LCD_IO_Init+0xe8>)
 8004390:	f002 f934 	bl	80065fc <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8004394:	2300      	movs	r3, #0
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	4b15      	ldr	r3, [pc, #84]	@ (80043f0 <LCD_IO_Init+0xe4>)
 800439a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439c:	4a14      	ldr	r2, [pc, #80]	@ (80043f0 <LCD_IO_Init+0xe4>)
 800439e:	f043 0304 	orr.w	r3, r3, #4
 80043a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80043a4:	4b12      	ldr	r3, [pc, #72]	@ (80043f0 <LCD_IO_Init+0xe4>)
 80043a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80043b0:	2304      	movs	r3, #4
 80043b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80043b4:	2301      	movs	r3, #1
 80043b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80043bc:	2302      	movs	r3, #2
 80043be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80043c0:	f107 030c 	add.w	r3, r7, #12
 80043c4:	4619      	mov	r1, r3
 80043c6:	480c      	ldr	r0, [pc, #48]	@ (80043f8 <LCD_IO_Init+0xec>)
 80043c8:	f002 f918 	bl	80065fc <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80043cc:	2200      	movs	r2, #0
 80043ce:	2104      	movs	r1, #4
 80043d0:	4809      	ldr	r0, [pc, #36]	@ (80043f8 <LCD_IO_Init+0xec>)
 80043d2:	f002 fbcb 	bl	8006b6c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80043d6:	2201      	movs	r2, #1
 80043d8:	2104      	movs	r1, #4
 80043da:	4807      	ldr	r0, [pc, #28]	@ (80043f8 <LCD_IO_Init+0xec>)
 80043dc:	f002 fbc6 	bl	8006b6c <HAL_GPIO_WritePin>

    SPIx_Init();
 80043e0:	f7ff fed6 	bl	8004190 <SPIx_Init>
  }
}
 80043e4:	bf00      	nop
 80043e6:	3720      	adds	r7, #32
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	2000909c 	.word	0x2000909c
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40020c00 	.word	0x40020c00
 80043f8:	40020800 	.word	0x40020800

080043fc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004406:	2201      	movs	r2, #1
 8004408:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800440c:	480a      	ldr	r0, [pc, #40]	@ (8004438 <LCD_IO_WriteData+0x3c>)
 800440e:	f002 fbad 	bl	8006b6c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8004412:	2200      	movs	r2, #0
 8004414:	2104      	movs	r1, #4
 8004416:	4809      	ldr	r0, [pc, #36]	@ (800443c <LCD_IO_WriteData+0x40>)
 8004418:	f002 fba8 	bl	8006b6c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff ff10 	bl	8004244 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004424:	2201      	movs	r2, #1
 8004426:	2104      	movs	r1, #4
 8004428:	4804      	ldr	r0, [pc, #16]	@ (800443c <LCD_IO_WriteData+0x40>)
 800442a:	f002 fb9f 	bl	8006b6c <HAL_GPIO_WritePin>
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40020c00 	.word	0x40020c00
 800443c:	40020800 	.word	0x40020800

08004440 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800444a:	2200      	movs	r2, #0
 800444c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004450:	480a      	ldr	r0, [pc, #40]	@ (800447c <LCD_IO_WriteReg+0x3c>)
 8004452:	f002 fb8b 	bl	8006b6c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8004456:	2200      	movs	r2, #0
 8004458:	2104      	movs	r1, #4
 800445a:	4809      	ldr	r0, [pc, #36]	@ (8004480 <LCD_IO_WriteReg+0x40>)
 800445c:	f002 fb86 	bl	8006b6c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	b29b      	uxth	r3, r3
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff feed 	bl	8004244 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800446a:	2201      	movs	r2, #1
 800446c:	2104      	movs	r1, #4
 800446e:	4804      	ldr	r0, [pc, #16]	@ (8004480 <LCD_IO_WriteReg+0x40>)
 8004470:	f002 fb7c 	bl	8006b6c <HAL_GPIO_WritePin>
}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40020c00 	.word	0x40020c00
 8004480:	40020800 	.word	0x40020800

08004484 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	460a      	mov	r2, r1
 800448e:	80fb      	strh	r3, [r7, #6]
 8004490:	4613      	mov	r3, r2
 8004492:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8004498:	2200      	movs	r2, #0
 800449a:	2104      	movs	r1, #4
 800449c:	4810      	ldr	r0, [pc, #64]	@ (80044e0 <LCD_IO_ReadData+0x5c>)
 800449e:	f002 fb65 	bl	8006b6c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80044a2:	2200      	movs	r2, #0
 80044a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80044a8:	480e      	ldr	r0, [pc, #56]	@ (80044e4 <LCD_IO_ReadData+0x60>)
 80044aa:	f002 fb5f 	bl	8006b6c <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fec7 	bl	8004244 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 80044b6:	797b      	ldrb	r3, [r7, #5]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fea3 	bl	8004204 <SPIx_Read>
 80044be:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80044c0:	2201      	movs	r2, #1
 80044c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80044c6:	4807      	ldr	r0, [pc, #28]	@ (80044e4 <LCD_IO_ReadData+0x60>)
 80044c8:	f002 fb50 	bl	8006b6c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80044cc:	2201      	movs	r2, #1
 80044ce:	2104      	movs	r1, #4
 80044d0:	4803      	ldr	r0, [pc, #12]	@ (80044e0 <LCD_IO_ReadData+0x5c>)
 80044d2:	f002 fb4b 	bl	8006b6c <HAL_GPIO_WritePin>

  return readvalue;
 80044d6:	68fb      	ldr	r3, [r7, #12]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40020800 	.word	0x40020800
 80044e4:	40020c00 	.word	0x40020c00

080044e8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fff3 	bl	80054dc <HAL_Delay>
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8004502:	f7ff fd53 	bl	8003fac <I2Cx_Init>
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}

0800450a <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800450e:	f7ff fd7f 	bl	8004010 <I2Cx_ITConfig>
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}

08004516 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	4603      	mov	r3, r0
 800451e:	71fb      	strb	r3, [r7, #7]
 8004520:	460b      	mov	r3, r1
 8004522:	71bb      	strb	r3, [r7, #6]
 8004524:	4613      	mov	r3, r2
 8004526:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8004528:	797a      	ldrb	r2, [r7, #5]
 800452a:	79b9      	ldrb	r1, [r7, #6]
 800452c:	79fb      	ldrb	r3, [r7, #7]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fd9e 	bl	8004070 <I2Cx_WriteData>
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	460a      	mov	r2, r1
 8004546:	71fb      	strb	r3, [r7, #7]
 8004548:	4613      	mov	r3, r2
 800454a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800454c:	79ba      	ldrb	r2, [r7, #6]
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	4611      	mov	r1, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fdb6 	bl	80040c4 <I2Cx_ReadData>
 8004558:	4603      	mov	r3, r0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	603a      	str	r2, [r7, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	4603      	mov	r3, r0
 800456e:	71fb      	strb	r3, [r7, #7]
 8004570:	460b      	mov	r3, r1
 8004572:	71bb      	strb	r3, [r7, #6]
 8004574:	4613      	mov	r3, r2
 8004576:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8004578:	88bb      	ldrh	r3, [r7, #4]
 800457a:	79b9      	ldrb	r1, [r7, #6]
 800457c:	79f8      	ldrb	r0, [r7, #7]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	f7ff fdcc 	bl	800411c <I2Cx_ReadBuffer>
 8004584:	4603      	mov	r3, r0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 ffa0 	bl	80054dc <HAL_Delay>
}
 800459c:	bf00      	nop
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 80045a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004660 <BSP_LCD_Init+0xbc>)
 80045aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004664 <BSP_LCD_Init+0xc0>)
 80045ac:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80045ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004660 <BSP_LCD_Init+0xbc>)
 80045b0:	2209      	movs	r2, #9
 80045b2:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80045b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004660 <BSP_LCD_Init+0xbc>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80045ba:	4b29      	ldr	r3, [pc, #164]	@ (8004660 <BSP_LCD_Init+0xbc>)
 80045bc:	221d      	movs	r2, #29
 80045be:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80045c0:	4b27      	ldr	r3, [pc, #156]	@ (8004660 <BSP_LCD_Init+0xbc>)
 80045c2:	2203      	movs	r2, #3
 80045c4:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 80045c6:	4b26      	ldr	r3, [pc, #152]	@ (8004660 <BSP_LCD_Init+0xbc>)
 80045c8:	f240 120d 	movw	r2, #269	@ 0x10d
 80045cc:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 80045ce:	4b24      	ldr	r3, [pc, #144]	@ (8004660 <BSP_LCD_Init+0xbc>)
 80045d0:	f240 1243 	movw	r2, #323	@ 0x143
 80045d4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 80045d6:	4b22      	ldr	r3, [pc, #136]	@ (8004660 <BSP_LCD_Init+0xbc>)
 80045d8:	f240 1217 	movw	r2, #279	@ 0x117
 80045dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 80045de:	4b20      	ldr	r3, [pc, #128]	@ (8004660 <BSP_LCD_Init+0xbc>)
 80045e0:	f240 1247 	movw	r2, #327	@ 0x147
 80045e4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 80045e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004660 <BSP_LCD_Init+0xbc>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 80045ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004660 <BSP_LCD_Init+0xbc>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 80045f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004660 <BSP_LCD_Init+0xbc>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80045fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004668 <BSP_LCD_Init+0xc4>)
 8004600:	2208      	movs	r2, #8
 8004602:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8004604:	4b18      	ldr	r3, [pc, #96]	@ (8004668 <BSP_LCD_Init+0xc4>)
 8004606:	22c0      	movs	r2, #192	@ 0xc0
 8004608:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800460a:	4b17      	ldr	r3, [pc, #92]	@ (8004668 <BSP_LCD_Init+0xc4>)
 800460c:	2204      	movs	r2, #4
 800460e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004610:	4b15      	ldr	r3, [pc, #84]	@ (8004668 <BSP_LCD_Init+0xc4>)
 8004612:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004616:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004618:	4813      	ldr	r0, [pc, #76]	@ (8004668 <BSP_LCD_Init+0xc4>)
 800461a:	f006 fd2f 	bl	800b07c <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <BSP_LCD_Init+0xbc>)
 8004620:	2200      	movs	r2, #0
 8004622:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004624:	4b0e      	ldr	r3, [pc, #56]	@ (8004660 <BSP_LCD_Init+0xbc>)
 8004626:	2200      	movs	r2, #0
 8004628:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800462a:	4b0d      	ldr	r3, [pc, #52]	@ (8004660 <BSP_LCD_Init+0xbc>)
 800462c:	2200      	movs	r2, #0
 800462e:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004630:	4b0b      	ldr	r3, [pc, #44]	@ (8004660 <BSP_LCD_Init+0xbc>)
 8004632:	2200      	movs	r2, #0
 8004634:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8004636:	f000 fa6b 	bl	8004b10 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 800463a:	4809      	ldr	r0, [pc, #36]	@ (8004660 <BSP_LCD_Init+0xbc>)
 800463c:	f005 fcc2 	bl	8009fc4 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8004640:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <BSP_LCD_Init+0xc8>)
 8004642:	4a0b      	ldr	r2, [pc, #44]	@ (8004670 <BSP_LCD_Init+0xcc>)
 8004644:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8004646:	4b09      	ldr	r3, [pc, #36]	@ (800466c <BSP_LCD_Init+0xc8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800464e:	f000 fc4d 	bl	8004eec <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004652:	4808      	ldr	r0, [pc, #32]	@ (8004674 <BSP_LCD_Init+0xd0>)
 8004654:	f000 f8be 	bl	80047d4 <BSP_LCD_SetFont>

  return LCD_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	200090a0 	.word	0x200090a0
 8004664:	40016800 	.word	0x40016800
 8004668:	20009188 	.word	0x20009188
 800466c:	200091d4 	.word	0x200091d4
 8004670:	200001e4 	.word	0x200001e4
 8004674:	2000024c 	.word	0x2000024c

08004678 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800467c:	4b03      	ldr	r3, [pc, #12]	@ (800468c <BSP_LCD_GetXSize+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004682:	4798      	blx	r3
 8004684:	4603      	mov	r3, r0
}
 8004686:	4618      	mov	r0, r3
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	200091d4 	.word	0x200091d4

08004690 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8004694:	4b03      	ldr	r3, [pc, #12]	@ (80046a4 <BSP_LCD_GetYSize+0x14>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469a:	4798      	blx	r3
 800469c:	4603      	mov	r3, r0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	200091d4 	.word	0x200091d4

080046a8 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b090      	sub	sp, #64	@ 0x40
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	6039      	str	r1, [r7, #0]
 80046b2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80046b8:	f7ff ffde 	bl	8004678 <BSP_LCD_GetXSize>
 80046bc:	4603      	mov	r3, r0
 80046be:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 80046c4:	f7ff ffe4 	bl	8004690 <BSP_LCD_GetYSize>
 80046c8:	4603      	mov	r3, r0
 80046ca:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80046d4:	23ff      	movs	r3, #255	@ 0xff
 80046d6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80046ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80046f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80046f4:	2307      	movs	r3, #7
 80046f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80046f8:	f7ff ffbe 	bl	8004678 <BSP_LCD_GetXSize>
 80046fc:	4603      	mov	r3, r0
 80046fe:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8004700:	f7ff ffc6 	bl	8004690 <BSP_LCD_GetYSize>
 8004704:	4603      	mov	r3, r0
 8004706:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8004708:	88fa      	ldrh	r2, [r7, #6]
 800470a:	f107 030c 	add.w	r3, r7, #12
 800470e:	4619      	mov	r1, r3
 8004710:	4814      	ldr	r0, [pc, #80]	@ (8004764 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004712:	f005 fde9 	bl	800a2e8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	4913      	ldr	r1, [pc, #76]	@ (8004768 <BSP_LCD_LayerDefaultInit+0xc0>)
 800471a:	4613      	mov	r3, r2
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3304      	adds	r3, #4
 8004726:	f04f 32ff 	mov.w	r2, #4294967295
 800472a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800472c:	88fa      	ldrh	r2, [r7, #6]
 800472e:	490e      	ldr	r1, [pc, #56]	@ (8004768 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004730:	4613      	mov	r3, r2
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	3308      	adds	r3, #8
 800473c:	4a0b      	ldr	r2, [pc, #44]	@ (800476c <BSP_LCD_LayerDefaultInit+0xc4>)
 800473e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8004740:	88fa      	ldrh	r2, [r7, #6]
 8004742:	4909      	ldr	r1, [pc, #36]	@ (8004768 <BSP_LCD_LayerDefaultInit+0xc0>)
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8004752:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8004754:	4803      	ldr	r0, [pc, #12]	@ (8004764 <BSP_LCD_LayerDefaultInit+0xbc>)
 8004756:	f005 fe05 	bl	800a364 <HAL_LTDC_EnableDither>
}
 800475a:	bf00      	nop
 800475c:	3740      	adds	r7, #64	@ 0x40
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	200090a0 	.word	0x200090a0
 8004768:	200091bc 	.word	0x200091bc
 800476c:	2000024c 	.word	0x2000024c

08004770 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004778:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <BSP_LCD_SetTextColor+0x28>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4907      	ldr	r1, [pc, #28]	@ (800479c <BSP_LCD_SetTextColor+0x2c>)
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	601a      	str	r2, [r3, #0]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	200091b8 	.word	0x200091b8
 800479c:	200091bc 	.word	0x200091bc

080047a0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80047a8:	4b08      	ldr	r3, [pc, #32]	@ (80047cc <BSP_LCD_SetBackColor+0x2c>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4908      	ldr	r1, [pc, #32]	@ (80047d0 <BSP_LCD_SetBackColor+0x30>)
 80047ae:	4613      	mov	r3, r2
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	3304      	adds	r3, #4
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	601a      	str	r2, [r3, #0]
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	200091b8 	.word	0x200091b8
 80047d0:	200091bc 	.word	0x200091bc

080047d4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80047dc:	4b08      	ldr	r3, [pc, #32]	@ (8004800 <BSP_LCD_SetFont+0x2c>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4908      	ldr	r1, [pc, #32]	@ (8004804 <BSP_LCD_SetFont+0x30>)
 80047e2:	4613      	mov	r3, r2
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	3308      	adds	r3, #8
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	601a      	str	r2, [r3, #0]
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	200091b8 	.word	0x200091b8
 8004804:	200091bc 	.word	0x200091bc

08004808 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8004808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800480a:	b085      	sub	sp, #20
 800480c:	af02      	add	r7, sp, #8
 800480e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8004810:	4b0f      	ldr	r3, [pc, #60]	@ (8004850 <BSP_LCD_Clear+0x48>)
 8004812:	681c      	ldr	r4, [r3, #0]
 8004814:	4b0e      	ldr	r3, [pc, #56]	@ (8004850 <BSP_LCD_Clear+0x48>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a0e      	ldr	r2, [pc, #56]	@ (8004854 <BSP_LCD_Clear+0x4c>)
 800481a:	2134      	movs	r1, #52	@ 0x34
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	4413      	add	r3, r2
 8004822:	335c      	adds	r3, #92	@ 0x5c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461e      	mov	r6, r3
 8004828:	f7ff ff26 	bl	8004678 <BSP_LCD_GetXSize>
 800482c:	4605      	mov	r5, r0
 800482e:	f7ff ff2f 	bl	8004690 <BSP_LCD_GetYSize>
 8004832:	4602      	mov	r2, r0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	2300      	movs	r3, #0
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	462a      	mov	r2, r5
 8004840:	4631      	mov	r1, r6
 8004842:	4620      	mov	r0, r4
 8004844:	f000 fb1a 	bl	8004e7c <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004850:	200091b8 	.word	0x200091b8
 8004854:	200090a0 	.word	0x200090a0

08004858 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	80fb      	strh	r3, [r7, #6]
 8004862:	460b      	mov	r3, r1
 8004864:	80bb      	strh	r3, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800486a:	4b1b      	ldr	r3, [pc, #108]	@ (80048d8 <BSP_LCD_DisplayChar+0x80>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	491b      	ldr	r1, [pc, #108]	@ (80048dc <BSP_LCD_DisplayChar+0x84>)
 8004870:	4613      	mov	r3, r2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	3308      	adds	r3, #8
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004886:	4b14      	ldr	r3, [pc, #80]	@ (80048d8 <BSP_LCD_DisplayChar+0x80>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4c14      	ldr	r4, [pc, #80]	@ (80048dc <BSP_LCD_DisplayChar+0x84>)
 800488c:	4613      	mov	r3, r2
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4423      	add	r3, r4
 8004896:	3308      	adds	r3, #8
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800489c:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80048a0:	4b0d      	ldr	r3, [pc, #52]	@ (80048d8 <BSP_LCD_DisplayChar+0x80>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4c0d      	ldr	r4, [pc, #52]	@ (80048dc <BSP_LCD_DisplayChar+0x84>)
 80048a6:	4613      	mov	r3, r2
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4423      	add	r3, r4
 80048b0:	3308      	adds	r3, #8
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	889b      	ldrh	r3, [r3, #4]
 80048b6:	3307      	adds	r3, #7
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	da00      	bge.n	80048be <BSP_LCD_DisplayChar+0x66>
 80048bc:	3307      	adds	r3, #7
 80048be:	10db      	asrs	r3, r3, #3
 80048c0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80048c4:	18ca      	adds	r2, r1, r3
 80048c6:	88b9      	ldrh	r1, [r7, #4]
 80048c8:	88fb      	ldrh	r3, [r7, #6]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fa1c 	bl	8004d08 <DrawChar>
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd90      	pop	{r4, r7, pc}
 80048d8:	200091b8 	.word	0x200091b8
 80048dc:	200091bc 	.word	0x200091bc

080048e0 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80048e0:	b5b0      	push	{r4, r5, r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60ba      	str	r2, [r7, #8]
 80048e8:	461a      	mov	r2, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	81fb      	strh	r3, [r7, #14]
 80048ee:	460b      	mov	r3, r1
 80048f0:	81bb      	strh	r3, [r7, #12]
 80048f2:	4613      	mov	r3, r2
 80048f4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80048f6:	2301      	movs	r3, #1
 80048f8:	83fb      	strh	r3, [r7, #30]
 80048fa:	2300      	movs	r3, #0
 80048fc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 800490a:	e002      	b.n	8004912 <BSP_LCD_DisplayStringAt+0x32>
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	3301      	adds	r3, #1
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	617a      	str	r2, [r7, #20]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f6      	bne.n	800490c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 800491e:	f7ff feab 	bl	8004678 <BSP_LCD_GetXSize>
 8004922:	4601      	mov	r1, r0
 8004924:	4b4b      	ldr	r3, [pc, #300]	@ (8004a54 <BSP_LCD_DisplayStringAt+0x174>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	484b      	ldr	r0, [pc, #300]	@ (8004a58 <BSP_LCD_DisplayStringAt+0x178>)
 800492a:	4613      	mov	r3, r2
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4403      	add	r3, r0
 8004934:	3308      	adds	r3, #8
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	889b      	ldrh	r3, [r3, #4]
 800493a:	fbb1 f3f3 	udiv	r3, r1, r3
 800493e:	613b      	str	r3, [r7, #16]

  switch (mode)
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	2b03      	cmp	r3, #3
 8004944:	d01c      	beq.n	8004980 <BSP_LCD_DisplayStringAt+0xa0>
 8004946:	2b03      	cmp	r3, #3
 8004948:	dc33      	bgt.n	80049b2 <BSP_LCD_DisplayStringAt+0xd2>
 800494a:	2b01      	cmp	r3, #1
 800494c:	d002      	beq.n	8004954 <BSP_LCD_DisplayStringAt+0x74>
 800494e:	2b02      	cmp	r3, #2
 8004950:	d019      	beq.n	8004986 <BSP_LCD_DisplayStringAt+0xa6>
 8004952:	e02e      	b.n	80049b2 <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	1ad1      	subs	r1, r2, r3
 800495a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a54 <BSP_LCD_DisplayStringAt+0x174>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	483e      	ldr	r0, [pc, #248]	@ (8004a58 <BSP_LCD_DisplayStringAt+0x178>)
 8004960:	4613      	mov	r3, r2
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	4413      	add	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4403      	add	r3, r0
 800496a:	3308      	adds	r3, #8
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	889b      	ldrh	r3, [r3, #4]
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	89fb      	ldrh	r3, [r7, #14]
 800497a:	4413      	add	r3, r2
 800497c:	83fb      	strh	r3, [r7, #30]
      break;
 800497e:	e01b      	b.n	80049b8 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8004980:	89fb      	ldrh	r3, [r7, #14]
 8004982:	83fb      	strh	r3, [r7, #30]
      break;
 8004984:	e018      	b.n	80049b8 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	b299      	uxth	r1, r3
 800498e:	4b31      	ldr	r3, [pc, #196]	@ (8004a54 <BSP_LCD_DisplayStringAt+0x174>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4831      	ldr	r0, [pc, #196]	@ (8004a58 <BSP_LCD_DisplayStringAt+0x178>)
 8004994:	4613      	mov	r3, r2
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4403      	add	r3, r0
 800499e:	3308      	adds	r3, #8
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	889b      	ldrh	r3, [r3, #4]
 80049a4:	fb11 f303 	smulbb	r3, r1, r3
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	89fb      	ldrh	r3, [r7, #14]
 80049ac:	4413      	add	r3, r2
 80049ae:	83fb      	strh	r3, [r7, #30]
      break;
 80049b0:	e002      	b.n	80049b8 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 80049b2:	89fb      	ldrh	r3, [r7, #14]
 80049b4:	83fb      	strh	r3, [r7, #30]
      break;
 80049b6:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80049b8:	e01a      	b.n	80049f0 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	781a      	ldrb	r2, [r3, #0]
 80049be:	89b9      	ldrh	r1, [r7, #12]
 80049c0:	8bfb      	ldrh	r3, [r7, #30]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff ff48 	bl	8004858 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80049c8:	4b22      	ldr	r3, [pc, #136]	@ (8004a54 <BSP_LCD_DisplayStringAt+0x174>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4922      	ldr	r1, [pc, #136]	@ (8004a58 <BSP_LCD_DisplayStringAt+0x178>)
 80049ce:	4613      	mov	r3, r2
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	3308      	adds	r3, #8
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	889a      	ldrh	r2, [r3, #4]
 80049de:	8bfb      	ldrh	r3, [r7, #30]
 80049e0:	4413      	add	r3, r2
 80049e2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	3301      	adds	r3, #1
 80049e8:	60bb      	str	r3, [r7, #8]
    i++;
 80049ea:	8bbb      	ldrh	r3, [r7, #28]
 80049ec:	3301      	adds	r3, #1
 80049ee:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2dc      	uxtb	r4, r3
 80049fe:	f7ff fe3b 	bl	8004678 <BSP_LCD_GetXSize>
 8004a02:	8bb9      	ldrh	r1, [r7, #28]
 8004a04:	4b13      	ldr	r3, [pc, #76]	@ (8004a54 <BSP_LCD_DisplayStringAt+0x174>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	4d13      	ldr	r5, [pc, #76]	@ (8004a58 <BSP_LCD_DisplayStringAt+0x178>)
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	442b      	add	r3, r5
 8004a14:	3308      	adds	r3, #8
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	889b      	ldrh	r3, [r3, #4]
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	1ac3      	subs	r3, r0, r3
 8004a20:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8004a22:	4b0c      	ldr	r3, [pc, #48]	@ (8004a54 <BSP_LCD_DisplayStringAt+0x174>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	480c      	ldr	r0, [pc, #48]	@ (8004a58 <BSP_LCD_DisplayStringAt+0x178>)
 8004a28:	4613      	mov	r3, r2
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4403      	add	r3, r0
 8004a32:	3308      	adds	r3, #8
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8004a38:	4299      	cmp	r1, r3
 8004a3a:	bf2c      	ite	cs
 8004a3c:	2301      	movcs	r3, #1
 8004a3e:	2300      	movcc	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	4023      	ands	r3, r4
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1b7      	bne.n	80049ba <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	3720      	adds	r7, #32
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bdb0      	pop	{r4, r5, r7, pc}
 8004a54:	200091b8 	.word	0x200091b8
 8004a58:	200091bc 	.word	0x200091bc

08004a5c <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af02      	add	r7, sp, #8
 8004a64:	4604      	mov	r4, r0
 8004a66:	4608      	mov	r0, r1
 8004a68:	4611      	mov	r1, r2
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	4623      	mov	r3, r4
 8004a6e:	80fb      	strh	r3, [r7, #6]
 8004a70:	4603      	mov	r3, r0
 8004a72:	80bb      	strh	r3, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004a80:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <BSP_LCD_FillRect+0xa8>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4920      	ldr	r1, [pc, #128]	@ (8004b08 <BSP_LCD_FillRect+0xac>)
 8004a86:	4613      	mov	r3, r2
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fe6c 	bl	8004770 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8004a98:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <BSP_LCD_FillRect+0xa8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004b0c <BSP_LCD_FillRect+0xb0>)
 8004a9e:	2134      	movs	r1, #52	@ 0x34
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	335c      	adds	r3, #92	@ 0x5c
 8004aa8:	681c      	ldr	r4, [r3, #0]
 8004aaa:	f7ff fde5 	bl	8004678 <BSP_LCD_GetXSize>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	88bb      	ldrh	r3, [r7, #4]
 8004ab2:	fb03 f202 	mul.w	r2, r3, r2
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4423      	add	r3, r4
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 8004ac0:	4b10      	ldr	r3, [pc, #64]	@ (8004b04 <BSP_LCD_FillRect+0xa8>)
 8004ac2:	681c      	ldr	r4, [r3, #0]
 8004ac4:	68fd      	ldr	r5, [r7, #12]
 8004ac6:	887e      	ldrh	r6, [r7, #2]
 8004ac8:	f8b7 8000 	ldrh.w	r8, [r7]
 8004acc:	f7ff fdd4 	bl	8004678 <BSP_LCD_GetXSize>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	887b      	ldrh	r3, [r7, #2]
 8004ad4:	1ad1      	subs	r1, r2, r3
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b04 <BSP_LCD_FillRect+0xa8>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	480b      	ldr	r0, [pc, #44]	@ (8004b08 <BSP_LCD_FillRect+0xac>)
 8004adc:	4613      	mov	r3, r2
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4403      	add	r3, r0
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	9100      	str	r1, [sp, #0]
 8004aec:	4643      	mov	r3, r8
 8004aee:	4632      	mov	r2, r6
 8004af0:	4629      	mov	r1, r5
 8004af2:	4620      	mov	r0, r4
 8004af4:	f000 f9c2 	bl	8004e7c <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 8004af8:	bf00      	nop
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b02:	bf00      	nop
 8004b04:	200091b8 	.word	0x200091b8
 8004b08:	200091bc 	.word	0x200091bc
 8004b0c:	200090a0 	.word	0x200090a0

08004b10 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08e      	sub	sp, #56	@ 0x38
 8004b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	623b      	str	r3, [r7, #32]
 8004b1a:	4b61      	ldr	r3, [pc, #388]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1e:	4a60      	ldr	r2, [pc, #384]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b26:	4b5e      	ldr	r3, [pc, #376]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b2e:	623b      	str	r3, [r7, #32]
 8004b30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	4b5a      	ldr	r3, [pc, #360]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	4a59      	ldr	r2, [pc, #356]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b42:	4b57      	ldr	r3, [pc, #348]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	4b53      	ldr	r3, [pc, #332]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b56:	4a52      	ldr	r2, [pc, #328]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b5e:	4b50      	ldr	r3, [pc, #320]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	4b4c      	ldr	r3, [pc, #304]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b72:	4a4b      	ldr	r2, [pc, #300]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b74:	f043 0302 	orr.w	r3, r3, #2
 8004b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b7a:	4b49      	ldr	r3, [pc, #292]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b86:	2300      	movs	r3, #0
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	4b45      	ldr	r3, [pc, #276]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	4a44      	ldr	r2, [pc, #272]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b90:	f043 0304 	orr.w	r3, r3, #4
 8004b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b96:	4b42      	ldr	r3, [pc, #264]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004baa:	4a3d      	ldr	r2, [pc, #244]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004bac:	f043 0308 	orr.w	r3, r3, #8
 8004bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	4b37      	ldr	r3, [pc, #220]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc6:	4a36      	ldr	r2, [pc, #216]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004bc8:	f043 0320 	orr.w	r3, r3, #32
 8004bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bce:	4b34      	ldr	r3, [pc, #208]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	f003 0320 	and.w	r3, r3, #32
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004bda:	2300      	movs	r3, #0
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	4b30      	ldr	r3, [pc, #192]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bea:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca0 <BSP_LCD_MspInit+0x190>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf2:	607b      	str	r3, [r7, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8004bf6:	f641 0358 	movw	r3, #6232	@ 0x1858
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004c04:	2302      	movs	r3, #2
 8004c06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8004c08:	230e      	movs	r3, #14
 8004c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c10:	4619      	mov	r1, r3
 8004c12:	4824      	ldr	r0, [pc, #144]	@ (8004ca4 <BSP_LCD_MspInit+0x194>)
 8004c14:	f001 fcf2 	bl	80065fc <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004c18:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8004c1c:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004c1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c22:	4619      	mov	r1, r3
 8004c24:	4820      	ldr	r0, [pc, #128]	@ (8004ca8 <BSP_LCD_MspInit+0x198>)
 8004c26:	f001 fce9 	bl	80065fc <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004c2a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c34:	4619      	mov	r1, r3
 8004c36:	481d      	ldr	r0, [pc, #116]	@ (8004cac <BSP_LCD_MspInit+0x19c>)
 8004c38:	f001 fce0 	bl	80065fc <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004c3c:	2348      	movs	r3, #72	@ 0x48
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004c40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c44:	4619      	mov	r1, r3
 8004c46:	481a      	ldr	r0, [pc, #104]	@ (8004cb0 <BSP_LCD_MspInit+0x1a0>)
 8004c48:	f001 fcd8 	bl	80065fc <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004c4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c56:	4619      	mov	r1, r3
 8004c58:	4816      	ldr	r0, [pc, #88]	@ (8004cb4 <BSP_LCD_MspInit+0x1a4>)
 8004c5a:	f001 fccf 	bl	80065fc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004c5e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8004c62:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4813      	ldr	r0, [pc, #76]	@ (8004cb8 <BSP_LCD_MspInit+0x1a8>)
 8004c6c:	f001 fcc6 	bl	80065fc <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004c70:	2303      	movs	r3, #3
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8004c74:	2309      	movs	r3, #9
 8004c76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	480a      	ldr	r0, [pc, #40]	@ (8004ca8 <BSP_LCD_MspInit+0x198>)
 8004c80:	f001 fcbc 	bl	80065fc <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004c84:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004c88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4809      	ldr	r0, [pc, #36]	@ (8004cb8 <BSP_LCD_MspInit+0x1a8>)
 8004c92:	f001 fcb3 	bl	80065fc <HAL_GPIO_Init>
}
 8004c96:	bf00      	nop
 8004c98:	3738      	adds	r7, #56	@ 0x38
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	40020000 	.word	0x40020000
 8004ca8:	40020400 	.word	0x40020400
 8004cac:	40020800 	.word	0x40020800
 8004cb0:	40020c00 	.word	0x40020c00
 8004cb4:	40021400 	.word	0x40021400
 8004cb8:	40021800 	.word	0x40021800

08004cbc <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004cbc:	b5b0      	push	{r4, r5, r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	603a      	str	r2, [r7, #0]
 8004cc6:	80fb      	strh	r3, [r7, #6]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d00 <BSP_LCD_DrawPixel+0x44>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8004d04 <BSP_LCD_DrawPixel+0x48>)
 8004cd2:	2134      	movs	r1, #52	@ 0x34
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	4413      	add	r3, r2
 8004cda:	335c      	adds	r3, #92	@ 0x5c
 8004cdc:	681c      	ldr	r4, [r3, #0]
 8004cde:	88bd      	ldrh	r5, [r7, #4]
 8004ce0:	f7ff fcca 	bl	8004678 <BSP_LCD_GetXSize>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	fb03 f205 	mul.w	r2, r3, r5
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4423      	add	r3, r4
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6013      	str	r3, [r2, #0]
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8004d00:	200091b8 	.word	0x200091b8
 8004d04:	200090a0 	.word	0x200090a0

08004d08 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	603a      	str	r2, [r7, #0]
 8004d12:	80fb      	strh	r3, [r7, #6]
 8004d14:	460b      	mov	r3, r1
 8004d16:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004d24:	4b53      	ldr	r3, [pc, #332]	@ (8004e74 <DrawChar+0x16c>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4953      	ldr	r1, [pc, #332]	@ (8004e78 <DrawChar+0x170>)
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	3308      	adds	r3, #8
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	88db      	ldrh	r3, [r3, #6]
 8004d3a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8004e74 <DrawChar+0x16c>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	494d      	ldr	r1, [pc, #308]	@ (8004e78 <DrawChar+0x170>)
 8004d42:	4613      	mov	r3, r2
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	889b      	ldrh	r3, [r3, #4]
 8004d52:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 8004d54:	8a3b      	ldrh	r3, [r7, #16]
 8004d56:	3307      	adds	r3, #7
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	da00      	bge.n	8004d5e <DrawChar+0x56>
 8004d5c:	3307      	adds	r3, #7
 8004d5e:	10db      	asrs	r3, r3, #3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	8a3b      	ldrh	r3, [r7, #16]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	e076      	b.n	8004e62 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8004d74:	8a3b      	ldrh	r3, [r7, #16]
 8004d76:	3307      	adds	r3, #7
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	da00      	bge.n	8004d7e <DrawChar+0x76>
 8004d7c:	3307      	adds	r3, #7
 8004d7e:	10db      	asrs	r3, r3, #3
 8004d80:	461a      	mov	r2, r3
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 8004d8e:	8a3b      	ldrh	r3, [r7, #16]
 8004d90:	3307      	adds	r3, #7
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da00      	bge.n	8004d98 <DrawChar+0x90>
 8004d96:	3307      	adds	r3, #7
 8004d98:	10db      	asrs	r3, r3, #3
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d002      	beq.n	8004da4 <DrawChar+0x9c>
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d004      	beq.n	8004dac <DrawChar+0xa4>
 8004da2:	e00c      	b.n	8004dbe <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	617b      	str	r3, [r7, #20]
        break;
 8004daa:	e016      	b.n	8004dda <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	3201      	adds	r2, #1
 8004db6:	7812      	ldrb	r2, [r2, #0]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
        break;
 8004dbc:	e00d      	b.n	8004dda <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	041a      	lsls	r2, r3, #16
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	3202      	adds	r2, #2
 8004dd2:	7812      	ldrb	r2, [r2, #0]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
        break;
 8004dd8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e036      	b.n	8004e4e <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8004de0:	8a3a      	ldrh	r2, [r7, #16]
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	1ad2      	subs	r2, r2, r3
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	4413      	add	r3, r2
 8004dea:	3b01      	subs	r3, #1
 8004dec:	2201      	movs	r2, #1
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d012      	beq.n	8004e22 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	4413      	add	r3, r2
 8004e04:	b298      	uxth	r0, r3
 8004e06:	4b1b      	ldr	r3, [pc, #108]	@ (8004e74 <DrawChar+0x16c>)
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	491b      	ldr	r1, [pc, #108]	@ (8004e78 <DrawChar+0x170>)
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	88bb      	ldrh	r3, [r7, #4]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f7ff ff4e 	bl	8004cbc <BSP_LCD_DrawPixel>
 8004e20:	e012      	b.n	8004e48 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	4413      	add	r3, r2
 8004e2a:	b298      	uxth	r0, r3
 8004e2c:	4b11      	ldr	r3, [pc, #68]	@ (8004e74 <DrawChar+0x16c>)
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	4911      	ldr	r1, [pc, #68]	@ (8004e78 <DrawChar+0x170>)
 8004e32:	4613      	mov	r3, r2
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	88bb      	ldrh	r3, [r7, #4]
 8004e42:	4619      	mov	r1, r3
 8004e44:	f7ff ff3a 	bl	8004cbc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	8a3b      	ldrh	r3, [r7, #16]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d3c4      	bcc.n	8004de0 <DrawChar+0xd8>
      }
    }
    Ypos++;
 8004e56:	88bb      	ldrh	r3, [r7, #4]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	61fb      	str	r3, [r7, #28]
 8004e62:	8a7b      	ldrh	r3, [r7, #18]
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d384      	bcc.n	8004d74 <DrawChar+0x6c>
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	bf00      	nop
 8004e6e:	3720      	adds	r7, #32
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	200091b8 	.word	0x200091b8
 8004e78:	200091bc 	.word	0x200091bc

08004e7c <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004e8a:	4b16      	ldr	r3, [pc, #88]	@ (8004ee4 <FillBuffer+0x68>)
 8004e8c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004e90:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004e92:	4b14      	ldr	r3, [pc, #80]	@ (8004ee4 <FillBuffer+0x68>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8004e98:	4a12      	ldr	r2, [pc, #72]	@ (8004ee4 <FillBuffer+0x68>)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 8004e9e:	4b11      	ldr	r3, [pc, #68]	@ (8004ee4 <FillBuffer+0x68>)
 8004ea0:	4a11      	ldr	r2, [pc, #68]	@ (8004ee8 <FillBuffer+0x6c>)
 8004ea2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8004ea4:	480f      	ldr	r0, [pc, #60]	@ (8004ee4 <FillBuffer+0x68>)
 8004ea6:	f000 fdf9 	bl	8005a9c <HAL_DMA2D_Init>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d115      	bne.n	8004edc <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8004eb0:	68f9      	ldr	r1, [r7, #12]
 8004eb2:	480c      	ldr	r0, [pc, #48]	@ (8004ee4 <FillBuffer+0x68>)
 8004eb4:	f001 f860 	bl	8005f78 <HAL_DMA2D_ConfigLayer>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10e      	bne.n	8004edc <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69f9      	ldr	r1, [r7, #28]
 8004ec8:	4806      	ldr	r0, [pc, #24]	@ (8004ee4 <FillBuffer+0x68>)
 8004eca:	f000 fe30 	bl	8005b2e <HAL_DMA2D_Start>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004ed4:	210a      	movs	r1, #10
 8004ed6:	4803      	ldr	r0, [pc, #12]	@ (8004ee4 <FillBuffer+0x68>)
 8004ed8:	f000 fe54 	bl	8005b84 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20009148 	.word	0x20009148
 8004ee8:	4002b000 	.word	0x4002b000

08004eec <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004ef0:	4b29      	ldr	r3, [pc, #164]	@ (8004f98 <BSP_SDRAM_Init+0xac>)
 8004ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8004f9c <BSP_SDRAM_Init+0xb0>)
 8004ef4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa0 <BSP_SDRAM_Init+0xb4>)
 8004ef8:	2202      	movs	r2, #2
 8004efa:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004efc:	4b28      	ldr	r3, [pc, #160]	@ (8004fa0 <BSP_SDRAM_Init+0xb4>)
 8004efe:	2207      	movs	r2, #7
 8004f00:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004f02:	4b27      	ldr	r3, [pc, #156]	@ (8004fa0 <BSP_SDRAM_Init+0xb4>)
 8004f04:	2204      	movs	r2, #4
 8004f06:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004f08:	4b25      	ldr	r3, [pc, #148]	@ (8004fa0 <BSP_SDRAM_Init+0xb4>)
 8004f0a:	2207      	movs	r2, #7
 8004f0c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004f0e:	4b24      	ldr	r3, [pc, #144]	@ (8004fa0 <BSP_SDRAM_Init+0xb4>)
 8004f10:	2202      	movs	r2, #2
 8004f12:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004f14:	4b22      	ldr	r3, [pc, #136]	@ (8004fa0 <BSP_SDRAM_Init+0xb4>)
 8004f16:	2202      	movs	r2, #2
 8004f18:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004f1a:	4b21      	ldr	r3, [pc, #132]	@ (8004fa0 <BSP_SDRAM_Init+0xb4>)
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004f20:	4b1d      	ldr	r3, [pc, #116]	@ (8004f98 <BSP_SDRAM_Init+0xac>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004f26:	4b1c      	ldr	r3, [pc, #112]	@ (8004f98 <BSP_SDRAM_Init+0xac>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f98 <BSP_SDRAM_Init+0xac>)
 8004f2e:	2204      	movs	r2, #4
 8004f30:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004f32:	4b19      	ldr	r3, [pc, #100]	@ (8004f98 <BSP_SDRAM_Init+0xac>)
 8004f34:	2210      	movs	r2, #16
 8004f36:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004f38:	4b17      	ldr	r3, [pc, #92]	@ (8004f98 <BSP_SDRAM_Init+0xac>)
 8004f3a:	2240      	movs	r2, #64	@ 0x40
 8004f3c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004f3e:	4b16      	ldr	r3, [pc, #88]	@ (8004f98 <BSP_SDRAM_Init+0xac>)
 8004f40:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004f44:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004f46:	4b14      	ldr	r3, [pc, #80]	@ (8004f98 <BSP_SDRAM_Init+0xac>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004f4c:	4b12      	ldr	r3, [pc, #72]	@ (8004f98 <BSP_SDRAM_Init+0xac>)
 8004f4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f52:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004f54:	4b10      	ldr	r3, [pc, #64]	@ (8004f98 <BSP_SDRAM_Init+0xac>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8004f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f98 <BSP_SDRAM_Init+0xac>)
 8004f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004f62:	2100      	movs	r1, #0
 8004f64:	480c      	ldr	r0, [pc, #48]	@ (8004f98 <BSP_SDRAM_Init+0xac>)
 8004f66:	f000 f87f 	bl	8005068 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004f6a:	490d      	ldr	r1, [pc, #52]	@ (8004fa0 <BSP_SDRAM_Init+0xb4>)
 8004f6c:	480a      	ldr	r0, [pc, #40]	@ (8004f98 <BSP_SDRAM_Init+0xac>)
 8004f6e:	f006 fa45 	bl	800b3fc <HAL_SDRAM_Init>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004f78:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa4 <BSP_SDRAM_Init+0xb8>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e002      	b.n	8004f86 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004f80:	4b08      	ldr	r3, [pc, #32]	@ (8004fa4 <BSP_SDRAM_Init+0xb8>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004f86:	f240 506a 	movw	r0, #1386	@ 0x56a
 8004f8a:	f000 f80d 	bl	8004fa8 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8004f8e:	4b05      	ldr	r3, [pc, #20]	@ (8004fa4 <BSP_SDRAM_Init+0xb8>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	200091d8 	.word	0x200091d8
 8004f9c:	a0000140 	.word	0xa0000140
 8004fa0:	2000920c 	.word	0x2000920c
 8004fa4:	20000264 	.word	0x20000264

08004fa8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004fba:	4b29      	ldr	r3, [pc, #164]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004fc0:	4b27      	ldr	r3, [pc, #156]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004fc6:	4b26      	ldr	r3, [pc, #152]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004fcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fd0:	4923      	ldr	r1, [pc, #140]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fd2:	4824      	ldr	r0, [pc, #144]	@ (8005064 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004fd4:	f006 fa46 	bl	800b464 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004fd8:	2001      	movs	r0, #1
 8004fda:	f000 fa7f 	bl	80054dc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004fde:	4b20      	ldr	r3, [pc, #128]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fe6:	2208      	movs	r2, #8
 8004fe8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004fea:	4b1d      	ldr	r3, [pc, #116]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004ff6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ffa:	4919      	ldr	r1, [pc, #100]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ffc:	4819      	ldr	r0, [pc, #100]	@ (8005064 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004ffe:	f006 fa31 	bl	800b464 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005002:	4b17      	ldr	r3, [pc, #92]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005004:	2203      	movs	r2, #3
 8005006:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005008:	4b15      	ldr	r3, [pc, #84]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800500a:	2208      	movs	r2, #8
 800500c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800500e:	4b14      	ldr	r3, [pc, #80]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005010:	2204      	movs	r2, #4
 8005012:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8005014:	4b12      	ldr	r3, [pc, #72]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005016:	2200      	movs	r2, #0
 8005018:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800501a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800501e:	4910      	ldr	r1, [pc, #64]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005020:	4810      	ldr	r0, [pc, #64]	@ (8005064 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005022:	f006 fa1f 	bl	800b464 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8005026:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800502a:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800502c:	4b0c      	ldr	r3, [pc, #48]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800502e:	2204      	movs	r2, #4
 8005030:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005032:	4b0b      	ldr	r3, [pc, #44]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005034:	2208      	movs	r2, #8
 8005036:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8005038:	4b09      	ldr	r3, [pc, #36]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800503a:	2201      	movs	r2, #1
 800503c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a07      	ldr	r2, [pc, #28]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005042:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8005044:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005048:	4905      	ldr	r1, [pc, #20]	@ (8005060 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800504a:	4806      	ldr	r0, [pc, #24]	@ (8005064 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800504c:	f006 fa0a 	bl	800b464 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	4804      	ldr	r0, [pc, #16]	@ (8005064 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005054:	f006 fa3b 	bl	800b4ce <HAL_SDRAM_ProgramRefreshRate>
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20009228 	.word	0x20009228
 8005064:	200091d8 	.word	0x200091d8

08005068 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b090      	sub	sp, #64	@ 0x40
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80ec 	beq.w	8005252 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 800507a:	2300      	movs	r3, #0
 800507c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800507e:	4b77      	ldr	r3, [pc, #476]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 8005080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005082:	4a76      	ldr	r2, [pc, #472]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	6393      	str	r3, [r2, #56]	@ 0x38
 800508a:	4b74      	ldr	r3, [pc, #464]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 800508c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005094:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
 800509a:	4b70      	ldr	r3, [pc, #448]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 800509c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509e:	4a6f      	ldr	r2, [pc, #444]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 80050a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80050a6:	4b6d      	ldr	r3, [pc, #436]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 80050a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	623b      	str	r3, [r7, #32]
 80050b6:	4b69      	ldr	r3, [pc, #420]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ba:	4a68      	ldr	r2, [pc, #416]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 80050bc:	f043 0302 	orr.w	r3, r3, #2
 80050c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80050c2:	4b66      	ldr	r3, [pc, #408]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	623b      	str	r3, [r7, #32]
 80050cc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	4b62      	ldr	r3, [pc, #392]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d6:	4a61      	ldr	r2, [pc, #388]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 80050d8:	f043 0304 	orr.w	r3, r3, #4
 80050dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80050de:	4b5f      	ldr	r3, [pc, #380]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80050ea:	2300      	movs	r3, #0
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	4b5b      	ldr	r3, [pc, #364]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	4a5a      	ldr	r2, [pc, #360]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 80050f4:	f043 0308 	orr.w	r3, r3, #8
 80050f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80050fa:	4b58      	ldr	r3, [pc, #352]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	4b54      	ldr	r3, [pc, #336]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510e:	4a53      	ldr	r2, [pc, #332]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 8005110:	f043 0310 	orr.w	r3, r3, #16
 8005114:	6313      	str	r3, [r2, #48]	@ 0x30
 8005116:	4b51      	ldr	r3, [pc, #324]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	4b4d      	ldr	r3, [pc, #308]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512a:	4a4c      	ldr	r2, [pc, #304]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 800512c:	f043 0320 	orr.w	r3, r3, #32
 8005130:	6313      	str	r3, [r2, #48]	@ 0x30
 8005132:	4b4a      	ldr	r3, [pc, #296]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	4b46      	ldr	r3, [pc, #280]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005146:	4a45      	ldr	r2, [pc, #276]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 8005148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800514c:	6313      	str	r3, [r2, #48]	@ 0x30
 800514e:	4b43      	ldr	r3, [pc, #268]	@ (800525c <BSP_SDRAM_MspInit+0x1f4>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800515a:	2302      	movs	r3, #2
 800515c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800515e:	2302      	movs	r3, #2
 8005160:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005162:	2300      	movs	r3, #0
 8005164:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8005166:	230c      	movs	r3, #12
 8005168:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800516a:	2360      	movs	r3, #96	@ 0x60
 800516c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800516e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005172:	4619      	mov	r1, r3
 8005174:	483a      	ldr	r0, [pc, #232]	@ (8005260 <BSP_SDRAM_MspInit+0x1f8>)
 8005176:	f001 fa41 	bl	80065fc <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 800517a:	2301      	movs	r3, #1
 800517c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800517e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005182:	4619      	mov	r1, r3
 8005184:	4837      	ldr	r0, [pc, #220]	@ (8005264 <BSP_SDRAM_MspInit+0x1fc>)
 8005186:	f001 fa39 	bl	80065fc <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800518a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800518e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8005190:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005194:	4619      	mov	r1, r3
 8005196:	4834      	ldr	r0, [pc, #208]	@ (8005268 <BSP_SDRAM_MspInit+0x200>)
 8005198:	f001 fa30 	bl	80065fc <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800519c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80051a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80051a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80051a6:	4619      	mov	r1, r3
 80051a8:	4830      	ldr	r0, [pc, #192]	@ (800526c <BSP_SDRAM_MspInit+0x204>)
 80051aa:	f001 fa27 	bl	80065fc <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 80051ae:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80051b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80051b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80051b8:	4619      	mov	r1, r3
 80051ba:	482d      	ldr	r0, [pc, #180]	@ (8005270 <BSP_SDRAM_MspInit+0x208>)
 80051bc:	f001 fa1e 	bl	80065fc <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80051c0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80051c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80051c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80051ca:	4619      	mov	r1, r3
 80051cc:	4829      	ldr	r0, [pc, #164]	@ (8005274 <BSP_SDRAM_MspInit+0x20c>)
 80051ce:	f001 fa15 	bl	80065fc <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80051d2:	4b29      	ldr	r3, [pc, #164]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80051d8:	4b27      	ldr	r3, [pc, #156]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 80051da:	2280      	movs	r2, #128	@ 0x80
 80051dc:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80051de:	4b26      	ldr	r3, [pc, #152]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 80051e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051e4:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80051e6:	4b24      	ldr	r3, [pc, #144]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 80051e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051ec:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80051ee:	4b22      	ldr	r3, [pc, #136]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 80051f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80051f4:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80051f6:	4b20      	ldr	r3, [pc, #128]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 80051f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80051fc:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 80051fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 8005200:	2200      	movs	r2, #0
 8005202:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005204:	4b1c      	ldr	r3, [pc, #112]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 8005206:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800520a:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800520c:	4b1a      	ldr	r3, [pc, #104]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 800520e:	2200      	movs	r2, #0
 8005210:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005212:	4b19      	ldr	r3, [pc, #100]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 8005214:	2203      	movs	r2, #3
 8005216:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005218:	4b17      	ldr	r3, [pc, #92]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 800521a:	2200      	movs	r2, #0
 800521c:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800521e:	4b16      	ldr	r3, [pc, #88]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8005224:	4b14      	ldr	r3, [pc, #80]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 8005226:	4a15      	ldr	r2, [pc, #84]	@ (800527c <BSP_SDRAM_MspInit+0x214>)
 8005228:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a12      	ldr	r2, [pc, #72]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 800522e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005230:	4a11      	ldr	r2, [pc, #68]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8005236:	4810      	ldr	r0, [pc, #64]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 8005238:	f000 fb20 	bl	800587c <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 800523c:	480e      	ldr	r0, [pc, #56]	@ (8005278 <BSP_SDRAM_MspInit+0x210>)
 800523e:	f000 fa6f 	bl	8005720 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005242:	2200      	movs	r2, #0
 8005244:	210f      	movs	r1, #15
 8005246:	2038      	movs	r0, #56	@ 0x38
 8005248:	f000 fa24 	bl	8005694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800524c:	2038      	movs	r0, #56	@ 0x38
 800524e:	f000 fa3d 	bl	80056cc <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8005252:	bf00      	nop
 8005254:	3740      	adds	r7, #64	@ 0x40
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40023800 	.word	0x40023800
 8005260:	40020400 	.word	0x40020400
 8005264:	40020800 	.word	0x40020800
 8005268:	40020c00 	.word	0x40020c00
 800526c:	40021000 	.word	0x40021000
 8005270:	40021400 	.word	0x40021400
 8005274:	40021800 	.word	0x40021800
 8005278:	20009238 	.word	0x20009238
 800527c:	40026410 	.word	0x40026410

08005280 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	460a      	mov	r2, r1
 800528a:	80fb      	strh	r3, [r7, #6]
 800528c:	4613      	mov	r3, r2
 800528e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8005294:	4a13      	ldr	r2, [pc, #76]	@ (80052e4 <BSP_TS_Init+0x64>)
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800529a:	4a13      	ldr	r2, [pc, #76]	@ (80052e8 <BSP_TS_Init+0x68>)
 800529c:	88bb      	ldrh	r3, [r7, #4]
 800529e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80052a0:	4b12      	ldr	r3, [pc, #72]	@ (80052ec <BSP_TS_Init+0x6c>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2082      	movs	r0, #130	@ 0x82
 80052a6:	4798      	blx	r3
 80052a8:	4603      	mov	r3, r0
 80052aa:	461a      	mov	r2, r3
 80052ac:	f640 0311 	movw	r3, #2065	@ 0x811
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d104      	bne.n	80052be <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80052b4:	4b0e      	ldr	r3, [pc, #56]	@ (80052f0 <BSP_TS_Init+0x70>)
 80052b6:	4a0d      	ldr	r2, [pc, #52]	@ (80052ec <BSP_TS_Init+0x6c>)
 80052b8:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 80052be:	7bfb      	ldrb	r3, [r7, #15]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d109      	bne.n	80052d8 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80052c4:	4b0a      	ldr	r3, [pc, #40]	@ (80052f0 <BSP_TS_Init+0x70>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2082      	movs	r0, #130	@ 0x82
 80052cc:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80052ce:	4b08      	ldr	r3, [pc, #32]	@ (80052f0 <BSP_TS_Init+0x70>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	2082      	movs	r0, #130	@ 0x82
 80052d6:	4798      	blx	r3
  }

  return ret;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	2000929c 	.word	0x2000929c
 80052e8:	2000929e 	.word	0x2000929e
 80052ec:	2000021c 	.word	0x2000021c
 80052f0:	20009298 	.word	0x20009298

080052f4 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef *TsState)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff, x, y, xr, yr;

  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80052fc:	4b4f      	ldr	r3, [pc, #316]	@ (800543c <BSP_TS_GetState+0x148>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	2082      	movs	r0, #130	@ 0x82
 8005304:	4798      	blx	r3
 8005306:	4603      	mov	r3, r0
 8005308:	461a      	mov	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	801a      	strh	r2, [r3, #0]

  if (TsState->TouchDetected)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 808d 	beq.w	8005432 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8005318:	4b48      	ldr	r3, [pc, #288]	@ (800543c <BSP_TS_GetState+0x148>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f107 020c 	add.w	r2, r7, #12
 8005322:	f107 010e 	add.w	r1, r7, #14
 8005326:	2082      	movs	r0, #130	@ 0x82
 8005328:	4798      	blx	r3
    /* Y value first correction */
    y = 3700 - y;
#else

    /* Y value first correction */
    y -= 360;
 800532a:	89bb      	ldrh	r3, [r7, #12]
 800532c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005330:	b29b      	uxth	r3, r3
 8005332:	81bb      	strh	r3, [r7, #12]

#endif

    /* Y value second correction */
    yr = y / 11;
 8005334:	89bb      	ldrh	r3, [r7, #12]
 8005336:	4a42      	ldr	r2, [pc, #264]	@ (8005440 <BSP_TS_GetState+0x14c>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	08db      	lsrs	r3, r3, #3
 800533e:	82bb      	strh	r3, [r7, #20]

    /* Return y position value */
    if (yr <= 0)
 8005340:	8abb      	ldrh	r3, [r7, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	82bb      	strh	r3, [r7, #20]
 800534a:	e008      	b.n	800535e <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 800534c:	4b3d      	ldr	r3, [pc, #244]	@ (8005444 <BSP_TS_GetState+0x150>)
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	8aba      	ldrh	r2, [r7, #20]
 8005352:	429a      	cmp	r2, r3
 8005354:	d903      	bls.n	800535e <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8005356:	4b3b      	ldr	r3, [pc, #236]	@ (8005444 <BSP_TS_GetState+0x150>)
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	3b01      	subs	r3, #1
 800535c:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800535e:	8abb      	ldrh	r3, [r7, #20]
 8005360:	81bb      	strh	r3, [r7, #12]

    /* X value first correction */
    if (x <= 3000)
 8005362:	89fb      	ldrh	r3, [r7, #14]
 8005364:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8005368:	4293      	cmp	r3, r2
 800536a:	d806      	bhi.n	800537a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 800536c:	89fb      	ldrh	r3, [r7, #14]
 800536e:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8005372:	330e      	adds	r3, #14
 8005374:	b29b      	uxth	r3, r3
 8005376:	81fb      	strh	r3, [r7, #14]
 8005378:	e005      	b.n	8005386 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800537a:	89fb      	ldrh	r3, [r7, #14]
 800537c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8005380:	3308      	adds	r3, #8
 8005382:	b29b      	uxth	r3, r3
 8005384:	81fb      	strh	r3, [r7, #14]
    }

    /* X value second correction */
    xr = x / 15;
 8005386:	89fb      	ldrh	r3, [r7, #14]
 8005388:	4a2f      	ldr	r2, [pc, #188]	@ (8005448 <BSP_TS_GetState+0x154>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	08db      	lsrs	r3, r3, #3
 8005390:	82fb      	strh	r3, [r7, #22]

    /* Return X position value */
    if (xr <= 0)
 8005392:	8afb      	ldrh	r3, [r7, #22]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	82fb      	strh	r3, [r7, #22]
 800539c:	e008      	b.n	80053b0 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800539e:	4b2b      	ldr	r3, [pc, #172]	@ (800544c <BSP_TS_GetState+0x158>)
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	8afa      	ldrh	r2, [r7, #22]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d903      	bls.n	80053b0 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 80053a8:	4b28      	ldr	r3, [pc, #160]	@ (800544c <BSP_TS_GetState+0x158>)
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	82fb      	strh	r3, [r7, #22]
    }
    else
    {}

    x = xr;
 80053b0:	8afb      	ldrh	r3, [r7, #22]
 80053b2:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x ? (x - _x): (_x - x);
 80053b4:	89fb      	ldrh	r3, [r7, #14]
 80053b6:	461a      	mov	r2, r3
 80053b8:	4b25      	ldr	r3, [pc, #148]	@ (8005450 <BSP_TS_GetState+0x15c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d906      	bls.n	80053ce <BSP_TS_GetState+0xda>
 80053c0:	89fa      	ldrh	r2, [r7, #14]
 80053c2:	4b23      	ldr	r3, [pc, #140]	@ (8005450 <BSP_TS_GetState+0x15c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	e005      	b.n	80053da <BSP_TS_GetState+0xe6>
 80053ce:	4b20      	ldr	r3, [pc, #128]	@ (8005450 <BSP_TS_GetState+0x15c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	89fb      	ldrh	r3, [r7, #14]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	b29b      	uxth	r3, r3
 80053da:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y ? (y - _y) : (_y - y);
 80053dc:	89bb      	ldrh	r3, [r7, #12]
 80053de:	461a      	mov	r2, r3
 80053e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005454 <BSP_TS_GetState+0x160>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d906      	bls.n	80053f6 <BSP_TS_GetState+0x102>
 80053e8:	89ba      	ldrh	r2, [r7, #12]
 80053ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005454 <BSP_TS_GetState+0x160>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	e005      	b.n	8005402 <BSP_TS_GetState+0x10e>
 80053f6:	4b17      	ldr	r3, [pc, #92]	@ (8005454 <BSP_TS_GetState+0x160>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	89bb      	ldrh	r3, [r7, #12]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	b29b      	uxth	r3, r3
 8005402:	823b      	strh	r3, [r7, #16]

    if (xDiff + yDiff > 5)
 8005404:	8a7a      	ldrh	r2, [r7, #18]
 8005406:	8a3b      	ldrh	r3, [r7, #16]
 8005408:	4413      	add	r3, r2
 800540a:	2b05      	cmp	r3, #5
 800540c:	dd07      	ble.n	800541e <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800540e:	89fb      	ldrh	r3, [r7, #14]
 8005410:	461a      	mov	r2, r3
 8005412:	4b0f      	ldr	r3, [pc, #60]	@ (8005450 <BSP_TS_GetState+0x15c>)
 8005414:	601a      	str	r2, [r3, #0]
      _y = y;
 8005416:	89bb      	ldrh	r3, [r7, #12]
 8005418:	461a      	mov	r2, r3
 800541a:	4b0e      	ldr	r3, [pc, #56]	@ (8005454 <BSP_TS_GetState+0x160>)
 800541c:	601a      	str	r2, [r3, #0]
    }

    /* Update the X position */
    TsState->X = _x;
 800541e:	4b0c      	ldr	r3, [pc, #48]	@ (8005450 <BSP_TS_GetState+0x15c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	b29a      	uxth	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	805a      	strh	r2, [r3, #2]

    /* Update the Y position */
    TsState->Y = _y;
 8005428:	4b0a      	ldr	r3, [pc, #40]	@ (8005454 <BSP_TS_GetState+0x160>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	809a      	strh	r2, [r3, #4]
  }
}
 8005432:	bf00      	nop
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20009298 	.word	0x20009298
 8005440:	ba2e8ba3 	.word	0xba2e8ba3
 8005444:	2000929e 	.word	0x2000929e
 8005448:	88888889 	.word	0x88888889
 800544c:	2000929c 	.word	0x2000929c
 8005450:	200092a0 	.word	0x200092a0
 8005454:	200092a4 	.word	0x200092a4

08005458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800545c:	4b0e      	ldr	r3, [pc, #56]	@ (8005498 <HAL_Init+0x40>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a0d      	ldr	r2, [pc, #52]	@ (8005498 <HAL_Init+0x40>)
 8005462:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005468:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <HAL_Init+0x40>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a0a      	ldr	r2, [pc, #40]	@ (8005498 <HAL_Init+0x40>)
 800546e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005474:	4b08      	ldr	r3, [pc, #32]	@ (8005498 <HAL_Init+0x40>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a07      	ldr	r2, [pc, #28]	@ (8005498 <HAL_Init+0x40>)
 800547a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800547e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005480:	2003      	movs	r0, #3
 8005482:	f000 f8fc 	bl	800567e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005486:	200f      	movs	r0, #15
 8005488:	f7fd ff4e 	bl	8003328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800548c:	f7fd fb32 	bl	8002af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40023c00 	.word	0x40023c00

0800549c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054a0:	4b06      	ldr	r3, [pc, #24]	@ (80054bc <HAL_IncTick+0x20>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <HAL_IncTick+0x24>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4413      	add	r3, r2
 80054ac:	4a04      	ldr	r2, [pc, #16]	@ (80054c0 <HAL_IncTick+0x24>)
 80054ae:	6013      	str	r3, [r2, #0]
}
 80054b0:	bf00      	nop
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	2000026c 	.word	0x2000026c
 80054c0:	200092a8 	.word	0x200092a8

080054c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  return uwTick;
 80054c8:	4b03      	ldr	r3, [pc, #12]	@ (80054d8 <HAL_GetTick+0x14>)
 80054ca:	681b      	ldr	r3, [r3, #0]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	200092a8 	.word	0x200092a8

080054dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054e4:	f7ff ffee 	bl	80054c4 <HAL_GetTick>
 80054e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f4:	d005      	beq.n	8005502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005520 <HAL_Delay+0x44>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005502:	bf00      	nop
 8005504:	f7ff ffde 	bl	80054c4 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	429a      	cmp	r2, r3
 8005512:	d8f7      	bhi.n	8005504 <HAL_Delay+0x28>
  {
  }
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	2000026c 	.word	0x2000026c

08005524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005534:	4b0c      	ldr	r3, [pc, #48]	@ (8005568 <__NVIC_SetPriorityGrouping+0x44>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005540:	4013      	ands	r3, r2
 8005542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800554c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005556:	4a04      	ldr	r2, [pc, #16]	@ (8005568 <__NVIC_SetPriorityGrouping+0x44>)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	60d3      	str	r3, [r2, #12]
}
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	e000ed00 	.word	0xe000ed00

0800556c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005570:	4b04      	ldr	r3, [pc, #16]	@ (8005584 <__NVIC_GetPriorityGrouping+0x18>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	0a1b      	lsrs	r3, r3, #8
 8005576:	f003 0307 	and.w	r3, r3, #7
}
 800557a:	4618      	mov	r0, r3
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	e000ed00 	.word	0xe000ed00

08005588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005596:	2b00      	cmp	r3, #0
 8005598:	db0b      	blt.n	80055b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	f003 021f 	and.w	r2, r3, #31
 80055a0:	4907      	ldr	r1, [pc, #28]	@ (80055c0 <__NVIC_EnableIRQ+0x38>)
 80055a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	2001      	movs	r0, #1
 80055aa:	fa00 f202 	lsl.w	r2, r0, r2
 80055ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	e000e100 	.word	0xe000e100

080055c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	6039      	str	r1, [r7, #0]
 80055ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	db0a      	blt.n	80055ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	490c      	ldr	r1, [pc, #48]	@ (8005610 <__NVIC_SetPriority+0x4c>)
 80055de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e2:	0112      	lsls	r2, r2, #4
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	440b      	add	r3, r1
 80055e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055ec:	e00a      	b.n	8005604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	4908      	ldr	r1, [pc, #32]	@ (8005614 <__NVIC_SetPriority+0x50>)
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	3b04      	subs	r3, #4
 80055fc:	0112      	lsls	r2, r2, #4
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	440b      	add	r3, r1
 8005602:	761a      	strb	r2, [r3, #24]
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	e000e100 	.word	0xe000e100
 8005614:	e000ed00 	.word	0xe000ed00

08005618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005618:	b480      	push	{r7}
 800561a:	b089      	sub	sp, #36	@ 0x24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f1c3 0307 	rsb	r3, r3, #7
 8005632:	2b04      	cmp	r3, #4
 8005634:	bf28      	it	cs
 8005636:	2304      	movcs	r3, #4
 8005638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3304      	adds	r3, #4
 800563e:	2b06      	cmp	r3, #6
 8005640:	d902      	bls.n	8005648 <NVIC_EncodePriority+0x30>
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	3b03      	subs	r3, #3
 8005646:	e000      	b.n	800564a <NVIC_EncodePriority+0x32>
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800564c:	f04f 32ff 	mov.w	r2, #4294967295
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	43da      	mvns	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	401a      	ands	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005660:	f04f 31ff 	mov.w	r1, #4294967295
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	fa01 f303 	lsl.w	r3, r1, r3
 800566a:	43d9      	mvns	r1, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005670:	4313      	orrs	r3, r2
         );
}
 8005672:	4618      	mov	r0, r3
 8005674:	3724      	adds	r7, #36	@ 0x24
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff ff4c 	bl	8005524 <__NVIC_SetPriorityGrouping>
}
 800568c:	bf00      	nop
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	4603      	mov	r3, r0
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056a6:	f7ff ff61 	bl	800556c <__NVIC_GetPriorityGrouping>
 80056aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	6978      	ldr	r0, [r7, #20]
 80056b2:	f7ff ffb1 	bl	8005618 <NVIC_EncodePriority>
 80056b6:	4602      	mov	r2, r0
 80056b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056bc:	4611      	mov	r1, r2
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff ff80 	bl	80055c4 <__NVIC_SetPriority>
}
 80056c4:	bf00      	nop
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff ff54 	bl	8005588 <__NVIC_EnableIRQ>
}
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e00e      	b.n	8005718 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	795b      	ldrb	r3, [r3, #5]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d105      	bne.n	8005710 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fd fa1a 	bl	8002b44 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800572c:	f7ff feca 	bl	80054c4 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e099      	b.n	8005870 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0201 	bic.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800575c:	e00f      	b.n	800577e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800575e:	f7ff feb1 	bl	80054c4 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b05      	cmp	r3, #5
 800576a:	d908      	bls.n	800577e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2203      	movs	r2, #3
 8005776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e078      	b.n	8005870 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e8      	bne.n	800575e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4b38      	ldr	r3, [pc, #224]	@ (8005878 <HAL_DMA_Init+0x158>)
 8005798:	4013      	ands	r3, r2
 800579a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d107      	bne.n	80057e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e0:	4313      	orrs	r3, r2
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f023 0307 	bic.w	r3, r3, #7
 80057fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	2b04      	cmp	r3, #4
 8005810:	d117      	bne.n	8005842 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00e      	beq.n	8005842 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f8bd 	bl	80059a4 <DMA_CheckFifoParam>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2240      	movs	r2, #64	@ 0x40
 8005834:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800583e:	2301      	movs	r3, #1
 8005840:	e016      	b.n	8005870 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f874 	bl	8005938 <DMA_CalcBaseAndBitshift>
 8005850:	4603      	mov	r3, r0
 8005852:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005858:	223f      	movs	r2, #63	@ 0x3f
 800585a:	409a      	lsls	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	f010803f 	.word	0xf010803f

0800587c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e050      	b.n	8005930 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d101      	bne.n	800589e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800589a:	2302      	movs	r3, #2
 800589c:	e048      	b.n	8005930 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2200      	movs	r2, #0
 80058bc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2200      	movs	r2, #0
 80058c4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2200      	movs	r2, #0
 80058cc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2200      	movs	r2, #0
 80058d4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2221      	movs	r2, #33	@ 0x21
 80058dc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f82a 	bl	8005938 <DMA_CalcBaseAndBitshift>
 80058e4:	4603      	mov	r3, r0
 80058e6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005910:	223f      	movs	r2, #63	@ 0x3f
 8005912:	409a      	lsls	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	3b10      	subs	r3, #16
 8005948:	4a14      	ldr	r2, [pc, #80]	@ (800599c <DMA_CalcBaseAndBitshift+0x64>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	091b      	lsrs	r3, r3, #4
 8005950:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005952:	4a13      	ldr	r2, [pc, #76]	@ (80059a0 <DMA_CalcBaseAndBitshift+0x68>)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b03      	cmp	r3, #3
 8005964:	d909      	bls.n	800597a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	1d1a      	adds	r2, r3, #4
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	659a      	str	r2, [r3, #88]	@ 0x58
 8005978:	e007      	b.n	800598a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005982:	f023 0303 	bic.w	r3, r3, #3
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	aaaaaaab 	.word	0xaaaaaaab
 80059a0:	08016a54 	.word	0x08016a54

080059a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d11f      	bne.n	80059fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d856      	bhi.n	8005a72 <DMA_CheckFifoParam+0xce>
 80059c4:	a201      	add	r2, pc, #4	@ (adr r2, 80059cc <DMA_CheckFifoParam+0x28>)
 80059c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ca:	bf00      	nop
 80059cc:	080059dd 	.word	0x080059dd
 80059d0:	080059ef 	.word	0x080059ef
 80059d4:	080059dd 	.word	0x080059dd
 80059d8:	08005a73 	.word	0x08005a73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d046      	beq.n	8005a76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ec:	e043      	b.n	8005a76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80059f6:	d140      	bne.n	8005a7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059fc:	e03d      	b.n	8005a7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a06:	d121      	bne.n	8005a4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d837      	bhi.n	8005a7e <DMA_CheckFifoParam+0xda>
 8005a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <DMA_CheckFifoParam+0x70>)
 8005a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a14:	08005a25 	.word	0x08005a25
 8005a18:	08005a2b 	.word	0x08005a2b
 8005a1c:	08005a25 	.word	0x08005a25
 8005a20:	08005a3d 	.word	0x08005a3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
      break;
 8005a28:	e030      	b.n	8005a8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d025      	beq.n	8005a82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a3a:	e022      	b.n	8005a82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a44:	d11f      	bne.n	8005a86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a4a:	e01c      	b.n	8005a86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d903      	bls.n	8005a5a <DMA_CheckFifoParam+0xb6>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d003      	beq.n	8005a60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a58:	e018      	b.n	8005a8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a5e:	e015      	b.n	8005a8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00e      	beq.n	8005a8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a70:	e00b      	b.n	8005a8a <DMA_CheckFifoParam+0xe6>
      break;
 8005a72:	bf00      	nop
 8005a74:	e00a      	b.n	8005a8c <DMA_CheckFifoParam+0xe8>
      break;
 8005a76:	bf00      	nop
 8005a78:	e008      	b.n	8005a8c <DMA_CheckFifoParam+0xe8>
      break;
 8005a7a:	bf00      	nop
 8005a7c:	e006      	b.n	8005a8c <DMA_CheckFifoParam+0xe8>
      break;
 8005a7e:	bf00      	nop
 8005a80:	e004      	b.n	8005a8c <DMA_CheckFifoParam+0xe8>
      break;
 8005a82:	bf00      	nop
 8005a84:	e002      	b.n	8005a8c <DMA_CheckFifoParam+0xe8>
      break;   
 8005a86:	bf00      	nop
 8005a88:	e000      	b.n	8005a8c <DMA_CheckFifoParam+0xe8>
      break;
 8005a8a:	bf00      	nop
    }
  } 
  
  return status; 
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop

08005a9c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e03b      	b.n	8005b26 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fd f860 	bl	8002b88 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aec:	f023 0107 	bic.w	r1, r3, #7
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b02:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005b06:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	68d1      	ldr	r1, [r2, #12]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	430b      	orrs	r3, r1
 8005b14:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b086      	sub	sp, #24
 8005b32:	af02      	add	r7, sp, #8
 8005b34:	60f8      	str	r0, [r7, #12]
 8005b36:	60b9      	str	r1, [r7, #8]
 8005b38:	607a      	str	r2, [r7, #4]
 8005b3a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_DMA2D_Start+0x1c>
 8005b46:	2302      	movs	r3, #2
 8005b48:	e018      	b.n	8005b7c <HAL_DMA2D_Start+0x4e>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2202      	movs	r2, #2
 8005b56:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fa99 	bl	800609c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0201 	orr.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d056      	beq.n	8005c4e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ba0:	f7ff fc90 	bl	80054c4 <HAL_GetTick>
 8005ba4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005ba6:	e04b      	b.n	8005c40 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d023      	beq.n	8005c02 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d005      	beq.n	8005bd0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc8:	f043 0202 	orr.w	r2, r3, #2
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bde:	f043 0201 	orr.w	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2221      	movs	r2, #33	@ 0x21
 8005bec:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2204      	movs	r2, #4
 8005bf2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e0a5      	b.n	8005d4e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d01a      	beq.n	8005c40 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c0a:	f7ff fc5b 	bl	80054c4 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d302      	bcc.n	8005c20 <HAL_DMA2D_PollForTransfer+0x9c>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10f      	bne.n	8005c40 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c24:	f043 0220 	orr.w	r2, r3, #32
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2203      	movs	r2, #3
 8005c30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e086      	b.n	8005d4e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0ac      	beq.n	8005ba8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d061      	beq.n	8005d34 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c70:	f7ff fc28 	bl	80054c4 <HAL_GetTick>
 8005c74:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005c76:	e056      	b.n	8005d26 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d02e      	beq.n	8005ce8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c98:	f043 0204 	orr.w	r2, r3, #4
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cae:	f043 0202 	orr.w	r2, r3, #2
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc4:	f043 0201 	orr.w	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2229      	movs	r2, #41	@ 0x29
 8005cd2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e032      	b.n	8005d4e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cee:	d01a      	beq.n	8005d26 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005cf0:	f7ff fbe8 	bl	80054c4 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d302      	bcc.n	8005d06 <HAL_DMA2D_PollForTransfer+0x182>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10f      	bne.n	8005d26 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0a:	f043 0220 	orr.w	r2, r3, #32
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2203      	movs	r2, #3
 8005d16:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e013      	b.n	8005d4e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0a1      	beq.n	8005c78 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2212      	movs	r2, #18
 8005d3a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d026      	beq.n	8005dc6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d021      	beq.n	8005dc6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d90:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d96:	f043 0201 	orr.w	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2201      	movs	r2, #1
 8005da4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2204      	movs	r2, #4
 8005daa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d026      	beq.n	8005e1e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d021      	beq.n	8005e1e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005de8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2220      	movs	r2, #32
 8005df0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df6:	f043 0202 	orr.w	r2, r3, #2
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2204      	movs	r2, #4
 8005e02:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d026      	beq.n	8005e76 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d021      	beq.n	8005e76 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e40:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2208      	movs	r2, #8
 8005e48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4e:	f043 0204 	orr.w	r2, r3, #4
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2204      	movs	r2, #4
 8005e5a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d013      	beq.n	8005ea8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00e      	beq.n	8005ea8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e98:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f853 	bl	8005f4e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d024      	beq.n	8005efc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01f      	beq.n	8005efc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005eca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f003 0310 	and.w	r3, r3, #16
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d01f      	beq.n	8005f46 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01a      	beq.n	8005f46 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f1e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2210      	movs	r2, #16
 8005f26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f80e 	bl	8005f62 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005f46:	bf00      	nop
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
	...

08005f78 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_DMA2D_ConfigLayer+0x20>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e079      	b.n	800608c <HAL_DMA2D_ConfigLayer+0x114>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	3318      	adds	r3, #24
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005fc2:	4b35      	ldr	r3, [pc, #212]	@ (8006098 <HAL_DMA2D_ConfigLayer+0x120>)
 8005fc4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b0a      	cmp	r3, #10
 8005fcc:	d003      	beq.n	8005fd6 <HAL_DMA2D_ConfigLayer+0x5e>
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b09      	cmp	r3, #9
 8005fd4:	d107      	bne.n	8005fe6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e005      	b.n	8005ff2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	061b      	lsls	r3, r3, #24
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d120      	bne.n	800603a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	43db      	mvns	r3, r3
 8006002:	ea02 0103 	and.w	r1, r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	430a      	orrs	r2, r1
 800600e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	6812      	ldr	r2, [r2, #0]
 8006018:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b0a      	cmp	r3, #10
 8006020:	d003      	beq.n	800602a <HAL_DMA2D_ConfigLayer+0xb2>
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2b09      	cmp	r3, #9
 8006028:	d127      	bne.n	800607a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006036:	629a      	str	r2, [r3, #40]	@ 0x28
 8006038:	e01f      	b.n	800607a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	43db      	mvns	r3, r3
 8006044:	ea02 0103 	and.w	r1, r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	430a      	orrs	r2, r1
 8006050:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	2b0a      	cmp	r3, #10
 8006062:	d003      	beq.n	800606c <HAL_DMA2D_ConfigLayer+0xf4>
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b09      	cmp	r3, #9
 800606a:	d106      	bne.n	800607a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006078:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	ff03000f 	.word	0xff03000f

0800609c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800609c:	b480      	push	{r7}
 800609e:	b08b      	sub	sp, #44	@ 0x2c
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	041a      	lsls	r2, r3, #16
 80060b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ba:	431a      	orrs	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060d4:	d174      	bne.n	80061c0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80060dc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80060e4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80060ec:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d108      	bne.n	800610e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	431a      	orrs	r2, r3
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	4313      	orrs	r3, r2
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	627b      	str	r3, [r7, #36]	@ 0x24
 800610c:	e053      	b.n	80061b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d106      	bne.n	8006124 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	4313      	orrs	r3, r2
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	627b      	str	r3, [r7, #36]	@ 0x24
 8006122:	e048      	b.n	80061b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d111      	bne.n	8006150 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	0cdb      	lsrs	r3, r3, #19
 8006130:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	0a9b      	lsrs	r3, r3, #10
 8006136:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	08db      	lsrs	r3, r3, #3
 800613c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	02db      	lsls	r3, r3, #11
 8006146:	4313      	orrs	r3, r2
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	627b      	str	r3, [r7, #36]	@ 0x24
 800614e:	e032      	b.n	80061b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2b03      	cmp	r3, #3
 8006156:	d117      	bne.n	8006188 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	0fdb      	lsrs	r3, r3, #31
 800615c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	0cdb      	lsrs	r3, r3, #19
 8006162:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	0adb      	lsrs	r3, r3, #11
 8006168:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	08db      	lsrs	r3, r3, #3
 800616e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	029b      	lsls	r3, r3, #10
 8006178:	431a      	orrs	r2, r3
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	03db      	lsls	r3, r3, #15
 800617e:	4313      	orrs	r3, r2
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	627b      	str	r3, [r7, #36]	@ 0x24
 8006186:	e016      	b.n	80061b6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	0f1b      	lsrs	r3, r3, #28
 800618c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	0d1b      	lsrs	r3, r3, #20
 8006192:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	0b1b      	lsrs	r3, r3, #12
 8006198:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	091b      	lsrs	r3, r3, #4
 800619e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	011a      	lsls	r2, r3, #4
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	431a      	orrs	r2, r3
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	031b      	lsls	r3, r3, #12
 80061ae:	4313      	orrs	r3, r2
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061bc:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80061be:	e003      	b.n	80061c8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	60da      	str	r2, [r3, #12]
}
 80061c8:	bf00      	nop
 80061ca:	372c      	adds	r7, #44	@ 0x2c
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80061e6:	4b23      	ldr	r3, [pc, #140]	@ (8006274 <HAL_FLASH_Program+0xa0>)
 80061e8:	7e1b      	ldrb	r3, [r3, #24]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_FLASH_Program+0x1e>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e03b      	b.n	800626a <HAL_FLASH_Program+0x96>
 80061f2:	4b20      	ldr	r3, [pc, #128]	@ (8006274 <HAL_FLASH_Program+0xa0>)
 80061f4:	2201      	movs	r2, #1
 80061f6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80061f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80061fc:	f000 f870 	bl	80062e0 <FLASH_WaitForLastOperation>
 8006200:	4603      	mov	r3, r0
 8006202:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006204:	7dfb      	ldrb	r3, [r7, #23]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d12b      	bne.n	8006262 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d105      	bne.n	800621c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006210:	783b      	ldrb	r3, [r7, #0]
 8006212:	4619      	mov	r1, r3
 8006214:	68b8      	ldr	r0, [r7, #8]
 8006216:	f000 f91b 	bl	8006450 <FLASH_Program_Byte>
 800621a:	e016      	b.n	800624a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d105      	bne.n	800622e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006222:	883b      	ldrh	r3, [r7, #0]
 8006224:	4619      	mov	r1, r3
 8006226:	68b8      	ldr	r0, [r7, #8]
 8006228:	f000 f8ee 	bl	8006408 <FLASH_Program_HalfWord>
 800622c:	e00d      	b.n	800624a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d105      	bne.n	8006240 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	4619      	mov	r1, r3
 8006238:	68b8      	ldr	r0, [r7, #8]
 800623a:	f000 f8c3 	bl	80063c4 <FLASH_Program_Word>
 800623e:	e004      	b.n	800624a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006244:	68b8      	ldr	r0, [r7, #8]
 8006246:	f000 f88b 	bl	8006360 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800624a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800624e:	f000 f847 	bl	80062e0 <FLASH_WaitForLastOperation>
 8006252:	4603      	mov	r3, r0
 8006254:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006256:	4b08      	ldr	r3, [pc, #32]	@ (8006278 <HAL_FLASH_Program+0xa4>)
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	4a07      	ldr	r2, [pc, #28]	@ (8006278 <HAL_FLASH_Program+0xa4>)
 800625c:	f023 0301 	bic.w	r3, r3, #1
 8006260:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006262:	4b04      	ldr	r3, [pc, #16]	@ (8006274 <HAL_FLASH_Program+0xa0>)
 8006264:	2200      	movs	r2, #0
 8006266:	761a      	strb	r2, [r3, #24]

  return status;
 8006268:	7dfb      	ldrb	r3, [r7, #23]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	200092ac 	.word	0x200092ac
 8006278:	40023c00 	.word	0x40023c00

0800627c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006286:	4b0b      	ldr	r3, [pc, #44]	@ (80062b4 <HAL_FLASH_Unlock+0x38>)
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	da0b      	bge.n	80062a6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800628e:	4b09      	ldr	r3, [pc, #36]	@ (80062b4 <HAL_FLASH_Unlock+0x38>)
 8006290:	4a09      	ldr	r2, [pc, #36]	@ (80062b8 <HAL_FLASH_Unlock+0x3c>)
 8006292:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006294:	4b07      	ldr	r3, [pc, #28]	@ (80062b4 <HAL_FLASH_Unlock+0x38>)
 8006296:	4a09      	ldr	r2, [pc, #36]	@ (80062bc <HAL_FLASH_Unlock+0x40>)
 8006298:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800629a:	4b06      	ldr	r3, [pc, #24]	@ (80062b4 <HAL_FLASH_Unlock+0x38>)
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	da01      	bge.n	80062a6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80062a6:	79fb      	ldrb	r3, [r7, #7]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	40023c00 	.word	0x40023c00
 80062b8:	45670123 	.word	0x45670123
 80062bc:	cdef89ab 	.word	0xcdef89ab

080062c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80062c4:	4b05      	ldr	r3, [pc, #20]	@ (80062dc <HAL_FLASH_Lock+0x1c>)
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	4a04      	ldr	r2, [pc, #16]	@ (80062dc <HAL_FLASH_Lock+0x1c>)
 80062ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062ce:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	40023c00 	.word	0x40023c00

080062e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80062ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006358 <FLASH_WaitForLastOperation+0x78>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80062f2:	f7ff f8e7 	bl	80054c4 <HAL_GetTick>
 80062f6:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80062f8:	e010      	b.n	800631c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d00c      	beq.n	800631c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d007      	beq.n	8006318 <FLASH_WaitForLastOperation+0x38>
 8006308:	f7ff f8dc 	bl	80054c4 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	429a      	cmp	r2, r3
 8006316:	d201      	bcs.n	800631c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e019      	b.n	8006350 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800631c:	4b0f      	ldr	r3, [pc, #60]	@ (800635c <FLASH_WaitForLastOperation+0x7c>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e8      	bne.n	80062fa <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006328:	4b0c      	ldr	r3, [pc, #48]	@ (800635c <FLASH_WaitForLastOperation+0x7c>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006334:	4b09      	ldr	r3, [pc, #36]	@ (800635c <FLASH_WaitForLastOperation+0x7c>)
 8006336:	2201      	movs	r2, #1
 8006338:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800633a:	4b08      	ldr	r3, [pc, #32]	@ (800635c <FLASH_WaitForLastOperation+0x7c>)
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006346:	f000 f8a5 	bl	8006494 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800634e:	2300      	movs	r3, #0

}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	200092ac 	.word	0x200092ac
 800635c:	40023c00 	.word	0x40023c00

08006360 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800636c:	4b14      	ldr	r3, [pc, #80]	@ (80063c0 <FLASH_Program_DoubleWord+0x60>)
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	4a13      	ldr	r2, [pc, #76]	@ (80063c0 <FLASH_Program_DoubleWord+0x60>)
 8006372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006376:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006378:	4b11      	ldr	r3, [pc, #68]	@ (80063c0 <FLASH_Program_DoubleWord+0x60>)
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	4a10      	ldr	r2, [pc, #64]	@ (80063c0 <FLASH_Program_DoubleWord+0x60>)
 800637e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006382:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006384:	4b0e      	ldr	r3, [pc, #56]	@ (80063c0 <FLASH_Program_DoubleWord+0x60>)
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	4a0d      	ldr	r2, [pc, #52]	@ (80063c0 <FLASH_Program_DoubleWord+0x60>)
 800638a:	f043 0301 	orr.w	r3, r3, #1
 800638e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006396:	f3bf 8f6f 	isb	sy
}
 800639a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 800639c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	000a      	movs	r2, r1
 80063aa:	2300      	movs	r3, #0
 80063ac:	68f9      	ldr	r1, [r7, #12]
 80063ae:	3104      	adds	r1, #4
 80063b0:	4613      	mov	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]
}
 80063b4:	bf00      	nop
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	40023c00 	.word	0x40023c00

080063c4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <FLASH_Program_Word+0x40>)
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006404 <FLASH_Program_Word+0x40>)
 80063d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80063da:	4b0a      	ldr	r3, [pc, #40]	@ (8006404 <FLASH_Program_Word+0x40>)
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	4a09      	ldr	r2, [pc, #36]	@ (8006404 <FLASH_Program_Word+0x40>)
 80063e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80063e6:	4b07      	ldr	r3, [pc, #28]	@ (8006404 <FLASH_Program_Word+0x40>)
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	4a06      	ldr	r2, [pc, #24]	@ (8006404 <FLASH_Program_Word+0x40>)
 80063ec:	f043 0301 	orr.w	r3, r3, #1
 80063f0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	601a      	str	r2, [r3, #0]
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	40023c00 	.word	0x40023c00

08006408 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006414:	4b0d      	ldr	r3, [pc, #52]	@ (800644c <FLASH_Program_HalfWord+0x44>)
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	4a0c      	ldr	r2, [pc, #48]	@ (800644c <FLASH_Program_HalfWord+0x44>)
 800641a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800641e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006420:	4b0a      	ldr	r3, [pc, #40]	@ (800644c <FLASH_Program_HalfWord+0x44>)
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	4a09      	ldr	r2, [pc, #36]	@ (800644c <FLASH_Program_HalfWord+0x44>)
 8006426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800642a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800642c:	4b07      	ldr	r3, [pc, #28]	@ (800644c <FLASH_Program_HalfWord+0x44>)
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	4a06      	ldr	r2, [pc, #24]	@ (800644c <FLASH_Program_HalfWord+0x44>)
 8006432:	f043 0301 	orr.w	r3, r3, #1
 8006436:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	887a      	ldrh	r2, [r7, #2]
 800643c:	801a      	strh	r2, [r3, #0]
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40023c00 	.word	0x40023c00

08006450 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800645c:	4b0c      	ldr	r3, [pc, #48]	@ (8006490 <FLASH_Program_Byte+0x40>)
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	4a0b      	ldr	r2, [pc, #44]	@ (8006490 <FLASH_Program_Byte+0x40>)
 8006462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006466:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006468:	4b09      	ldr	r3, [pc, #36]	@ (8006490 <FLASH_Program_Byte+0x40>)
 800646a:	4a09      	ldr	r2, [pc, #36]	@ (8006490 <FLASH_Program_Byte+0x40>)
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006470:	4b07      	ldr	r3, [pc, #28]	@ (8006490 <FLASH_Program_Byte+0x40>)
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	4a06      	ldr	r2, [pc, #24]	@ (8006490 <FLASH_Program_Byte+0x40>)
 8006476:	f043 0301 	orr.w	r3, r3, #1
 800647a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	78fa      	ldrb	r2, [r7, #3]
 8006480:	701a      	strb	r2, [r3, #0]
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	40023c00 	.word	0x40023c00

08006494 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006498:	4b2f      	ldr	r3, [pc, #188]	@ (8006558 <FLASH_SetErrorCode+0xc4>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80064a4:	4b2d      	ldr	r3, [pc, #180]	@ (800655c <FLASH_SetErrorCode+0xc8>)
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	f043 0310 	orr.w	r3, r3, #16
 80064ac:	4a2b      	ldr	r2, [pc, #172]	@ (800655c <FLASH_SetErrorCode+0xc8>)
 80064ae:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80064b0:	4b29      	ldr	r3, [pc, #164]	@ (8006558 <FLASH_SetErrorCode+0xc4>)
 80064b2:	2210      	movs	r2, #16
 80064b4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80064b6:	4b28      	ldr	r3, [pc, #160]	@ (8006558 <FLASH_SetErrorCode+0xc4>)
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d008      	beq.n	80064d4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80064c2:	4b26      	ldr	r3, [pc, #152]	@ (800655c <FLASH_SetErrorCode+0xc8>)
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	f043 0308 	orr.w	r3, r3, #8
 80064ca:	4a24      	ldr	r2, [pc, #144]	@ (800655c <FLASH_SetErrorCode+0xc8>)
 80064cc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80064ce:	4b22      	ldr	r3, [pc, #136]	@ (8006558 <FLASH_SetErrorCode+0xc4>)
 80064d0:	2220      	movs	r2, #32
 80064d2:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80064d4:	4b20      	ldr	r3, [pc, #128]	@ (8006558 <FLASH_SetErrorCode+0xc4>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80064e0:	4b1e      	ldr	r3, [pc, #120]	@ (800655c <FLASH_SetErrorCode+0xc8>)
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	f043 0304 	orr.w	r3, r3, #4
 80064e8:	4a1c      	ldr	r2, [pc, #112]	@ (800655c <FLASH_SetErrorCode+0xc8>)
 80064ea:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80064ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006558 <FLASH_SetErrorCode+0xc4>)
 80064ee:	2240      	movs	r2, #64	@ 0x40
 80064f0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80064f2:	4b19      	ldr	r3, [pc, #100]	@ (8006558 <FLASH_SetErrorCode+0xc4>)
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d008      	beq.n	8006510 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80064fe:	4b17      	ldr	r3, [pc, #92]	@ (800655c <FLASH_SetErrorCode+0xc8>)
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	f043 0302 	orr.w	r3, r3, #2
 8006506:	4a15      	ldr	r2, [pc, #84]	@ (800655c <FLASH_SetErrorCode+0xc8>)
 8006508:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800650a:	4b13      	ldr	r3, [pc, #76]	@ (8006558 <FLASH_SetErrorCode+0xc4>)
 800650c:	2280      	movs	r2, #128	@ 0x80
 800650e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006510:	4b11      	ldr	r3, [pc, #68]	@ (8006558 <FLASH_SetErrorCode+0xc4>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006518:	2b00      	cmp	r3, #0
 800651a:	d009      	beq.n	8006530 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800651c:	4b0f      	ldr	r3, [pc, #60]	@ (800655c <FLASH_SetErrorCode+0xc8>)
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	4a0d      	ldr	r2, [pc, #52]	@ (800655c <FLASH_SetErrorCode+0xc8>)
 8006526:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006528:	4b0b      	ldr	r3, [pc, #44]	@ (8006558 <FLASH_SetErrorCode+0xc4>)
 800652a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800652e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006530:	4b09      	ldr	r3, [pc, #36]	@ (8006558 <FLASH_SetErrorCode+0xc4>)
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800653c:	4b07      	ldr	r3, [pc, #28]	@ (800655c <FLASH_SetErrorCode+0xc8>)
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	f043 0320 	orr.w	r3, r3, #32
 8006544:	4a05      	ldr	r2, [pc, #20]	@ (800655c <FLASH_SetErrorCode+0xc8>)
 8006546:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006548:	4b03      	ldr	r3, [pc, #12]	@ (8006558 <FLASH_SetErrorCode+0xc4>)
 800654a:	2202      	movs	r2, #2
 800654c:	60da      	str	r2, [r3, #12]
  }
}
 800654e:	bf00      	nop
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	40023c00 	.word	0x40023c00
 800655c:	200092ac 	.word	0x200092ac

08006560 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e010      	b.n	800659e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d103      	bne.n	800658a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006582:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	e009      	b.n	800659e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d103      	bne.n	8006598 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	e002      	b.n	800659e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006598:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800659c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b0b      	cmp	r3, #11
 80065a2:	d902      	bls.n	80065aa <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3304      	adds	r3, #4
 80065a8:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80065aa:	4b13      	ldr	r3, [pc, #76]	@ (80065f8 <FLASH_Erase_Sector+0x98>)
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	4a12      	ldr	r2, [pc, #72]	@ (80065f8 <FLASH_Erase_Sector+0x98>)
 80065b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80065b6:	4b10      	ldr	r3, [pc, #64]	@ (80065f8 <FLASH_Erase_Sector+0x98>)
 80065b8:	691a      	ldr	r2, [r3, #16]
 80065ba:	490f      	ldr	r1, [pc, #60]	@ (80065f8 <FLASH_Erase_Sector+0x98>)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80065c2:	4b0d      	ldr	r3, [pc, #52]	@ (80065f8 <FLASH_Erase_Sector+0x98>)
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	4a0c      	ldr	r2, [pc, #48]	@ (80065f8 <FLASH_Erase_Sector+0x98>)
 80065c8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80065cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80065ce:	4b0a      	ldr	r3, [pc, #40]	@ (80065f8 <FLASH_Erase_Sector+0x98>)
 80065d0:	691a      	ldr	r2, [r3, #16]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	4313      	orrs	r3, r2
 80065d8:	4a07      	ldr	r2, [pc, #28]	@ (80065f8 <FLASH_Erase_Sector+0x98>)
 80065da:	f043 0302 	orr.w	r3, r3, #2
 80065de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80065e0:	4b05      	ldr	r3, [pc, #20]	@ (80065f8 <FLASH_Erase_Sector+0x98>)
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	4a04      	ldr	r2, [pc, #16]	@ (80065f8 <FLASH_Erase_Sector+0x98>)
 80065e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ea:	6113      	str	r3, [r2, #16]
}
 80065ec:	bf00      	nop
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	40023c00 	.word	0x40023c00

080065fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b089      	sub	sp, #36	@ 0x24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800660a:	2300      	movs	r3, #0
 800660c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800660e:	2300      	movs	r3, #0
 8006610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006612:	2300      	movs	r3, #0
 8006614:	61fb      	str	r3, [r7, #28]
 8006616:	e177      	b.n	8006908 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006618:	2201      	movs	r2, #1
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4013      	ands	r3, r2
 800662a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	429a      	cmp	r2, r3
 8006632:	f040 8166 	bne.w	8006902 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	2b01      	cmp	r3, #1
 8006640:	d005      	beq.n	800664e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800664a:	2b02      	cmp	r3, #2
 800664c:	d130      	bne.n	80066b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	2203      	movs	r2, #3
 800665a:	fa02 f303 	lsl.w	r3, r2, r3
 800665e:	43db      	mvns	r3, r3
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	4013      	ands	r3, r2
 8006664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	fa02 f303 	lsl.w	r3, r2, r3
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	4313      	orrs	r3, r2
 8006676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006684:	2201      	movs	r2, #1
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	43db      	mvns	r3, r3
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4013      	ands	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	091b      	lsrs	r3, r3, #4
 800669a:	f003 0201 	and.w	r2, r3, #1
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	2b03      	cmp	r3, #3
 80066ba:	d017      	beq.n	80066ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	2203      	movs	r2, #3
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	43db      	mvns	r3, r3
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	4013      	ands	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	fa02 f303 	lsl.w	r3, r2, r3
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d123      	bne.n	8006740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	08da      	lsrs	r2, r3, #3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3208      	adds	r2, #8
 8006700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	220f      	movs	r2, #15
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	43db      	mvns	r3, r3
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	4013      	ands	r3, r2
 800671a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	4313      	orrs	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	08da      	lsrs	r2, r3, #3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3208      	adds	r2, #8
 800673a:	69b9      	ldr	r1, [r7, #24]
 800673c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	2203      	movs	r2, #3
 800674c:	fa02 f303 	lsl.w	r3, r2, r3
 8006750:	43db      	mvns	r3, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	4013      	ands	r3, r2
 8006756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f003 0203 	and.w	r2, r3, #3
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	4313      	orrs	r3, r2
 800676c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80c0 	beq.w	8006902 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	4b66      	ldr	r3, [pc, #408]	@ (8006920 <HAL_GPIO_Init+0x324>)
 8006788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800678a:	4a65      	ldr	r2, [pc, #404]	@ (8006920 <HAL_GPIO_Init+0x324>)
 800678c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006790:	6453      	str	r3, [r2, #68]	@ 0x44
 8006792:	4b63      	ldr	r3, [pc, #396]	@ (8006920 <HAL_GPIO_Init+0x324>)
 8006794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800679e:	4a61      	ldr	r2, [pc, #388]	@ (8006924 <HAL_GPIO_Init+0x328>)
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	089b      	lsrs	r3, r3, #2
 80067a4:	3302      	adds	r3, #2
 80067a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	220f      	movs	r2, #15
 80067b6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ba:	43db      	mvns	r3, r3
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	4013      	ands	r3, r2
 80067c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a58      	ldr	r2, [pc, #352]	@ (8006928 <HAL_GPIO_Init+0x32c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d037      	beq.n	800683a <HAL_GPIO_Init+0x23e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a57      	ldr	r2, [pc, #348]	@ (800692c <HAL_GPIO_Init+0x330>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d031      	beq.n	8006836 <HAL_GPIO_Init+0x23a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a56      	ldr	r2, [pc, #344]	@ (8006930 <HAL_GPIO_Init+0x334>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d02b      	beq.n	8006832 <HAL_GPIO_Init+0x236>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a55      	ldr	r2, [pc, #340]	@ (8006934 <HAL_GPIO_Init+0x338>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d025      	beq.n	800682e <HAL_GPIO_Init+0x232>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a54      	ldr	r2, [pc, #336]	@ (8006938 <HAL_GPIO_Init+0x33c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d01f      	beq.n	800682a <HAL_GPIO_Init+0x22e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a53      	ldr	r2, [pc, #332]	@ (800693c <HAL_GPIO_Init+0x340>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d019      	beq.n	8006826 <HAL_GPIO_Init+0x22a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a52      	ldr	r2, [pc, #328]	@ (8006940 <HAL_GPIO_Init+0x344>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d013      	beq.n	8006822 <HAL_GPIO_Init+0x226>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a51      	ldr	r2, [pc, #324]	@ (8006944 <HAL_GPIO_Init+0x348>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00d      	beq.n	800681e <HAL_GPIO_Init+0x222>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a50      	ldr	r2, [pc, #320]	@ (8006948 <HAL_GPIO_Init+0x34c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d007      	beq.n	800681a <HAL_GPIO_Init+0x21e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a4f      	ldr	r2, [pc, #316]	@ (800694c <HAL_GPIO_Init+0x350>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d101      	bne.n	8006816 <HAL_GPIO_Init+0x21a>
 8006812:	2309      	movs	r3, #9
 8006814:	e012      	b.n	800683c <HAL_GPIO_Init+0x240>
 8006816:	230a      	movs	r3, #10
 8006818:	e010      	b.n	800683c <HAL_GPIO_Init+0x240>
 800681a:	2308      	movs	r3, #8
 800681c:	e00e      	b.n	800683c <HAL_GPIO_Init+0x240>
 800681e:	2307      	movs	r3, #7
 8006820:	e00c      	b.n	800683c <HAL_GPIO_Init+0x240>
 8006822:	2306      	movs	r3, #6
 8006824:	e00a      	b.n	800683c <HAL_GPIO_Init+0x240>
 8006826:	2305      	movs	r3, #5
 8006828:	e008      	b.n	800683c <HAL_GPIO_Init+0x240>
 800682a:	2304      	movs	r3, #4
 800682c:	e006      	b.n	800683c <HAL_GPIO_Init+0x240>
 800682e:	2303      	movs	r3, #3
 8006830:	e004      	b.n	800683c <HAL_GPIO_Init+0x240>
 8006832:	2302      	movs	r3, #2
 8006834:	e002      	b.n	800683c <HAL_GPIO_Init+0x240>
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <HAL_GPIO_Init+0x240>
 800683a:	2300      	movs	r3, #0
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	f002 0203 	and.w	r2, r2, #3
 8006842:	0092      	lsls	r2, r2, #2
 8006844:	4093      	lsls	r3, r2
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4313      	orrs	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800684c:	4935      	ldr	r1, [pc, #212]	@ (8006924 <HAL_GPIO_Init+0x328>)
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	089b      	lsrs	r3, r3, #2
 8006852:	3302      	adds	r3, #2
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800685a:	4b3d      	ldr	r3, [pc, #244]	@ (8006950 <HAL_GPIO_Init+0x354>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	43db      	mvns	r3, r3
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	4013      	ands	r3, r2
 8006868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800687e:	4a34      	ldr	r2, [pc, #208]	@ (8006950 <HAL_GPIO_Init+0x354>)
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006884:	4b32      	ldr	r3, [pc, #200]	@ (8006950 <HAL_GPIO_Init+0x354>)
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	43db      	mvns	r3, r3
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	4013      	ands	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068a8:	4a29      	ldr	r2, [pc, #164]	@ (8006950 <HAL_GPIO_Init+0x354>)
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068ae:	4b28      	ldr	r3, [pc, #160]	@ (8006950 <HAL_GPIO_Init+0x354>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	43db      	mvns	r3, r3
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	4013      	ands	r3, r2
 80068bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006950 <HAL_GPIO_Init+0x354>)
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80068d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006950 <HAL_GPIO_Init+0x354>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	43db      	mvns	r3, r3
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	4013      	ands	r3, r2
 80068e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068fc:	4a14      	ldr	r2, [pc, #80]	@ (8006950 <HAL_GPIO_Init+0x354>)
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3301      	adds	r3, #1
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	2b0f      	cmp	r3, #15
 800690c:	f67f ae84 	bls.w	8006618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	3724      	adds	r7, #36	@ 0x24
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40023800 	.word	0x40023800
 8006924:	40013800 	.word	0x40013800
 8006928:	40020000 	.word	0x40020000
 800692c:	40020400 	.word	0x40020400
 8006930:	40020800 	.word	0x40020800
 8006934:	40020c00 	.word	0x40020c00
 8006938:	40021000 	.word	0x40021000
 800693c:	40021400 	.word	0x40021400
 8006940:	40021800 	.word	0x40021800
 8006944:	40021c00 	.word	0x40021c00
 8006948:	40022000 	.word	0x40022000
 800694c:	40022400 	.word	0x40022400
 8006950:	40013c00 	.word	0x40013c00

08006954 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800695e:	2300      	movs	r3, #0
 8006960:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006966:	2300      	movs	r3, #0
 8006968:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800696a:	2300      	movs	r3, #0
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	e0d9      	b.n	8006b24 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006970:	2201      	movs	r2, #1
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	fa02 f303 	lsl.w	r3, r2, r3
 8006978:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	4013      	ands	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	429a      	cmp	r2, r3
 8006988:	f040 80c9 	bne.w	8006b1e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800698c:	4a6b      	ldr	r2, [pc, #428]	@ (8006b3c <HAL_GPIO_DeInit+0x1e8>)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	089b      	lsrs	r3, r3, #2
 8006992:	3302      	adds	r3, #2
 8006994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006998:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	220f      	movs	r2, #15
 80069a4:	fa02 f303 	lsl.w	r3, r2, r3
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	4013      	ands	r3, r2
 80069ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a63      	ldr	r2, [pc, #396]	@ (8006b40 <HAL_GPIO_DeInit+0x1ec>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d037      	beq.n	8006a26 <HAL_GPIO_DeInit+0xd2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a62      	ldr	r2, [pc, #392]	@ (8006b44 <HAL_GPIO_DeInit+0x1f0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d031      	beq.n	8006a22 <HAL_GPIO_DeInit+0xce>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a61      	ldr	r2, [pc, #388]	@ (8006b48 <HAL_GPIO_DeInit+0x1f4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d02b      	beq.n	8006a1e <HAL_GPIO_DeInit+0xca>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a60      	ldr	r2, [pc, #384]	@ (8006b4c <HAL_GPIO_DeInit+0x1f8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d025      	beq.n	8006a1a <HAL_GPIO_DeInit+0xc6>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a5f      	ldr	r2, [pc, #380]	@ (8006b50 <HAL_GPIO_DeInit+0x1fc>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01f      	beq.n	8006a16 <HAL_GPIO_DeInit+0xc2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006b54 <HAL_GPIO_DeInit+0x200>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d019      	beq.n	8006a12 <HAL_GPIO_DeInit+0xbe>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a5d      	ldr	r2, [pc, #372]	@ (8006b58 <HAL_GPIO_DeInit+0x204>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d013      	beq.n	8006a0e <HAL_GPIO_DeInit+0xba>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a5c      	ldr	r2, [pc, #368]	@ (8006b5c <HAL_GPIO_DeInit+0x208>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00d      	beq.n	8006a0a <HAL_GPIO_DeInit+0xb6>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a5b      	ldr	r2, [pc, #364]	@ (8006b60 <HAL_GPIO_DeInit+0x20c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d007      	beq.n	8006a06 <HAL_GPIO_DeInit+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a5a      	ldr	r2, [pc, #360]	@ (8006b64 <HAL_GPIO_DeInit+0x210>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d101      	bne.n	8006a02 <HAL_GPIO_DeInit+0xae>
 80069fe:	2309      	movs	r3, #9
 8006a00:	e012      	b.n	8006a28 <HAL_GPIO_DeInit+0xd4>
 8006a02:	230a      	movs	r3, #10
 8006a04:	e010      	b.n	8006a28 <HAL_GPIO_DeInit+0xd4>
 8006a06:	2308      	movs	r3, #8
 8006a08:	e00e      	b.n	8006a28 <HAL_GPIO_DeInit+0xd4>
 8006a0a:	2307      	movs	r3, #7
 8006a0c:	e00c      	b.n	8006a28 <HAL_GPIO_DeInit+0xd4>
 8006a0e:	2306      	movs	r3, #6
 8006a10:	e00a      	b.n	8006a28 <HAL_GPIO_DeInit+0xd4>
 8006a12:	2305      	movs	r3, #5
 8006a14:	e008      	b.n	8006a28 <HAL_GPIO_DeInit+0xd4>
 8006a16:	2304      	movs	r3, #4
 8006a18:	e006      	b.n	8006a28 <HAL_GPIO_DeInit+0xd4>
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e004      	b.n	8006a28 <HAL_GPIO_DeInit+0xd4>
 8006a1e:	2302      	movs	r3, #2
 8006a20:	e002      	b.n	8006a28 <HAL_GPIO_DeInit+0xd4>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <HAL_GPIO_DeInit+0xd4>
 8006a26:	2300      	movs	r3, #0
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	f002 0203 	and.w	r2, r2, #3
 8006a2e:	0092      	lsls	r2, r2, #2
 8006a30:	4093      	lsls	r3, r2
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d132      	bne.n	8006a9e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006a38:	4b4b      	ldr	r3, [pc, #300]	@ (8006b68 <HAL_GPIO_DeInit+0x214>)
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	43db      	mvns	r3, r3
 8006a40:	4949      	ldr	r1, [pc, #292]	@ (8006b68 <HAL_GPIO_DeInit+0x214>)
 8006a42:	4013      	ands	r3, r2
 8006a44:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006a46:	4b48      	ldr	r3, [pc, #288]	@ (8006b68 <HAL_GPIO_DeInit+0x214>)
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	4946      	ldr	r1, [pc, #280]	@ (8006b68 <HAL_GPIO_DeInit+0x214>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006a54:	4b44      	ldr	r3, [pc, #272]	@ (8006b68 <HAL_GPIO_DeInit+0x214>)
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	43db      	mvns	r3, r3
 8006a5c:	4942      	ldr	r1, [pc, #264]	@ (8006b68 <HAL_GPIO_DeInit+0x214>)
 8006a5e:	4013      	ands	r3, r2
 8006a60:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006a62:	4b41      	ldr	r3, [pc, #260]	@ (8006b68 <HAL_GPIO_DeInit+0x214>)
 8006a64:	689a      	ldr	r2, [r3, #8]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	493f      	ldr	r1, [pc, #252]	@ (8006b68 <HAL_GPIO_DeInit+0x214>)
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	220f      	movs	r2, #15
 8006a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006a80:	4a2e      	ldr	r2, [pc, #184]	@ (8006b3c <HAL_GPIO_DeInit+0x1e8>)
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	089b      	lsrs	r3, r3, #2
 8006a86:	3302      	adds	r3, #2
 8006a88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	43da      	mvns	r2, r3
 8006a90:	482a      	ldr	r0, [pc, #168]	@ (8006b3c <HAL_GPIO_DeInit+0x1e8>)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	089b      	lsrs	r3, r3, #2
 8006a96:	400a      	ands	r2, r1
 8006a98:	3302      	adds	r3, #2
 8006a9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	2103      	movs	r1, #3
 8006aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aac:	43db      	mvns	r3, r3
 8006aae:	401a      	ands	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	08da      	lsrs	r2, r3, #3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3208      	adds	r2, #8
 8006abc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	220f      	movs	r2, #15
 8006aca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ace:	43db      	mvns	r3, r3
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	08d2      	lsrs	r2, r2, #3
 8006ad4:	4019      	ands	r1, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3208      	adds	r2, #8
 8006ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	2103      	movs	r1, #3
 8006ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aec:	43db      	mvns	r3, r3
 8006aee:	401a      	ands	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	2101      	movs	r1, #1
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	fa01 f303 	lsl.w	r3, r1, r3
 8006b00:	43db      	mvns	r3, r3
 8006b02:	401a      	ands	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	2103      	movs	r1, #3
 8006b12:	fa01 f303 	lsl.w	r3, r1, r3
 8006b16:	43db      	mvns	r3, r3
 8006b18:	401a      	ands	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	3301      	adds	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2b0f      	cmp	r3, #15
 8006b28:	f67f af22 	bls.w	8006970 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40013800 	.word	0x40013800
 8006b40:	40020000 	.word	0x40020000
 8006b44:	40020400 	.word	0x40020400
 8006b48:	40020800 	.word	0x40020800
 8006b4c:	40020c00 	.word	0x40020c00
 8006b50:	40021000 	.word	0x40021000
 8006b54:	40021400 	.word	0x40021400
 8006b58:	40021800 	.word	0x40021800
 8006b5c:	40021c00 	.word	0x40021c00
 8006b60:	40022000 	.word	0x40022000
 8006b64:	40022400 	.word	0x40022400
 8006b68:	40013c00 	.word	0x40013c00

08006b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	807b      	strh	r3, [r7, #2]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b7c:	787b      	ldrb	r3, [r7, #1]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b82:	887a      	ldrh	r2, [r7, #2]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b88:	e003      	b.n	8006b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b8a:	887b      	ldrh	r3, [r7, #2]
 8006b8c:	041a      	lsls	r2, r3, #16
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	619a      	str	r2, [r3, #24]
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b086      	sub	sp, #24
 8006ba2:	af02      	add	r7, sp, #8
 8006ba4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e059      	b.n	8006c64 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f00a fbfc 	bl	80113c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2203      	movs	r2, #3
 8006bd4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bde:	d102      	bne.n	8006be6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f006 fcaf 	bl	800d54e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6818      	ldr	r0, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	7c1a      	ldrb	r2, [r3, #16]
 8006bf8:	f88d 2000 	strb.w	r2, [sp]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c00:	f006 fc30 	bl	800d464 <USB_CoreInit>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d005      	beq.n	8006c16 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e026      	b.n	8006c64 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f006 fca7 	bl	800d570 <USB_SetCurrentMode>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d005      	beq.n	8006c34 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e017      	b.n	8006c64 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	7c1a      	ldrb	r2, [r3, #16]
 8006c3c:	f88d 2000 	strb.w	r2, [sp]
 8006c40:	3304      	adds	r3, #4
 8006c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c44:	f006 fe4a 	bl	800d8dc <USB_HostInit>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e004      	b.n	8006c64 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006c6c:	b590      	push	{r4, r7, lr}
 8006c6e:	b08b      	sub	sp, #44	@ 0x2c
 8006c70:	af04      	add	r7, sp, #16
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	4608      	mov	r0, r1
 8006c76:	4611      	mov	r1, r2
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	70fb      	strb	r3, [r7, #3]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	70bb      	strb	r3, [r7, #2]
 8006c82:	4613      	mov	r3, r2
 8006c84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8006c86:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006c88:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_HCD_HC_Init+0x2c>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e09d      	b.n	8006dd4 <HAL_HCD_HC_Init+0x168>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8006ca0:	78fa      	ldrb	r2, [r7, #3]
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	1a9b      	subs	r3, r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	3319      	adds	r3, #25
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	3314      	adds	r3, #20
 8006cc4:	787a      	ldrb	r2, [r7, #1]
 8006cc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006cc8:	78fa      	ldrb	r2, [r7, #3]
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	1a9b      	subs	r3, r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	440b      	add	r3, r1
 8006cd6:	3315      	adds	r3, #21
 8006cd8:	78fa      	ldrb	r2, [r7, #3]
 8006cda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006cdc:	78fa      	ldrb	r2, [r7, #3]
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	3326      	adds	r3, #38	@ 0x26
 8006cec:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8006cf0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006cf2:	78fa      	ldrb	r2, [r7, #3]
 8006cf4:	78bb      	ldrb	r3, [r7, #2]
 8006cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cfa:	b2d8      	uxtb	r0, r3
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	440b      	add	r3, r1
 8006d08:	3316      	adds	r3, #22
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fbc8 	bl	80074a8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8006d18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	da0a      	bge.n	8006d36 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006d20:	78fa      	ldrb	r2, [r7, #3]
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	4613      	mov	r3, r2
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	1a9b      	subs	r3, r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	440b      	add	r3, r1
 8006d2e:	3317      	adds	r3, #23
 8006d30:	2201      	movs	r2, #1
 8006d32:	701a      	strb	r2, [r3, #0]
 8006d34:	e009      	b.n	8006d4a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006d36:	78fa      	ldrb	r2, [r7, #3]
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	1a9b      	subs	r3, r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	440b      	add	r3, r1
 8006d44:	3317      	adds	r3, #23
 8006d46:	2200      	movs	r2, #0
 8006d48:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f006 ff28 	bl	800dba4 <USB_GetHostSpeed>
 8006d54:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8006d56:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d10b      	bne.n	8006d76 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8006d5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d107      	bne.n	8006d76 <HAL_HCD_HC_Init+0x10a>
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2bbc      	cmp	r3, #188	@ 0xbc
 8006d70:	d901      	bls.n	8006d76 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8006d72:	23bc      	movs	r3, #188	@ 0xbc
 8006d74:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	1a9b      	subs	r3, r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	3318      	adds	r3, #24
 8006d86:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006d8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8006d8c:	78fa      	ldrb	r2, [r7, #3]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	b298      	uxth	r0, r3
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	4613      	mov	r3, r2
 8006d96:	011b      	lsls	r3, r3, #4
 8006d98:	1a9b      	subs	r3, r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	440b      	add	r3, r1
 8006d9e:	3328      	adds	r3, #40	@ 0x28
 8006da0:	4602      	mov	r2, r0
 8006da2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	787c      	ldrb	r4, [r7, #1]
 8006dae:	78ba      	ldrb	r2, [r7, #2]
 8006db0:	78f9      	ldrb	r1, [r7, #3]
 8006db2:	9302      	str	r3, [sp, #8]
 8006db4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	4623      	mov	r3, r4
 8006dc2:	f006 ff17 	bl	800dbf4 <USB_HC_Init>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd90      	pop	{r4, r7, pc}

08006ddc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d101      	bne.n	8006dfa <HAL_HCD_HC_Halt+0x1e>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e00f      	b.n	8006e1a <HAL_HCD_HC_Halt+0x3e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	78fa      	ldrb	r2, [r7, #3]
 8006e08:	4611      	mov	r1, r2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f007 faa9 	bl	800e362 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	4608      	mov	r0, r1
 8006e2e:	4611      	mov	r1, r2
 8006e30:	461a      	mov	r2, r3
 8006e32:	4603      	mov	r3, r0
 8006e34:	70fb      	strb	r3, [r7, #3]
 8006e36:	460b      	mov	r3, r1
 8006e38:	70bb      	strb	r3, [r7, #2]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006e3e:	78fa      	ldrb	r2, [r7, #3]
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	4613      	mov	r3, r2
 8006e44:	011b      	lsls	r3, r3, #4
 8006e46:	1a9b      	subs	r3, r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	440b      	add	r3, r1
 8006e4c:	3317      	adds	r3, #23
 8006e4e:	78ba      	ldrb	r2, [r7, #2]
 8006e50:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006e52:	78fa      	ldrb	r2, [r7, #3]
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	1a9b      	subs	r3, r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	3326      	adds	r3, #38	@ 0x26
 8006e62:	787a      	ldrb	r2, [r7, #1]
 8006e64:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006e66:	7c3b      	ldrb	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d114      	bne.n	8006e96 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006e6c:	78fa      	ldrb	r2, [r7, #3]
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4613      	mov	r3, r2
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	332a      	adds	r3, #42	@ 0x2a
 8006e7c:	2203      	movs	r2, #3
 8006e7e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006e80:	78fa      	ldrb	r2, [r7, #3]
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	4613      	mov	r3, r2
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	3319      	adds	r3, #25
 8006e90:	7f3a      	ldrb	r2, [r7, #28]
 8006e92:	701a      	strb	r2, [r3, #0]
 8006e94:	e009      	b.n	8006eaa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006e96:	78fa      	ldrb	r2, [r7, #3]
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	332a      	adds	r3, #42	@ 0x2a
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006eaa:	787b      	ldrb	r3, [r7, #1]
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	f200 8102 	bhi.w	80070b6 <HAL_HCD_HC_SubmitRequest+0x292>
 8006eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb8 <HAL_HCD_HC_SubmitRequest+0x94>)
 8006eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb8:	08006ec9 	.word	0x08006ec9
 8006ebc:	080070a1 	.word	0x080070a1
 8006ec0:	08006f8d 	.word	0x08006f8d
 8006ec4:	08007017 	.word	0x08007017
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8006ec8:	7c3b      	ldrb	r3, [r7, #16]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	f040 80f5 	bne.w	80070ba <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8006ed0:	78bb      	ldrb	r3, [r7, #2]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d12d      	bne.n	8006f32 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8006ed6:	8b3b      	ldrh	r3, [r7, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d109      	bne.n	8006ef0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8006edc:	78fa      	ldrb	r2, [r7, #3]
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	440b      	add	r3, r1
 8006eea:	333d      	adds	r3, #61	@ 0x3d
 8006eec:	2201      	movs	r2, #1
 8006eee:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8006ef0:	78fa      	ldrb	r2, [r7, #3]
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	011b      	lsls	r3, r3, #4
 8006ef8:	1a9b      	subs	r3, r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	333d      	adds	r3, #61	@ 0x3d
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006f06:	78fa      	ldrb	r2, [r7, #3]
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	011b      	lsls	r3, r3, #4
 8006f0e:	1a9b      	subs	r3, r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	332a      	adds	r3, #42	@ 0x2a
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8006f1a:	e0ce      	b.n	80070ba <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006f1c:	78fa      	ldrb	r2, [r7, #3]
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	4613      	mov	r3, r2
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	1a9b      	subs	r3, r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	332a      	adds	r3, #42	@ 0x2a
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	701a      	strb	r2, [r3, #0]
      break;
 8006f30:	e0c3      	b.n	80070ba <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8006f32:	78fa      	ldrb	r2, [r7, #3]
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	440b      	add	r3, r1
 8006f40:	331a      	adds	r3, #26
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	f040 80b8 	bne.w	80070ba <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	1a9b      	subs	r3, r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	333c      	adds	r3, #60	@ 0x3c
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10a      	bne.n	8006f76 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006f60:	78fa      	ldrb	r2, [r7, #3]
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	4613      	mov	r3, r2
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	1a9b      	subs	r3, r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	440b      	add	r3, r1
 8006f6e:	332a      	adds	r3, #42	@ 0x2a
 8006f70:	2200      	movs	r2, #0
 8006f72:	701a      	strb	r2, [r3, #0]
      break;
 8006f74:	e0a1      	b.n	80070ba <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006f76:	78fa      	ldrb	r2, [r7, #3]
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	011b      	lsls	r3, r3, #4
 8006f7e:	1a9b      	subs	r3, r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	332a      	adds	r3, #42	@ 0x2a
 8006f86:	2202      	movs	r2, #2
 8006f88:	701a      	strb	r2, [r3, #0]
      break;
 8006f8a:	e096      	b.n	80070ba <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006f8c:	78bb      	ldrb	r3, [r7, #2]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d120      	bne.n	8006fd4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006f92:	78fa      	ldrb	r2, [r7, #3]
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	4613      	mov	r3, r2
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	1a9b      	subs	r3, r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	440b      	add	r3, r1
 8006fa0:	333d      	adds	r3, #61	@ 0x3d
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006fa8:	78fa      	ldrb	r2, [r7, #3]
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	4613      	mov	r3, r2
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	440b      	add	r3, r1
 8006fb6:	332a      	adds	r3, #42	@ 0x2a
 8006fb8:	2200      	movs	r2, #0
 8006fba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006fbc:	e07e      	b.n	80070bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	1a9b      	subs	r3, r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	440b      	add	r3, r1
 8006fcc:	332a      	adds	r3, #42	@ 0x2a
 8006fce:	2202      	movs	r2, #2
 8006fd0:	701a      	strb	r2, [r3, #0]
      break;
 8006fd2:	e073      	b.n	80070bc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006fd4:	78fa      	ldrb	r2, [r7, #3]
 8006fd6:	6879      	ldr	r1, [r7, #4]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	1a9b      	subs	r3, r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	440b      	add	r3, r1
 8006fe2:	333c      	adds	r3, #60	@ 0x3c
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10a      	bne.n	8007000 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006fea:	78fa      	ldrb	r2, [r7, #3]
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	1a9b      	subs	r3, r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	440b      	add	r3, r1
 8006ff8:	332a      	adds	r3, #42	@ 0x2a
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
      break;
 8006ffe:	e05d      	b.n	80070bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007000:	78fa      	ldrb	r2, [r7, #3]
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	4613      	mov	r3, r2
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	440b      	add	r3, r1
 800700e:	332a      	adds	r3, #42	@ 0x2a
 8007010:	2202      	movs	r2, #2
 8007012:	701a      	strb	r2, [r3, #0]
      break;
 8007014:	e052      	b.n	80070bc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8007016:	78bb      	ldrb	r3, [r7, #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d120      	bne.n	800705e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800701c:	78fa      	ldrb	r2, [r7, #3]
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	4613      	mov	r3, r2
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	1a9b      	subs	r3, r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	440b      	add	r3, r1
 800702a:	333d      	adds	r3, #61	@ 0x3d
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007032:	78fa      	ldrb	r2, [r7, #3]
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	4613      	mov	r3, r2
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	1a9b      	subs	r3, r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	440b      	add	r3, r1
 8007040:	332a      	adds	r3, #42	@ 0x2a
 8007042:	2200      	movs	r2, #0
 8007044:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007046:	e039      	b.n	80070bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007048:	78fa      	ldrb	r2, [r7, #3]
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	4613      	mov	r3, r2
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	1a9b      	subs	r3, r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	440b      	add	r3, r1
 8007056:	332a      	adds	r3, #42	@ 0x2a
 8007058:	2202      	movs	r2, #2
 800705a:	701a      	strb	r2, [r3, #0]
      break;
 800705c:	e02e      	b.n	80070bc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800705e:	78fa      	ldrb	r2, [r7, #3]
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	4613      	mov	r3, r2
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	1a9b      	subs	r3, r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	440b      	add	r3, r1
 800706c:	333c      	adds	r3, #60	@ 0x3c
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007074:	78fa      	ldrb	r2, [r7, #3]
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	4613      	mov	r3, r2
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	1a9b      	subs	r3, r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	440b      	add	r3, r1
 8007082:	332a      	adds	r3, #42	@ 0x2a
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
      break;
 8007088:	e018      	b.n	80070bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	4613      	mov	r3, r2
 8007090:	011b      	lsls	r3, r3, #4
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	440b      	add	r3, r1
 8007098:	332a      	adds	r3, #42	@ 0x2a
 800709a:	2202      	movs	r2, #2
 800709c:	701a      	strb	r2, [r3, #0]
      break;
 800709e:	e00d      	b.n	80070bc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80070a0:	78fa      	ldrb	r2, [r7, #3]
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	4613      	mov	r3, r2
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	1a9b      	subs	r3, r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	440b      	add	r3, r1
 80070ae:	332a      	adds	r3, #42	@ 0x2a
 80070b0:	2200      	movs	r2, #0
 80070b2:	701a      	strb	r2, [r3, #0]
      break;
 80070b4:	e002      	b.n	80070bc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80070b6:	bf00      	nop
 80070b8:	e000      	b.n	80070bc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80070ba:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80070bc:	78fa      	ldrb	r2, [r7, #3]
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	4613      	mov	r3, r2
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	1a9b      	subs	r3, r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	332c      	adds	r3, #44	@ 0x2c
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80070d0:	78fa      	ldrb	r2, [r7, #3]
 80070d2:	8b39      	ldrh	r1, [r7, #24]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	4613      	mov	r3, r2
 80070d8:	011b      	lsls	r3, r3, #4
 80070da:	1a9b      	subs	r3, r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4403      	add	r3, r0
 80070e0:	3334      	adds	r3, #52	@ 0x34
 80070e2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80070e4:	78fa      	ldrb	r2, [r7, #3]
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	4613      	mov	r3, r2
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	1a9b      	subs	r3, r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	334c      	adds	r3, #76	@ 0x4c
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80070f8:	78fa      	ldrb	r2, [r7, #3]
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	4613      	mov	r3, r2
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	1a9b      	subs	r3, r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	440b      	add	r3, r1
 8007106:	3338      	adds	r3, #56	@ 0x38
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800710c:	78fa      	ldrb	r2, [r7, #3]
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	4613      	mov	r3, r2
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	1a9b      	subs	r3, r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	3315      	adds	r3, #21
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8007120:	78fa      	ldrb	r2, [r7, #3]
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	4613      	mov	r3, r2
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	1a9b      	subs	r3, r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	334d      	adds	r3, #77	@ 0x4d
 8007130:	2200      	movs	r2, #0
 8007132:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6818      	ldr	r0, [r3, #0]
 8007138:	78fa      	ldrb	r2, [r7, #3]
 800713a:	4613      	mov	r3, r2
 800713c:	011b      	lsls	r3, r3, #4
 800713e:	1a9b      	subs	r3, r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	3310      	adds	r3, #16
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	4413      	add	r3, r2
 8007148:	1d19      	adds	r1, r3, #4
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	799b      	ldrb	r3, [r3, #6]
 800714e:	461a      	mov	r2, r3
 8007150:	f006 fe7c 	bl	800de4c <USB_HC_StartXfer>
 8007154:	4603      	mov	r3, r0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop

08007160 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4618      	mov	r0, r3
 8007178:	f006 fb70 	bl	800d85c <USB_GetMode>
 800717c:	4603      	mov	r3, r0
 800717e:	2b01      	cmp	r3, #1
 8007180:	f040 80fb 	bne.w	800737a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f006 fb33 	bl	800d7f4 <USB_ReadInterrupts>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80f1 	beq.w	8007378 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4618      	mov	r0, r3
 800719c:	f006 fb2a 	bl	800d7f4 <USB_ReadInterrupts>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071aa:	d104      	bne.n	80071b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80071b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f006 fb1a 	bl	800d7f4 <USB_ReadInterrupts>
 80071c0:	4603      	mov	r3, r0
 80071c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071ca:	d104      	bne.n	80071d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80071d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f006 fb0a 	bl	800d7f4 <USB_ReadInterrupts>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80071e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071ea:	d104      	bne.n	80071f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80071f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f006 fafa 	bl	800d7f4 <USB_ReadInterrupts>
 8007200:	4603      	mov	r3, r0
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b02      	cmp	r3, #2
 8007208:	d103      	bne.n	8007212 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2202      	movs	r2, #2
 8007210:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4618      	mov	r0, r3
 8007218:	f006 faec 	bl	800d7f4 <USB_ReadInterrupts>
 800721c:	4603      	mov	r3, r0
 800721e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007222:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007226:	d120      	bne.n	800726a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007230:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d113      	bne.n	800726a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8007242:	2110      	movs	r1, #16
 8007244:	6938      	ldr	r0, [r7, #16]
 8007246:	f006 f9df 	bl	800d608 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800724a:	6938      	ldr	r0, [r7, #16]
 800724c:	f006 fa0e 	bl	800d66c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7a5b      	ldrb	r3, [r3, #9]
 8007254:	2b02      	cmp	r3, #2
 8007256:	d105      	bne.n	8007264 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2101      	movs	r1, #1
 800725e:	4618      	mov	r0, r3
 8007260:	f006 fc00 	bl	800da64 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f00a f929 	bl	80114bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	f006 fac0 	bl	800d7f4 <USB_ReadInterrupts>
 8007274:	4603      	mov	r3, r0
 8007276:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800727a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800727e:	d102      	bne.n	8007286 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 fd4d 	bl	8008d20 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f006 fab2 	bl	800d7f4 <USB_ReadInterrupts>
 8007290:	4603      	mov	r3, r0
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	2b08      	cmp	r3, #8
 8007298:	d106      	bne.n	80072a8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f00a f8f2 	bl	8011484 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2208      	movs	r2, #8
 80072a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f006 faa1 	bl	800d7f4 <USB_ReadInterrupts>
 80072b2:	4603      	mov	r3, r0
 80072b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072bc:	d139      	bne.n	8007332 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f007 f83c 	bl	800e340 <USB_HC_ReadInterrupt>
 80072c8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80072ca:	2300      	movs	r3, #0
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	e025      	b.n	800731c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f003 030f 	and.w	r3, r3, #15
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	fa22 f303 	lsr.w	r3, r2, r3
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d018      	beq.n	8007316 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072fa:	d106      	bne.n	800730a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f905 	bl	8007512 <HCD_HC_IN_IRQHandler>
 8007308:	e005      	b.n	8007316 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 ff67 	bl	80081e4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	3301      	adds	r3, #1
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	795b      	ldrb	r3, [r3, #5]
 8007320:	461a      	mov	r2, r3
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	4293      	cmp	r3, r2
 8007326:	d3d3      	bcc.n	80072d0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4618      	mov	r0, r3
 8007338:	f006 fa5c 	bl	800d7f4 <USB_ReadInterrupts>
 800733c:	4603      	mov	r3, r0
 800733e:	f003 0310 	and.w	r3, r3, #16
 8007342:	2b10      	cmp	r3, #16
 8007344:	d101      	bne.n	800734a <HAL_HCD_IRQHandler+0x1ea>
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <HAL_HCD_IRQHandler+0x1ec>
 800734a:	2300      	movs	r3, #0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d014      	beq.n	800737a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0210 	bic.w	r2, r2, #16
 800735e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 fbfe 	bl	8008b62 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	699a      	ldr	r2, [r3, #24]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0210 	orr.w	r2, r2, #16
 8007374:	619a      	str	r2, [r3, #24]
 8007376:	e000      	b.n	800737a <HAL_HCD_IRQHandler+0x21a>
      return;
 8007378:	bf00      	nop
    }
  }
}
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800738e:	2b01      	cmp	r3, #1
 8007390:	d101      	bne.n	8007396 <HAL_HCD_Start+0x16>
 8007392:	2302      	movs	r3, #2
 8007394:	e013      	b.n	80073be <HAL_HCD_Start+0x3e>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2101      	movs	r1, #1
 80073a4:	4618      	mov	r0, r3
 80073a6:	f006 fbc4 	bl	800db32 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f006 f8bc 	bl	800d52c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_HCD_Stop+0x16>
 80073d8:	2302      	movs	r3, #2
 80073da:	e00d      	b.n	80073f8 <HAL_HCD_Stop+0x32>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f007 f917 	bl	800e61c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4618      	mov	r0, r3
 800740e:	f006 fb66 	bl	800dade <USB_ResetPort>
 8007412:	4603      	mov	r3, r0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007428:	78fa      	ldrb	r2, [r7, #3]
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	4613      	mov	r3, r2
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	1a9b      	subs	r3, r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	334c      	adds	r3, #76	@ 0x4c
 8007438:	781b      	ldrb	r3, [r3, #0]
}
 800743a:	4618      	mov	r0, r3
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8007452:	78fa      	ldrb	r2, [r7, #3]
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	4613      	mov	r3, r2
 8007458:	011b      	lsls	r3, r3, #4
 800745a:	1a9b      	subs	r3, r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	440b      	add	r3, r1
 8007460:	3338      	adds	r3, #56	@ 0x38
 8007462:	681b      	ldr	r3, [r3, #0]
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4618      	mov	r0, r3
 800747e:	f006 fba8 	bl	800dbd2 <USB_GetCurrentFrame>
 8007482:	4603      	mov	r3, r0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4618      	mov	r0, r3
 800749a:	f006 fb83 	bl	800dba4 <USB_GetHostSpeed>
 800749e:	4603      	mov	r3, r0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80074b4:	78fa      	ldrb	r2, [r7, #3]
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	4613      	mov	r3, r2
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	1a9b      	subs	r3, r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	440b      	add	r3, r1
 80074c2:	331a      	adds	r3, #26
 80074c4:	2200      	movs	r2, #0
 80074c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	4613      	mov	r3, r2
 80074ce:	011b      	lsls	r3, r3, #4
 80074d0:	1a9b      	subs	r3, r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	331b      	adds	r3, #27
 80074d8:	2200      	movs	r2, #0
 80074da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80074dc:	78fa      	ldrb	r2, [r7, #3]
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	4613      	mov	r3, r2
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	1a9b      	subs	r3, r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	3325      	adds	r3, #37	@ 0x25
 80074ec:	2200      	movs	r2, #0
 80074ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80074f0:	78fa      	ldrb	r2, [r7, #3]
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	4613      	mov	r3, r2
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	1a9b      	subs	r3, r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	440b      	add	r3, r1
 80074fe:	3324      	adds	r3, #36	@ 0x24
 8007500:	2200      	movs	r2, #0
 8007502:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b086      	sub	sp, #24
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	4611      	mov	r1, r2
 8007530:	4618      	mov	r0, r3
 8007532:	f006 f972 	bl	800d81a <USB_ReadChInterrupts>
 8007536:	4603      	mov	r3, r0
 8007538:	f003 0304 	and.w	r3, r3, #4
 800753c:	2b04      	cmp	r3, #4
 800753e:	d11a      	bne.n	8007576 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	4413      	add	r3, r2
 8007548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800754c:	461a      	mov	r2, r3
 800754e:	2304      	movs	r3, #4
 8007550:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007552:	78fa      	ldrb	r2, [r7, #3]
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	4613      	mov	r3, r2
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	334d      	adds	r3, #77	@ 0x4d
 8007562:	2207      	movs	r2, #7
 8007564:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	78fa      	ldrb	r2, [r7, #3]
 800756c:	4611      	mov	r1, r2
 800756e:	4618      	mov	r0, r3
 8007570:	f006 fef7 	bl	800e362 <USB_HC_Halt>
 8007574:	e09e      	b.n	80076b4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	78fa      	ldrb	r2, [r7, #3]
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f006 f94b 	bl	800d81a <USB_ReadChInterrupts>
 8007584:	4603      	mov	r3, r0
 8007586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800758a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800758e:	d11b      	bne.n	80075c8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	4413      	add	r3, r2
 8007598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800759c:	461a      	mov	r2, r3
 800759e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	1a9b      	subs	r3, r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	334d      	adds	r3, #77	@ 0x4d
 80075b4:	2208      	movs	r2, #8
 80075b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	78fa      	ldrb	r2, [r7, #3]
 80075be:	4611      	mov	r1, r2
 80075c0:	4618      	mov	r0, r3
 80075c2:	f006 fece 	bl	800e362 <USB_HC_Halt>
 80075c6:	e075      	b.n	80076b4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	78fa      	ldrb	r2, [r7, #3]
 80075ce:	4611      	mov	r1, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f006 f922 	bl	800d81a <USB_ReadChInterrupts>
 80075d6:	4603      	mov	r3, r0
 80075d8:	f003 0308 	and.w	r3, r3, #8
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d11a      	bne.n	8007616 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ec:	461a      	mov	r2, r3
 80075ee:	2308      	movs	r3, #8
 80075f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80075f2:	78fa      	ldrb	r2, [r7, #3]
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	4613      	mov	r3, r2
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	1a9b      	subs	r3, r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	440b      	add	r3, r1
 8007600:	334d      	adds	r3, #77	@ 0x4d
 8007602:	2206      	movs	r2, #6
 8007604:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	78fa      	ldrb	r2, [r7, #3]
 800760c:	4611      	mov	r1, r2
 800760e:	4618      	mov	r0, r3
 8007610:	f006 fea7 	bl	800e362 <USB_HC_Halt>
 8007614:	e04e      	b.n	80076b4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	4611      	mov	r1, r2
 800761e:	4618      	mov	r0, r3
 8007620:	f006 f8fb 	bl	800d81a <USB_ReadChInterrupts>
 8007624:	4603      	mov	r3, r0
 8007626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800762a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800762e:	d11b      	bne.n	8007668 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	4413      	add	r3, r2
 8007638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800763c:	461a      	mov	r2, r3
 800763e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007642:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8007644:	78fa      	ldrb	r2, [r7, #3]
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	4613      	mov	r3, r2
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	1a9b      	subs	r3, r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	440b      	add	r3, r1
 8007652:	334d      	adds	r3, #77	@ 0x4d
 8007654:	2209      	movs	r2, #9
 8007656:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	78fa      	ldrb	r2, [r7, #3]
 800765e:	4611      	mov	r1, r2
 8007660:	4618      	mov	r0, r3
 8007662:	f006 fe7e 	bl	800e362 <USB_HC_Halt>
 8007666:	e025      	b.n	80076b4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	78fa      	ldrb	r2, [r7, #3]
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f006 f8d2 	bl	800d81a <USB_ReadChInterrupts>
 8007676:	4603      	mov	r3, r0
 8007678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800767c:	2b80      	cmp	r3, #128	@ 0x80
 800767e:	d119      	bne.n	80076b4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	4413      	add	r3, r2
 8007688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800768c:	461a      	mov	r2, r3
 800768e:	2380      	movs	r3, #128	@ 0x80
 8007690:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007692:	78fa      	ldrb	r2, [r7, #3]
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	4613      	mov	r3, r2
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	440b      	add	r3, r1
 80076a0:	334d      	adds	r3, #77	@ 0x4d
 80076a2:	2207      	movs	r2, #7
 80076a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	78fa      	ldrb	r2, [r7, #3]
 80076ac:	4611      	mov	r1, r2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f006 fe57 	bl	800e362 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	78fa      	ldrb	r2, [r7, #3]
 80076ba:	4611      	mov	r1, r2
 80076bc:	4618      	mov	r0, r3
 80076be:	f006 f8ac 	bl	800d81a <USB_ReadChInterrupts>
 80076c2:	4603      	mov	r3, r0
 80076c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076cc:	d112      	bne.n	80076f4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	78fa      	ldrb	r2, [r7, #3]
 80076d4:	4611      	mov	r1, r2
 80076d6:	4618      	mov	r0, r3
 80076d8:	f006 fe43 	bl	800e362 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076e8:	461a      	mov	r2, r3
 80076ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076ee:	6093      	str	r3, [r2, #8]
 80076f0:	f000 bd75 	b.w	80081de <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	78fa      	ldrb	r2, [r7, #3]
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f006 f88c 	bl	800d81a <USB_ReadChInterrupts>
 8007702:	4603      	mov	r3, r0
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b01      	cmp	r3, #1
 800770a:	f040 8128 	bne.w	800795e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	4413      	add	r3, r2
 8007716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800771a:	461a      	mov	r2, r3
 800771c:	2320      	movs	r3, #32
 800771e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	4613      	mov	r3, r2
 8007726:	011b      	lsls	r3, r3, #4
 8007728:	1a9b      	subs	r3, r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	331b      	adds	r3, #27
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d119      	bne.n	800776a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007736:	78fa      	ldrb	r2, [r7, #3]
 8007738:	6879      	ldr	r1, [r7, #4]
 800773a:	4613      	mov	r3, r2
 800773c:	011b      	lsls	r3, r3, #4
 800773e:	1a9b      	subs	r3, r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	440b      	add	r3, r1
 8007744:	331b      	adds	r3, #27
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	4413      	add	r3, r2
 8007752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	78fa      	ldrb	r2, [r7, #3]
 800775a:	0151      	lsls	r1, r2, #5
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	440a      	add	r2, r1
 8007760:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007768:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	799b      	ldrb	r3, [r3, #6]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d01b      	beq.n	80077aa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007772:	78fa      	ldrb	r2, [r7, #3]
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	3330      	adds	r3, #48	@ 0x30
 8007782:	6819      	ldr	r1, [r3, #0]
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	4413      	add	r3, r2
 800778c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007796:	78fa      	ldrb	r2, [r7, #3]
 8007798:	1ac9      	subs	r1, r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	4613      	mov	r3, r2
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	1a9b      	subs	r3, r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4403      	add	r3, r0
 80077a6:	3338      	adds	r3, #56	@ 0x38
 80077a8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80077aa:	78fa      	ldrb	r2, [r7, #3]
 80077ac:	6879      	ldr	r1, [r7, #4]
 80077ae:	4613      	mov	r3, r2
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	440b      	add	r3, r1
 80077b8:	334d      	adds	r3, #77	@ 0x4d
 80077ba:	2201      	movs	r2, #1
 80077bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	4613      	mov	r3, r2
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	1a9b      	subs	r3, r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	440b      	add	r3, r1
 80077cc:	3344      	adds	r3, #68	@ 0x44
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80077d2:	78fb      	ldrb	r3, [r7, #3]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077de:	461a      	mov	r2, r3
 80077e0:	2301      	movs	r3, #1
 80077e2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80077e4:	78fa      	ldrb	r2, [r7, #3]
 80077e6:	6879      	ldr	r1, [r7, #4]
 80077e8:	4613      	mov	r3, r2
 80077ea:	011b      	lsls	r3, r3, #4
 80077ec:	1a9b      	subs	r3, r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	440b      	add	r3, r1
 80077f2:	3326      	adds	r3, #38	@ 0x26
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80077fa:	78fa      	ldrb	r2, [r7, #3]
 80077fc:	6879      	ldr	r1, [r7, #4]
 80077fe:	4613      	mov	r3, r2
 8007800:	011b      	lsls	r3, r3, #4
 8007802:	1a9b      	subs	r3, r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	440b      	add	r3, r1
 8007808:	3326      	adds	r3, #38	@ 0x26
 800780a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800780c:	2b02      	cmp	r3, #2
 800780e:	d110      	bne.n	8007832 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	78fa      	ldrb	r2, [r7, #3]
 8007816:	4611      	mov	r1, r2
 8007818:	4618      	mov	r0, r3
 800781a:	f006 fda2 	bl	800e362 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	4413      	add	r3, r2
 8007826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800782a:	461a      	mov	r2, r3
 800782c:	2310      	movs	r3, #16
 800782e:	6093      	str	r3, [r2, #8]
 8007830:	e03d      	b.n	80078ae <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007832:	78fa      	ldrb	r2, [r7, #3]
 8007834:	6879      	ldr	r1, [r7, #4]
 8007836:	4613      	mov	r3, r2
 8007838:	011b      	lsls	r3, r3, #4
 800783a:	1a9b      	subs	r3, r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	440b      	add	r3, r1
 8007840:	3326      	adds	r3, #38	@ 0x26
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b03      	cmp	r3, #3
 8007846:	d00a      	beq.n	800785e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8007848:	78fa      	ldrb	r2, [r7, #3]
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4613      	mov	r3, r2
 800784e:	011b      	lsls	r3, r3, #4
 8007850:	1a9b      	subs	r3, r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	3326      	adds	r3, #38	@ 0x26
 8007858:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800785a:	2b01      	cmp	r3, #1
 800785c:	d127      	bne.n	80078ae <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	4413      	add	r3, r2
 8007866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	78fa      	ldrb	r2, [r7, #3]
 800786e:	0151      	lsls	r1, r2, #5
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	440a      	add	r2, r1
 8007874:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007878:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800787c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800787e:	78fa      	ldrb	r2, [r7, #3]
 8007880:	6879      	ldr	r1, [r7, #4]
 8007882:	4613      	mov	r3, r2
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	440b      	add	r3, r1
 800788c:	334c      	adds	r3, #76	@ 0x4c
 800788e:	2201      	movs	r2, #1
 8007890:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007892:	78fa      	ldrb	r2, [r7, #3]
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	4613      	mov	r3, r2
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	1a9b      	subs	r3, r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	440b      	add	r3, r1
 80078a0:	334c      	adds	r3, #76	@ 0x4c
 80078a2:	781a      	ldrb	r2, [r3, #0]
 80078a4:	78fb      	ldrb	r3, [r7, #3]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f009 fe15 	bl	80114d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	799b      	ldrb	r3, [r3, #6]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d13b      	bne.n	800792e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80078b6:	78fa      	ldrb	r2, [r7, #3]
 80078b8:	6879      	ldr	r1, [r7, #4]
 80078ba:	4613      	mov	r3, r2
 80078bc:	011b      	lsls	r3, r3, #4
 80078be:	1a9b      	subs	r3, r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	440b      	add	r3, r1
 80078c4:	3338      	adds	r3, #56	@ 0x38
 80078c6:	6819      	ldr	r1, [r3, #0]
 80078c8:	78fa      	ldrb	r2, [r7, #3]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	4613      	mov	r3, r2
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	1a9b      	subs	r3, r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4403      	add	r3, r0
 80078d6:	3328      	adds	r3, #40	@ 0x28
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	440b      	add	r3, r1
 80078dc:	1e59      	subs	r1, r3, #1
 80078de:	78fa      	ldrb	r2, [r7, #3]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	4613      	mov	r3, r2
 80078e4:	011b      	lsls	r3, r3, #4
 80078e6:	1a9b      	subs	r3, r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4403      	add	r3, r0
 80078ec:	3328      	adds	r3, #40	@ 0x28
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8470 	beq.w	80081de <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80078fe:	78fa      	ldrb	r2, [r7, #3]
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	4613      	mov	r3, r2
 8007904:	011b      	lsls	r3, r3, #4
 8007906:	1a9b      	subs	r3, r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	440b      	add	r3, r1
 800790c:	333c      	adds	r3, #60	@ 0x3c
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	78fa      	ldrb	r2, [r7, #3]
 8007912:	f083 0301 	eor.w	r3, r3, #1
 8007916:	b2d8      	uxtb	r0, r3
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4613      	mov	r3, r2
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	440b      	add	r3, r1
 8007924:	333c      	adds	r3, #60	@ 0x3c
 8007926:	4602      	mov	r2, r0
 8007928:	701a      	strb	r2, [r3, #0]
 800792a:	f000 bc58 	b.w	80081de <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800792e:	78fa      	ldrb	r2, [r7, #3]
 8007930:	6879      	ldr	r1, [r7, #4]
 8007932:	4613      	mov	r3, r2
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	1a9b      	subs	r3, r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	440b      	add	r3, r1
 800793c:	333c      	adds	r3, #60	@ 0x3c
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	78fa      	ldrb	r2, [r7, #3]
 8007942:	f083 0301 	eor.w	r3, r3, #1
 8007946:	b2d8      	uxtb	r0, r3
 8007948:	6879      	ldr	r1, [r7, #4]
 800794a:	4613      	mov	r3, r2
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	1a9b      	subs	r3, r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	440b      	add	r3, r1
 8007954:	333c      	adds	r3, #60	@ 0x3c
 8007956:	4602      	mov	r2, r0
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	f000 bc40 	b.w	80081de <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	4611      	mov	r1, r2
 8007966:	4618      	mov	r0, r3
 8007968:	f005 ff57 	bl	800d81a <USB_ReadChInterrupts>
 800796c:	4603      	mov	r3, r0
 800796e:	f003 0320 	and.w	r3, r3, #32
 8007972:	2b20      	cmp	r3, #32
 8007974:	d131      	bne.n	80079da <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	4413      	add	r3, r2
 800797e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007982:	461a      	mov	r2, r3
 8007984:	2320      	movs	r3, #32
 8007986:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8007988:	78fa      	ldrb	r2, [r7, #3]
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	4613      	mov	r3, r2
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	1a9b      	subs	r3, r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	440b      	add	r3, r1
 8007996:	331a      	adds	r3, #26
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b01      	cmp	r3, #1
 800799c:	f040 841f 	bne.w	80081de <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80079a0:	78fa      	ldrb	r2, [r7, #3]
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	4613      	mov	r3, r2
 80079a6:	011b      	lsls	r3, r3, #4
 80079a8:	1a9b      	subs	r3, r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	440b      	add	r3, r1
 80079ae:	331b      	adds	r3, #27
 80079b0:	2201      	movs	r2, #1
 80079b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80079b4:	78fa      	ldrb	r2, [r7, #3]
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	4613      	mov	r3, r2
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	1a9b      	subs	r3, r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	334d      	adds	r3, #77	@ 0x4d
 80079c4:	2203      	movs	r2, #3
 80079c6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	78fa      	ldrb	r2, [r7, #3]
 80079ce:	4611      	mov	r1, r2
 80079d0:	4618      	mov	r0, r3
 80079d2:	f006 fcc6 	bl	800e362 <USB_HC_Halt>
 80079d6:	f000 bc02 	b.w	80081de <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	4611      	mov	r1, r2
 80079e2:	4618      	mov	r0, r3
 80079e4:	f005 ff19 	bl	800d81a <USB_ReadChInterrupts>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	f040 8305 	bne.w	8007ffe <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a00:	461a      	mov	r2, r3
 8007a02:	2302      	movs	r3, #2
 8007a04:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007a06:	78fa      	ldrb	r2, [r7, #3]
 8007a08:	6879      	ldr	r1, [r7, #4]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	011b      	lsls	r3, r3, #4
 8007a0e:	1a9b      	subs	r3, r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	440b      	add	r3, r1
 8007a14:	334d      	adds	r3, #77	@ 0x4d
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d114      	bne.n	8007a46 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007a1c:	78fa      	ldrb	r2, [r7, #3]
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	4613      	mov	r3, r2
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	1a9b      	subs	r3, r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	334d      	adds	r3, #77	@ 0x4d
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007a30:	78fa      	ldrb	r2, [r7, #3]
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	4613      	mov	r3, r2
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	1a9b      	subs	r3, r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	440b      	add	r3, r1
 8007a3e:	334c      	adds	r3, #76	@ 0x4c
 8007a40:	2201      	movs	r2, #1
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	e2cc      	b.n	8007fe0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8007a46:	78fa      	ldrb	r2, [r7, #3]
 8007a48:	6879      	ldr	r1, [r7, #4]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	1a9b      	subs	r3, r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	440b      	add	r3, r1
 8007a54:	334d      	adds	r3, #77	@ 0x4d
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b06      	cmp	r3, #6
 8007a5a:	d114      	bne.n	8007a86 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007a5c:	78fa      	ldrb	r2, [r7, #3]
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	4613      	mov	r3, r2
 8007a62:	011b      	lsls	r3, r3, #4
 8007a64:	1a9b      	subs	r3, r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	334d      	adds	r3, #77	@ 0x4d
 8007a6c:	2202      	movs	r2, #2
 8007a6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8007a70:	78fa      	ldrb	r2, [r7, #3]
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	4613      	mov	r3, r2
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	1a9b      	subs	r3, r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	334c      	adds	r3, #76	@ 0x4c
 8007a80:	2205      	movs	r2, #5
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	e2ac      	b.n	8007fe0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007a86:	78fa      	ldrb	r2, [r7, #3]
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	011b      	lsls	r3, r3, #4
 8007a8e:	1a9b      	subs	r3, r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	440b      	add	r3, r1
 8007a94:	334d      	adds	r3, #77	@ 0x4d
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	2b07      	cmp	r3, #7
 8007a9a:	d00b      	beq.n	8007ab4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8007a9c:	78fa      	ldrb	r2, [r7, #3]
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	1a9b      	subs	r3, r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	440b      	add	r3, r1
 8007aaa:	334d      	adds	r3, #77	@ 0x4d
 8007aac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007aae:	2b09      	cmp	r3, #9
 8007ab0:	f040 80a6 	bne.w	8007c00 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007ab4:	78fa      	ldrb	r2, [r7, #3]
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	440b      	add	r3, r1
 8007ac2:	334d      	adds	r3, #77	@ 0x4d
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007ac8:	78fa      	ldrb	r2, [r7, #3]
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	4613      	mov	r3, r2
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	1a9b      	subs	r3, r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	3344      	adds	r3, #68	@ 0x44
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	1c59      	adds	r1, r3, #1
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	011b      	lsls	r3, r3, #4
 8007ae2:	1a9b      	subs	r3, r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4403      	add	r3, r0
 8007ae8:	3344      	adds	r3, #68	@ 0x44
 8007aea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007aec:	78fa      	ldrb	r2, [r7, #3]
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	4613      	mov	r3, r2
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	1a9b      	subs	r3, r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	3344      	adds	r3, #68	@ 0x44
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d943      	bls.n	8007b8a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007b02:	78fa      	ldrb	r2, [r7, #3]
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	1a9b      	subs	r3, r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	3344      	adds	r3, #68	@ 0x44
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8007b16:	78fa      	ldrb	r2, [r7, #3]
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	011b      	lsls	r3, r3, #4
 8007b1e:	1a9b      	subs	r3, r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	440b      	add	r3, r1
 8007b24:	331a      	adds	r3, #26
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d123      	bne.n	8007b74 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8007b2c:	78fa      	ldrb	r2, [r7, #3]
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	4613      	mov	r3, r2
 8007b32:	011b      	lsls	r3, r3, #4
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	440b      	add	r3, r1
 8007b3a:	331b      	adds	r3, #27
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8007b40:	78fa      	ldrb	r2, [r7, #3]
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	4613      	mov	r3, r2
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	1a9b      	subs	r3, r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	440b      	add	r3, r1
 8007b4e:	331c      	adds	r3, #28
 8007b50:	2200      	movs	r2, #0
 8007b52:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	0151      	lsls	r1, r2, #5
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	440a      	add	r2, r1
 8007b6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b72:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	1a9b      	subs	r3, r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	334c      	adds	r3, #76	@ 0x4c
 8007b84:	2204      	movs	r2, #4
 8007b86:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007b88:	e229      	b.n	8007fde <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007b8a:	78fa      	ldrb	r2, [r7, #3]
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	1a9b      	subs	r3, r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	440b      	add	r3, r1
 8007b98:	334c      	adds	r3, #76	@ 0x4c
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007b9e:	78fa      	ldrb	r2, [r7, #3]
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	011b      	lsls	r3, r3, #4
 8007ba6:	1a9b      	subs	r3, r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	440b      	add	r3, r1
 8007bac:	3326      	adds	r3, #38	@ 0x26
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00b      	beq.n	8007bcc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007bb4:	78fa      	ldrb	r2, [r7, #3]
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	1a9b      	subs	r3, r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	3326      	adds	r3, #38	@ 0x26
 8007bc4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	f040 8209 	bne.w	8007fde <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007be2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bea:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007bfe:	e1ee      	b.n	8007fde <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007c00:	78fa      	ldrb	r2, [r7, #3]
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	4613      	mov	r3, r2
 8007c06:	011b      	lsls	r3, r3, #4
 8007c08:	1a9b      	subs	r3, r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	440b      	add	r3, r1
 8007c0e:	334d      	adds	r3, #77	@ 0x4d
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	2b05      	cmp	r3, #5
 8007c14:	f040 80c8 	bne.w	8007da8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007c18:	78fa      	ldrb	r2, [r7, #3]
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	011b      	lsls	r3, r3, #4
 8007c20:	1a9b      	subs	r3, r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	440b      	add	r3, r1
 8007c26:	334d      	adds	r3, #77	@ 0x4d
 8007c28:	2202      	movs	r2, #2
 8007c2a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	4613      	mov	r3, r2
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	1a9b      	subs	r3, r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	440b      	add	r3, r1
 8007c3a:	331b      	adds	r3, #27
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	f040 81ce 	bne.w	8007fe0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007c44:	78fa      	ldrb	r2, [r7, #3]
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	1a9b      	subs	r3, r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	440b      	add	r3, r1
 8007c52:	3326      	adds	r3, #38	@ 0x26
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d16b      	bne.n	8007d32 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8007c5a:	78fa      	ldrb	r2, [r7, #3]
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	1a9b      	subs	r3, r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	440b      	add	r3, r1
 8007c68:	3348      	adds	r3, #72	@ 0x48
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	1c59      	adds	r1, r3, #1
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	4613      	mov	r3, r2
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4403      	add	r3, r0
 8007c7a:	3348      	adds	r3, #72	@ 0x48
 8007c7c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8007c7e:	78fa      	ldrb	r2, [r7, #3]
 8007c80:	6879      	ldr	r1, [r7, #4]
 8007c82:	4613      	mov	r3, r2
 8007c84:	011b      	lsls	r3, r3, #4
 8007c86:	1a9b      	subs	r3, r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	3348      	adds	r3, #72	@ 0x48
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d943      	bls.n	8007d1c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8007c94:	78fa      	ldrb	r2, [r7, #3]
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	1a9b      	subs	r3, r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	3348      	adds	r3, #72	@ 0x48
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8007ca8:	78fa      	ldrb	r2, [r7, #3]
 8007caa:	6879      	ldr	r1, [r7, #4]
 8007cac:	4613      	mov	r3, r2
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	1a9b      	subs	r3, r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	331b      	adds	r3, #27
 8007cb8:	2200      	movs	r2, #0
 8007cba:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8007cbc:	78fa      	ldrb	r2, [r7, #3]
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	1a9b      	subs	r3, r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	440b      	add	r3, r1
 8007cca:	3344      	adds	r3, #68	@ 0x44
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d809      	bhi.n	8007ce6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	6879      	ldr	r1, [r7, #4]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	011b      	lsls	r3, r3, #4
 8007cda:	1a9b      	subs	r3, r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	440b      	add	r3, r1
 8007ce0:	331c      	adds	r3, #28
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007ce6:	78fb      	ldrb	r3, [r7, #3]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	0151      	lsls	r1, r2, #5
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	440a      	add	r2, r1
 8007cfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d04:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	440b      	add	r3, r1
 8007d14:	334c      	adds	r3, #76	@ 0x4c
 8007d16:	2204      	movs	r2, #4
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	e014      	b.n	8007d46 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	6879      	ldr	r1, [r7, #4]
 8007d20:	4613      	mov	r3, r2
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	1a9b      	subs	r3, r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	440b      	add	r3, r1
 8007d2a:	334c      	adds	r3, #76	@ 0x4c
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	e009      	b.n	8007d46 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007d32:	78fa      	ldrb	r2, [r7, #3]
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	4613      	mov	r3, r2
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	1a9b      	subs	r3, r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	440b      	add	r3, r1
 8007d40:	334c      	adds	r3, #76	@ 0x4c
 8007d42:	2202      	movs	r2, #2
 8007d44:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007d46:	78fa      	ldrb	r2, [r7, #3]
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	011b      	lsls	r3, r3, #4
 8007d4e:	1a9b      	subs	r3, r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	440b      	add	r3, r1
 8007d54:	3326      	adds	r3, #38	@ 0x26
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007d5c:	78fa      	ldrb	r2, [r7, #3]
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	4613      	mov	r3, r2
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	1a9b      	subs	r3, r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	440b      	add	r3, r1
 8007d6a:	3326      	adds	r3, #38	@ 0x26
 8007d6c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	f040 8136 	bne.w	8007fe0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d8a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d92:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007d94:	78fb      	ldrb	r3, [r7, #3]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da0:	461a      	mov	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	e11b      	b.n	8007fe0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007da8:	78fa      	ldrb	r2, [r7, #3]
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	4613      	mov	r3, r2
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	334d      	adds	r3, #77	@ 0x4d
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	f040 8081 	bne.w	8007ec2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007dc0:	78fa      	ldrb	r2, [r7, #3]
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	1a9b      	subs	r3, r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	334d      	adds	r3, #77	@ 0x4d
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007dd4:	78fa      	ldrb	r2, [r7, #3]
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	011b      	lsls	r3, r3, #4
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	440b      	add	r3, r1
 8007de2:	331b      	adds	r3, #27
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	f040 80fa 	bne.w	8007fe0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007dec:	78fa      	ldrb	r2, [r7, #3]
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	4613      	mov	r3, r2
 8007df2:	011b      	lsls	r3, r3, #4
 8007df4:	1a9b      	subs	r3, r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	440b      	add	r3, r1
 8007dfa:	334c      	adds	r3, #76	@ 0x4c
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	78fa      	ldrb	r2, [r7, #3]
 8007e10:	0151      	lsls	r1, r2, #5
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	440a      	add	r2, r1
 8007e16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e1e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	78fa      	ldrb	r2, [r7, #3]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e3e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	78fa      	ldrb	r2, [r7, #3]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e5a:	f023 0320 	bic.w	r3, r3, #32
 8007e5e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e60:	78fa      	ldrb	r2, [r7, #3]
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	4613      	mov	r3, r2
 8007e66:	011b      	lsls	r3, r3, #4
 8007e68:	1a9b      	subs	r3, r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	3326      	adds	r3, #38	@ 0x26
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00b      	beq.n	8007e8e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	011b      	lsls	r3, r3, #4
 8007e7e:	1a9b      	subs	r3, r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	440b      	add	r3, r1
 8007e84:	3326      	adds	r3, #38	@ 0x26
 8007e86:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	f040 80a9 	bne.w	8007fe0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ea4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007eac:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007eae:	78fb      	ldrb	r3, [r7, #3]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eba:	461a      	mov	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	e08e      	b.n	8007fe0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007ec2:	78fa      	ldrb	r2, [r7, #3]
 8007ec4:	6879      	ldr	r1, [r7, #4]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	011b      	lsls	r3, r3, #4
 8007eca:	1a9b      	subs	r3, r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	440b      	add	r3, r1
 8007ed0:	334d      	adds	r3, #77	@ 0x4d
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	d143      	bne.n	8007f60 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007ed8:	78fa      	ldrb	r2, [r7, #3]
 8007eda:	6879      	ldr	r1, [r7, #4]
 8007edc:	4613      	mov	r3, r2
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	1a9b      	subs	r3, r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	440b      	add	r3, r1
 8007ee6:	334d      	adds	r3, #77	@ 0x4d
 8007ee8:	2202      	movs	r2, #2
 8007eea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007eec:	78fa      	ldrb	r2, [r7, #3]
 8007eee:	6879      	ldr	r1, [r7, #4]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	011b      	lsls	r3, r3, #4
 8007ef4:	1a9b      	subs	r3, r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	440b      	add	r3, r1
 8007efa:	334c      	adds	r3, #76	@ 0x4c
 8007efc:	2202      	movs	r2, #2
 8007efe:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007f00:	78fa      	ldrb	r2, [r7, #3]
 8007f02:	6879      	ldr	r1, [r7, #4]
 8007f04:	4613      	mov	r3, r2
 8007f06:	011b      	lsls	r3, r3, #4
 8007f08:	1a9b      	subs	r3, r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	440b      	add	r3, r1
 8007f0e:	3326      	adds	r3, #38	@ 0x26
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007f16:	78fa      	ldrb	r2, [r7, #3]
 8007f18:	6879      	ldr	r1, [r7, #4]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	011b      	lsls	r3, r3, #4
 8007f1e:	1a9b      	subs	r3, r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	440b      	add	r3, r1
 8007f24:	3326      	adds	r3, #38	@ 0x26
 8007f26:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d159      	bne.n	8007fe0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007f42:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f4a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f58:	461a      	mov	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	e03f      	b.n	8007fe0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8007f60:	78fa      	ldrb	r2, [r7, #3]
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	4613      	mov	r3, r2
 8007f66:	011b      	lsls	r3, r3, #4
 8007f68:	1a9b      	subs	r3, r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	440b      	add	r3, r1
 8007f6e:	334d      	adds	r3, #77	@ 0x4d
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b08      	cmp	r3, #8
 8007f74:	d126      	bne.n	8007fc4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007f76:	78fa      	ldrb	r2, [r7, #3]
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	011b      	lsls	r3, r3, #4
 8007f7e:	1a9b      	subs	r3, r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	440b      	add	r3, r1
 8007f84:	334d      	adds	r3, #77	@ 0x4d
 8007f86:	2202      	movs	r2, #2
 8007f88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007f8a:	78fa      	ldrb	r2, [r7, #3]
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	011b      	lsls	r3, r3, #4
 8007f92:	1a9b      	subs	r3, r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	440b      	add	r3, r1
 8007f98:	3344      	adds	r3, #68	@ 0x44
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	1c59      	adds	r1, r3, #1
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	011b      	lsls	r3, r3, #4
 8007fa4:	1a9b      	subs	r3, r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4403      	add	r3, r0
 8007faa:	3344      	adds	r3, #68	@ 0x44
 8007fac:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8007fae:	78fa      	ldrb	r2, [r7, #3]
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	1a9b      	subs	r3, r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	334c      	adds	r3, #76	@ 0x4c
 8007fbe:	2204      	movs	r2, #4
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	e00d      	b.n	8007fe0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8007fc4:	78fa      	ldrb	r2, [r7, #3]
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	1a9b      	subs	r3, r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	334d      	adds	r3, #77	@ 0x4d
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	f000 8100 	beq.w	80081dc <HCD_HC_IN_IRQHandler+0xcca>
 8007fdc:	e000      	b.n	8007fe0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007fde:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007fe0:	78fa      	ldrb	r2, [r7, #3]
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	011b      	lsls	r3, r3, #4
 8007fe8:	1a9b      	subs	r3, r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	440b      	add	r3, r1
 8007fee:	334c      	adds	r3, #76	@ 0x4c
 8007ff0:	781a      	ldrb	r2, [r3, #0]
 8007ff2:	78fb      	ldrb	r3, [r7, #3]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f009 fa6e 	bl	80114d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007ffc:	e0ef      	b.n	80081de <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f005 fc07 	bl	800d81a <USB_ReadChInterrupts>
 800800c:	4603      	mov	r3, r0
 800800e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008012:	2b40      	cmp	r3, #64	@ 0x40
 8008014:	d12f      	bne.n	8008076 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008016:	78fb      	ldrb	r3, [r7, #3]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	4413      	add	r3, r2
 800801e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008022:	461a      	mov	r2, r3
 8008024:	2340      	movs	r3, #64	@ 0x40
 8008026:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8008028:	78fa      	ldrb	r2, [r7, #3]
 800802a:	6879      	ldr	r1, [r7, #4]
 800802c:	4613      	mov	r3, r2
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	1a9b      	subs	r3, r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	440b      	add	r3, r1
 8008036:	334d      	adds	r3, #77	@ 0x4d
 8008038:	2205      	movs	r2, #5
 800803a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800803c:	78fa      	ldrb	r2, [r7, #3]
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4613      	mov	r3, r2
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	1a9b      	subs	r3, r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	331a      	adds	r3, #26
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d109      	bne.n	8008066 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008052:	78fa      	ldrb	r2, [r7, #3]
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	4613      	mov	r3, r2
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	440b      	add	r3, r1
 8008060:	3344      	adds	r3, #68	@ 0x44
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	78fa      	ldrb	r2, [r7, #3]
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f006 f977 	bl	800e362 <USB_HC_Halt>
 8008074:	e0b3      	b.n	80081de <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	78fa      	ldrb	r2, [r7, #3]
 800807c:	4611      	mov	r1, r2
 800807e:	4618      	mov	r0, r3
 8008080:	f005 fbcb 	bl	800d81a <USB_ReadChInterrupts>
 8008084:	4603      	mov	r3, r0
 8008086:	f003 0310 	and.w	r3, r3, #16
 800808a:	2b10      	cmp	r3, #16
 800808c:	f040 80a7 	bne.w	80081de <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008090:	78fa      	ldrb	r2, [r7, #3]
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	4613      	mov	r3, r2
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	1a9b      	subs	r3, r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	3326      	adds	r3, #38	@ 0x26
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d11b      	bne.n	80080de <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80080a6:	78fa      	ldrb	r2, [r7, #3]
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	4613      	mov	r3, r2
 80080ac:	011b      	lsls	r3, r3, #4
 80080ae:	1a9b      	subs	r3, r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	440b      	add	r3, r1
 80080b4:	3344      	adds	r3, #68	@ 0x44
 80080b6:	2200      	movs	r2, #0
 80080b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	4613      	mov	r3, r2
 80080c0:	011b      	lsls	r3, r3, #4
 80080c2:	1a9b      	subs	r3, r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	440b      	add	r3, r1
 80080c8:	334d      	adds	r3, #77	@ 0x4d
 80080ca:	2204      	movs	r2, #4
 80080cc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	78fa      	ldrb	r2, [r7, #3]
 80080d4:	4611      	mov	r1, r2
 80080d6:	4618      	mov	r0, r3
 80080d8:	f006 f943 	bl	800e362 <USB_HC_Halt>
 80080dc:	e03f      	b.n	800815e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80080de:	78fa      	ldrb	r2, [r7, #3]
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	4613      	mov	r3, r2
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	1a9b      	subs	r3, r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	440b      	add	r3, r1
 80080ec:	3326      	adds	r3, #38	@ 0x26
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80080f4:	78fa      	ldrb	r2, [r7, #3]
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	4613      	mov	r3, r2
 80080fa:	011b      	lsls	r3, r3, #4
 80080fc:	1a9b      	subs	r3, r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	440b      	add	r3, r1
 8008102:	3326      	adds	r3, #38	@ 0x26
 8008104:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008106:	2b02      	cmp	r3, #2
 8008108:	d129      	bne.n	800815e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800810a:	78fa      	ldrb	r2, [r7, #3]
 800810c:	6879      	ldr	r1, [r7, #4]
 800810e:	4613      	mov	r3, r2
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	1a9b      	subs	r3, r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	440b      	add	r3, r1
 8008118:	3344      	adds	r3, #68	@ 0x44
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	799b      	ldrb	r3, [r3, #6]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00a      	beq.n	800813c <HCD_HC_IN_IRQHandler+0xc2a>
 8008126:	78fa      	ldrb	r2, [r7, #3]
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	4613      	mov	r3, r2
 800812c:	011b      	lsls	r3, r3, #4
 800812e:	1a9b      	subs	r3, r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	440b      	add	r3, r1
 8008134:	331b      	adds	r3, #27
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d110      	bne.n	800815e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	4613      	mov	r3, r2
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	440b      	add	r3, r1
 800814a:	334d      	adds	r3, #77	@ 0x4d
 800814c:	2204      	movs	r2, #4
 800814e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	78fa      	ldrb	r2, [r7, #3]
 8008156:	4611      	mov	r1, r2
 8008158:	4618      	mov	r0, r3
 800815a:	f006 f902 	bl	800e362 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800815e:	78fa      	ldrb	r2, [r7, #3]
 8008160:	6879      	ldr	r1, [r7, #4]
 8008162:	4613      	mov	r3, r2
 8008164:	011b      	lsls	r3, r3, #4
 8008166:	1a9b      	subs	r3, r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	331b      	adds	r3, #27
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d129      	bne.n	80081c8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008174:	78fa      	ldrb	r2, [r7, #3]
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	4613      	mov	r3, r2
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	1a9b      	subs	r3, r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	440b      	add	r3, r1
 8008182:	331b      	adds	r3, #27
 8008184:	2200      	movs	r2, #0
 8008186:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008188:	78fb      	ldrb	r3, [r7, #3]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	4413      	add	r3, r2
 8008190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	78fa      	ldrb	r2, [r7, #3]
 8008198:	0151      	lsls	r1, r2, #5
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	440a      	add	r2, r1
 800819e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081a6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80081a8:	78fb      	ldrb	r3, [r7, #3]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	0151      	lsls	r1, r2, #5
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	440a      	add	r2, r1
 80081be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081c2:	f043 0320 	orr.w	r3, r3, #32
 80081c6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80081c8:	78fb      	ldrb	r3, [r7, #3]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081d4:	461a      	mov	r2, r3
 80081d6:	2310      	movs	r3, #16
 80081d8:	6093      	str	r3, [r2, #8]
 80081da:	e000      	b.n	80081de <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80081dc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	78fa      	ldrb	r2, [r7, #3]
 8008200:	4611      	mov	r1, r2
 8008202:	4618      	mov	r0, r3
 8008204:	f005 fb09 	bl	800d81a <USB_ReadChInterrupts>
 8008208:	4603      	mov	r3, r0
 800820a:	f003 0304 	and.w	r3, r3, #4
 800820e:	2b04      	cmp	r3, #4
 8008210:	d11b      	bne.n	800824a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008212:	78fb      	ldrb	r3, [r7, #3]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	4413      	add	r3, r2
 800821a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800821e:	461a      	mov	r2, r3
 8008220:	2304      	movs	r3, #4
 8008222:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	6879      	ldr	r1, [r7, #4]
 8008228:	4613      	mov	r3, r2
 800822a:	011b      	lsls	r3, r3, #4
 800822c:	1a9b      	subs	r3, r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	334d      	adds	r3, #77	@ 0x4d
 8008234:	2207      	movs	r2, #7
 8008236:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	78fa      	ldrb	r2, [r7, #3]
 800823e:	4611      	mov	r1, r2
 8008240:	4618      	mov	r0, r3
 8008242:	f006 f88e 	bl	800e362 <USB_HC_Halt>
 8008246:	f000 bc89 	b.w	8008b5c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	4611      	mov	r1, r2
 8008252:	4618      	mov	r0, r3
 8008254:	f005 fae1 	bl	800d81a <USB_ReadChInterrupts>
 8008258:	4603      	mov	r3, r0
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b20      	cmp	r3, #32
 8008260:	f040 8082 	bne.w	8008368 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	4413      	add	r3, r2
 800826c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008270:	461a      	mov	r2, r3
 8008272:	2320      	movs	r3, #32
 8008274:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8008276:	78fa      	ldrb	r2, [r7, #3]
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	4613      	mov	r3, r2
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	1a9b      	subs	r3, r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	440b      	add	r3, r1
 8008284:	3319      	adds	r3, #25
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d124      	bne.n	80082d6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800828c:	78fa      	ldrb	r2, [r7, #3]
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	4613      	mov	r3, r2
 8008292:	011b      	lsls	r3, r3, #4
 8008294:	1a9b      	subs	r3, r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	3319      	adds	r3, #25
 800829c:	2200      	movs	r2, #0
 800829e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80082a0:	78fa      	ldrb	r2, [r7, #3]
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	4613      	mov	r3, r2
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	1a9b      	subs	r3, r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	334c      	adds	r3, #76	@ 0x4c
 80082b0:	2202      	movs	r2, #2
 80082b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80082b4:	78fa      	ldrb	r2, [r7, #3]
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4613      	mov	r3, r2
 80082ba:	011b      	lsls	r3, r3, #4
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	440b      	add	r3, r1
 80082c2:	334d      	adds	r3, #77	@ 0x4d
 80082c4:	2203      	movs	r2, #3
 80082c6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	78fa      	ldrb	r2, [r7, #3]
 80082ce:	4611      	mov	r1, r2
 80082d0:	4618      	mov	r0, r3
 80082d2:	f006 f846 	bl	800e362 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80082d6:	78fa      	ldrb	r2, [r7, #3]
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	4613      	mov	r3, r2
 80082dc:	011b      	lsls	r3, r3, #4
 80082de:	1a9b      	subs	r3, r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	331a      	adds	r3, #26
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	f040 8437 	bne.w	8008b5c <HCD_HC_OUT_IRQHandler+0x978>
 80082ee:	78fa      	ldrb	r2, [r7, #3]
 80082f0:	6879      	ldr	r1, [r7, #4]
 80082f2:	4613      	mov	r3, r2
 80082f4:	011b      	lsls	r3, r3, #4
 80082f6:	1a9b      	subs	r3, r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	440b      	add	r3, r1
 80082fc:	331b      	adds	r3, #27
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	f040 842b 	bne.w	8008b5c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8008306:	78fa      	ldrb	r2, [r7, #3]
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	3326      	adds	r3, #38	@ 0x26
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d009      	beq.n	8008330 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800831c:	78fa      	ldrb	r2, [r7, #3]
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	4613      	mov	r3, r2
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	1a9b      	subs	r3, r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	440b      	add	r3, r1
 800832a:	331b      	adds	r3, #27
 800832c:	2201      	movs	r2, #1
 800832e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8008330:	78fa      	ldrb	r2, [r7, #3]
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	4613      	mov	r3, r2
 8008336:	011b      	lsls	r3, r3, #4
 8008338:	1a9b      	subs	r3, r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	440b      	add	r3, r1
 800833e:	334d      	adds	r3, #77	@ 0x4d
 8008340:	2203      	movs	r2, #3
 8008342:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	78fa      	ldrb	r2, [r7, #3]
 800834a:	4611      	mov	r1, r2
 800834c:	4618      	mov	r0, r3
 800834e:	f006 f808 	bl	800e362 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8008352:	78fa      	ldrb	r2, [r7, #3]
 8008354:	6879      	ldr	r1, [r7, #4]
 8008356:	4613      	mov	r3, r2
 8008358:	011b      	lsls	r3, r3, #4
 800835a:	1a9b      	subs	r3, r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	440b      	add	r3, r1
 8008360:	3344      	adds	r3, #68	@ 0x44
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	e3f9      	b.n	8008b5c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	78fa      	ldrb	r2, [r7, #3]
 800836e:	4611      	mov	r1, r2
 8008370:	4618      	mov	r0, r3
 8008372:	f005 fa52 	bl	800d81a <USB_ReadChInterrupts>
 8008376:	4603      	mov	r3, r0
 8008378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800837c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008380:	d111      	bne.n	80083a6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	4413      	add	r3, r2
 800838a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800838e:	461a      	mov	r2, r3
 8008390:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008394:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	78fa      	ldrb	r2, [r7, #3]
 800839c:	4611      	mov	r1, r2
 800839e:	4618      	mov	r0, r3
 80083a0:	f005 ffdf 	bl	800e362 <USB_HC_Halt>
 80083a4:	e3da      	b.n	8008b5c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	78fa      	ldrb	r2, [r7, #3]
 80083ac:	4611      	mov	r1, r2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f005 fa33 	bl	800d81a <USB_ReadChInterrupts>
 80083b4:	4603      	mov	r3, r0
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d168      	bne.n	8008490 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80083be:	78fa      	ldrb	r2, [r7, #3]
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	4613      	mov	r3, r2
 80083c4:	011b      	lsls	r3, r3, #4
 80083c6:	1a9b      	subs	r3, r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	440b      	add	r3, r1
 80083cc:	3344      	adds	r3, #68	@ 0x44
 80083ce:	2200      	movs	r2, #0
 80083d0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	4611      	mov	r1, r2
 80083da:	4618      	mov	r0, r3
 80083dc:	f005 fa1d 	bl	800d81a <USB_ReadChInterrupts>
 80083e0:	4603      	mov	r3, r0
 80083e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083e6:	2b40      	cmp	r3, #64	@ 0x40
 80083e8:	d112      	bne.n	8008410 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80083ea:	78fa      	ldrb	r2, [r7, #3]
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	4613      	mov	r3, r2
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	1a9b      	subs	r3, r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	440b      	add	r3, r1
 80083f8:	3319      	adds	r3, #25
 80083fa:	2201      	movs	r2, #1
 80083fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80083fe:	78fb      	ldrb	r3, [r7, #3]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	4413      	add	r3, r2
 8008406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800840a:	461a      	mov	r2, r3
 800840c:	2340      	movs	r3, #64	@ 0x40
 800840e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8008410:	78fa      	ldrb	r2, [r7, #3]
 8008412:	6879      	ldr	r1, [r7, #4]
 8008414:	4613      	mov	r3, r2
 8008416:	011b      	lsls	r3, r3, #4
 8008418:	1a9b      	subs	r3, r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	440b      	add	r3, r1
 800841e:	331b      	adds	r3, #27
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d019      	beq.n	800845a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008426:	78fa      	ldrb	r2, [r7, #3]
 8008428:	6879      	ldr	r1, [r7, #4]
 800842a:	4613      	mov	r3, r2
 800842c:	011b      	lsls	r3, r3, #4
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	440b      	add	r3, r1
 8008434:	331b      	adds	r3, #27
 8008436:	2200      	movs	r2, #0
 8008438:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800843a:	78fb      	ldrb	r3, [r7, #3]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	4413      	add	r3, r2
 8008442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	78fa      	ldrb	r2, [r7, #3]
 800844a:	0151      	lsls	r1, r2, #5
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	440a      	add	r2, r1
 8008450:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008458:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800845a:	78fb      	ldrb	r3, [r7, #3]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	4413      	add	r3, r2
 8008462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008466:	461a      	mov	r2, r3
 8008468:	2301      	movs	r3, #1
 800846a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800846c:	78fa      	ldrb	r2, [r7, #3]
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4613      	mov	r3, r2
 8008472:	011b      	lsls	r3, r3, #4
 8008474:	1a9b      	subs	r3, r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	440b      	add	r3, r1
 800847a:	334d      	adds	r3, #77	@ 0x4d
 800847c:	2201      	movs	r2, #1
 800847e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	78fa      	ldrb	r2, [r7, #3]
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f005 ff6a 	bl	800e362 <USB_HC_Halt>
 800848e:	e365      	b.n	8008b5c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	78fa      	ldrb	r2, [r7, #3]
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f005 f9be 	bl	800d81a <USB_ReadChInterrupts>
 800849e:	4603      	mov	r3, r0
 80084a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a4:	2b40      	cmp	r3, #64	@ 0x40
 80084a6:	d139      	bne.n	800851c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80084a8:	78fa      	ldrb	r2, [r7, #3]
 80084aa:	6879      	ldr	r1, [r7, #4]
 80084ac:	4613      	mov	r3, r2
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	1a9b      	subs	r3, r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	440b      	add	r3, r1
 80084b6:	334d      	adds	r3, #77	@ 0x4d
 80084b8:	2205      	movs	r2, #5
 80084ba:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80084bc:	78fa      	ldrb	r2, [r7, #3]
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	4613      	mov	r3, r2
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	331a      	adds	r3, #26
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d109      	bne.n	80084e6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80084d2:	78fa      	ldrb	r2, [r7, #3]
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	4613      	mov	r3, r2
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	1a9b      	subs	r3, r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	440b      	add	r3, r1
 80084e0:	3319      	adds	r3, #25
 80084e2:	2201      	movs	r2, #1
 80084e4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80084e6:	78fa      	ldrb	r2, [r7, #3]
 80084e8:	6879      	ldr	r1, [r7, #4]
 80084ea:	4613      	mov	r3, r2
 80084ec:	011b      	lsls	r3, r3, #4
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	440b      	add	r3, r1
 80084f4:	3344      	adds	r3, #68	@ 0x44
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	78fa      	ldrb	r2, [r7, #3]
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f005 ff2d 	bl	800e362 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008508:	78fb      	ldrb	r3, [r7, #3]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	4413      	add	r3, r2
 8008510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008514:	461a      	mov	r2, r3
 8008516:	2340      	movs	r3, #64	@ 0x40
 8008518:	6093      	str	r3, [r2, #8]
 800851a:	e31f      	b.n	8008b5c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	78fa      	ldrb	r2, [r7, #3]
 8008522:	4611      	mov	r1, r2
 8008524:	4618      	mov	r0, r3
 8008526:	f005 f978 	bl	800d81a <USB_ReadChInterrupts>
 800852a:	4603      	mov	r3, r0
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	2b08      	cmp	r3, #8
 8008532:	d11a      	bne.n	800856a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	4413      	add	r3, r2
 800853c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008540:	461a      	mov	r2, r3
 8008542:	2308      	movs	r3, #8
 8008544:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008546:	78fa      	ldrb	r2, [r7, #3]
 8008548:	6879      	ldr	r1, [r7, #4]
 800854a:	4613      	mov	r3, r2
 800854c:	011b      	lsls	r3, r3, #4
 800854e:	1a9b      	subs	r3, r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	440b      	add	r3, r1
 8008554:	334d      	adds	r3, #77	@ 0x4d
 8008556:	2206      	movs	r2, #6
 8008558:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	78fa      	ldrb	r2, [r7, #3]
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f005 fefd 	bl	800e362 <USB_HC_Halt>
 8008568:	e2f8      	b.n	8008b5c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	4611      	mov	r1, r2
 8008572:	4618      	mov	r0, r3
 8008574:	f005 f951 	bl	800d81a <USB_ReadChInterrupts>
 8008578:	4603      	mov	r3, r0
 800857a:	f003 0310 	and.w	r3, r3, #16
 800857e:	2b10      	cmp	r3, #16
 8008580:	d144      	bne.n	800860c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008582:	78fa      	ldrb	r2, [r7, #3]
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	4613      	mov	r3, r2
 8008588:	011b      	lsls	r3, r3, #4
 800858a:	1a9b      	subs	r3, r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	440b      	add	r3, r1
 8008590:	3344      	adds	r3, #68	@ 0x44
 8008592:	2200      	movs	r2, #0
 8008594:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8008596:	78fa      	ldrb	r2, [r7, #3]
 8008598:	6879      	ldr	r1, [r7, #4]
 800859a:	4613      	mov	r3, r2
 800859c:	011b      	lsls	r3, r3, #4
 800859e:	1a9b      	subs	r3, r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	440b      	add	r3, r1
 80085a4:	334d      	adds	r3, #77	@ 0x4d
 80085a6:	2204      	movs	r2, #4
 80085a8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80085aa:	78fa      	ldrb	r2, [r7, #3]
 80085ac:	6879      	ldr	r1, [r7, #4]
 80085ae:	4613      	mov	r3, r2
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	1a9b      	subs	r3, r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	440b      	add	r3, r1
 80085b8:	3319      	adds	r3, #25
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d114      	bne.n	80085ea <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80085c0:	78fa      	ldrb	r2, [r7, #3]
 80085c2:	6879      	ldr	r1, [r7, #4]
 80085c4:	4613      	mov	r3, r2
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	1a9b      	subs	r3, r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	440b      	add	r3, r1
 80085ce:	3318      	adds	r3, #24
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d109      	bne.n	80085ea <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80085d6:	78fa      	ldrb	r2, [r7, #3]
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	4613      	mov	r3, r2
 80085dc:	011b      	lsls	r3, r3, #4
 80085de:	1a9b      	subs	r3, r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	440b      	add	r3, r1
 80085e4:	3319      	adds	r3, #25
 80085e6:	2201      	movs	r2, #1
 80085e8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	78fa      	ldrb	r2, [r7, #3]
 80085f0:	4611      	mov	r1, r2
 80085f2:	4618      	mov	r0, r3
 80085f4:	f005 feb5 	bl	800e362 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	015a      	lsls	r2, r3, #5
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	4413      	add	r3, r2
 8008600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008604:	461a      	mov	r2, r3
 8008606:	2310      	movs	r3, #16
 8008608:	6093      	str	r3, [r2, #8]
 800860a:	e2a7      	b.n	8008b5c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	78fa      	ldrb	r2, [r7, #3]
 8008612:	4611      	mov	r1, r2
 8008614:	4618      	mov	r0, r3
 8008616:	f005 f900 	bl	800d81a <USB_ReadChInterrupts>
 800861a:	4603      	mov	r3, r0
 800861c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008620:	2b80      	cmp	r3, #128	@ 0x80
 8008622:	f040 8083 	bne.w	800872c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	799b      	ldrb	r3, [r3, #6]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d111      	bne.n	8008652 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800862e:	78fa      	ldrb	r2, [r7, #3]
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	4613      	mov	r3, r2
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	1a9b      	subs	r3, r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	440b      	add	r3, r1
 800863c:	334d      	adds	r3, #77	@ 0x4d
 800863e:	2207      	movs	r2, #7
 8008640:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	78fa      	ldrb	r2, [r7, #3]
 8008648:	4611      	mov	r1, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f005 fe89 	bl	800e362 <USB_HC_Halt>
 8008650:	e062      	b.n	8008718 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8008652:	78fa      	ldrb	r2, [r7, #3]
 8008654:	6879      	ldr	r1, [r7, #4]
 8008656:	4613      	mov	r3, r2
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	1a9b      	subs	r3, r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	440b      	add	r3, r1
 8008660:	3344      	adds	r3, #68	@ 0x44
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	1c59      	adds	r1, r3, #1
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	4613      	mov	r3, r2
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	1a9b      	subs	r3, r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4403      	add	r3, r0
 8008672:	3344      	adds	r3, #68	@ 0x44
 8008674:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008676:	78fa      	ldrb	r2, [r7, #3]
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	4613      	mov	r3, r2
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	1a9b      	subs	r3, r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	440b      	add	r3, r1
 8008684:	3344      	adds	r3, #68	@ 0x44
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b02      	cmp	r3, #2
 800868a:	d922      	bls.n	80086d2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800868c:	78fa      	ldrb	r2, [r7, #3]
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	4613      	mov	r3, r2
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	1a9b      	subs	r3, r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	440b      	add	r3, r1
 800869a:	3344      	adds	r3, #68	@ 0x44
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80086a0:	78fa      	ldrb	r2, [r7, #3]
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	4613      	mov	r3, r2
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	1a9b      	subs	r3, r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	334c      	adds	r3, #76	@ 0x4c
 80086b0:	2204      	movs	r2, #4
 80086b2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80086b4:	78fa      	ldrb	r2, [r7, #3]
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	4613      	mov	r3, r2
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	1a9b      	subs	r3, r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	440b      	add	r3, r1
 80086c2:	334c      	adds	r3, #76	@ 0x4c
 80086c4:	781a      	ldrb	r2, [r3, #0]
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f008 ff04 	bl	80114d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80086d0:	e022      	b.n	8008718 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	334c      	adds	r3, #76	@ 0x4c
 80086e2:	2202      	movs	r2, #2
 80086e4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80086fc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008704:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	4413      	add	r3, r2
 800870e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008712:	461a      	mov	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008718:	78fb      	ldrb	r3, [r7, #3]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	4413      	add	r3, r2
 8008720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008724:	461a      	mov	r2, r3
 8008726:	2380      	movs	r3, #128	@ 0x80
 8008728:	6093      	str	r3, [r2, #8]
 800872a:	e217      	b.n	8008b5c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	78fa      	ldrb	r2, [r7, #3]
 8008732:	4611      	mov	r1, r2
 8008734:	4618      	mov	r0, r3
 8008736:	f005 f870 	bl	800d81a <USB_ReadChInterrupts>
 800873a:	4603      	mov	r3, r0
 800873c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008744:	d11b      	bne.n	800877e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008746:	78fa      	ldrb	r2, [r7, #3]
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	4613      	mov	r3, r2
 800874c:	011b      	lsls	r3, r3, #4
 800874e:	1a9b      	subs	r3, r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	440b      	add	r3, r1
 8008754:	334d      	adds	r3, #77	@ 0x4d
 8008756:	2209      	movs	r2, #9
 8008758:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	78fa      	ldrb	r2, [r7, #3]
 8008760:	4611      	mov	r1, r2
 8008762:	4618      	mov	r0, r3
 8008764:	f005 fdfd 	bl	800e362 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	4413      	add	r3, r2
 8008770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008774:	461a      	mov	r2, r3
 8008776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800877a:	6093      	str	r3, [r2, #8]
 800877c:	e1ee      	b.n	8008b5c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	78fa      	ldrb	r2, [r7, #3]
 8008784:	4611      	mov	r1, r2
 8008786:	4618      	mov	r0, r3
 8008788:	f005 f847 	bl	800d81a <USB_ReadChInterrupts>
 800878c:	4603      	mov	r3, r0
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b02      	cmp	r3, #2
 8008794:	f040 81df 	bne.w	8008b56 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	015a      	lsls	r2, r3, #5
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	4413      	add	r3, r2
 80087a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087a4:	461a      	mov	r2, r3
 80087a6:	2302      	movs	r3, #2
 80087a8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80087aa:	78fa      	ldrb	r2, [r7, #3]
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	4613      	mov	r3, r2
 80087b0:	011b      	lsls	r3, r3, #4
 80087b2:	1a9b      	subs	r3, r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	440b      	add	r3, r1
 80087b8:	334d      	adds	r3, #77	@ 0x4d
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	f040 8093 	bne.w	80088e8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80087c2:	78fa      	ldrb	r2, [r7, #3]
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	4613      	mov	r3, r2
 80087c8:	011b      	lsls	r3, r3, #4
 80087ca:	1a9b      	subs	r3, r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	440b      	add	r3, r1
 80087d0:	334d      	adds	r3, #77	@ 0x4d
 80087d2:	2202      	movs	r2, #2
 80087d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	6879      	ldr	r1, [r7, #4]
 80087da:	4613      	mov	r3, r2
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	1a9b      	subs	r3, r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	440b      	add	r3, r1
 80087e4:	334c      	adds	r3, #76	@ 0x4c
 80087e6:	2201      	movs	r2, #1
 80087e8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80087ea:	78fa      	ldrb	r2, [r7, #3]
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	4613      	mov	r3, r2
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	3326      	adds	r3, #38	@ 0x26
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d00b      	beq.n	8008818 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8008800:	78fa      	ldrb	r2, [r7, #3]
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	4613      	mov	r3, r2
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	1a9b      	subs	r3, r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	440b      	add	r3, r1
 800880e:	3326      	adds	r3, #38	@ 0x26
 8008810:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008812:	2b03      	cmp	r3, #3
 8008814:	f040 8190 	bne.w	8008b38 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	799b      	ldrb	r3, [r3, #6]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d115      	bne.n	800884c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8008820:	78fa      	ldrb	r2, [r7, #3]
 8008822:	6879      	ldr	r1, [r7, #4]
 8008824:	4613      	mov	r3, r2
 8008826:	011b      	lsls	r3, r3, #4
 8008828:	1a9b      	subs	r3, r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	440b      	add	r3, r1
 800882e:	333d      	adds	r3, #61	@ 0x3d
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	78fa      	ldrb	r2, [r7, #3]
 8008834:	f083 0301 	eor.w	r3, r3, #1
 8008838:	b2d8      	uxtb	r0, r3
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	4613      	mov	r3, r2
 800883e:	011b      	lsls	r3, r3, #4
 8008840:	1a9b      	subs	r3, r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	333d      	adds	r3, #61	@ 0x3d
 8008848:	4602      	mov	r2, r0
 800884a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	799b      	ldrb	r3, [r3, #6]
 8008850:	2b01      	cmp	r3, #1
 8008852:	f040 8171 	bne.w	8008b38 <HCD_HC_OUT_IRQHandler+0x954>
 8008856:	78fa      	ldrb	r2, [r7, #3]
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	4613      	mov	r3, r2
 800885c:	011b      	lsls	r3, r3, #4
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	440b      	add	r3, r1
 8008864:	3334      	adds	r3, #52	@ 0x34
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 8165 	beq.w	8008b38 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800886e:	78fa      	ldrb	r2, [r7, #3]
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	4613      	mov	r3, r2
 8008874:	011b      	lsls	r3, r3, #4
 8008876:	1a9b      	subs	r3, r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	440b      	add	r3, r1
 800887c:	3334      	adds	r3, #52	@ 0x34
 800887e:	6819      	ldr	r1, [r3, #0]
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	4613      	mov	r3, r2
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	1a9b      	subs	r3, r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4403      	add	r3, r0
 800888e:	3328      	adds	r3, #40	@ 0x28
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	440b      	add	r3, r1
 8008894:	1e59      	subs	r1, r3, #1
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	4613      	mov	r3, r2
 800889c:	011b      	lsls	r3, r3, #4
 800889e:	1a9b      	subs	r3, r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4403      	add	r3, r0
 80088a4:	3328      	adds	r3, #40	@ 0x28
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80088ac:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 813f 	beq.w	8008b38 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80088ba:	78fa      	ldrb	r2, [r7, #3]
 80088bc:	6879      	ldr	r1, [r7, #4]
 80088be:	4613      	mov	r3, r2
 80088c0:	011b      	lsls	r3, r3, #4
 80088c2:	1a9b      	subs	r3, r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	333d      	adds	r3, #61	@ 0x3d
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	78fa      	ldrb	r2, [r7, #3]
 80088ce:	f083 0301 	eor.w	r3, r3, #1
 80088d2:	b2d8      	uxtb	r0, r3
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	4613      	mov	r3, r2
 80088d8:	011b      	lsls	r3, r3, #4
 80088da:	1a9b      	subs	r3, r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	440b      	add	r3, r1
 80088e0:	333d      	adds	r3, #61	@ 0x3d
 80088e2:	4602      	mov	r2, r0
 80088e4:	701a      	strb	r2, [r3, #0]
 80088e6:	e127      	b.n	8008b38 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80088e8:	78fa      	ldrb	r2, [r7, #3]
 80088ea:	6879      	ldr	r1, [r7, #4]
 80088ec:	4613      	mov	r3, r2
 80088ee:	011b      	lsls	r3, r3, #4
 80088f0:	1a9b      	subs	r3, r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	440b      	add	r3, r1
 80088f6:	334d      	adds	r3, #77	@ 0x4d
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d120      	bne.n	8008940 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80088fe:	78fa      	ldrb	r2, [r7, #3]
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	4613      	mov	r3, r2
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	1a9b      	subs	r3, r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	440b      	add	r3, r1
 800890c:	334d      	adds	r3, #77	@ 0x4d
 800890e:	2202      	movs	r2, #2
 8008910:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008912:	78fa      	ldrb	r2, [r7, #3]
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	4613      	mov	r3, r2
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	1a9b      	subs	r3, r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	440b      	add	r3, r1
 8008920:	331b      	adds	r3, #27
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b01      	cmp	r3, #1
 8008926:	f040 8107 	bne.w	8008b38 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	011b      	lsls	r3, r3, #4
 8008932:	1a9b      	subs	r3, r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	334c      	adds	r3, #76	@ 0x4c
 800893a:	2202      	movs	r2, #2
 800893c:	701a      	strb	r2, [r3, #0]
 800893e:	e0fb      	b.n	8008b38 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008940:	78fa      	ldrb	r2, [r7, #3]
 8008942:	6879      	ldr	r1, [r7, #4]
 8008944:	4613      	mov	r3, r2
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	1a9b      	subs	r3, r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	440b      	add	r3, r1
 800894e:	334d      	adds	r3, #77	@ 0x4d
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b04      	cmp	r3, #4
 8008954:	d13a      	bne.n	80089cc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008956:	78fa      	ldrb	r2, [r7, #3]
 8008958:	6879      	ldr	r1, [r7, #4]
 800895a:	4613      	mov	r3, r2
 800895c:	011b      	lsls	r3, r3, #4
 800895e:	1a9b      	subs	r3, r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	440b      	add	r3, r1
 8008964:	334d      	adds	r3, #77	@ 0x4d
 8008966:	2202      	movs	r2, #2
 8008968:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800896a:	78fa      	ldrb	r2, [r7, #3]
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	4613      	mov	r3, r2
 8008970:	011b      	lsls	r3, r3, #4
 8008972:	1a9b      	subs	r3, r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	440b      	add	r3, r1
 8008978:	334c      	adds	r3, #76	@ 0x4c
 800897a:	2202      	movs	r2, #2
 800897c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800897e:	78fa      	ldrb	r2, [r7, #3]
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	4613      	mov	r3, r2
 8008984:	011b      	lsls	r3, r3, #4
 8008986:	1a9b      	subs	r3, r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	440b      	add	r3, r1
 800898c:	331b      	adds	r3, #27
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	2b01      	cmp	r3, #1
 8008992:	f040 80d1 	bne.w	8008b38 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8008996:	78fa      	ldrb	r2, [r7, #3]
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	4613      	mov	r3, r2
 800899c:	011b      	lsls	r3, r3, #4
 800899e:	1a9b      	subs	r3, r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	440b      	add	r3, r1
 80089a4:	331b      	adds	r3, #27
 80089a6:	2200      	movs	r2, #0
 80089a8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80089aa:	78fb      	ldrb	r3, [r7, #3]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	78fa      	ldrb	r2, [r7, #3]
 80089ba:	0151      	lsls	r1, r2, #5
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	440a      	add	r2, r1
 80089c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089c8:	6053      	str	r3, [r2, #4]
 80089ca:	e0b5      	b.n	8008b38 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80089cc:	78fa      	ldrb	r2, [r7, #3]
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	4613      	mov	r3, r2
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	1a9b      	subs	r3, r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	334d      	adds	r3, #77	@ 0x4d
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	2b05      	cmp	r3, #5
 80089e0:	d114      	bne.n	8008a0c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80089e2:	78fa      	ldrb	r2, [r7, #3]
 80089e4:	6879      	ldr	r1, [r7, #4]
 80089e6:	4613      	mov	r3, r2
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	1a9b      	subs	r3, r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	440b      	add	r3, r1
 80089f0:	334d      	adds	r3, #77	@ 0x4d
 80089f2:	2202      	movs	r2, #2
 80089f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80089f6:	78fa      	ldrb	r2, [r7, #3]
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	4613      	mov	r3, r2
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	1a9b      	subs	r3, r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	440b      	add	r3, r1
 8008a04:	334c      	adds	r3, #76	@ 0x4c
 8008a06:	2202      	movs	r2, #2
 8008a08:	701a      	strb	r2, [r3, #0]
 8008a0a:	e095      	b.n	8008b38 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008a0c:	78fa      	ldrb	r2, [r7, #3]
 8008a0e:	6879      	ldr	r1, [r7, #4]
 8008a10:	4613      	mov	r3, r2
 8008a12:	011b      	lsls	r3, r3, #4
 8008a14:	1a9b      	subs	r3, r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	440b      	add	r3, r1
 8008a1a:	334d      	adds	r3, #77	@ 0x4d
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	2b06      	cmp	r3, #6
 8008a20:	d114      	bne.n	8008a4c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008a22:	78fa      	ldrb	r2, [r7, #3]
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	011b      	lsls	r3, r3, #4
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	440b      	add	r3, r1
 8008a30:	334d      	adds	r3, #77	@ 0x4d
 8008a32:	2202      	movs	r2, #2
 8008a34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8008a36:	78fa      	ldrb	r2, [r7, #3]
 8008a38:	6879      	ldr	r1, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	011b      	lsls	r3, r3, #4
 8008a3e:	1a9b      	subs	r3, r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	334c      	adds	r3, #76	@ 0x4c
 8008a46:	2205      	movs	r2, #5
 8008a48:	701a      	strb	r2, [r3, #0]
 8008a4a:	e075      	b.n	8008b38 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008a4c:	78fa      	ldrb	r2, [r7, #3]
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	4613      	mov	r3, r2
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	1a9b      	subs	r3, r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	440b      	add	r3, r1
 8008a5a:	334d      	adds	r3, #77	@ 0x4d
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b07      	cmp	r3, #7
 8008a60:	d00a      	beq.n	8008a78 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008a62:	78fa      	ldrb	r2, [r7, #3]
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	4613      	mov	r3, r2
 8008a68:	011b      	lsls	r3, r3, #4
 8008a6a:	1a9b      	subs	r3, r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
 8008a70:	334d      	adds	r3, #77	@ 0x4d
 8008a72:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008a74:	2b09      	cmp	r3, #9
 8008a76:	d170      	bne.n	8008b5a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008a78:	78fa      	ldrb	r2, [r7, #3]
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	011b      	lsls	r3, r3, #4
 8008a80:	1a9b      	subs	r3, r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	440b      	add	r3, r1
 8008a86:	334d      	adds	r3, #77	@ 0x4d
 8008a88:	2202      	movs	r2, #2
 8008a8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008a8c:	78fa      	ldrb	r2, [r7, #3]
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	4613      	mov	r3, r2
 8008a92:	011b      	lsls	r3, r3, #4
 8008a94:	1a9b      	subs	r3, r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	440b      	add	r3, r1
 8008a9a:	3344      	adds	r3, #68	@ 0x44
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	1c59      	adds	r1, r3, #1
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	1a9b      	subs	r3, r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4403      	add	r3, r0
 8008aac:	3344      	adds	r3, #68	@ 0x44
 8008aae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008ab0:	78fa      	ldrb	r2, [r7, #3]
 8008ab2:	6879      	ldr	r1, [r7, #4]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	011b      	lsls	r3, r3, #4
 8008ab8:	1a9b      	subs	r3, r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	440b      	add	r3, r1
 8008abe:	3344      	adds	r3, #68	@ 0x44
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d914      	bls.n	8008af0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	6879      	ldr	r1, [r7, #4]
 8008aca:	4613      	mov	r3, r2
 8008acc:	011b      	lsls	r3, r3, #4
 8008ace:	1a9b      	subs	r3, r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	440b      	add	r3, r1
 8008ad4:	3344      	adds	r3, #68	@ 0x44
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008ada:	78fa      	ldrb	r2, [r7, #3]
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	011b      	lsls	r3, r3, #4
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	440b      	add	r3, r1
 8008ae8:	334c      	adds	r3, #76	@ 0x4c
 8008aea:	2204      	movs	r2, #4
 8008aec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008aee:	e022      	b.n	8008b36 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008af0:	78fa      	ldrb	r2, [r7, #3]
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	4613      	mov	r3, r2
 8008af6:	011b      	lsls	r3, r3, #4
 8008af8:	1a9b      	subs	r3, r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	440b      	add	r3, r1
 8008afe:	334c      	adds	r3, #76	@ 0x4c
 8008b00:	2202      	movs	r2, #2
 8008b02:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008b1a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b22:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b30:	461a      	mov	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008b36:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008b38:	78fa      	ldrb	r2, [r7, #3]
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	011b      	lsls	r3, r3, #4
 8008b40:	1a9b      	subs	r3, r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	440b      	add	r3, r1
 8008b46:	334c      	adds	r3, #76	@ 0x4c
 8008b48:	781a      	ldrb	r2, [r3, #0]
 8008b4a:	78fb      	ldrb	r3, [r7, #3]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f008 fcc2 	bl	80114d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008b54:	e002      	b.n	8008b5c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8008b56:	bf00      	nop
 8008b58:	e000      	b.n	8008b5c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8008b5a:	bf00      	nop
  }
}
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b08a      	sub	sp, #40	@ 0x28
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b72:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	f003 030f 	and.w	r3, r3, #15
 8008b82:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	0c5b      	lsrs	r3, r3, #17
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	091b      	lsrs	r3, r3, #4
 8008b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b96:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d004      	beq.n	8008ba8 <HCD_RXQLVL_IRQHandler+0x46>
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2b05      	cmp	r3, #5
 8008ba2:	f000 80b6 	beq.w	8008d12 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008ba6:	e0b7      	b.n	8008d18 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 80b3 	beq.w	8008d16 <HCD_RXQLVL_IRQHandler+0x1b4>
 8008bb0:	6879      	ldr	r1, [r7, #4]
 8008bb2:	69ba      	ldr	r2, [r7, #24]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	011b      	lsls	r3, r3, #4
 8008bb8:	1a9b      	subs	r3, r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	440b      	add	r3, r1
 8008bbe:	332c      	adds	r3, #44	@ 0x2c
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 80a7 	beq.w	8008d16 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	011b      	lsls	r3, r3, #4
 8008bd0:	1a9b      	subs	r3, r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	3338      	adds	r3, #56	@ 0x38
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	18d1      	adds	r1, r2, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	4613      	mov	r3, r2
 8008be4:	011b      	lsls	r3, r3, #4
 8008be6:	1a9b      	subs	r3, r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4403      	add	r3, r0
 8008bec:	3334      	adds	r3, #52	@ 0x34
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4299      	cmp	r1, r3
 8008bf2:	f200 8083 	bhi.w	8008cfc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6818      	ldr	r0, [r3, #0]
 8008bfa:	6879      	ldr	r1, [r7, #4]
 8008bfc:	69ba      	ldr	r2, [r7, #24]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	011b      	lsls	r3, r3, #4
 8008c02:	1a9b      	subs	r3, r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	332c      	adds	r3, #44	@ 0x2c
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	b292      	uxth	r2, r2
 8008c10:	4619      	mov	r1, r3
 8008c12:	f004 fd97 	bl	800d744 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8008c16:	6879      	ldr	r1, [r7, #4]
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	011b      	lsls	r3, r3, #4
 8008c1e:	1a9b      	subs	r3, r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	440b      	add	r3, r1
 8008c24:	332c      	adds	r3, #44	@ 0x2c
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	18d1      	adds	r1, r2, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	4613      	mov	r3, r2
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	1a9b      	subs	r3, r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4403      	add	r3, r0
 8008c3a:	332c      	adds	r3, #44	@ 0x2c
 8008c3c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	69ba      	ldr	r2, [r7, #24]
 8008c42:	4613      	mov	r3, r2
 8008c44:	011b      	lsls	r3, r3, #4
 8008c46:	1a9b      	subs	r3, r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	440b      	add	r3, r1
 8008c4c:	3338      	adds	r3, #56	@ 0x38
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	18d1      	adds	r1, r2, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	69ba      	ldr	r2, [r7, #24]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	1a9b      	subs	r3, r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4403      	add	r3, r0
 8008c62:	3338      	adds	r3, #56	@ 0x38
 8008c64:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	0cdb      	lsrs	r3, r3, #19
 8008c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c7a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	4613      	mov	r3, r2
 8008c82:	011b      	lsls	r3, r3, #4
 8008c84:	1a9b      	subs	r3, r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	440b      	add	r3, r1
 8008c8a:	3328      	adds	r3, #40	@ 0x28
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d13f      	bne.n	8008d16 <HCD_RXQLVL_IRQHandler+0x1b4>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d03c      	beq.n	8008d16 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008cb2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cba:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cc8:	461a      	mov	r2, r3
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	011b      	lsls	r3, r3, #4
 8008cd6:	1a9b      	subs	r3, r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	440b      	add	r3, r1
 8008cdc:	333c      	adds	r3, #60	@ 0x3c
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	f083 0301 	eor.w	r3, r3, #1
 8008ce4:	b2d8      	uxtb	r0, r3
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	69ba      	ldr	r2, [r7, #24]
 8008cea:	4613      	mov	r3, r2
 8008cec:	011b      	lsls	r3, r3, #4
 8008cee:	1a9b      	subs	r3, r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	440b      	add	r3, r1
 8008cf4:	333c      	adds	r3, #60	@ 0x3c
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	701a      	strb	r2, [r3, #0]
      break;
 8008cfa:	e00c      	b.n	8008d16 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	69ba      	ldr	r2, [r7, #24]
 8008d00:	4613      	mov	r3, r2
 8008d02:	011b      	lsls	r3, r3, #4
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	334c      	adds	r3, #76	@ 0x4c
 8008d0c:	2204      	movs	r2, #4
 8008d0e:	701a      	strb	r2, [r3, #0]
      break;
 8008d10:	e001      	b.n	8008d16 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8008d12:	bf00      	nop
 8008d14:	e000      	b.n	8008d18 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8008d16:	bf00      	nop
  }
}
 8008d18:	bf00      	nop
 8008d1a:	3728      	adds	r7, #40	@ 0x28
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008d4c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f003 0302 	and.w	r3, r3, #2
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d10b      	bne.n	8008d70 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d102      	bne.n	8008d68 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f008 fb9c 	bl	80114a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f043 0302 	orr.w	r3, r3, #2
 8008d6e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f003 0308 	and.w	r3, r3, #8
 8008d76:	2b08      	cmp	r3, #8
 8008d78:	d132      	bne.n	8008de0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	f043 0308 	orr.w	r3, r3, #8
 8008d80:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d126      	bne.n	8008dda <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	7a5b      	ldrb	r3, [r3, #9]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d113      	bne.n	8008dbc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008d9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d9e:	d106      	bne.n	8008dae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2102      	movs	r1, #2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f004 fe5c 	bl	800da64 <USB_InitFSLSPClkSel>
 8008dac:	e011      	b.n	8008dd2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2101      	movs	r1, #1
 8008db4:	4618      	mov	r0, r3
 8008db6:	f004 fe55 	bl	800da64 <USB_InitFSLSPClkSel>
 8008dba:	e00a      	b.n	8008dd2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	79db      	ldrb	r3, [r3, #7]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d106      	bne.n	8008dd2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8008dd0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f008 fb8e 	bl	80114f4 <HAL_HCD_PortEnabled_Callback>
 8008dd8:	e002      	b.n	8008de0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f008 fb98 	bl	8011510 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f003 0320 	and.w	r3, r3, #32
 8008de6:	2b20      	cmp	r3, #32
 8008de8:	d103      	bne.n	8008df2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	f043 0320 	orr.w	r3, r3, #32
 8008df0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008df8:	461a      	mov	r2, r3
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	6013      	str	r3, [r2, #0]
}
 8008dfe:	bf00      	nop
 8008e00:	3718      	adds	r7, #24
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e12b      	b.n	8009072 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d106      	bne.n	8008e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7f9 fed2 	bl	8002bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2224      	movs	r2, #36	@ 0x24
 8008e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f022 0201 	bic.w	r2, r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008e6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008e6c:	f002 f8ac 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 8008e70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	4a81      	ldr	r2, [pc, #516]	@ (800907c <HAL_I2C_Init+0x274>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d807      	bhi.n	8008e8c <HAL_I2C_Init+0x84>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4a80      	ldr	r2, [pc, #512]	@ (8009080 <HAL_I2C_Init+0x278>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	bf94      	ite	ls
 8008e84:	2301      	movls	r3, #1
 8008e86:	2300      	movhi	r3, #0
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	e006      	b.n	8008e9a <HAL_I2C_Init+0x92>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4a7d      	ldr	r2, [pc, #500]	@ (8009084 <HAL_I2C_Init+0x27c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	bf94      	ite	ls
 8008e94:	2301      	movls	r3, #1
 8008e96:	2300      	movhi	r3, #0
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e0e7      	b.n	8009072 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	4a78      	ldr	r2, [pc, #480]	@ (8009088 <HAL_I2C_Init+0x280>)
 8008ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eaa:	0c9b      	lsrs	r3, r3, #18
 8008eac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6a1b      	ldr	r3, [r3, #32]
 8008ec8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	4a6a      	ldr	r2, [pc, #424]	@ (800907c <HAL_I2C_Init+0x274>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d802      	bhi.n	8008edc <HAL_I2C_Init+0xd4>
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	e009      	b.n	8008ef0 <HAL_I2C_Init+0xe8>
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008ee2:	fb02 f303 	mul.w	r3, r2, r3
 8008ee6:	4a69      	ldr	r2, [pc, #420]	@ (800908c <HAL_I2C_Init+0x284>)
 8008ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8008eec:	099b      	lsrs	r3, r3, #6
 8008eee:	3301      	adds	r3, #1
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	6812      	ldr	r2, [r2, #0]
 8008ef4:	430b      	orrs	r3, r1
 8008ef6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008f02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	495c      	ldr	r1, [pc, #368]	@ (800907c <HAL_I2C_Init+0x274>)
 8008f0c:	428b      	cmp	r3, r1
 8008f0e:	d819      	bhi.n	8008f44 <HAL_I2C_Init+0x13c>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	1e59      	subs	r1, r3, #1
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	005b      	lsls	r3, r3, #1
 8008f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f1e:	1c59      	adds	r1, r3, #1
 8008f20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008f24:	400b      	ands	r3, r1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <HAL_I2C_Init+0x138>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	1e59      	subs	r1, r3, #1
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f38:	3301      	adds	r3, #1
 8008f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f3e:	e051      	b.n	8008fe4 <HAL_I2C_Init+0x1dc>
 8008f40:	2304      	movs	r3, #4
 8008f42:	e04f      	b.n	8008fe4 <HAL_I2C_Init+0x1dc>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d111      	bne.n	8008f70 <HAL_I2C_Init+0x168>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	1e58      	subs	r0, r3, #1
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6859      	ldr	r1, [r3, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	440b      	add	r3, r1
 8008f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f5e:	3301      	adds	r3, #1
 8008f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	bf0c      	ite	eq
 8008f68:	2301      	moveq	r3, #1
 8008f6a:	2300      	movne	r3, #0
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	e012      	b.n	8008f96 <HAL_I2C_Init+0x18e>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	1e58      	subs	r0, r3, #1
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6859      	ldr	r1, [r3, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	440b      	add	r3, r1
 8008f7e:	0099      	lsls	r1, r3, #2
 8008f80:	440b      	add	r3, r1
 8008f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f86:	3301      	adds	r3, #1
 8008f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	bf0c      	ite	eq
 8008f90:	2301      	moveq	r3, #1
 8008f92:	2300      	movne	r3, #0
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <HAL_I2C_Init+0x196>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e022      	b.n	8008fe4 <HAL_I2C_Init+0x1dc>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10e      	bne.n	8008fc4 <HAL_I2C_Init+0x1bc>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	1e58      	subs	r0, r3, #1
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6859      	ldr	r1, [r3, #4]
 8008fae:	460b      	mov	r3, r1
 8008fb0:	005b      	lsls	r3, r3, #1
 8008fb2:	440b      	add	r3, r1
 8008fb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fb8:	3301      	adds	r3, #1
 8008fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fc2:	e00f      	b.n	8008fe4 <HAL_I2C_Init+0x1dc>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	1e58      	subs	r0, r3, #1
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6859      	ldr	r1, [r3, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	440b      	add	r3, r1
 8008fd2:	0099      	lsls	r1, r3, #2
 8008fd4:	440b      	add	r3, r1
 8008fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fda:	3301      	adds	r3, #1
 8008fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fe0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008fe4:	6879      	ldr	r1, [r7, #4]
 8008fe6:	6809      	ldr	r1, [r1, #0]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	69da      	ldr	r2, [r3, #28]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009012:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	6911      	ldr	r1, [r2, #16]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	68d2      	ldr	r2, [r2, #12]
 800901e:	4311      	orrs	r1, r2
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	6812      	ldr	r2, [r2, #0]
 8009024:	430b      	orrs	r3, r1
 8009026:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	695a      	ldr	r2, [r3, #20]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	431a      	orrs	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2220      	movs	r2, #32
 800905e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	000186a0 	.word	0x000186a0
 8009080:	001e847f 	.word	0x001e847f
 8009084:	003d08ff 	.word	0x003d08ff
 8009088:	431bde83 	.word	0x431bde83
 800908c:	10624dd3 	.word	0x10624dd3

08009090 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e021      	b.n	80090e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2224      	movs	r2, #36	@ 0x24
 80090a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0201 	bic.w	r2, r2, #1
 80090b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7f9 fdf6 	bl	8002cac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b088      	sub	sp, #32
 80090f4:	af02      	add	r7, sp, #8
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	4608      	mov	r0, r1
 80090fa:	4611      	mov	r1, r2
 80090fc:	461a      	mov	r2, r3
 80090fe:	4603      	mov	r3, r0
 8009100:	817b      	strh	r3, [r7, #10]
 8009102:	460b      	mov	r3, r1
 8009104:	813b      	strh	r3, [r7, #8]
 8009106:	4613      	mov	r3, r2
 8009108:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800910a:	f7fc f9db 	bl	80054c4 <HAL_GetTick>
 800910e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009116:	b2db      	uxtb	r3, r3
 8009118:	2b20      	cmp	r3, #32
 800911a:	f040 80d9 	bne.w	80092d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	2319      	movs	r3, #25
 8009124:	2201      	movs	r2, #1
 8009126:	496d      	ldr	r1, [pc, #436]	@ (80092dc <HAL_I2C_Mem_Write+0x1ec>)
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 fc99 	bl	8009a60 <I2C_WaitOnFlagUntilTimeout>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009134:	2302      	movs	r3, #2
 8009136:	e0cc      	b.n	80092d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800913e:	2b01      	cmp	r3, #1
 8009140:	d101      	bne.n	8009146 <HAL_I2C_Mem_Write+0x56>
 8009142:	2302      	movs	r3, #2
 8009144:	e0c5      	b.n	80092d2 <HAL_I2C_Mem_Write+0x1e2>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b01      	cmp	r3, #1
 800915a:	d007      	beq.n	800916c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0201 	orr.w	r2, r2, #1
 800916a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800917a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2221      	movs	r2, #33	@ 0x21
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2240      	movs	r2, #64	@ 0x40
 8009188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6a3a      	ldr	r2, [r7, #32]
 8009196:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800919c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4a4d      	ldr	r2, [pc, #308]	@ (80092e0 <HAL_I2C_Mem_Write+0x1f0>)
 80091ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80091ae:	88f8      	ldrh	r0, [r7, #6]
 80091b0:	893a      	ldrh	r2, [r7, #8]
 80091b2:	8979      	ldrh	r1, [r7, #10]
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	4603      	mov	r3, r0
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f000 fad0 	bl	8009764 <I2C_RequestMemoryWrite>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d052      	beq.n	8009270 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e081      	b.n	80092d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 fd5e 	bl	8009c94 <I2C_WaitOnTXEFlagUntilTimeout>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00d      	beq.n	80091fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d107      	bne.n	80091f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e06b      	b.n	80092d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091fe:	781a      	ldrb	r2, [r3, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009214:	3b01      	subs	r3, #1
 8009216:	b29a      	uxth	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009220:	b29b      	uxth	r3, r3
 8009222:	3b01      	subs	r3, #1
 8009224:	b29a      	uxth	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	695b      	ldr	r3, [r3, #20]
 8009230:	f003 0304 	and.w	r3, r3, #4
 8009234:	2b04      	cmp	r3, #4
 8009236:	d11b      	bne.n	8009270 <HAL_I2C_Mem_Write+0x180>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800923c:	2b00      	cmp	r3, #0
 800923e:	d017      	beq.n	8009270 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009244:	781a      	ldrb	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800925a:	3b01      	subs	r3, #1
 800925c:	b29a      	uxth	r2, r3
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009266:	b29b      	uxth	r3, r3
 8009268:	3b01      	subs	r3, #1
 800926a:	b29a      	uxth	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1aa      	bne.n	80091ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 fd51 	bl	8009d24 <I2C_WaitOnBTFFlagUntilTimeout>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00d      	beq.n	80092a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800928c:	2b04      	cmp	r3, #4
 800928e:	d107      	bne.n	80092a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800929e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e016      	b.n	80092d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2220      	movs	r2, #32
 80092b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	e000      	b.n	80092d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80092d0:	2302      	movs	r3, #2
  }
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3718      	adds	r7, #24
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	00100002 	.word	0x00100002
 80092e0:	ffff0000 	.word	0xffff0000

080092e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b08c      	sub	sp, #48	@ 0x30
 80092e8:	af02      	add	r7, sp, #8
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	4608      	mov	r0, r1
 80092ee:	4611      	mov	r1, r2
 80092f0:	461a      	mov	r2, r3
 80092f2:	4603      	mov	r3, r0
 80092f4:	817b      	strh	r3, [r7, #10]
 80092f6:	460b      	mov	r3, r1
 80092f8:	813b      	strh	r3, [r7, #8]
 80092fa:	4613      	mov	r3, r2
 80092fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80092fe:	f7fc f8e1 	bl	80054c4 <HAL_GetTick>
 8009302:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800930a:	b2db      	uxtb	r3, r3
 800930c:	2b20      	cmp	r3, #32
 800930e:	f040 8214 	bne.w	800973a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	2319      	movs	r3, #25
 8009318:	2201      	movs	r2, #1
 800931a:	497b      	ldr	r1, [pc, #492]	@ (8009508 <HAL_I2C_Mem_Read+0x224>)
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 fb9f 	bl	8009a60 <I2C_WaitOnFlagUntilTimeout>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009328:	2302      	movs	r3, #2
 800932a:	e207      	b.n	800973c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009332:	2b01      	cmp	r3, #1
 8009334:	d101      	bne.n	800933a <HAL_I2C_Mem_Read+0x56>
 8009336:	2302      	movs	r3, #2
 8009338:	e200      	b.n	800973c <HAL_I2C_Mem_Read+0x458>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b01      	cmp	r3, #1
 800934e:	d007      	beq.n	8009360 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f042 0201 	orr.w	r2, r2, #1
 800935e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800936e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2222      	movs	r2, #34	@ 0x22
 8009374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2240      	movs	r2, #64	@ 0x40
 800937c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800938a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009390:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009396:	b29a      	uxth	r2, r3
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	4a5b      	ldr	r2, [pc, #364]	@ (800950c <HAL_I2C_Mem_Read+0x228>)
 80093a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80093a2:	88f8      	ldrh	r0, [r7, #6]
 80093a4:	893a      	ldrh	r2, [r7, #8]
 80093a6:	8979      	ldrh	r1, [r7, #10]
 80093a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093aa:	9301      	str	r3, [sp, #4]
 80093ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	4603      	mov	r3, r0
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f000 fa6c 	bl	8009890 <I2C_RequestMemoryRead>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e1bc      	b.n	800973c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d113      	bne.n	80093f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093ca:	2300      	movs	r3, #0
 80093cc:	623b      	str	r3, [r7, #32]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	623b      	str	r3, [r7, #32]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	623b      	str	r3, [r7, #32]
 80093de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093ee:	601a      	str	r2, [r3, #0]
 80093f0:	e190      	b.n	8009714 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d11b      	bne.n	8009432 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800940a:	2300      	movs	r3, #0
 800940c:	61fb      	str	r3, [r7, #28]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	61fb      	str	r3, [r7, #28]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	61fb      	str	r3, [r7, #28]
 800941e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	e170      	b.n	8009714 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009436:	2b02      	cmp	r3, #2
 8009438:	d11b      	bne.n	8009472 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009448:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009458:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800945a:	2300      	movs	r3, #0
 800945c:	61bb      	str	r3, [r7, #24]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	61bb      	str	r3, [r7, #24]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	61bb      	str	r3, [r7, #24]
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	e150      	b.n	8009714 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009472:	2300      	movs	r3, #0
 8009474:	617b      	str	r3, [r7, #20]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	617b      	str	r3, [r7, #20]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009488:	e144      	b.n	8009714 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800948e:	2b03      	cmp	r3, #3
 8009490:	f200 80f1 	bhi.w	8009676 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009498:	2b01      	cmp	r3, #1
 800949a:	d123      	bne.n	80094e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800949c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800949e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 fc87 	bl	8009db4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e145      	b.n	800973c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	691a      	ldr	r2, [r3, #16]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ba:	b2d2      	uxtb	r2, r2
 80094bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094cc:	3b01      	subs	r3, #1
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094d8:	b29b      	uxth	r3, r3
 80094da:	3b01      	subs	r3, #1
 80094dc:	b29a      	uxth	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80094e2:	e117      	b.n	8009714 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d14e      	bne.n	800958a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80094ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f2:	2200      	movs	r2, #0
 80094f4:	4906      	ldr	r1, [pc, #24]	@ (8009510 <HAL_I2C_Mem_Read+0x22c>)
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f000 fab2 	bl	8009a60 <I2C_WaitOnFlagUntilTimeout>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d008      	beq.n	8009514 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e11a      	b.n	800973c <HAL_I2C_Mem_Read+0x458>
 8009506:	bf00      	nop
 8009508:	00100002 	.word	0x00100002
 800950c:	ffff0000 	.word	0xffff0000
 8009510:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	691a      	ldr	r2, [r3, #16]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952e:	b2d2      	uxtb	r2, r2
 8009530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009540:	3b01      	subs	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800954c:	b29b      	uxth	r3, r3
 800954e:	3b01      	subs	r3, #1
 8009550:	b29a      	uxth	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	691a      	ldr	r2, [r3, #16]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009560:	b2d2      	uxtb	r2, r2
 8009562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009568:	1c5a      	adds	r2, r3, #1
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009572:	3b01      	subs	r3, #1
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800957e:	b29b      	uxth	r3, r3
 8009580:	3b01      	subs	r3, #1
 8009582:	b29a      	uxth	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009588:	e0c4      	b.n	8009714 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800958a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009590:	2200      	movs	r2, #0
 8009592:	496c      	ldr	r1, [pc, #432]	@ (8009744 <HAL_I2C_Mem_Read+0x460>)
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f000 fa63 	bl	8009a60 <I2C_WaitOnFlagUntilTimeout>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e0cb      	b.n	800973c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	691a      	ldr	r2, [r3, #16]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095be:	b2d2      	uxtb	r2, r2
 80095c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c6:	1c5a      	adds	r2, r3, #1
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095d0:	3b01      	subs	r3, #1
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095dc:	b29b      	uxth	r3, r3
 80095de:	3b01      	subs	r3, #1
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ec:	2200      	movs	r2, #0
 80095ee:	4955      	ldr	r1, [pc, #340]	@ (8009744 <HAL_I2C_Mem_Read+0x460>)
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 fa35 	bl	8009a60 <I2C_WaitOnFlagUntilTimeout>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e09d      	b.n	800973c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800960e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	691a      	ldr	r2, [r3, #16]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800961a:	b2d2      	uxtb	r2, r2
 800961c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009622:	1c5a      	adds	r2, r3, #1
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800962c:	3b01      	subs	r3, #1
 800962e:	b29a      	uxth	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b01      	subs	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	691a      	ldr	r2, [r3, #16]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964c:	b2d2      	uxtb	r2, r2
 800964e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800965e:	3b01      	subs	r3, #1
 8009660:	b29a      	uxth	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800966a:	b29b      	uxth	r3, r3
 800966c:	3b01      	subs	r3, #1
 800966e:	b29a      	uxth	r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009674:	e04e      	b.n	8009714 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009678:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f000 fb9a 	bl	8009db4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e058      	b.n	800973c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	691a      	ldr	r2, [r3, #16]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009694:	b2d2      	uxtb	r2, r2
 8009696:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096a6:	3b01      	subs	r3, #1
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	3b01      	subs	r3, #1
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	f003 0304 	and.w	r3, r3, #4
 80096c6:	2b04      	cmp	r3, #4
 80096c8:	d124      	bne.n	8009714 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d107      	bne.n	80096e2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096e0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	691a      	ldr	r2, [r3, #16]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ec:	b2d2      	uxtb	r2, r2
 80096ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f4:	1c5a      	adds	r2, r3, #1
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096fe:	3b01      	subs	r3, #1
 8009700:	b29a      	uxth	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800970a:	b29b      	uxth	r3, r3
 800970c:	3b01      	subs	r3, #1
 800970e:	b29a      	uxth	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009718:	2b00      	cmp	r3, #0
 800971a:	f47f aeb6 	bne.w	800948a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2220      	movs	r2, #32
 8009722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	e000      	b.n	800973c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800973a:	2302      	movs	r3, #2
  }
}
 800973c:	4618      	mov	r0, r3
 800973e:	3728      	adds	r7, #40	@ 0x28
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	00010004 	.word	0x00010004

08009748 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009756:	b2db      	uxtb	r3, r3
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af02      	add	r7, sp, #8
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	4608      	mov	r0, r1
 800976e:	4611      	mov	r1, r2
 8009770:	461a      	mov	r2, r3
 8009772:	4603      	mov	r3, r0
 8009774:	817b      	strh	r3, [r7, #10]
 8009776:	460b      	mov	r3, r1
 8009778:	813b      	strh	r3, [r7, #8]
 800977a:	4613      	mov	r3, r2
 800977c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800978c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800978e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	2200      	movs	r2, #0
 8009796:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 f960 	bl	8009a60 <I2C_WaitOnFlagUntilTimeout>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00d      	beq.n	80097c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097b4:	d103      	bne.n	80097be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e05f      	b.n	8009882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80097c2:	897b      	ldrh	r3, [r7, #10]
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	461a      	mov	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80097d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d4:	6a3a      	ldr	r2, [r7, #32]
 80097d6:	492d      	ldr	r1, [pc, #180]	@ (800988c <I2C_RequestMemoryWrite+0x128>)
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f000 f9bb 	bl	8009b54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e04c      	b.n	8009882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097e8:	2300      	movs	r3, #0
 80097ea:	617b      	str	r3, [r7, #20]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	617b      	str	r3, [r7, #20]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	617b      	str	r3, [r7, #20]
 80097fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009800:	6a39      	ldr	r1, [r7, #32]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 fa46 	bl	8009c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00d      	beq.n	800982a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009812:	2b04      	cmp	r3, #4
 8009814:	d107      	bne.n	8009826 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009824:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e02b      	b.n	8009882 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800982a:	88fb      	ldrh	r3, [r7, #6]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d105      	bne.n	800983c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009830:	893b      	ldrh	r3, [r7, #8]
 8009832:	b2da      	uxtb	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	611a      	str	r2, [r3, #16]
 800983a:	e021      	b.n	8009880 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800983c:	893b      	ldrh	r3, [r7, #8]
 800983e:	0a1b      	lsrs	r3, r3, #8
 8009840:	b29b      	uxth	r3, r3
 8009842:	b2da      	uxtb	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800984a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800984c:	6a39      	ldr	r1, [r7, #32]
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f000 fa20 	bl	8009c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00d      	beq.n	8009876 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800985e:	2b04      	cmp	r3, #4
 8009860:	d107      	bne.n	8009872 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009870:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e005      	b.n	8009882 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009876:	893b      	ldrh	r3, [r7, #8]
 8009878:	b2da      	uxtb	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3718      	adds	r7, #24
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	00010002 	.word	0x00010002

08009890 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af02      	add	r7, sp, #8
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	4608      	mov	r0, r1
 800989a:	4611      	mov	r1, r2
 800989c:	461a      	mov	r2, r3
 800989e:	4603      	mov	r3, r0
 80098a0:	817b      	strh	r3, [r7, #10]
 80098a2:	460b      	mov	r3, r1
 80098a4:	813b      	strh	r3, [r7, #8]
 80098a6:	4613      	mov	r3, r2
 80098a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80098b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80098c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 f8c2 	bl	8009a60 <I2C_WaitOnFlagUntilTimeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00d      	beq.n	80098fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098f0:	d103      	bne.n	80098fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e0aa      	b.n	8009a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098fe:	897b      	ldrh	r3, [r7, #10]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	461a      	mov	r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800990c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800990e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009910:	6a3a      	ldr	r2, [r7, #32]
 8009912:	4952      	ldr	r1, [pc, #328]	@ (8009a5c <I2C_RequestMemoryRead+0x1cc>)
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 f91d 	bl	8009b54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e097      	b.n	8009a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009924:	2300      	movs	r3, #0
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800993a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800993c:	6a39      	ldr	r1, [r7, #32]
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f000 f9a8 	bl	8009c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00d      	beq.n	8009966 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800994e:	2b04      	cmp	r3, #4
 8009950:	d107      	bne.n	8009962 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009960:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e076      	b.n	8009a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009966:	88fb      	ldrh	r3, [r7, #6]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d105      	bne.n	8009978 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800996c:	893b      	ldrh	r3, [r7, #8]
 800996e:	b2da      	uxtb	r2, r3
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	611a      	str	r2, [r3, #16]
 8009976:	e021      	b.n	80099bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009978:	893b      	ldrh	r3, [r7, #8]
 800997a:	0a1b      	lsrs	r3, r3, #8
 800997c:	b29b      	uxth	r3, r3
 800997e:	b2da      	uxtb	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009988:	6a39      	ldr	r1, [r7, #32]
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 f982 	bl	8009c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00d      	beq.n	80099b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800999a:	2b04      	cmp	r3, #4
 800999c:	d107      	bne.n	80099ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e050      	b.n	8009a54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80099b2:	893b      	ldrh	r3, [r7, #8]
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099be:	6a39      	ldr	r1, [r7, #32]
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 f967 	bl	8009c94 <I2C_WaitOnTXEFlagUntilTimeout>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00d      	beq.n	80099e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d107      	bne.n	80099e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e035      	b.n	8009a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80099f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f000 f82b 	bl	8009a60 <I2C_WaitOnFlagUntilTimeout>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00d      	beq.n	8009a2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a1e:	d103      	bne.n	8009a28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e013      	b.n	8009a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009a2c:	897b      	ldrh	r3, [r7, #10]
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	f043 0301 	orr.w	r3, r3, #1
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3e:	6a3a      	ldr	r2, [r7, #32]
 8009a40:	4906      	ldr	r1, [pc, #24]	@ (8009a5c <I2C_RequestMemoryRead+0x1cc>)
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f000 f886 	bl	8009b54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e000      	b.n	8009a54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	00010002 	.word	0x00010002

08009a60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	603b      	str	r3, [r7, #0]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a70:	e048      	b.n	8009b04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a78:	d044      	beq.n	8009b04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a7a:	f7fb fd23 	bl	80054c4 <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	683a      	ldr	r2, [r7, #0]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d302      	bcc.n	8009a90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d139      	bne.n	8009b04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	0c1b      	lsrs	r3, r3, #16
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d10d      	bne.n	8009ab6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	43da      	mvns	r2, r3
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	bf0c      	ite	eq
 8009aac:	2301      	moveq	r3, #1
 8009aae:	2300      	movne	r3, #0
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	e00c      	b.n	8009ad0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	43da      	mvns	r2, r3
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	bf0c      	ite	eq
 8009ac8:	2301      	moveq	r3, #1
 8009aca:	2300      	movne	r3, #0
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	461a      	mov	r2, r3
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d116      	bne.n	8009b04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af0:	f043 0220 	orr.w	r2, r3, #32
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e023      	b.n	8009b4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	0c1b      	lsrs	r3, r3, #16
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d10d      	bne.n	8009b2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	43da      	mvns	r2, r3
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	4013      	ands	r3, r2
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	bf0c      	ite	eq
 8009b20:	2301      	moveq	r3, #1
 8009b22:	2300      	movne	r3, #0
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	461a      	mov	r2, r3
 8009b28:	e00c      	b.n	8009b44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	43da      	mvns	r2, r3
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	4013      	ands	r3, r2
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	bf0c      	ite	eq
 8009b3c:	2301      	moveq	r3, #1
 8009b3e:	2300      	movne	r3, #0
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	461a      	mov	r2, r3
 8009b44:	79fb      	ldrb	r3, [r7, #7]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d093      	beq.n	8009a72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
 8009b60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b62:	e071      	b.n	8009c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b72:	d123      	bne.n	8009bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009b8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2220      	movs	r2, #32
 8009b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ba8:	f043 0204 	orr.w	r2, r3, #4
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e067      	b.n	8009c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc2:	d041      	beq.n	8009c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bc4:	f7fb fc7e 	bl	80054c4 <HAL_GetTick>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d302      	bcc.n	8009bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d136      	bne.n	8009c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	0c1b      	lsrs	r3, r3, #16
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d10c      	bne.n	8009bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	43da      	mvns	r2, r3
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	4013      	ands	r3, r2
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	bf14      	ite	ne
 8009bf6:	2301      	movne	r3, #1
 8009bf8:	2300      	moveq	r3, #0
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	e00b      	b.n	8009c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	43da      	mvns	r2, r3
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	4013      	ands	r3, r2
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bf14      	ite	ne
 8009c10:	2301      	movne	r3, #1
 8009c12:	2300      	moveq	r3, #0
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d016      	beq.n	8009c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2220      	movs	r2, #32
 8009c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c34:	f043 0220 	orr.w	r2, r3, #32
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e021      	b.n	8009c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	0c1b      	lsrs	r3, r3, #16
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d10c      	bne.n	8009c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	43da      	mvns	r2, r3
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	bf14      	ite	ne
 8009c64:	2301      	movne	r3, #1
 8009c66:	2300      	moveq	r3, #0
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	e00b      	b.n	8009c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	43da      	mvns	r2, r3
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	4013      	ands	r3, r2
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	bf14      	ite	ne
 8009c7e:	2301      	movne	r3, #1
 8009c80:	2300      	moveq	r3, #0
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f47f af6d 	bne.w	8009b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ca0:	e034      	b.n	8009d0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f000 f8e3 	bl	8009e6e <I2C_IsAcknowledgeFailed>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e034      	b.n	8009d1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb8:	d028      	beq.n	8009d0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cba:	f7fb fc03 	bl	80054c4 <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d302      	bcc.n	8009cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d11d      	bne.n	8009d0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	695b      	ldr	r3, [r3, #20]
 8009cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cda:	2b80      	cmp	r3, #128	@ 0x80
 8009cdc:	d016      	beq.n	8009d0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cf8:	f043 0220 	orr.w	r2, r3, #32
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e007      	b.n	8009d1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	695b      	ldr	r3, [r3, #20]
 8009d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d16:	2b80      	cmp	r3, #128	@ 0x80
 8009d18:	d1c3      	bne.n	8009ca2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d30:	e034      	b.n	8009d9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 f89b 	bl	8009e6e <I2C_IsAcknowledgeFailed>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e034      	b.n	8009dac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d48:	d028      	beq.n	8009d9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d4a:	f7fb fbbb 	bl	80054c4 <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d302      	bcc.n	8009d60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d11d      	bne.n	8009d9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	f003 0304 	and.w	r3, r3, #4
 8009d6a:	2b04      	cmp	r3, #4
 8009d6c:	d016      	beq.n	8009d9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2220      	movs	r2, #32
 8009d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d88:	f043 0220 	orr.w	r2, r3, #32
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e007      	b.n	8009dac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	f003 0304 	and.w	r3, r3, #4
 8009da6:	2b04      	cmp	r3, #4
 8009da8:	d1c3      	bne.n	8009d32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009dc0:	e049      	b.n	8009e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	f003 0310 	and.w	r3, r3, #16
 8009dcc:	2b10      	cmp	r3, #16
 8009dce:	d119      	bne.n	8009e04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f06f 0210 	mvn.w	r2, #16
 8009dd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2220      	movs	r2, #32
 8009de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e030      	b.n	8009e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e04:	f7fb fb5e 	bl	80054c4 <HAL_GetTick>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d302      	bcc.n	8009e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d11d      	bne.n	8009e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e24:	2b40      	cmp	r3, #64	@ 0x40
 8009e26:	d016      	beq.n	8009e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2220      	movs	r2, #32
 8009e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e42:	f043 0220 	orr.w	r2, r3, #32
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e007      	b.n	8009e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e60:	2b40      	cmp	r3, #64	@ 0x40
 8009e62:	d1ae      	bne.n	8009dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	695b      	ldr	r3, [r3, #20]
 8009e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e84:	d11b      	bne.n	8009ebe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009e8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2220      	movs	r2, #32
 8009e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eaa:	f043 0204 	orr.w	r2, r3, #4
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e000      	b.n	8009ec0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	2b20      	cmp	r3, #32
 8009ee0:	d129      	bne.n	8009f36 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2224      	movs	r2, #36	@ 0x24
 8009ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f022 0201 	bic.w	r2, r2, #1
 8009ef8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f022 0210 	bic.w	r2, r2, #16
 8009f08:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	430a      	orrs	r2, r1
 8009f18:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f042 0201 	orr.w	r2, r2, #1
 8009f28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	e000      	b.n	8009f38 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009f36:	2302      	movs	r3, #2
  }
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b20      	cmp	r3, #32
 8009f5c:	d12a      	bne.n	8009fb4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2224      	movs	r2, #36	@ 0x24
 8009f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f022 0201 	bic.w	r2, r2, #1
 8009f74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009f7e:	89fb      	ldrh	r3, [r7, #14]
 8009f80:	f023 030f 	bic.w	r3, r3, #15
 8009f84:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	89fb      	ldrh	r3, [r7, #14]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	89fa      	ldrh	r2, [r7, #14]
 8009f96:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f042 0201 	orr.w	r2, r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2220      	movs	r2, #32
 8009fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e000      	b.n	8009fb6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009fb4:	2302      	movs	r3, #2
  }
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
	...

08009fc4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d101      	bne.n	8009fd6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e0bf      	b.n	800a156 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d106      	bne.n	8009ff0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7f8 fe84 	bl	8002cf8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	699a      	ldr	r2, [r3, #24]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a006:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	6999      	ldr	r1, [r3, #24]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a01c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	430a      	orrs	r2, r1
 800a02a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6899      	ldr	r1, [r3, #8]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	4b4a      	ldr	r3, [pc, #296]	@ (800a160 <HAL_LTDC_Init+0x19c>)
 800a038:	400b      	ands	r3, r1
 800a03a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	041b      	lsls	r3, r3, #16
 800a042:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6899      	ldr	r1, [r3, #8]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	699a      	ldr	r2, [r3, #24]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	431a      	orrs	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68d9      	ldr	r1, [r3, #12]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	4b3e      	ldr	r3, [pc, #248]	@ (800a160 <HAL_LTDC_Init+0x19c>)
 800a066:	400b      	ands	r3, r1
 800a068:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	041b      	lsls	r3, r3, #16
 800a070:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68d9      	ldr	r1, [r3, #12]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a1a      	ldr	r2, [r3, #32]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	431a      	orrs	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	430a      	orrs	r2, r1
 800a086:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6919      	ldr	r1, [r3, #16]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	4b33      	ldr	r3, [pc, #204]	@ (800a160 <HAL_LTDC_Init+0x19c>)
 800a094:	400b      	ands	r3, r1
 800a096:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a09c:	041b      	lsls	r3, r3, #16
 800a09e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6919      	ldr	r1, [r3, #16]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	431a      	orrs	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	6959      	ldr	r1, [r3, #20]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	4b27      	ldr	r3, [pc, #156]	@ (800a160 <HAL_LTDC_Init+0x19c>)
 800a0c2:	400b      	ands	r3, r1
 800a0c4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ca:	041b      	lsls	r3, r3, #16
 800a0cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6959      	ldr	r1, [r3, #20]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	431a      	orrs	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	430a      	orrs	r2, r1
 800a0e2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a0ea:	021b      	lsls	r3, r3, #8
 800a0ec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a0f4:	041b      	lsls	r3, r3, #16
 800a0f6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a106:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4313      	orrs	r3, r2
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800a11a:	431a      	orrs	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	430a      	orrs	r2, r1
 800a122:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f042 0206 	orr.w	r2, r2, #6
 800a132:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	699a      	ldr	r2, [r3, #24]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f042 0201 	orr.w	r2, r2, #1
 800a142:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	f000f800 	.word	0xf000f800

0800a164 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a172:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a17a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f003 0304 	and.w	r3, r3, #4
 800a182:	2b00      	cmp	r3, #0
 800a184:	d023      	beq.n	800a1ce <HAL_LTDC_IRQHandler+0x6a>
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	f003 0304 	and.w	r3, r3, #4
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d01e      	beq.n	800a1ce <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f022 0204 	bic.w	r2, r2, #4
 800a19e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2204      	movs	r2, #4
 800a1a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a1ae:	f043 0201 	orr.w	r2, r3, #1
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2204      	movs	r2, #4
 800a1bc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f86f 	bl	800a2ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f003 0302 	and.w	r3, r3, #2
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d023      	beq.n	800a220 <HAL_LTDC_IRQHandler+0xbc>
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d01e      	beq.n	800a220 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f022 0202 	bic.w	r2, r2, #2
 800a1f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a200:	f043 0202 	orr.w	r2, r3, #2
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2204      	movs	r2, #4
 800a20e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f846 	bl	800a2ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d01b      	beq.n	800a262 <HAL_LTDC_IRQHandler+0xfe>
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f003 0301 	and.w	r3, r3, #1
 800a230:	2b00      	cmp	r3, #0
 800a232:	d016      	beq.n	800a262 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f022 0201 	bic.w	r2, r2, #1
 800a242:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2201      	movs	r2, #1
 800a24a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f82f 	bl	800a2c0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f003 0308 	and.w	r3, r3, #8
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d01b      	beq.n	800a2a4 <HAL_LTDC_IRQHandler+0x140>
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	f003 0308 	and.w	r3, r3, #8
 800a272:	2b00      	cmp	r3, #0
 800a274:	d016      	beq.n	800a2a4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f022 0208 	bic.w	r2, r2, #8
 800a284:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2208      	movs	r2, #8
 800a28c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f818 	bl	800a2d4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a2a4:	bf00      	nop
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a2e8:	b5b0      	push	{r4, r5, r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d101      	bne.n	800a302 <HAL_LTDC_ConfigLayer+0x1a>
 800a2fe:	2302      	movs	r3, #2
 800a300:	e02c      	b.n	800a35c <HAL_LTDC_ConfigLayer+0x74>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2202      	movs	r2, #2
 800a30e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2134      	movs	r1, #52	@ 0x34
 800a318:	fb01 f303 	mul.w	r3, r1, r3
 800a31c:	4413      	add	r3, r2
 800a31e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	4614      	mov	r4, r2
 800a326:	461d      	mov	r5, r3
 800a328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a32a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a32c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a32e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a334:	682b      	ldr	r3, [r5, #0]
 800a336:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	68b9      	ldr	r1, [r7, #8]
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f000 f83b 	bl	800a3b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2201      	movs	r2, #1
 800a348:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bdb0      	pop	{r4, r5, r7, pc}

0800a364 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a372:	2b01      	cmp	r3, #1
 800a374:	d101      	bne.n	800a37a <HAL_LTDC_EnableDither+0x16>
 800a376:	2302      	movs	r3, #2
 800a378:	e016      	b.n	800a3a8 <HAL_LTDC_EnableDither+0x44>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2202      	movs	r2, #2
 800a386:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800a38a:	4b0a      	ldr	r3, [pc, #40]	@ (800a3b4 <HAL_LTDC_EnableDither+0x50>)
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	4a09      	ldr	r2, [pc, #36]	@ (800a3b4 <HAL_LTDC_EnableDither+0x50>)
 800a390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a394:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr
 800a3b4:	40016800 	.word	0x40016800

0800a3b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b089      	sub	sp, #36	@ 0x24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	0c1b      	lsrs	r3, r3, #16
 800a3d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3d4:	4413      	add	r3, r2
 800a3d6:	041b      	lsls	r3, r3, #16
 800a3d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	01db      	lsls	r3, r3, #7
 800a3e4:	4413      	add	r3, r2
 800a3e6:	3384      	adds	r3, #132	@ 0x84
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	6812      	ldr	r2, [r2, #0]
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	01d2      	lsls	r2, r2, #7
 800a3f4:	440a      	add	r2, r1
 800a3f6:	3284      	adds	r2, #132	@ 0x84
 800a3f8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a3fc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	0c1b      	lsrs	r3, r3, #16
 800a40a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a40e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a410:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4619      	mov	r1, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	01db      	lsls	r3, r3, #7
 800a41c:	440b      	add	r3, r1
 800a41e:	3384      	adds	r3, #132	@ 0x84
 800a420:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a426:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	68da      	ldr	r2, [r3, #12]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a436:	4413      	add	r3, r2
 800a438:	041b      	lsls	r3, r3, #16
 800a43a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	461a      	mov	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	01db      	lsls	r3, r3, #7
 800a446:	4413      	add	r3, r2
 800a448:	3384      	adds	r3, #132	@ 0x84
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	6812      	ldr	r2, [r2, #0]
 800a450:	4611      	mov	r1, r2
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	01d2      	lsls	r2, r2, #7
 800a456:	440a      	add	r2, r1
 800a458:	3284      	adds	r2, #132	@ 0x84
 800a45a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a45e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	689a      	ldr	r2, [r3, #8]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a46e:	4413      	add	r3, r2
 800a470:	1c5a      	adds	r2, r3, #1
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4619      	mov	r1, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	01db      	lsls	r3, r3, #7
 800a47c:	440b      	add	r3, r1
 800a47e:	3384      	adds	r3, #132	@ 0x84
 800a480:	4619      	mov	r1, r3
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	4313      	orrs	r3, r2
 800a486:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	461a      	mov	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	01db      	lsls	r3, r3, #7
 800a492:	4413      	add	r3, r2
 800a494:	3384      	adds	r3, #132	@ 0x84
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	6812      	ldr	r2, [r2, #0]
 800a49c:	4611      	mov	r1, r2
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	01d2      	lsls	r2, r2, #7
 800a4a2:	440a      	add	r2, r1
 800a4a4:	3284      	adds	r2, #132	@ 0x84
 800a4a6:	f023 0307 	bic.w	r3, r3, #7
 800a4aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	01db      	lsls	r3, r3, #7
 800a4b6:	4413      	add	r3, r2
 800a4b8:	3384      	adds	r3, #132	@ 0x84
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a4c8:	021b      	lsls	r3, r3, #8
 800a4ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a4d2:	041b      	lsls	r3, r3, #16
 800a4d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	699b      	ldr	r3, [r3, #24]
 800a4da:	061b      	lsls	r3, r3, #24
 800a4dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	01db      	lsls	r3, r3, #7
 800a4e8:	4413      	add	r3, r2
 800a4ea:	3384      	adds	r3, #132	@ 0x84
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	01db      	lsls	r3, r3, #7
 800a4f8:	4413      	add	r3, r2
 800a4fa:	3384      	adds	r3, #132	@ 0x84
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	2300      	movs	r3, #0
 800a500:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a508:	461a      	mov	r2, r3
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	431a      	orrs	r2, r3
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	431a      	orrs	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4619      	mov	r1, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	01db      	lsls	r3, r3, #7
 800a51c:	440b      	add	r3, r1
 800a51e:	3384      	adds	r3, #132	@ 0x84
 800a520:	4619      	mov	r1, r3
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	4313      	orrs	r3, r2
 800a526:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	461a      	mov	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	01db      	lsls	r3, r3, #7
 800a532:	4413      	add	r3, r2
 800a534:	3384      	adds	r3, #132	@ 0x84
 800a536:	695b      	ldr	r3, [r3, #20]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	6812      	ldr	r2, [r2, #0]
 800a53c:	4611      	mov	r1, r2
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	01d2      	lsls	r2, r2, #7
 800a542:	440a      	add	r2, r1
 800a544:	3284      	adds	r2, #132	@ 0x84
 800a546:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a54a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	01db      	lsls	r3, r3, #7
 800a556:	4413      	add	r3, r2
 800a558:	3384      	adds	r3, #132	@ 0x84
 800a55a:	461a      	mov	r2, r3
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	01db      	lsls	r3, r3, #7
 800a56c:	4413      	add	r3, r2
 800a56e:	3384      	adds	r3, #132	@ 0x84
 800a570:	69db      	ldr	r3, [r3, #28]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	6812      	ldr	r2, [r2, #0]
 800a576:	4611      	mov	r1, r2
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	01d2      	lsls	r2, r2, #7
 800a57c:	440a      	add	r2, r1
 800a57e:	3284      	adds	r2, #132	@ 0x84
 800a580:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800a584:	f023 0307 	bic.w	r3, r3, #7
 800a588:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	69da      	ldr	r2, [r3, #28]
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	68f9      	ldr	r1, [r7, #12]
 800a594:	6809      	ldr	r1, [r1, #0]
 800a596:	4608      	mov	r0, r1
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	01c9      	lsls	r1, r1, #7
 800a59c:	4401      	add	r1, r0
 800a59e:	3184      	adds	r1, #132	@ 0x84
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	01db      	lsls	r3, r3, #7
 800a5ae:	4413      	add	r3, r2
 800a5b0:	3384      	adds	r3, #132	@ 0x84
 800a5b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	01db      	lsls	r3, r3, #7
 800a5be:	4413      	add	r3, r2
 800a5c0:	3384      	adds	r3, #132	@ 0x84
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	01db      	lsls	r3, r3, #7
 800a5d2:	4413      	add	r3, r2
 800a5d4:	3384      	adds	r3, #132	@ 0x84
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5dc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d102      	bne.n	800a5ec <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800a5e6:	2304      	movs	r3, #4
 800a5e8:	61fb      	str	r3, [r7, #28]
 800a5ea:	e01b      	b.n	800a624 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d102      	bne.n	800a5fa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	61fb      	str	r3, [r7, #28]
 800a5f8:	e014      	b.n	800a624 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	2b04      	cmp	r3, #4
 800a600:	d00b      	beq.n	800a61a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a606:	2b02      	cmp	r3, #2
 800a608:	d007      	beq.n	800a61a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d003      	beq.n	800a61a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a616:	2b07      	cmp	r3, #7
 800a618:	d102      	bne.n	800a620 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800a61a:	2302      	movs	r3, #2
 800a61c:	61fb      	str	r3, [r7, #28]
 800a61e:	e001      	b.n	800a624 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800a620:	2301      	movs	r3, #1
 800a622:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	461a      	mov	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	01db      	lsls	r3, r3, #7
 800a62e:	4413      	add	r3, r2
 800a630:	3384      	adds	r3, #132	@ 0x84
 800a632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	6812      	ldr	r2, [r2, #0]
 800a638:	4611      	mov	r1, r2
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	01d2      	lsls	r2, r2, #7
 800a63e:	440a      	add	r2, r1
 800a640:	3284      	adds	r2, #132	@ 0x84
 800a642:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a646:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64c:	69fa      	ldr	r2, [r7, #28]
 800a64e:	fb02 f303 	mul.w	r3, r2, r3
 800a652:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	6859      	ldr	r1, [r3, #4]
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	1acb      	subs	r3, r1, r3
 800a65e:	69f9      	ldr	r1, [r7, #28]
 800a660:	fb01 f303 	mul.w	r3, r1, r3
 800a664:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a666:	68f9      	ldr	r1, [r7, #12]
 800a668:	6809      	ldr	r1, [r1, #0]
 800a66a:	4608      	mov	r0, r1
 800a66c:	6879      	ldr	r1, [r7, #4]
 800a66e:	01c9      	lsls	r1, r1, #7
 800a670:	4401      	add	r1, r0
 800a672:	3184      	adds	r1, #132	@ 0x84
 800a674:	4313      	orrs	r3, r2
 800a676:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	461a      	mov	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	01db      	lsls	r3, r3, #7
 800a682:	4413      	add	r3, r2
 800a684:	3384      	adds	r3, #132	@ 0x84
 800a686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	6812      	ldr	r2, [r2, #0]
 800a68c:	4611      	mov	r1, r2
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	01d2      	lsls	r2, r2, #7
 800a692:	440a      	add	r2, r1
 800a694:	3284      	adds	r2, #132	@ 0x84
 800a696:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a69a:	f023 0307 	bic.w	r3, r3, #7
 800a69e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	01db      	lsls	r3, r3, #7
 800a6aa:	4413      	add	r3, r2
 800a6ac:	3384      	adds	r3, #132	@ 0x84
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	01db      	lsls	r3, r3, #7
 800a6c0:	4413      	add	r3, r2
 800a6c2:	3384      	adds	r3, #132	@ 0x84
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	6812      	ldr	r2, [r2, #0]
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	01d2      	lsls	r2, r2, #7
 800a6d0:	440a      	add	r2, r1
 800a6d2:	3284      	adds	r2, #132	@ 0x84
 800a6d4:	f043 0301 	orr.w	r3, r3, #1
 800a6d8:	6013      	str	r3, [r2, #0]
}
 800a6da:	bf00      	nop
 800a6dc:	3724      	adds	r7, #36	@ 0x24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
	...

0800a6e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d101      	bne.n	800a6fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e267      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	d075      	beq.n	800a7f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a706:	4b88      	ldr	r3, [pc, #544]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	f003 030c 	and.w	r3, r3, #12
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d00c      	beq.n	800a72c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a712:	4b85      	ldr	r3, [pc, #532]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a71a:	2b08      	cmp	r3, #8
 800a71c:	d112      	bne.n	800a744 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a71e:	4b82      	ldr	r3, [pc, #520]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a72a:	d10b      	bne.n	800a744 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a72c:	4b7e      	ldr	r3, [pc, #504]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a734:	2b00      	cmp	r3, #0
 800a736:	d05b      	beq.n	800a7f0 <HAL_RCC_OscConfig+0x108>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d157      	bne.n	800a7f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	e242      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a74c:	d106      	bne.n	800a75c <HAL_RCC_OscConfig+0x74>
 800a74e:	4b76      	ldr	r3, [pc, #472]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a75      	ldr	r2, [pc, #468]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a758:	6013      	str	r3, [r2, #0]
 800a75a:	e01d      	b.n	800a798 <HAL_RCC_OscConfig+0xb0>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a764:	d10c      	bne.n	800a780 <HAL_RCC_OscConfig+0x98>
 800a766:	4b70      	ldr	r3, [pc, #448]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a6f      	ldr	r2, [pc, #444]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a76c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a770:	6013      	str	r3, [r2, #0]
 800a772:	4b6d      	ldr	r3, [pc, #436]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a6c      	ldr	r2, [pc, #432]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	e00b      	b.n	800a798 <HAL_RCC_OscConfig+0xb0>
 800a780:	4b69      	ldr	r3, [pc, #420]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a68      	ldr	r2, [pc, #416]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a78a:	6013      	str	r3, [r2, #0]
 800a78c:	4b66      	ldr	r3, [pc, #408]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a65      	ldr	r2, [pc, #404]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d013      	beq.n	800a7c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7a0:	f7fa fe90 	bl	80054c4 <HAL_GetTick>
 800a7a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7a6:	e008      	b.n	800a7ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7a8:	f7fa fe8c 	bl	80054c4 <HAL_GetTick>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	2b64      	cmp	r3, #100	@ 0x64
 800a7b4:	d901      	bls.n	800a7ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	e207      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7ba:	4b5b      	ldr	r3, [pc, #364]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d0f0      	beq.n	800a7a8 <HAL_RCC_OscConfig+0xc0>
 800a7c6:	e014      	b.n	800a7f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7c8:	f7fa fe7c 	bl	80054c4 <HAL_GetTick>
 800a7cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7ce:	e008      	b.n	800a7e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7d0:	f7fa fe78 	bl	80054c4 <HAL_GetTick>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	2b64      	cmp	r3, #100	@ 0x64
 800a7dc:	d901      	bls.n	800a7e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e1f3      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7e2:	4b51      	ldr	r3, [pc, #324]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d1f0      	bne.n	800a7d0 <HAL_RCC_OscConfig+0xe8>
 800a7ee:	e000      	b.n	800a7f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f003 0302 	and.w	r3, r3, #2
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d063      	beq.n	800a8c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a7fe:	4b4a      	ldr	r3, [pc, #296]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	f003 030c 	and.w	r3, r3, #12
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00b      	beq.n	800a822 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a80a:	4b47      	ldr	r3, [pc, #284]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a812:	2b08      	cmp	r3, #8
 800a814:	d11c      	bne.n	800a850 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a816:	4b44      	ldr	r3, [pc, #272]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d116      	bne.n	800a850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a822:	4b41      	ldr	r3, [pc, #260]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f003 0302 	and.w	r3, r3, #2
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d005      	beq.n	800a83a <HAL_RCC_OscConfig+0x152>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d001      	beq.n	800a83a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e1c7      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a83a:	4b3b      	ldr	r3, [pc, #236]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	00db      	lsls	r3, r3, #3
 800a848:	4937      	ldr	r1, [pc, #220]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a84e:	e03a      	b.n	800a8c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d020      	beq.n	800a89a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a858:	4b34      	ldr	r3, [pc, #208]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a85a:	2201      	movs	r2, #1
 800a85c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a85e:	f7fa fe31 	bl	80054c4 <HAL_GetTick>
 800a862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a864:	e008      	b.n	800a878 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a866:	f7fa fe2d 	bl	80054c4 <HAL_GetTick>
 800a86a:	4602      	mov	r2, r0
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	2b02      	cmp	r3, #2
 800a872:	d901      	bls.n	800a878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a874:	2303      	movs	r3, #3
 800a876:	e1a8      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a878:	4b2b      	ldr	r3, [pc, #172]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f003 0302 	and.w	r3, r3, #2
 800a880:	2b00      	cmp	r3, #0
 800a882:	d0f0      	beq.n	800a866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a884:	4b28      	ldr	r3, [pc, #160]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	00db      	lsls	r3, r3, #3
 800a892:	4925      	ldr	r1, [pc, #148]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a894:	4313      	orrs	r3, r2
 800a896:	600b      	str	r3, [r1, #0]
 800a898:	e015      	b.n	800a8c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a89a:	4b24      	ldr	r3, [pc, #144]	@ (800a92c <HAL_RCC_OscConfig+0x244>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8a0:	f7fa fe10 	bl	80054c4 <HAL_GetTick>
 800a8a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8a6:	e008      	b.n	800a8ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8a8:	f7fa fe0c 	bl	80054c4 <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d901      	bls.n	800a8ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	e187      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8ba:	4b1b      	ldr	r3, [pc, #108]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1f0      	bne.n	800a8a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f003 0308 	and.w	r3, r3, #8
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d036      	beq.n	800a940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d016      	beq.n	800a908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a8da:	4b15      	ldr	r3, [pc, #84]	@ (800a930 <HAL_RCC_OscConfig+0x248>)
 800a8dc:	2201      	movs	r2, #1
 800a8de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8e0:	f7fa fdf0 	bl	80054c4 <HAL_GetTick>
 800a8e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8e6:	e008      	b.n	800a8fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8e8:	f7fa fdec 	bl	80054c4 <HAL_GetTick>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d901      	bls.n	800a8fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a8f6:	2303      	movs	r3, #3
 800a8f8:	e167      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a928 <HAL_RCC_OscConfig+0x240>)
 800a8fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8fe:	f003 0302 	and.w	r3, r3, #2
 800a902:	2b00      	cmp	r3, #0
 800a904:	d0f0      	beq.n	800a8e8 <HAL_RCC_OscConfig+0x200>
 800a906:	e01b      	b.n	800a940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a908:	4b09      	ldr	r3, [pc, #36]	@ (800a930 <HAL_RCC_OscConfig+0x248>)
 800a90a:	2200      	movs	r2, #0
 800a90c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a90e:	f7fa fdd9 	bl	80054c4 <HAL_GetTick>
 800a912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a914:	e00e      	b.n	800a934 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a916:	f7fa fdd5 	bl	80054c4 <HAL_GetTick>
 800a91a:	4602      	mov	r2, r0
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	2b02      	cmp	r3, #2
 800a922:	d907      	bls.n	800a934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a924:	2303      	movs	r3, #3
 800a926:	e150      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
 800a928:	40023800 	.word	0x40023800
 800a92c:	42470000 	.word	0x42470000
 800a930:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a934:	4b88      	ldr	r3, [pc, #544]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800a936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a938:	f003 0302 	and.w	r3, r3, #2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1ea      	bne.n	800a916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 0304 	and.w	r3, r3, #4
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 8097 	beq.w	800aa7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a94e:	2300      	movs	r3, #0
 800a950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a952:	4b81      	ldr	r3, [pc, #516]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800a954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10f      	bne.n	800a97e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a95e:	2300      	movs	r3, #0
 800a960:	60bb      	str	r3, [r7, #8]
 800a962:	4b7d      	ldr	r3, [pc, #500]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800a964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a966:	4a7c      	ldr	r2, [pc, #496]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800a968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a96c:	6413      	str	r3, [r2, #64]	@ 0x40
 800a96e:	4b7a      	ldr	r3, [pc, #488]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800a970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a976:	60bb      	str	r3, [r7, #8]
 800a978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a97a:	2301      	movs	r3, #1
 800a97c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a97e:	4b77      	ldr	r3, [pc, #476]	@ (800ab5c <HAL_RCC_OscConfig+0x474>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a986:	2b00      	cmp	r3, #0
 800a988:	d118      	bne.n	800a9bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a98a:	4b74      	ldr	r3, [pc, #464]	@ (800ab5c <HAL_RCC_OscConfig+0x474>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a73      	ldr	r2, [pc, #460]	@ (800ab5c <HAL_RCC_OscConfig+0x474>)
 800a990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a996:	f7fa fd95 	bl	80054c4 <HAL_GetTick>
 800a99a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a99c:	e008      	b.n	800a9b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a99e:	f7fa fd91 	bl	80054c4 <HAL_GetTick>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	1ad3      	subs	r3, r2, r3
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d901      	bls.n	800a9b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	e10c      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9b0:	4b6a      	ldr	r3, [pc, #424]	@ (800ab5c <HAL_RCC_OscConfig+0x474>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d0f0      	beq.n	800a99e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d106      	bne.n	800a9d2 <HAL_RCC_OscConfig+0x2ea>
 800a9c4:	4b64      	ldr	r3, [pc, #400]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800a9c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9c8:	4a63      	ldr	r2, [pc, #396]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800a9ca:	f043 0301 	orr.w	r3, r3, #1
 800a9ce:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9d0:	e01c      	b.n	800aa0c <HAL_RCC_OscConfig+0x324>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	2b05      	cmp	r3, #5
 800a9d8:	d10c      	bne.n	800a9f4 <HAL_RCC_OscConfig+0x30c>
 800a9da:	4b5f      	ldr	r3, [pc, #380]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800a9dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9de:	4a5e      	ldr	r2, [pc, #376]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800a9e0:	f043 0304 	orr.w	r3, r3, #4
 800a9e4:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9e6:	4b5c      	ldr	r3, [pc, #368]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800a9e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9ea:	4a5b      	ldr	r2, [pc, #364]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800a9ec:	f043 0301 	orr.w	r3, r3, #1
 800a9f0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9f2:	e00b      	b.n	800aa0c <HAL_RCC_OscConfig+0x324>
 800a9f4:	4b58      	ldr	r3, [pc, #352]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800a9f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9f8:	4a57      	ldr	r2, [pc, #348]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800a9fa:	f023 0301 	bic.w	r3, r3, #1
 800a9fe:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa00:	4b55      	ldr	r3, [pc, #340]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800aa02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa04:	4a54      	ldr	r2, [pc, #336]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800aa06:	f023 0304 	bic.w	r3, r3, #4
 800aa0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d015      	beq.n	800aa40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa14:	f7fa fd56 	bl	80054c4 <HAL_GetTick>
 800aa18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa1a:	e00a      	b.n	800aa32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa1c:	f7fa fd52 	bl	80054c4 <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d901      	bls.n	800aa32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e0cb      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa32:	4b49      	ldr	r3, [pc, #292]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800aa34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d0ee      	beq.n	800aa1c <HAL_RCC_OscConfig+0x334>
 800aa3e:	e014      	b.n	800aa6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa40:	f7fa fd40 	bl	80054c4 <HAL_GetTick>
 800aa44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa46:	e00a      	b.n	800aa5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa48:	f7fa fd3c 	bl	80054c4 <HAL_GetTick>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d901      	bls.n	800aa5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	e0b5      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa5e:	4b3e      	ldr	r3, [pc, #248]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800aa60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa62:	f003 0302 	and.w	r3, r3, #2
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1ee      	bne.n	800aa48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aa6a:	7dfb      	ldrb	r3, [r7, #23]
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d105      	bne.n	800aa7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa70:	4b39      	ldr	r3, [pc, #228]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800aa72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa74:	4a38      	ldr	r2, [pc, #224]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800aa76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 80a1 	beq.w	800abc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aa86:	4b34      	ldr	r3, [pc, #208]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	f003 030c 	and.w	r3, r3, #12
 800aa8e:	2b08      	cmp	r3, #8
 800aa90:	d05c      	beq.n	800ab4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d141      	bne.n	800ab1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa9a:	4b31      	ldr	r3, [pc, #196]	@ (800ab60 <HAL_RCC_OscConfig+0x478>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaa0:	f7fa fd10 	bl	80054c4 <HAL_GetTick>
 800aaa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aaa6:	e008      	b.n	800aaba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aaa8:	f7fa fd0c 	bl	80054c4 <HAL_GetTick>
 800aaac:	4602      	mov	r2, r0
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d901      	bls.n	800aaba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800aab6:	2303      	movs	r3, #3
 800aab8:	e087      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aaba:	4b27      	ldr	r3, [pc, #156]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1f0      	bne.n	800aaa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	69da      	ldr	r2, [r3, #28]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	431a      	orrs	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad4:	019b      	lsls	r3, r3, #6
 800aad6:	431a      	orrs	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aadc:	085b      	lsrs	r3, r3, #1
 800aade:	3b01      	subs	r3, #1
 800aae0:	041b      	lsls	r3, r3, #16
 800aae2:	431a      	orrs	r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae8:	061b      	lsls	r3, r3, #24
 800aaea:	491b      	ldr	r1, [pc, #108]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800aaec:	4313      	orrs	r3, r2
 800aaee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aaf0:	4b1b      	ldr	r3, [pc, #108]	@ (800ab60 <HAL_RCC_OscConfig+0x478>)
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaf6:	f7fa fce5 	bl	80054c4 <HAL_GetTick>
 800aafa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aafc:	e008      	b.n	800ab10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aafe:	f7fa fce1 	bl	80054c4 <HAL_GetTick>
 800ab02:	4602      	mov	r2, r0
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d901      	bls.n	800ab10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	e05c      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab10:	4b11      	ldr	r3, [pc, #68]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d0f0      	beq.n	800aafe <HAL_RCC_OscConfig+0x416>
 800ab1c:	e054      	b.n	800abc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab1e:	4b10      	ldr	r3, [pc, #64]	@ (800ab60 <HAL_RCC_OscConfig+0x478>)
 800ab20:	2200      	movs	r2, #0
 800ab22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab24:	f7fa fcce 	bl	80054c4 <HAL_GetTick>
 800ab28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab2a:	e008      	b.n	800ab3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab2c:	f7fa fcca 	bl	80054c4 <HAL_GetTick>
 800ab30:	4602      	mov	r2, r0
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d901      	bls.n	800ab3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e045      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab3e:	4b06      	ldr	r3, [pc, #24]	@ (800ab58 <HAL_RCC_OscConfig+0x470>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1f0      	bne.n	800ab2c <HAL_RCC_OscConfig+0x444>
 800ab4a:	e03d      	b.n	800abc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	699b      	ldr	r3, [r3, #24]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d107      	bne.n	800ab64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	e038      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
 800ab58:	40023800 	.word	0x40023800
 800ab5c:	40007000 	.word	0x40007000
 800ab60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ab64:	4b1b      	ldr	r3, [pc, #108]	@ (800abd4 <HAL_RCC_OscConfig+0x4ec>)
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d028      	beq.n	800abc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d121      	bne.n	800abc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d11a      	bne.n	800abc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ab94:	4013      	ands	r3, r2
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ab9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d111      	bne.n	800abc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abaa:	085b      	lsrs	r3, r3, #1
 800abac:	3b01      	subs	r3, #1
 800abae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d107      	bne.n	800abc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d001      	beq.n	800abc8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e000      	b.n	800abca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3718      	adds	r7, #24
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	40023800 	.word	0x40023800

0800abd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d101      	bne.n	800abec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e0cc      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800abec:	4b68      	ldr	r3, [pc, #416]	@ (800ad90 <HAL_RCC_ClockConfig+0x1b8>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 030f 	and.w	r3, r3, #15
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d90c      	bls.n	800ac14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abfa:	4b65      	ldr	r3, [pc, #404]	@ (800ad90 <HAL_RCC_ClockConfig+0x1b8>)
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	b2d2      	uxtb	r2, r2
 800ac00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac02:	4b63      	ldr	r3, [pc, #396]	@ (800ad90 <HAL_RCC_ClockConfig+0x1b8>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 030f 	and.w	r3, r3, #15
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d001      	beq.n	800ac14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e0b8      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0302 	and.w	r3, r3, #2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d020      	beq.n	800ac62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0304 	and.w	r3, r3, #4
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d005      	beq.n	800ac38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac2c:	4b59      	ldr	r3, [pc, #356]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	4a58      	ldr	r2, [pc, #352]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ac32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ac36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f003 0308 	and.w	r3, r3, #8
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d005      	beq.n	800ac50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac44:	4b53      	ldr	r3, [pc, #332]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	4a52      	ldr	r2, [pc, #328]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ac4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ac4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac50:	4b50      	ldr	r3, [pc, #320]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	494d      	ldr	r1, [pc, #308]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d044      	beq.n	800acf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d107      	bne.n	800ac86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac76:	4b47      	ldr	r3, [pc, #284]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d119      	bne.n	800acb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e07f      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d003      	beq.n	800ac96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ac92:	2b03      	cmp	r3, #3
 800ac94:	d107      	bne.n	800aca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac96:	4b3f      	ldr	r3, [pc, #252]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d109      	bne.n	800acb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e06f      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aca6:	4b3b      	ldr	r3, [pc, #236]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 0302 	and.w	r3, r3, #2
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d101      	bne.n	800acb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e067      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800acb6:	4b37      	ldr	r3, [pc, #220]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	f023 0203 	bic.w	r2, r3, #3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	4934      	ldr	r1, [pc, #208]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800acc4:	4313      	orrs	r3, r2
 800acc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800acc8:	f7fa fbfc 	bl	80054c4 <HAL_GetTick>
 800accc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acce:	e00a      	b.n	800ace6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acd0:	f7fa fbf8 	bl	80054c4 <HAL_GetTick>
 800acd4:	4602      	mov	r2, r0
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acde:	4293      	cmp	r3, r2
 800ace0:	d901      	bls.n	800ace6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ace2:	2303      	movs	r3, #3
 800ace4:	e04f      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ace6:	4b2b      	ldr	r3, [pc, #172]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	f003 020c 	and.w	r2, r3, #12
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d1eb      	bne.n	800acd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800acf8:	4b25      	ldr	r3, [pc, #148]	@ (800ad90 <HAL_RCC_ClockConfig+0x1b8>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 030f 	and.w	r3, r3, #15
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d20c      	bcs.n	800ad20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad06:	4b22      	ldr	r3, [pc, #136]	@ (800ad90 <HAL_RCC_ClockConfig+0x1b8>)
 800ad08:	683a      	ldr	r2, [r7, #0]
 800ad0a:	b2d2      	uxtb	r2, r2
 800ad0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad0e:	4b20      	ldr	r3, [pc, #128]	@ (800ad90 <HAL_RCC_ClockConfig+0x1b8>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 030f 	and.w	r3, r3, #15
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d001      	beq.n	800ad20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e032      	b.n	800ad86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0304 	and.w	r3, r3, #4
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d008      	beq.n	800ad3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad2c:	4b19      	ldr	r3, [pc, #100]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	4916      	ldr	r1, [pc, #88]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 0308 	and.w	r3, r3, #8
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d009      	beq.n	800ad5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ad4a:	4b12      	ldr	r3, [pc, #72]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	00db      	lsls	r3, r3, #3
 800ad58:	490e      	ldr	r1, [pc, #56]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad5e:	f000 f821 	bl	800ada4 <HAL_RCC_GetSysClockFreq>
 800ad62:	4602      	mov	r2, r0
 800ad64:	4b0b      	ldr	r3, [pc, #44]	@ (800ad94 <HAL_RCC_ClockConfig+0x1bc>)
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	091b      	lsrs	r3, r3, #4
 800ad6a:	f003 030f 	and.w	r3, r3, #15
 800ad6e:	490a      	ldr	r1, [pc, #40]	@ (800ad98 <HAL_RCC_ClockConfig+0x1c0>)
 800ad70:	5ccb      	ldrb	r3, [r1, r3]
 800ad72:	fa22 f303 	lsr.w	r3, r2, r3
 800ad76:	4a09      	ldr	r2, [pc, #36]	@ (800ad9c <HAL_RCC_ClockConfig+0x1c4>)
 800ad78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800ad7a:	4b09      	ldr	r3, [pc, #36]	@ (800ada0 <HAL_RCC_ClockConfig+0x1c8>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7f8 fad2 	bl	8003328 <HAL_InitTick>

  return HAL_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	40023c00 	.word	0x40023c00
 800ad94:	40023800 	.word	0x40023800
 800ad98:	080134cc 	.word	0x080134cc
 800ad9c:	200001e0 	.word	0x200001e0
 800ada0:	20000268 	.word	0x20000268

0800ada4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ada4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ada8:	b094      	sub	sp, #80	@ 0x50
 800adaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800adac:	2300      	movs	r3, #0
 800adae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800adb0:	2300      	movs	r3, #0
 800adb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800adb4:	2300      	movs	r3, #0
 800adb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800adb8:	2300      	movs	r3, #0
 800adba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800adbc:	4b79      	ldr	r3, [pc, #484]	@ (800afa4 <HAL_RCC_GetSysClockFreq+0x200>)
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	f003 030c 	and.w	r3, r3, #12
 800adc4:	2b08      	cmp	r3, #8
 800adc6:	d00d      	beq.n	800ade4 <HAL_RCC_GetSysClockFreq+0x40>
 800adc8:	2b08      	cmp	r3, #8
 800adca:	f200 80e1 	bhi.w	800af90 <HAL_RCC_GetSysClockFreq+0x1ec>
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <HAL_RCC_GetSysClockFreq+0x34>
 800add2:	2b04      	cmp	r3, #4
 800add4:	d003      	beq.n	800adde <HAL_RCC_GetSysClockFreq+0x3a>
 800add6:	e0db      	b.n	800af90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800add8:	4b73      	ldr	r3, [pc, #460]	@ (800afa8 <HAL_RCC_GetSysClockFreq+0x204>)
 800adda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800addc:	e0db      	b.n	800af96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800adde:	4b73      	ldr	r3, [pc, #460]	@ (800afac <HAL_RCC_GetSysClockFreq+0x208>)
 800ade0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ade2:	e0d8      	b.n	800af96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ade4:	4b6f      	ldr	r3, [pc, #444]	@ (800afa4 <HAL_RCC_GetSysClockFreq+0x200>)
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800adec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800adee:	4b6d      	ldr	r3, [pc, #436]	@ (800afa4 <HAL_RCC_GetSysClockFreq+0x200>)
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d063      	beq.n	800aec2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800adfa:	4b6a      	ldr	r3, [pc, #424]	@ (800afa4 <HAL_RCC_GetSysClockFreq+0x200>)
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	099b      	lsrs	r3, r3, #6
 800ae00:	2200      	movs	r2, #0
 800ae02:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800ae06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae0c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae0e:	2300      	movs	r3, #0
 800ae10:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ae16:	4622      	mov	r2, r4
 800ae18:	462b      	mov	r3, r5
 800ae1a:	f04f 0000 	mov.w	r0, #0
 800ae1e:	f04f 0100 	mov.w	r1, #0
 800ae22:	0159      	lsls	r1, r3, #5
 800ae24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ae28:	0150      	lsls	r0, r2, #5
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	4621      	mov	r1, r4
 800ae30:	1a51      	subs	r1, r2, r1
 800ae32:	6139      	str	r1, [r7, #16]
 800ae34:	4629      	mov	r1, r5
 800ae36:	eb63 0301 	sbc.w	r3, r3, r1
 800ae3a:	617b      	str	r3, [r7, #20]
 800ae3c:	f04f 0200 	mov.w	r2, #0
 800ae40:	f04f 0300 	mov.w	r3, #0
 800ae44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ae48:	4659      	mov	r1, fp
 800ae4a:	018b      	lsls	r3, r1, #6
 800ae4c:	4651      	mov	r1, sl
 800ae4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ae52:	4651      	mov	r1, sl
 800ae54:	018a      	lsls	r2, r1, #6
 800ae56:	4651      	mov	r1, sl
 800ae58:	ebb2 0801 	subs.w	r8, r2, r1
 800ae5c:	4659      	mov	r1, fp
 800ae5e:	eb63 0901 	sbc.w	r9, r3, r1
 800ae62:	f04f 0200 	mov.w	r2, #0
 800ae66:	f04f 0300 	mov.w	r3, #0
 800ae6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ae6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ae72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ae76:	4690      	mov	r8, r2
 800ae78:	4699      	mov	r9, r3
 800ae7a:	4623      	mov	r3, r4
 800ae7c:	eb18 0303 	adds.w	r3, r8, r3
 800ae80:	60bb      	str	r3, [r7, #8]
 800ae82:	462b      	mov	r3, r5
 800ae84:	eb49 0303 	adc.w	r3, r9, r3
 800ae88:	60fb      	str	r3, [r7, #12]
 800ae8a:	f04f 0200 	mov.w	r2, #0
 800ae8e:	f04f 0300 	mov.w	r3, #0
 800ae92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ae96:	4629      	mov	r1, r5
 800ae98:	024b      	lsls	r3, r1, #9
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800aea0:	4621      	mov	r1, r4
 800aea2:	024a      	lsls	r2, r1, #9
 800aea4:	4610      	mov	r0, r2
 800aea6:	4619      	mov	r1, r3
 800aea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeaa:	2200      	movs	r2, #0
 800aeac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aeae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aeb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800aeb4:	f7f5 f9f4 	bl	80002a0 <__aeabi_uldivmod>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4613      	mov	r3, r2
 800aebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aec0:	e058      	b.n	800af74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aec2:	4b38      	ldr	r3, [pc, #224]	@ (800afa4 <HAL_RCC_GetSysClockFreq+0x200>)
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	099b      	lsrs	r3, r3, #6
 800aec8:	2200      	movs	r2, #0
 800aeca:	4618      	mov	r0, r3
 800aecc:	4611      	mov	r1, r2
 800aece:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800aed2:	623b      	str	r3, [r7, #32]
 800aed4:	2300      	movs	r3, #0
 800aed6:	627b      	str	r3, [r7, #36]	@ 0x24
 800aed8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800aedc:	4642      	mov	r2, r8
 800aede:	464b      	mov	r3, r9
 800aee0:	f04f 0000 	mov.w	r0, #0
 800aee4:	f04f 0100 	mov.w	r1, #0
 800aee8:	0159      	lsls	r1, r3, #5
 800aeea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aeee:	0150      	lsls	r0, r2, #5
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4641      	mov	r1, r8
 800aef6:	ebb2 0a01 	subs.w	sl, r2, r1
 800aefa:	4649      	mov	r1, r9
 800aefc:	eb63 0b01 	sbc.w	fp, r3, r1
 800af00:	f04f 0200 	mov.w	r2, #0
 800af04:	f04f 0300 	mov.w	r3, #0
 800af08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800af0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800af10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800af14:	ebb2 040a 	subs.w	r4, r2, sl
 800af18:	eb63 050b 	sbc.w	r5, r3, fp
 800af1c:	f04f 0200 	mov.w	r2, #0
 800af20:	f04f 0300 	mov.w	r3, #0
 800af24:	00eb      	lsls	r3, r5, #3
 800af26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800af2a:	00e2      	lsls	r2, r4, #3
 800af2c:	4614      	mov	r4, r2
 800af2e:	461d      	mov	r5, r3
 800af30:	4643      	mov	r3, r8
 800af32:	18e3      	adds	r3, r4, r3
 800af34:	603b      	str	r3, [r7, #0]
 800af36:	464b      	mov	r3, r9
 800af38:	eb45 0303 	adc.w	r3, r5, r3
 800af3c:	607b      	str	r3, [r7, #4]
 800af3e:	f04f 0200 	mov.w	r2, #0
 800af42:	f04f 0300 	mov.w	r3, #0
 800af46:	e9d7 4500 	ldrd	r4, r5, [r7]
 800af4a:	4629      	mov	r1, r5
 800af4c:	028b      	lsls	r3, r1, #10
 800af4e:	4621      	mov	r1, r4
 800af50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800af54:	4621      	mov	r1, r4
 800af56:	028a      	lsls	r2, r1, #10
 800af58:	4610      	mov	r0, r2
 800af5a:	4619      	mov	r1, r3
 800af5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af5e:	2200      	movs	r2, #0
 800af60:	61bb      	str	r3, [r7, #24]
 800af62:	61fa      	str	r2, [r7, #28]
 800af64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af68:	f7f5 f99a 	bl	80002a0 <__aeabi_uldivmod>
 800af6c:	4602      	mov	r2, r0
 800af6e:	460b      	mov	r3, r1
 800af70:	4613      	mov	r3, r2
 800af72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800af74:	4b0b      	ldr	r3, [pc, #44]	@ (800afa4 <HAL_RCC_GetSysClockFreq+0x200>)
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	0c1b      	lsrs	r3, r3, #16
 800af7a:	f003 0303 	and.w	r3, r3, #3
 800af7e:	3301      	adds	r3, #1
 800af80:	005b      	lsls	r3, r3, #1
 800af82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800af84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800af86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af88:	fbb2 f3f3 	udiv	r3, r2, r3
 800af8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800af8e:	e002      	b.n	800af96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800af90:	4b05      	ldr	r3, [pc, #20]	@ (800afa8 <HAL_RCC_GetSysClockFreq+0x204>)
 800af92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800af94:	bf00      	nop
    }
  }
  return sysclockfreq;
 800af96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3750      	adds	r7, #80	@ 0x50
 800af9c:	46bd      	mov	sp, r7
 800af9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afa2:	bf00      	nop
 800afa4:	40023800 	.word	0x40023800
 800afa8:	00f42400 	.word	0x00f42400
 800afac:	007a1200 	.word	0x007a1200

0800afb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afb0:	b480      	push	{r7}
 800afb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afb4:	4b03      	ldr	r3, [pc, #12]	@ (800afc4 <HAL_RCC_GetHCLKFreq+0x14>)
 800afb6:	681b      	ldr	r3, [r3, #0]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	200001e0 	.word	0x200001e0

0800afc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800afcc:	f7ff fff0 	bl	800afb0 <HAL_RCC_GetHCLKFreq>
 800afd0:	4602      	mov	r2, r0
 800afd2:	4b05      	ldr	r3, [pc, #20]	@ (800afe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	0a9b      	lsrs	r3, r3, #10
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	4903      	ldr	r1, [pc, #12]	@ (800afec <HAL_RCC_GetPCLK1Freq+0x24>)
 800afde:	5ccb      	ldrb	r3, [r1, r3]
 800afe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	40023800 	.word	0x40023800
 800afec:	080134dc 	.word	0x080134dc

0800aff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aff4:	f7ff ffdc 	bl	800afb0 <HAL_RCC_GetHCLKFreq>
 800aff8:	4602      	mov	r2, r0
 800affa:	4b05      	ldr	r3, [pc, #20]	@ (800b010 <HAL_RCC_GetPCLK2Freq+0x20>)
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	0b5b      	lsrs	r3, r3, #13
 800b000:	f003 0307 	and.w	r3, r3, #7
 800b004:	4903      	ldr	r1, [pc, #12]	@ (800b014 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b006:	5ccb      	ldrb	r3, [r1, r3]
 800b008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	40023800 	.word	0x40023800
 800b014:	080134dc 	.word	0x080134dc

0800b018 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	220f      	movs	r2, #15
 800b026:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b028:	4b12      	ldr	r3, [pc, #72]	@ (800b074 <HAL_RCC_GetClockConfig+0x5c>)
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	f003 0203 	and.w	r2, r3, #3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b034:	4b0f      	ldr	r3, [pc, #60]	@ (800b074 <HAL_RCC_GetClockConfig+0x5c>)
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b040:	4b0c      	ldr	r3, [pc, #48]	@ (800b074 <HAL_RCC_GetClockConfig+0x5c>)
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b04c:	4b09      	ldr	r3, [pc, #36]	@ (800b074 <HAL_RCC_GetClockConfig+0x5c>)
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	08db      	lsrs	r3, r3, #3
 800b052:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b05a:	4b07      	ldr	r3, [pc, #28]	@ (800b078 <HAL_RCC_GetClockConfig+0x60>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 020f 	and.w	r2, r3, #15
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	601a      	str	r2, [r3, #0]
}
 800b066:	bf00      	nop
 800b068:	370c      	adds	r7, #12
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	40023800 	.word	0x40023800
 800b078:	40023c00 	.word	0x40023c00

0800b07c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b084:	2300      	movs	r3, #0
 800b086:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b088:	2300      	movs	r3, #0
 800b08a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	2b00      	cmp	r3, #0
 800b096:	d10b      	bne.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d105      	bne.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d075      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b0b0:	4b91      	ldr	r3, [pc, #580]	@ (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b0b6:	f7fa fa05 	bl	80054c4 <HAL_GetTick>
 800b0ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b0bc:	e008      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b0be:	f7fa fa01 	bl	80054c4 <HAL_GetTick>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d901      	bls.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e189      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b0d0:	4b8a      	ldr	r3, [pc, #552]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1f0      	bne.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f003 0301 	and.w	r3, r3, #1
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d009      	beq.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	019a      	lsls	r2, r3, #6
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	071b      	lsls	r3, r3, #28
 800b0f4:	4981      	ldr	r1, [pc, #516]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0302 	and.w	r3, r3, #2
 800b104:	2b00      	cmp	r3, #0
 800b106:	d01f      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b108:	4b7c      	ldr	r3, [pc, #496]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b10a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b10e:	0f1b      	lsrs	r3, r3, #28
 800b110:	f003 0307 	and.w	r3, r3, #7
 800b114:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	019a      	lsls	r2, r3, #6
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	061b      	lsls	r3, r3, #24
 800b122:	431a      	orrs	r2, r3
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	071b      	lsls	r3, r3, #28
 800b128:	4974      	ldr	r1, [pc, #464]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b12a:	4313      	orrs	r3, r2
 800b12c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b130:	4b72      	ldr	r3, [pc, #456]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b136:	f023 021f 	bic.w	r2, r3, #31
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	69db      	ldr	r3, [r3, #28]
 800b13e:	3b01      	subs	r3, #1
 800b140:	496e      	ldr	r1, [pc, #440]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b142:	4313      	orrs	r3, r2
 800b144:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00d      	beq.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	019a      	lsls	r2, r3, #6
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	061b      	lsls	r3, r3, #24
 800b160:	431a      	orrs	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	071b      	lsls	r3, r3, #28
 800b168:	4964      	ldr	r1, [pc, #400]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b16a:	4313      	orrs	r3, r2
 800b16c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b170:	4b61      	ldr	r3, [pc, #388]	@ (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800b172:	2201      	movs	r2, #1
 800b174:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b176:	f7fa f9a5 	bl	80054c4 <HAL_GetTick>
 800b17a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b17c:	e008      	b.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b17e:	f7fa f9a1 	bl	80054c4 <HAL_GetTick>
 800b182:	4602      	mov	r2, r0
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	2b02      	cmp	r3, #2
 800b18a:	d901      	bls.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e129      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b190:	4b5a      	ldr	r3, [pc, #360]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d0f0      	beq.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0304 	and.w	r3, r3, #4
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d105      	bne.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d079      	beq.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b1b4:	4b52      	ldr	r3, [pc, #328]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b1ba:	f7fa f983 	bl	80054c4 <HAL_GetTick>
 800b1be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b1c0:	e008      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b1c2:	f7fa f97f 	bl	80054c4 <HAL_GetTick>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d901      	bls.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	e107      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b1d4:	4b49      	ldr	r3, [pc, #292]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1e0:	d0ef      	beq.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 0304 	and.w	r3, r3, #4
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d020      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b1ee:	4b43      	ldr	r3, [pc, #268]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b1f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1f4:	0f1b      	lsrs	r3, r3, #28
 800b1f6:	f003 0307 	and.w	r3, r3, #7
 800b1fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	019a      	lsls	r2, r3, #6
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	695b      	ldr	r3, [r3, #20]
 800b206:	061b      	lsls	r3, r3, #24
 800b208:	431a      	orrs	r2, r3
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	071b      	lsls	r3, r3, #28
 800b20e:	493b      	ldr	r1, [pc, #236]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b210:	4313      	orrs	r3, r2
 800b212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b216:	4b39      	ldr	r3, [pc, #228]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b21c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a1b      	ldr	r3, [r3, #32]
 800b224:	3b01      	subs	r3, #1
 800b226:	021b      	lsls	r3, r3, #8
 800b228:	4934      	ldr	r1, [pc, #208]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0308 	and.w	r3, r3, #8
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d01e      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b23c:	4b2f      	ldr	r3, [pc, #188]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b242:	0e1b      	lsrs	r3, r3, #24
 800b244:	f003 030f 	and.w	r3, r3, #15
 800b248:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	019a      	lsls	r2, r3, #6
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	061b      	lsls	r3, r3, #24
 800b254:	431a      	orrs	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	071b      	lsls	r3, r3, #28
 800b25c:	4927      	ldr	r1, [pc, #156]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b25e:	4313      	orrs	r3, r2
 800b260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b264:	4b25      	ldr	r3, [pc, #148]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b26a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b272:	4922      	ldr	r1, [pc, #136]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b274:	4313      	orrs	r3, r2
 800b276:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b27a:	4b21      	ldr	r3, [pc, #132]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b27c:	2201      	movs	r2, #1
 800b27e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b280:	f7fa f920 	bl	80054c4 <HAL_GetTick>
 800b284:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b286:	e008      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b288:	f7fa f91c 	bl	80054c4 <HAL_GetTick>
 800b28c:	4602      	mov	r2, r0
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	2b02      	cmp	r3, #2
 800b294:	d901      	bls.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b296:	2303      	movs	r3, #3
 800b298:	e0a4      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b29a:	4b18      	ldr	r3, [pc, #96]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2a6:	d1ef      	bne.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 0320 	and.w	r3, r3, #32
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f000 808b 	beq.w	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60fb      	str	r3, [r7, #12]
 800b2ba:	4b10      	ldr	r3, [pc, #64]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2be:	4a0f      	ldr	r2, [pc, #60]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b2c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2c4:	6413      	str	r3, [r2, #64]	@ 0x40
 800b2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800b2c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b2d2:	4b0c      	ldr	r3, [pc, #48]	@ (800b304 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a0b      	ldr	r2, [pc, #44]	@ (800b304 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b2d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b2de:	f7fa f8f1 	bl	80054c4 <HAL_GetTick>
 800b2e2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800b2e4:	e010      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2e6:	f7fa f8ed 	bl	80054c4 <HAL_GetTick>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d909      	bls.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	e075      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800b2f8:	42470068 	.word	0x42470068
 800b2fc:	40023800 	.word	0x40023800
 800b300:	42470070 	.word	0x42470070
 800b304:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800b308:	4b38      	ldr	r3, [pc, #224]	@ (800b3ec <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b310:	2b00      	cmp	r3, #0
 800b312:	d0e8      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b314:	4b36      	ldr	r3, [pc, #216]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b318:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b31c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d02f      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d028      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b332:	4b2f      	ldr	r3, [pc, #188]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b33a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b33c:	4b2d      	ldr	r3, [pc, #180]	@ (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800b33e:	2201      	movs	r2, #1
 800b340:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b342:	4b2c      	ldr	r3, [pc, #176]	@ (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800b344:	2200      	movs	r2, #0
 800b346:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b348:	4a29      	ldr	r2, [pc, #164]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b34e:	4b28      	ldr	r3, [pc, #160]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	2b01      	cmp	r3, #1
 800b358:	d114      	bne.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b35a:	f7fa f8b3 	bl	80054c4 <HAL_GetTick>
 800b35e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b360:	e00a      	b.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b362:	f7fa f8af 	bl	80054c4 <HAL_GetTick>
 800b366:	4602      	mov	r2, r0
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b370:	4293      	cmp	r3, r2
 800b372:	d901      	bls.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800b374:	2303      	movs	r3, #3
 800b376:	e035      	b.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b378:	4b1d      	ldr	r3, [pc, #116]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b37a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b37c:	f003 0302 	and.w	r3, r3, #2
 800b380:	2b00      	cmp	r3, #0
 800b382:	d0ee      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b38c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b390:	d10d      	bne.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b392:	4b17      	ldr	r3, [pc, #92]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b39e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b3a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3a6:	4912      	ldr	r1, [pc, #72]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	608b      	str	r3, [r1, #8]
 800b3ac:	e005      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800b3ae:	4b10      	ldr	r3, [pc, #64]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	4a0f      	ldr	r2, [pc, #60]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b3b4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b3b8:	6093      	str	r3, [r2, #8]
 800b3ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b3bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3c6:	490a      	ldr	r1, [pc, #40]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 0310 	and.w	r3, r3, #16
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d004      	beq.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800b3de:	4b06      	ldr	r3, [pc, #24]	@ (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800b3e0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	40007000 	.word	0x40007000
 800b3f0:	40023800 	.word	0x40023800
 800b3f4:	42470e40 	.word	0x42470e40
 800b3f8:	424711e0 	.word	0x424711e0

0800b3fc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e025      	b.n	800b45c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d106      	bne.n	800b42a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7f7 ff75 	bl	8003314 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2202      	movs	r2, #2
 800b42e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	3304      	adds	r3, #4
 800b43a:	4619      	mov	r1, r3
 800b43c:	4610      	mov	r0, r2
 800b43e:	f001 fef7 	bl	800d230 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6818      	ldr	r0, [r3, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	461a      	mov	r2, r3
 800b44c:	6839      	ldr	r1, [r7, #0]
 800b44e:	f001 ff4c 	bl	800d2ea <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3708      	adds	r7, #8
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b476:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b478:	7dfb      	ldrb	r3, [r7, #23]
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d101      	bne.n	800b482 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b47e:	2302      	movs	r3, #2
 800b480:	e021      	b.n	800b4c6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b482:	7dfb      	ldrb	r3, [r7, #23]
 800b484:	2b01      	cmp	r3, #1
 800b486:	d002      	beq.n	800b48e <HAL_SDRAM_SendCommand+0x2a>
 800b488:	7dfb      	ldrb	r3, [r7, #23]
 800b48a:	2b05      	cmp	r3, #5
 800b48c:	d118      	bne.n	800b4c0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2202      	movs	r2, #2
 800b492:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	68b9      	ldr	r1, [r7, #8]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f001 ff8c 	bl	800d3bc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d104      	bne.n	800b4b6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2205      	movs	r2, #5
 800b4b0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b4b4:	e006      	b.n	800b4c4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b4be:	e001      	b.n	800b4c4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e000      	b.n	800b4c6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b082      	sub	sp, #8
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d101      	bne.n	800b4e8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	e016      	b.n	800b516 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d10f      	bne.n	800b514 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	4618      	mov	r0, r3
 800b504:	f001 ff97 	bl	800d436 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	e000      	b.n	800b516 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b514:	2301      	movs	r3, #1
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b082      	sub	sp, #8
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e07b      	b.n	800b628 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b534:	2b00      	cmp	r3, #0
 800b536:	d108      	bne.n	800b54a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b540:	d009      	beq.n	800b556 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	61da      	str	r2, [r3, #28]
 800b548:	e005      	b.n	800b556 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b562:	b2db      	uxtb	r3, r3
 800b564:	2b00      	cmp	r3, #0
 800b566:	d106      	bne.n	800b576 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f7f7 fcf1 	bl	8002f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2202      	movs	r2, #2
 800b57a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b58c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b59e:	431a      	orrs	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	691b      	ldr	r3, [r3, #16]
 800b5ae:	f003 0302 	and.w	r3, r3, #2
 800b5b2:	431a      	orrs	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	695b      	ldr	r3, [r3, #20]
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	431a      	orrs	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b5c6:	431a      	orrs	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	69db      	ldr	r3, [r3, #28]
 800b5cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b5d0:	431a      	orrs	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5da:	ea42 0103 	orr.w	r1, r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	699b      	ldr	r3, [r3, #24]
 800b5f2:	0c1b      	lsrs	r3, r3, #16
 800b5f4:	f003 0104 	and.w	r1, r3, #4
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5fc:	f003 0210 	and.w	r2, r3, #16
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	430a      	orrs	r2, r1
 800b606:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	69da      	ldr	r2, [r3, #28]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b616:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e01a      	b.n	800b678 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2202      	movs	r2, #2
 800b646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b658:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7f7 fcc4 	bl	8002fe8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b088      	sub	sp, #32
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	603b      	str	r3, [r7, #0]
 800b68c:	4613      	mov	r3, r2
 800b68e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b690:	f7f9 ff18 	bl	80054c4 <HAL_GetTick>
 800b694:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800b696:	88fb      	ldrh	r3, [r7, #6]
 800b698:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d001      	beq.n	800b6aa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800b6a6:	2302      	movs	r3, #2
 800b6a8:	e12a      	b.n	800b900 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <HAL_SPI_Transmit+0x36>
 800b6b0:	88fb      	ldrh	r3, [r7, #6]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e122      	b.n	800b900 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d101      	bne.n	800b6c8 <HAL_SPI_Transmit+0x48>
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	e11b      	b.n	800b900 <HAL_SPI_Transmit+0x280>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2203      	movs	r2, #3
 800b6d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	88fa      	ldrh	r2, [r7, #6]
 800b6e8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	88fa      	ldrh	r2, [r7, #6]
 800b6ee:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b716:	d10f      	bne.n	800b738 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b726:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b736:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b742:	2b40      	cmp	r3, #64	@ 0x40
 800b744:	d007      	beq.n	800b756 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b754:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b75e:	d152      	bne.n	800b806 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d002      	beq.n	800b76e <HAL_SPI_Transmit+0xee>
 800b768:	8b7b      	ldrh	r3, [r7, #26]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d145      	bne.n	800b7fa <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b772:	881a      	ldrh	r2, [r3, #0]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b77e:	1c9a      	adds	r2, r3, #2
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b788:	b29b      	uxth	r3, r3
 800b78a:	3b01      	subs	r3, #1
 800b78c:	b29a      	uxth	r2, r3
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b792:	e032      	b.n	800b7fa <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	f003 0302 	and.w	r3, r3, #2
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d112      	bne.n	800b7c8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7a6:	881a      	ldrh	r2, [r3, #0]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7b2:	1c9a      	adds	r2, r3, #2
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b7c6:	e018      	b.n	800b7fa <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7c8:	f7f9 fe7c 	bl	80054c4 <HAL_GetTick>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d803      	bhi.n	800b7e0 <HAL_SPI_Transmit+0x160>
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7de:	d102      	bne.n	800b7e6 <HAL_SPI_Transmit+0x166>
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d109      	bne.n	800b7fa <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	e082      	b.n	800b900 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1c7      	bne.n	800b794 <HAL_SPI_Transmit+0x114>
 800b804:	e053      	b.n	800b8ae <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d002      	beq.n	800b814 <HAL_SPI_Transmit+0x194>
 800b80e:	8b7b      	ldrh	r3, [r7, #26]
 800b810:	2b01      	cmp	r3, #1
 800b812:	d147      	bne.n	800b8a4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	330c      	adds	r3, #12
 800b81e:	7812      	ldrb	r2, [r2, #0]
 800b820:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b826:	1c5a      	adds	r2, r3, #1
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b830:	b29b      	uxth	r3, r3
 800b832:	3b01      	subs	r3, #1
 800b834:	b29a      	uxth	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b83a:	e033      	b.n	800b8a4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	f003 0302 	and.w	r3, r3, #2
 800b846:	2b02      	cmp	r3, #2
 800b848:	d113      	bne.n	800b872 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	330c      	adds	r3, #12
 800b854:	7812      	ldrb	r2, [r2, #0]
 800b856:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b85c:	1c5a      	adds	r2, r3, #1
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b866:	b29b      	uxth	r3, r3
 800b868:	3b01      	subs	r3, #1
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800b870:	e018      	b.n	800b8a4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b872:	f7f9 fe27 	bl	80054c4 <HAL_GetTick>
 800b876:	4602      	mov	r2, r0
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	683a      	ldr	r2, [r7, #0]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d803      	bhi.n	800b88a <HAL_SPI_Transmit+0x20a>
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b888:	d102      	bne.n	800b890 <HAL_SPI_Transmit+0x210>
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d109      	bne.n	800b8a4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e02d      	b.n	800b900 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1c6      	bne.n	800b83c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b8ae:	69fa      	ldr	r2, [r7, #28]
 800b8b0:	6839      	ldr	r1, [r7, #0]
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f000 fbe6 	bl	800c084 <SPI_EndRxTxTransaction>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2220      	movs	r2, #32
 800b8c2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10a      	bne.n	800b8e2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	617b      	str	r3, [r7, #20]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	617b      	str	r3, [r7, #20]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	617b      	str	r3, [r7, #20]
 800b8e0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e000      	b.n	800b900 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800b8fe:	2300      	movs	r3, #0
  }
}
 800b900:	4618      	mov	r0, r3
 800b902:	3720      	adds	r7, #32
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b088      	sub	sp, #32
 800b90c:	af02      	add	r7, sp, #8
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	603b      	str	r3, [r7, #0]
 800b914:	4613      	mov	r3, r2
 800b916:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	2b01      	cmp	r3, #1
 800b922:	d001      	beq.n	800b928 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800b924:	2302      	movs	r3, #2
 800b926:	e104      	b.n	800bb32 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b930:	d112      	bne.n	800b958 <HAL_SPI_Receive+0x50>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10e      	bne.n	800b958 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2204      	movs	r2, #4
 800b93e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b942:	88fa      	ldrh	r2, [r7, #6]
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	4613      	mov	r3, r2
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	68b9      	ldr	r1, [r7, #8]
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f000 f8f3 	bl	800bb3a <HAL_SPI_TransmitReceive>
 800b954:	4603      	mov	r3, r0
 800b956:	e0ec      	b.n	800bb32 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b958:	f7f9 fdb4 	bl	80054c4 <HAL_GetTick>
 800b95c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d002      	beq.n	800b96a <HAL_SPI_Receive+0x62>
 800b964:	88fb      	ldrh	r3, [r7, #6]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e0e1      	b.n	800bb32 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800b974:	2b01      	cmp	r3, #1
 800b976:	d101      	bne.n	800b97c <HAL_SPI_Receive+0x74>
 800b978:	2302      	movs	r3, #2
 800b97a:	e0da      	b.n	800bb32 <HAL_SPI_Receive+0x22a>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2204      	movs	r2, #4
 800b988:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2200      	movs	r2, #0
 800b990:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	88fa      	ldrh	r2, [r7, #6]
 800b99c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	88fa      	ldrh	r2, [r7, #6]
 800b9a2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9ca:	d10f      	bne.n	800b9ec <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b9da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b9ea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9f6:	2b40      	cmp	r3, #64	@ 0x40
 800b9f8:	d007      	beq.n	800ba0a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba08:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d170      	bne.n	800baf4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ba12:	e035      	b.n	800ba80 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d115      	bne.n	800ba4e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f103 020c 	add.w	r2, r3, #12
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba2e:	7812      	ldrb	r2, [r2, #0]
 800ba30:	b2d2      	uxtb	r2, r2
 800ba32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	3b01      	subs	r3, #1
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ba4c:	e018      	b.n	800ba80 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba4e:	f7f9 fd39 	bl	80054c4 <HAL_GetTick>
 800ba52:	4602      	mov	r2, r0
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	683a      	ldr	r2, [r7, #0]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d803      	bhi.n	800ba66 <HAL_SPI_Receive+0x15e>
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba64:	d102      	bne.n	800ba6c <HAL_SPI_Receive+0x164>
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d109      	bne.n	800ba80 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e058      	b.n	800bb32 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1c4      	bne.n	800ba14 <HAL_SPI_Receive+0x10c>
 800ba8a:	e038      	b.n	800bafe <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d113      	bne.n	800bac2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68da      	ldr	r2, [r3, #12]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baa4:	b292      	uxth	r2, r2
 800baa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baac:	1c9a      	adds	r2, r3, #2
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	3b01      	subs	r3, #1
 800baba:	b29a      	uxth	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bac0:	e018      	b.n	800baf4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bac2:	f7f9 fcff 	bl	80054c4 <HAL_GetTick>
 800bac6:	4602      	mov	r2, r0
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d803      	bhi.n	800bada <HAL_SPI_Receive+0x1d2>
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad8:	d102      	bne.n	800bae0 <HAL_SPI_Receive+0x1d8>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d109      	bne.n	800baf4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2201      	movs	r2, #1
 800bae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800baf0:	2303      	movs	r3, #3
 800baf2:	e01e      	b.n	800bb32 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1c6      	bne.n	800ba8c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bafe:	697a      	ldr	r2, [r7, #20]
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f000 fa58 	bl	800bfb8 <SPI_EndRxTransaction>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d002      	beq.n	800bb14 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2220      	movs	r2, #32
 800bb12:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d001      	beq.n	800bb30 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e000      	b.n	800bb32 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800bb30:	2300      	movs	r3, #0
  }
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3718      	adds	r7, #24
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b08a      	sub	sp, #40	@ 0x28
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	607a      	str	r2, [r7, #4]
 800bb46:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb4c:	f7f9 fcba 	bl	80054c4 <HAL_GetTick>
 800bb50:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bb58:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800bb60:	887b      	ldrh	r3, [r7, #2]
 800bb62:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bb64:	7ffb      	ldrb	r3, [r7, #31]
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d00c      	beq.n	800bb84 <HAL_SPI_TransmitReceive+0x4a>
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bb70:	d106      	bne.n	800bb80 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d102      	bne.n	800bb80 <HAL_SPI_TransmitReceive+0x46>
 800bb7a:	7ffb      	ldrb	r3, [r7, #31]
 800bb7c:	2b04      	cmp	r3, #4
 800bb7e:	d001      	beq.n	800bb84 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800bb80:	2302      	movs	r3, #2
 800bb82:	e17f      	b.n	800be84 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d005      	beq.n	800bb96 <HAL_SPI_TransmitReceive+0x5c>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <HAL_SPI_TransmitReceive+0x5c>
 800bb90:	887b      	ldrh	r3, [r7, #2]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d101      	bne.n	800bb9a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	e174      	b.n	800be84 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d101      	bne.n	800bba8 <HAL_SPI_TransmitReceive+0x6e>
 800bba4:	2302      	movs	r3, #2
 800bba6:	e16d      	b.n	800be84 <HAL_SPI_TransmitReceive+0x34a>
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	2b04      	cmp	r3, #4
 800bbba:	d003      	beq.n	800bbc4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2205      	movs	r2, #5
 800bbc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	887a      	ldrh	r2, [r7, #2]
 800bbd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	887a      	ldrh	r2, [r7, #2]
 800bbda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	887a      	ldrh	r2, [r7, #2]
 800bbe6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	887a      	ldrh	r2, [r7, #2]
 800bbec:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc04:	2b40      	cmp	r3, #64	@ 0x40
 800bc06:	d007      	beq.n	800bc18 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bc16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc20:	d17e      	bne.n	800bd20 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d002      	beq.n	800bc30 <HAL_SPI_TransmitReceive+0xf6>
 800bc2a:	8afb      	ldrh	r3, [r7, #22]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d16c      	bne.n	800bd0a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc34:	881a      	ldrh	r2, [r3, #0]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc40:	1c9a      	adds	r2, r3, #2
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc54:	e059      	b.n	800bd0a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	f003 0302 	and.w	r3, r3, #2
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d11b      	bne.n	800bc9c <HAL_SPI_TransmitReceive+0x162>
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d016      	beq.n	800bc9c <HAL_SPI_TransmitReceive+0x162>
 800bc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d113      	bne.n	800bc9c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc78:	881a      	ldrh	r2, [r3, #0]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc84:	1c9a      	adds	r2, r3, #2
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	3b01      	subs	r3, #1
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	f003 0301 	and.w	r3, r3, #1
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d119      	bne.n	800bcde <HAL_SPI_TransmitReceive+0x1a4>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d014      	beq.n	800bcde <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68da      	ldr	r2, [r3, #12]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcbe:	b292      	uxth	r2, r2
 800bcc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcc6:	1c9a      	adds	r2, r3, #2
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bcde:	f7f9 fbf1 	bl	80054c4 <HAL_GetTick>
 800bce2:	4602      	mov	r2, r0
 800bce4:	6a3b      	ldr	r3, [r7, #32]
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d80d      	bhi.n	800bd0a <HAL_SPI_TransmitReceive+0x1d0>
 800bcee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf4:	d009      	beq.n	800bd0a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800bd06:	2303      	movs	r3, #3
 800bd08:	e0bc      	b.n	800be84 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1a0      	bne.n	800bc56 <HAL_SPI_TransmitReceive+0x11c>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d19b      	bne.n	800bc56 <HAL_SPI_TransmitReceive+0x11c>
 800bd1e:	e082      	b.n	800be26 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d002      	beq.n	800bd2e <HAL_SPI_TransmitReceive+0x1f4>
 800bd28:	8afb      	ldrh	r3, [r7, #22]
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d171      	bne.n	800be12 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	330c      	adds	r3, #12
 800bd38:	7812      	ldrb	r2, [r2, #0]
 800bd3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd40:	1c5a      	adds	r2, r3, #1
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bd54:	e05d      	b.n	800be12 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	f003 0302 	and.w	r3, r3, #2
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d11c      	bne.n	800bd9e <HAL_SPI_TransmitReceive+0x264>
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d017      	beq.n	800bd9e <HAL_SPI_TransmitReceive+0x264>
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d114      	bne.n	800bd9e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	330c      	adds	r3, #12
 800bd7e:	7812      	ldrb	r2, [r2, #0]
 800bd80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd86:	1c5a      	adds	r2, r3, #1
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	3b01      	subs	r3, #1
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	f003 0301 	and.w	r3, r3, #1
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d119      	bne.n	800bde0 <HAL_SPI_TransmitReceive+0x2a6>
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d014      	beq.n	800bde0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68da      	ldr	r2, [r3, #12]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdc0:	b2d2      	uxtb	r2, r2
 800bdc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdc8:	1c5a      	adds	r2, r3, #1
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bddc:	2301      	movs	r3, #1
 800bdde:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bde0:	f7f9 fb70 	bl	80054c4 <HAL_GetTick>
 800bde4:	4602      	mov	r2, r0
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d803      	bhi.n	800bdf8 <HAL_SPI_TransmitReceive+0x2be>
 800bdf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf6:	d102      	bne.n	800bdfe <HAL_SPI_TransmitReceive+0x2c4>
 800bdf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d109      	bne.n	800be12 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2201      	movs	r2, #1
 800be02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2200      	movs	r2, #0
 800be0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800be0e:	2303      	movs	r3, #3
 800be10:	e038      	b.n	800be84 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800be16:	b29b      	uxth	r3, r3
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d19c      	bne.n	800bd56 <HAL_SPI_TransmitReceive+0x21c>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be20:	b29b      	uxth	r3, r3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d197      	bne.n	800bd56 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800be26:	6a3a      	ldr	r2, [r7, #32]
 800be28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f000 f92a 	bl	800c084 <SPI_EndRxTxTransaction>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d008      	beq.n	800be48 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2220      	movs	r2, #32
 800be3a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2200      	movs	r2, #0
 800be40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	e01d      	b.n	800be84 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d10a      	bne.n	800be66 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be50:	2300      	movs	r3, #0
 800be52:	613b      	str	r3, [r7, #16]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	613b      	str	r3, [r7, #16]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	613b      	str	r3, [r7, #16]
 800be64:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2201      	movs	r2, #1
 800be6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e000      	b.n	800be84 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800be82:	2300      	movs	r3, #0
  }
}
 800be84:	4618      	mov	r0, r3
 800be86:	3728      	adds	r7, #40	@ 0x28
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800be9a:	b2db      	uxtb	r3, r3
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	370c      	adds	r7, #12
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr

0800bea8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b088      	sub	sp, #32
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	603b      	str	r3, [r7, #0]
 800beb4:	4613      	mov	r3, r2
 800beb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800beb8:	f7f9 fb04 	bl	80054c4 <HAL_GetTick>
 800bebc:	4602      	mov	r2, r0
 800bebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec0:	1a9b      	subs	r3, r3, r2
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	4413      	add	r3, r2
 800bec6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bec8:	f7f9 fafc 	bl	80054c4 <HAL_GetTick>
 800becc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bece:	4b39      	ldr	r3, [pc, #228]	@ (800bfb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	015b      	lsls	r3, r3, #5
 800bed4:	0d1b      	lsrs	r3, r3, #20
 800bed6:	69fa      	ldr	r2, [r7, #28]
 800bed8:	fb02 f303 	mul.w	r3, r2, r3
 800bedc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bede:	e054      	b.n	800bf8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee6:	d050      	beq.n	800bf8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bee8:	f7f9 faec 	bl	80054c4 <HAL_GetTick>
 800beec:	4602      	mov	r2, r0
 800beee:	69bb      	ldr	r3, [r7, #24]
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	69fa      	ldr	r2, [r7, #28]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d902      	bls.n	800befe <SPI_WaitFlagStateUntilTimeout+0x56>
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d13d      	bne.n	800bf7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	685a      	ldr	r2, [r3, #4]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800bf0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bf16:	d111      	bne.n	800bf3c <SPI_WaitFlagStateUntilTimeout+0x94>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf20:	d004      	beq.n	800bf2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf2a:	d107      	bne.n	800bf3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bf3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf44:	d10f      	bne.n	800bf66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bf54:	601a      	str	r2, [r3, #0]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bf64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800bf76:	2303      	movs	r3, #3
 800bf78:	e017      	b.n	800bfaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d101      	bne.n	800bf84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bf80:	2300      	movs	r3, #0
 800bf82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	3b01      	subs	r3, #1
 800bf88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	689a      	ldr	r2, [r3, #8]
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	4013      	ands	r3, r2
 800bf94:	68ba      	ldr	r2, [r7, #8]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	bf0c      	ite	eq
 800bf9a:	2301      	moveq	r3, #1
 800bf9c:	2300      	movne	r3, #0
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	79fb      	ldrb	r3, [r7, #7]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d19b      	bne.n	800bee0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3720      	adds	r7, #32
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	200001e0 	.word	0x200001e0

0800bfb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af02      	add	r7, sp, #8
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bfcc:	d111      	bne.n	800bff2 <SPI_EndRxTransaction+0x3a>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bfd6:	d004      	beq.n	800bfe2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bfe0:	d107      	bne.n	800bff2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bff0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bffa:	d12a      	bne.n	800c052 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c004:	d012      	beq.n	800c02c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	2200      	movs	r2, #0
 800c00e:	2180      	movs	r1, #128	@ 0x80
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	f7ff ff49 	bl	800bea8 <SPI_WaitFlagStateUntilTimeout>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d02d      	beq.n	800c078 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c020:	f043 0220 	orr.w	r2, r3, #32
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800c028:	2303      	movs	r3, #3
 800c02a:	e026      	b.n	800c07a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	2200      	movs	r2, #0
 800c034:	2101      	movs	r1, #1
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f7ff ff36 	bl	800bea8 <SPI_WaitFlagStateUntilTimeout>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d01a      	beq.n	800c078 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c046:	f043 0220 	orr.w	r2, r3, #32
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e013      	b.n	800c07a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	2200      	movs	r2, #0
 800c05a:	2101      	movs	r1, #1
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f7ff ff23 	bl	800bea8 <SPI_WaitFlagStateUntilTimeout>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d007      	beq.n	800c078 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c06c:	f043 0220 	orr.w	r2, r3, #32
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c074:	2303      	movs	r3, #3
 800c076:	e000      	b.n	800c07a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
	...

0800c084 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b088      	sub	sp, #32
 800c088:	af02      	add	r7, sp, #8
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2201      	movs	r2, #1
 800c098:	2102      	movs	r1, #2
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f7ff ff04 	bl	800bea8 <SPI_WaitFlagStateUntilTimeout>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d007      	beq.n	800c0b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0aa:	f043 0220 	orr.w	r2, r3, #32
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800c0b2:	2303      	movs	r3, #3
 800c0b4:	e032      	b.n	800c11c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c0b6:	4b1b      	ldr	r3, [pc, #108]	@ (800c124 <SPI_EndRxTxTransaction+0xa0>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c128 <SPI_EndRxTxTransaction+0xa4>)
 800c0bc:	fba2 2303 	umull	r2, r3, r2, r3
 800c0c0:	0d5b      	lsrs	r3, r3, #21
 800c0c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c0c6:	fb02 f303 	mul.w	r3, r2, r3
 800c0ca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c0d4:	d112      	bne.n	800c0fc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2180      	movs	r1, #128	@ 0x80
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f7ff fee1 	bl	800bea8 <SPI_WaitFlagStateUntilTimeout>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d016      	beq.n	800c11a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0f0:	f043 0220 	orr.w	r2, r3, #32
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	e00f      	b.n	800c11c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00a      	beq.n	800c118 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	3b01      	subs	r3, #1
 800c106:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c112:	2b80      	cmp	r3, #128	@ 0x80
 800c114:	d0f2      	beq.n	800c0fc <SPI_EndRxTxTransaction+0x78>
 800c116:	e000      	b.n	800c11a <SPI_EndRxTxTransaction+0x96>
        break;
 800c118:	bf00      	nop
  }

  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3718      	adds	r7, #24
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	200001e0 	.word	0x200001e0
 800c128:	165e9f81 	.word	0x165e9f81

0800c12c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d101      	bne.n	800c13e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	e041      	b.n	800c1c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c144:	b2db      	uxtb	r3, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	d106      	bne.n	800c158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7f6 ff66 	bl	8003024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2202      	movs	r2, #2
 800c15c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681a      	ldr	r2, [r3, #0]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	3304      	adds	r3, #4
 800c168:	4619      	mov	r1, r3
 800c16a:	4610      	mov	r0, r2
 800c16c:	f000 fa7e 	bl	800c66c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2201      	movs	r2, #1
 800c18c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c1c0:	2300      	movs	r3, #0
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b085      	sub	sp, #20
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d001      	beq.n	800c1e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e04e      	b.n	800c282 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2202      	movs	r2, #2
 800c1e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68da      	ldr	r2, [r3, #12]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f042 0201 	orr.w	r2, r2, #1
 800c1fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a23      	ldr	r2, [pc, #140]	@ (800c290 <HAL_TIM_Base_Start_IT+0xc4>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d022      	beq.n	800c24c <HAL_TIM_Base_Start_IT+0x80>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c20e:	d01d      	beq.n	800c24c <HAL_TIM_Base_Start_IT+0x80>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a1f      	ldr	r2, [pc, #124]	@ (800c294 <HAL_TIM_Base_Start_IT+0xc8>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d018      	beq.n	800c24c <HAL_TIM_Base_Start_IT+0x80>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a1e      	ldr	r2, [pc, #120]	@ (800c298 <HAL_TIM_Base_Start_IT+0xcc>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d013      	beq.n	800c24c <HAL_TIM_Base_Start_IT+0x80>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a1c      	ldr	r2, [pc, #112]	@ (800c29c <HAL_TIM_Base_Start_IT+0xd0>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d00e      	beq.n	800c24c <HAL_TIM_Base_Start_IT+0x80>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a1b      	ldr	r2, [pc, #108]	@ (800c2a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d009      	beq.n	800c24c <HAL_TIM_Base_Start_IT+0x80>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a19      	ldr	r2, [pc, #100]	@ (800c2a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d004      	beq.n	800c24c <HAL_TIM_Base_Start_IT+0x80>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a18      	ldr	r2, [pc, #96]	@ (800c2a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d111      	bne.n	800c270 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f003 0307 	and.w	r3, r3, #7
 800c256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2b06      	cmp	r3, #6
 800c25c:	d010      	beq.n	800c280 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f042 0201 	orr.w	r2, r2, #1
 800c26c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c26e:	e007      	b.n	800c280 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f042 0201 	orr.w	r2, r2, #1
 800c27e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	40010000 	.word	0x40010000
 800c294:	40000400 	.word	0x40000400
 800c298:	40000800 	.word	0x40000800
 800c29c:	40000c00 	.word	0x40000c00
 800c2a0:	40010400 	.word	0x40010400
 800c2a4:	40014000 	.word	0x40014000
 800c2a8:	40001800 	.word	0x40001800

0800c2ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	f003 0302 	and.w	r3, r3, #2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d020      	beq.n	800c310 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f003 0302 	and.w	r3, r3, #2
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d01b      	beq.n	800c310 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f06f 0202 	mvn.w	r2, #2
 800c2e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	699b      	ldr	r3, [r3, #24]
 800c2ee:	f003 0303 	and.w	r3, r3, #3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d003      	beq.n	800c2fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f999 	bl	800c62e <HAL_TIM_IC_CaptureCallback>
 800c2fc:	e005      	b.n	800c30a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f98b 	bl	800c61a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 f99c 	bl	800c642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	f003 0304 	and.w	r3, r3, #4
 800c316:	2b00      	cmp	r3, #0
 800c318:	d020      	beq.n	800c35c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f003 0304 	and.w	r3, r3, #4
 800c320:	2b00      	cmp	r3, #0
 800c322:	d01b      	beq.n	800c35c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f06f 0204 	mvn.w	r2, #4
 800c32c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2202      	movs	r2, #2
 800c332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	699b      	ldr	r3, [r3, #24]
 800c33a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f973 	bl	800c62e <HAL_TIM_IC_CaptureCallback>
 800c348:	e005      	b.n	800c356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f965 	bl	800c61a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 f976 	bl	800c642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	f003 0308 	and.w	r3, r3, #8
 800c362:	2b00      	cmp	r3, #0
 800c364:	d020      	beq.n	800c3a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f003 0308 	and.w	r3, r3, #8
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d01b      	beq.n	800c3a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f06f 0208 	mvn.w	r2, #8
 800c378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2204      	movs	r2, #4
 800c37e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	69db      	ldr	r3, [r3, #28]
 800c386:	f003 0303 	and.w	r3, r3, #3
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d003      	beq.n	800c396 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 f94d 	bl	800c62e <HAL_TIM_IC_CaptureCallback>
 800c394:	e005      	b.n	800c3a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f000 f93f 	bl	800c61a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 f950 	bl	800c642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	f003 0310 	and.w	r3, r3, #16
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d020      	beq.n	800c3f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f003 0310 	and.w	r3, r3, #16
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d01b      	beq.n	800c3f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f06f 0210 	mvn.w	r2, #16
 800c3c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2208      	movs	r2, #8
 800c3ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	69db      	ldr	r3, [r3, #28]
 800c3d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 f927 	bl	800c62e <HAL_TIM_IC_CaptureCallback>
 800c3e0:	e005      	b.n	800c3ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f919 	bl	800c61a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 f92a 	bl	800c642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	f003 0301 	and.w	r3, r3, #1
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00c      	beq.n	800c418 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f003 0301 	and.w	r3, r3, #1
 800c404:	2b00      	cmp	r3, #0
 800c406:	d007      	beq.n	800c418 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f06f 0201 	mvn.w	r2, #1
 800c410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7f6 fb38 	bl	8002a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00c      	beq.n	800c43c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d007      	beq.n	800c43c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fae4 	bl	800ca04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00c      	beq.n	800c460 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d007      	beq.n	800c460 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 f8fb 	bl	800c656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	f003 0320 	and.w	r3, r3, #32
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00c      	beq.n	800c484 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f003 0320 	and.w	r3, r3, #32
 800c470:	2b00      	cmp	r3, #0
 800c472:	d007      	beq.n	800c484 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f06f 0220 	mvn.w	r2, #32
 800c47c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 fab6 	bl	800c9f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c484:	bf00      	nop
 800c486:	3710      	adds	r7, #16
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c496:	2300      	movs	r3, #0
 800c498:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d101      	bne.n	800c4a8 <HAL_TIM_ConfigClockSource+0x1c>
 800c4a4:	2302      	movs	r3, #2
 800c4a6:	e0b4      	b.n	800c612 <HAL_TIM_ConfigClockSource+0x186>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	689b      	ldr	r3, [r3, #8]
 800c4be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c4c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c4ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68ba      	ldr	r2, [r7, #8]
 800c4d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4e0:	d03e      	beq.n	800c560 <HAL_TIM_ConfigClockSource+0xd4>
 800c4e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4e6:	f200 8087 	bhi.w	800c5f8 <HAL_TIM_ConfigClockSource+0x16c>
 800c4ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4ee:	f000 8086 	beq.w	800c5fe <HAL_TIM_ConfigClockSource+0x172>
 800c4f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4f6:	d87f      	bhi.n	800c5f8 <HAL_TIM_ConfigClockSource+0x16c>
 800c4f8:	2b70      	cmp	r3, #112	@ 0x70
 800c4fa:	d01a      	beq.n	800c532 <HAL_TIM_ConfigClockSource+0xa6>
 800c4fc:	2b70      	cmp	r3, #112	@ 0x70
 800c4fe:	d87b      	bhi.n	800c5f8 <HAL_TIM_ConfigClockSource+0x16c>
 800c500:	2b60      	cmp	r3, #96	@ 0x60
 800c502:	d050      	beq.n	800c5a6 <HAL_TIM_ConfigClockSource+0x11a>
 800c504:	2b60      	cmp	r3, #96	@ 0x60
 800c506:	d877      	bhi.n	800c5f8 <HAL_TIM_ConfigClockSource+0x16c>
 800c508:	2b50      	cmp	r3, #80	@ 0x50
 800c50a:	d03c      	beq.n	800c586 <HAL_TIM_ConfigClockSource+0xfa>
 800c50c:	2b50      	cmp	r3, #80	@ 0x50
 800c50e:	d873      	bhi.n	800c5f8 <HAL_TIM_ConfigClockSource+0x16c>
 800c510:	2b40      	cmp	r3, #64	@ 0x40
 800c512:	d058      	beq.n	800c5c6 <HAL_TIM_ConfigClockSource+0x13a>
 800c514:	2b40      	cmp	r3, #64	@ 0x40
 800c516:	d86f      	bhi.n	800c5f8 <HAL_TIM_ConfigClockSource+0x16c>
 800c518:	2b30      	cmp	r3, #48	@ 0x30
 800c51a:	d064      	beq.n	800c5e6 <HAL_TIM_ConfigClockSource+0x15a>
 800c51c:	2b30      	cmp	r3, #48	@ 0x30
 800c51e:	d86b      	bhi.n	800c5f8 <HAL_TIM_ConfigClockSource+0x16c>
 800c520:	2b20      	cmp	r3, #32
 800c522:	d060      	beq.n	800c5e6 <HAL_TIM_ConfigClockSource+0x15a>
 800c524:	2b20      	cmp	r3, #32
 800c526:	d867      	bhi.n	800c5f8 <HAL_TIM_ConfigClockSource+0x16c>
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d05c      	beq.n	800c5e6 <HAL_TIM_ConfigClockSource+0x15a>
 800c52c:	2b10      	cmp	r3, #16
 800c52e:	d05a      	beq.n	800c5e6 <HAL_TIM_ConfigClockSource+0x15a>
 800c530:	e062      	b.n	800c5f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c542:	f000 f9b9 	bl	800c8b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c554:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	609a      	str	r2, [r3, #8]
      break;
 800c55e:	e04f      	b.n	800c600 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c570:	f000 f9a2 	bl	800c8b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	689a      	ldr	r2, [r3, #8]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c582:	609a      	str	r2, [r3, #8]
      break;
 800c584:	e03c      	b.n	800c600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c592:	461a      	mov	r2, r3
 800c594:	f000 f916 	bl	800c7c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2150      	movs	r1, #80	@ 0x50
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f000 f96f 	bl	800c882 <TIM_ITRx_SetConfig>
      break;
 800c5a4:	e02c      	b.n	800c600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	f000 f935 	bl	800c822 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2160      	movs	r1, #96	@ 0x60
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 f95f 	bl	800c882 <TIM_ITRx_SetConfig>
      break;
 800c5c4:	e01c      	b.n	800c600 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	f000 f8f6 	bl	800c7c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	2140      	movs	r1, #64	@ 0x40
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 f94f 	bl	800c882 <TIM_ITRx_SetConfig>
      break;
 800c5e4:	e00c      	b.n	800c600 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	4610      	mov	r0, r2
 800c5f2:	f000 f946 	bl	800c882 <TIM_ITRx_SetConfig>
      break;
 800c5f6:	e003      	b.n	800c600 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c5fc:	e000      	b.n	800c600 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c5fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c610:	7bfb      	ldrb	r3, [r7, #15]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c61a:	b480      	push	{r7}
 800c61c:	b083      	sub	sp, #12
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c622:	bf00      	nop
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr

0800c62e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c62e:	b480      	push	{r7}
 800c630:	b083      	sub	sp, #12
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c636:	bf00      	nop
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c642:	b480      	push	{r7}
 800c644:	b083      	sub	sp, #12
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c64a:	bf00      	nop
 800c64c:	370c      	adds	r7, #12
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c656:	b480      	push	{r7}
 800c658:	b083      	sub	sp, #12
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c65e:	bf00      	nop
 800c660:	370c      	adds	r7, #12
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
	...

0800c66c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a46      	ldr	r2, [pc, #280]	@ (800c798 <TIM_Base_SetConfig+0x12c>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d013      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c68a:	d00f      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a43      	ldr	r2, [pc, #268]	@ (800c79c <TIM_Base_SetConfig+0x130>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d00b      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4a42      	ldr	r2, [pc, #264]	@ (800c7a0 <TIM_Base_SetConfig+0x134>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d007      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a41      	ldr	r2, [pc, #260]	@ (800c7a4 <TIM_Base_SetConfig+0x138>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d003      	beq.n	800c6ac <TIM_Base_SetConfig+0x40>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a40      	ldr	r2, [pc, #256]	@ (800c7a8 <TIM_Base_SetConfig+0x13c>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d108      	bne.n	800c6be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a35      	ldr	r2, [pc, #212]	@ (800c798 <TIM_Base_SetConfig+0x12c>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d02b      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6cc:	d027      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a32      	ldr	r2, [pc, #200]	@ (800c79c <TIM_Base_SetConfig+0x130>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d023      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a31      	ldr	r2, [pc, #196]	@ (800c7a0 <TIM_Base_SetConfig+0x134>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d01f      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a30      	ldr	r2, [pc, #192]	@ (800c7a4 <TIM_Base_SetConfig+0x138>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d01b      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a2f      	ldr	r2, [pc, #188]	@ (800c7a8 <TIM_Base_SetConfig+0x13c>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d017      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a2e      	ldr	r2, [pc, #184]	@ (800c7ac <TIM_Base_SetConfig+0x140>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d013      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a2d      	ldr	r2, [pc, #180]	@ (800c7b0 <TIM_Base_SetConfig+0x144>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d00f      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a2c      	ldr	r2, [pc, #176]	@ (800c7b4 <TIM_Base_SetConfig+0x148>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d00b      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a2b      	ldr	r2, [pc, #172]	@ (800c7b8 <TIM_Base_SetConfig+0x14c>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d007      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a2a      	ldr	r2, [pc, #168]	@ (800c7bc <TIM_Base_SetConfig+0x150>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d003      	beq.n	800c71e <TIM_Base_SetConfig+0xb2>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a29      	ldr	r2, [pc, #164]	@ (800c7c0 <TIM_Base_SetConfig+0x154>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d108      	bne.n	800c730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	695b      	ldr	r3, [r3, #20]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	689a      	ldr	r2, [r3, #8]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4a10      	ldr	r2, [pc, #64]	@ (800c798 <TIM_Base_SetConfig+0x12c>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d003      	beq.n	800c764 <TIM_Base_SetConfig+0xf8>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4a12      	ldr	r2, [pc, #72]	@ (800c7a8 <TIM_Base_SetConfig+0x13c>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d103      	bne.n	800c76c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	691a      	ldr	r2, [r3, #16]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	691b      	ldr	r3, [r3, #16]
 800c776:	f003 0301 	and.w	r3, r3, #1
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d105      	bne.n	800c78a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	f023 0201 	bic.w	r2, r3, #1
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	611a      	str	r2, [r3, #16]
  }
}
 800c78a:	bf00      	nop
 800c78c:	3714      	adds	r7, #20
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	40010000 	.word	0x40010000
 800c79c:	40000400 	.word	0x40000400
 800c7a0:	40000800 	.word	0x40000800
 800c7a4:	40000c00 	.word	0x40000c00
 800c7a8:	40010400 	.word	0x40010400
 800c7ac:	40014000 	.word	0x40014000
 800c7b0:	40014400 	.word	0x40014400
 800c7b4:	40014800 	.word	0x40014800
 800c7b8:	40001800 	.word	0x40001800
 800c7bc:	40001c00 	.word	0x40001c00
 800c7c0:	40002000 	.word	0x40002000

0800c7c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b087      	sub	sp, #28
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6a1b      	ldr	r3, [r3, #32]
 800c7d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	f023 0201 	bic.w	r2, r3, #1
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	699b      	ldr	r3, [r3, #24]
 800c7e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c7ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	011b      	lsls	r3, r3, #4
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f023 030a 	bic.w	r3, r3, #10
 800c800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c802:	697a      	ldr	r2, [r7, #20]
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	4313      	orrs	r3, r2
 800c808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	697a      	ldr	r2, [r7, #20]
 800c814:	621a      	str	r2, [r3, #32]
}
 800c816:	bf00      	nop
 800c818:	371c      	adds	r7, #28
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c822:	b480      	push	{r7}
 800c824:	b087      	sub	sp, #28
 800c826:	af00      	add	r7, sp, #0
 800c828:	60f8      	str	r0, [r7, #12]
 800c82a:	60b9      	str	r1, [r7, #8]
 800c82c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6a1b      	ldr	r3, [r3, #32]
 800c838:	f023 0210 	bic.w	r2, r3, #16
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	699b      	ldr	r3, [r3, #24]
 800c844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c84c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	031b      	lsls	r3, r3, #12
 800c852:	693a      	ldr	r2, [r7, #16]
 800c854:	4313      	orrs	r3, r2
 800c856:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c85e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	011b      	lsls	r3, r3, #4
 800c864:	697a      	ldr	r2, [r7, #20]
 800c866:	4313      	orrs	r3, r2
 800c868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	621a      	str	r2, [r3, #32]
}
 800c876:	bf00      	nop
 800c878:	371c      	adds	r7, #28
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c882:	b480      	push	{r7}
 800c884:	b085      	sub	sp, #20
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
 800c88a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c898:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	f043 0307 	orr.w	r3, r3, #7
 800c8a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	609a      	str	r2, [r3, #8]
}
 800c8ac:	bf00      	nop
 800c8ae:	3714      	adds	r7, #20
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
 800c8c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c8d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	021a      	lsls	r2, r3, #8
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	431a      	orrs	r2, r3
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	697a      	ldr	r2, [r7, #20]
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	697a      	ldr	r2, [r7, #20]
 800c8ea:	609a      	str	r2, [r3, #8]
}
 800c8ec:	bf00      	nop
 800c8ee:	371c      	adds	r7, #28
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d101      	bne.n	800c910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c90c:	2302      	movs	r3, #2
 800c90e:	e05a      	b.n	800c9c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2202      	movs	r2, #2
 800c91c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	689b      	ldr	r3, [r3, #8]
 800c92e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	4313      	orrs	r3, r2
 800c940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68fa      	ldr	r2, [r7, #12]
 800c948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a21      	ldr	r2, [pc, #132]	@ (800c9d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d022      	beq.n	800c99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c95c:	d01d      	beq.n	800c99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a1d      	ldr	r2, [pc, #116]	@ (800c9d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d018      	beq.n	800c99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a1b      	ldr	r2, [pc, #108]	@ (800c9dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d013      	beq.n	800c99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a1a      	ldr	r2, [pc, #104]	@ (800c9e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d00e      	beq.n	800c99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a18      	ldr	r2, [pc, #96]	@ (800c9e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d009      	beq.n	800c99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a17      	ldr	r2, [pc, #92]	@ (800c9e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d004      	beq.n	800c99a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a15      	ldr	r2, [pc, #84]	@ (800c9ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d10c      	bne.n	800c9b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3714      	adds	r7, #20
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	40010000 	.word	0x40010000
 800c9d8:	40000400 	.word	0x40000400
 800c9dc:	40000800 	.word	0x40000800
 800c9e0:	40000c00 	.word	0x40000c00
 800c9e4:	40010400 	.word	0x40010400
 800c9e8:	40014000 	.word	0x40014000
 800c9ec:	40001800 	.word	0x40001800

0800c9f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c9f8:	bf00      	nop
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca0c:	bf00      	nop
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d101      	bne.n	800ca2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca26:	2301      	movs	r3, #1
 800ca28:	e042      	b.n	800cab0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f7f6 fb36 	bl	80030b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2224      	movs	r2, #36	@ 0x24
 800ca48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	68da      	ldr	r2, [r3, #12]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ca5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 f973 	bl	800cd48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	691a      	ldr	r2, [r3, #16]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ca70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	695a      	ldr	r2, [r3, #20]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ca80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	68da      	ldr	r2, [r3, #12]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ca90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2220      	movs	r2, #32
 800ca9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2220      	movs	r2, #32
 800caa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08a      	sub	sp, #40	@ 0x28
 800cabc:	af02      	add	r7, sp, #8
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	603b      	str	r3, [r7, #0]
 800cac4:	4613      	mov	r3, r2
 800cac6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cac8:	2300      	movs	r3, #0
 800caca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	2b20      	cmp	r3, #32
 800cad6:	d175      	bne.n	800cbc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d002      	beq.n	800cae4 <HAL_UART_Transmit+0x2c>
 800cade:	88fb      	ldrh	r3, [r7, #6]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d101      	bne.n	800cae8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	e06e      	b.n	800cbc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2221      	movs	r2, #33	@ 0x21
 800caf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800caf6:	f7f8 fce5 	bl	80054c4 <HAL_GetTick>
 800cafa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	88fa      	ldrh	r2, [r7, #6]
 800cb00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	88fa      	ldrh	r2, [r7, #6]
 800cb06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb10:	d108      	bne.n	800cb24 <HAL_UART_Transmit+0x6c>
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d104      	bne.n	800cb24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	61bb      	str	r3, [r7, #24]
 800cb22:	e003      	b.n	800cb2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cb2c:	e02e      	b.n	800cb8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	2200      	movs	r2, #0
 800cb36:	2180      	movs	r1, #128	@ 0x80
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f000 f848 	bl	800cbce <UART_WaitOnFlagUntilTimeout>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d005      	beq.n	800cb50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2220      	movs	r2, #32
 800cb48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	e03a      	b.n	800cbc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10b      	bne.n	800cb6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	881b      	ldrh	r3, [r3, #0]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cb64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cb66:	69bb      	ldr	r3, [r7, #24]
 800cb68:	3302      	adds	r3, #2
 800cb6a:	61bb      	str	r3, [r7, #24]
 800cb6c:	e007      	b.n	800cb7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb6e:	69fb      	ldr	r3, [r7, #28]
 800cb70:	781a      	ldrb	r2, [r3, #0]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	3b01      	subs	r3, #1
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1cb      	bne.n	800cb2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	9300      	str	r3, [sp, #0]
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2140      	movs	r1, #64	@ 0x40
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f000 f814 	bl	800cbce <UART_WaitOnFlagUntilTimeout>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d005      	beq.n	800cbb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2220      	movs	r2, #32
 800cbb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800cbb4:	2303      	movs	r3, #3
 800cbb6:	e006      	b.n	800cbc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2220      	movs	r2, #32
 800cbbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	e000      	b.n	800cbc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800cbc4:	2302      	movs	r3, #2
  }
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3720      	adds	r7, #32
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b086      	sub	sp, #24
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	60f8      	str	r0, [r7, #12]
 800cbd6:	60b9      	str	r1, [r7, #8]
 800cbd8:	603b      	str	r3, [r7, #0]
 800cbda:	4613      	mov	r3, r2
 800cbdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbde:	e03b      	b.n	800cc58 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbe0:	6a3b      	ldr	r3, [r7, #32]
 800cbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe6:	d037      	beq.n	800cc58 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbe8:	f7f8 fc6c 	bl	80054c4 <HAL_GetTick>
 800cbec:	4602      	mov	r2, r0
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	6a3a      	ldr	r2, [r7, #32]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d302      	bcc.n	800cbfe <UART_WaitOnFlagUntilTimeout+0x30>
 800cbf8:	6a3b      	ldr	r3, [r7, #32]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d101      	bne.n	800cc02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cbfe:	2303      	movs	r3, #3
 800cc00:	e03a      	b.n	800cc78 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	f003 0304 	and.w	r3, r3, #4
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d023      	beq.n	800cc58 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	2b80      	cmp	r3, #128	@ 0x80
 800cc14:	d020      	beq.n	800cc58 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	2b40      	cmp	r3, #64	@ 0x40
 800cc1a:	d01d      	beq.n	800cc58 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f003 0308 	and.w	r3, r3, #8
 800cc26:	2b08      	cmp	r3, #8
 800cc28:	d116      	bne.n	800cc58 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	617b      	str	r3, [r7, #20]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	617b      	str	r3, [r7, #20]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	617b      	str	r3, [r7, #20]
 800cc3e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	f000 f81d 	bl	800cc80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2208      	movs	r2, #8
 800cc4a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e00f      	b.n	800cc78 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	4013      	ands	r3, r2
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	bf0c      	ite	eq
 800cc68:	2301      	moveq	r3, #1
 800cc6a:	2300      	movne	r3, #0
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	461a      	mov	r2, r3
 800cc70:	79fb      	ldrb	r3, [r7, #7]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d0b4      	beq.n	800cbe0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3718      	adds	r7, #24
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b095      	sub	sp, #84	@ 0x54
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	330c      	adds	r3, #12
 800cc8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc92:	e853 3f00 	ldrex	r3, [r3]
 800cc96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	330c      	adds	r3, #12
 800cca6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cca8:	643a      	str	r2, [r7, #64]	@ 0x40
 800ccaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ccae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ccb0:	e841 2300 	strex	r3, r2, [r1]
 800ccb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ccb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d1e5      	bne.n	800cc88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	3314      	adds	r3, #20
 800ccc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc4:	6a3b      	ldr	r3, [r7, #32]
 800ccc6:	e853 3f00 	ldrex	r3, [r3]
 800ccca:	61fb      	str	r3, [r7, #28]
   return(result);
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	f023 0301 	bic.w	r3, r3, #1
 800ccd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	3314      	adds	r3, #20
 800ccda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ccde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cce4:	e841 2300 	strex	r3, r2, [r1]
 800cce8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ccea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d1e5      	bne.n	800ccbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d119      	bne.n	800cd2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	330c      	adds	r3, #12
 800ccfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	e853 3f00 	ldrex	r3, [r3]
 800cd06:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	f023 0310 	bic.w	r3, r3, #16
 800cd0e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	330c      	adds	r3, #12
 800cd16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd18:	61ba      	str	r2, [r7, #24]
 800cd1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1c:	6979      	ldr	r1, [r7, #20]
 800cd1e:	69ba      	ldr	r2, [r7, #24]
 800cd20:	e841 2300 	strex	r3, r2, [r1]
 800cd24:	613b      	str	r3, [r7, #16]
   return(result);
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1e5      	bne.n	800ccf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2220      	movs	r2, #32
 800cd30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cd3a:	bf00      	nop
 800cd3c:	3754      	adds	r7, #84	@ 0x54
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr
	...

0800cd48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd4c:	b0c0      	sub	sp, #256	@ 0x100
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	691b      	ldr	r3, [r3, #16]
 800cd5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cd60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd64:	68d9      	ldr	r1, [r3, #12]
 800cd66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	ea40 0301 	orr.w	r3, r0, r1
 800cd70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cd72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd76:	689a      	ldr	r2, [r3, #8]
 800cd78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd7c:	691b      	ldr	r3, [r3, #16]
 800cd7e:	431a      	orrs	r2, r3
 800cd80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd84:	695b      	ldr	r3, [r3, #20]
 800cd86:	431a      	orrs	r2, r3
 800cd88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd8c:	69db      	ldr	r3, [r3, #28]
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cd94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cda0:	f021 010c 	bic.w	r1, r1, #12
 800cda4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cdae:	430b      	orrs	r3, r1
 800cdb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cdb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	695b      	ldr	r3, [r3, #20]
 800cdba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cdbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cdc2:	6999      	ldr	r1, [r3, #24]
 800cdc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	ea40 0301 	orr.w	r3, r0, r1
 800cdce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cdd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	4b8f      	ldr	r3, [pc, #572]	@ (800d014 <UART_SetConfig+0x2cc>)
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d005      	beq.n	800cde8 <UART_SetConfig+0xa0>
 800cddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	4b8d      	ldr	r3, [pc, #564]	@ (800d018 <UART_SetConfig+0x2d0>)
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d104      	bne.n	800cdf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cde8:	f7fe f902 	bl	800aff0 <HAL_RCC_GetPCLK2Freq>
 800cdec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cdf0:	e003      	b.n	800cdfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cdf2:	f7fe f8e9 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 800cdf6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cdfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cdfe:	69db      	ldr	r3, [r3, #28]
 800ce00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce04:	f040 810c 	bne.w	800d020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ce08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ce12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ce16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ce1a:	4622      	mov	r2, r4
 800ce1c:	462b      	mov	r3, r5
 800ce1e:	1891      	adds	r1, r2, r2
 800ce20:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ce22:	415b      	adcs	r3, r3
 800ce24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ce2a:	4621      	mov	r1, r4
 800ce2c:	eb12 0801 	adds.w	r8, r2, r1
 800ce30:	4629      	mov	r1, r5
 800ce32:	eb43 0901 	adc.w	r9, r3, r1
 800ce36:	f04f 0200 	mov.w	r2, #0
 800ce3a:	f04f 0300 	mov.w	r3, #0
 800ce3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ce42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ce46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ce4a:	4690      	mov	r8, r2
 800ce4c:	4699      	mov	r9, r3
 800ce4e:	4623      	mov	r3, r4
 800ce50:	eb18 0303 	adds.w	r3, r8, r3
 800ce54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ce58:	462b      	mov	r3, r5
 800ce5a:	eb49 0303 	adc.w	r3, r9, r3
 800ce5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ce62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ce6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ce72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ce76:	460b      	mov	r3, r1
 800ce78:	18db      	adds	r3, r3, r3
 800ce7a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	eb42 0303 	adc.w	r3, r2, r3
 800ce82:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ce88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ce8c:	f7f3 fa08 	bl	80002a0 <__aeabi_uldivmod>
 800ce90:	4602      	mov	r2, r0
 800ce92:	460b      	mov	r3, r1
 800ce94:	4b61      	ldr	r3, [pc, #388]	@ (800d01c <UART_SetConfig+0x2d4>)
 800ce96:	fba3 2302 	umull	r2, r3, r3, r2
 800ce9a:	095b      	lsrs	r3, r3, #5
 800ce9c:	011c      	lsls	r4, r3, #4
 800ce9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cea2:	2200      	movs	r2, #0
 800cea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cea8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ceac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ceb0:	4642      	mov	r2, r8
 800ceb2:	464b      	mov	r3, r9
 800ceb4:	1891      	adds	r1, r2, r2
 800ceb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ceb8:	415b      	adcs	r3, r3
 800ceba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800cec0:	4641      	mov	r1, r8
 800cec2:	eb12 0a01 	adds.w	sl, r2, r1
 800cec6:	4649      	mov	r1, r9
 800cec8:	eb43 0b01 	adc.w	fp, r3, r1
 800cecc:	f04f 0200 	mov.w	r2, #0
 800ced0:	f04f 0300 	mov.w	r3, #0
 800ced4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ced8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cedc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cee0:	4692      	mov	sl, r2
 800cee2:	469b      	mov	fp, r3
 800cee4:	4643      	mov	r3, r8
 800cee6:	eb1a 0303 	adds.w	r3, sl, r3
 800ceea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ceee:	464b      	mov	r3, r9
 800cef0:	eb4b 0303 	adc.w	r3, fp, r3
 800cef4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cf04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800cf08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	18db      	adds	r3, r3, r3
 800cf10:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf12:	4613      	mov	r3, r2
 800cf14:	eb42 0303 	adc.w	r3, r2, r3
 800cf18:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800cf1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800cf22:	f7f3 f9bd 	bl	80002a0 <__aeabi_uldivmod>
 800cf26:	4602      	mov	r2, r0
 800cf28:	460b      	mov	r3, r1
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	4b3b      	ldr	r3, [pc, #236]	@ (800d01c <UART_SetConfig+0x2d4>)
 800cf2e:	fba3 2301 	umull	r2, r3, r3, r1
 800cf32:	095b      	lsrs	r3, r3, #5
 800cf34:	2264      	movs	r2, #100	@ 0x64
 800cf36:	fb02 f303 	mul.w	r3, r2, r3
 800cf3a:	1acb      	subs	r3, r1, r3
 800cf3c:	00db      	lsls	r3, r3, #3
 800cf3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800cf42:	4b36      	ldr	r3, [pc, #216]	@ (800d01c <UART_SetConfig+0x2d4>)
 800cf44:	fba3 2302 	umull	r2, r3, r3, r2
 800cf48:	095b      	lsrs	r3, r3, #5
 800cf4a:	005b      	lsls	r3, r3, #1
 800cf4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800cf50:	441c      	add	r4, r3
 800cf52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf56:	2200      	movs	r2, #0
 800cf58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cf5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800cf60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800cf64:	4642      	mov	r2, r8
 800cf66:	464b      	mov	r3, r9
 800cf68:	1891      	adds	r1, r2, r2
 800cf6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800cf6c:	415b      	adcs	r3, r3
 800cf6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cf74:	4641      	mov	r1, r8
 800cf76:	1851      	adds	r1, r2, r1
 800cf78:	6339      	str	r1, [r7, #48]	@ 0x30
 800cf7a:	4649      	mov	r1, r9
 800cf7c:	414b      	adcs	r3, r1
 800cf7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf80:	f04f 0200 	mov.w	r2, #0
 800cf84:	f04f 0300 	mov.w	r3, #0
 800cf88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800cf8c:	4659      	mov	r1, fp
 800cf8e:	00cb      	lsls	r3, r1, #3
 800cf90:	4651      	mov	r1, sl
 800cf92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cf96:	4651      	mov	r1, sl
 800cf98:	00ca      	lsls	r2, r1, #3
 800cf9a:	4610      	mov	r0, r2
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	4642      	mov	r2, r8
 800cfa2:	189b      	adds	r3, r3, r2
 800cfa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cfa8:	464b      	mov	r3, r9
 800cfaa:	460a      	mov	r2, r1
 800cfac:	eb42 0303 	adc.w	r3, r2, r3
 800cfb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cfb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cfc0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cfc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cfc8:	460b      	mov	r3, r1
 800cfca:	18db      	adds	r3, r3, r3
 800cfcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cfce:	4613      	mov	r3, r2
 800cfd0:	eb42 0303 	adc.w	r3, r2, r3
 800cfd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cfd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cfda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800cfde:	f7f3 f95f 	bl	80002a0 <__aeabi_uldivmod>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	4b0d      	ldr	r3, [pc, #52]	@ (800d01c <UART_SetConfig+0x2d4>)
 800cfe8:	fba3 1302 	umull	r1, r3, r3, r2
 800cfec:	095b      	lsrs	r3, r3, #5
 800cfee:	2164      	movs	r1, #100	@ 0x64
 800cff0:	fb01 f303 	mul.w	r3, r1, r3
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	00db      	lsls	r3, r3, #3
 800cff8:	3332      	adds	r3, #50	@ 0x32
 800cffa:	4a08      	ldr	r2, [pc, #32]	@ (800d01c <UART_SetConfig+0x2d4>)
 800cffc:	fba2 2303 	umull	r2, r3, r2, r3
 800d000:	095b      	lsrs	r3, r3, #5
 800d002:	f003 0207 	and.w	r2, r3, #7
 800d006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4422      	add	r2, r4
 800d00e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d010:	e106      	b.n	800d220 <UART_SetConfig+0x4d8>
 800d012:	bf00      	nop
 800d014:	40011000 	.word	0x40011000
 800d018:	40011400 	.word	0x40011400
 800d01c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d024:	2200      	movs	r2, #0
 800d026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d02a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d02e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d032:	4642      	mov	r2, r8
 800d034:	464b      	mov	r3, r9
 800d036:	1891      	adds	r1, r2, r2
 800d038:	6239      	str	r1, [r7, #32]
 800d03a:	415b      	adcs	r3, r3
 800d03c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d03e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d042:	4641      	mov	r1, r8
 800d044:	1854      	adds	r4, r2, r1
 800d046:	4649      	mov	r1, r9
 800d048:	eb43 0501 	adc.w	r5, r3, r1
 800d04c:	f04f 0200 	mov.w	r2, #0
 800d050:	f04f 0300 	mov.w	r3, #0
 800d054:	00eb      	lsls	r3, r5, #3
 800d056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d05a:	00e2      	lsls	r2, r4, #3
 800d05c:	4614      	mov	r4, r2
 800d05e:	461d      	mov	r5, r3
 800d060:	4643      	mov	r3, r8
 800d062:	18e3      	adds	r3, r4, r3
 800d064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d068:	464b      	mov	r3, r9
 800d06a:	eb45 0303 	adc.w	r3, r5, r3
 800d06e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d07e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d082:	f04f 0200 	mov.w	r2, #0
 800d086:	f04f 0300 	mov.w	r3, #0
 800d08a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d08e:	4629      	mov	r1, r5
 800d090:	008b      	lsls	r3, r1, #2
 800d092:	4621      	mov	r1, r4
 800d094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d098:	4621      	mov	r1, r4
 800d09a:	008a      	lsls	r2, r1, #2
 800d09c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d0a0:	f7f3 f8fe 	bl	80002a0 <__aeabi_uldivmod>
 800d0a4:	4602      	mov	r2, r0
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	4b60      	ldr	r3, [pc, #384]	@ (800d22c <UART_SetConfig+0x4e4>)
 800d0aa:	fba3 2302 	umull	r2, r3, r3, r2
 800d0ae:	095b      	lsrs	r3, r3, #5
 800d0b0:	011c      	lsls	r4, r3, #4
 800d0b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d0bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d0c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d0c4:	4642      	mov	r2, r8
 800d0c6:	464b      	mov	r3, r9
 800d0c8:	1891      	adds	r1, r2, r2
 800d0ca:	61b9      	str	r1, [r7, #24]
 800d0cc:	415b      	adcs	r3, r3
 800d0ce:	61fb      	str	r3, [r7, #28]
 800d0d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d0d4:	4641      	mov	r1, r8
 800d0d6:	1851      	adds	r1, r2, r1
 800d0d8:	6139      	str	r1, [r7, #16]
 800d0da:	4649      	mov	r1, r9
 800d0dc:	414b      	adcs	r3, r1
 800d0de:	617b      	str	r3, [r7, #20]
 800d0e0:	f04f 0200 	mov.w	r2, #0
 800d0e4:	f04f 0300 	mov.w	r3, #0
 800d0e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d0ec:	4659      	mov	r1, fp
 800d0ee:	00cb      	lsls	r3, r1, #3
 800d0f0:	4651      	mov	r1, sl
 800d0f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d0f6:	4651      	mov	r1, sl
 800d0f8:	00ca      	lsls	r2, r1, #3
 800d0fa:	4610      	mov	r0, r2
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	4603      	mov	r3, r0
 800d100:	4642      	mov	r2, r8
 800d102:	189b      	adds	r3, r3, r2
 800d104:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d108:	464b      	mov	r3, r9
 800d10a:	460a      	mov	r2, r1
 800d10c:	eb42 0303 	adc.w	r3, r2, r3
 800d110:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d11e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d120:	f04f 0200 	mov.w	r2, #0
 800d124:	f04f 0300 	mov.w	r3, #0
 800d128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d12c:	4649      	mov	r1, r9
 800d12e:	008b      	lsls	r3, r1, #2
 800d130:	4641      	mov	r1, r8
 800d132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d136:	4641      	mov	r1, r8
 800d138:	008a      	lsls	r2, r1, #2
 800d13a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d13e:	f7f3 f8af 	bl	80002a0 <__aeabi_uldivmod>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
 800d146:	4611      	mov	r1, r2
 800d148:	4b38      	ldr	r3, [pc, #224]	@ (800d22c <UART_SetConfig+0x4e4>)
 800d14a:	fba3 2301 	umull	r2, r3, r3, r1
 800d14e:	095b      	lsrs	r3, r3, #5
 800d150:	2264      	movs	r2, #100	@ 0x64
 800d152:	fb02 f303 	mul.w	r3, r2, r3
 800d156:	1acb      	subs	r3, r1, r3
 800d158:	011b      	lsls	r3, r3, #4
 800d15a:	3332      	adds	r3, #50	@ 0x32
 800d15c:	4a33      	ldr	r2, [pc, #204]	@ (800d22c <UART_SetConfig+0x4e4>)
 800d15e:	fba2 2303 	umull	r2, r3, r2, r3
 800d162:	095b      	lsrs	r3, r3, #5
 800d164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d168:	441c      	add	r4, r3
 800d16a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d16e:	2200      	movs	r2, #0
 800d170:	673b      	str	r3, [r7, #112]	@ 0x70
 800d172:	677a      	str	r2, [r7, #116]	@ 0x74
 800d174:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d178:	4642      	mov	r2, r8
 800d17a:	464b      	mov	r3, r9
 800d17c:	1891      	adds	r1, r2, r2
 800d17e:	60b9      	str	r1, [r7, #8]
 800d180:	415b      	adcs	r3, r3
 800d182:	60fb      	str	r3, [r7, #12]
 800d184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d188:	4641      	mov	r1, r8
 800d18a:	1851      	adds	r1, r2, r1
 800d18c:	6039      	str	r1, [r7, #0]
 800d18e:	4649      	mov	r1, r9
 800d190:	414b      	adcs	r3, r1
 800d192:	607b      	str	r3, [r7, #4]
 800d194:	f04f 0200 	mov.w	r2, #0
 800d198:	f04f 0300 	mov.w	r3, #0
 800d19c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d1a0:	4659      	mov	r1, fp
 800d1a2:	00cb      	lsls	r3, r1, #3
 800d1a4:	4651      	mov	r1, sl
 800d1a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1aa:	4651      	mov	r1, sl
 800d1ac:	00ca      	lsls	r2, r1, #3
 800d1ae:	4610      	mov	r0, r2
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	4642      	mov	r2, r8
 800d1b6:	189b      	adds	r3, r3, r2
 800d1b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d1ba:	464b      	mov	r3, r9
 800d1bc:	460a      	mov	r2, r1
 800d1be:	eb42 0303 	adc.w	r3, r2, r3
 800d1c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	663b      	str	r3, [r7, #96]	@ 0x60
 800d1ce:	667a      	str	r2, [r7, #100]	@ 0x64
 800d1d0:	f04f 0200 	mov.w	r2, #0
 800d1d4:	f04f 0300 	mov.w	r3, #0
 800d1d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d1dc:	4649      	mov	r1, r9
 800d1de:	008b      	lsls	r3, r1, #2
 800d1e0:	4641      	mov	r1, r8
 800d1e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1e6:	4641      	mov	r1, r8
 800d1e8:	008a      	lsls	r2, r1, #2
 800d1ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d1ee:	f7f3 f857 	bl	80002a0 <__aeabi_uldivmod>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d22c <UART_SetConfig+0x4e4>)
 800d1f8:	fba3 1302 	umull	r1, r3, r3, r2
 800d1fc:	095b      	lsrs	r3, r3, #5
 800d1fe:	2164      	movs	r1, #100	@ 0x64
 800d200:	fb01 f303 	mul.w	r3, r1, r3
 800d204:	1ad3      	subs	r3, r2, r3
 800d206:	011b      	lsls	r3, r3, #4
 800d208:	3332      	adds	r3, #50	@ 0x32
 800d20a:	4a08      	ldr	r2, [pc, #32]	@ (800d22c <UART_SetConfig+0x4e4>)
 800d20c:	fba2 2303 	umull	r2, r3, r2, r3
 800d210:	095b      	lsrs	r3, r3, #5
 800d212:	f003 020f 	and.w	r2, r3, #15
 800d216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4422      	add	r2, r4
 800d21e:	609a      	str	r2, [r3, #8]
}
 800d220:	bf00      	nop
 800d222:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d226:	46bd      	mov	sp, r7
 800d228:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d22c:	51eb851f 	.word	0x51eb851f

0800d230 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d123      	bne.n	800d28a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800d24a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	6851      	ldr	r1, [r2, #4]
 800d252:	683a      	ldr	r2, [r7, #0]
 800d254:	6892      	ldr	r2, [r2, #8]
 800d256:	4311      	orrs	r1, r2
 800d258:	683a      	ldr	r2, [r7, #0]
 800d25a:	68d2      	ldr	r2, [r2, #12]
 800d25c:	4311      	orrs	r1, r2
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	6912      	ldr	r2, [r2, #16]
 800d262:	4311      	orrs	r1, r2
 800d264:	683a      	ldr	r2, [r7, #0]
 800d266:	6952      	ldr	r2, [r2, #20]
 800d268:	4311      	orrs	r1, r2
 800d26a:	683a      	ldr	r2, [r7, #0]
 800d26c:	6992      	ldr	r2, [r2, #24]
 800d26e:	4311      	orrs	r1, r2
 800d270:	683a      	ldr	r2, [r7, #0]
 800d272:	69d2      	ldr	r2, [r2, #28]
 800d274:	4311      	orrs	r1, r2
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	6a12      	ldr	r2, [r2, #32]
 800d27a:	4311      	orrs	r1, r2
 800d27c:	683a      	ldr	r2, [r7, #0]
 800d27e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d280:	430a      	orrs	r2, r1
 800d282:	431a      	orrs	r2, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	601a      	str	r2, [r3, #0]
 800d288:	e028      	b.n	800d2dc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	69d9      	ldr	r1, [r3, #28]
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	6a1b      	ldr	r3, [r3, #32]
 800d29a:	4319      	orrs	r1, r3
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2a0:	430b      	orrs	r3, r1
 800d2a2:	431a      	orrs	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800d2b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d2b4:	683a      	ldr	r2, [r7, #0]
 800d2b6:	6851      	ldr	r1, [r2, #4]
 800d2b8:	683a      	ldr	r2, [r7, #0]
 800d2ba:	6892      	ldr	r2, [r2, #8]
 800d2bc:	4311      	orrs	r1, r2
 800d2be:	683a      	ldr	r2, [r7, #0]
 800d2c0:	68d2      	ldr	r2, [r2, #12]
 800d2c2:	4311      	orrs	r1, r2
 800d2c4:	683a      	ldr	r2, [r7, #0]
 800d2c6:	6912      	ldr	r2, [r2, #16]
 800d2c8:	4311      	orrs	r1, r2
 800d2ca:	683a      	ldr	r2, [r7, #0]
 800d2cc:	6952      	ldr	r2, [r2, #20]
 800d2ce:	4311      	orrs	r1, r2
 800d2d0:	683a      	ldr	r2, [r7, #0]
 800d2d2:	6992      	ldr	r2, [r2, #24]
 800d2d4:	430a      	orrs	r2, r1
 800d2d6:	431a      	orrs	r2, r3
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d2dc:	2300      	movs	r3, #0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	370c      	adds	r7, #12
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr

0800d2ea <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d2ea:	b480      	push	{r7}
 800d2ec:	b085      	sub	sp, #20
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	60f8      	str	r0, [r7, #12]
 800d2f2:	60b9      	str	r1, [r7, #8]
 800d2f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d128      	bne.n	800d34e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	1e59      	subs	r1, r3, #1
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	3b01      	subs	r3, #1
 800d310:	011b      	lsls	r3, r3, #4
 800d312:	4319      	orrs	r1, r3
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	3b01      	subs	r3, #1
 800d31a:	021b      	lsls	r3, r3, #8
 800d31c:	4319      	orrs	r1, r3
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	3b01      	subs	r3, #1
 800d324:	031b      	lsls	r3, r3, #12
 800d326:	4319      	orrs	r1, r3
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	3b01      	subs	r3, #1
 800d32e:	041b      	lsls	r3, r3, #16
 800d330:	4319      	orrs	r1, r3
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	695b      	ldr	r3, [r3, #20]
 800d336:	3b01      	subs	r3, #1
 800d338:	051b      	lsls	r3, r3, #20
 800d33a:	4319      	orrs	r1, r3
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	699b      	ldr	r3, [r3, #24]
 800d340:	3b01      	subs	r3, #1
 800d342:	061b      	lsls	r3, r3, #24
 800d344:	430b      	orrs	r3, r1
 800d346:	431a      	orrs	r2, r3
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	609a      	str	r2, [r3, #8]
 800d34c:	e02f      	b.n	800d3ae <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d356:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d35a:	68ba      	ldr	r2, [r7, #8]
 800d35c:	68d2      	ldr	r2, [r2, #12]
 800d35e:	3a01      	subs	r2, #1
 800d360:	0311      	lsls	r1, r2, #12
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	6952      	ldr	r2, [r2, #20]
 800d366:	3a01      	subs	r2, #1
 800d368:	0512      	lsls	r2, r2, #20
 800d36a:	430a      	orrs	r2, r1
 800d36c:	431a      	orrs	r2, r3
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	1e59      	subs	r1, r3, #1
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	3b01      	subs	r3, #1
 800d386:	011b      	lsls	r3, r3, #4
 800d388:	4319      	orrs	r1, r3
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	3b01      	subs	r3, #1
 800d390:	021b      	lsls	r3, r3, #8
 800d392:	4319      	orrs	r1, r3
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	691b      	ldr	r3, [r3, #16]
 800d398:	3b01      	subs	r3, #1
 800d39a:	041b      	lsls	r3, r3, #16
 800d39c:	4319      	orrs	r1, r3
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	699b      	ldr	r3, [r3, #24]
 800d3a2:	3b01      	subs	r3, #1
 800d3a4:	061b      	lsls	r3, r3, #24
 800d3a6:	430b      	orrs	r3, r1
 800d3a8:	431a      	orrs	r2, r3
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d3ae:	2300      	movs	r3, #0
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3714      	adds	r7, #20
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b086      	sub	sp, #24
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	0d9b      	lsrs	r3, r3, #22
 800d3d2:	059b      	lsls	r3, r3, #22
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	6811      	ldr	r1, [r2, #0]
 800d3d8:	68ba      	ldr	r2, [r7, #8]
 800d3da:	6852      	ldr	r2, [r2, #4]
 800d3dc:	4311      	orrs	r1, r2
 800d3de:	68ba      	ldr	r2, [r7, #8]
 800d3e0:	6892      	ldr	r2, [r2, #8]
 800d3e2:	3a01      	subs	r2, #1
 800d3e4:	0152      	lsls	r2, r2, #5
 800d3e6:	4311      	orrs	r1, r2
 800d3e8:	68ba      	ldr	r2, [r7, #8]
 800d3ea:	68d2      	ldr	r2, [r2, #12]
 800d3ec:	0252      	lsls	r2, r2, #9
 800d3ee:	430a      	orrs	r2, r1
 800d3f0:	431a      	orrs	r2, r3
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800d3f6:	f7f8 f865 	bl	80054c4 <HAL_GetTick>
 800d3fa:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800d3fc:	e010      	b.n	800d420 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d404:	d00c      	beq.n	800d420 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d007      	beq.n	800d41c <FMC_SDRAM_SendCommand+0x60>
 800d40c:	f7f8 f85a 	bl	80054c4 <HAL_GetTick>
 800d410:	4602      	mov	r2, r0
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	1ad3      	subs	r3, r2, r3
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d201      	bcs.n	800d420 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800d41c:	2303      	movs	r3, #3
 800d41e:	e006      	b.n	800d42e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	699b      	ldr	r3, [r3, #24]
 800d424:	f003 0320 	and.w	r3, r3, #32
 800d428:	2b20      	cmp	r3, #32
 800d42a:	d0e8      	beq.n	800d3fe <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3718      	adds	r7, #24
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d436:	b480      	push	{r7}
 800d438:	b083      	sub	sp, #12
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	695b      	ldr	r3, [r3, #20]
 800d444:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800d448:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800d44c:	683a      	ldr	r2, [r7, #0]
 800d44e:	0052      	lsls	r2, r2, #1
 800d450:	431a      	orrs	r2, r3
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	370c      	adds	r7, #12
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr

0800d464 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d464:	b084      	sub	sp, #16
 800d466:	b580      	push	{r7, lr}
 800d468:	b084      	sub	sp, #16
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
 800d46e:	f107 001c 	add.w	r0, r7, #28
 800d472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d476:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d123      	bne.n	800d4c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d482:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800d492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d4a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d105      	bne.n	800d4ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 f9dc 	bl	800d878 <USB_CoreReset>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	73fb      	strb	r3, [r7, #15]
 800d4c4:	e01b      	b.n	800d4fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 f9d0 	bl	800d878 <USB_CoreReset>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d4dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d106      	bne.n	800d4f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	639a      	str	r2, [r3, #56]	@ 0x38
 800d4f0:	e005      	b.n	800d4fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d4fe:	7fbb      	ldrb	r3, [r7, #30]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d10b      	bne.n	800d51c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	689b      	ldr	r3, [r3, #8]
 800d508:	f043 0206 	orr.w	r2, r3, #6
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	f043 0220 	orr.w	r2, r3, #32
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d528:	b004      	add	sp, #16
 800d52a:	4770      	bx	lr

0800d52c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b083      	sub	sp, #12
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	f043 0201 	orr.w	r2, r3, #1
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d540:	2300      	movs	r3, #0
}
 800d542:	4618      	mov	r0, r3
 800d544:	370c      	adds	r7, #12
 800d546:	46bd      	mov	sp, r7
 800d548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54c:	4770      	bx	lr

0800d54e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d54e:	b480      	push	{r7}
 800d550:	b083      	sub	sp, #12
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	f023 0201 	bic.w	r2, r3, #1
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d562:	2300      	movs	r3, #0
}
 800d564:	4618      	mov	r0, r3
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	460b      	mov	r3, r1
 800d57a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d57c:	2300      	movs	r3, #0
 800d57e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d58c:	78fb      	ldrb	r3, [r7, #3]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d115      	bne.n	800d5be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d59e:	200a      	movs	r0, #10
 800d5a0:	f7f7 ff9c 	bl	80054dc <HAL_Delay>
      ms += 10U;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	330a      	adds	r3, #10
 800d5a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 f956 	bl	800d85c <USB_GetMode>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d01e      	beq.n	800d5f4 <USB_SetCurrentMode+0x84>
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2bc7      	cmp	r3, #199	@ 0xc7
 800d5ba:	d9f0      	bls.n	800d59e <USB_SetCurrentMode+0x2e>
 800d5bc:	e01a      	b.n	800d5f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d5be:	78fb      	ldrb	r3, [r7, #3]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d115      	bne.n	800d5f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d5d0:	200a      	movs	r0, #10
 800d5d2:	f7f7 ff83 	bl	80054dc <HAL_Delay>
      ms += 10U;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	330a      	adds	r3, #10
 800d5da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 f93d 	bl	800d85c <USB_GetMode>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d005      	beq.n	800d5f4 <USB_SetCurrentMode+0x84>
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2bc7      	cmp	r3, #199	@ 0xc7
 800d5ec:	d9f0      	bls.n	800d5d0 <USB_SetCurrentMode+0x60>
 800d5ee:	e001      	b.n	800d5f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e005      	b.n	800d600 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2bc8      	cmp	r3, #200	@ 0xc8
 800d5f8:	d101      	bne.n	800d5fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e000      	b.n	800d600 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d608:	b480      	push	{r7}
 800d60a:	b085      	sub	sp, #20
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d612:	2300      	movs	r3, #0
 800d614:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	3301      	adds	r3, #1
 800d61a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d622:	d901      	bls.n	800d628 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d624:	2303      	movs	r3, #3
 800d626:	e01b      	b.n	800d660 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	daf2      	bge.n	800d616 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d630:	2300      	movs	r3, #0
 800d632:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	019b      	lsls	r3, r3, #6
 800d638:	f043 0220 	orr.w	r2, r3, #32
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	3301      	adds	r3, #1
 800d644:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d64c:	d901      	bls.n	800d652 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d64e:	2303      	movs	r3, #3
 800d650:	e006      	b.n	800d660 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	691b      	ldr	r3, [r3, #16]
 800d656:	f003 0320 	and.w	r3, r3, #32
 800d65a:	2b20      	cmp	r3, #32
 800d65c:	d0f0      	beq.n	800d640 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3714      	adds	r7, #20
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d674:	2300      	movs	r3, #0
 800d676:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	3301      	adds	r3, #1
 800d67c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d684:	d901      	bls.n	800d68a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d686:	2303      	movs	r3, #3
 800d688:	e018      	b.n	800d6bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	691b      	ldr	r3, [r3, #16]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	daf2      	bge.n	800d678 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d692:	2300      	movs	r3, #0
 800d694:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2210      	movs	r2, #16
 800d69a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	3301      	adds	r3, #1
 800d6a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d6a8:	d901      	bls.n	800d6ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d6aa:	2303      	movs	r3, #3
 800d6ac:	e006      	b.n	800d6bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	f003 0310 	and.w	r3, r3, #16
 800d6b6:	2b10      	cmp	r3, #16
 800d6b8:	d0f0      	beq.n	800d69c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d6ba:	2300      	movs	r3, #0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3714      	adds	r7, #20
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b089      	sub	sp, #36	@ 0x24
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	60f8      	str	r0, [r7, #12]
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	71fb      	strb	r3, [r7, #7]
 800d6da:	4613      	mov	r3, r2
 800d6dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d6e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d123      	bne.n	800d736 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d6ee:	88bb      	ldrh	r3, [r7, #4]
 800d6f0:	3303      	adds	r3, #3
 800d6f2:	089b      	lsrs	r3, r3, #2
 800d6f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	61bb      	str	r3, [r7, #24]
 800d6fa:	e018      	b.n	800d72e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d6fc:	79fb      	ldrb	r3, [r7, #7]
 800d6fe:	031a      	lsls	r2, r3, #12
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	4413      	add	r3, r2
 800d704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d708:	461a      	mov	r2, r3
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	3301      	adds	r3, #1
 800d714:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	3301      	adds	r3, #1
 800d71a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	3301      	adds	r3, #1
 800d720:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	3301      	adds	r3, #1
 800d726:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	3301      	adds	r3, #1
 800d72c:	61bb      	str	r3, [r7, #24]
 800d72e:	69ba      	ldr	r2, [r7, #24]
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	429a      	cmp	r2, r3
 800d734:	d3e2      	bcc.n	800d6fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d736:	2300      	movs	r3, #0
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3724      	adds	r7, #36	@ 0x24
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d744:	b480      	push	{r7}
 800d746:	b08b      	sub	sp, #44	@ 0x2c
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	4613      	mov	r3, r2
 800d750:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d75a:	88fb      	ldrh	r3, [r7, #6]
 800d75c:	089b      	lsrs	r3, r3, #2
 800d75e:	b29b      	uxth	r3, r3
 800d760:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d762:	88fb      	ldrh	r3, [r7, #6]
 800d764:	f003 0303 	and.w	r3, r3, #3
 800d768:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d76a:	2300      	movs	r3, #0
 800d76c:	623b      	str	r3, [r7, #32]
 800d76e:	e014      	b.n	800d79a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77a:	601a      	str	r2, [r3, #0]
    pDest++;
 800d77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77e:	3301      	adds	r3, #1
 800d780:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d784:	3301      	adds	r3, #1
 800d786:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78a:	3301      	adds	r3, #1
 800d78c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d790:	3301      	adds	r3, #1
 800d792:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d794:	6a3b      	ldr	r3, [r7, #32]
 800d796:	3301      	adds	r3, #1
 800d798:	623b      	str	r3, [r7, #32]
 800d79a:	6a3a      	ldr	r2, [r7, #32]
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d3e6      	bcc.n	800d770 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d7a2:	8bfb      	ldrh	r3, [r7, #30]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d01e      	beq.n	800d7e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	f107 0310 	add.w	r3, r7, #16
 800d7b8:	6812      	ldr	r2, [r2, #0]
 800d7ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d7bc:	693a      	ldr	r2, [r7, #16]
 800d7be:	6a3b      	ldr	r3, [r7, #32]
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	00db      	lsls	r3, r3, #3
 800d7c4:	fa22 f303 	lsr.w	r3, r2, r3
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7cc:	701a      	strb	r2, [r3, #0]
      i++;
 800d7ce:	6a3b      	ldr	r3, [r7, #32]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	623b      	str	r3, [r7, #32]
      pDest++;
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d7da:	8bfb      	ldrh	r3, [r7, #30]
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d7e0:	8bfb      	ldrh	r3, [r7, #30]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d1ea      	bne.n	800d7bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	372c      	adds	r7, #44	@ 0x2c
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	695b      	ldr	r3, [r3, #20]
 800d800:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	699b      	ldr	r3, [r3, #24]
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	4013      	ands	r3, r2
 800d80a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d80c:	68fb      	ldr	r3, [r7, #12]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3714      	adds	r7, #20
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr

0800d81a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800d81a:	b480      	push	{r7}
 800d81c:	b085      	sub	sp, #20
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	460b      	mov	r3, r1
 800d824:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800d82a:	78fb      	ldrb	r3, [r7, #3]
 800d82c:	015a      	lsls	r2, r3, #5
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	4413      	add	r3, r2
 800d832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800d83a:	78fb      	ldrb	r3, [r7, #3]
 800d83c:	015a      	lsls	r2, r3, #5
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	4413      	add	r3, r2
 800d842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	68ba      	ldr	r2, [r7, #8]
 800d84a:	4013      	ands	r3, r2
 800d84c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d84e:	68bb      	ldr	r3, [r7, #8]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	695b      	ldr	r3, [r3, #20]
 800d868:	f003 0301 	and.w	r3, r3, #1
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d878:	b480      	push	{r7}
 800d87a:	b085      	sub	sp, #20
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d880:	2300      	movs	r3, #0
 800d882:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	3301      	adds	r3, #1
 800d888:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d890:	d901      	bls.n	800d896 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d892:	2303      	movs	r3, #3
 800d894:	e01b      	b.n	800d8ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	daf2      	bge.n	800d884 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	691b      	ldr	r3, [r3, #16]
 800d8a6:	f043 0201 	orr.w	r2, r3, #1
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d8ba:	d901      	bls.n	800d8c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d8bc:	2303      	movs	r3, #3
 800d8be:	e006      	b.n	800d8ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	f003 0301 	and.w	r3, r3, #1
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d0f0      	beq.n	800d8ae <USB_CoreReset+0x36>

  return HAL_OK;
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3714      	adds	r7, #20
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
	...

0800d8dc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d8dc:	b084      	sub	sp, #16
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b086      	sub	sp, #24
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d8ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	2300      	movs	r3, #0
 800d900:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d906:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d912:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d91e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d119      	bne.n	800d966 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d932:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d936:	2b01      	cmp	r3, #1
 800d938:	d10a      	bne.n	800d950 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d948:	f043 0304 	orr.w	r3, r3, #4
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	e014      	b.n	800d97a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d95e:	f023 0304 	bic.w	r3, r3, #4
 800d962:	6013      	str	r3, [r2, #0]
 800d964:	e009      	b.n	800d97a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d974:	f023 0304 	bic.w	r3, r3, #4
 800d978:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d97a:	2110      	movs	r1, #16
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f7ff fe43 	bl	800d608 <USB_FlushTxFifo>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d001      	beq.n	800d98c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f7ff fe6d 	bl	800d66c <USB_FlushRxFifo>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d001      	beq.n	800d99c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800d998:	2301      	movs	r3, #1
 800d99a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d99c:	2300      	movs	r3, #0
 800d99e:	613b      	str	r3, [r7, #16]
 800d9a0:	e015      	b.n	800d9ce <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	015a      	lsls	r2, r3, #5
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	015a      	lsls	r2, r3, #5
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	4413      	add	r3, r2
 800d9be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	613b      	str	r3, [r7, #16]
 800d9ce:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d3e3      	bcc.n	800d9a2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d9e6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4a18      	ldr	r2, [pc, #96]	@ (800da4c <USB_HostInit+0x170>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d10b      	bne.n	800da08 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d9f6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4a15      	ldr	r2, [pc, #84]	@ (800da50 <USB_HostInit+0x174>)
 800d9fc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	4a14      	ldr	r2, [pc, #80]	@ (800da54 <USB_HostInit+0x178>)
 800da02:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800da06:	e009      	b.n	800da1c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2280      	movs	r2, #128	@ 0x80
 800da0c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	4a11      	ldr	r2, [pc, #68]	@ (800da58 <USB_HostInit+0x17c>)
 800da12:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4a11      	ldr	r2, [pc, #68]	@ (800da5c <USB_HostInit+0x180>)
 800da18:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800da1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800da20:	2b00      	cmp	r3, #0
 800da22:	d105      	bne.n	800da30 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	699b      	ldr	r3, [r3, #24]
 800da28:	f043 0210 	orr.w	r2, r3, #16
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	699a      	ldr	r2, [r3, #24]
 800da34:	4b0a      	ldr	r3, [pc, #40]	@ (800da60 <USB_HostInit+0x184>)
 800da36:	4313      	orrs	r3, r2
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800da3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3718      	adds	r7, #24
 800da42:	46bd      	mov	sp, r7
 800da44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da48:	b004      	add	sp, #16
 800da4a:	4770      	bx	lr
 800da4c:	40040000 	.word	0x40040000
 800da50:	01000200 	.word	0x01000200
 800da54:	00e00300 	.word	0x00e00300
 800da58:	00600080 	.word	0x00600080
 800da5c:	004000e0 	.word	0x004000e0
 800da60:	a3200008 	.word	0xa3200008

0800da64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	460b      	mov	r3, r1
 800da6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800da82:	f023 0303 	bic.w	r3, r3, #3
 800da86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	78fb      	ldrb	r3, [r7, #3]
 800da92:	f003 0303 	and.w	r3, r3, #3
 800da96:	68f9      	ldr	r1, [r7, #12]
 800da98:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800da9c:	4313      	orrs	r3, r2
 800da9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800daa0:	78fb      	ldrb	r3, [r7, #3]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d107      	bne.n	800dab6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800daac:	461a      	mov	r2, r3
 800daae:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800dab2:	6053      	str	r3, [r2, #4]
 800dab4:	e00c      	b.n	800dad0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800dab6:	78fb      	ldrb	r3, [r7, #3]
 800dab8:	2b02      	cmp	r3, #2
 800daba:	d107      	bne.n	800dacc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dac2:	461a      	mov	r2, r3
 800dac4:	f241 7370 	movw	r3, #6000	@ 0x1770
 800dac8:	6053      	str	r3, [r2, #4]
 800daca:	e001      	b.n	800dad0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800dacc:	2301      	movs	r3, #1
 800dace:	e000      	b.n	800dad2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3714      	adds	r7, #20
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr

0800dade <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b084      	sub	sp, #16
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800daea:	2300      	movs	r3, #0
 800daec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800dafe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	68fa      	ldr	r2, [r7, #12]
 800db04:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800db08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db0c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800db0e:	2064      	movs	r0, #100	@ 0x64
 800db10:	f7f7 fce4 	bl	80054dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	68fa      	ldr	r2, [r7, #12]
 800db18:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800db1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db20:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800db22:	200a      	movs	r0, #10
 800db24:	f7f7 fcda 	bl	80054dc <HAL_Delay>

  return HAL_OK;
 800db28:	2300      	movs	r3, #0
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800db32:	b480      	push	{r7}
 800db34:	b085      	sub	sp, #20
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
 800db3a:	460b      	mov	r3, r1
 800db3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800db42:	2300      	movs	r3, #0
 800db44:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800db56:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d109      	bne.n	800db76 <USB_DriveVbus+0x44>
 800db62:	78fb      	ldrb	r3, [r7, #3]
 800db64:	2b01      	cmp	r3, #1
 800db66:	d106      	bne.n	800db76 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	68fa      	ldr	r2, [r7, #12]
 800db6c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800db70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800db74:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800db7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db80:	d109      	bne.n	800db96 <USB_DriveVbus+0x64>
 800db82:	78fb      	ldrb	r3, [r7, #3]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d106      	bne.n	800db96 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	68fa      	ldr	r2, [r7, #12]
 800db8c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800db90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db94:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3714      	adds	r7, #20
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	0c5b      	lsrs	r3, r3, #17
 800dbc2:	f003 0303 	and.w	r3, r3, #3
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3714      	adds	r7, #20
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr

0800dbd2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800dbd2:	b480      	push	{r7}
 800dbd4:	b085      	sub	sp, #20
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	b29b      	uxth	r3, r3
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3714      	adds	r7, #20
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b088      	sub	sp, #32
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	4608      	mov	r0, r1
 800dbfe:	4611      	mov	r1, r2
 800dc00:	461a      	mov	r2, r3
 800dc02:	4603      	mov	r3, r0
 800dc04:	70fb      	strb	r3, [r7, #3]
 800dc06:	460b      	mov	r3, r1
 800dc08:	70bb      	strb	r3, [r7, #2]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800dc16:	78fb      	ldrb	r3, [r7, #3]
 800dc18:	015a      	lsls	r2, r3, #5
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc22:	461a      	mov	r2, r3
 800dc24:	f04f 33ff 	mov.w	r3, #4294967295
 800dc28:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800dc2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dc2e:	2b03      	cmp	r3, #3
 800dc30:	d87c      	bhi.n	800dd2c <USB_HC_Init+0x138>
 800dc32:	a201      	add	r2, pc, #4	@ (adr r2, 800dc38 <USB_HC_Init+0x44>)
 800dc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc38:	0800dc49 	.word	0x0800dc49
 800dc3c:	0800dcef 	.word	0x0800dcef
 800dc40:	0800dc49 	.word	0x0800dc49
 800dc44:	0800dcb1 	.word	0x0800dcb1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dc48:	78fb      	ldrb	r3, [r7, #3]
 800dc4a:	015a      	lsls	r2, r3, #5
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	4413      	add	r3, r2
 800dc50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc54:	461a      	mov	r2, r3
 800dc56:	f240 439d 	movw	r3, #1181	@ 0x49d
 800dc5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800dc5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	da10      	bge.n	800dc86 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dc64:	78fb      	ldrb	r3, [r7, #3]
 800dc66:	015a      	lsls	r2, r3, #5
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	78fa      	ldrb	r2, [r7, #3]
 800dc74:	0151      	lsls	r1, r2, #5
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	440a      	add	r2, r1
 800dc7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dc82:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800dc84:	e055      	b.n	800dd32 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	4a6f      	ldr	r2, [pc, #444]	@ (800de48 <USB_HC_Init+0x254>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d151      	bne.n	800dd32 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800dc8e:	78fb      	ldrb	r3, [r7, #3]
 800dc90:	015a      	lsls	r2, r3, #5
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	4413      	add	r3, r2
 800dc96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	78fa      	ldrb	r2, [r7, #3]
 800dc9e:	0151      	lsls	r1, r2, #5
 800dca0:	693a      	ldr	r2, [r7, #16]
 800dca2:	440a      	add	r2, r1
 800dca4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dca8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800dcac:	60d3      	str	r3, [r2, #12]
      break;
 800dcae:	e040      	b.n	800dd32 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dcb0:	78fb      	ldrb	r3, [r7, #3]
 800dcb2:	015a      	lsls	r2, r3, #5
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	4413      	add	r3, r2
 800dcb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	f240 639d 	movw	r3, #1693	@ 0x69d
 800dcc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dcc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	da34      	bge.n	800dd36 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dccc:	78fb      	ldrb	r3, [r7, #3]
 800dcce:	015a      	lsls	r2, r3, #5
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcd8:	68db      	ldr	r3, [r3, #12]
 800dcda:	78fa      	ldrb	r2, [r7, #3]
 800dcdc:	0151      	lsls	r1, r2, #5
 800dcde:	693a      	ldr	r2, [r7, #16]
 800dce0:	440a      	add	r2, r1
 800dce2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dcea:	60d3      	str	r3, [r2, #12]
      }

      break;
 800dcec:	e023      	b.n	800dd36 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dcee:	78fb      	ldrb	r3, [r7, #3]
 800dcf0:	015a      	lsls	r2, r3, #5
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	f240 2325 	movw	r3, #549	@ 0x225
 800dd00:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dd02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	da17      	bge.n	800dd3a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800dd0a:	78fb      	ldrb	r3, [r7, #3]
 800dd0c:	015a      	lsls	r2, r3, #5
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	4413      	add	r3, r2
 800dd12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	78fa      	ldrb	r2, [r7, #3]
 800dd1a:	0151      	lsls	r1, r2, #5
 800dd1c:	693a      	ldr	r2, [r7, #16]
 800dd1e:	440a      	add	r2, r1
 800dd20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dd24:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800dd28:	60d3      	str	r3, [r2, #12]
      }
      break;
 800dd2a:	e006      	b.n	800dd3a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	77fb      	strb	r3, [r7, #31]
      break;
 800dd30:	e004      	b.n	800dd3c <USB_HC_Init+0x148>
      break;
 800dd32:	bf00      	nop
 800dd34:	e002      	b.n	800dd3c <USB_HC_Init+0x148>
      break;
 800dd36:	bf00      	nop
 800dd38:	e000      	b.n	800dd3c <USB_HC_Init+0x148>
      break;
 800dd3a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800dd3c:	78fb      	ldrb	r3, [r7, #3]
 800dd3e:	015a      	lsls	r2, r3, #5
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	4413      	add	r3, r2
 800dd44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd48:	461a      	mov	r2, r3
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800dd4e:	78fb      	ldrb	r3, [r7, #3]
 800dd50:	015a      	lsls	r2, r3, #5
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	4413      	add	r3, r2
 800dd56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	78fa      	ldrb	r2, [r7, #3]
 800dd5e:	0151      	lsls	r1, r2, #5
 800dd60:	693a      	ldr	r2, [r7, #16]
 800dd62:	440a      	add	r2, r1
 800dd64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dd68:	f043 0302 	orr.w	r3, r3, #2
 800dd6c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dd74:	699a      	ldr	r2, [r3, #24]
 800dd76:	78fb      	ldrb	r3, [r7, #3]
 800dd78:	f003 030f 	and.w	r3, r3, #15
 800dd7c:	2101      	movs	r1, #1
 800dd7e:	fa01 f303 	lsl.w	r3, r1, r3
 800dd82:	6939      	ldr	r1, [r7, #16]
 800dd84:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	699b      	ldr	r3, [r3, #24]
 800dd90:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800dd98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	da03      	bge.n	800dda8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800dda0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dda4:	61bb      	str	r3, [r7, #24]
 800dda6:	e001      	b.n	800ddac <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7ff fef9 	bl	800dba4 <USB_GetHostSpeed>
 800ddb2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ddb4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ddb8:	2b02      	cmp	r3, #2
 800ddba:	d106      	bne.n	800ddca <USB_HC_Init+0x1d6>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2b02      	cmp	r3, #2
 800ddc0:	d003      	beq.n	800ddca <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ddc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ddc6:	617b      	str	r3, [r7, #20]
 800ddc8:	e001      	b.n	800ddce <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ddce:	787b      	ldrb	r3, [r7, #1]
 800ddd0:	059b      	lsls	r3, r3, #22
 800ddd2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ddd6:	78bb      	ldrb	r3, [r7, #2]
 800ddd8:	02db      	lsls	r3, r3, #11
 800ddda:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ddde:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dde0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dde4:	049b      	lsls	r3, r3, #18
 800dde6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ddea:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800ddec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ddee:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ddf2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	431a      	orrs	r2, r3
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ddfc:	78fa      	ldrb	r2, [r7, #3]
 800ddfe:	0151      	lsls	r1, r2, #5
 800de00:	693a      	ldr	r2, [r7, #16]
 800de02:	440a      	add	r2, r1
 800de04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800de08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800de0c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800de0e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800de12:	2b03      	cmp	r3, #3
 800de14:	d003      	beq.n	800de1e <USB_HC_Init+0x22a>
 800de16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	d10f      	bne.n	800de3e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800de1e:	78fb      	ldrb	r3, [r7, #3]
 800de20:	015a      	lsls	r2, r3, #5
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	4413      	add	r3, r2
 800de26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	78fa      	ldrb	r2, [r7, #3]
 800de2e:	0151      	lsls	r1, r2, #5
 800de30:	693a      	ldr	r2, [r7, #16]
 800de32:	440a      	add	r2, r1
 800de34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800de38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800de3c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800de3e:	7ffb      	ldrb	r3, [r7, #31]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3720      	adds	r7, #32
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	40040000 	.word	0x40040000

0800de4c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b08c      	sub	sp, #48	@ 0x30
 800de50:	af02      	add	r7, sp, #8
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	4613      	mov	r3, r2
 800de58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	785b      	ldrb	r3, [r3, #1]
 800de62:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800de64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800de68:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	4a5d      	ldr	r2, [pc, #372]	@ (800dfe4 <USB_HC_StartXfer+0x198>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d12f      	bne.n	800ded2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800de72:	79fb      	ldrb	r3, [r7, #7]
 800de74:	2b01      	cmp	r3, #1
 800de76:	d11c      	bne.n	800deb2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	7c9b      	ldrb	r3, [r3, #18]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d003      	beq.n	800de88 <USB_HC_StartXfer+0x3c>
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	7c9b      	ldrb	r3, [r3, #18]
 800de84:	2b02      	cmp	r3, #2
 800de86:	d124      	bne.n	800ded2 <USB_HC_StartXfer+0x86>
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	799b      	ldrb	r3, [r3, #6]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d120      	bne.n	800ded2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	015a      	lsls	r2, r3, #5
 800de94:	6a3b      	ldr	r3, [r7, #32]
 800de96:	4413      	add	r3, r2
 800de98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	69fa      	ldr	r2, [r7, #28]
 800dea0:	0151      	lsls	r1, r2, #5
 800dea2:	6a3a      	ldr	r2, [r7, #32]
 800dea4:	440a      	add	r2, r1
 800dea6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800deaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800deae:	60d3      	str	r3, [r2, #12]
 800deb0:	e00f      	b.n	800ded2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	791b      	ldrb	r3, [r3, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d10b      	bne.n	800ded2 <USB_HC_StartXfer+0x86>
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	795b      	ldrb	r3, [r3, #5]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d107      	bne.n	800ded2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	785b      	ldrb	r3, [r3, #1]
 800dec6:	4619      	mov	r1, r3
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	f000 fb6b 	bl	800e5a4 <USB_DoPing>
        return HAL_OK;
 800dece:	2300      	movs	r3, #0
 800ded0:	e232      	b.n	800e338 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	799b      	ldrb	r3, [r3, #6]
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d158      	bne.n	800df8c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800deda:	2301      	movs	r3, #1
 800dedc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	78db      	ldrb	r3, [r3, #3]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d007      	beq.n	800def6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dee6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dee8:	68ba      	ldr	r2, [r7, #8]
 800deea:	8a92      	ldrh	r2, [r2, #20]
 800deec:	fb03 f202 	mul.w	r2, r3, r2
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	61da      	str	r2, [r3, #28]
 800def4:	e07c      	b.n	800dff0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	7c9b      	ldrb	r3, [r3, #18]
 800defa:	2b01      	cmp	r3, #1
 800defc:	d130      	bne.n	800df60 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	6a1b      	ldr	r3, [r3, #32]
 800df02:	2bbc      	cmp	r3, #188	@ 0xbc
 800df04:	d918      	bls.n	800df38 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	8a9b      	ldrh	r3, [r3, #20]
 800df0a:	461a      	mov	r2, r3
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	69da      	ldr	r2, [r3, #28]
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d003      	beq.n	800df28 <USB_HC_StartXfer+0xdc>
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	2b02      	cmp	r3, #2
 800df26:	d103      	bne.n	800df30 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	2202      	movs	r2, #2
 800df2c:	60da      	str	r2, [r3, #12]
 800df2e:	e05f      	b.n	800dff0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	2201      	movs	r2, #1
 800df34:	60da      	str	r2, [r3, #12]
 800df36:	e05b      	b.n	800dff0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	6a1a      	ldr	r2, [r3, #32]
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	2b01      	cmp	r3, #1
 800df46:	d007      	beq.n	800df58 <USB_HC_StartXfer+0x10c>
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	2b02      	cmp	r3, #2
 800df4e:	d003      	beq.n	800df58 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	2204      	movs	r2, #4
 800df54:	60da      	str	r2, [r3, #12]
 800df56:	e04b      	b.n	800dff0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	2203      	movs	r2, #3
 800df5c:	60da      	str	r2, [r3, #12]
 800df5e:	e047      	b.n	800dff0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800df60:	79fb      	ldrb	r3, [r7, #7]
 800df62:	2b01      	cmp	r3, #1
 800df64:	d10d      	bne.n	800df82 <USB_HC_StartXfer+0x136>
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	6a1b      	ldr	r3, [r3, #32]
 800df6a:	68ba      	ldr	r2, [r7, #8]
 800df6c:	8a92      	ldrh	r2, [r2, #20]
 800df6e:	4293      	cmp	r3, r2
 800df70:	d907      	bls.n	800df82 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800df72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df74:	68ba      	ldr	r2, [r7, #8]
 800df76:	8a92      	ldrh	r2, [r2, #20]
 800df78:	fb03 f202 	mul.w	r2, r3, r2
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	61da      	str	r2, [r3, #28]
 800df80:	e036      	b.n	800dff0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	6a1a      	ldr	r2, [r3, #32]
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	61da      	str	r2, [r3, #28]
 800df8a:	e031      	b.n	800dff0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	6a1b      	ldr	r3, [r3, #32]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d018      	beq.n	800dfc6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	6a1b      	ldr	r3, [r3, #32]
 800df98:	68ba      	ldr	r2, [r7, #8]
 800df9a:	8a92      	ldrh	r2, [r2, #20]
 800df9c:	4413      	add	r3, r2
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	68ba      	ldr	r2, [r7, #8]
 800dfa2:	8a92      	ldrh	r2, [r2, #20]
 800dfa4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfa8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800dfaa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800dfac:	8b7b      	ldrh	r3, [r7, #26]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d90b      	bls.n	800dfca <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800dfb2:	8b7b      	ldrh	r3, [r7, #26]
 800dfb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dfb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	8a92      	ldrh	r2, [r2, #20]
 800dfbc:	fb03 f202 	mul.w	r2, r3, r2
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	61da      	str	r2, [r3, #28]
 800dfc4:	e001      	b.n	800dfca <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	78db      	ldrb	r3, [r3, #3]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00a      	beq.n	800dfe8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dfd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfd4:	68ba      	ldr	r2, [r7, #8]
 800dfd6:	8a92      	ldrh	r2, [r2, #20]
 800dfd8:	fb03 f202 	mul.w	r2, r3, r2
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	61da      	str	r2, [r3, #28]
 800dfe0:	e006      	b.n	800dff0 <USB_HC_StartXfer+0x1a4>
 800dfe2:	bf00      	nop
 800dfe4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	6a1a      	ldr	r2, [r3, #32]
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	69db      	ldr	r3, [r3, #28]
 800dff4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dff8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dffa:	04d9      	lsls	r1, r3, #19
 800dffc:	4ba3      	ldr	r3, [pc, #652]	@ (800e28c <USB_HC_StartXfer+0x440>)
 800dffe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e000:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	7d9b      	ldrb	r3, [r3, #22]
 800e006:	075b      	lsls	r3, r3, #29
 800e008:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e00c:	69f9      	ldr	r1, [r7, #28]
 800e00e:	0148      	lsls	r0, r1, #5
 800e010:	6a39      	ldr	r1, [r7, #32]
 800e012:	4401      	add	r1, r0
 800e014:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e018:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e01a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e01c:	79fb      	ldrb	r3, [r7, #7]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d009      	beq.n	800e036 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	6999      	ldr	r1, [r3, #24]
 800e026:	69fb      	ldr	r3, [r7, #28]
 800e028:	015a      	lsls	r2, r3, #5
 800e02a:	6a3b      	ldr	r3, [r7, #32]
 800e02c:	4413      	add	r3, r2
 800e02e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e032:	460a      	mov	r2, r1
 800e034:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e036:	6a3b      	ldr	r3, [r7, #32]
 800e038:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	f003 0301 	and.w	r3, r3, #1
 800e042:	2b00      	cmp	r3, #0
 800e044:	bf0c      	ite	eq
 800e046:	2301      	moveq	r3, #1
 800e048:	2300      	movne	r3, #0
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	015a      	lsls	r2, r3, #5
 800e052:	6a3b      	ldr	r3, [r7, #32]
 800e054:	4413      	add	r3, r2
 800e056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	69fa      	ldr	r2, [r7, #28]
 800e05e:	0151      	lsls	r1, r2, #5
 800e060:	6a3a      	ldr	r2, [r7, #32]
 800e062:	440a      	add	r2, r1
 800e064:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e068:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e06c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	015a      	lsls	r2, r3, #5
 800e072:	6a3b      	ldr	r3, [r7, #32]
 800e074:	4413      	add	r3, r2
 800e076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	7e7b      	ldrb	r3, [r7, #25]
 800e07e:	075b      	lsls	r3, r3, #29
 800e080:	69f9      	ldr	r1, [r7, #28]
 800e082:	0148      	lsls	r0, r1, #5
 800e084:	6a39      	ldr	r1, [r7, #32]
 800e086:	4401      	add	r1, r0
 800e088:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800e08c:	4313      	orrs	r3, r2
 800e08e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	799b      	ldrb	r3, [r3, #6]
 800e094:	2b01      	cmp	r3, #1
 800e096:	f040 80c3 	bne.w	800e220 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	7c5b      	ldrb	r3, [r3, #17]
 800e09e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	69fa      	ldr	r2, [r7, #28]
 800e0a8:	0151      	lsls	r1, r2, #5
 800e0aa:	6a3a      	ldr	r2, [r7, #32]
 800e0ac:	440a      	add	r2, r1
 800e0ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e0b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e0b6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	015a      	lsls	r2, r3, #5
 800e0bc:	6a3b      	ldr	r3, [r7, #32]
 800e0be:	4413      	add	r3, r2
 800e0c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0c4:	68db      	ldr	r3, [r3, #12]
 800e0c6:	69fa      	ldr	r2, [r7, #28]
 800e0c8:	0151      	lsls	r1, r2, #5
 800e0ca:	6a3a      	ldr	r2, [r7, #32]
 800e0cc:	440a      	add	r2, r1
 800e0ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0d2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e0d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	79db      	ldrb	r3, [r3, #7]
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d123      	bne.n	800e128 <USB_HC_StartXfer+0x2dc>
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	78db      	ldrb	r3, [r3, #3]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d11f      	bne.n	800e128 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	015a      	lsls	r2, r3, #5
 800e0ec:	6a3b      	ldr	r3, [r7, #32]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	69fa      	ldr	r2, [r7, #28]
 800e0f8:	0151      	lsls	r1, r2, #5
 800e0fa:	6a3a      	ldr	r2, [r7, #32]
 800e0fc:	440a      	add	r2, r1
 800e0fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e106:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	015a      	lsls	r2, r3, #5
 800e10c:	6a3b      	ldr	r3, [r7, #32]
 800e10e:	4413      	add	r3, r2
 800e110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e114:	68db      	ldr	r3, [r3, #12]
 800e116:	69fa      	ldr	r2, [r7, #28]
 800e118:	0151      	lsls	r1, r2, #5
 800e11a:	6a3a      	ldr	r2, [r7, #32]
 800e11c:	440a      	add	r2, r1
 800e11e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e126:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	7c9b      	ldrb	r3, [r3, #18]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d003      	beq.n	800e138 <USB_HC_StartXfer+0x2ec>
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	7c9b      	ldrb	r3, [r3, #18]
 800e134:	2b03      	cmp	r3, #3
 800e136:	d117      	bne.n	800e168 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d113      	bne.n	800e168 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	78db      	ldrb	r3, [r3, #3]
 800e144:	2b01      	cmp	r3, #1
 800e146:	d10f      	bne.n	800e168 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	015a      	lsls	r2, r3, #5
 800e14c:	6a3b      	ldr	r3, [r7, #32]
 800e14e:	4413      	add	r3, r2
 800e150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	69fa      	ldr	r2, [r7, #28]
 800e158:	0151      	lsls	r1, r2, #5
 800e15a:	6a3a      	ldr	r2, [r7, #32]
 800e15c:	440a      	add	r2, r1
 800e15e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e166:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	7c9b      	ldrb	r3, [r3, #18]
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d162      	bne.n	800e236 <USB_HC_StartXfer+0x3ea>
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	78db      	ldrb	r3, [r3, #3]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d15e      	bne.n	800e236 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	68db      	ldr	r3, [r3, #12]
 800e17c:	3b01      	subs	r3, #1
 800e17e:	2b03      	cmp	r3, #3
 800e180:	d858      	bhi.n	800e234 <USB_HC_StartXfer+0x3e8>
 800e182:	a201      	add	r2, pc, #4	@ (adr r2, 800e188 <USB_HC_StartXfer+0x33c>)
 800e184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e188:	0800e199 	.word	0x0800e199
 800e18c:	0800e1bb 	.word	0x0800e1bb
 800e190:	0800e1dd 	.word	0x0800e1dd
 800e194:	0800e1ff 	.word	0x0800e1ff
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	015a      	lsls	r2, r3, #5
 800e19c:	6a3b      	ldr	r3, [r7, #32]
 800e19e:	4413      	add	r3, r2
 800e1a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	69fa      	ldr	r2, [r7, #28]
 800e1a8:	0151      	lsls	r1, r2, #5
 800e1aa:	6a3a      	ldr	r2, [r7, #32]
 800e1ac:	440a      	add	r2, r1
 800e1ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e1b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1b6:	6053      	str	r3, [r2, #4]
          break;
 800e1b8:	e03d      	b.n	800e236 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	015a      	lsls	r2, r3, #5
 800e1be:	6a3b      	ldr	r3, [r7, #32]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	69fa      	ldr	r2, [r7, #28]
 800e1ca:	0151      	lsls	r1, r2, #5
 800e1cc:	6a3a      	ldr	r2, [r7, #32]
 800e1ce:	440a      	add	r2, r1
 800e1d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e1d4:	f043 030e 	orr.w	r3, r3, #14
 800e1d8:	6053      	str	r3, [r2, #4]
          break;
 800e1da:	e02c      	b.n	800e236 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800e1dc:	69fb      	ldr	r3, [r7, #28]
 800e1de:	015a      	lsls	r2, r3, #5
 800e1e0:	6a3b      	ldr	r3, [r7, #32]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1e8:	685b      	ldr	r3, [r3, #4]
 800e1ea:	69fa      	ldr	r2, [r7, #28]
 800e1ec:	0151      	lsls	r1, r2, #5
 800e1ee:	6a3a      	ldr	r2, [r7, #32]
 800e1f0:	440a      	add	r2, r1
 800e1f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e1f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e1fa:	6053      	str	r3, [r2, #4]
          break;
 800e1fc:	e01b      	b.n	800e236 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	015a      	lsls	r2, r3, #5
 800e202:	6a3b      	ldr	r3, [r7, #32]
 800e204:	4413      	add	r3, r2
 800e206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	69fa      	ldr	r2, [r7, #28]
 800e20e:	0151      	lsls	r1, r2, #5
 800e210:	6a3a      	ldr	r2, [r7, #32]
 800e212:	440a      	add	r2, r1
 800e214:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e218:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e21c:	6053      	str	r3, [r2, #4]
          break;
 800e21e:	e00a      	b.n	800e236 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	015a      	lsls	r2, r3, #5
 800e224:	6a3b      	ldr	r3, [r7, #32]
 800e226:	4413      	add	r3, r2
 800e228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e22c:	461a      	mov	r2, r3
 800e22e:	2300      	movs	r3, #0
 800e230:	6053      	str	r3, [r2, #4]
 800e232:	e000      	b.n	800e236 <USB_HC_StartXfer+0x3ea>
          break;
 800e234:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	015a      	lsls	r2, r3, #5
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	4413      	add	r3, r2
 800e23e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e24c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	78db      	ldrb	r3, [r3, #3]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d004      	beq.n	800e260 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e25c:	613b      	str	r3, [r7, #16]
 800e25e:	e003      	b.n	800e268 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e266:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e26e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	015a      	lsls	r2, r3, #5
 800e274:	6a3b      	ldr	r3, [r7, #32]
 800e276:	4413      	add	r3, r2
 800e278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e27c:	461a      	mov	r2, r3
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e282:	79fb      	ldrb	r3, [r7, #7]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d003      	beq.n	800e290 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800e288:	2300      	movs	r3, #0
 800e28a:	e055      	b.n	800e338 <USB_HC_StartXfer+0x4ec>
 800e28c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	78db      	ldrb	r3, [r3, #3]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d14e      	bne.n	800e336 <USB_HC_StartXfer+0x4ea>
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	6a1b      	ldr	r3, [r3, #32]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d04a      	beq.n	800e336 <USB_HC_StartXfer+0x4ea>
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	79db      	ldrb	r3, [r3, #7]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d146      	bne.n	800e336 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	7c9b      	ldrb	r3, [r3, #18]
 800e2ac:	2b03      	cmp	r3, #3
 800e2ae:	d831      	bhi.n	800e314 <USB_HC_StartXfer+0x4c8>
 800e2b0:	a201      	add	r2, pc, #4	@ (adr r2, 800e2b8 <USB_HC_StartXfer+0x46c>)
 800e2b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b6:	bf00      	nop
 800e2b8:	0800e2c9 	.word	0x0800e2c9
 800e2bc:	0800e2ed 	.word	0x0800e2ed
 800e2c0:	0800e2c9 	.word	0x0800e2c9
 800e2c4:	0800e2ed 	.word	0x0800e2ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	6a1b      	ldr	r3, [r3, #32]
 800e2cc:	3303      	adds	r3, #3
 800e2ce:	089b      	lsrs	r3, r3, #2
 800e2d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e2d2:	8afa      	ldrh	r2, [r7, #22]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2d8:	b29b      	uxth	r3, r3
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d91c      	bls.n	800e318 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	699b      	ldr	r3, [r3, #24]
 800e2e2:	f043 0220 	orr.w	r2, r3, #32
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	619a      	str	r2, [r3, #24]
        }
        break;
 800e2ea:	e015      	b.n	800e318 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	6a1b      	ldr	r3, [r3, #32]
 800e2f0:	3303      	adds	r3, #3
 800e2f2:	089b      	lsrs	r3, r3, #2
 800e2f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e2f6:	8afa      	ldrh	r2, [r7, #22]
 800e2f8:	6a3b      	ldr	r3, [r7, #32]
 800e2fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2fe:	691b      	ldr	r3, [r3, #16]
 800e300:	b29b      	uxth	r3, r3
 800e302:	429a      	cmp	r2, r3
 800e304:	d90a      	bls.n	800e31c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	699b      	ldr	r3, [r3, #24]
 800e30a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	619a      	str	r2, [r3, #24]
        }
        break;
 800e312:	e003      	b.n	800e31c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800e314:	bf00      	nop
 800e316:	e002      	b.n	800e31e <USB_HC_StartXfer+0x4d2>
        break;
 800e318:	bf00      	nop
 800e31a:	e000      	b.n	800e31e <USB_HC_StartXfer+0x4d2>
        break;
 800e31c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	6999      	ldr	r1, [r3, #24]
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	785a      	ldrb	r2, [r3, #1]
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	6a1b      	ldr	r3, [r3, #32]
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	2000      	movs	r0, #0
 800e32e:	9000      	str	r0, [sp, #0]
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f7ff f9c9 	bl	800d6c8 <USB_WritePacket>
  }

  return HAL_OK;
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3728      	adds	r7, #40	@ 0x28
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e352:	695b      	ldr	r3, [r3, #20]
 800e354:	b29b      	uxth	r3, r3
}
 800e356:	4618      	mov	r0, r3
 800e358:	3714      	adds	r7, #20
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr

0800e362 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e362:	b480      	push	{r7}
 800e364:	b089      	sub	sp, #36	@ 0x24
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
 800e36a:	460b      	mov	r3, r1
 800e36c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800e372:	78fb      	ldrb	r3, [r7, #3]
 800e374:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e376:	2300      	movs	r3, #0
 800e378:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e37a:	69bb      	ldr	r3, [r7, #24]
 800e37c:	015a      	lsls	r2, r3, #5
 800e37e:	69fb      	ldr	r3, [r7, #28]
 800e380:	4413      	add	r3, r2
 800e382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	0c9b      	lsrs	r3, r3, #18
 800e38a:	f003 0303 	and.w	r3, r3, #3
 800e38e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	015a      	lsls	r2, r3, #5
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	4413      	add	r3, r2
 800e398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	0fdb      	lsrs	r3, r3, #31
 800e3a0:	f003 0301 	and.w	r3, r3, #1
 800e3a4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	015a      	lsls	r2, r3, #5
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	0fdb      	lsrs	r3, r3, #31
 800e3b6:	f003 0301 	and.w	r3, r3, #1
 800e3ba:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	f003 0320 	and.w	r3, r3, #32
 800e3c4:	2b20      	cmp	r3, #32
 800e3c6:	d10d      	bne.n	800e3e4 <USB_HC_Halt+0x82>
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d10a      	bne.n	800e3e4 <USB_HC_Halt+0x82>
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d005      	beq.n	800e3e0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d002      	beq.n	800e3e0 <USB_HC_Halt+0x7e>
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	2b03      	cmp	r3, #3
 800e3de:	d101      	bne.n	800e3e4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	e0d8      	b.n	800e596 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d002      	beq.n	800e3f0 <USB_HC_Halt+0x8e>
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	2b02      	cmp	r3, #2
 800e3ee:	d173      	bne.n	800e4d8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	015a      	lsls	r2, r3, #5
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	4413      	add	r3, r2
 800e3f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	69ba      	ldr	r2, [r7, #24]
 800e400:	0151      	lsls	r1, r2, #5
 800e402:	69fa      	ldr	r2, [r7, #28]
 800e404:	440a      	add	r2, r1
 800e406:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e40a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e40e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	689b      	ldr	r3, [r3, #8]
 800e414:	f003 0320 	and.w	r3, r3, #32
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d14a      	bne.n	800e4b2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e420:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e424:	2b00      	cmp	r3, #0
 800e426:	d133      	bne.n	800e490 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e428:	69bb      	ldr	r3, [r7, #24]
 800e42a:	015a      	lsls	r2, r3, #5
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	4413      	add	r3, r2
 800e430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	69ba      	ldr	r2, [r7, #24]
 800e438:	0151      	lsls	r1, r2, #5
 800e43a:	69fa      	ldr	r2, [r7, #28]
 800e43c:	440a      	add	r2, r1
 800e43e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e442:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e446:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	015a      	lsls	r2, r3, #5
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	4413      	add	r3, r2
 800e450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	69ba      	ldr	r2, [r7, #24]
 800e458:	0151      	lsls	r1, r2, #5
 800e45a:	69fa      	ldr	r2, [r7, #28]
 800e45c:	440a      	add	r2, r1
 800e45e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e462:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e466:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	3301      	adds	r3, #1
 800e46c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e474:	d82e      	bhi.n	800e4d4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e476:	69bb      	ldr	r3, [r7, #24]
 800e478:	015a      	lsls	r2, r3, #5
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	4413      	add	r3, r2
 800e47e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e488:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e48c:	d0ec      	beq.n	800e468 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e48e:	e081      	b.n	800e594 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	015a      	lsls	r2, r3, #5
 800e494:	69fb      	ldr	r3, [r7, #28]
 800e496:	4413      	add	r3, r2
 800e498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	69ba      	ldr	r2, [r7, #24]
 800e4a0:	0151      	lsls	r1, r2, #5
 800e4a2:	69fa      	ldr	r2, [r7, #28]
 800e4a4:	440a      	add	r2, r1
 800e4a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e4ae:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e4b0:	e070      	b.n	800e594 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e4b2:	69bb      	ldr	r3, [r7, #24]
 800e4b4:	015a      	lsls	r2, r3, #5
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	4413      	add	r3, r2
 800e4ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	69ba      	ldr	r2, [r7, #24]
 800e4c2:	0151      	lsls	r1, r2, #5
 800e4c4:	69fa      	ldr	r2, [r7, #28]
 800e4c6:	440a      	add	r2, r1
 800e4c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e4d0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e4d2:	e05f      	b.n	800e594 <USB_HC_Halt+0x232>
            break;
 800e4d4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e4d6:	e05d      	b.n	800e594 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	015a      	lsls	r2, r3, #5
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	4413      	add	r3, r2
 800e4e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	69ba      	ldr	r2, [r7, #24]
 800e4e8:	0151      	lsls	r1, r2, #5
 800e4ea:	69fa      	ldr	r2, [r7, #28]
 800e4ec:	440a      	add	r2, r1
 800e4ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e4f6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e4f8:	69fb      	ldr	r3, [r7, #28]
 800e4fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e4fe:	691b      	ldr	r3, [r3, #16]
 800e500:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e504:	2b00      	cmp	r3, #0
 800e506:	d133      	bne.n	800e570 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	015a      	lsls	r2, r3, #5
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	4413      	add	r3, r2
 800e510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	69ba      	ldr	r2, [r7, #24]
 800e518:	0151      	lsls	r1, r2, #5
 800e51a:	69fa      	ldr	r2, [r7, #28]
 800e51c:	440a      	add	r2, r1
 800e51e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e522:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e526:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	015a      	lsls	r2, r3, #5
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	4413      	add	r3, r2
 800e530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	69ba      	ldr	r2, [r7, #24]
 800e538:	0151      	lsls	r1, r2, #5
 800e53a:	69fa      	ldr	r2, [r7, #28]
 800e53c:	440a      	add	r2, r1
 800e53e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e542:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e546:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	3301      	adds	r3, #1
 800e54c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e554:	d81d      	bhi.n	800e592 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	015a      	lsls	r2, r3, #5
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	4413      	add	r3, r2
 800e55e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e56c:	d0ec      	beq.n	800e548 <USB_HC_Halt+0x1e6>
 800e56e:	e011      	b.n	800e594 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e570:	69bb      	ldr	r3, [r7, #24]
 800e572:	015a      	lsls	r2, r3, #5
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	4413      	add	r3, r2
 800e578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	69ba      	ldr	r2, [r7, #24]
 800e580:	0151      	lsls	r1, r2, #5
 800e582:	69fa      	ldr	r2, [r7, #28]
 800e584:	440a      	add	r2, r1
 800e586:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e58a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e58e:	6013      	str	r3, [r2, #0]
 800e590:	e000      	b.n	800e594 <USB_HC_Halt+0x232>
          break;
 800e592:	bf00      	nop
    }
  }

  return HAL_OK;
 800e594:	2300      	movs	r3, #0
}
 800e596:	4618      	mov	r0, r3
 800e598:	3724      	adds	r7, #36	@ 0x24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr
	...

0800e5a4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b087      	sub	sp, #28
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e5b4:	78fb      	ldrb	r3, [r7, #3]
 800e5b6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	04da      	lsls	r2, r3, #19
 800e5c0:	4b15      	ldr	r3, [pc, #84]	@ (800e618 <USB_DoPing+0x74>)
 800e5c2:	4013      	ands	r3, r2
 800e5c4:	693a      	ldr	r2, [r7, #16]
 800e5c6:	0151      	lsls	r1, r2, #5
 800e5c8:	697a      	ldr	r2, [r7, #20]
 800e5ca:	440a      	add	r2, r1
 800e5cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e5d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e5d4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	015a      	lsls	r2, r3, #5
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	4413      	add	r3, r2
 800e5de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e5ec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e5f4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	015a      	lsls	r2, r3, #5
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	4413      	add	r3, r2
 800e5fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e602:	461a      	mov	r2, r3
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e608:	2300      	movs	r3, #0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	371c      	adds	r7, #28
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr
 800e616:	bf00      	nop
 800e618:	1ff80000 	.word	0x1ff80000

0800e61c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b088      	sub	sp, #32
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e624:	2300      	movs	r3, #0
 800e626:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e62c:	2300      	movs	r3, #0
 800e62e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7fe ff8c 	bl	800d54e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e636:	2110      	movs	r1, #16
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f7fe ffe5 	bl	800d608 <USB_FlushTxFifo>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d001      	beq.n	800e648 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e644:	2301      	movs	r3, #1
 800e646:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7ff f80f 	bl	800d66c <USB_FlushRxFifo>
 800e64e:	4603      	mov	r3, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d001      	beq.n	800e658 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800e654:	2301      	movs	r3, #1
 800e656:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e658:	2300      	movs	r3, #0
 800e65a:	61bb      	str	r3, [r7, #24]
 800e65c:	e01f      	b.n	800e69e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	015a      	lsls	r2, r3, #5
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	4413      	add	r3, r2
 800e666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e674:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e67c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e684:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	015a      	lsls	r2, r3, #5
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	4413      	add	r3, r2
 800e68e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e692:	461a      	mov	r2, r3
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	3301      	adds	r3, #1
 800e69c:	61bb      	str	r3, [r7, #24]
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	2b0f      	cmp	r3, #15
 800e6a2:	d9dc      	bls.n	800e65e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	61bb      	str	r3, [r7, #24]
 800e6a8:	e034      	b.n	800e714 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	015a      	lsls	r2, r3, #5
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	4413      	add	r3, r2
 800e6b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e6c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e6c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e6d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	015a      	lsls	r2, r3, #5
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	4413      	add	r3, r2
 800e6da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e6de:	461a      	mov	r2, r3
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e6f0:	d80c      	bhi.n	800e70c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e6f2:	69bb      	ldr	r3, [r7, #24]
 800e6f4:	015a      	lsls	r2, r3, #5
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e704:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e708:	d0ec      	beq.n	800e6e4 <USB_StopHost+0xc8>
 800e70a:	e000      	b.n	800e70e <USB_StopHost+0xf2>
        break;
 800e70c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e70e:	69bb      	ldr	r3, [r7, #24]
 800e710:	3301      	adds	r3, #1
 800e712:	61bb      	str	r3, [r7, #24]
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	2b0f      	cmp	r3, #15
 800e718:	d9c7      	bls.n	800e6aa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e720:	461a      	mov	r2, r3
 800e722:	f04f 33ff 	mov.w	r3, #4294967295
 800e726:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f04f 32ff 	mov.w	r2, #4294967295
 800e72e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f7fe fefb 	bl	800d52c <USB_EnableGlobalInt>

  return ret;
 800e736:	7ffb      	ldrb	r3, [r7, #31]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3720      	adds	r7, #32
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e740:	b590      	push	{r4, r7, lr}
 800e742:	b08b      	sub	sp, #44	@ 0x2c
 800e744:	af04      	add	r7, sp, #16
 800e746:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 800e748:	2300      	movs	r3, #0
 800e74a:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e752:	7919      	ldrb	r1, [r3, #4]
 800e754:	23ff      	movs	r3, #255	@ 0xff
 800e756:	2201      	movs	r2, #1
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f001 f879 	bl	800f850 <USBH_FindInterface>
 800e75e:	4603      	mov	r3, r0
 800e760:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e762:	7dbb      	ldrb	r3, [r7, #22]
 800e764:	2bff      	cmp	r3, #255	@ 0xff
 800e766:	d002      	beq.n	800e76e <USBH_HID_InterfaceInit+0x2e>
 800e768:	7dbb      	ldrb	r3, [r7, #22]
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d90f      	bls.n	800e78e <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800e76e:	48a9      	ldr	r0, [pc, #676]	@ (800ea14 <USBH_HID_InterfaceInit+0x2d4>)
 800e770:	f003 fa5c 	bl	8011c2c <iprintf>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4619      	mov	r1, r3
 800e77e:	48a6      	ldr	r0, [pc, #664]	@ (800ea18 <USBH_HID_InterfaceInit+0x2d8>)
 800e780:	f003 fa54 	bl	8011c2c <iprintf>
 800e784:	200a      	movs	r0, #10
 800e786:	f003 fa63 	bl	8011c50 <putchar>
    return USBH_FAIL;
 800e78a:	2302      	movs	r3, #2
 800e78c:	e13d      	b.n	800ea0a <USBH_HID_InterfaceInit+0x2ca>
  }

  status = USBH_SelectInterface(phost, interface);
 800e78e:	7dbb      	ldrb	r3, [r7, #22]
 800e790:	4619      	mov	r1, r3
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 fff4 	bl	800f780 <USBH_SelectInterface>
 800e798:	4603      	mov	r3, r0
 800e79a:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800e79c:	7d7b      	ldrb	r3, [r7, #21]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d001      	beq.n	800e7a6 <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 800e7a2:	2302      	movs	r3, #2
 800e7a4:	e131      	b.n	800ea0a <USBH_HID_InterfaceInit+0x2ca>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 4d34 	ldr.w	r4, [r3, #3380]	@ 0xd34
 800e7ac:	2034      	movs	r0, #52	@ 0x34
 800e7ae:	f003 f8bd 	bl	801192c <malloc>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e7bc:	69db      	ldr	r3, [r3, #28]
 800e7be:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d10a      	bne.n	800e7dc <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 800e7c6:	4893      	ldr	r0, [pc, #588]	@ (800ea14 <USBH_HID_InterfaceInit+0x2d4>)
 800e7c8:	f003 fa30 	bl	8011c2c <iprintf>
 800e7cc:	4893      	ldr	r0, [pc, #588]	@ (800ea1c <USBH_HID_InterfaceInit+0x2dc>)
 800e7ce:	f003 fa2d 	bl	8011c2c <iprintf>
 800e7d2:	200a      	movs	r0, #10
 800e7d4:	f003 fa3c 	bl	8011c50 <putchar>
    return USBH_FAIL;
 800e7d8:	2302      	movs	r3, #2
 800e7da:	e116      	b.n	800ea0a <USBH_HID_InterfaceInit+0x2ca>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800e7dc:	2234      	movs	r2, #52	@ 0x34
 800e7de:	2100      	movs	r1, #0
 800e7e0:	6938      	ldr	r0, [r7, #16]
 800e7e2:	f003 fb93 	bl	8011f0c <memset>

  HID_Handle->state = USBH_HID_ERROR;
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	2207      	movs	r2, #7
 800e7ea:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800e7ec:	7dbb      	ldrb	r3, [r7, #22]
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	211a      	movs	r1, #26
 800e7f2:	fb01 f303 	mul.w	r3, r1, r3
 800e7f6:	4413      	add	r3, r2
 800e7f8:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	2b01      	cmp	r3, #1
 800e800:	d109      	bne.n	800e816 <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 800e802:	4887      	ldr	r0, [pc, #540]	@ (800ea20 <USBH_HID_InterfaceInit+0x2e0>)
 800e804:	f003 fa12 	bl	8011c2c <iprintf>
 800e808:	200a      	movs	r0, #10
 800e80a:	f003 fa21 	bl	8011c50 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	4a84      	ldr	r2, [pc, #528]	@ (800ea24 <USBH_HID_InterfaceInit+0x2e4>)
 800e812:	631a      	str	r2, [r3, #48]	@ 0x30
 800e814:	e01c      	b.n	800e850 <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800e816:	7dbb      	ldrb	r3, [r7, #22]
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	211a      	movs	r1, #26
 800e81c:	fb01 f303 	mul.w	r3, r1, r3
 800e820:	4413      	add	r3, r2
 800e822:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	2b02      	cmp	r3, #2
 800e82a:	d109      	bne.n	800e840 <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 800e82c:	487e      	ldr	r0, [pc, #504]	@ (800ea28 <USBH_HID_InterfaceInit+0x2e8>)
 800e82e:	f003 f9fd 	bl	8011c2c <iprintf>
 800e832:	200a      	movs	r0, #10
 800e834:	f003 fa0c 	bl	8011c50 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	4a7c      	ldr	r2, [pc, #496]	@ (800ea2c <USBH_HID_InterfaceInit+0x2ec>)
 800e83c:	631a      	str	r2, [r3, #48]	@ 0x30
 800e83e:	e007      	b.n	800e850 <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 800e840:	487b      	ldr	r0, [pc, #492]	@ (800ea30 <USBH_HID_InterfaceInit+0x2f0>)
 800e842:	f003 f9f3 	bl	8011c2c <iprintf>
 800e846:	200a      	movs	r0, #10
 800e848:	f003 fa02 	bl	8011c50 <putchar>
    return USBH_FAIL;
 800e84c:	2302      	movs	r3, #2
 800e84e:	e0dc      	b.n	800ea0a <USBH_HID_InterfaceInit+0x2ca>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	2200      	movs	r2, #0
 800e854:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	2200      	movs	r2, #0
 800e85a:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e85c:	7dbb      	ldrb	r3, [r7, #22]
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	211a      	movs	r1, #26
 800e862:	fb01 f303 	mul.w	r3, r1, r3
 800e866:	4413      	add	r3, r2
 800e868:	f603 5306 	addw	r3, r3, #3334	@ 0xd06
 800e86c:	781a      	ldrb	r2, [r3, #0]
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e872:	7dbb      	ldrb	r3, [r7, #22]
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	211a      	movs	r1, #26
 800e878:	fb01 f303 	mul.w	r3, r1, r3
 800e87c:	4413      	add	r3, r2
 800e87e:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 800e882:	881a      	ldrh	r2, [r3, #0]
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800e888:	7dbb      	ldrb	r3, [r7, #22]
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	211a      	movs	r1, #26
 800e88e:	fb01 f303 	mul.w	r3, r1, r3
 800e892:	4413      	add	r3, r2
 800e894:	f603 530a 	addw	r3, r3, #3338	@ 0xd0a
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	461a      	mov	r2, r3
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	8b9b      	ldrh	r3, [r3, #28]
 800e8a4:	2b09      	cmp	r3, #9
 800e8a6:	d802      	bhi.n	800e8ae <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	220a      	movs	r2, #10
 800e8ac:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800e8ae:	7dbb      	ldrb	r3, [r7, #22]
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	211a      	movs	r1, #26
 800e8b4:	fb01 f303 	mul.w	r3, r1, r3
 800e8b8:	4413      	add	r3, r2
 800e8ba:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	bf28      	it	cs
 800e8c4:	2302      	movcs	r3, #2
 800e8c6:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	75fb      	strb	r3, [r7, #23]
 800e8cc:	e097      	b.n	800e9fe <USBH_HID_InterfaceInit+0x2be>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800e8ce:	7dbb      	ldrb	r3, [r7, #22]
 800e8d0:	7df9      	ldrb	r1, [r7, #23]
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	3101      	adds	r1, #1
 800e8d6:	00c9      	lsls	r1, r1, #3
 800e8d8:	201a      	movs	r0, #26
 800e8da:	fb00 f303 	mul.w	r3, r0, r3
 800e8de:	440b      	add	r3, r1
 800e8e0:	4413      	add	r3, r2
 800e8e2:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	b25b      	sxtb	r3, r3
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	da42      	bge.n	800e974 <USBH_HID_InterfaceInit+0x234>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800e8ee:	7dbb      	ldrb	r3, [r7, #22]
 800e8f0:	7df9      	ldrb	r1, [r7, #23]
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	3101      	adds	r1, #1
 800e8f6:	00c9      	lsls	r1, r1, #3
 800e8f8:	201a      	movs	r0, #26
 800e8fa:	fb00 f303 	mul.w	r3, r0, r3
 800e8fe:	440b      	add	r3, r1
 800e900:	4413      	add	r3, r2
 800e902:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e906:	781a      	ldrb	r2, [r3, #0]
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	791b      	ldrb	r3, [r3, #4]
 800e910:	4619      	mov	r1, r3
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f002 fc93 	bl	801123e <USBH_AllocPipe>
 800e918:	4603      	mov	r3, r0
 800e91a:	461a      	mov	r2, r3
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800e920:	7dbb      	ldrb	r3, [r7, #22]
 800e922:	7df9      	ldrb	r1, [r7, #23]
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	3101      	adds	r1, #1
 800e928:	00c9      	lsls	r1, r1, #3
 800e92a:	201a      	movs	r0, #26
 800e92c:	fb00 f303 	mul.w	r3, r0, r3
 800e930:	440b      	add	r3, r1
 800e932:	4413      	add	r3, r2
 800e934:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800e938:	881b      	ldrh	r3, [r3, #0]
 800e93a:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	7859      	ldrb	r1, [r3, #1]
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	7918      	ldrb	r0, [r3, #4]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800e950:	89ba      	ldrh	r2, [r7, #12]
 800e952:	9202      	str	r2, [sp, #8]
 800e954:	2203      	movs	r2, #3
 800e956:	9201      	str	r2, [sp, #4]
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	4623      	mov	r3, r4
 800e95c:	4602      	mov	r2, r0
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f002 fc3e 	bl	80111e0 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	785b      	ldrb	r3, [r3, #1]
 800e968:	2200      	movs	r2, #0
 800e96a:	4619      	mov	r1, r3
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f002 ff57 	bl	8011820 <USBH_LL_SetToggle>
 800e972:	e041      	b.n	800e9f8 <USBH_HID_InterfaceInit+0x2b8>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800e974:	7dbb      	ldrb	r3, [r7, #22]
 800e976:	7df9      	ldrb	r1, [r7, #23]
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	3101      	adds	r1, #1
 800e97c:	00c9      	lsls	r1, r1, #3
 800e97e:	201a      	movs	r0, #26
 800e980:	fb00 f303 	mul.w	r3, r0, r3
 800e984:	440b      	add	r3, r1
 800e986:	4413      	add	r3, r2
 800e988:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800e98c:	781a      	ldrb	r2, [r3, #0]
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	78db      	ldrb	r3, [r3, #3]
 800e996:	4619      	mov	r1, r3
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f002 fc50 	bl	801123e <USBH_AllocPipe>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800e9a6:	7dbb      	ldrb	r3, [r7, #22]
 800e9a8:	7df9      	ldrb	r1, [r7, #23]
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	3101      	adds	r1, #1
 800e9ae:	00c9      	lsls	r1, r1, #3
 800e9b0:	201a      	movs	r0, #26
 800e9b2:	fb00 f303 	mul.w	r3, r0, r3
 800e9b6:	440b      	add	r3, r1
 800e9b8:	4413      	add	r3, r2
 800e9ba:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800e9be:	881b      	ldrh	r3, [r3, #0]
 800e9c0:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	7819      	ldrb	r1, [r3, #0]
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	78d8      	ldrb	r0, [r3, #3]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800e9d6:	89ba      	ldrh	r2, [r7, #12]
 800e9d8:	9202      	str	r2, [sp, #8]
 800e9da:	2203      	movs	r2, #3
 800e9dc:	9201      	str	r2, [sp, #4]
 800e9de:	9300      	str	r3, [sp, #0]
 800e9e0:	4623      	mov	r3, r4
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f002 fbfb 	bl	80111e0 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f002 ff14 	bl	8011820 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800e9f8:	7dfb      	ldrb	r3, [r7, #23]
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	75fb      	strb	r3, [r7, #23]
 800e9fe:	7dfa      	ldrb	r2, [r7, #23]
 800ea00:	7bfb      	ldrb	r3, [r7, #15]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	f4ff af63 	bcc.w	800e8ce <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 800ea08:	2300      	movs	r3, #0
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	371c      	adds	r7, #28
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd90      	pop	{r4, r7, pc}
 800ea12:	bf00      	nop
 800ea14:	08012da4 	.word	0x08012da4
 800ea18:	08012db0 	.word	0x08012db0
 800ea1c:	08012dd8 	.word	0x08012dd8
 800ea20:	08012e00 	.word	0x08012e00
 800ea24:	0800f169 	.word	0x0800f169
 800ea28:	08012e18 	.word	0x08012e18
 800ea2c:	0800f3b9 	.word	0x0800f3b9
 800ea30:	08012e2c 	.word	0x08012e2c

0800ea34 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ea42:	69db      	ldr	r3, [r3, #28]
 800ea44:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	785b      	ldrb	r3, [r3, #1]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d00e      	beq.n	800ea6c <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	785b      	ldrb	r3, [r3, #1]
 800ea52:	4619      	mov	r1, r3
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f002 fbe2 	bl	801121e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	785b      	ldrb	r3, [r3, #1]
 800ea5e:	4619      	mov	r1, r3
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f002 fc0e 	bl	8011282 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00e      	beq.n	800ea92 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	4619      	mov	r1, r3
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f002 fbcf 	bl	801121e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	4619      	mov	r1, r3
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f002 fbfb 	bl	8011282 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ea98:	69db      	ldr	r3, [r3, #28]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00b      	beq.n	800eab6 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800eaa4:	69db      	ldr	r3, [r3, #28]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f002 ff48 	bl	801193c <free>
    phost->pActiveClass->pData = 0U;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800eab2:	2200      	movs	r2, #0
 800eab4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800eab6:	2300      	movs	r3, #0
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3710      	adds	r7, #16
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800eac8:	2301      	movs	r3, #1
 800eaca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800eacc:	2301      	movs	r3, #1
 800eace:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ead6:	69db      	ldr	r3, [r3, #28]
 800ead8:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	795b      	ldrb	r3, [r3, #5]
 800eade:	2b05      	cmp	r3, #5
 800eae0:	d872      	bhi.n	800ebc8 <USBH_HID_ClassRequest+0x108>
 800eae2:	a201      	add	r2, pc, #4	@ (adr r2, 800eae8 <USBH_HID_ClassRequest+0x28>)
 800eae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae8:	0800eb01 	.word	0x0800eb01
 800eaec:	0800ebc9 	.word	0x0800ebc9
 800eaf0:	0800eb1b 	.word	0x0800eb1b
 800eaf4:	0800eb01 	.word	0x0800eb01
 800eaf8:	0800eb57 	.word	0x0800eb57
 800eafc:	0800eb81 	.word	0x0800eb81
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	331c      	adds	r3, #28
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	4610      	mov	r0, r2
 800eb0e:	f000 fa17 	bl	800ef40 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	2202      	movs	r2, #2
 800eb16:	715a      	strb	r2, [r3, #5]

      break;
 800eb18:	e05d      	b.n	800ebd6 <USBH_HID_ClassRequest+0x116>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800eb1e:	4619      	mov	r1, r3
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f000 f965 	bl	800edf0 <USBH_HID_GetHIDReportDescriptor>
 800eb26:	4603      	mov	r3, r0
 800eb28:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800eb2a:	7bbb      	ldrb	r3, [r7, #14]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d103      	bne.n	800eb38 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	2204      	movs	r2, #4
 800eb34:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800eb36:	e049      	b.n	800ebcc <USBH_HID_ClassRequest+0x10c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800eb38:	7bbb      	ldrb	r3, [r7, #14]
 800eb3a:	2b03      	cmp	r3, #3
 800eb3c:	d146      	bne.n	800ebcc <USBH_HID_ClassRequest+0x10c>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 800eb3e:	4828      	ldr	r0, [pc, #160]	@ (800ebe0 <USBH_HID_ClassRequest+0x120>)
 800eb40:	f003 f874 	bl	8011c2c <iprintf>
 800eb44:	4827      	ldr	r0, [pc, #156]	@ (800ebe4 <USBH_HID_ClassRequest+0x124>)
 800eb46:	f003 f871 	bl	8011c2c <iprintf>
 800eb4a:	200a      	movs	r0, #10
 800eb4c:	f003 f880 	bl	8011c50 <putchar>
        status = USBH_FAIL;
 800eb50:	2302      	movs	r3, #2
 800eb52:	73fb      	strb	r3, [r7, #15]
      break;
 800eb54:	e03a      	b.n	800ebcc <USBH_HID_ClassRequest+0x10c>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800eb56:	2200      	movs	r2, #0
 800eb58:	2100      	movs	r1, #0
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 f976 	bl	800ee4c <USBH_HID_SetIdle>
 800eb60:	4603      	mov	r3, r0
 800eb62:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800eb64:	7bbb      	ldrb	r3, [r7, #14]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d103      	bne.n	800eb72 <USBH_HID_ClassRequest+0xb2>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	2205      	movs	r2, #5
 800eb6e:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800eb70:	e02e      	b.n	800ebd0 <USBH_HID_ClassRequest+0x110>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800eb72:	7bbb      	ldrb	r3, [r7, #14]
 800eb74:	2b03      	cmp	r3, #3
 800eb76:	d12b      	bne.n	800ebd0 <USBH_HID_ClassRequest+0x110>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	2205      	movs	r2, #5
 800eb7c:	715a      	strb	r2, [r3, #5]
      break;
 800eb7e:	e027      	b.n	800ebd0 <USBH_HID_ClassRequest+0x110>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800eb80:	2100      	movs	r1, #0
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 f9b6 	bl	800eef4 <USBH_HID_SetProtocol>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800eb8c:	7bbb      	ldrb	r3, [r7, #14]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d10b      	bne.n	800ebaa <USBH_HID_ClassRequest+0xea>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	2201      	movs	r2, #1
 800eb96:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800eb9e:	2102      	movs	r1, #2
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	4798      	blx	r3
        status = USBH_OK;
 800eba4:	2300      	movs	r3, #0
 800eba6:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800eba8:	e014      	b.n	800ebd4 <USBH_HID_ClassRequest+0x114>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800ebaa:	7bbb      	ldrb	r3, [r7, #14]
 800ebac:	2b03      	cmp	r3, #3
 800ebae:	d111      	bne.n	800ebd4 <USBH_HID_ClassRequest+0x114>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 800ebb0:	480b      	ldr	r0, [pc, #44]	@ (800ebe0 <USBH_HID_ClassRequest+0x120>)
 800ebb2:	f003 f83b 	bl	8011c2c <iprintf>
 800ebb6:	480c      	ldr	r0, [pc, #48]	@ (800ebe8 <USBH_HID_ClassRequest+0x128>)
 800ebb8:	f003 f838 	bl	8011c2c <iprintf>
 800ebbc:	200a      	movs	r0, #10
 800ebbe:	f003 f847 	bl	8011c50 <putchar>
        status = USBH_FAIL;
 800ebc2:	2302      	movs	r3, #2
 800ebc4:	73fb      	strb	r3, [r7, #15]
      break;
 800ebc6:	e005      	b.n	800ebd4 <USBH_HID_ClassRequest+0x114>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 800ebc8:	bf00      	nop
 800ebca:	e004      	b.n	800ebd6 <USBH_HID_ClassRequest+0x116>
      break;
 800ebcc:	bf00      	nop
 800ebce:	e002      	b.n	800ebd6 <USBH_HID_ClassRequest+0x116>
      break;
 800ebd0:	bf00      	nop
 800ebd2:	e000      	b.n	800ebd6 <USBH_HID_ClassRequest+0x116>
      break;
 800ebd4:	bf00      	nop
  }

  return status;
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3710      	adds	r7, #16
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	08012e44 	.word	0x08012e44
 800ebe4:	08012e4c 	.word	0x08012e4c
 800ebe8:	08012e8c 	.word	0x08012e8c

0800ebec <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b088      	sub	sp, #32
 800ebf0:	af02      	add	r7, sp, #8
 800ebf2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ebfe:	69db      	ldr	r3, [r3, #28]
 800ec00:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	789b      	ldrb	r3, [r3, #2]
 800ec06:	2b06      	cmp	r3, #6
 800ec08:	f200 80c1 	bhi.w	800ed8e <USBH_HID_Process+0x1a2>
 800ec0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ec14 <USBH_HID_Process+0x28>)
 800ec0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec12:	bf00      	nop
 800ec14:	0800ec31 	.word	0x0800ec31
 800ec18:	0800ec69 	.word	0x0800ec69
 800ec1c:	0800ed8f 	.word	0x0800ed8f
 800ec20:	0800ed8f 	.word	0x0800ed8f
 800ec24:	0800ecd9 	.word	0x0800ecd9
 800ec28:	0800ecc3 	.word	0x0800ecc3
 800ec2c:	0800ed07 	.word	0x0800ed07
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	4798      	blx	r3
 800ec38:	4603      	mov	r3, r0
 800ec3a:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800ec3c:	7dfb      	ldrb	r3, [r7, #23]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d103      	bne.n	800ec4a <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	2201      	movs	r2, #1
 800ec46:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ec48:	e0a6      	b.n	800ed98 <USBH_HID_Process+0x1ac>
        USBH_ErrLog("HID Class Init failed");
 800ec4a:	4856      	ldr	r0, [pc, #344]	@ (800eda4 <USBH_HID_Process+0x1b8>)
 800ec4c:	f002 ffee 	bl	8011c2c <iprintf>
 800ec50:	4855      	ldr	r0, [pc, #340]	@ (800eda8 <USBH_HID_Process+0x1bc>)
 800ec52:	f002 ffeb 	bl	8011c2c <iprintf>
 800ec56:	200a      	movs	r0, #10
 800ec58:	f002 fffa 	bl	8011c50 <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	2207      	movs	r2, #7
 800ec60:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800ec62:	2302      	movs	r3, #2
 800ec64:	75fb      	strb	r3, [r7, #23]
      break;
 800ec66:	e097      	b.n	800ed98 <USBH_HID_Process+0x1ac>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	695a      	ldr	r2, [r3, #20]
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	8b1b      	ldrh	r3, [r3, #24]
 800ec70:	b2db      	uxtb	r3, r3
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	4613      	mov	r3, r2
 800ec76:	2200      	movs	r2, #0
 800ec78:	2101      	movs	r1, #1
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 f90e 	bl	800ee9c <USBH_HID_GetReport>
 800ec80:	4603      	mov	r3, r0
 800ec82:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800ec84:	7dfb      	ldrb	r3, [r7, #23]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d103      	bne.n	800ec92 <USBH_HID_Process+0xa6>
      {
        HID_Handle->state = USBH_HID_SYNC;
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	2205      	movs	r2, #5
 800ec8e:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ec90:	e082      	b.n	800ed98 <USBH_HID_Process+0x1ac>
      else if (status == USBH_BUSY)
 800ec92:	7dfb      	ldrb	r3, [r7, #23]
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d105      	bne.n	800eca4 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_IDLE;
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	75fb      	strb	r3, [r7, #23]
      break;
 800eca2:	e079      	b.n	800ed98 <USBH_HID_Process+0x1ac>
      else if (status == USBH_NOT_SUPPORTED)
 800eca4:	7dfb      	ldrb	r3, [r7, #23]
 800eca6:	2b03      	cmp	r3, #3
 800eca8:	d105      	bne.n	800ecb6 <USBH_HID_Process+0xca>
        HID_Handle->state = USBH_HID_SYNC;
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	2205      	movs	r2, #5
 800ecae:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	75fb      	strb	r3, [r7, #23]
      break;
 800ecb4:	e070      	b.n	800ed98 <USBH_HID_Process+0x1ac>
        HID_Handle->state = USBH_HID_ERROR;
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	2207      	movs	r2, #7
 800ecba:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800ecbc:	2302      	movs	r3, #2
 800ecbe:	75fb      	strb	r3, [r7, #23]
      break;
 800ecc0:	e06a      	b.n	800ed98 <USBH_HID_Process+0x1ac>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800ecc8:	f003 0301 	and.w	r3, r3, #1
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d060      	beq.n	800ed92 <USBH_HID_Process+0x1a6>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	2204      	movs	r2, #4
 800ecd4:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ecd6:	e05c      	b.n	800ed92 <USBH_HID_Process+0x1a6>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800ece0:	b2da      	uxtb	r2, r3
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	785b      	ldrb	r3, [r3, #1]
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f002 fa5b 	bl	80111a2 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	2206      	movs	r2, #6
 800ecf0:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 800ed04:	e048      	b.n	800ed98 <USBH_HID_Process+0x1ac>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	785b      	ldrb	r3, [r3, #1]
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f002 fd5d 	bl	80117cc <USBH_LL_GetURBState>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d124      	bne.n	800ed62 <USBH_HID_Process+0x176>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	785b      	ldrb	r3, [r3, #1]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f002 fcc2 	bl	80116a8 <USBH_LL_GetLastXferSize>
 800ed24:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d132      	bne.n	800ed96 <USBH_HID_Process+0x1aa>
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d02f      	beq.n	800ed96 <USBH_HID_Process+0x1aa>
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d02b      	beq.n	800ed96 <USBH_HID_Process+0x1aa>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800ed3e:	693b      	ldr	r3, [r7, #16]
 800ed40:	f103 0008 	add.w	r0, r3, #8
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	6959      	ldr	r1, [r3, #20]
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	8b1b      	ldrh	r3, [r3, #24]
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	f000 f9b7 	bl	800f0c0 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	2201      	movs	r2, #1
 800ed56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f7f1 fc18 	bl	8000590 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 800ed60:	e019      	b.n	800ed96 <USBH_HID_Process+0x1aa>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	785b      	ldrb	r3, [r3, #1]
 800ed66:	4619      	mov	r1, r3
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f002 fd2f 	bl	80117cc <USBH_LL_GetURBState>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b05      	cmp	r3, #5
 800ed72:	d110      	bne.n	800ed96 <USBH_HID_Process+0x1aa>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	7e9b      	ldrb	r3, [r3, #26]
 800ed78:	4619      	mov	r1, r3
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f001 fcbe 	bl	80106fc <USBH_ClrFeature>
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d107      	bne.n	800ed96 <USBH_HID_Process+0x1aa>
            HID_Handle->state = USBH_HID_GET_DATA;
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	2204      	movs	r2, #4
 800ed8a:	709a      	strb	r2, [r3, #2]
      break;
 800ed8c:	e003      	b.n	800ed96 <USBH_HID_Process+0x1aa>

    default:
      break;
 800ed8e:	bf00      	nop
 800ed90:	e002      	b.n	800ed98 <USBH_HID_Process+0x1ac>
      break;
 800ed92:	bf00      	nop
 800ed94:	e000      	b.n	800ed98 <USBH_HID_Process+0x1ac>
      break;
 800ed96:	bf00      	nop
  }

  return status;
 800ed98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3718      	adds	r7, #24
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	08012e44 	.word	0x08012e44
 800eda8:	08012ec4 	.word	0x08012ec4

0800edac <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800edac:	b480      	push	{r7}
 800edae:	b085      	sub	sp, #20
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800edba:	69db      	ldr	r3, [r3, #28]
 800edbc:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	789b      	ldrb	r3, [r3, #2]
 800edc2:	2b06      	cmp	r3, #6
 800edc4:	d10c      	bne.n	800ede0 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	6a1b      	ldr	r3, [r3, #32]
 800edd0:	1ad3      	subs	r3, r2, r3
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	8b92      	ldrh	r2, [r2, #28]
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d302      	bcc.n	800ede0 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2204      	movs	r2, #4
 800edde:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800ede0:	2300      	movs	r3, #0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3714      	adds	r7, #20
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr
	...

0800edf0 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b086      	sub	sp, #24
 800edf4:	af02      	add	r7, sp, #8
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800edfc:	887b      	ldrh	r3, [r7, #2]
 800edfe:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d90a      	bls.n	800ee1c <USBH_HID_GetHIDReportDescriptor+0x2c>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 800ee06:	480f      	ldr	r0, [pc, #60]	@ (800ee44 <USBH_HID_GetHIDReportDescriptor+0x54>)
 800ee08:	f002 ff10 	bl	8011c2c <iprintf>
 800ee0c:	480e      	ldr	r0, [pc, #56]	@ (800ee48 <USBH_HID_GetHIDReportDescriptor+0x58>)
 800ee0e:	f002 ff0d 	bl	8011c2c <iprintf>
 800ee12:	200a      	movs	r0, #10
 800ee14:	f002 ff1c 	bl	8011c50 <putchar>
    return USBH_NOT_SUPPORTED;
 800ee18:	2303      	movs	r3, #3
 800ee1a:	e00e      	b.n	800ee3a <USBH_HID_GetHIDReportDescriptor+0x4a>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ee22:	887b      	ldrh	r3, [r7, #2]
 800ee24:	9300      	str	r3, [sp, #0]
 800ee26:	4613      	mov	r3, r2
 800ee28:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800ee2c:	2101      	movs	r1, #1
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f001 fbc4 	bl	80105bc <USBH_GetDescriptor>
 800ee34:	4603      	mov	r3, r0
 800ee36:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800ee38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	08012e44 	.word	0x08012e44
 800ee48:	08012edc 	.word	0x08012edc

0800ee4c <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	460b      	mov	r3, r1
 800ee56:	70fb      	strb	r3, [r7, #3]
 800ee58:	4613      	mov	r3, r2
 800ee5a:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2221      	movs	r2, #33	@ 0x21
 800ee60:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	220a      	movs	r2, #10
 800ee66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800ee68:	78fb      	ldrb	r3, [r7, #3]
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	021b      	lsls	r3, r3, #8
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	78bb      	ldrb	r3, [r7, #2]
 800ee72:	b29b      	uxth	r3, r3
 800ee74:	4313      	orrs	r3, r2
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800ee88:	2200      	movs	r2, #0
 800ee8a:	2100      	movs	r1, #0
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f001 ff6b 	bl	8010d68 <USBH_CtlReq>
 800ee92:	4603      	mov	r3, r0
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	607b      	str	r3, [r7, #4]
 800eea6:	460b      	mov	r3, r1
 800eea8:	72fb      	strb	r3, [r7, #11]
 800eeaa:	4613      	mov	r3, r2
 800eeac:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	22a1      	movs	r2, #161	@ 0xa1
 800eeb2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800eeba:	7afb      	ldrb	r3, [r7, #11]
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	021b      	lsls	r3, r3, #8
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	7abb      	ldrb	r3, [r7, #10]
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	4313      	orrs	r3, r2
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2200      	movs	r2, #0
 800eed2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800eed4:	7e3b      	ldrb	r3, [r7, #24]
 800eed6:	b29a      	uxth	r2, r3
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800eedc:	7e3b      	ldrb	r3, [r7, #24]
 800eede:	b29b      	uxth	r3, r3
 800eee0:	461a      	mov	r2, r3
 800eee2:	6879      	ldr	r1, [r7, #4]
 800eee4:	68f8      	ldr	r0, [r7, #12]
 800eee6:	f001 ff3f 	bl	8010d68 <USBH_CtlReq>
 800eeea:	4603      	mov	r3, r0
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3710      	adds	r7, #16
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	460b      	mov	r3, r1
 800eefe:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2221      	movs	r2, #33	@ 0x21
 800ef04:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	220b      	movs	r2, #11
 800ef0a:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800ef0c:	78fb      	ldrb	r3, [r7, #3]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d003      	beq.n	800ef1a <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2200      	movs	r2, #0
 800ef16:	825a      	strh	r2, [r3, #18]
 800ef18:	e002      	b.n	800ef20 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2200      	movs	r2, #0
 800ef24:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	2100      	movs	r1, #0
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f001 ff19 	bl	8010d68 <USBH_CtlReq>
 800ef36:	4603      	mov	r3, r0

}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b084      	sub	sp, #16
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	3302      	adds	r3, #2
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	461a      	mov	r2, r3
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	3303      	adds	r3, #3
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	021b      	lsls	r3, r3, #8
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	4313      	orrs	r3, r2
 800ef62:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800ef64:	897b      	ldrh	r3, [r7, #10]
 800ef66:	2b09      	cmp	r3, #9
 800ef68:	d941      	bls.n	800efee <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 800ef6a:	2309      	movs	r3, #9
 800ef6c:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800ef6e:	e03a      	b.n	800efe6 <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ef70:	f107 0308 	add.w	r3, r7, #8
 800ef74:	4619      	mov	r1, r3
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	f001 fedc 	bl	8010d34 <USBH_GetNextDesc>
 800ef7c:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	785b      	ldrb	r3, [r3, #1]
 800ef82:	2b21      	cmp	r3, #33	@ 0x21
 800ef84:	d12f      	bne.n	800efe6 <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	781a      	ldrb	r2, [r3, #0]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	785a      	ldrb	r2, [r3, #1]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	3302      	adds	r3, #2
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	3303      	adds	r3, #3
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	021b      	lsls	r3, r3, #8
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	4313      	orrs	r3, r2
 800efaa:	b29a      	uxth	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	791a      	ldrb	r2, [r3, #4]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	795a      	ldrb	r2, [r3, #5]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	799a      	ldrb	r2, [r3, #6]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	3307      	adds	r3, #7
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	461a      	mov	r2, r3
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	3308      	adds	r3, #8
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	021b      	lsls	r3, r3, #8
 800efd8:	b29b      	uxth	r3, r3
 800efda:	4313      	orrs	r3, r2
 800efdc:	b29a      	uxth	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	811a      	strh	r2, [r3, #8]
        break;
 800efe2:	bf00      	nop
      }
    }
  }
}
 800efe4:	e003      	b.n	800efee <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800efe6:	893b      	ldrh	r3, [r7, #8]
 800efe8:	897a      	ldrh	r2, [r7, #10]
 800efea:	429a      	cmp	r2, r3
 800efec:	d8c0      	bhi.n	800ef70 <USBH_HID_ParseHIDDesc+0x30>
}
 800efee:	bf00      	nop
 800eff0:	3710      	adds	r7, #16
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800eff6:	b480      	push	{r7}
 800eff8:	b085      	sub	sp, #20
 800effa:	af00      	add	r7, sp, #0
 800effc:	60f8      	str	r0, [r7, #12]
 800effe:	60b9      	str	r1, [r7, #8]
 800f000:	4613      	mov	r3, r2
 800f002:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2200      	movs	r2, #0
 800f008:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2200      	movs	r2, #0
 800f00e:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2200      	movs	r2, #0
 800f014:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	88fa      	ldrh	r2, [r7, #6]
 800f01a:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	68ba      	ldr	r2, [r7, #8]
 800f020:	601a      	str	r2, [r3, #0]
}
 800f022:	bf00      	nop
 800f024:	3714      	adds	r7, #20
 800f026:	46bd      	mov	sp, r7
 800f028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02c:	4770      	bx	lr

0800f02e <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800f02e:	b480      	push	{r7}
 800f030:	b087      	sub	sp, #28
 800f032:	af00      	add	r7, sp, #0
 800f034:	60f8      	str	r0, [r7, #12]
 800f036:	60b9      	str	r1, [r7, #8]
 800f038:	4613      	mov	r3, r2
 800f03a:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	7a9b      	ldrb	r3, [r3, #10]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d131      	bne.n	800f0ac <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2201      	movs	r2, #1
 800f04c:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800f04e:	2300      	movs	r3, #0
 800f050:	82fb      	strh	r3, [r7, #22]
 800f052:	e027      	b.n	800f0a4 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	88da      	ldrh	r2, [r3, #6]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	889b      	ldrh	r3, [r3, #4]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d019      	beq.n	800f094 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	68fa      	ldr	r2, [r7, #12]
 800f066:	88d2      	ldrh	r2, [r2, #6]
 800f068:	441a      	add	r2, r3
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	1c59      	adds	r1, r3, #1
 800f06e:	6139      	str	r1, [r7, #16]
 800f070:	7812      	ldrb	r2, [r2, #0]
 800f072:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	88db      	ldrh	r3, [r3, #6]
 800f078:	3301      	adds	r3, #1
 800f07a:	b29a      	uxth	r2, r3
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	88da      	ldrh	r2, [r3, #6]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	891b      	ldrh	r3, [r3, #8]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d108      	bne.n	800f09e <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2200      	movs	r2, #0
 800f090:	80da      	strh	r2, [r3, #6]
 800f092:	e004      	b.n	800f09e <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2200      	movs	r2, #0
 800f098:	729a      	strb	r2, [r3, #10]
        return i;
 800f09a:	8afb      	ldrh	r3, [r7, #22]
 800f09c:	e00a      	b.n	800f0b4 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800f09e:	8afb      	ldrh	r3, [r7, #22]
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	82fb      	strh	r3, [r7, #22]
 800f0a4:	8afa      	ldrh	r2, [r7, #22]
 800f0a6:	88fb      	ldrh	r3, [r7, #6]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d3d3      	bcc.n	800f054 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800f0b2:	88fb      	ldrh	r3, [r7, #6]
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	371c      	adds	r7, #28
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr

0800f0c0 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b087      	sub	sp, #28
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	7a9b      	ldrb	r3, [r3, #10]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d13c      	bne.n	800f154 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2201      	movs	r2, #1
 800f0de:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	82fb      	strh	r3, [r7, #22]
 800f0e4:	e032      	b.n	800f14c <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	889b      	ldrh	r3, [r3, #4]
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	68fa      	ldr	r2, [r7, #12]
 800f0ee:	88d2      	ldrh	r2, [r2, #6]
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d00a      	beq.n	800f10a <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	889b      	ldrh	r3, [r3, #4]
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	68fa      	ldr	r2, [r7, #12]
 800f0fc:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d108      	bne.n	800f114 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	88db      	ldrh	r3, [r3, #6]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d104      	bne.n	800f114 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2200      	movs	r2, #0
 800f10e:	729a      	strb	r2, [r3, #10]
        return i;
 800f110:	8afb      	ldrh	r3, [r7, #22]
 800f112:	e023      	b.n	800f15c <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	1c5a      	adds	r2, r3, #1
 800f118:	613a      	str	r2, [r7, #16]
 800f11a:	68fa      	ldr	r2, [r7, #12]
 800f11c:	6812      	ldr	r2, [r2, #0]
 800f11e:	68f9      	ldr	r1, [r7, #12]
 800f120:	8889      	ldrh	r1, [r1, #4]
 800f122:	440a      	add	r2, r1
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	7013      	strb	r3, [r2, #0]
        f->head++;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	889b      	ldrh	r3, [r3, #4]
 800f12c:	3301      	adds	r3, #1
 800f12e:	b29a      	uxth	r2, r3
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	889a      	ldrh	r2, [r3, #4]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	891b      	ldrh	r3, [r3, #8]
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d102      	bne.n	800f146 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2200      	movs	r2, #0
 800f144:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800f146:	8afb      	ldrh	r3, [r7, #22]
 800f148:	3301      	adds	r3, #1
 800f14a:	82fb      	strh	r3, [r7, #22]
 800f14c:	8afa      	ldrh	r2, [r7, #22]
 800f14e:	88fb      	ldrh	r3, [r7, #6]
 800f150:	429a      	cmp	r2, r3
 800f152:	d3c8      	bcc.n	800f0e6 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2200      	movs	r2, #0
 800f158:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800f15a:	88fb      	ldrh	r3, [r7, #6]
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	371c      	adds	r7, #28
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr

0800f168 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f176:	69db      	ldr	r3, [r3, #28]
 800f178:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800f17a:	4b22      	ldr	r3, [pc, #136]	@ (800f204 <USBH_HID_KeybdInit+0x9c>)
 800f17c:	2200      	movs	r2, #0
 800f17e:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800f180:	4b20      	ldr	r3, [pc, #128]	@ (800f204 <USBH_HID_KeybdInit+0x9c>)
 800f182:	2200      	movs	r2, #0
 800f184:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800f186:	4b1f      	ldr	r3, [pc, #124]	@ (800f204 <USBH_HID_KeybdInit+0x9c>)
 800f188:	2200      	movs	r2, #0
 800f18a:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800f18c:	4b1d      	ldr	r3, [pc, #116]	@ (800f204 <USBH_HID_KeybdInit+0x9c>)
 800f18e:	2200      	movs	r2, #0
 800f190:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800f192:	4b1c      	ldr	r3, [pc, #112]	@ (800f204 <USBH_HID_KeybdInit+0x9c>)
 800f194:	2200      	movs	r2, #0
 800f196:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800f198:	4b1a      	ldr	r3, [pc, #104]	@ (800f204 <USBH_HID_KeybdInit+0x9c>)
 800f19a:	2200      	movs	r2, #0
 800f19c:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800f19e:	4b19      	ldr	r3, [pc, #100]	@ (800f204 <USBH_HID_KeybdInit+0x9c>)
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800f1a4:	4b17      	ldr	r3, [pc, #92]	@ (800f204 <USBH_HID_KeybdInit+0x9c>)
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	60fb      	str	r3, [r7, #12]
 800f1ae:	e00c      	b.n	800f1ca <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800f1b0:	4a15      	ldr	r2, [pc, #84]	@ (800f208 <USBH_HID_KeybdInit+0xa0>)
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 800f1ba:	4a14      	ldr	r2, [pc, #80]	@ (800f20c <USBH_HID_KeybdInit+0xa4>)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	4413      	add	r3, r2
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	60fb      	str	r3, [r7, #12]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2b07      	cmp	r3, #7
 800f1ce:	d9ef      	bls.n	800f1b0 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	8b1b      	ldrh	r3, [r3, #24]
 800f1d4:	2b08      	cmp	r3, #8
 800f1d6:	d902      	bls.n	800f1de <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	2208      	movs	r2, #8
 800f1dc:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	4a0a      	ldr	r2, [pc, #40]	@ (800f20c <USBH_HID_KeybdInit+0xa4>)
 800f1e2:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	f103 0008 	add.w	r0, r3, #8
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f1f0:	2250      	movs	r2, #80	@ 0x50
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	f7ff feff 	bl	800eff6 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800f1f8:	2300      	movs	r3, #0
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	200092cc 	.word	0x200092cc
 800f208:	200092e4 	.word	0x200092e4
 800f20c:	200092dc 	.word	0x200092dc

0800f210 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f000 f80d 	bl	800f238 <USBH_HID_KeybdDecode>
 800f21e:	4603      	mov	r3, r0
 800f220:	2b00      	cmp	r3, #0
 800f222:	d101      	bne.n	800f228 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800f224:	4b03      	ldr	r3, [pc, #12]	@ (800f234 <USBH_HID_GetKeybdInfo+0x24>)
 800f226:	e000      	b.n	800f22a <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800f228:	2300      	movs	r3, #0
  }
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3708      	adds	r7, #8
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	200092cc 	.word	0x200092cc

0800f238 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b084      	sub	sp, #16
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f246:	69db      	ldr	r3, [r3, #28]
 800f248:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	8b1b      	ldrh	r3, [r3, #24]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d003      	beq.n	800f25a <USBH_HID_KeybdDecode+0x22>
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	689b      	ldr	r3, [r3, #8]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d101      	bne.n	800f25e <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 800f25a:	2302      	movs	r3, #2
 800f25c:	e066      	b.n	800f32c <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	f103 0008 	add.w	r0, r3, #8
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	8b1b      	ldrh	r3, [r3, #24]
 800f268:	461a      	mov	r2, r3
 800f26a:	4932      	ldr	r1, [pc, #200]	@ (800f334 <USBH_HID_KeybdDecode+0xfc>)
 800f26c:	f7ff fedf 	bl	800f02e <USBH_HID_FifoRead>
 800f270:	4603      	mov	r3, r0
 800f272:	461a      	mov	r2, r3
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	8b1b      	ldrh	r3, [r3, #24]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d156      	bne.n	800f32a <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800f27c:	2100      	movs	r1, #0
 800f27e:	482e      	ldr	r0, [pc, #184]	@ (800f338 <USBH_HID_KeybdDecode+0x100>)
 800f280:	f000 f8e4 	bl	800f44c <HID_ReadItem>
 800f284:	4603      	mov	r3, r0
 800f286:	b2da      	uxtb	r2, r3
 800f288:	4b2c      	ldr	r3, [pc, #176]	@ (800f33c <USBH_HID_KeybdDecode+0x104>)
 800f28a:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800f28c:	2100      	movs	r1, #0
 800f28e:	482c      	ldr	r0, [pc, #176]	@ (800f340 <USBH_HID_KeybdDecode+0x108>)
 800f290:	f000 f8dc 	bl	800f44c <HID_ReadItem>
 800f294:	4603      	mov	r3, r0
 800f296:	b2da      	uxtb	r2, r3
 800f298:	4b28      	ldr	r3, [pc, #160]	@ (800f33c <USBH_HID_KeybdDecode+0x104>)
 800f29a:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800f29c:	2100      	movs	r1, #0
 800f29e:	4829      	ldr	r0, [pc, #164]	@ (800f344 <USBH_HID_KeybdDecode+0x10c>)
 800f2a0:	f000 f8d4 	bl	800f44c <HID_ReadItem>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	b2da      	uxtb	r2, r3
 800f2a8:	4b24      	ldr	r3, [pc, #144]	@ (800f33c <USBH_HID_KeybdDecode+0x104>)
 800f2aa:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800f2ac:	2100      	movs	r1, #0
 800f2ae:	4826      	ldr	r0, [pc, #152]	@ (800f348 <USBH_HID_KeybdDecode+0x110>)
 800f2b0:	f000 f8cc 	bl	800f44c <HID_ReadItem>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	b2da      	uxtb	r2, r3
 800f2b8:	4b20      	ldr	r3, [pc, #128]	@ (800f33c <USBH_HID_KeybdDecode+0x104>)
 800f2ba:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800f2bc:	2100      	movs	r1, #0
 800f2be:	4823      	ldr	r0, [pc, #140]	@ (800f34c <USBH_HID_KeybdDecode+0x114>)
 800f2c0:	f000 f8c4 	bl	800f44c <HID_ReadItem>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	b2da      	uxtb	r2, r3
 800f2c8:	4b1c      	ldr	r3, [pc, #112]	@ (800f33c <USBH_HID_KeybdDecode+0x104>)
 800f2ca:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	4820      	ldr	r0, [pc, #128]	@ (800f350 <USBH_HID_KeybdDecode+0x118>)
 800f2d0:	f000 f8bc 	bl	800f44c <HID_ReadItem>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	b2da      	uxtb	r2, r3
 800f2d8:	4b18      	ldr	r3, [pc, #96]	@ (800f33c <USBH_HID_KeybdDecode+0x104>)
 800f2da:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800f2dc:	2100      	movs	r1, #0
 800f2de:	481d      	ldr	r0, [pc, #116]	@ (800f354 <USBH_HID_KeybdDecode+0x11c>)
 800f2e0:	f000 f8b4 	bl	800f44c <HID_ReadItem>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	b2da      	uxtb	r2, r3
 800f2e8:	4b14      	ldr	r3, [pc, #80]	@ (800f33c <USBH_HID_KeybdDecode+0x104>)
 800f2ea:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	481a      	ldr	r0, [pc, #104]	@ (800f358 <USBH_HID_KeybdDecode+0x120>)
 800f2f0:	f000 f8ac 	bl	800f44c <HID_ReadItem>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	b2da      	uxtb	r2, r3
 800f2f8:	4b10      	ldr	r3, [pc, #64]	@ (800f33c <USBH_HID_KeybdDecode+0x104>)
 800f2fa:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	73fb      	strb	r3, [r7, #15]
 800f300:	e00e      	b.n	800f320 <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800f302:	7bfb      	ldrb	r3, [r7, #15]
 800f304:	4619      	mov	r1, r3
 800f306:	4815      	ldr	r0, [pc, #84]	@ (800f35c <USBH_HID_KeybdDecode+0x124>)
 800f308:	f000 f8a0 	bl	800f44c <HID_ReadItem>
 800f30c:	4602      	mov	r2, r0
 800f30e:	7bfb      	ldrb	r3, [r7, #15]
 800f310:	b2d1      	uxtb	r1, r2
 800f312:	4a0a      	ldr	r2, [pc, #40]	@ (800f33c <USBH_HID_KeybdDecode+0x104>)
 800f314:	4413      	add	r3, r2
 800f316:	460a      	mov	r2, r1
 800f318:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800f31a:	7bfb      	ldrb	r3, [r7, #15]
 800f31c:	3301      	adds	r3, #1
 800f31e:	73fb      	strb	r3, [r7, #15]
 800f320:	7bfb      	ldrb	r3, [r7, #15]
 800f322:	2b05      	cmp	r3, #5
 800f324:	d9ed      	bls.n	800f302 <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800f326:	2300      	movs	r3, #0
 800f328:	e000      	b.n	800f32c <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 800f32a:	2302      	movs	r3, #2
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	200092e4 	.word	0x200092e4
 800f338:	08016a5c 	.word	0x08016a5c
 800f33c:	200092cc 	.word	0x200092cc
 800f340:	08016a7c 	.word	0x08016a7c
 800f344:	08016a9c 	.word	0x08016a9c
 800f348:	08016abc 	.word	0x08016abc
 800f34c:	08016adc 	.word	0x08016adc
 800f350:	08016afc 	.word	0x08016afc
 800f354:	08016b1c 	.word	0x08016b1c
 800f358:	08016b3c 	.word	0x08016b3c
 800f35c:	08016b5c 	.word	0x08016b5c

0800f360 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800f360:	b480      	push	{r7}
 800f362:	b085      	sub	sp, #20
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	789b      	ldrb	r3, [r3, #2]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d103      	bne.n	800f378 <USBH_HID_GetASCIICode+0x18>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	799b      	ldrb	r3, [r3, #6]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d009      	beq.n	800f38c <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	7a5b      	ldrb	r3, [r3, #9]
 800f37c:	461a      	mov	r2, r3
 800f37e:	4b0b      	ldr	r3, [pc, #44]	@ (800f3ac <USBH_HID_GetASCIICode+0x4c>)
 800f380:	5c9b      	ldrb	r3, [r3, r2]
 800f382:	461a      	mov	r2, r3
 800f384:	4b0a      	ldr	r3, [pc, #40]	@ (800f3b0 <USBH_HID_GetASCIICode+0x50>)
 800f386:	5c9b      	ldrb	r3, [r3, r2]
 800f388:	73fb      	strb	r3, [r7, #15]
 800f38a:	e008      	b.n	800f39e <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	7a5b      	ldrb	r3, [r3, #9]
 800f390:	461a      	mov	r2, r3
 800f392:	4b06      	ldr	r3, [pc, #24]	@ (800f3ac <USBH_HID_GetASCIICode+0x4c>)
 800f394:	5c9b      	ldrb	r3, [r3, r2]
 800f396:	461a      	mov	r2, r3
 800f398:	4b06      	ldr	r3, [pc, #24]	@ (800f3b4 <USBH_HID_GetASCIICode+0x54>)
 800f39a:	5c9b      	ldrb	r3, [r3, r2]
 800f39c:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800f39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3714      	adds	r7, #20
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr
 800f3ac:	08016c84 	.word	0x08016c84
 800f3b0:	08016c00 	.word	0x08016c00
 800f3b4:	08016b7c 	.word	0x08016b7c

0800f3b8 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f3c6:	69db      	ldr	r3, [r3, #28]
 800f3c8:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800f3ca:	4b1d      	ldr	r3, [pc, #116]	@ (800f440 <USBH_HID_MouseInit+0x88>)
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800f3d0:	4b1b      	ldr	r3, [pc, #108]	@ (800f440 <USBH_HID_MouseInit+0x88>)
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800f3d6:	4b1a      	ldr	r3, [pc, #104]	@ (800f440 <USBH_HID_MouseInit+0x88>)
 800f3d8:	2200      	movs	r2, #0
 800f3da:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800f3dc:	4b18      	ldr	r3, [pc, #96]	@ (800f440 <USBH_HID_MouseInit+0x88>)
 800f3de:	2200      	movs	r2, #0
 800f3e0:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800f3e2:	4b17      	ldr	r3, [pc, #92]	@ (800f440 <USBH_HID_MouseInit+0x88>)
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	60fb      	str	r3, [r7, #12]
 800f3ec:	e00c      	b.n	800f408 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800f3ee:	4a15      	ldr	r2, [pc, #84]	@ (800f444 <USBH_HID_MouseInit+0x8c>)
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	4413      	add	r3, r2
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800f3f8:	4a13      	ldr	r2, [pc, #76]	@ (800f448 <USBH_HID_MouseInit+0x90>)
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	2200      	movs	r2, #0
 800f400:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	3301      	adds	r3, #1
 800f406:	60fb      	str	r3, [r7, #12]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2b07      	cmp	r3, #7
 800f40c:	d9ef      	bls.n	800f3ee <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	8b1b      	ldrh	r3, [r3, #24]
 800f412:	2b08      	cmp	r3, #8
 800f414:	d902      	bls.n	800f41c <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	2208      	movs	r2, #8
 800f41a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	4a0a      	ldr	r2, [pc, #40]	@ (800f448 <USBH_HID_MouseInit+0x90>)
 800f420:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	f103 0008 	add.w	r0, r3, #8
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f42e:	2250      	movs	r2, #80	@ 0x50
 800f430:	4619      	mov	r1, r3
 800f432:	f7ff fde0 	bl	800eff6 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800f436:	2300      	movs	r3, #0
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	200092ec 	.word	0x200092ec
 800f444:	200092f4 	.word	0x200092f4
 800f448:	200092fc 	.word	0x200092fc

0800f44c <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b089      	sub	sp, #36	@ 0x24
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	460b      	mov	r3, r1
 800f456:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800f458:	2300      	movs	r3, #0
 800f45a:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800f45c:	2300      	movs	r3, #0
 800f45e:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	7a1b      	ldrb	r3, [r3, #8]
 800f46a:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	7a5b      	ldrb	r3, [r3, #9]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d01a      	beq.n	800f4aa <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	7a5b      	ldrb	r3, [r3, #9]
 800f478:	78fa      	ldrb	r2, [r7, #3]
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d301      	bcc.n	800f482 <HID_ReadItem+0x36>
    {
      return (0U);
 800f47e:	2300      	movs	r3, #0
 800f480:	e078      	b.n	800f574 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800f482:	78fb      	ldrb	r3, [r7, #3]
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	6852      	ldr	r2, [r2, #4]
 800f488:	fb02 f303 	mul.w	r3, r2, r3
 800f48c:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800f48e:	7cfb      	ldrb	r3, [r7, #19]
 800f490:	68fa      	ldr	r2, [r7, #12]
 800f492:	4413      	add	r3, r2
 800f494:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	08db      	lsrs	r3, r3, #3
 800f49a:	697a      	ldr	r2, [r7, #20]
 800f49c:	4413      	add	r3, r2
 800f49e:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	f003 0307 	and.w	r3, r3, #7
 800f4a8:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	61bb      	str	r3, [r7, #24]
 800f4ae:	e00a      	b.n	800f4c6 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	00db      	lsls	r3, r3, #3
 800f4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800f4be:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800f4c0:	69bb      	ldr	r3, [r7, #24]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	61bb      	str	r3, [r7, #24]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	f003 0307 	and.w	r3, r3, #7
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d004      	beq.n	800f4dc <HID_ReadItem+0x90>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	08db      	lsrs	r3, r3, #3
 800f4d8:	3301      	adds	r3, #1
 800f4da:	e002      	b.n	800f4e2 <HID_ReadItem+0x96>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	08db      	lsrs	r3, r3, #3
 800f4e2:	69ba      	ldr	r2, [r7, #24]
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d8e3      	bhi.n	800f4b0 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800f4e8:	7cfb      	ldrb	r3, [r7, #19]
 800f4ea:	69fa      	ldr	r2, [r7, #28]
 800f4ec:	40da      	lsrs	r2, r3
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	f04f 31ff 	mov.w	r1, #4294967295
 800f4f6:	fa01 f303 	lsl.w	r3, r1, r3
 800f4fa:	43db      	mvns	r3, r3
 800f4fc:	4013      	ands	r3, r2
 800f4fe:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	69fa      	ldr	r2, [r7, #28]
 800f506:	429a      	cmp	r2, r3
 800f508:	d304      	bcc.n	800f514 <HID_ReadItem+0xc8>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	691b      	ldr	r3, [r3, #16]
 800f50e:	69fa      	ldr	r2, [r7, #28]
 800f510:	429a      	cmp	r2, r3
 800f512:	d901      	bls.n	800f518 <HID_ReadItem+0xcc>
  {
    return (0U);
 800f514:	2300      	movs	r3, #0
 800f516:	e02d      	b.n	800f574 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	7a9b      	ldrb	r3, [r3, #10]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d01e      	beq.n	800f55e <HID_ReadItem+0x112>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	3b01      	subs	r3, #1
 800f526:	69fa      	ldr	r2, [r7, #28]
 800f528:	fa22 f303 	lsr.w	r3, r2, r3
 800f52c:	f003 0301 	and.w	r3, r3, #1
 800f530:	2b00      	cmp	r3, #0
 800f532:	d014      	beq.n	800f55e <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	2201      	movs	r2, #1
 800f53a:	fa02 f303 	lsl.w	r3, r2, r3
 800f53e:	425b      	negs	r3, r3
 800f540:	69fa      	ldr	r2, [r7, #28]
 800f542:	4313      	orrs	r3, r2
 800f544:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	69db      	ldr	r3, [r3, #28]
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d101      	bne.n	800f552 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	e010      	b.n	800f574 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	69db      	ldr	r3, [r3, #28]
 800f556:	68ba      	ldr	r2, [r7, #8]
 800f558:	fb02 f303 	mul.w	r3, r2, r3
 800f55c:	e00a      	b.n	800f574 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	69db      	ldr	r3, [r3, #28]
 800f562:	2b01      	cmp	r3, #1
 800f564:	d101      	bne.n	800f56a <HID_ReadItem+0x11e>
    {
      return (val);
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	e004      	b.n	800f574 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	69db      	ldr	r3, [r3, #28]
 800f56e:	69fa      	ldr	r2, [r7, #28]
 800f570:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800f574:	4618      	mov	r0, r3
 800f576:	3724      	adds	r7, #36	@ 0x24
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr

0800f580 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	60b9      	str	r1, [r7, #8]
 800f58a:	4613      	mov	r3, r2
 800f58c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d10a      	bne.n	800f5aa <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800f594:	481c      	ldr	r0, [pc, #112]	@ (800f608 <USBH_Init+0x88>)
 800f596:	f002 fb49 	bl	8011c2c <iprintf>
 800f59a:	481c      	ldr	r0, [pc, #112]	@ (800f60c <USBH_Init+0x8c>)
 800f59c:	f002 fb46 	bl	8011c2c <iprintf>
 800f5a0:	200a      	movs	r0, #10
 800f5a2:	f002 fb55 	bl	8011c50 <putchar>
    return USBH_FAIL;
 800f5a6:	2302      	movs	r3, #2
 800f5a8:	e029      	b.n	800f5fe <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	79fa      	ldrb	r2, [r7, #7]
 800f5ae:	f883 2d84 	strb.w	r2, [r3, #3460]	@ 0xd84

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
  phost->ClassNumber = 0U;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f000 f824 	bl	800f610 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
  phost->device.is_connected = 0U;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d003      	beq.n	800f5f6 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	68ba      	ldr	r2, [r7, #8]
 800f5f2:	f8c3 2d8c 	str.w	r2, [r3, #3468]	@ 0xd8c

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800f5f6:	68f8      	ldr	r0, [r7, #12]
 800f5f8:	f001 ff98 	bl	801152c <USBH_LL_Init>

  return USBH_OK;
 800f5fc:	2300      	movs	r3, #0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3710      	adds	r7, #16
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	08012f68 	.word	0x08012f68
 800f60c:	08012f70 	.word	0x08012f70

0800f610 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f618:	2300      	movs	r3, #0
 800f61a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f61c:	2300      	movs	r3, #0
 800f61e:	60fb      	str	r3, [r7, #12]
 800f620:	e00a      	b.n	800f638 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f62a:	009b      	lsls	r3, r3, #2
 800f62c:	4413      	add	r3, r2
 800f62e:	2200      	movs	r2, #0
 800f630:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	3301      	adds	r3, #1
 800f636:	60fb      	str	r3, [r7, #12]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2b0f      	cmp	r3, #15
 800f63c:	d9f1      	bls.n	800f622 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f63e:	2300      	movs	r3, #0
 800f640:	60fb      	str	r3, [r7, #12]
 800f642:	e009      	b.n	800f658 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800f644:	687a      	ldr	r2, [r7, #4]
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	4413      	add	r3, r2
 800f64a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f64e:	2200      	movs	r2, #0
 800f650:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	3301      	adds	r3, #1
 800f656:	60fb      	str	r3, [r7, #12]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800f65e:	4293      	cmp	r3, r2
 800f660:	d9f0      	bls.n	800f644 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2200      	movs	r2, #0
 800f66c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2201      	movs	r2, #1
 800f672:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c

  phost->Control.state = CTRL_SETUP;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2201      	movs	r2, #1
 800f680:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2240      	movs	r2, #64	@ 0x40
 800f686:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2200      	movs	r2, #0
 800f68c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2200      	movs	r2, #0
 800f692:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2201      	movs	r2, #1
 800f69a:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5
  phost->device.RstCnt = 0U;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
  phost->device.EnumCnt = 0U;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	331c      	adds	r3, #28
 800f6b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f6b6:	2100      	movs	r1, #0
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f002 fc27 	bl	8011f0c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f6c4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f6c8:	2100      	movs	r1, #0
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f002 fc1e 	bl	8011f0c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 800f6d6:	2212      	movs	r2, #18
 800f6d8:	2100      	movs	r1, #0
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f002 fc16 	bl	8011f0c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800f6e6:	223e      	movs	r2, #62	@ 0x3e
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f002 fc0e 	bl	8011f0c <memset>

  return USBH_OK;
 800f6f0:	2300      	movs	r3, #0
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3710      	adds	r7, #16
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
	...

0800f6fc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b084      	sub	sp, #16
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f706:	2300      	movs	r3, #0
 800f708:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d020      	beq.n	800f752 <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800f716:	2b00      	cmp	r3, #0
 800f718:	d10f      	bne.n	800f73a <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800f720:	1c59      	adds	r1, r3, #1
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	f8c2 1d38 	str.w	r1, [r2, #3384]	@ 0xd38
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800f72e:	6839      	ldr	r1, [r7, #0]
 800f730:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f734:	2300      	movs	r3, #0
 800f736:	73fb      	strb	r3, [r7, #15]
 800f738:	e016      	b.n	800f768 <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800f73a:	480e      	ldr	r0, [pc, #56]	@ (800f774 <USBH_RegisterClass+0x78>)
 800f73c:	f002 fa76 	bl	8011c2c <iprintf>
 800f740:	480d      	ldr	r0, [pc, #52]	@ (800f778 <USBH_RegisterClass+0x7c>)
 800f742:	f002 fa73 	bl	8011c2c <iprintf>
 800f746:	200a      	movs	r0, #10
 800f748:	f002 fa82 	bl	8011c50 <putchar>
      status = USBH_FAIL;
 800f74c:	2302      	movs	r3, #2
 800f74e:	73fb      	strb	r3, [r7, #15]
 800f750:	e00a      	b.n	800f768 <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800f752:	4808      	ldr	r0, [pc, #32]	@ (800f774 <USBH_RegisterClass+0x78>)
 800f754:	f002 fa6a 	bl	8011c2c <iprintf>
 800f758:	4808      	ldr	r0, [pc, #32]	@ (800f77c <USBH_RegisterClass+0x80>)
 800f75a:	f002 fa67 	bl	8011c2c <iprintf>
 800f75e:	200a      	movs	r0, #10
 800f760:	f002 fa76 	bl	8011c50 <putchar>
    status = USBH_FAIL;
 800f764:	2302      	movs	r3, #2
 800f766:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f768:	7bfb      	ldrb	r3, [r7, #15]
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3710      	adds	r7, #16
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	08012f68 	.word	0x08012f68
 800f778:	08012f84 	.word	0x08012f84
 800f77c:	08012fa0 	.word	0x08012fa0

0800f780 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	460b      	mov	r3, r1
 800f78a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f78c:	2300      	movs	r3, #0
 800f78e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f893 3cf4 	ldrb.w	r3, [r3, #3316]	@ 0xcf4
 800f796:	78fa      	ldrb	r2, [r7, #3]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d23c      	bcs.n	800f816 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	78fa      	ldrb	r2, [r7, #3]
 800f7a0:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800f7a4:	78fb      	ldrb	r3, [r7, #3]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	4823      	ldr	r0, [pc, #140]	@ (800f838 <USBH_SelectInterface+0xb8>)
 800f7aa:	f002 fa3f 	bl	8011c2c <iprintf>
 800f7ae:	200a      	movs	r0, #10
 800f7b0:	f002 fa4e 	bl	8011c50 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800f7b4:	78fb      	ldrb	r3, [r7, #3]
 800f7b6:	687a      	ldr	r2, [r7, #4]
 800f7b8:	211a      	movs	r1, #26
 800f7ba:	fb01 f303 	mul.w	r3, r1, r3
 800f7be:	4413      	add	r3, r2
 800f7c0:	f603 43ff 	addw	r3, r3, #3327	@ 0xcff
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	481c      	ldr	r0, [pc, #112]	@ (800f83c <USBH_SelectInterface+0xbc>)
 800f7ca:	f002 fa2f 	bl	8011c2c <iprintf>
 800f7ce:	200a      	movs	r0, #10
 800f7d0:	f002 fa3e 	bl	8011c50 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800f7d4:	78fb      	ldrb	r3, [r7, #3]
 800f7d6:	687a      	ldr	r2, [r7, #4]
 800f7d8:	211a      	movs	r1, #26
 800f7da:	fb01 f303 	mul.w	r3, r1, r3
 800f7de:	4413      	add	r3, r2
 800f7e0:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	4815      	ldr	r0, [pc, #84]	@ (800f840 <USBH_SelectInterface+0xc0>)
 800f7ea:	f002 fa1f 	bl	8011c2c <iprintf>
 800f7ee:	200a      	movs	r0, #10
 800f7f0:	f002 fa2e 	bl	8011c50 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800f7f4:	78fb      	ldrb	r3, [r7, #3]
 800f7f6:	687a      	ldr	r2, [r7, #4]
 800f7f8:	211a      	movs	r1, #26
 800f7fa:	fb01 f303 	mul.w	r3, r1, r3
 800f7fe:	4413      	add	r3, r2
 800f800:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	4619      	mov	r1, r3
 800f808:	480e      	ldr	r0, [pc, #56]	@ (800f844 <USBH_SelectInterface+0xc4>)
 800f80a:	f002 fa0f 	bl	8011c2c <iprintf>
 800f80e:	200a      	movs	r0, #10
 800f810:	f002 fa1e 	bl	8011c50 <putchar>
 800f814:	e00a      	b.n	800f82c <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800f816:	480c      	ldr	r0, [pc, #48]	@ (800f848 <USBH_SelectInterface+0xc8>)
 800f818:	f002 fa08 	bl	8011c2c <iprintf>
 800f81c:	480b      	ldr	r0, [pc, #44]	@ (800f84c <USBH_SelectInterface+0xcc>)
 800f81e:	f002 fa05 	bl	8011c2c <iprintf>
 800f822:	200a      	movs	r0, #10
 800f824:	f002 fa14 	bl	8011c50 <putchar>
    status = USBH_FAIL;
 800f828:	2302      	movs	r3, #2
 800f82a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3710      	adds	r7, #16
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
 800f836:	bf00      	nop
 800f838:	08012fb8 	.word	0x08012fb8
 800f83c:	08012fd8 	.word	0x08012fd8
 800f840:	08012fe8 	.word	0x08012fe8
 800f844:	08012ff8 	.word	0x08012ff8
 800f848:	08012f68 	.word	0x08012f68
 800f84c:	08013008 	.word	0x08013008

0800f850 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f850:	b480      	push	{r7}
 800f852:	b087      	sub	sp, #28
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	4608      	mov	r0, r1
 800f85a:	4611      	mov	r1, r2
 800f85c:	461a      	mov	r2, r3
 800f85e:	4603      	mov	r3, r0
 800f860:	70fb      	strb	r3, [r7, #3]
 800f862:	460b      	mov	r3, r1
 800f864:	70bb      	strb	r3, [r7, #2]
 800f866:	4613      	mov	r3, r2
 800f868:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f86a:	2300      	movs	r3, #0
 800f86c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f86e:	2300      	movs	r3, #0
 800f870:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800f878:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f87a:	e025      	b.n	800f8c8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f87c:	7dfb      	ldrb	r3, [r7, #23]
 800f87e:	221a      	movs	r2, #26
 800f880:	fb02 f303 	mul.w	r3, r2, r3
 800f884:	3308      	adds	r3, #8
 800f886:	68fa      	ldr	r2, [r7, #12]
 800f888:	4413      	add	r3, r2
 800f88a:	3302      	adds	r3, #2
 800f88c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	795b      	ldrb	r3, [r3, #5]
 800f892:	78fa      	ldrb	r2, [r7, #3]
 800f894:	429a      	cmp	r2, r3
 800f896:	d002      	beq.n	800f89e <USBH_FindInterface+0x4e>
 800f898:	78fb      	ldrb	r3, [r7, #3]
 800f89a:	2bff      	cmp	r3, #255	@ 0xff
 800f89c:	d111      	bne.n	800f8c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f8a2:	78ba      	ldrb	r2, [r7, #2]
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d002      	beq.n	800f8ae <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f8a8:	78bb      	ldrb	r3, [r7, #2]
 800f8aa:	2bff      	cmp	r3, #255	@ 0xff
 800f8ac:	d109      	bne.n	800f8c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f8b2:	787a      	ldrb	r2, [r7, #1]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d002      	beq.n	800f8be <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f8b8:	787b      	ldrb	r3, [r7, #1]
 800f8ba:	2bff      	cmp	r3, #255	@ 0xff
 800f8bc:	d101      	bne.n	800f8c2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f8be:	7dfb      	ldrb	r3, [r7, #23]
 800f8c0:	e006      	b.n	800f8d0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f8c2:	7dfb      	ldrb	r3, [r7, #23]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f8c8:	7dfb      	ldrb	r3, [r7, #23]
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d9d6      	bls.n	800f87c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f8ce:	23ff      	movs	r3, #255	@ 0xff
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	371c      	adds	r7, #28
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr

0800f8dc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f001 fe67 	bl	80115b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f8ea:	2101      	movs	r1, #1
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f001 ff80 	bl	80117f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f8f2:	2300      	movs	r3, #0
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3708      	adds	r7, #8
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b088      	sub	sp, #32
 800f900:	af04      	add	r7, sp, #16
 800f902:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f904:	2302      	movs	r3, #2
 800f906:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f908:	2300      	movs	r3, #0
 800f90a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f893 3cd9 	ldrb.w	r3, [r3, #3289]	@ 0xcd9
 800f912:	b2db      	uxtb	r3, r3
 800f914:	2b01      	cmp	r3, #1
 800f916:	d102      	bne.n	800f91e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2203      	movs	r2, #3
 800f91c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	b2db      	uxtb	r3, r3
 800f924:	2b0b      	cmp	r3, #11
 800f926:	f200 8239 	bhi.w	800fd9c <USBH_Process+0x4a0>
 800f92a:	a201      	add	r2, pc, #4	@ (adr r2, 800f930 <USBH_Process+0x34>)
 800f92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f930:	0800f961 	.word	0x0800f961
 800f934:	0800f99f 	.word	0x0800f99f
 800f938:	0800fa1f 	.word	0x0800fa1f
 800f93c:	0800fd2b 	.word	0x0800fd2b
 800f940:	0800fd9d 	.word	0x0800fd9d
 800f944:	0800fabf 	.word	0x0800fabf
 800f948:	0800fcad 	.word	0x0800fcad
 800f94c:	0800fb0d 	.word	0x0800fb0d
 800f950:	0800fb2d 	.word	0x0800fb2d
 800f954:	0800fb57 	.word	0x0800fb57
 800f958:	0800fbb3 	.word	0x0800fbb3
 800f95c:	0800fd13 	.word	0x0800fd13
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f893 3cd8 	ldrb.w	r3, [r3, #3288]	@ 0xcd8
 800f966:	b2db      	uxtb	r3, r3
 800f968:	2b00      	cmp	r3, #0
 800f96a:	f000 8219 	beq.w	800fda0 <USBH_Process+0x4a4>
      {
        USBH_UsrLog("USB Device Connected");
 800f96e:	48a5      	ldr	r0, [pc, #660]	@ (800fc04 <USBH_Process+0x308>)
 800f970:	f002 f95c 	bl	8011c2c <iprintf>
 800f974:	200a      	movs	r0, #10
 800f976:	f002 f96b 	bl	8011c50 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2201      	movs	r2, #1
 800f97e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f980:	20c8      	movs	r0, #200	@ 0xc8
 800f982:	f001 ff80 	bl	8011886 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f001 fe73 	bl	8011672 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2200      	movs	r2, #0
 800f990:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
        phost->Timeout = 0U;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2200      	movs	r2, #0
 800f998:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f99c:	e200      	b.n	800fda0 <USBH_Process+0x4a4>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f893 3cdb 	ldrb.w	r3, [r3, #3291]	@ 0xcdb
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d10d      	bne.n	800f9c4 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800f9a8:	4897      	ldr	r0, [pc, #604]	@ (800fc08 <USBH_Process+0x30c>)
 800f9aa:	f002 f93f 	bl	8011c2c <iprintf>
 800f9ae:	200a      	movs	r0, #10
 800f9b0:	f002 f94e 	bl	8011c50 <putchar>
        phost->device.RstCnt = 0U;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
        phost->gState = HOST_DEV_ATTACHED;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2202      	movs	r2, #2
 800f9c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f9c2:	e1fa      	b.n	800fdba <USBH_Process+0x4be>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800f9ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f9ce:	d91a      	bls.n	800fa06 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	b2da      	uxtb	r2, r3
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
          if (phost->device.RstCnt > 3U)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800f9e6:	2b03      	cmp	r3, #3
 800f9e8:	d909      	bls.n	800f9fe <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800f9ea:	4888      	ldr	r0, [pc, #544]	@ (800fc0c <USBH_Process+0x310>)
 800f9ec:	f002 f91e 	bl	8011c2c <iprintf>
 800f9f0:	200a      	movs	r0, #10
 800f9f2:	f002 f92d 	bl	8011c50 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	220d      	movs	r2, #13
 800f9fa:	701a      	strb	r2, [r3, #0]
      break;
 800f9fc:	e1dd      	b.n	800fdba <USBH_Process+0x4be>
            phost->gState = HOST_IDLE;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2200      	movs	r2, #0
 800fa02:	701a      	strb	r2, [r3, #0]
      break;
 800fa04:	e1d9      	b.n	800fdba <USBH_Process+0x4be>
          phost->Timeout += 10U;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800fa0c:	f103 020a 	add.w	r2, r3, #10
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
          USBH_Delay(10U);
 800fa16:	200a      	movs	r0, #10
 800fa18:	f001 ff35 	bl	8011886 <USBH_Delay>
      break;
 800fa1c:	e1cd      	b.n	800fdba <USBH_Process+0x4be>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d005      	beq.n	800fa34 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fa2e:	2104      	movs	r1, #4
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800fa34:	2064      	movs	r0, #100	@ 0x64
 800fa36:	f001 ff26 	bl	8011886 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f001 fdf2 	bl	8011624 <USBH_LL_GetSpeed>
 800fa40:	4603      	mov	r3, r0
 800fa42:	461a      	mov	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5

      phost->gState = HOST_ENUMERATION;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2205      	movs	r2, #5
 800fa4e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800fa50:	2100      	movs	r1, #0
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f001 fbf3 	bl	801123e <USBH_AllocPipe>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800fa60:	2180      	movs	r1, #128	@ 0x80
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f001 fbeb 	bl	801123e <USBH_AllocPipe>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	7919      	ldrb	r1, [r3, #4]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fa80:	687a      	ldr	r2, [r7, #4]
 800fa82:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fa84:	9202      	str	r2, [sp, #8]
 800fa86:	2200      	movs	r2, #0
 800fa88:	9201      	str	r2, [sp, #4]
 800fa8a:	9300      	str	r3, [sp, #0]
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	2280      	movs	r2, #128	@ 0x80
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f001 fba5 	bl	80111e0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	7959      	ldrb	r1, [r3, #5]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800faaa:	9202      	str	r2, [sp, #8]
 800faac:	2200      	movs	r2, #0
 800faae:	9201      	str	r2, [sp, #4]
 800fab0:	9300      	str	r3, [sp, #0]
 800fab2:	4603      	mov	r3, r0
 800fab4:	2200      	movs	r2, #0
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f001 fb92 	bl	80111e0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fabc:	e17d      	b.n	800fdba <USBH_Process+0x4be>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f000 f98e 	bl	800fde0 <USBH_HandleEnum>
 800fac4:	4603      	mov	r3, r0
 800fac6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800fac8:	7bbb      	ldrb	r3, [r7, #14]
 800faca:	b2db      	uxtb	r3, r3
 800facc:	2b00      	cmp	r3, #0
 800face:	f040 8169 	bne.w	800fda4 <USBH_Process+0x4a8>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800fad2:	484f      	ldr	r0, [pc, #316]	@ (800fc10 <USBH_Process+0x314>)
 800fad4:	f002 f8aa 	bl	8011c2c <iprintf>
 800fad8:	200a      	movs	r0, #10
 800fada:	f002 f8b9 	bl	8011c50 <putchar>

        phost->device.current_interface = 0U;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2200      	movs	r2, #0
 800fae2:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f893 3cef 	ldrb.w	r3, [r3, #3311]	@ 0xcef
 800faec:	2b01      	cmp	r3, #1
 800faee:	d109      	bne.n	800fb04 <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800faf0:	4848      	ldr	r0, [pc, #288]	@ (800fc14 <USBH_Process+0x318>)
 800faf2:	f002 f89b 	bl	8011c2c <iprintf>
 800faf6:	200a      	movs	r0, #10
 800faf8:	f002 f8aa 	bl	8011c50 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2208      	movs	r2, #8
 800fb00:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fb02:	e14f      	b.n	800fda4 <USBH_Process+0x4a8>
          phost->gState = HOST_INPUT;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2207      	movs	r2, #7
 800fb08:	701a      	strb	r2, [r3, #0]
      break;
 800fb0a:	e14b      	b.n	800fda4 <USBH_Process+0x4a8>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	f000 8148 	beq.w	800fda8 <USBH_Process+0x4ac>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fb1e:	2101      	movs	r1, #1
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2208      	movs	r2, #8
 800fb28:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800fb2a:	e13d      	b.n	800fda8 <USBH_Process+0x4ac>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f893 3cf5 	ldrb.w	r3, [r3, #3317]	@ 0xcf5
 800fb32:	4619      	mov	r1, r3
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 fd9a 	bl	801066e <USBH_SetCfg>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	f040 8135 	bne.w	800fdac <USBH_Process+0x4b0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2209      	movs	r2, #9
 800fb46:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800fb48:	4833      	ldr	r0, [pc, #204]	@ (800fc18 <USBH_Process+0x31c>)
 800fb4a:	f002 f86f 	bl	8011c2c <iprintf>
 800fb4e:	200a      	movs	r0, #10
 800fb50:	f002 f87e 	bl	8011c50 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fb54:	e12a      	b.n	800fdac <USBH_Process+0x4b0>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f893 3cf7 	ldrb.w	r3, [r3, #3319]	@ 0xcf7
 800fb5c:	f003 0320 	and.w	r3, r3, #32
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d022      	beq.n	800fbaa <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800fb64:	2101      	movs	r1, #1
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f000 fda4 	bl	80106b4 <USBH_SetFeature>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fb70:	7bbb      	ldrb	r3, [r7, #14]
 800fb72:	b2db      	uxtb	r3, r3
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d109      	bne.n	800fb8c <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800fb78:	4828      	ldr	r0, [pc, #160]	@ (800fc1c <USBH_Process+0x320>)
 800fb7a:	f002 f857 	bl	8011c2c <iprintf>
 800fb7e:	200a      	movs	r0, #10
 800fb80:	f002 f866 	bl	8011c50 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	220a      	movs	r2, #10
 800fb88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fb8a:	e111      	b.n	800fdb0 <USBH_Process+0x4b4>
        else if (status == USBH_NOT_SUPPORTED)
 800fb8c:	7bbb      	ldrb	r3, [r7, #14]
 800fb8e:	b2db      	uxtb	r3, r3
 800fb90:	2b03      	cmp	r3, #3
 800fb92:	f040 810d 	bne.w	800fdb0 <USBH_Process+0x4b4>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800fb96:	4822      	ldr	r0, [pc, #136]	@ (800fc20 <USBH_Process+0x324>)
 800fb98:	f002 f848 	bl	8011c2c <iprintf>
 800fb9c:	200a      	movs	r0, #10
 800fb9e:	f002 f857 	bl	8011c50 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	220a      	movs	r2, #10
 800fba6:	701a      	strb	r2, [r3, #0]
      break;
 800fba8:	e102      	b.n	800fdb0 <USBH_Process+0x4b4>
        phost->gState = HOST_CHECK_CLASS;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	220a      	movs	r2, #10
 800fbae:	701a      	strb	r2, [r3, #0]
      break;
 800fbb0:	e0fe      	b.n	800fdb0 <USBH_Process+0x4b4>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d106      	bne.n	800fbca <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 800fbbc:	4819      	ldr	r0, [pc, #100]	@ (800fc24 <USBH_Process+0x328>)
 800fbbe:	f002 f835 	bl	8011c2c <iprintf>
 800fbc2:	200a      	movs	r0, #10
 800fbc4:	f002 f844 	bl	8011c50 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fbc8:	e0f7      	b.n	800fdba <USBH_Process+0x4be>
        phost->pActiveClass = NULL;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	73fb      	strb	r3, [r7, #15]
 800fbd6:	e02a      	b.n	800fc2e <USBH_Process+0x332>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800fbd8:	7bfa      	ldrb	r2, [r7, #15]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800fbe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbe4:	791a      	ldrb	r2, [r3, #4]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f893 3cff 	ldrb.w	r3, [r3, #3327]	@ 0xcff
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d11b      	bne.n	800fc28 <USBH_Process+0x32c>
            phost->pActiveClass = phost->pClass[idx];
 800fbf0:	7bfa      	ldrb	r2, [r7, #15]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800fbf8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
            break;
 800fc02:	e017      	b.n	800fc34 <USBH_Process+0x338>
 800fc04:	08013028 	.word	0x08013028
 800fc08:	08013040 	.word	0x08013040
 800fc0c:	0801305c 	.word	0x0801305c
 800fc10:	08013088 	.word	0x08013088
 800fc14:	0801309c 	.word	0x0801309c
 800fc18:	080130c4 	.word	0x080130c4
 800fc1c:	080130e0 	.word	0x080130e0
 800fc20:	08013100 	.word	0x08013100
 800fc24:	0801312c 	.word	0x0801312c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fc28:	7bfb      	ldrb	r3, [r7, #15]
 800fc2a:	3301      	adds	r3, #1
 800fc2c:	73fb      	strb	r3, [r7, #15]
 800fc2e:	7bfb      	ldrb	r3, [r7, #15]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d0d1      	beq.n	800fbd8 <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d02c      	beq.n	800fc98 <USBH_Process+0x39c>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fc44:	689b      	ldr	r3, [r3, #8]
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	4798      	blx	r3
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d114      	bne.n	800fc7a <USBH_Process+0x37e>
            phost->gState = HOST_CLASS_REQUEST;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2206      	movs	r2, #6
 800fc54:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	4619      	mov	r1, r3
 800fc60:	4858      	ldr	r0, [pc, #352]	@ (800fdc4 <USBH_Process+0x4c8>)
 800fc62:	f001 ffe3 	bl	8011c2c <iprintf>
 800fc66:	200a      	movs	r0, #10
 800fc68:	f001 fff2 	bl	8011c50 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fc72:	2103      	movs	r1, #3
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	4798      	blx	r3
      break;
 800fc78:	e09f      	b.n	800fdba <USBH_Process+0x4be>
            phost->gState = HOST_ABORT_STATE;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	220d      	movs	r2, #13
 800fc7e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4619      	mov	r1, r3
 800fc8a:	484f      	ldr	r0, [pc, #316]	@ (800fdc8 <USBH_Process+0x4cc>)
 800fc8c:	f001 ffce 	bl	8011c2c <iprintf>
 800fc90:	200a      	movs	r0, #10
 800fc92:	f001 ffdd 	bl	8011c50 <putchar>
      break;
 800fc96:	e090      	b.n	800fdba <USBH_Process+0x4be>
          phost->gState = HOST_ABORT_STATE;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	220d      	movs	r2, #13
 800fc9c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800fc9e:	484b      	ldr	r0, [pc, #300]	@ (800fdcc <USBH_Process+0x4d0>)
 800fca0:	f001 ffc4 	bl	8011c2c <iprintf>
 800fca4:	200a      	movs	r0, #10
 800fca6:	f001 ffd3 	bl	8011c50 <putchar>
      break;
 800fcaa:	e086      	b.n	800fdba <USBH_Process+0x4be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d020      	beq.n	800fcf8 <USBH_Process+0x3fc>
      {
        status = phost->pActiveClass->Requests(phost);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fcbc:	691b      	ldr	r3, [r3, #16]
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	4798      	blx	r3
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fcc6:	7bbb      	ldrb	r3, [r7, #14]
 800fcc8:	b2db      	uxtb	r3, r3
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d103      	bne.n	800fcd6 <USBH_Process+0x3da>
        {
          phost->gState = HOST_CLASS;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	220b      	movs	r2, #11
 800fcd2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fcd4:	e06e      	b.n	800fdb4 <USBH_Process+0x4b8>
        else if (status == USBH_FAIL)
 800fcd6:	7bbb      	ldrb	r3, [r7, #14]
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	2b02      	cmp	r3, #2
 800fcdc:	d16a      	bne.n	800fdb4 <USBH_Process+0x4b8>
          phost->gState = HOST_ABORT_STATE;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	220d      	movs	r2, #13
 800fce2:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800fce4:	483a      	ldr	r0, [pc, #232]	@ (800fdd0 <USBH_Process+0x4d4>)
 800fce6:	f001 ffa1 	bl	8011c2c <iprintf>
 800fcea:	483a      	ldr	r0, [pc, #232]	@ (800fdd4 <USBH_Process+0x4d8>)
 800fcec:	f001 ff9e 	bl	8011c2c <iprintf>
 800fcf0:	200a      	movs	r0, #10
 800fcf2:	f001 ffad 	bl	8011c50 <putchar>
      break;
 800fcf6:	e05d      	b.n	800fdb4 <USBH_Process+0x4b8>
        phost->gState = HOST_ABORT_STATE;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	220d      	movs	r2, #13
 800fcfc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800fcfe:	4834      	ldr	r0, [pc, #208]	@ (800fdd0 <USBH_Process+0x4d4>)
 800fd00:	f001 ff94 	bl	8011c2c <iprintf>
 800fd04:	4834      	ldr	r0, [pc, #208]	@ (800fdd8 <USBH_Process+0x4dc>)
 800fd06:	f001 ff91 	bl	8011c2c <iprintf>
 800fd0a:	200a      	movs	r0, #10
 800fd0c:	f001 ffa0 	bl	8011c50 <putchar>
      break;
 800fd10:	e050      	b.n	800fdb4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d04d      	beq.n	800fdb8 <USBH_Process+0x4bc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fd22:	695b      	ldr	r3, [r3, #20]
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	4798      	blx	r3
      }
      break;
 800fd28:	e046      	b.n	800fdb8 <USBH_Process+0x4bc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9

      (void)DeInitStateMachine(phost);
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f7ff fc6c 	bl	800f610 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d009      	beq.n	800fd56 <USBH_Process+0x45a>
      {
        phost->pActiveClass->DeInit(phost);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800fd48:	68db      	ldr	r3, [r3, #12]
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
      }

      if (phost->pUser != NULL)
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d005      	beq.n	800fd6c <USBH_Process+0x470>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800fd66:	2105      	movs	r1, #5
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800fd6c:	481b      	ldr	r0, [pc, #108]	@ (800fddc <USBH_Process+0x4e0>)
 800fd6e:	f001 ff5d 	bl	8011c2c <iprintf>
 800fd72:	200a      	movs	r0, #10
 800fd74:	f001 ff6c 	bl	8011c50 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f893 3cda 	ldrb.w	r3, [r3, #3290]	@ 0xcda
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d107      	bne.n	800fd94 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2200      	movs	r2, #0
 800fd88:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f7ff fda5 	bl	800f8dc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fd92:	e012      	b.n	800fdba <USBH_Process+0x4be>
        (void)USBH_LL_Start(phost);
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f001 fc0f 	bl	80115b8 <USBH_LL_Start>
      break;
 800fd9a:	e00e      	b.n	800fdba <USBH_Process+0x4be>

    case HOST_ABORT_STATE:
    default :
      break;
 800fd9c:	bf00      	nop
 800fd9e:	e00c      	b.n	800fdba <USBH_Process+0x4be>
      break;
 800fda0:	bf00      	nop
 800fda2:	e00a      	b.n	800fdba <USBH_Process+0x4be>
      break;
 800fda4:	bf00      	nop
 800fda6:	e008      	b.n	800fdba <USBH_Process+0x4be>
    break;
 800fda8:	bf00      	nop
 800fdaa:	e006      	b.n	800fdba <USBH_Process+0x4be>
      break;
 800fdac:	bf00      	nop
 800fdae:	e004      	b.n	800fdba <USBH_Process+0x4be>
      break;
 800fdb0:	bf00      	nop
 800fdb2:	e002      	b.n	800fdba <USBH_Process+0x4be>
      break;
 800fdb4:	bf00      	nop
 800fdb6:	e000      	b.n	800fdba <USBH_Process+0x4be>
      break;
 800fdb8:	bf00      	nop
  }
  return USBH_OK;
 800fdba:	2300      	movs	r3, #0
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3710      	adds	r7, #16
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	0801314c 	.word	0x0801314c
 800fdc8:	08013160 	.word	0x08013160
 800fdcc:	08013180 	.word	0x08013180
 800fdd0:	08012f68 	.word	0x08012f68
 800fdd4:	080131a8 	.word	0x080131a8
 800fdd8:	080131d0 	.word	0x080131d0
 800fddc:	080131e8 	.word	0x080131e8

0800fde0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b088      	sub	sp, #32
 800fde4:	af04      	add	r7, sp, #16
 800fde6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800fde8:	2301      	movs	r3, #1
 800fdea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800fdec:	2301      	movs	r3, #1
 800fdee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	785b      	ldrb	r3, [r3, #1]
 800fdf4:	2b07      	cmp	r3, #7
 800fdf6:	f200 827b 	bhi.w	80102f0 <USBH_HandleEnum+0x510>
 800fdfa:	a201      	add	r2, pc, #4	@ (adr r2, 800fe00 <USBH_HandleEnum+0x20>)
 800fdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe00:	0800fe21 	.word	0x0800fe21
 800fe04:	0800fef9 	.word	0x0800fef9
 800fe08:	0800ffa9 	.word	0x0800ffa9
 800fe0c:	08010065 	.word	0x08010065
 800fe10:	080100ed 	.word	0x080100ed
 800fe14:	0801019f 	.word	0x0801019f
 800fe18:	08010213 	.word	0x08010213
 800fe1c:	08010285 	.word	0x08010285
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800fe20:	2108      	movs	r1, #8
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 fb16 	bl	8010454 <USBH_Get_DevDesc>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fe2c:	7bbb      	ldrb	r3, [r7, #14]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d12e      	bne.n	800fe90 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f893 2ce5 	ldrb.w	r2, [r3, #3301]	@ 0xce5
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2201      	movs	r2, #1
 800fe40:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	7919      	ldrb	r1, [r3, #4]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fe52:	687a      	ldr	r2, [r7, #4]
 800fe54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fe56:	9202      	str	r2, [sp, #8]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	9201      	str	r2, [sp, #4]
 800fe5c:	9300      	str	r3, [sp, #0]
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2280      	movs	r2, #128	@ 0x80
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f001 f9bc 	bl	80111e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	7959      	ldrb	r1, [r3, #5]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fe78:	687a      	ldr	r2, [r7, #4]
 800fe7a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fe7c:	9202      	str	r2, [sp, #8]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	9201      	str	r2, [sp, #4]
 800fe82:	9300      	str	r3, [sp, #0]
 800fe84:	4603      	mov	r3, r0
 800fe86:	2200      	movs	r2, #0
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f001 f9a9 	bl	80111e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fe8e:	e231      	b.n	80102f4 <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fe90:	7bbb      	ldrb	r3, [r7, #14]
 800fe92:	2b03      	cmp	r3, #3
 800fe94:	f040 822e 	bne.w	80102f4 <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800fe98:	48ae      	ldr	r0, [pc, #696]	@ (8010154 <USBH_HandleEnum+0x374>)
 800fe9a:	f001 fec7 	bl	8011c2c <iprintf>
 800fe9e:	48ae      	ldr	r0, [pc, #696]	@ (8010158 <USBH_HandleEnum+0x378>)
 800fea0:	f001 fec4 	bl	8011c2c <iprintf>
 800fea4:	200a      	movs	r0, #10
 800fea6:	f001 fed3 	bl	8011c50 <putchar>
        phost->device.EnumCnt++;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800feb0:	3301      	adds	r3, #1
 800feb2:	b2da      	uxtb	r2, r3
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800fec0:	2b03      	cmp	r3, #3
 800fec2:	d909      	bls.n	800fed8 <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800fec4:	48a5      	ldr	r0, [pc, #660]	@ (801015c <USBH_HandleEnum+0x37c>)
 800fec6:	f001 feb1 	bl	8011c2c <iprintf>
 800feca:	200a      	movs	r0, #10
 800fecc:	f001 fec0 	bl	8011c50 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	220d      	movs	r2, #13
 800fed4:	701a      	strb	r2, [r3, #0]
      break;
 800fed6:	e20d      	b.n	80102f4 <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	795b      	ldrb	r3, [r3, #5]
 800fedc:	4619      	mov	r1, r3
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f001 f9cf 	bl	8011282 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	791b      	ldrb	r3, [r3, #4]
 800fee8:	4619      	mov	r1, r3
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f001 f9c9 	bl	8011282 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2200      	movs	r2, #0
 800fef4:	701a      	strb	r2, [r3, #0]
      break;
 800fef6:	e1fd      	b.n	80102f4 <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800fef8:	2112      	movs	r1, #18
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f000 faaa 	bl	8010454 <USBH_Get_DevDesc>
 800ff00:	4603      	mov	r3, r0
 800ff02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ff04:	7bbb      	ldrb	r3, [r7, #14]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d117      	bne.n	800ff3a <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f8b3 3ce8 	ldrh.w	r3, [r3, #3304]	@ 0xce8
 800ff10:	4619      	mov	r1, r3
 800ff12:	4893      	ldr	r0, [pc, #588]	@ (8010160 <USBH_HandleEnum+0x380>)
 800ff14:	f001 fe8a 	bl	8011c2c <iprintf>
 800ff18:	200a      	movs	r0, #10
 800ff1a:	f001 fe99 	bl	8011c50 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8b3 3ce6 	ldrh.w	r3, [r3, #3302]	@ 0xce6
 800ff24:	4619      	mov	r1, r3
 800ff26:	488f      	ldr	r0, [pc, #572]	@ (8010164 <USBH_HandleEnum+0x384>)
 800ff28:	f001 fe80 	bl	8011c2c <iprintf>
 800ff2c:	200a      	movs	r0, #10
 800ff2e:	f001 fe8f 	bl	8011c50 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2202      	movs	r2, #2
 800ff36:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ff38:	e1de      	b.n	80102f8 <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ff3a:	7bbb      	ldrb	r3, [r7, #14]
 800ff3c:	2b03      	cmp	r3, #3
 800ff3e:	f040 81db 	bne.w	80102f8 <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800ff42:	4884      	ldr	r0, [pc, #528]	@ (8010154 <USBH_HandleEnum+0x374>)
 800ff44:	f001 fe72 	bl	8011c2c <iprintf>
 800ff48:	4887      	ldr	r0, [pc, #540]	@ (8010168 <USBH_HandleEnum+0x388>)
 800ff4a:	f001 fe6f 	bl	8011c2c <iprintf>
 800ff4e:	200a      	movs	r0, #10
 800ff50:	f001 fe7e 	bl	8011c50 <putchar>
        phost->device.EnumCnt++;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	b2da      	uxtb	r2, r3
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800ff6a:	2b03      	cmp	r3, #3
 800ff6c:	d909      	bls.n	800ff82 <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ff6e:	487b      	ldr	r0, [pc, #492]	@ (801015c <USBH_HandleEnum+0x37c>)
 800ff70:	f001 fe5c 	bl	8011c2c <iprintf>
 800ff74:	200a      	movs	r0, #10
 800ff76:	f001 fe6b 	bl	8011c50 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	220d      	movs	r2, #13
 800ff7e:	701a      	strb	r2, [r3, #0]
      break;
 800ff80:	e1ba      	b.n	80102f8 <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	795b      	ldrb	r3, [r3, #5]
 800ff86:	4619      	mov	r1, r3
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f001 f97a 	bl	8011282 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	791b      	ldrb	r3, [r3, #4]
 800ff92:	4619      	mov	r1, r3
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f001 f974 	bl	8011282 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	701a      	strb	r2, [r3, #0]
      break;
 800ffa6:	e1a7      	b.n	80102f8 <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ffa8:	2101      	movs	r1, #1
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f000 fb3b 	bl	8010626 <USBH_SetAddress>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ffb4:	7bbb      	ldrb	r3, [r7, #14]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d13a      	bne.n	8010030 <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 800ffba:	2002      	movs	r0, #2
 800ffbc:	f001 fc63 	bl	8011886 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f893 3cd4 	ldrb.w	r3, [r3, #3284]	@ 0xcd4
 800ffce:	4619      	mov	r1, r3
 800ffd0:	4866      	ldr	r0, [pc, #408]	@ (801016c <USBH_HandleEnum+0x38c>)
 800ffd2:	f001 fe2b 	bl	8011c2c <iprintf>
 800ffd6:	200a      	movs	r0, #10
 800ffd8:	f001 fe3a 	bl	8011c50 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2203      	movs	r2, #3
 800ffe0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	7919      	ldrb	r1, [r3, #4]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fff6:	9202      	str	r2, [sp, #8]
 800fff8:	2200      	movs	r2, #0
 800fffa:	9201      	str	r2, [sp, #4]
 800fffc:	9300      	str	r3, [sp, #0]
 800fffe:	4603      	mov	r3, r0
 8010000:	2280      	movs	r2, #128	@ 0x80
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f001 f8ec 	bl	80111e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	7959      	ldrb	r1, [r3, #5]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801001c:	9202      	str	r2, [sp, #8]
 801001e:	2200      	movs	r2, #0
 8010020:	9201      	str	r2, [sp, #4]
 8010022:	9300      	str	r3, [sp, #0]
 8010024:	4603      	mov	r3, r0
 8010026:	2200      	movs	r2, #0
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f001 f8d9 	bl	80111e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801002e:	e165      	b.n	80102fc <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010030:	7bbb      	ldrb	r3, [r7, #14]
 8010032:	2b03      	cmp	r3, #3
 8010034:	f040 8162 	bne.w	80102fc <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 8010038:	4846      	ldr	r0, [pc, #280]	@ (8010154 <USBH_HandleEnum+0x374>)
 801003a:	f001 fdf7 	bl	8011c2c <iprintf>
 801003e:	484c      	ldr	r0, [pc, #304]	@ (8010170 <USBH_HandleEnum+0x390>)
 8010040:	f001 fdf4 	bl	8011c2c <iprintf>
 8010044:	200a      	movs	r0, #10
 8010046:	f001 fe03 	bl	8011c50 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 801004a:	4844      	ldr	r0, [pc, #272]	@ (801015c <USBH_HandleEnum+0x37c>)
 801004c:	f001 fdee 	bl	8011c2c <iprintf>
 8010050:	200a      	movs	r0, #10
 8010052:	f001 fdfd 	bl	8011c50 <putchar>
        phost->gState = HOST_ABORT_STATE;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	220d      	movs	r2, #13
 801005a:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	705a      	strb	r2, [r3, #1]
      break;
 8010062:	e14b      	b.n	80102fc <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8010064:	2109      	movs	r1, #9
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f000 fa2e 	bl	80104c8 <USBH_Get_CfgDesc>
 801006c:	4603      	mov	r3, r0
 801006e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010070:	7bbb      	ldrb	r3, [r7, #14]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d103      	bne.n	801007e <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2204      	movs	r2, #4
 801007a:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801007c:	e140      	b.n	8010300 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801007e:	7bbb      	ldrb	r3, [r7, #14]
 8010080:	2b03      	cmp	r3, #3
 8010082:	f040 813d 	bne.w	8010300 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8010086:	4833      	ldr	r0, [pc, #204]	@ (8010154 <USBH_HandleEnum+0x374>)
 8010088:	f001 fdd0 	bl	8011c2c <iprintf>
 801008c:	4839      	ldr	r0, [pc, #228]	@ (8010174 <USBH_HandleEnum+0x394>)
 801008e:	f001 fdcd 	bl	8011c2c <iprintf>
 8010092:	200a      	movs	r0, #10
 8010094:	f001 fddc 	bl	8011c50 <putchar>
        phost->device.EnumCnt++;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 801009e:	3301      	adds	r3, #1
 80100a0:	b2da      	uxtb	r2, r3
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 80100ae:	2b03      	cmp	r3, #3
 80100b0:	d909      	bls.n	80100c6 <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80100b2:	482a      	ldr	r0, [pc, #168]	@ (801015c <USBH_HandleEnum+0x37c>)
 80100b4:	f001 fdba 	bl	8011c2c <iprintf>
 80100b8:	200a      	movs	r0, #10
 80100ba:	f001 fdc9 	bl	8011c50 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	220d      	movs	r2, #13
 80100c2:	701a      	strb	r2, [r3, #0]
      break;
 80100c4:	e11c      	b.n	8010300 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	795b      	ldrb	r3, [r3, #5]
 80100ca:	4619      	mov	r1, r3
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f001 f8d8 	bl	8011282 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	791b      	ldrb	r3, [r3, #4]
 80100d6:	4619      	mov	r1, r3
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f001 f8d2 	bl	8011282 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2200      	movs	r2, #0
 80100e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2200      	movs	r2, #0
 80100e8:	701a      	strb	r2, [r3, #0]
      break;
 80100ea:	e109      	b.n	8010300 <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8b3 3cf2 	ldrh.w	r3, [r3, #3314]	@ 0xcf2
 80100f2:	4619      	mov	r1, r3
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 f9e7 	bl	80104c8 <USBH_Get_CfgDesc>
 80100fa:	4603      	mov	r3, r0
 80100fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80100fe:	7bbb      	ldrb	r3, [r7, #14]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d103      	bne.n	801010c <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2205      	movs	r2, #5
 8010108:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801010a:	e0fb      	b.n	8010304 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801010c:	7bbb      	ldrb	r3, [r7, #14]
 801010e:	2b03      	cmp	r3, #3
 8010110:	f040 80f8 	bne.w	8010304 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8010114:	480f      	ldr	r0, [pc, #60]	@ (8010154 <USBH_HandleEnum+0x374>)
 8010116:	f001 fd89 	bl	8011c2c <iprintf>
 801011a:	4816      	ldr	r0, [pc, #88]	@ (8010174 <USBH_HandleEnum+0x394>)
 801011c:	f001 fd86 	bl	8011c2c <iprintf>
 8010120:	200a      	movs	r0, #10
 8010122:	f001 fd95 	bl	8011c50 <putchar>
        phost->device.EnumCnt++;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 801012c:	3301      	adds	r3, #1
 801012e:	b2da      	uxtb	r2, r3
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 801013c:	2b03      	cmp	r3, #3
 801013e:	d91b      	bls.n	8010178 <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8010140:	4806      	ldr	r0, [pc, #24]	@ (801015c <USBH_HandleEnum+0x37c>)
 8010142:	f001 fd73 	bl	8011c2c <iprintf>
 8010146:	200a      	movs	r0, #10
 8010148:	f001 fd82 	bl	8011c50 <putchar>
          phost->gState = HOST_ABORT_STATE;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	220d      	movs	r2, #13
 8010150:	701a      	strb	r2, [r3, #0]
      break;
 8010152:	e0d7      	b.n	8010304 <USBH_HandleEnum+0x524>
 8010154:	08012f68 	.word	0x08012f68
 8010158:	08013200 	.word	0x08013200
 801015c:	08013234 	.word	0x08013234
 8010160:	08013274 	.word	0x08013274
 8010164:	08013280 	.word	0x08013280
 8010168:	0801328c 	.word	0x0801328c
 801016c:	080132c8 	.word	0x080132c8
 8010170:	080132e0 	.word	0x080132e0
 8010174:	08013314 	.word	0x08013314
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	795b      	ldrb	r3, [r3, #5]
 801017c:	4619      	mov	r1, r3
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f001 f87f 	bl	8011282 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	791b      	ldrb	r3, [r3, #4]
 8010188:	4619      	mov	r1, r3
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f001 f879 	bl	8011282 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2200      	movs	r2, #0
 801019a:	701a      	strb	r2, [r3, #0]
      break;
 801019c:	e0b2      	b.n	8010304 <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f893 3cec 	ldrb.w	r3, [r3, #3308]	@ 0xcec
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d02a      	beq.n	80101fe <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f893 1cec 	ldrb.w	r1, [r3, #3308]	@ 0xcec
                                        phost->device.Data, 0xFFU);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80101b4:	23ff      	movs	r3, #255	@ 0xff
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 f9be 	bl	8010538 <USBH_Get_StringDesc>
 80101bc:	4603      	mov	r3, r0
 80101be:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80101c0:	7bbb      	ldrb	r3, [r7, #14]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d10d      	bne.n	80101e2 <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80101cc:	4619      	mov	r1, r3
 80101ce:	4853      	ldr	r0, [pc, #332]	@ (801031c <USBH_HandleEnum+0x53c>)
 80101d0:	f001 fd2c 	bl	8011c2c <iprintf>
 80101d4:	200a      	movs	r0, #10
 80101d6:	f001 fd3b 	bl	8011c50 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2206      	movs	r2, #6
 80101de:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80101e0:	e092      	b.n	8010308 <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80101e2:	7bbb      	ldrb	r3, [r7, #14]
 80101e4:	2b03      	cmp	r3, #3
 80101e6:	f040 808f 	bne.w	8010308 <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 80101ea:	484d      	ldr	r0, [pc, #308]	@ (8010320 <USBH_HandleEnum+0x540>)
 80101ec:	f001 fd1e 	bl	8011c2c <iprintf>
 80101f0:	200a      	movs	r0, #10
 80101f2:	f001 fd2d 	bl	8011c50 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2206      	movs	r2, #6
 80101fa:	705a      	strb	r2, [r3, #1]
      break;
 80101fc:	e084      	b.n	8010308 <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 80101fe:	4848      	ldr	r0, [pc, #288]	@ (8010320 <USBH_HandleEnum+0x540>)
 8010200:	f001 fd14 	bl	8011c2c <iprintf>
 8010204:	200a      	movs	r0, #10
 8010206:	f001 fd23 	bl	8011c50 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2206      	movs	r2, #6
 801020e:	705a      	strb	r2, [r3, #1]
      break;
 8010210:	e07a      	b.n	8010308 <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f893 3ced 	ldrb.w	r3, [r3, #3309]	@ 0xced
 8010218:	2b00      	cmp	r3, #0
 801021a:	d029      	beq.n	8010270 <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f893 1ced 	ldrb.w	r1, [r3, #3309]	@ 0xced
                                        phost->device.Data, 0xFFU);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010228:	23ff      	movs	r3, #255	@ 0xff
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f000 f984 	bl	8010538 <USBH_Get_StringDesc>
 8010230:	4603      	mov	r3, r0
 8010232:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010234:	7bbb      	ldrb	r3, [r7, #14]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d10d      	bne.n	8010256 <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010240:	4619      	mov	r1, r3
 8010242:	4838      	ldr	r0, [pc, #224]	@ (8010324 <USBH_HandleEnum+0x544>)
 8010244:	f001 fcf2 	bl	8011c2c <iprintf>
 8010248:	200a      	movs	r0, #10
 801024a:	f001 fd01 	bl	8011c50 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2207      	movs	r2, #7
 8010252:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010254:	e05a      	b.n	801030c <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010256:	7bbb      	ldrb	r3, [r7, #14]
 8010258:	2b03      	cmp	r3, #3
 801025a:	d157      	bne.n	801030c <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 801025c:	4832      	ldr	r0, [pc, #200]	@ (8010328 <USBH_HandleEnum+0x548>)
 801025e:	f001 fce5 	bl	8011c2c <iprintf>
 8010262:	200a      	movs	r0, #10
 8010264:	f001 fcf4 	bl	8011c50 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2207      	movs	r2, #7
 801026c:	705a      	strb	r2, [r3, #1]
      break;
 801026e:	e04d      	b.n	801030c <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 8010270:	482d      	ldr	r0, [pc, #180]	@ (8010328 <USBH_HandleEnum+0x548>)
 8010272:	f001 fcdb 	bl	8011c2c <iprintf>
 8010276:	200a      	movs	r0, #10
 8010278:	f001 fcea 	bl	8011c50 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2207      	movs	r2, #7
 8010280:	705a      	strb	r2, [r3, #1]
      break;
 8010282:	e043      	b.n	801030c <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f893 3cee 	ldrb.w	r3, [r3, #3310]	@ 0xcee
 801028a:	2b00      	cmp	r3, #0
 801028c:	d027      	beq.n	80102de <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f893 1cee 	ldrb.w	r1, [r3, #3310]	@ 0xcee
                                        phost->device.Data, 0xFFU);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801029a:	23ff      	movs	r3, #255	@ 0xff
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f000 f94b 	bl	8010538 <USBH_Get_StringDesc>
 80102a2:	4603      	mov	r3, r0
 80102a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80102a6:	7bbb      	ldrb	r3, [r7, #14]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d10c      	bne.n	80102c6 <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80102b2:	4619      	mov	r1, r3
 80102b4:	481d      	ldr	r0, [pc, #116]	@ (801032c <USBH_HandleEnum+0x54c>)
 80102b6:	f001 fcb9 	bl	8011c2c <iprintf>
 80102ba:	200a      	movs	r0, #10
 80102bc:	f001 fcc8 	bl	8011c50 <putchar>
          Status = USBH_OK;
 80102c0:	2300      	movs	r3, #0
 80102c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80102c4:	e024      	b.n	8010310 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80102c6:	7bbb      	ldrb	r3, [r7, #14]
 80102c8:	2b03      	cmp	r3, #3
 80102ca:	d121      	bne.n	8010310 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 80102cc:	4818      	ldr	r0, [pc, #96]	@ (8010330 <USBH_HandleEnum+0x550>)
 80102ce:	f001 fcad 	bl	8011c2c <iprintf>
 80102d2:	200a      	movs	r0, #10
 80102d4:	f001 fcbc 	bl	8011c50 <putchar>
          Status = USBH_OK;
 80102d8:	2300      	movs	r3, #0
 80102da:	73fb      	strb	r3, [r7, #15]
      break;
 80102dc:	e018      	b.n	8010310 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 80102de:	4814      	ldr	r0, [pc, #80]	@ (8010330 <USBH_HandleEnum+0x550>)
 80102e0:	f001 fca4 	bl	8011c2c <iprintf>
 80102e4:	200a      	movs	r0, #10
 80102e6:	f001 fcb3 	bl	8011c50 <putchar>
        Status = USBH_OK;
 80102ea:	2300      	movs	r3, #0
 80102ec:	73fb      	strb	r3, [r7, #15]
      break;
 80102ee:	e00f      	b.n	8010310 <USBH_HandleEnum+0x530>

    default:
      break;
 80102f0:	bf00      	nop
 80102f2:	e00e      	b.n	8010312 <USBH_HandleEnum+0x532>
      break;
 80102f4:	bf00      	nop
 80102f6:	e00c      	b.n	8010312 <USBH_HandleEnum+0x532>
      break;
 80102f8:	bf00      	nop
 80102fa:	e00a      	b.n	8010312 <USBH_HandleEnum+0x532>
      break;
 80102fc:	bf00      	nop
 80102fe:	e008      	b.n	8010312 <USBH_HandleEnum+0x532>
      break;
 8010300:	bf00      	nop
 8010302:	e006      	b.n	8010312 <USBH_HandleEnum+0x532>
      break;
 8010304:	bf00      	nop
 8010306:	e004      	b.n	8010312 <USBH_HandleEnum+0x532>
      break;
 8010308:	bf00      	nop
 801030a:	e002      	b.n	8010312 <USBH_HandleEnum+0x532>
      break;
 801030c:	bf00      	nop
 801030e:	e000      	b.n	8010312 <USBH_HandleEnum+0x532>
      break;
 8010310:	bf00      	nop
  }
  return Status;
 8010312:	7bfb      	ldrb	r3, [r7, #15]
}
 8010314:	4618      	mov	r0, r3
 8010316:	3710      	adds	r7, #16
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	08013358 	.word	0x08013358
 8010320:	0801336c 	.word	0x0801336c
 8010324:	08013380 	.word	0x08013380
 8010328:	08013390 	.word	0x08013390
 801032c:	080133a0 	.word	0x080133a0
 8010330:	080133b4 	.word	0x080133b4

08010334 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8010334:	b480      	push	{r7}
 8010336:	b083      	sub	sp, #12
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	683a      	ldr	r2, [r7, #0]
 8010342:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
}
 8010346:	bf00      	nop
 8010348:	370c      	adds	r7, #12
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr

08010352 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010352:	b580      	push	{r7, lr}
 8010354:	b082      	sub	sp, #8
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010360:	1c5a      	adds	r2, r3, #1
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
  USBH_HandleSof(phost);
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f000 f804 	bl	8010376 <USBH_HandleSof>
}
 801036e:	bf00      	nop
 8010370:	3708      	adds	r7, #8
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010376:	b580      	push	{r7, lr}
 8010378:	b082      	sub	sp, #8
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	781b      	ldrb	r3, [r3, #0]
 8010382:	b2db      	uxtb	r3, r3
 8010384:	2b0b      	cmp	r3, #11
 8010386:	d10a      	bne.n	801039e <USBH_HandleSof+0x28>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 801038e:	2b00      	cmp	r3, #0
 8010390:	d005      	beq.n	801039e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 8010398:	699b      	ldr	r3, [r3, #24]
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	4798      	blx	r3
  }
}
 801039e:	bf00      	nop
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}

080103a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80103a6:	b480      	push	{r7}
 80103a8:	b083      	sub	sp, #12
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2201      	movs	r2, #1
 80103b2:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80103b6:	bf00      	nop
}
 80103b8:	370c      	adds	r7, #12
 80103ba:	46bd      	mov	sp, r7
 80103bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c0:	4770      	bx	lr

080103c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80103c2:	b480      	push	{r7}
 80103c4:	b083      	sub	sp, #12
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2200      	movs	r2, #0
 80103ce:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  return;
 80103d2:	bf00      	nop
}
 80103d4:	370c      	adds	r7, #12
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr

080103de <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80103de:	b480      	push	{r7}
 80103e0:	b083      	sub	sp, #12
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2201      	movs	r2, #1
 80103ea:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2200      	movs	r2, #0
 80103f2:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2200      	movs	r2, #0
 80103fa:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80103fe:	2300      	movs	r3, #0
}
 8010400:	4618      	mov	r0, r3
 8010402:	370c      	adds	r7, #12
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2201      	movs	r2, #1
 8010418:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_connected = 0U;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2200      	movs	r2, #0
 8010420:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.PortEnabled = 0U;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2200      	movs	r2, #0
 8010428:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f001 f8de 	bl	80115ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	791b      	ldrb	r3, [r3, #4]
 8010436:	4619      	mov	r1, r3
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 ff22 	bl	8011282 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	795b      	ldrb	r3, [r3, #5]
 8010442:	4619      	mov	r1, r3
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f000 ff1c 	bl	8011282 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801044a:	2300      	movs	r3, #0
}
 801044c:	4618      	mov	r0, r3
 801044e:	3708      	adds	r7, #8
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}

08010454 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b086      	sub	sp, #24
 8010458:	af02      	add	r7, sp, #8
 801045a:	6078      	str	r0, [r7, #4]
 801045c:	460b      	mov	r3, r1
 801045e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8010460:	887b      	ldrh	r3, [r7, #2]
 8010462:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010466:	4293      	cmp	r3, r2
 8010468:	d90a      	bls.n	8010480 <USBH_Get_DevDesc+0x2c>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 801046a:	4815      	ldr	r0, [pc, #84]	@ (80104c0 <USBH_Get_DevDesc+0x6c>)
 801046c:	f001 fbde 	bl	8011c2c <iprintf>
 8010470:	4814      	ldr	r0, [pc, #80]	@ (80104c4 <USBH_Get_DevDesc+0x70>)
 8010472:	f001 fbdb 	bl	8011c2c <iprintf>
 8010476:	200a      	movs	r0, #10
 8010478:	f001 fbea 	bl	8011c50 <putchar>
    return USBH_NOT_SUPPORTED;
 801047c:	2303      	movs	r3, #3
 801047e:	e01b      	b.n	80104b8 <USBH_Get_DevDesc+0x64>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8010486:	887b      	ldrh	r3, [r7, #2]
 8010488:	9300      	str	r3, [sp, #0]
 801048a:	4613      	mov	r3, r2
 801048c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010490:	2100      	movs	r1, #0
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f000 f892 	bl	80105bc <USBH_GetDescriptor>
 8010498:	4603      	mov	r3, r0
 801049a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 801049c:	7bfb      	ldrb	r3, [r7, #15]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d109      	bne.n	80104b6 <USBH_Get_DevDesc+0x62>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80104a8:	887a      	ldrh	r2, [r7, #2]
 80104aa:	4619      	mov	r1, r3
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f000 f949 	bl	8010744 <USBH_ParseDevDesc>
 80104b2:	4603      	mov	r3, r0
 80104b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80104b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3710      	adds	r7, #16
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	080133c8 	.word	0x080133c8
 80104c4:	080133d0 	.word	0x080133d0

080104c8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b086      	sub	sp, #24
 80104cc:	af02      	add	r7, sp, #8
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	460b      	mov	r3, r1
 80104d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	331c      	adds	r3, #28
 80104d8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80104da:	887b      	ldrh	r3, [r7, #2]
 80104dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80104e0:	d90a      	bls.n	80104f8 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 80104e2:	4813      	ldr	r0, [pc, #76]	@ (8010530 <USBH_Get_CfgDesc+0x68>)
 80104e4:	f001 fba2 	bl	8011c2c <iprintf>
 80104e8:	4812      	ldr	r0, [pc, #72]	@ (8010534 <USBH_Get_CfgDesc+0x6c>)
 80104ea:	f001 fb9f 	bl	8011c2c <iprintf>
 80104ee:	200a      	movs	r0, #10
 80104f0:	f001 fbae 	bl	8011c50 <putchar>
    return USBH_NOT_SUPPORTED;
 80104f4:	2303      	movs	r3, #3
 80104f6:	e016      	b.n	8010526 <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80104f8:	887b      	ldrh	r3, [r7, #2]
 80104fa:	9300      	str	r3, [sp, #0]
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010502:	2100      	movs	r1, #0
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 f859 	bl	80105bc <USBH_GetDescriptor>
 801050a:	4603      	mov	r3, r0
 801050c:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 801050e:	7bfb      	ldrb	r3, [r7, #15]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d107      	bne.n	8010524 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8010514:	887b      	ldrh	r3, [r7, #2]
 8010516:	461a      	mov	r2, r3
 8010518:	68b9      	ldr	r1, [r7, #8]
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f000 f9c2 	bl	80108a4 <USBH_ParseCfgDesc>
 8010520:	4603      	mov	r3, r0
 8010522:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010524:	7bfb      	ldrb	r3, [r7, #15]
}
 8010526:	4618      	mov	r0, r3
 8010528:	3710      	adds	r7, #16
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	080133c8 	.word	0x080133c8
 8010534:	08013414 	.word	0x08013414

08010538 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b088      	sub	sp, #32
 801053c:	af02      	add	r7, sp, #8
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	607a      	str	r2, [r7, #4]
 8010542:	461a      	mov	r2, r3
 8010544:	460b      	mov	r3, r1
 8010546:	72fb      	strb	r3, [r7, #11]
 8010548:	4613      	mov	r3, r2
 801054a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 801054c:	893b      	ldrh	r3, [r7, #8]
 801054e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010552:	4293      	cmp	r3, r2
 8010554:	d802      	bhi.n	801055c <USBH_Get_StringDesc+0x24>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d10a      	bne.n	8010572 <USBH_Get_StringDesc+0x3a>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 801055c:	4815      	ldr	r0, [pc, #84]	@ (80105b4 <USBH_Get_StringDesc+0x7c>)
 801055e:	f001 fb65 	bl	8011c2c <iprintf>
 8010562:	4815      	ldr	r0, [pc, #84]	@ (80105b8 <USBH_Get_StringDesc+0x80>)
 8010564:	f001 fb62 	bl	8011c2c <iprintf>
 8010568:	200a      	movs	r0, #10
 801056a:	f001 fb71 	bl	8011c50 <putchar>
    return USBH_NOT_SUPPORTED;
 801056e:	2303      	movs	r3, #3
 8010570:	e01c      	b.n	80105ac <USBH_Get_StringDesc+0x74>
  }

  status = USBH_GetDescriptor(phost,
 8010572:	7afb      	ldrb	r3, [r7, #11]
 8010574:	b29b      	uxth	r3, r3
 8010576:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801057a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8010582:	893b      	ldrh	r3, [r7, #8]
 8010584:	9300      	str	r3, [sp, #0]
 8010586:	460b      	mov	r3, r1
 8010588:	2100      	movs	r1, #0
 801058a:	68f8      	ldr	r0, [r7, #12]
 801058c:	f000 f816 	bl	80105bc <USBH_GetDescriptor>
 8010590:	4603      	mov	r3, r0
 8010592:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8010594:	7dfb      	ldrb	r3, [r7, #23]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d107      	bne.n	80105aa <USBH_Get_StringDesc+0x72>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80105a0:	893a      	ldrh	r2, [r7, #8]
 80105a2:	6879      	ldr	r1, [r7, #4]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f000 fb92 	bl	8010cce <USBH_ParseStringDesc>
  }

  return status;
 80105aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3718      	adds	r7, #24
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	080133c8 	.word	0x080133c8
 80105b8:	08013460 	.word	0x08013460

080105bc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	607b      	str	r3, [r7, #4]
 80105c6:	460b      	mov	r3, r1
 80105c8:	72fb      	strb	r3, [r7, #11]
 80105ca:	4613      	mov	r3, r2
 80105cc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	789b      	ldrb	r3, [r3, #2]
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d11c      	bne.n	8010610 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80105d6:	7afb      	ldrb	r3, [r7, #11]
 80105d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80105dc:	b2da      	uxtb	r2, r3
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2206      	movs	r2, #6
 80105e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	893a      	ldrh	r2, [r7, #8]
 80105ec:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80105ee:	893b      	ldrh	r3, [r7, #8]
 80105f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80105f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80105f8:	d104      	bne.n	8010604 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f240 4209 	movw	r2, #1033	@ 0x409
 8010600:	829a      	strh	r2, [r3, #20]
 8010602:	e002      	b.n	801060a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2200      	movs	r2, #0
 8010608:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	8b3a      	ldrh	r2, [r7, #24]
 801060e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8010610:	8b3b      	ldrh	r3, [r7, #24]
 8010612:	461a      	mov	r2, r3
 8010614:	6879      	ldr	r1, [r7, #4]
 8010616:	68f8      	ldr	r0, [r7, #12]
 8010618:	f000 fba6 	bl	8010d68 <USBH_CtlReq>
 801061c:	4603      	mov	r3, r0
}
 801061e:	4618      	mov	r0, r3
 8010620:	3710      	adds	r7, #16
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}

08010626 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8010626:	b580      	push	{r7, lr}
 8010628:	b082      	sub	sp, #8
 801062a:	af00      	add	r7, sp, #0
 801062c:	6078      	str	r0, [r7, #4]
 801062e:	460b      	mov	r3, r1
 8010630:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	789b      	ldrb	r3, [r3, #2]
 8010636:	2b01      	cmp	r3, #1
 8010638:	d10f      	bne.n	801065a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2200      	movs	r2, #0
 801063e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2205      	movs	r2, #5
 8010644:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010646:	78fb      	ldrb	r3, [r7, #3]
 8010648:	b29a      	uxth	r2, r3
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2200      	movs	r2, #0
 8010658:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801065a:	2200      	movs	r2, #0
 801065c:	2100      	movs	r1, #0
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 fb82 	bl	8010d68 <USBH_CtlReq>
 8010664:	4603      	mov	r3, r0
}
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}

0801066e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	b082      	sub	sp, #8
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
 8010676:	460b      	mov	r3, r1
 8010678:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	789b      	ldrb	r3, [r3, #2]
 801067e:	2b01      	cmp	r3, #1
 8010680:	d10e      	bne.n	80106a0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2200      	movs	r2, #0
 8010686:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2209      	movs	r2, #9
 801068c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	887a      	ldrh	r2, [r7, #2]
 8010692:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2200      	movs	r2, #0
 8010698:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2200      	movs	r2, #0
 801069e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80106a0:	2200      	movs	r2, #0
 80106a2:	2100      	movs	r1, #0
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f000 fb5f 	bl	8010d68 <USBH_CtlReq>
 80106aa:	4603      	mov	r3, r0
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3708      	adds	r7, #8
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b082      	sub	sp, #8
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	460b      	mov	r3, r1
 80106be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	789b      	ldrb	r3, [r3, #2]
 80106c4:	2b01      	cmp	r3, #1
 80106c6:	d10f      	bne.n	80106e8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2203      	movs	r2, #3
 80106d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80106d4:	78fb      	ldrb	r3, [r7, #3]
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2200      	movs	r2, #0
 80106e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80106e8:	2200      	movs	r2, #0
 80106ea:	2100      	movs	r1, #0
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f000 fb3b 	bl	8010d68 <USBH_CtlReq>
 80106f2:	4603      	mov	r3, r0
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3708      	adds	r7, #8
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	460b      	mov	r3, r1
 8010706:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	789b      	ldrb	r3, [r3, #2]
 801070c:	2b01      	cmp	r3, #1
 801070e:	d10f      	bne.n	8010730 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2202      	movs	r2, #2
 8010714:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2201      	movs	r2, #1
 801071a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2200      	movs	r2, #0
 8010720:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8010722:	78fb      	ldrb	r3, [r7, #3]
 8010724:	b29a      	uxth	r2, r3
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2200      	movs	r2, #0
 801072e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010730:	2200      	movs	r2, #0
 8010732:	2100      	movs	r1, #0
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f000 fb17 	bl	8010d68 <USBH_CtlReq>
 801073a:	4603      	mov	r3, r0
}
 801073c:	4618      	mov	r0, r3
 801073e:	3708      	adds	r7, #8
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}

08010744 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010744:	b480      	push	{r7}
 8010746:	b087      	sub	sp, #28
 8010748:	af00      	add	r7, sp, #0
 801074a:	60f8      	str	r0, [r7, #12]
 801074c:	60b9      	str	r1, [r7, #8]
 801074e:	4613      	mov	r3, r2
 8010750:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 8010758:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 801075a:	2300      	movs	r3, #0
 801075c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d101      	bne.n	8010768 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8010764:	2302      	movs	r3, #2
 8010766:	e094      	b.n	8010892 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	781a      	ldrb	r2, [r3, #0]
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	785a      	ldrb	r2, [r3, #1]
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	3302      	adds	r3, #2
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	461a      	mov	r2, r3
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	3303      	adds	r3, #3
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	021b      	lsls	r3, r3, #8
 8010788:	b29b      	uxth	r3, r3
 801078a:	4313      	orrs	r3, r2
 801078c:	b29a      	uxth	r2, r3
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	791a      	ldrb	r2, [r3, #4]
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	795a      	ldrb	r2, [r3, #5]
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	799a      	ldrb	r2, [r3, #6]
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	79da      	ldrb	r2, [r3, #7]
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d004      	beq.n	80107c6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d11b      	bne.n	80107fe <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	79db      	ldrb	r3, [r3, #7]
 80107ca:	2b20      	cmp	r3, #32
 80107cc:	dc0f      	bgt.n	80107ee <USBH_ParseDevDesc+0xaa>
 80107ce:	2b08      	cmp	r3, #8
 80107d0:	db0f      	blt.n	80107f2 <USBH_ParseDevDesc+0xae>
 80107d2:	3b08      	subs	r3, #8
 80107d4:	4a32      	ldr	r2, [pc, #200]	@ (80108a0 <USBH_ParseDevDesc+0x15c>)
 80107d6:	fa22 f303 	lsr.w	r3, r2, r3
 80107da:	f003 0301 	and.w	r3, r3, #1
 80107de:	2b00      	cmp	r3, #0
 80107e0:	bf14      	ite	ne
 80107e2:	2301      	movne	r3, #1
 80107e4:	2300      	moveq	r3, #0
 80107e6:	b2db      	uxtb	r3, r3
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d106      	bne.n	80107fa <USBH_ParseDevDesc+0xb6>
 80107ec:	e001      	b.n	80107f2 <USBH_ParseDevDesc+0xae>
 80107ee:	2b40      	cmp	r3, #64	@ 0x40
 80107f0:	d003      	beq.n	80107fa <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	2208      	movs	r2, #8
 80107f6:	71da      	strb	r2, [r3, #7]
        break;
 80107f8:	e000      	b.n	80107fc <USBH_ParseDevDesc+0xb8>
        break;
 80107fa:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80107fc:	e00e      	b.n	801081c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010804:	2b02      	cmp	r3, #2
 8010806:	d107      	bne.n	8010818 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	79db      	ldrb	r3, [r3, #7]
 801080c:	2b08      	cmp	r3, #8
 801080e:	d005      	beq.n	801081c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	2208      	movs	r2, #8
 8010814:	71da      	strb	r2, [r3, #7]
 8010816:	e001      	b.n	801081c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010818:	2303      	movs	r3, #3
 801081a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 801081c:	88fb      	ldrh	r3, [r7, #6]
 801081e:	2b08      	cmp	r3, #8
 8010820:	d936      	bls.n	8010890 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	3308      	adds	r3, #8
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	461a      	mov	r2, r3
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	3309      	adds	r3, #9
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	021b      	lsls	r3, r3, #8
 8010832:	b29b      	uxth	r3, r3
 8010834:	4313      	orrs	r3, r2
 8010836:	b29a      	uxth	r2, r3
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	330a      	adds	r3, #10
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	461a      	mov	r2, r3
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	330b      	adds	r3, #11
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	021b      	lsls	r3, r3, #8
 801084c:	b29b      	uxth	r3, r3
 801084e:	4313      	orrs	r3, r2
 8010850:	b29a      	uxth	r2, r3
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	330c      	adds	r3, #12
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	461a      	mov	r2, r3
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	330d      	adds	r3, #13
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	021b      	lsls	r3, r3, #8
 8010866:	b29b      	uxth	r3, r3
 8010868:	4313      	orrs	r3, r2
 801086a:	b29a      	uxth	r2, r3
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	7b9a      	ldrb	r2, [r3, #14]
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	7bda      	ldrb	r2, [r3, #15]
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	7c1a      	ldrb	r2, [r3, #16]
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	7c5a      	ldrb	r2, [r3, #17]
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8010890:	7dfb      	ldrb	r3, [r7, #23]
}
 8010892:	4618      	mov	r0, r3
 8010894:	371c      	adds	r7, #28
 8010896:	46bd      	mov	sp, r7
 8010898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop
 80108a0:	01000101 	.word	0x01000101

080108a4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b08c      	sub	sp, #48	@ 0x30
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	4613      	mov	r3, r2
 80108b0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 80108b8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80108ba:	2300      	movs	r3, #0
 80108bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80108c0:	2300      	movs	r3, #0
 80108c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80108c6:	2300      	movs	r3, #0
 80108c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d101      	bne.n	80108d6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80108d2:	2302      	movs	r3, #2
 80108d4:	e0da      	b.n	8010a8c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80108da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	2b09      	cmp	r3, #9
 80108e0:	d002      	beq.n	80108e8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80108e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e4:	2209      	movs	r2, #9
 80108e6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	781a      	ldrb	r2, [r3, #0]
 80108ec:	6a3b      	ldr	r3, [r7, #32]
 80108ee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	785a      	ldrb	r2, [r3, #1]
 80108f4:	6a3b      	ldr	r3, [r7, #32]
 80108f6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	3302      	adds	r3, #2
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	461a      	mov	r2, r3
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	3303      	adds	r3, #3
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	021b      	lsls	r3, r3, #8
 8010908:	b29b      	uxth	r3, r3
 801090a:	4313      	orrs	r3, r2
 801090c:	b29b      	uxth	r3, r3
 801090e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010912:	bf28      	it	cs
 8010914:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8010918:	b29a      	uxth	r2, r3
 801091a:	6a3b      	ldr	r3, [r7, #32]
 801091c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	791a      	ldrb	r2, [r3, #4]
 8010922:	6a3b      	ldr	r3, [r7, #32]
 8010924:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	795a      	ldrb	r2, [r3, #5]
 801092a:	6a3b      	ldr	r3, [r7, #32]
 801092c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	799a      	ldrb	r2, [r3, #6]
 8010932:	6a3b      	ldr	r3, [r7, #32]
 8010934:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	79da      	ldrb	r2, [r3, #7]
 801093a:	6a3b      	ldr	r3, [r7, #32]
 801093c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	7a1a      	ldrb	r2, [r3, #8]
 8010942:	6a3b      	ldr	r3, [r7, #32]
 8010944:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8010946:	88fb      	ldrh	r3, [r7, #6]
 8010948:	2b09      	cmp	r3, #9
 801094a:	f240 809d 	bls.w	8010a88 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 801094e:	2309      	movs	r3, #9
 8010950:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010952:	2300      	movs	r3, #0
 8010954:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010956:	e081      	b.n	8010a5c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010958:	f107 0316 	add.w	r3, r7, #22
 801095c:	4619      	mov	r1, r3
 801095e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010960:	f000 f9e8 	bl	8010d34 <USBH_GetNextDesc>
 8010964:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8010966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010968:	785b      	ldrb	r3, [r3, #1]
 801096a:	2b04      	cmp	r3, #4
 801096c:	d176      	bne.n	8010a5c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 801096e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	2b09      	cmp	r3, #9
 8010974:	d002      	beq.n	801097c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8010976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010978:	2209      	movs	r2, #9
 801097a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 801097c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010980:	221a      	movs	r2, #26
 8010982:	fb02 f303 	mul.w	r3, r2, r3
 8010986:	3308      	adds	r3, #8
 8010988:	6a3a      	ldr	r2, [r7, #32]
 801098a:	4413      	add	r3, r2
 801098c:	3302      	adds	r3, #2
 801098e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010990:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010992:	69f8      	ldr	r0, [r7, #28]
 8010994:	f000 f87e 	bl	8010a94 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010998:	2300      	movs	r3, #0
 801099a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 801099e:	2300      	movs	r3, #0
 80109a0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80109a2:	e043      	b.n	8010a2c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80109a4:	f107 0316 	add.w	r3, r7, #22
 80109a8:	4619      	mov	r1, r3
 80109aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109ac:	f000 f9c2 	bl	8010d34 <USBH_GetNextDesc>
 80109b0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80109b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109b4:	785b      	ldrb	r3, [r3, #1]
 80109b6:	2b05      	cmp	r3, #5
 80109b8:	d138      	bne.n	8010a2c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80109ba:	69fb      	ldr	r3, [r7, #28]
 80109bc:	795b      	ldrb	r3, [r3, #5]
 80109be:	2b01      	cmp	r3, #1
 80109c0:	d113      	bne.n	80109ea <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80109c6:	2b02      	cmp	r3, #2
 80109c8:	d003      	beq.n	80109d2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80109ca:	69fb      	ldr	r3, [r7, #28]
 80109cc:	799b      	ldrb	r3, [r3, #6]
 80109ce:	2b03      	cmp	r3, #3
 80109d0:	d10b      	bne.n	80109ea <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	79db      	ldrb	r3, [r3, #7]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d10b      	bne.n	80109f2 <USBH_ParseCfgDesc+0x14e>
 80109da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	2b09      	cmp	r3, #9
 80109e0:	d007      	beq.n	80109f2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80109e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109e4:	2209      	movs	r2, #9
 80109e6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80109e8:	e003      	b.n	80109f2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80109ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109ec:	2207      	movs	r2, #7
 80109ee:	701a      	strb	r2, [r3, #0]
 80109f0:	e000      	b.n	80109f4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80109f2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80109f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80109fc:	3201      	adds	r2, #1
 80109fe:	00d2      	lsls	r2, r2, #3
 8010a00:	211a      	movs	r1, #26
 8010a02:	fb01 f303 	mul.w	r3, r1, r3
 8010a06:	4413      	add	r3, r2
 8010a08:	3308      	adds	r3, #8
 8010a0a:	6a3a      	ldr	r2, [r7, #32]
 8010a0c:	4413      	add	r3, r2
 8010a0e:	3304      	adds	r3, #4
 8010a10:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8010a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a14:	69b9      	ldr	r1, [r7, #24]
 8010a16:	68f8      	ldr	r0, [r7, #12]
 8010a18:	f000 f870 	bl	8010afc <USBH_ParseEPDesc>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8010a22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a26:	3301      	adds	r3, #1
 8010a28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010a2c:	69fb      	ldr	r3, [r7, #28]
 8010a2e:	791b      	ldrb	r3, [r3, #4]
 8010a30:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d204      	bcs.n	8010a42 <USBH_ParseCfgDesc+0x19e>
 8010a38:	6a3b      	ldr	r3, [r7, #32]
 8010a3a:	885a      	ldrh	r2, [r3, #2]
 8010a3c:	8afb      	ldrh	r3, [r7, #22]
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d8b0      	bhi.n	80109a4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8010a42:	69fb      	ldr	r3, [r7, #28]
 8010a44:	791b      	ldrb	r3, [r3, #4]
 8010a46:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d201      	bcs.n	8010a52 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8010a4e:	2303      	movs	r3, #3
 8010a50:	e01c      	b.n	8010a8c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8010a52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a56:	3301      	adds	r3, #1
 8010a58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a60:	2b01      	cmp	r3, #1
 8010a62:	d805      	bhi.n	8010a70 <USBH_ParseCfgDesc+0x1cc>
 8010a64:	6a3b      	ldr	r3, [r7, #32]
 8010a66:	885a      	ldrh	r2, [r3, #2]
 8010a68:	8afb      	ldrh	r3, [r7, #22]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	f63f af74 	bhi.w	8010958 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8010a70:	6a3b      	ldr	r3, [r7, #32]
 8010a72:	791b      	ldrb	r3, [r3, #4]
 8010a74:	2b02      	cmp	r3, #2
 8010a76:	bf28      	it	cs
 8010a78:	2302      	movcs	r3, #2
 8010a7a:	b2db      	uxtb	r3, r3
 8010a7c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d201      	bcs.n	8010a88 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8010a84:	2303      	movs	r3, #3
 8010a86:	e001      	b.n	8010a8c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8010a88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3730      	adds	r7, #48	@ 0x30
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8010a94:	b480      	push	{r7}
 8010a96:	b083      	sub	sp, #12
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	781a      	ldrb	r2, [r3, #0]
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	785a      	ldrb	r2, [r3, #1]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	789a      	ldrb	r2, [r3, #2]
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	78da      	ldrb	r2, [r3, #3]
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	3304      	adds	r3, #4
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	2b02      	cmp	r3, #2
 8010ac6:	bf28      	it	cs
 8010ac8:	2302      	movcs	r3, #2
 8010aca:	b2da      	uxtb	r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	795a      	ldrb	r2, [r3, #5]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	799a      	ldrb	r2, [r3, #6]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	79da      	ldrb	r2, [r3, #7]
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	7a1a      	ldrb	r2, [r3, #8]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	721a      	strb	r2, [r3, #8]
}
 8010af0:	bf00      	nop
 8010af2:	370c      	adds	r7, #12
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr

08010afc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b087      	sub	sp, #28
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	60f8      	str	r0, [r7, #12]
 8010b04:	60b9      	str	r1, [r7, #8]
 8010b06:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	781a      	ldrb	r2, [r3, #0]
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	785a      	ldrb	r2, [r3, #1]
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	789a      	ldrb	r2, [r3, #2]
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	78da      	ldrb	r2, [r3, #3]
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	3304      	adds	r3, #4
 8010b30:	781b      	ldrb	r3, [r3, #0]
 8010b32:	461a      	mov	r2, r3
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	3305      	adds	r3, #5
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	021b      	lsls	r3, r3, #8
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	4313      	orrs	r3, r2
 8010b40:	b29a      	uxth	r2, r3
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	799a      	ldrb	r2, [r3, #6]
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	889b      	ldrh	r3, [r3, #4]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d00a      	beq.n	8010b6c <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010b56:	68bb      	ldr	r3, [r7, #8]
 8010b58:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8010b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010b5e:	d805      	bhi.n	8010b6c <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8010b64:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	d901      	bls.n	8010b70 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8010b6c:	2303      	movs	r3, #3
 8010b6e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d136      	bne.n	8010be8 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	78db      	ldrb	r3, [r3, #3]
 8010b7e:	f003 0303 	and.w	r3, r3, #3
 8010b82:	2b02      	cmp	r3, #2
 8010b84:	d108      	bne.n	8010b98 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	889b      	ldrh	r3, [r3, #4]
 8010b8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b8e:	f240 8097 	bls.w	8010cc0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010b92:	2303      	movs	r3, #3
 8010b94:	75fb      	strb	r3, [r7, #23]
 8010b96:	e093      	b.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	78db      	ldrb	r3, [r3, #3]
 8010b9c:	f003 0303 	and.w	r3, r3, #3
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d107      	bne.n	8010bb4 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	889b      	ldrh	r3, [r3, #4]
 8010ba8:	2b40      	cmp	r3, #64	@ 0x40
 8010baa:	f240 8089 	bls.w	8010cc0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010bae:	2303      	movs	r3, #3
 8010bb0:	75fb      	strb	r3, [r7, #23]
 8010bb2:	e085      	b.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	78db      	ldrb	r3, [r3, #3]
 8010bb8:	f003 0303 	and.w	r3, r3, #3
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d005      	beq.n	8010bcc <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	78db      	ldrb	r3, [r3, #3]
 8010bc4:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010bc8:	2b03      	cmp	r3, #3
 8010bca:	d10a      	bne.n	8010be2 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	799b      	ldrb	r3, [r3, #6]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d003      	beq.n	8010bdc <USBH_ParseEPDesc+0xe0>
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	799b      	ldrb	r3, [r3, #6]
 8010bd8:	2b10      	cmp	r3, #16
 8010bda:	d970      	bls.n	8010cbe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010bdc:	2303      	movs	r3, #3
 8010bde:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010be0:	e06d      	b.n	8010cbe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010be2:	2303      	movs	r3, #3
 8010be4:	75fb      	strb	r3, [r7, #23]
 8010be6:	e06b      	b.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010bee:	2b01      	cmp	r3, #1
 8010bf0:	d13c      	bne.n	8010c6c <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	78db      	ldrb	r3, [r3, #3]
 8010bf6:	f003 0303 	and.w	r3, r3, #3
 8010bfa:	2b02      	cmp	r3, #2
 8010bfc:	d005      	beq.n	8010c0a <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	78db      	ldrb	r3, [r3, #3]
 8010c02:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d106      	bne.n	8010c18 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	889b      	ldrh	r3, [r3, #4]
 8010c0e:	2b40      	cmp	r3, #64	@ 0x40
 8010c10:	d956      	bls.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010c12:	2303      	movs	r3, #3
 8010c14:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010c16:	e053      	b.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	78db      	ldrb	r3, [r3, #3]
 8010c1c:	f003 0303 	and.w	r3, r3, #3
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	d10e      	bne.n	8010c42 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	799b      	ldrb	r3, [r3, #6]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d007      	beq.n	8010c3c <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8010c30:	2b10      	cmp	r3, #16
 8010c32:	d803      	bhi.n	8010c3c <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8010c38:	2b40      	cmp	r3, #64	@ 0x40
 8010c3a:	d941      	bls.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010c3c:	2303      	movs	r3, #3
 8010c3e:	75fb      	strb	r3, [r7, #23]
 8010c40:	e03e      	b.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	78db      	ldrb	r3, [r3, #3]
 8010c46:	f003 0303 	and.w	r3, r3, #3
 8010c4a:	2b03      	cmp	r3, #3
 8010c4c:	d10b      	bne.n	8010c66 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	799b      	ldrb	r3, [r3, #6]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d004      	beq.n	8010c60 <USBH_ParseEPDesc+0x164>
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	889b      	ldrh	r3, [r3, #4]
 8010c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010c5e:	d32f      	bcc.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010c60:	2303      	movs	r3, #3
 8010c62:	75fb      	strb	r3, [r7, #23]
 8010c64:	e02c      	b.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010c66:	2303      	movs	r3, #3
 8010c68:	75fb      	strb	r3, [r7, #23]
 8010c6a:	e029      	b.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010c72:	2b02      	cmp	r3, #2
 8010c74:	d120      	bne.n	8010cb8 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	78db      	ldrb	r3, [r3, #3]
 8010c7a:	f003 0303 	and.w	r3, r3, #3
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d106      	bne.n	8010c90 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	889b      	ldrh	r3, [r3, #4]
 8010c86:	2b08      	cmp	r3, #8
 8010c88:	d01a      	beq.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010c8a:	2303      	movs	r3, #3
 8010c8c:	75fb      	strb	r3, [r7, #23]
 8010c8e:	e017      	b.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	78db      	ldrb	r3, [r3, #3]
 8010c94:	f003 0303 	and.w	r3, r3, #3
 8010c98:	2b03      	cmp	r3, #3
 8010c9a:	d10a      	bne.n	8010cb2 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	799b      	ldrb	r3, [r3, #6]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d003      	beq.n	8010cac <USBH_ParseEPDesc+0x1b0>
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	889b      	ldrh	r3, [r3, #4]
 8010ca8:	2b08      	cmp	r3, #8
 8010caa:	d909      	bls.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010cac:	2303      	movs	r3, #3
 8010cae:	75fb      	strb	r3, [r7, #23]
 8010cb0:	e006      	b.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010cb2:	2303      	movs	r3, #3
 8010cb4:	75fb      	strb	r3, [r7, #23]
 8010cb6:	e003      	b.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010cb8:	2303      	movs	r3, #3
 8010cba:	75fb      	strb	r3, [r7, #23]
 8010cbc:	e000      	b.n	8010cc0 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010cbe:	bf00      	nop
  }

  return status;
 8010cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	371c      	adds	r7, #28
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ccc:	4770      	bx	lr

08010cce <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010cce:	b480      	push	{r7}
 8010cd0:	b087      	sub	sp, #28
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	60f8      	str	r0, [r7, #12]
 8010cd6:	60b9      	str	r1, [r7, #8]
 8010cd8:	4613      	mov	r3, r2
 8010cda:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	3301      	adds	r3, #1
 8010ce0:	781b      	ldrb	r3, [r3, #0]
 8010ce2:	2b03      	cmp	r3, #3
 8010ce4:	d120      	bne.n	8010d28 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	1e9a      	subs	r2, r3, #2
 8010cec:	88fb      	ldrh	r3, [r7, #6]
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	bf28      	it	cs
 8010cf2:	4613      	movcs	r3, r2
 8010cf4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	3302      	adds	r3, #2
 8010cfa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	82fb      	strh	r3, [r7, #22]
 8010d00:	e00b      	b.n	8010d1a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010d02:	8afb      	ldrh	r3, [r7, #22]
 8010d04:	68fa      	ldr	r2, [r7, #12]
 8010d06:	4413      	add	r3, r2
 8010d08:	781a      	ldrb	r2, [r3, #0]
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	3301      	adds	r3, #1
 8010d12:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010d14:	8afb      	ldrh	r3, [r7, #22]
 8010d16:	3302      	adds	r3, #2
 8010d18:	82fb      	strh	r3, [r7, #22]
 8010d1a:	8afa      	ldrh	r2, [r7, #22]
 8010d1c:	8abb      	ldrh	r3, [r7, #20]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d3ef      	bcc.n	8010d02 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	2200      	movs	r2, #0
 8010d26:	701a      	strb	r2, [r3, #0]
  }
}
 8010d28:	bf00      	nop
 8010d2a:	371c      	adds	r7, #28
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d32:	4770      	bx	lr

08010d34 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010d34:	b480      	push	{r7}
 8010d36:	b085      	sub	sp, #20
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	881b      	ldrh	r3, [r3, #0]
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	7812      	ldrb	r2, [r2, #0]
 8010d46:	4413      	add	r3, r2
 8010d48:	b29a      	uxth	r2, r3
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	4413      	add	r3, r2
 8010d58:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3714      	adds	r7, #20
 8010d60:	46bd      	mov	sp, r7
 8010d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d66:	4770      	bx	lr

08010d68 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b086      	sub	sp, #24
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	60f8      	str	r0, [r7, #12]
 8010d70:	60b9      	str	r1, [r7, #8]
 8010d72:	4613      	mov	r3, r2
 8010d74:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010d76:	2301      	movs	r3, #1
 8010d78:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	789b      	ldrb	r3, [r3, #2]
 8010d7e:	2b01      	cmp	r3, #1
 8010d80:	d002      	beq.n	8010d88 <USBH_CtlReq+0x20>
 8010d82:	2b02      	cmp	r3, #2
 8010d84:	d00f      	beq.n	8010da6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8010d86:	e027      	b.n	8010dd8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	68ba      	ldr	r2, [r7, #8]
 8010d8c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	88fa      	ldrh	r2, [r7, #6]
 8010d92:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	2201      	movs	r2, #1
 8010d98:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	2202      	movs	r2, #2
 8010d9e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010da0:	2301      	movs	r3, #1
 8010da2:	75fb      	strb	r3, [r7, #23]
      break;
 8010da4:	e018      	b.n	8010dd8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8010da6:	68f8      	ldr	r0, [r7, #12]
 8010da8:	f000 f81c 	bl	8010de4 <USBH_HandleControl>
 8010dac:	4603      	mov	r3, r0
 8010dae:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010db0:	7dfb      	ldrb	r3, [r7, #23]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d002      	beq.n	8010dbc <USBH_CtlReq+0x54>
 8010db6:	7dfb      	ldrb	r3, [r7, #23]
 8010db8:	2b03      	cmp	r3, #3
 8010dba:	d106      	bne.n	8010dca <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	761a      	strb	r2, [r3, #24]
      break;
 8010dc8:	e005      	b.n	8010dd6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8010dca:	7dfb      	ldrb	r3, [r7, #23]
 8010dcc:	2b02      	cmp	r3, #2
 8010dce:	d102      	bne.n	8010dd6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	709a      	strb	r2, [r3, #2]
      break;
 8010dd6:	bf00      	nop
  }
  return status;
 8010dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3718      	adds	r7, #24
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
	...

08010de4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b086      	sub	sp, #24
 8010de8:	af02      	add	r7, sp, #8
 8010dea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010dec:	2301      	movs	r3, #1
 8010dee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010df0:	2300      	movs	r3, #0
 8010df2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	7e1b      	ldrb	r3, [r3, #24]
 8010df8:	3b01      	subs	r3, #1
 8010dfa:	2b0a      	cmp	r3, #10
 8010dfc:	f200 815f 	bhi.w	80110be <USBH_HandleControl+0x2da>
 8010e00:	a201      	add	r2, pc, #4	@ (adr r2, 8010e08 <USBH_HandleControl+0x24>)
 8010e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e06:	bf00      	nop
 8010e08:	08010e35 	.word	0x08010e35
 8010e0c:	08010e4f 	.word	0x08010e4f
 8010e10:	08010eb9 	.word	0x08010eb9
 8010e14:	08010edf 	.word	0x08010edf
 8010e18:	08010f17 	.word	0x08010f17
 8010e1c:	08010f41 	.word	0x08010f41
 8010e20:	08010f93 	.word	0x08010f93
 8010e24:	08010fb5 	.word	0x08010fb5
 8010e28:	08010ff1 	.word	0x08010ff1
 8010e2c:	08011017 	.word	0x08011017
 8010e30:	08011055 	.word	0x08011055
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f103 0110 	add.w	r1, r3, #16
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	795b      	ldrb	r3, [r3, #5]
 8010e3e:	461a      	mov	r2, r3
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f000 f951 	bl	80110e8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2202      	movs	r2, #2
 8010e4a:	761a      	strb	r2, [r3, #24]
      break;
 8010e4c:	e142      	b.n	80110d4 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	795b      	ldrb	r3, [r3, #5]
 8010e52:	4619      	mov	r1, r3
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f000 fcb9 	bl	80117cc <USBH_LL_GetURBState>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010e5e:	7bbb      	ldrb	r3, [r7, #14]
 8010e60:	2b01      	cmp	r3, #1
 8010e62:	d11e      	bne.n	8010ea2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	7c1b      	ldrb	r3, [r3, #16]
 8010e68:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010e6c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	8adb      	ldrh	r3, [r3, #22]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d00a      	beq.n	8010e8c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010e76:	7b7b      	ldrb	r3, [r7, #13]
 8010e78:	2b80      	cmp	r3, #128	@ 0x80
 8010e7a:	d103      	bne.n	8010e84 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2203      	movs	r2, #3
 8010e80:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010e82:	e11e      	b.n	80110c2 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2205      	movs	r2, #5
 8010e88:	761a      	strb	r2, [r3, #24]
      break;
 8010e8a:	e11a      	b.n	80110c2 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 8010e8c:	7b7b      	ldrb	r3, [r7, #13]
 8010e8e:	2b80      	cmp	r3, #128	@ 0x80
 8010e90:	d103      	bne.n	8010e9a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2209      	movs	r2, #9
 8010e96:	761a      	strb	r2, [r3, #24]
      break;
 8010e98:	e113      	b.n	80110c2 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2207      	movs	r2, #7
 8010e9e:	761a      	strb	r2, [r3, #24]
      break;
 8010ea0:	e10f      	b.n	80110c2 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010ea2:	7bbb      	ldrb	r3, [r7, #14]
 8010ea4:	2b04      	cmp	r3, #4
 8010ea6:	d003      	beq.n	8010eb0 <USBH_HandleControl+0xcc>
 8010ea8:	7bbb      	ldrb	r3, [r7, #14]
 8010eaa:	2b02      	cmp	r3, #2
 8010eac:	f040 8109 	bne.w	80110c2 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	220b      	movs	r2, #11
 8010eb4:	761a      	strb	r2, [r3, #24]
      break;
 8010eb6:	e104      	b.n	80110c2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010ebe:	b29a      	uxth	r2, r3
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6899      	ldr	r1, [r3, #8]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	899a      	ldrh	r2, [r3, #12]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	791b      	ldrb	r3, [r3, #4]
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f000 f948 	bl	8011166 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2204      	movs	r2, #4
 8010eda:	761a      	strb	r2, [r3, #24]
      break;
 8010edc:	e0fa      	b.n	80110d4 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	791b      	ldrb	r3, [r3, #4]
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f000 fc71 	bl	80117cc <USBH_LL_GetURBState>
 8010eea:	4603      	mov	r3, r0
 8010eec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010eee:	7bbb      	ldrb	r3, [r7, #14]
 8010ef0:	2b01      	cmp	r3, #1
 8010ef2:	d102      	bne.n	8010efa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2209      	movs	r2, #9
 8010ef8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010efa:	7bbb      	ldrb	r3, [r7, #14]
 8010efc:	2b05      	cmp	r3, #5
 8010efe:	d102      	bne.n	8010f06 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010f00:	2303      	movs	r3, #3
 8010f02:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010f04:	e0df      	b.n	80110c6 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 8010f06:	7bbb      	ldrb	r3, [r7, #14]
 8010f08:	2b04      	cmp	r3, #4
 8010f0a:	f040 80dc 	bne.w	80110c6 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	220b      	movs	r2, #11
 8010f12:	761a      	strb	r2, [r3, #24]
      break;
 8010f14:	e0d7      	b.n	80110c6 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6899      	ldr	r1, [r3, #8]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	899a      	ldrh	r2, [r3, #12]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	795b      	ldrb	r3, [r3, #5]
 8010f22:	2001      	movs	r0, #1
 8010f24:	9000      	str	r0, [sp, #0]
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f000 f8f8 	bl	801111c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010f32:	b29a      	uxth	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2206      	movs	r2, #6
 8010f3c:	761a      	strb	r2, [r3, #24]
      break;
 8010f3e:	e0c9      	b.n	80110d4 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	795b      	ldrb	r3, [r3, #5]
 8010f44:	4619      	mov	r1, r3
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f000 fc40 	bl	80117cc <USBH_LL_GetURBState>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010f50:	7bbb      	ldrb	r3, [r7, #14]
 8010f52:	2b01      	cmp	r3, #1
 8010f54:	d103      	bne.n	8010f5e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2207      	movs	r2, #7
 8010f5a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010f5c:	e0b5      	b.n	80110ca <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 8010f5e:	7bbb      	ldrb	r3, [r7, #14]
 8010f60:	2b05      	cmp	r3, #5
 8010f62:	d105      	bne.n	8010f70 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	220c      	movs	r2, #12
 8010f68:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010f6a:	2303      	movs	r3, #3
 8010f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8010f6e:	e0ac      	b.n	80110ca <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010f70:	7bbb      	ldrb	r3, [r7, #14]
 8010f72:	2b02      	cmp	r3, #2
 8010f74:	d103      	bne.n	8010f7e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2205      	movs	r2, #5
 8010f7a:	761a      	strb	r2, [r3, #24]
      break;
 8010f7c:	e0a5      	b.n	80110ca <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 8010f7e:	7bbb      	ldrb	r3, [r7, #14]
 8010f80:	2b04      	cmp	r3, #4
 8010f82:	f040 80a2 	bne.w	80110ca <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	220b      	movs	r2, #11
 8010f8a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010f8c:	2302      	movs	r3, #2
 8010f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8010f90:	e09b      	b.n	80110ca <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	791b      	ldrb	r3, [r3, #4]
 8010f96:	2200      	movs	r2, #0
 8010f98:	2100      	movs	r1, #0
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f000 f8e3 	bl	8011166 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2208      	movs	r2, #8
 8010fb0:	761a      	strb	r2, [r3, #24]

      break;
 8010fb2:	e08f      	b.n	80110d4 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	791b      	ldrb	r3, [r3, #4]
 8010fb8:	4619      	mov	r1, r3
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f000 fc06 	bl	80117cc <USBH_LL_GetURBState>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010fc4:	7bbb      	ldrb	r3, [r7, #14]
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d105      	bne.n	8010fd6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	220d      	movs	r2, #13
 8010fce:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010fd4:	e07b      	b.n	80110ce <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 8010fd6:	7bbb      	ldrb	r3, [r7, #14]
 8010fd8:	2b04      	cmp	r3, #4
 8010fda:	d103      	bne.n	8010fe4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	220b      	movs	r2, #11
 8010fe0:	761a      	strb	r2, [r3, #24]
      break;
 8010fe2:	e074      	b.n	80110ce <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 8010fe4:	7bbb      	ldrb	r3, [r7, #14]
 8010fe6:	2b05      	cmp	r3, #5
 8010fe8:	d171      	bne.n	80110ce <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 8010fea:	2303      	movs	r3, #3
 8010fec:	73fb      	strb	r3, [r7, #15]
      break;
 8010fee:	e06e      	b.n	80110ce <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	795b      	ldrb	r3, [r3, #5]
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	9200      	str	r2, [sp, #0]
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	2100      	movs	r1, #0
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f000 f88d 	bl	801111c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8011008:	b29a      	uxth	r2, r3
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	220a      	movs	r2, #10
 8011012:	761a      	strb	r2, [r3, #24]
      break;
 8011014:	e05e      	b.n	80110d4 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	795b      	ldrb	r3, [r3, #5]
 801101a:	4619      	mov	r1, r3
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f000 fbd5 	bl	80117cc <USBH_LL_GetURBState>
 8011022:	4603      	mov	r3, r0
 8011024:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8011026:	7bbb      	ldrb	r3, [r7, #14]
 8011028:	2b01      	cmp	r3, #1
 801102a:	d105      	bne.n	8011038 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 801102c:	2300      	movs	r3, #0
 801102e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	220d      	movs	r2, #13
 8011034:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011036:	e04c      	b.n	80110d2 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011038:	7bbb      	ldrb	r3, [r7, #14]
 801103a:	2b02      	cmp	r3, #2
 801103c:	d103      	bne.n	8011046 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2209      	movs	r2, #9
 8011042:	761a      	strb	r2, [r3, #24]
      break;
 8011044:	e045      	b.n	80110d2 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 8011046:	7bbb      	ldrb	r3, [r7, #14]
 8011048:	2b04      	cmp	r3, #4
 801104a:	d142      	bne.n	80110d2 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	220b      	movs	r2, #11
 8011050:	761a      	strb	r2, [r3, #24]
      break;
 8011052:	e03e      	b.n	80110d2 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	7e5b      	ldrb	r3, [r3, #25]
 8011058:	3301      	adds	r3, #1
 801105a:	b2da      	uxtb	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	765a      	strb	r2, [r3, #25]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	7e5b      	ldrb	r3, [r3, #25]
 8011064:	2b02      	cmp	r3, #2
 8011066:	d806      	bhi.n	8011076 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2201      	movs	r2, #1
 801106c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2201      	movs	r2, #1
 8011072:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8011074:	e02e      	b.n	80110d4 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 801107c:	2106      	movs	r1, #6
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2200      	movs	r2, #0
 8011086:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 8011088:	4815      	ldr	r0, [pc, #84]	@ (80110e0 <USBH_HandleControl+0x2fc>)
 801108a:	f000 fdcf 	bl	8011c2c <iprintf>
 801108e:	4815      	ldr	r0, [pc, #84]	@ (80110e4 <USBH_HandleControl+0x300>)
 8011090:	f000 fdcc 	bl	8011c2c <iprintf>
 8011094:	200a      	movs	r0, #10
 8011096:	f000 fddb 	bl	8011c50 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	795b      	ldrb	r3, [r3, #5]
 801109e:	4619      	mov	r1, r3
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 f8ee 	bl	8011282 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	791b      	ldrb	r3, [r3, #4]
 80110aa:	4619      	mov	r1, r3
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f000 f8e8 	bl	8011282 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2200      	movs	r2, #0
 80110b6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80110b8:	2302      	movs	r3, #2
 80110ba:	73fb      	strb	r3, [r7, #15]
      break;
 80110bc:	e00a      	b.n	80110d4 <USBH_HandleControl+0x2f0>

    default:
      break;
 80110be:	bf00      	nop
 80110c0:	e008      	b.n	80110d4 <USBH_HandleControl+0x2f0>
      break;
 80110c2:	bf00      	nop
 80110c4:	e006      	b.n	80110d4 <USBH_HandleControl+0x2f0>
      break;
 80110c6:	bf00      	nop
 80110c8:	e004      	b.n	80110d4 <USBH_HandleControl+0x2f0>
      break;
 80110ca:	bf00      	nop
 80110cc:	e002      	b.n	80110d4 <USBH_HandleControl+0x2f0>
      break;
 80110ce:	bf00      	nop
 80110d0:	e000      	b.n	80110d4 <USBH_HandleControl+0x2f0>
      break;
 80110d2:	bf00      	nop
  }

  return status;
 80110d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3710      	adds	r7, #16
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	080133c8 	.word	0x080133c8
 80110e4:	080134a4 	.word	0x080134a4

080110e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b088      	sub	sp, #32
 80110ec:	af04      	add	r7, sp, #16
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	4613      	mov	r3, r2
 80110f4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80110f6:	79f9      	ldrb	r1, [r7, #7]
 80110f8:	2300      	movs	r3, #0
 80110fa:	9303      	str	r3, [sp, #12]
 80110fc:	2308      	movs	r3, #8
 80110fe:	9302      	str	r3, [sp, #8]
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	9301      	str	r3, [sp, #4]
 8011104:	2300      	movs	r3, #0
 8011106:	9300      	str	r3, [sp, #0]
 8011108:	2300      	movs	r3, #0
 801110a:	2200      	movs	r2, #0
 801110c:	68f8      	ldr	r0, [r7, #12]
 801110e:	f000 fb2c 	bl	801176a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8011112:	2300      	movs	r3, #0
}
 8011114:	4618      	mov	r0, r3
 8011116:	3710      	adds	r7, #16
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b088      	sub	sp, #32
 8011120:	af04      	add	r7, sp, #16
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	4611      	mov	r1, r2
 8011128:	461a      	mov	r2, r3
 801112a:	460b      	mov	r3, r1
 801112c:	80fb      	strh	r3, [r7, #6]
 801112e:	4613      	mov	r3, r2
 8011130:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8011138:	2b00      	cmp	r3, #0
 801113a:	d001      	beq.n	8011140 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801113c:	2300      	movs	r3, #0
 801113e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011140:	7979      	ldrb	r1, [r7, #5]
 8011142:	7e3b      	ldrb	r3, [r7, #24]
 8011144:	9303      	str	r3, [sp, #12]
 8011146:	88fb      	ldrh	r3, [r7, #6]
 8011148:	9302      	str	r3, [sp, #8]
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	9301      	str	r3, [sp, #4]
 801114e:	2301      	movs	r3, #1
 8011150:	9300      	str	r3, [sp, #0]
 8011152:	2300      	movs	r3, #0
 8011154:	2200      	movs	r2, #0
 8011156:	68f8      	ldr	r0, [r7, #12]
 8011158:	f000 fb07 	bl	801176a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801115c:	2300      	movs	r3, #0
}
 801115e:	4618      	mov	r0, r3
 8011160:	3710      	adds	r7, #16
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}

08011166 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8011166:	b580      	push	{r7, lr}
 8011168:	b088      	sub	sp, #32
 801116a:	af04      	add	r7, sp, #16
 801116c:	60f8      	str	r0, [r7, #12]
 801116e:	60b9      	str	r1, [r7, #8]
 8011170:	4611      	mov	r1, r2
 8011172:	461a      	mov	r2, r3
 8011174:	460b      	mov	r3, r1
 8011176:	80fb      	strh	r3, [r7, #6]
 8011178:	4613      	mov	r3, r2
 801117a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801117c:	7979      	ldrb	r1, [r7, #5]
 801117e:	2300      	movs	r3, #0
 8011180:	9303      	str	r3, [sp, #12]
 8011182:	88fb      	ldrh	r3, [r7, #6]
 8011184:	9302      	str	r3, [sp, #8]
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	9301      	str	r3, [sp, #4]
 801118a:	2301      	movs	r3, #1
 801118c:	9300      	str	r3, [sp, #0]
 801118e:	2300      	movs	r3, #0
 8011190:	2201      	movs	r2, #1
 8011192:	68f8      	ldr	r0, [r7, #12]
 8011194:	f000 fae9 	bl	801176a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011198:	2300      	movs	r3, #0

}
 801119a:	4618      	mov	r0, r3
 801119c:	3710      	adds	r7, #16
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}

080111a2 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 80111a2:	b580      	push	{r7, lr}
 80111a4:	b088      	sub	sp, #32
 80111a6:	af04      	add	r7, sp, #16
 80111a8:	60f8      	str	r0, [r7, #12]
 80111aa:	60b9      	str	r1, [r7, #8]
 80111ac:	4611      	mov	r1, r2
 80111ae:	461a      	mov	r2, r3
 80111b0:	460b      	mov	r3, r1
 80111b2:	71fb      	strb	r3, [r7, #7]
 80111b4:	4613      	mov	r3, r2
 80111b6:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80111b8:	79fb      	ldrb	r3, [r7, #7]
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	79b9      	ldrb	r1, [r7, #6]
 80111be:	2200      	movs	r2, #0
 80111c0:	9203      	str	r2, [sp, #12]
 80111c2:	9302      	str	r3, [sp, #8]
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	9301      	str	r3, [sp, #4]
 80111c8:	2301      	movs	r3, #1
 80111ca:	9300      	str	r3, [sp, #0]
 80111cc:	2303      	movs	r3, #3
 80111ce:	2201      	movs	r2, #1
 80111d0:	68f8      	ldr	r0, [r7, #12]
 80111d2:	f000 faca 	bl	801176a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 80111d6:	2300      	movs	r3, #0
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3710      	adds	r7, #16
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b086      	sub	sp, #24
 80111e4:	af04      	add	r7, sp, #16
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	4608      	mov	r0, r1
 80111ea:	4611      	mov	r1, r2
 80111ec:	461a      	mov	r2, r3
 80111ee:	4603      	mov	r3, r0
 80111f0:	70fb      	strb	r3, [r7, #3]
 80111f2:	460b      	mov	r3, r1
 80111f4:	70bb      	strb	r3, [r7, #2]
 80111f6:	4613      	mov	r3, r2
 80111f8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80111fa:	7878      	ldrb	r0, [r7, #1]
 80111fc:	78ba      	ldrb	r2, [r7, #2]
 80111fe:	78f9      	ldrb	r1, [r7, #3]
 8011200:	8b3b      	ldrh	r3, [r7, #24]
 8011202:	9302      	str	r3, [sp, #8]
 8011204:	7d3b      	ldrb	r3, [r7, #20]
 8011206:	9301      	str	r3, [sp, #4]
 8011208:	7c3b      	ldrb	r3, [r7, #16]
 801120a:	9300      	str	r3, [sp, #0]
 801120c:	4603      	mov	r3, r0
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f000 fa5d 	bl	80116ce <USBH_LL_OpenPipe>

  return USBH_OK;
 8011214:	2300      	movs	r3, #0
}
 8011216:	4618      	mov	r0, r3
 8011218:	3708      	adds	r7, #8
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}

0801121e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 801121e:	b580      	push	{r7, lr}
 8011220:	b082      	sub	sp, #8
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
 8011226:	460b      	mov	r3, r1
 8011228:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801122a:	78fb      	ldrb	r3, [r7, #3]
 801122c:	4619      	mov	r1, r3
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f000 fa7c 	bl	801172c <USBH_LL_ClosePipe>

  return USBH_OK;
 8011234:	2300      	movs	r3, #0
}
 8011236:	4618      	mov	r0, r3
 8011238:	3708      	adds	r7, #8
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}

0801123e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801123e:	b580      	push	{r7, lr}
 8011240:	b084      	sub	sp, #16
 8011242:	af00      	add	r7, sp, #0
 8011244:	6078      	str	r0, [r7, #4]
 8011246:	460b      	mov	r3, r1
 8011248:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f000 f839 	bl	80112c2 <USBH_GetFreePipe>
 8011250:	4603      	mov	r3, r0
 8011252:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011254:	89fb      	ldrh	r3, [r7, #14]
 8011256:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801125a:	4293      	cmp	r3, r2
 801125c:	d00b      	beq.n	8011276 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801125e:	78fa      	ldrb	r2, [r7, #3]
 8011260:	89fb      	ldrh	r3, [r7, #14]
 8011262:	f003 030f 	and.w	r3, r3, #15
 8011266:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801126a:	6879      	ldr	r1, [r7, #4]
 801126c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011270:	009b      	lsls	r3, r3, #2
 8011272:	440b      	add	r3, r1
 8011274:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8011276:	89fb      	ldrh	r3, [r7, #14]
 8011278:	b2db      	uxtb	r3, r3
}
 801127a:	4618      	mov	r0, r3
 801127c:	3710      	adds	r7, #16
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}

08011282 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011282:	b480      	push	{r7}
 8011284:	b083      	sub	sp, #12
 8011286:	af00      	add	r7, sp, #0
 8011288:	6078      	str	r0, [r7, #4]
 801128a:	460b      	mov	r3, r1
 801128c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 801128e:	78fb      	ldrb	r3, [r7, #3]
 8011290:	2b0f      	cmp	r3, #15
 8011292:	d80f      	bhi.n	80112b4 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011294:	78fb      	ldrb	r3, [r7, #3]
 8011296:	687a      	ldr	r2, [r7, #4]
 8011298:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	4413      	add	r3, r2
 80112a0:	685a      	ldr	r2, [r3, #4]
 80112a2:	78fb      	ldrb	r3, [r7, #3]
 80112a4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80112a8:	6879      	ldr	r1, [r7, #4]
 80112aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80112ae:	009b      	lsls	r3, r3, #2
 80112b0:	440b      	add	r3, r1
 80112b2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80112b4:	2300      	movs	r3, #0
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	370c      	adds	r7, #12
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr

080112c2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80112c2:	b480      	push	{r7}
 80112c4:	b085      	sub	sp, #20
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80112ca:	2300      	movs	r3, #0
 80112cc:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80112ce:	2300      	movs	r3, #0
 80112d0:	73fb      	strb	r3, [r7, #15]
 80112d2:	e010      	b.n	80112f6 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80112d4:	7bfb      	ldrb	r3, [r7, #15]
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80112dc:	009b      	lsls	r3, r3, #2
 80112de:	4413      	add	r3, r2
 80112e0:	685b      	ldr	r3, [r3, #4]
 80112e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d102      	bne.n	80112f0 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 80112ea:	7bfb      	ldrb	r3, [r7, #15]
 80112ec:	b29b      	uxth	r3, r3
 80112ee:	e007      	b.n	8011300 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80112f0:	7bfb      	ldrb	r3, [r7, #15]
 80112f2:	3301      	adds	r3, #1
 80112f4:	73fb      	strb	r3, [r7, #15]
 80112f6:	7bfb      	ldrb	r3, [r7, #15]
 80112f8:	2b0f      	cmp	r3, #15
 80112fa:	d9eb      	bls.n	80112d4 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80112fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8011300:	4618      	mov	r0, r3
 8011302:	3714      	adds	r7, #20
 8011304:	46bd      	mov	sp, r7
 8011306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130a:	4770      	bx	lr

0801130c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8011310:	2200      	movs	r2, #0
 8011312:	490e      	ldr	r1, [pc, #56]	@ (801134c <MX_USB_HOST_Init+0x40>)
 8011314:	480e      	ldr	r0, [pc, #56]	@ (8011350 <MX_USB_HOST_Init+0x44>)
 8011316:	f7fe f933 	bl	800f580 <USBH_Init>
 801131a:	4603      	mov	r3, r0
 801131c:	2b00      	cmp	r3, #0
 801131e:	d001      	beq.n	8011324 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011320:	f7f1 fbe2 	bl	8002ae8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASS) != USBH_OK)
 8011324:	490b      	ldr	r1, [pc, #44]	@ (8011354 <MX_USB_HOST_Init+0x48>)
 8011326:	480a      	ldr	r0, [pc, #40]	@ (8011350 <MX_USB_HOST_Init+0x44>)
 8011328:	f7fe f9e8 	bl	800f6fc <USBH_RegisterClass>
 801132c:	4603      	mov	r3, r0
 801132e:	2b00      	cmp	r3, #0
 8011330:	d001      	beq.n	8011336 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8011332:	f7f1 fbd9 	bl	8002ae8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8011336:	4806      	ldr	r0, [pc, #24]	@ (8011350 <MX_USB_HOST_Init+0x44>)
 8011338:	f7fe fad0 	bl	800f8dc <USBH_Start>
 801133c:	4603      	mov	r3, r0
 801133e:	2b00      	cmp	r3, #0
 8011340:	d001      	beq.n	8011346 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8011342:	f7f1 fbd1 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011346:	bf00      	nop
 8011348:	bd80      	pop	{r7, pc}
 801134a:	bf00      	nop
 801134c:	0801136d 	.word	0x0801136d
 8011350:	20009304 	.word	0x20009304
 8011354:	20000270 	.word	0x20000270

08011358 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8011358:	b580      	push	{r7, lr}
 801135a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 801135c:	4802      	ldr	r0, [pc, #8]	@ (8011368 <MX_USB_HOST_Process+0x10>)
 801135e:	f7fe facd 	bl	800f8fc <USBH_Process>
}
 8011362:	bf00      	nop
 8011364:	bd80      	pop	{r7, pc}
 8011366:	bf00      	nop
 8011368:	20009304 	.word	0x20009304

0801136c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801136c:	b480      	push	{r7}
 801136e:	b083      	sub	sp, #12
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	460b      	mov	r3, r1
 8011376:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011378:	78fb      	ldrb	r3, [r7, #3]
 801137a:	3b01      	subs	r3, #1
 801137c:	2b04      	cmp	r3, #4
 801137e:	d819      	bhi.n	80113b4 <USBH_UserProcess+0x48>
 8011380:	a201      	add	r2, pc, #4	@ (adr r2, 8011388 <USBH_UserProcess+0x1c>)
 8011382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011386:	bf00      	nop
 8011388:	080113b5 	.word	0x080113b5
 801138c:	080113a5 	.word	0x080113a5
 8011390:	080113b5 	.word	0x080113b5
 8011394:	080113ad 	.word	0x080113ad
 8011398:	0801139d 	.word	0x0801139d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801139c:	4b09      	ldr	r3, [pc, #36]	@ (80113c4 <USBH_UserProcess+0x58>)
 801139e:	2203      	movs	r2, #3
 80113a0:	701a      	strb	r2, [r3, #0]
  break;
 80113a2:	e008      	b.n	80113b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80113a4:	4b07      	ldr	r3, [pc, #28]	@ (80113c4 <USBH_UserProcess+0x58>)
 80113a6:	2202      	movs	r2, #2
 80113a8:	701a      	strb	r2, [r3, #0]
  break;
 80113aa:	e004      	b.n	80113b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80113ac:	4b05      	ldr	r3, [pc, #20]	@ (80113c4 <USBH_UserProcess+0x58>)
 80113ae:	2201      	movs	r2, #1
 80113b0:	701a      	strb	r2, [r3, #0]
  break;
 80113b2:	e000      	b.n	80113b6 <USBH_UserProcess+0x4a>

  default:
  break;
 80113b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80113b6:	bf00      	nop
 80113b8:	370c      	adds	r7, #12
 80113ba:	46bd      	mov	sp, r7
 80113bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c0:	4770      	bx	lr
 80113c2:	bf00      	nop
 80113c4:	2000a094 	.word	0x2000a094

080113c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b08a      	sub	sp, #40	@ 0x28
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80113d0:	f107 0314 	add.w	r3, r7, #20
 80113d4:	2200      	movs	r2, #0
 80113d6:	601a      	str	r2, [r3, #0]
 80113d8:	605a      	str	r2, [r3, #4]
 80113da:	609a      	str	r2, [r3, #8]
 80113dc:	60da      	str	r2, [r3, #12]
 80113de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4a24      	ldr	r2, [pc, #144]	@ (8011478 <HAL_HCD_MspInit+0xb0>)
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d141      	bne.n	801146e <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80113ea:	2300      	movs	r3, #0
 80113ec:	613b      	str	r3, [r7, #16]
 80113ee:	4b23      	ldr	r3, [pc, #140]	@ (801147c <HAL_HCD_MspInit+0xb4>)
 80113f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113f2:	4a22      	ldr	r2, [pc, #136]	@ (801147c <HAL_HCD_MspInit+0xb4>)
 80113f4:	f043 0302 	orr.w	r3, r3, #2
 80113f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80113fa:	4b20      	ldr	r3, [pc, #128]	@ (801147c <HAL_HCD_MspInit+0xb4>)
 80113fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113fe:	f003 0302 	and.w	r3, r3, #2
 8011402:	613b      	str	r3, [r7, #16]
 8011404:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8011406:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 801140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801140c:	2302      	movs	r3, #2
 801140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011410:	2300      	movs	r3, #0
 8011412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011414:	2300      	movs	r3, #0
 8011416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8011418:	230c      	movs	r3, #12
 801141a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801141c:	f107 0314 	add.w	r3, r7, #20
 8011420:	4619      	mov	r1, r3
 8011422:	4817      	ldr	r0, [pc, #92]	@ (8011480 <HAL_HCD_MspInit+0xb8>)
 8011424:	f7f5 f8ea 	bl	80065fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8011428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801142e:	2300      	movs	r3, #0
 8011430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011432:	2300      	movs	r3, #0
 8011434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8011436:	f107 0314 	add.w	r3, r7, #20
 801143a:	4619      	mov	r1, r3
 801143c:	4810      	ldr	r0, [pc, #64]	@ (8011480 <HAL_HCD_MspInit+0xb8>)
 801143e:	f7f5 f8dd 	bl	80065fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8011442:	2300      	movs	r3, #0
 8011444:	60fb      	str	r3, [r7, #12]
 8011446:	4b0d      	ldr	r3, [pc, #52]	@ (801147c <HAL_HCD_MspInit+0xb4>)
 8011448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801144a:	4a0c      	ldr	r2, [pc, #48]	@ (801147c <HAL_HCD_MspInit+0xb4>)
 801144c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011450:	6313      	str	r3, [r2, #48]	@ 0x30
 8011452:	4b0a      	ldr	r3, [pc, #40]	@ (801147c <HAL_HCD_MspInit+0xb4>)
 8011454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011456:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801145a:	60fb      	str	r3, [r7, #12]
 801145c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801145e:	2200      	movs	r2, #0
 8011460:	2100      	movs	r1, #0
 8011462:	204d      	movs	r0, #77	@ 0x4d
 8011464:	f7f4 f916 	bl	8005694 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8011468:	204d      	movs	r0, #77	@ 0x4d
 801146a:	f7f4 f92f 	bl	80056cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801146e:	bf00      	nop
 8011470:	3728      	adds	r7, #40	@ 0x28
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}
 8011476:	bf00      	nop
 8011478:	40040000 	.word	0x40040000
 801147c:	40023800 	.word	0x40023800
 8011480:	40020400 	.word	0x40020400

08011484 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b082      	sub	sp, #8
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011492:	4618      	mov	r0, r3
 8011494:	f7fe ff5d 	bl	8010352 <USBH_LL_IncTimer>
}
 8011498:	bf00      	nop
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}

080114a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b082      	sub	sp, #8
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7fe ff95 	bl	80103de <USBH_LL_Connect>
}
 80114b4:	bf00      	nop
 80114b6:	3708      	adds	r7, #8
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fe ff9e 	bl	801040c <USBH_LL_Disconnect>
}
 80114d0:	bf00      	nop
 80114d2:	3708      	adds	r7, #8
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}

080114d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80114d8:	b480      	push	{r7}
 80114da:	b083      	sub	sp, #12
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	460b      	mov	r3, r1
 80114e2:	70fb      	strb	r3, [r7, #3]
 80114e4:	4613      	mov	r3, r2
 80114e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80114e8:	bf00      	nop
 80114ea:	370c      	adds	r7, #12
 80114ec:	46bd      	mov	sp, r7
 80114ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f2:	4770      	bx	lr

080114f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011502:	4618      	mov	r0, r3
 8011504:	f7fe ff4f 	bl	80103a6 <USBH_LL_PortEnabled>
}
 8011508:	bf00      	nop
 801150a:	3708      	adds	r7, #8
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b082      	sub	sp, #8
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801151e:	4618      	mov	r0, r3
 8011520:	f7fe ff4f 	bl	80103c2 <USBH_LL_PortDisabled>
}
 8011524:	bf00      	nop
 8011526:	3708      	adds	r7, #8
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b082      	sub	sp, #8
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 801153a:	2b00      	cmp	r3, #0
 801153c:	d132      	bne.n	80115a4 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 801153e:	4a1c      	ldr	r2, [pc, #112]	@ (80115b0 <USBH_LL_Init+0x84>)
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	4a19      	ldr	r2, [pc, #100]	@ (80115b0 <USBH_LL_Init+0x84>)
 801154a:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801154e:	4b18      	ldr	r3, [pc, #96]	@ (80115b0 <USBH_LL_Init+0x84>)
 8011550:	4a18      	ldr	r2, [pc, #96]	@ (80115b4 <USBH_LL_Init+0x88>)
 8011552:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8011554:	4b16      	ldr	r3, [pc, #88]	@ (80115b0 <USBH_LL_Init+0x84>)
 8011556:	220c      	movs	r2, #12
 8011558:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 801155a:	4b15      	ldr	r3, [pc, #84]	@ (80115b0 <USBH_LL_Init+0x84>)
 801155c:	2201      	movs	r2, #1
 801155e:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8011560:	4b13      	ldr	r3, [pc, #76]	@ (80115b0 <USBH_LL_Init+0x84>)
 8011562:	2200      	movs	r2, #0
 8011564:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8011566:	4b12      	ldr	r3, [pc, #72]	@ (80115b0 <USBH_LL_Init+0x84>)
 8011568:	2202      	movs	r2, #2
 801156a:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801156c:	4b10      	ldr	r3, [pc, #64]	@ (80115b0 <USBH_LL_Init+0x84>)
 801156e:	2200      	movs	r2, #0
 8011570:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8011572:	4b0f      	ldr	r3, [pc, #60]	@ (80115b0 <USBH_LL_Init+0x84>)
 8011574:	2200      	movs	r2, #0
 8011576:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8011578:	4b0d      	ldr	r3, [pc, #52]	@ (80115b0 <USBH_LL_Init+0x84>)
 801157a:	2200      	movs	r2, #0
 801157c:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801157e:	4b0c      	ldr	r3, [pc, #48]	@ (80115b0 <USBH_LL_Init+0x84>)
 8011580:	2200      	movs	r2, #0
 8011582:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8011584:	480a      	ldr	r0, [pc, #40]	@ (80115b0 <USBH_LL_Init+0x84>)
 8011586:	f7f5 fb0a 	bl	8006b9e <HAL_HCD_Init>
 801158a:	4603      	mov	r3, r0
 801158c:	2b00      	cmp	r3, #0
 801158e:	d001      	beq.n	8011594 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8011590:	f7f1 faaa 	bl	8002ae8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8011594:	4806      	ldr	r0, [pc, #24]	@ (80115b0 <USBH_LL_Init+0x84>)
 8011596:	f7f5 ff6b 	bl	8007470 <HAL_HCD_GetCurrentFrame>
 801159a:	4603      	mov	r3, r0
 801159c:	4619      	mov	r1, r3
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f7fe fec8 	bl	8010334 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80115a4:	2300      	movs	r3, #0
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	3708      	adds	r7, #8
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	2000a098 	.word	0x2000a098
 80115b4:	40040000 	.word	0x40040000

080115b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115c0:	2300      	movs	r3, #0
 80115c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80115c4:	2300      	movs	r3, #0
 80115c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7f5 fed6 	bl	8007380 <HAL_HCD_Start>
 80115d4:	4603      	mov	r3, r0
 80115d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80115d8:	7bfb      	ldrb	r3, [r7, #15]
 80115da:	4618      	mov	r0, r3
 80115dc:	f000 f95e 	bl	801189c <USBH_Get_USB_Status>
 80115e0:	4603      	mov	r3, r0
 80115e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3710      	adds	r7, #16
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80115ee:	b580      	push	{r7, lr}
 80115f0:	b084      	sub	sp, #16
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115f6:	2300      	movs	r3, #0
 80115f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80115fa:	2300      	movs	r3, #0
 80115fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8011604:	4618      	mov	r0, r3
 8011606:	f7f5 fede 	bl	80073c6 <HAL_HCD_Stop>
 801160a:	4603      	mov	r3, r0
 801160c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801160e:	7bfb      	ldrb	r3, [r7, #15]
 8011610:	4618      	mov	r0, r3
 8011612:	f000 f943 	bl	801189c <USBH_Get_USB_Status>
 8011616:	4603      	mov	r3, r0
 8011618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801161a:	7bbb      	ldrb	r3, [r7, #14]
}
 801161c:	4618      	mov	r0, r3
 801161e:	3710      	adds	r7, #16
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801162c:	2301      	movs	r3, #1
 801162e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8011636:	4618      	mov	r0, r3
 8011638:	f7f5 ff28 	bl	800748c <HAL_HCD_GetCurrentSpeed>
 801163c:	4603      	mov	r3, r0
 801163e:	2b02      	cmp	r3, #2
 8011640:	d00c      	beq.n	801165c <USBH_LL_GetSpeed+0x38>
 8011642:	2b02      	cmp	r3, #2
 8011644:	d80d      	bhi.n	8011662 <USBH_LL_GetSpeed+0x3e>
 8011646:	2b00      	cmp	r3, #0
 8011648:	d002      	beq.n	8011650 <USBH_LL_GetSpeed+0x2c>
 801164a:	2b01      	cmp	r3, #1
 801164c:	d003      	beq.n	8011656 <USBH_LL_GetSpeed+0x32>
 801164e:	e008      	b.n	8011662 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011650:	2300      	movs	r3, #0
 8011652:	73fb      	strb	r3, [r7, #15]
    break;
 8011654:	e008      	b.n	8011668 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011656:	2301      	movs	r3, #1
 8011658:	73fb      	strb	r3, [r7, #15]
    break;
 801165a:	e005      	b.n	8011668 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801165c:	2302      	movs	r3, #2
 801165e:	73fb      	strb	r3, [r7, #15]
    break;
 8011660:	e002      	b.n	8011668 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011662:	2301      	movs	r3, #1
 8011664:	73fb      	strb	r3, [r7, #15]
    break;
 8011666:	bf00      	nop
  }
  return  speed;
 8011668:	7bfb      	ldrb	r3, [r7, #15]
}
 801166a:	4618      	mov	r0, r3
 801166c:	3710      	adds	r7, #16
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}

08011672 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011672:	b580      	push	{r7, lr}
 8011674:	b084      	sub	sp, #16
 8011676:	af00      	add	r7, sp, #0
 8011678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801167a:	2300      	movs	r3, #0
 801167c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801167e:	2300      	movs	r3, #0
 8011680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8011688:	4618      	mov	r0, r3
 801168a:	f7f5 feb9 	bl	8007400 <HAL_HCD_ResetPort>
 801168e:	4603      	mov	r3, r0
 8011690:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011692:	7bfb      	ldrb	r3, [r7, #15]
 8011694:	4618      	mov	r0, r3
 8011696:	f000 f901 	bl	801189c <USBH_Get_USB_Status>
 801169a:	4603      	mov	r3, r0
 801169c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801169e:	7bbb      	ldrb	r3, [r7, #14]
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3710      	adds	r7, #16
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}

080116a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	460b      	mov	r3, r1
 80116b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 80116ba:	78fa      	ldrb	r2, [r7, #3]
 80116bc:	4611      	mov	r1, r2
 80116be:	4618      	mov	r0, r3
 80116c0:	f7f5 fec1 	bl	8007446 <HAL_HCD_HC_GetXferCount>
 80116c4:	4603      	mov	r3, r0
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	3708      	adds	r7, #8
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}

080116ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80116ce:	b590      	push	{r4, r7, lr}
 80116d0:	b089      	sub	sp, #36	@ 0x24
 80116d2:	af04      	add	r7, sp, #16
 80116d4:	6078      	str	r0, [r7, #4]
 80116d6:	4608      	mov	r0, r1
 80116d8:	4611      	mov	r1, r2
 80116da:	461a      	mov	r2, r3
 80116dc:	4603      	mov	r3, r0
 80116de:	70fb      	strb	r3, [r7, #3]
 80116e0:	460b      	mov	r3, r1
 80116e2:	70bb      	strb	r3, [r7, #2]
 80116e4:	4613      	mov	r3, r2
 80116e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116e8:	2300      	movs	r3, #0
 80116ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80116ec:	2300      	movs	r3, #0
 80116ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 80116f6:	787c      	ldrb	r4, [r7, #1]
 80116f8:	78ba      	ldrb	r2, [r7, #2]
 80116fa:	78f9      	ldrb	r1, [r7, #3]
 80116fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80116fe:	9302      	str	r3, [sp, #8]
 8011700:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011704:	9301      	str	r3, [sp, #4]
 8011706:	f897 3020 	ldrb.w	r3, [r7, #32]
 801170a:	9300      	str	r3, [sp, #0]
 801170c:	4623      	mov	r3, r4
 801170e:	f7f5 faad 	bl	8006c6c <HAL_HCD_HC_Init>
 8011712:	4603      	mov	r3, r0
 8011714:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011716:	7bfb      	ldrb	r3, [r7, #15]
 8011718:	4618      	mov	r0, r3
 801171a:	f000 f8bf 	bl	801189c <USBH_Get_USB_Status>
 801171e:	4603      	mov	r3, r0
 8011720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011722:	7bbb      	ldrb	r3, [r7, #14]
}
 8011724:	4618      	mov	r0, r3
 8011726:	3714      	adds	r7, #20
 8011728:	46bd      	mov	sp, r7
 801172a:	bd90      	pop	{r4, r7, pc}

0801172c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	460b      	mov	r3, r1
 8011736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011738:	2300      	movs	r3, #0
 801173a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801173c:	2300      	movs	r3, #0
 801173e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8011746:	78fa      	ldrb	r2, [r7, #3]
 8011748:	4611      	mov	r1, r2
 801174a:	4618      	mov	r0, r3
 801174c:	f7f5 fb46 	bl	8006ddc <HAL_HCD_HC_Halt>
 8011750:	4603      	mov	r3, r0
 8011752:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011754:	7bfb      	ldrb	r3, [r7, #15]
 8011756:	4618      	mov	r0, r3
 8011758:	f000 f8a0 	bl	801189c <USBH_Get_USB_Status>
 801175c:	4603      	mov	r3, r0
 801175e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011760:	7bbb      	ldrb	r3, [r7, #14]
}
 8011762:	4618      	mov	r0, r3
 8011764:	3710      	adds	r7, #16
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}

0801176a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801176a:	b590      	push	{r4, r7, lr}
 801176c:	b089      	sub	sp, #36	@ 0x24
 801176e:	af04      	add	r7, sp, #16
 8011770:	6078      	str	r0, [r7, #4]
 8011772:	4608      	mov	r0, r1
 8011774:	4611      	mov	r1, r2
 8011776:	461a      	mov	r2, r3
 8011778:	4603      	mov	r3, r0
 801177a:	70fb      	strb	r3, [r7, #3]
 801177c:	460b      	mov	r3, r1
 801177e:	70bb      	strb	r3, [r7, #2]
 8011780:	4613      	mov	r3, r2
 8011782:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011784:	2300      	movs	r3, #0
 8011786:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011788:	2300      	movs	r3, #0
 801178a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 8011792:	787c      	ldrb	r4, [r7, #1]
 8011794:	78ba      	ldrb	r2, [r7, #2]
 8011796:	78f9      	ldrb	r1, [r7, #3]
 8011798:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801179c:	9303      	str	r3, [sp, #12]
 801179e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80117a0:	9302      	str	r3, [sp, #8]
 80117a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117a4:	9301      	str	r3, [sp, #4]
 80117a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80117aa:	9300      	str	r3, [sp, #0]
 80117ac:	4623      	mov	r3, r4
 80117ae:	f7f5 fb39 	bl	8006e24 <HAL_HCD_HC_SubmitRequest>
 80117b2:	4603      	mov	r3, r0
 80117b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80117b6:	7bfb      	ldrb	r3, [r7, #15]
 80117b8:	4618      	mov	r0, r3
 80117ba:	f000 f86f 	bl	801189c <USBH_Get_USB_Status>
 80117be:	4603      	mov	r3, r0
 80117c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3714      	adds	r7, #20
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd90      	pop	{r4, r7, pc}

080117cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	460b      	mov	r3, r1
 80117d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 80117de:	78fa      	ldrb	r2, [r7, #3]
 80117e0:	4611      	mov	r1, r2
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7f5 fe1a 	bl	800741c <HAL_HCD_HC_GetURBState>
 80117e8:	4603      	mov	r3, r0
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3708      	adds	r7, #8
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}

080117f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80117f2:	b580      	push	{r7, lr}
 80117f4:	b082      	sub	sp, #8
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
 80117fa:	460b      	mov	r3, r1
 80117fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 8011804:	2b00      	cmp	r3, #0
 8011806:	d103      	bne.n	8011810 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8011808:	78fb      	ldrb	r3, [r7, #3]
 801180a:	4618      	mov	r0, r3
 801180c:	f000 f872 	bl	80118f4 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011810:	20c8      	movs	r0, #200	@ 0xc8
 8011812:	f7f3 fe63 	bl	80054dc <HAL_Delay>
  return USBH_OK;
 8011816:	2300      	movs	r3, #0
}
 8011818:	4618      	mov	r0, r3
 801181a:	3708      	adds	r7, #8
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}

08011820 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011820:	b480      	push	{r7}
 8011822:	b085      	sub	sp, #20
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	460b      	mov	r3, r1
 801182a:	70fb      	strb	r3, [r7, #3]
 801182c:	4613      	mov	r3, r2
 801182e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8011836:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011838:	78fa      	ldrb	r2, [r7, #3]
 801183a:	68f9      	ldr	r1, [r7, #12]
 801183c:	4613      	mov	r3, r2
 801183e:	011b      	lsls	r3, r3, #4
 8011840:	1a9b      	subs	r3, r3, r2
 8011842:	009b      	lsls	r3, r3, #2
 8011844:	440b      	add	r3, r1
 8011846:	3317      	adds	r3, #23
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d00a      	beq.n	8011864 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801184e:	78fa      	ldrb	r2, [r7, #3]
 8011850:	68f9      	ldr	r1, [r7, #12]
 8011852:	4613      	mov	r3, r2
 8011854:	011b      	lsls	r3, r3, #4
 8011856:	1a9b      	subs	r3, r3, r2
 8011858:	009b      	lsls	r3, r3, #2
 801185a:	440b      	add	r3, r1
 801185c:	333c      	adds	r3, #60	@ 0x3c
 801185e:	78ba      	ldrb	r2, [r7, #2]
 8011860:	701a      	strb	r2, [r3, #0]
 8011862:	e009      	b.n	8011878 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011864:	78fa      	ldrb	r2, [r7, #3]
 8011866:	68f9      	ldr	r1, [r7, #12]
 8011868:	4613      	mov	r3, r2
 801186a:	011b      	lsls	r3, r3, #4
 801186c:	1a9b      	subs	r3, r3, r2
 801186e:	009b      	lsls	r3, r3, #2
 8011870:	440b      	add	r3, r1
 8011872:	333d      	adds	r3, #61	@ 0x3d
 8011874:	78ba      	ldrb	r2, [r7, #2]
 8011876:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011878:	2300      	movs	r3, #0
}
 801187a:	4618      	mov	r0, r3
 801187c:	3714      	adds	r7, #20
 801187e:	46bd      	mov	sp, r7
 8011880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011884:	4770      	bx	lr

08011886 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011886:	b580      	push	{r7, lr}
 8011888:	b082      	sub	sp, #8
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f7f3 fe24 	bl	80054dc <HAL_Delay>
}
 8011894:	bf00      	nop
 8011896:	3708      	adds	r7, #8
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801189c:	b480      	push	{r7}
 801189e:	b085      	sub	sp, #20
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	4603      	mov	r3, r0
 80118a4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80118a6:	2300      	movs	r3, #0
 80118a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80118aa:	79fb      	ldrb	r3, [r7, #7]
 80118ac:	2b03      	cmp	r3, #3
 80118ae:	d817      	bhi.n	80118e0 <USBH_Get_USB_Status+0x44>
 80118b0:	a201      	add	r2, pc, #4	@ (adr r2, 80118b8 <USBH_Get_USB_Status+0x1c>)
 80118b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118b6:	bf00      	nop
 80118b8:	080118c9 	.word	0x080118c9
 80118bc:	080118cf 	.word	0x080118cf
 80118c0:	080118d5 	.word	0x080118d5
 80118c4:	080118db 	.word	0x080118db
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80118c8:	2300      	movs	r3, #0
 80118ca:	73fb      	strb	r3, [r7, #15]
    break;
 80118cc:	e00b      	b.n	80118e6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80118ce:	2302      	movs	r3, #2
 80118d0:	73fb      	strb	r3, [r7, #15]
    break;
 80118d2:	e008      	b.n	80118e6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80118d4:	2301      	movs	r3, #1
 80118d6:	73fb      	strb	r3, [r7, #15]
    break;
 80118d8:	e005      	b.n	80118e6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80118da:	2302      	movs	r3, #2
 80118dc:	73fb      	strb	r3, [r7, #15]
    break;
 80118de:	e002      	b.n	80118e6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80118e0:	2302      	movs	r3, #2
 80118e2:	73fb      	strb	r3, [r7, #15]
    break;
 80118e4:	bf00      	nop
  }
  return usb_status;
 80118e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	3714      	adds	r7, #20
 80118ec:	46bd      	mov	sp, r7
 80118ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f2:	4770      	bx	lr

080118f4 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	4603      	mov	r3, r0
 80118fc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80118fe:	79fb      	ldrb	r3, [r7, #7]
 8011900:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8011902:	79fb      	ldrb	r3, [r7, #7]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d102      	bne.n	801190e <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011908:	2301      	movs	r3, #1
 801190a:	73fb      	strb	r3, [r7, #15]
 801190c:	e001      	b.n	8011912 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801190e:	2300      	movs	r3, #0
 8011910:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8011912:	7bfb      	ldrb	r3, [r7, #15]
 8011914:	461a      	mov	r2, r3
 8011916:	2110      	movs	r1, #16
 8011918:	4803      	ldr	r0, [pc, #12]	@ (8011928 <MX_DriverVbusHS+0x34>)
 801191a:	f7f5 f927 	bl	8006b6c <HAL_GPIO_WritePin>
}
 801191e:	bf00      	nop
 8011920:	3710      	adds	r7, #16
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	40020800 	.word	0x40020800

0801192c <malloc>:
 801192c:	4b02      	ldr	r3, [pc, #8]	@ (8011938 <malloc+0xc>)
 801192e:	4601      	mov	r1, r0
 8011930:	6818      	ldr	r0, [r3, #0]
 8011932:	f000 b82d 	b.w	8011990 <_malloc_r>
 8011936:	bf00      	nop
 8011938:	2000029c 	.word	0x2000029c

0801193c <free>:
 801193c:	4b02      	ldr	r3, [pc, #8]	@ (8011948 <free+0xc>)
 801193e:	4601      	mov	r1, r0
 8011940:	6818      	ldr	r0, [r3, #0]
 8011942:	f000 bb77 	b.w	8012034 <_free_r>
 8011946:	bf00      	nop
 8011948:	2000029c 	.word	0x2000029c

0801194c <sbrk_aligned>:
 801194c:	b570      	push	{r4, r5, r6, lr}
 801194e:	4e0f      	ldr	r6, [pc, #60]	@ (801198c <sbrk_aligned+0x40>)
 8011950:	460c      	mov	r4, r1
 8011952:	6831      	ldr	r1, [r6, #0]
 8011954:	4605      	mov	r5, r0
 8011956:	b911      	cbnz	r1, 801195e <sbrk_aligned+0x12>
 8011958:	f000 fb14 	bl	8011f84 <_sbrk_r>
 801195c:	6030      	str	r0, [r6, #0]
 801195e:	4621      	mov	r1, r4
 8011960:	4628      	mov	r0, r5
 8011962:	f000 fb0f 	bl	8011f84 <_sbrk_r>
 8011966:	1c43      	adds	r3, r0, #1
 8011968:	d103      	bne.n	8011972 <sbrk_aligned+0x26>
 801196a:	f04f 34ff 	mov.w	r4, #4294967295
 801196e:	4620      	mov	r0, r4
 8011970:	bd70      	pop	{r4, r5, r6, pc}
 8011972:	1cc4      	adds	r4, r0, #3
 8011974:	f024 0403 	bic.w	r4, r4, #3
 8011978:	42a0      	cmp	r0, r4
 801197a:	d0f8      	beq.n	801196e <sbrk_aligned+0x22>
 801197c:	1a21      	subs	r1, r4, r0
 801197e:	4628      	mov	r0, r5
 8011980:	f000 fb00 	bl	8011f84 <_sbrk_r>
 8011984:	3001      	adds	r0, #1
 8011986:	d1f2      	bne.n	801196e <sbrk_aligned+0x22>
 8011988:	e7ef      	b.n	801196a <sbrk_aligned+0x1e>
 801198a:	bf00      	nop
 801198c:	2000a478 	.word	0x2000a478

08011990 <_malloc_r>:
 8011990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011994:	1ccd      	adds	r5, r1, #3
 8011996:	f025 0503 	bic.w	r5, r5, #3
 801199a:	3508      	adds	r5, #8
 801199c:	2d0c      	cmp	r5, #12
 801199e:	bf38      	it	cc
 80119a0:	250c      	movcc	r5, #12
 80119a2:	2d00      	cmp	r5, #0
 80119a4:	4606      	mov	r6, r0
 80119a6:	db01      	blt.n	80119ac <_malloc_r+0x1c>
 80119a8:	42a9      	cmp	r1, r5
 80119aa:	d904      	bls.n	80119b6 <_malloc_r+0x26>
 80119ac:	230c      	movs	r3, #12
 80119ae:	6033      	str	r3, [r6, #0]
 80119b0:	2000      	movs	r0, #0
 80119b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011a8c <_malloc_r+0xfc>
 80119ba:	f000 f869 	bl	8011a90 <__malloc_lock>
 80119be:	f8d8 3000 	ldr.w	r3, [r8]
 80119c2:	461c      	mov	r4, r3
 80119c4:	bb44      	cbnz	r4, 8011a18 <_malloc_r+0x88>
 80119c6:	4629      	mov	r1, r5
 80119c8:	4630      	mov	r0, r6
 80119ca:	f7ff ffbf 	bl	801194c <sbrk_aligned>
 80119ce:	1c43      	adds	r3, r0, #1
 80119d0:	4604      	mov	r4, r0
 80119d2:	d158      	bne.n	8011a86 <_malloc_r+0xf6>
 80119d4:	f8d8 4000 	ldr.w	r4, [r8]
 80119d8:	4627      	mov	r7, r4
 80119da:	2f00      	cmp	r7, #0
 80119dc:	d143      	bne.n	8011a66 <_malloc_r+0xd6>
 80119de:	2c00      	cmp	r4, #0
 80119e0:	d04b      	beq.n	8011a7a <_malloc_r+0xea>
 80119e2:	6823      	ldr	r3, [r4, #0]
 80119e4:	4639      	mov	r1, r7
 80119e6:	4630      	mov	r0, r6
 80119e8:	eb04 0903 	add.w	r9, r4, r3
 80119ec:	f000 faca 	bl	8011f84 <_sbrk_r>
 80119f0:	4581      	cmp	r9, r0
 80119f2:	d142      	bne.n	8011a7a <_malloc_r+0xea>
 80119f4:	6821      	ldr	r1, [r4, #0]
 80119f6:	1a6d      	subs	r5, r5, r1
 80119f8:	4629      	mov	r1, r5
 80119fa:	4630      	mov	r0, r6
 80119fc:	f7ff ffa6 	bl	801194c <sbrk_aligned>
 8011a00:	3001      	adds	r0, #1
 8011a02:	d03a      	beq.n	8011a7a <_malloc_r+0xea>
 8011a04:	6823      	ldr	r3, [r4, #0]
 8011a06:	442b      	add	r3, r5
 8011a08:	6023      	str	r3, [r4, #0]
 8011a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8011a0e:	685a      	ldr	r2, [r3, #4]
 8011a10:	bb62      	cbnz	r2, 8011a6c <_malloc_r+0xdc>
 8011a12:	f8c8 7000 	str.w	r7, [r8]
 8011a16:	e00f      	b.n	8011a38 <_malloc_r+0xa8>
 8011a18:	6822      	ldr	r2, [r4, #0]
 8011a1a:	1b52      	subs	r2, r2, r5
 8011a1c:	d420      	bmi.n	8011a60 <_malloc_r+0xd0>
 8011a1e:	2a0b      	cmp	r2, #11
 8011a20:	d917      	bls.n	8011a52 <_malloc_r+0xc2>
 8011a22:	1961      	adds	r1, r4, r5
 8011a24:	42a3      	cmp	r3, r4
 8011a26:	6025      	str	r5, [r4, #0]
 8011a28:	bf18      	it	ne
 8011a2a:	6059      	strne	r1, [r3, #4]
 8011a2c:	6863      	ldr	r3, [r4, #4]
 8011a2e:	bf08      	it	eq
 8011a30:	f8c8 1000 	streq.w	r1, [r8]
 8011a34:	5162      	str	r2, [r4, r5]
 8011a36:	604b      	str	r3, [r1, #4]
 8011a38:	4630      	mov	r0, r6
 8011a3a:	f000 f82f 	bl	8011a9c <__malloc_unlock>
 8011a3e:	f104 000b 	add.w	r0, r4, #11
 8011a42:	1d23      	adds	r3, r4, #4
 8011a44:	f020 0007 	bic.w	r0, r0, #7
 8011a48:	1ac2      	subs	r2, r0, r3
 8011a4a:	bf1c      	itt	ne
 8011a4c:	1a1b      	subne	r3, r3, r0
 8011a4e:	50a3      	strne	r3, [r4, r2]
 8011a50:	e7af      	b.n	80119b2 <_malloc_r+0x22>
 8011a52:	6862      	ldr	r2, [r4, #4]
 8011a54:	42a3      	cmp	r3, r4
 8011a56:	bf0c      	ite	eq
 8011a58:	f8c8 2000 	streq.w	r2, [r8]
 8011a5c:	605a      	strne	r2, [r3, #4]
 8011a5e:	e7eb      	b.n	8011a38 <_malloc_r+0xa8>
 8011a60:	4623      	mov	r3, r4
 8011a62:	6864      	ldr	r4, [r4, #4]
 8011a64:	e7ae      	b.n	80119c4 <_malloc_r+0x34>
 8011a66:	463c      	mov	r4, r7
 8011a68:	687f      	ldr	r7, [r7, #4]
 8011a6a:	e7b6      	b.n	80119da <_malloc_r+0x4a>
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	42a3      	cmp	r3, r4
 8011a72:	d1fb      	bne.n	8011a6c <_malloc_r+0xdc>
 8011a74:	2300      	movs	r3, #0
 8011a76:	6053      	str	r3, [r2, #4]
 8011a78:	e7de      	b.n	8011a38 <_malloc_r+0xa8>
 8011a7a:	230c      	movs	r3, #12
 8011a7c:	6033      	str	r3, [r6, #0]
 8011a7e:	4630      	mov	r0, r6
 8011a80:	f000 f80c 	bl	8011a9c <__malloc_unlock>
 8011a84:	e794      	b.n	80119b0 <_malloc_r+0x20>
 8011a86:	6005      	str	r5, [r0, #0]
 8011a88:	e7d6      	b.n	8011a38 <_malloc_r+0xa8>
 8011a8a:	bf00      	nop
 8011a8c:	2000a47c 	.word	0x2000a47c

08011a90 <__malloc_lock>:
 8011a90:	4801      	ldr	r0, [pc, #4]	@ (8011a98 <__malloc_lock+0x8>)
 8011a92:	f000 bac4 	b.w	801201e <__retarget_lock_acquire_recursive>
 8011a96:	bf00      	nop
 8011a98:	2000a5c0 	.word	0x2000a5c0

08011a9c <__malloc_unlock>:
 8011a9c:	4801      	ldr	r0, [pc, #4]	@ (8011aa4 <__malloc_unlock+0x8>)
 8011a9e:	f000 babf 	b.w	8012020 <__retarget_lock_release_recursive>
 8011aa2:	bf00      	nop
 8011aa4:	2000a5c0 	.word	0x2000a5c0

08011aa8 <std>:
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	b510      	push	{r4, lr}
 8011aac:	4604      	mov	r4, r0
 8011aae:	e9c0 3300 	strd	r3, r3, [r0]
 8011ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011ab6:	6083      	str	r3, [r0, #8]
 8011ab8:	8181      	strh	r1, [r0, #12]
 8011aba:	6643      	str	r3, [r0, #100]	@ 0x64
 8011abc:	81c2      	strh	r2, [r0, #14]
 8011abe:	6183      	str	r3, [r0, #24]
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	2208      	movs	r2, #8
 8011ac4:	305c      	adds	r0, #92	@ 0x5c
 8011ac6:	f000 fa21 	bl	8011f0c <memset>
 8011aca:	4b0d      	ldr	r3, [pc, #52]	@ (8011b00 <std+0x58>)
 8011acc:	6263      	str	r3, [r4, #36]	@ 0x24
 8011ace:	4b0d      	ldr	r3, [pc, #52]	@ (8011b04 <std+0x5c>)
 8011ad0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8011b08 <std+0x60>)
 8011ad4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8011b0c <std+0x64>)
 8011ad8:	6323      	str	r3, [r4, #48]	@ 0x30
 8011ada:	4b0d      	ldr	r3, [pc, #52]	@ (8011b10 <std+0x68>)
 8011adc:	6224      	str	r4, [r4, #32]
 8011ade:	429c      	cmp	r4, r3
 8011ae0:	d006      	beq.n	8011af0 <std+0x48>
 8011ae2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011ae6:	4294      	cmp	r4, r2
 8011ae8:	d002      	beq.n	8011af0 <std+0x48>
 8011aea:	33d0      	adds	r3, #208	@ 0xd0
 8011aec:	429c      	cmp	r4, r3
 8011aee:	d105      	bne.n	8011afc <std+0x54>
 8011af0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011af8:	f000 ba90 	b.w	801201c <__retarget_lock_init_recursive>
 8011afc:	bd10      	pop	{r4, pc}
 8011afe:	bf00      	nop
 8011b00:	08011d5d 	.word	0x08011d5d
 8011b04:	08011d7f 	.word	0x08011d7f
 8011b08:	08011db7 	.word	0x08011db7
 8011b0c:	08011ddb 	.word	0x08011ddb
 8011b10:	2000a480 	.word	0x2000a480

08011b14 <stdio_exit_handler>:
 8011b14:	4a02      	ldr	r2, [pc, #8]	@ (8011b20 <stdio_exit_handler+0xc>)
 8011b16:	4903      	ldr	r1, [pc, #12]	@ (8011b24 <stdio_exit_handler+0x10>)
 8011b18:	4803      	ldr	r0, [pc, #12]	@ (8011b28 <stdio_exit_handler+0x14>)
 8011b1a:	f000 b869 	b.w	8011bf0 <_fwalk_sglue>
 8011b1e:	bf00      	nop
 8011b20:	20000290 	.word	0x20000290
 8011b24:	08012a21 	.word	0x08012a21
 8011b28:	200002a0 	.word	0x200002a0

08011b2c <cleanup_stdio>:
 8011b2c:	6841      	ldr	r1, [r0, #4]
 8011b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8011b60 <cleanup_stdio+0x34>)
 8011b30:	4299      	cmp	r1, r3
 8011b32:	b510      	push	{r4, lr}
 8011b34:	4604      	mov	r4, r0
 8011b36:	d001      	beq.n	8011b3c <cleanup_stdio+0x10>
 8011b38:	f000 ff72 	bl	8012a20 <_fflush_r>
 8011b3c:	68a1      	ldr	r1, [r4, #8]
 8011b3e:	4b09      	ldr	r3, [pc, #36]	@ (8011b64 <cleanup_stdio+0x38>)
 8011b40:	4299      	cmp	r1, r3
 8011b42:	d002      	beq.n	8011b4a <cleanup_stdio+0x1e>
 8011b44:	4620      	mov	r0, r4
 8011b46:	f000 ff6b 	bl	8012a20 <_fflush_r>
 8011b4a:	68e1      	ldr	r1, [r4, #12]
 8011b4c:	4b06      	ldr	r3, [pc, #24]	@ (8011b68 <cleanup_stdio+0x3c>)
 8011b4e:	4299      	cmp	r1, r3
 8011b50:	d004      	beq.n	8011b5c <cleanup_stdio+0x30>
 8011b52:	4620      	mov	r0, r4
 8011b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b58:	f000 bf62 	b.w	8012a20 <_fflush_r>
 8011b5c:	bd10      	pop	{r4, pc}
 8011b5e:	bf00      	nop
 8011b60:	2000a480 	.word	0x2000a480
 8011b64:	2000a4e8 	.word	0x2000a4e8
 8011b68:	2000a550 	.word	0x2000a550

08011b6c <global_stdio_init.part.0>:
 8011b6c:	b510      	push	{r4, lr}
 8011b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8011b9c <global_stdio_init.part.0+0x30>)
 8011b70:	4c0b      	ldr	r4, [pc, #44]	@ (8011ba0 <global_stdio_init.part.0+0x34>)
 8011b72:	4a0c      	ldr	r2, [pc, #48]	@ (8011ba4 <global_stdio_init.part.0+0x38>)
 8011b74:	601a      	str	r2, [r3, #0]
 8011b76:	4620      	mov	r0, r4
 8011b78:	2200      	movs	r2, #0
 8011b7a:	2104      	movs	r1, #4
 8011b7c:	f7ff ff94 	bl	8011aa8 <std>
 8011b80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011b84:	2201      	movs	r2, #1
 8011b86:	2109      	movs	r1, #9
 8011b88:	f7ff ff8e 	bl	8011aa8 <std>
 8011b8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011b90:	2202      	movs	r2, #2
 8011b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b96:	2112      	movs	r1, #18
 8011b98:	f7ff bf86 	b.w	8011aa8 <std>
 8011b9c:	2000a5b8 	.word	0x2000a5b8
 8011ba0:	2000a480 	.word	0x2000a480
 8011ba4:	08011b15 	.word	0x08011b15

08011ba8 <__sfp_lock_acquire>:
 8011ba8:	4801      	ldr	r0, [pc, #4]	@ (8011bb0 <__sfp_lock_acquire+0x8>)
 8011baa:	f000 ba38 	b.w	801201e <__retarget_lock_acquire_recursive>
 8011bae:	bf00      	nop
 8011bb0:	2000a5c1 	.word	0x2000a5c1

08011bb4 <__sfp_lock_release>:
 8011bb4:	4801      	ldr	r0, [pc, #4]	@ (8011bbc <__sfp_lock_release+0x8>)
 8011bb6:	f000 ba33 	b.w	8012020 <__retarget_lock_release_recursive>
 8011bba:	bf00      	nop
 8011bbc:	2000a5c1 	.word	0x2000a5c1

08011bc0 <__sinit>:
 8011bc0:	b510      	push	{r4, lr}
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	f7ff fff0 	bl	8011ba8 <__sfp_lock_acquire>
 8011bc8:	6a23      	ldr	r3, [r4, #32]
 8011bca:	b11b      	cbz	r3, 8011bd4 <__sinit+0x14>
 8011bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bd0:	f7ff bff0 	b.w	8011bb4 <__sfp_lock_release>
 8011bd4:	4b04      	ldr	r3, [pc, #16]	@ (8011be8 <__sinit+0x28>)
 8011bd6:	6223      	str	r3, [r4, #32]
 8011bd8:	4b04      	ldr	r3, [pc, #16]	@ (8011bec <__sinit+0x2c>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d1f5      	bne.n	8011bcc <__sinit+0xc>
 8011be0:	f7ff ffc4 	bl	8011b6c <global_stdio_init.part.0>
 8011be4:	e7f2      	b.n	8011bcc <__sinit+0xc>
 8011be6:	bf00      	nop
 8011be8:	08011b2d 	.word	0x08011b2d
 8011bec:	2000a5b8 	.word	0x2000a5b8

08011bf0 <_fwalk_sglue>:
 8011bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bf4:	4607      	mov	r7, r0
 8011bf6:	4688      	mov	r8, r1
 8011bf8:	4614      	mov	r4, r2
 8011bfa:	2600      	movs	r6, #0
 8011bfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c00:	f1b9 0901 	subs.w	r9, r9, #1
 8011c04:	d505      	bpl.n	8011c12 <_fwalk_sglue+0x22>
 8011c06:	6824      	ldr	r4, [r4, #0]
 8011c08:	2c00      	cmp	r4, #0
 8011c0a:	d1f7      	bne.n	8011bfc <_fwalk_sglue+0xc>
 8011c0c:	4630      	mov	r0, r6
 8011c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c12:	89ab      	ldrh	r3, [r5, #12]
 8011c14:	2b01      	cmp	r3, #1
 8011c16:	d907      	bls.n	8011c28 <_fwalk_sglue+0x38>
 8011c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c1c:	3301      	adds	r3, #1
 8011c1e:	d003      	beq.n	8011c28 <_fwalk_sglue+0x38>
 8011c20:	4629      	mov	r1, r5
 8011c22:	4638      	mov	r0, r7
 8011c24:	47c0      	blx	r8
 8011c26:	4306      	orrs	r6, r0
 8011c28:	3568      	adds	r5, #104	@ 0x68
 8011c2a:	e7e9      	b.n	8011c00 <_fwalk_sglue+0x10>

08011c2c <iprintf>:
 8011c2c:	b40f      	push	{r0, r1, r2, r3}
 8011c2e:	b507      	push	{r0, r1, r2, lr}
 8011c30:	4906      	ldr	r1, [pc, #24]	@ (8011c4c <iprintf+0x20>)
 8011c32:	ab04      	add	r3, sp, #16
 8011c34:	6808      	ldr	r0, [r1, #0]
 8011c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c3a:	6881      	ldr	r1, [r0, #8]
 8011c3c:	9301      	str	r3, [sp, #4]
 8011c3e:	f000 fbc5 	bl	80123cc <_vfiprintf_r>
 8011c42:	b003      	add	sp, #12
 8011c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c48:	b004      	add	sp, #16
 8011c4a:	4770      	bx	lr
 8011c4c:	2000029c 	.word	0x2000029c

08011c50 <putchar>:
 8011c50:	4b02      	ldr	r3, [pc, #8]	@ (8011c5c <putchar+0xc>)
 8011c52:	4601      	mov	r1, r0
 8011c54:	6818      	ldr	r0, [r3, #0]
 8011c56:	6882      	ldr	r2, [r0, #8]
 8011c58:	f000 bf6c 	b.w	8012b34 <_putc_r>
 8011c5c:	2000029c 	.word	0x2000029c

08011c60 <_puts_r>:
 8011c60:	6a03      	ldr	r3, [r0, #32]
 8011c62:	b570      	push	{r4, r5, r6, lr}
 8011c64:	6884      	ldr	r4, [r0, #8]
 8011c66:	4605      	mov	r5, r0
 8011c68:	460e      	mov	r6, r1
 8011c6a:	b90b      	cbnz	r3, 8011c70 <_puts_r+0x10>
 8011c6c:	f7ff ffa8 	bl	8011bc0 <__sinit>
 8011c70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c72:	07db      	lsls	r3, r3, #31
 8011c74:	d405      	bmi.n	8011c82 <_puts_r+0x22>
 8011c76:	89a3      	ldrh	r3, [r4, #12]
 8011c78:	0598      	lsls	r0, r3, #22
 8011c7a:	d402      	bmi.n	8011c82 <_puts_r+0x22>
 8011c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c7e:	f000 f9ce 	bl	801201e <__retarget_lock_acquire_recursive>
 8011c82:	89a3      	ldrh	r3, [r4, #12]
 8011c84:	0719      	lsls	r1, r3, #28
 8011c86:	d502      	bpl.n	8011c8e <_puts_r+0x2e>
 8011c88:	6923      	ldr	r3, [r4, #16]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d135      	bne.n	8011cfa <_puts_r+0x9a>
 8011c8e:	4621      	mov	r1, r4
 8011c90:	4628      	mov	r0, r5
 8011c92:	f000 f8e5 	bl	8011e60 <__swsetup_r>
 8011c96:	b380      	cbz	r0, 8011cfa <_puts_r+0x9a>
 8011c98:	f04f 35ff 	mov.w	r5, #4294967295
 8011c9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c9e:	07da      	lsls	r2, r3, #31
 8011ca0:	d405      	bmi.n	8011cae <_puts_r+0x4e>
 8011ca2:	89a3      	ldrh	r3, [r4, #12]
 8011ca4:	059b      	lsls	r3, r3, #22
 8011ca6:	d402      	bmi.n	8011cae <_puts_r+0x4e>
 8011ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011caa:	f000 f9b9 	bl	8012020 <__retarget_lock_release_recursive>
 8011cae:	4628      	mov	r0, r5
 8011cb0:	bd70      	pop	{r4, r5, r6, pc}
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	da04      	bge.n	8011cc0 <_puts_r+0x60>
 8011cb6:	69a2      	ldr	r2, [r4, #24]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	dc17      	bgt.n	8011cec <_puts_r+0x8c>
 8011cbc:	290a      	cmp	r1, #10
 8011cbe:	d015      	beq.n	8011cec <_puts_r+0x8c>
 8011cc0:	6823      	ldr	r3, [r4, #0]
 8011cc2:	1c5a      	adds	r2, r3, #1
 8011cc4:	6022      	str	r2, [r4, #0]
 8011cc6:	7019      	strb	r1, [r3, #0]
 8011cc8:	68a3      	ldr	r3, [r4, #8]
 8011cca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011cce:	3b01      	subs	r3, #1
 8011cd0:	60a3      	str	r3, [r4, #8]
 8011cd2:	2900      	cmp	r1, #0
 8011cd4:	d1ed      	bne.n	8011cb2 <_puts_r+0x52>
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	da11      	bge.n	8011cfe <_puts_r+0x9e>
 8011cda:	4622      	mov	r2, r4
 8011cdc:	210a      	movs	r1, #10
 8011cde:	4628      	mov	r0, r5
 8011ce0:	f000 f87f 	bl	8011de2 <__swbuf_r>
 8011ce4:	3001      	adds	r0, #1
 8011ce6:	d0d7      	beq.n	8011c98 <_puts_r+0x38>
 8011ce8:	250a      	movs	r5, #10
 8011cea:	e7d7      	b.n	8011c9c <_puts_r+0x3c>
 8011cec:	4622      	mov	r2, r4
 8011cee:	4628      	mov	r0, r5
 8011cf0:	f000 f877 	bl	8011de2 <__swbuf_r>
 8011cf4:	3001      	adds	r0, #1
 8011cf6:	d1e7      	bne.n	8011cc8 <_puts_r+0x68>
 8011cf8:	e7ce      	b.n	8011c98 <_puts_r+0x38>
 8011cfa:	3e01      	subs	r6, #1
 8011cfc:	e7e4      	b.n	8011cc8 <_puts_r+0x68>
 8011cfe:	6823      	ldr	r3, [r4, #0]
 8011d00:	1c5a      	adds	r2, r3, #1
 8011d02:	6022      	str	r2, [r4, #0]
 8011d04:	220a      	movs	r2, #10
 8011d06:	701a      	strb	r2, [r3, #0]
 8011d08:	e7ee      	b.n	8011ce8 <_puts_r+0x88>
	...

08011d0c <puts>:
 8011d0c:	4b02      	ldr	r3, [pc, #8]	@ (8011d18 <puts+0xc>)
 8011d0e:	4601      	mov	r1, r0
 8011d10:	6818      	ldr	r0, [r3, #0]
 8011d12:	f7ff bfa5 	b.w	8011c60 <_puts_r>
 8011d16:	bf00      	nop
 8011d18:	2000029c 	.word	0x2000029c

08011d1c <siprintf>:
 8011d1c:	b40e      	push	{r1, r2, r3}
 8011d1e:	b500      	push	{lr}
 8011d20:	b09c      	sub	sp, #112	@ 0x70
 8011d22:	ab1d      	add	r3, sp, #116	@ 0x74
 8011d24:	9002      	str	r0, [sp, #8]
 8011d26:	9006      	str	r0, [sp, #24]
 8011d28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011d2c:	4809      	ldr	r0, [pc, #36]	@ (8011d54 <siprintf+0x38>)
 8011d2e:	9107      	str	r1, [sp, #28]
 8011d30:	9104      	str	r1, [sp, #16]
 8011d32:	4909      	ldr	r1, [pc, #36]	@ (8011d58 <siprintf+0x3c>)
 8011d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d38:	9105      	str	r1, [sp, #20]
 8011d3a:	6800      	ldr	r0, [r0, #0]
 8011d3c:	9301      	str	r3, [sp, #4]
 8011d3e:	a902      	add	r1, sp, #8
 8011d40:	f000 fa1e 	bl	8012180 <_svfiprintf_r>
 8011d44:	9b02      	ldr	r3, [sp, #8]
 8011d46:	2200      	movs	r2, #0
 8011d48:	701a      	strb	r2, [r3, #0]
 8011d4a:	b01c      	add	sp, #112	@ 0x70
 8011d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d50:	b003      	add	sp, #12
 8011d52:	4770      	bx	lr
 8011d54:	2000029c 	.word	0x2000029c
 8011d58:	ffff0208 	.word	0xffff0208

08011d5c <__sread>:
 8011d5c:	b510      	push	{r4, lr}
 8011d5e:	460c      	mov	r4, r1
 8011d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d64:	f000 f8fc 	bl	8011f60 <_read_r>
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	bfab      	itete	ge
 8011d6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011d6e:	89a3      	ldrhlt	r3, [r4, #12]
 8011d70:	181b      	addge	r3, r3, r0
 8011d72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011d76:	bfac      	ite	ge
 8011d78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011d7a:	81a3      	strhlt	r3, [r4, #12]
 8011d7c:	bd10      	pop	{r4, pc}

08011d7e <__swrite>:
 8011d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d82:	461f      	mov	r7, r3
 8011d84:	898b      	ldrh	r3, [r1, #12]
 8011d86:	05db      	lsls	r3, r3, #23
 8011d88:	4605      	mov	r5, r0
 8011d8a:	460c      	mov	r4, r1
 8011d8c:	4616      	mov	r6, r2
 8011d8e:	d505      	bpl.n	8011d9c <__swrite+0x1e>
 8011d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d94:	2302      	movs	r3, #2
 8011d96:	2200      	movs	r2, #0
 8011d98:	f000 f8d0 	bl	8011f3c <_lseek_r>
 8011d9c:	89a3      	ldrh	r3, [r4, #12]
 8011d9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011da2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011da6:	81a3      	strh	r3, [r4, #12]
 8011da8:	4632      	mov	r2, r6
 8011daa:	463b      	mov	r3, r7
 8011dac:	4628      	mov	r0, r5
 8011dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011db2:	f000 b8f7 	b.w	8011fa4 <_write_r>

08011db6 <__sseek>:
 8011db6:	b510      	push	{r4, lr}
 8011db8:	460c      	mov	r4, r1
 8011dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dbe:	f000 f8bd 	bl	8011f3c <_lseek_r>
 8011dc2:	1c43      	adds	r3, r0, #1
 8011dc4:	89a3      	ldrh	r3, [r4, #12]
 8011dc6:	bf15      	itete	ne
 8011dc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011dca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011dce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011dd2:	81a3      	strheq	r3, [r4, #12]
 8011dd4:	bf18      	it	ne
 8011dd6:	81a3      	strhne	r3, [r4, #12]
 8011dd8:	bd10      	pop	{r4, pc}

08011dda <__sclose>:
 8011dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dde:	f000 b89d 	b.w	8011f1c <_close_r>

08011de2 <__swbuf_r>:
 8011de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011de4:	460e      	mov	r6, r1
 8011de6:	4614      	mov	r4, r2
 8011de8:	4605      	mov	r5, r0
 8011dea:	b118      	cbz	r0, 8011df4 <__swbuf_r+0x12>
 8011dec:	6a03      	ldr	r3, [r0, #32]
 8011dee:	b90b      	cbnz	r3, 8011df4 <__swbuf_r+0x12>
 8011df0:	f7ff fee6 	bl	8011bc0 <__sinit>
 8011df4:	69a3      	ldr	r3, [r4, #24]
 8011df6:	60a3      	str	r3, [r4, #8]
 8011df8:	89a3      	ldrh	r3, [r4, #12]
 8011dfa:	071a      	lsls	r2, r3, #28
 8011dfc:	d501      	bpl.n	8011e02 <__swbuf_r+0x20>
 8011dfe:	6923      	ldr	r3, [r4, #16]
 8011e00:	b943      	cbnz	r3, 8011e14 <__swbuf_r+0x32>
 8011e02:	4621      	mov	r1, r4
 8011e04:	4628      	mov	r0, r5
 8011e06:	f000 f82b 	bl	8011e60 <__swsetup_r>
 8011e0a:	b118      	cbz	r0, 8011e14 <__swbuf_r+0x32>
 8011e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8011e10:	4638      	mov	r0, r7
 8011e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e14:	6823      	ldr	r3, [r4, #0]
 8011e16:	6922      	ldr	r2, [r4, #16]
 8011e18:	1a98      	subs	r0, r3, r2
 8011e1a:	6963      	ldr	r3, [r4, #20]
 8011e1c:	b2f6      	uxtb	r6, r6
 8011e1e:	4283      	cmp	r3, r0
 8011e20:	4637      	mov	r7, r6
 8011e22:	dc05      	bgt.n	8011e30 <__swbuf_r+0x4e>
 8011e24:	4621      	mov	r1, r4
 8011e26:	4628      	mov	r0, r5
 8011e28:	f000 fdfa 	bl	8012a20 <_fflush_r>
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	d1ed      	bne.n	8011e0c <__swbuf_r+0x2a>
 8011e30:	68a3      	ldr	r3, [r4, #8]
 8011e32:	3b01      	subs	r3, #1
 8011e34:	60a3      	str	r3, [r4, #8]
 8011e36:	6823      	ldr	r3, [r4, #0]
 8011e38:	1c5a      	adds	r2, r3, #1
 8011e3a:	6022      	str	r2, [r4, #0]
 8011e3c:	701e      	strb	r6, [r3, #0]
 8011e3e:	6962      	ldr	r2, [r4, #20]
 8011e40:	1c43      	adds	r3, r0, #1
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d004      	beq.n	8011e50 <__swbuf_r+0x6e>
 8011e46:	89a3      	ldrh	r3, [r4, #12]
 8011e48:	07db      	lsls	r3, r3, #31
 8011e4a:	d5e1      	bpl.n	8011e10 <__swbuf_r+0x2e>
 8011e4c:	2e0a      	cmp	r6, #10
 8011e4e:	d1df      	bne.n	8011e10 <__swbuf_r+0x2e>
 8011e50:	4621      	mov	r1, r4
 8011e52:	4628      	mov	r0, r5
 8011e54:	f000 fde4 	bl	8012a20 <_fflush_r>
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	d0d9      	beq.n	8011e10 <__swbuf_r+0x2e>
 8011e5c:	e7d6      	b.n	8011e0c <__swbuf_r+0x2a>
	...

08011e60 <__swsetup_r>:
 8011e60:	b538      	push	{r3, r4, r5, lr}
 8011e62:	4b29      	ldr	r3, [pc, #164]	@ (8011f08 <__swsetup_r+0xa8>)
 8011e64:	4605      	mov	r5, r0
 8011e66:	6818      	ldr	r0, [r3, #0]
 8011e68:	460c      	mov	r4, r1
 8011e6a:	b118      	cbz	r0, 8011e74 <__swsetup_r+0x14>
 8011e6c:	6a03      	ldr	r3, [r0, #32]
 8011e6e:	b90b      	cbnz	r3, 8011e74 <__swsetup_r+0x14>
 8011e70:	f7ff fea6 	bl	8011bc0 <__sinit>
 8011e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e78:	0719      	lsls	r1, r3, #28
 8011e7a:	d422      	bmi.n	8011ec2 <__swsetup_r+0x62>
 8011e7c:	06da      	lsls	r2, r3, #27
 8011e7e:	d407      	bmi.n	8011e90 <__swsetup_r+0x30>
 8011e80:	2209      	movs	r2, #9
 8011e82:	602a      	str	r2, [r5, #0]
 8011e84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e88:	81a3      	strh	r3, [r4, #12]
 8011e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011e8e:	e033      	b.n	8011ef8 <__swsetup_r+0x98>
 8011e90:	0758      	lsls	r0, r3, #29
 8011e92:	d512      	bpl.n	8011eba <__swsetup_r+0x5a>
 8011e94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e96:	b141      	cbz	r1, 8011eaa <__swsetup_r+0x4a>
 8011e98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e9c:	4299      	cmp	r1, r3
 8011e9e:	d002      	beq.n	8011ea6 <__swsetup_r+0x46>
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	f000 f8c7 	bl	8012034 <_free_r>
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011eaa:	89a3      	ldrh	r3, [r4, #12]
 8011eac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011eb0:	81a3      	strh	r3, [r4, #12]
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	6063      	str	r3, [r4, #4]
 8011eb6:	6923      	ldr	r3, [r4, #16]
 8011eb8:	6023      	str	r3, [r4, #0]
 8011eba:	89a3      	ldrh	r3, [r4, #12]
 8011ebc:	f043 0308 	orr.w	r3, r3, #8
 8011ec0:	81a3      	strh	r3, [r4, #12]
 8011ec2:	6923      	ldr	r3, [r4, #16]
 8011ec4:	b94b      	cbnz	r3, 8011eda <__swsetup_r+0x7a>
 8011ec6:	89a3      	ldrh	r3, [r4, #12]
 8011ec8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ed0:	d003      	beq.n	8011eda <__swsetup_r+0x7a>
 8011ed2:	4621      	mov	r1, r4
 8011ed4:	4628      	mov	r0, r5
 8011ed6:	f000 fdf1 	bl	8012abc <__smakebuf_r>
 8011eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ede:	f013 0201 	ands.w	r2, r3, #1
 8011ee2:	d00a      	beq.n	8011efa <__swsetup_r+0x9a>
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	60a2      	str	r2, [r4, #8]
 8011ee8:	6962      	ldr	r2, [r4, #20]
 8011eea:	4252      	negs	r2, r2
 8011eec:	61a2      	str	r2, [r4, #24]
 8011eee:	6922      	ldr	r2, [r4, #16]
 8011ef0:	b942      	cbnz	r2, 8011f04 <__swsetup_r+0xa4>
 8011ef2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011ef6:	d1c5      	bne.n	8011e84 <__swsetup_r+0x24>
 8011ef8:	bd38      	pop	{r3, r4, r5, pc}
 8011efa:	0799      	lsls	r1, r3, #30
 8011efc:	bf58      	it	pl
 8011efe:	6962      	ldrpl	r2, [r4, #20]
 8011f00:	60a2      	str	r2, [r4, #8]
 8011f02:	e7f4      	b.n	8011eee <__swsetup_r+0x8e>
 8011f04:	2000      	movs	r0, #0
 8011f06:	e7f7      	b.n	8011ef8 <__swsetup_r+0x98>
 8011f08:	2000029c 	.word	0x2000029c

08011f0c <memset>:
 8011f0c:	4402      	add	r2, r0
 8011f0e:	4603      	mov	r3, r0
 8011f10:	4293      	cmp	r3, r2
 8011f12:	d100      	bne.n	8011f16 <memset+0xa>
 8011f14:	4770      	bx	lr
 8011f16:	f803 1b01 	strb.w	r1, [r3], #1
 8011f1a:	e7f9      	b.n	8011f10 <memset+0x4>

08011f1c <_close_r>:
 8011f1c:	b538      	push	{r3, r4, r5, lr}
 8011f1e:	4d06      	ldr	r5, [pc, #24]	@ (8011f38 <_close_r+0x1c>)
 8011f20:	2300      	movs	r3, #0
 8011f22:	4604      	mov	r4, r0
 8011f24:	4608      	mov	r0, r1
 8011f26:	602b      	str	r3, [r5, #0]
 8011f28:	f7f1 fafd 	bl	8003526 <_close>
 8011f2c:	1c43      	adds	r3, r0, #1
 8011f2e:	d102      	bne.n	8011f36 <_close_r+0x1a>
 8011f30:	682b      	ldr	r3, [r5, #0]
 8011f32:	b103      	cbz	r3, 8011f36 <_close_r+0x1a>
 8011f34:	6023      	str	r3, [r4, #0]
 8011f36:	bd38      	pop	{r3, r4, r5, pc}
 8011f38:	2000a5bc 	.word	0x2000a5bc

08011f3c <_lseek_r>:
 8011f3c:	b538      	push	{r3, r4, r5, lr}
 8011f3e:	4d07      	ldr	r5, [pc, #28]	@ (8011f5c <_lseek_r+0x20>)
 8011f40:	4604      	mov	r4, r0
 8011f42:	4608      	mov	r0, r1
 8011f44:	4611      	mov	r1, r2
 8011f46:	2200      	movs	r2, #0
 8011f48:	602a      	str	r2, [r5, #0]
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	f7f1 fb12 	bl	8003574 <_lseek>
 8011f50:	1c43      	adds	r3, r0, #1
 8011f52:	d102      	bne.n	8011f5a <_lseek_r+0x1e>
 8011f54:	682b      	ldr	r3, [r5, #0]
 8011f56:	b103      	cbz	r3, 8011f5a <_lseek_r+0x1e>
 8011f58:	6023      	str	r3, [r4, #0]
 8011f5a:	bd38      	pop	{r3, r4, r5, pc}
 8011f5c:	2000a5bc 	.word	0x2000a5bc

08011f60 <_read_r>:
 8011f60:	b538      	push	{r3, r4, r5, lr}
 8011f62:	4d07      	ldr	r5, [pc, #28]	@ (8011f80 <_read_r+0x20>)
 8011f64:	4604      	mov	r4, r0
 8011f66:	4608      	mov	r0, r1
 8011f68:	4611      	mov	r1, r2
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	602a      	str	r2, [r5, #0]
 8011f6e:	461a      	mov	r2, r3
 8011f70:	f7f1 fabc 	bl	80034ec <_read>
 8011f74:	1c43      	adds	r3, r0, #1
 8011f76:	d102      	bne.n	8011f7e <_read_r+0x1e>
 8011f78:	682b      	ldr	r3, [r5, #0]
 8011f7a:	b103      	cbz	r3, 8011f7e <_read_r+0x1e>
 8011f7c:	6023      	str	r3, [r4, #0]
 8011f7e:	bd38      	pop	{r3, r4, r5, pc}
 8011f80:	2000a5bc 	.word	0x2000a5bc

08011f84 <_sbrk_r>:
 8011f84:	b538      	push	{r3, r4, r5, lr}
 8011f86:	4d06      	ldr	r5, [pc, #24]	@ (8011fa0 <_sbrk_r+0x1c>)
 8011f88:	2300      	movs	r3, #0
 8011f8a:	4604      	mov	r4, r0
 8011f8c:	4608      	mov	r0, r1
 8011f8e:	602b      	str	r3, [r5, #0]
 8011f90:	f7f1 fafe 	bl	8003590 <_sbrk>
 8011f94:	1c43      	adds	r3, r0, #1
 8011f96:	d102      	bne.n	8011f9e <_sbrk_r+0x1a>
 8011f98:	682b      	ldr	r3, [r5, #0]
 8011f9a:	b103      	cbz	r3, 8011f9e <_sbrk_r+0x1a>
 8011f9c:	6023      	str	r3, [r4, #0]
 8011f9e:	bd38      	pop	{r3, r4, r5, pc}
 8011fa0:	2000a5bc 	.word	0x2000a5bc

08011fa4 <_write_r>:
 8011fa4:	b538      	push	{r3, r4, r5, lr}
 8011fa6:	4d07      	ldr	r5, [pc, #28]	@ (8011fc4 <_write_r+0x20>)
 8011fa8:	4604      	mov	r4, r0
 8011faa:	4608      	mov	r0, r1
 8011fac:	4611      	mov	r1, r2
 8011fae:	2200      	movs	r2, #0
 8011fb0:	602a      	str	r2, [r5, #0]
 8011fb2:	461a      	mov	r2, r3
 8011fb4:	f7ee ffcc 	bl	8000f50 <_write>
 8011fb8:	1c43      	adds	r3, r0, #1
 8011fba:	d102      	bne.n	8011fc2 <_write_r+0x1e>
 8011fbc:	682b      	ldr	r3, [r5, #0]
 8011fbe:	b103      	cbz	r3, 8011fc2 <_write_r+0x1e>
 8011fc0:	6023      	str	r3, [r4, #0]
 8011fc2:	bd38      	pop	{r3, r4, r5, pc}
 8011fc4:	2000a5bc 	.word	0x2000a5bc

08011fc8 <__errno>:
 8011fc8:	4b01      	ldr	r3, [pc, #4]	@ (8011fd0 <__errno+0x8>)
 8011fca:	6818      	ldr	r0, [r3, #0]
 8011fcc:	4770      	bx	lr
 8011fce:	bf00      	nop
 8011fd0:	2000029c 	.word	0x2000029c

08011fd4 <__libc_init_array>:
 8011fd4:	b570      	push	{r4, r5, r6, lr}
 8011fd6:	4d0d      	ldr	r5, [pc, #52]	@ (801200c <__libc_init_array+0x38>)
 8011fd8:	4c0d      	ldr	r4, [pc, #52]	@ (8012010 <__libc_init_array+0x3c>)
 8011fda:	1b64      	subs	r4, r4, r5
 8011fdc:	10a4      	asrs	r4, r4, #2
 8011fde:	2600      	movs	r6, #0
 8011fe0:	42a6      	cmp	r6, r4
 8011fe2:	d109      	bne.n	8011ff8 <__libc_init_array+0x24>
 8011fe4:	4d0b      	ldr	r5, [pc, #44]	@ (8012014 <__libc_init_array+0x40>)
 8011fe6:	4c0c      	ldr	r4, [pc, #48]	@ (8012018 <__libc_init_array+0x44>)
 8011fe8:	f000 fe58 	bl	8012c9c <_init>
 8011fec:	1b64      	subs	r4, r4, r5
 8011fee:	10a4      	asrs	r4, r4, #2
 8011ff0:	2600      	movs	r6, #0
 8011ff2:	42a6      	cmp	r6, r4
 8011ff4:	d105      	bne.n	8012002 <__libc_init_array+0x2e>
 8011ff6:	bd70      	pop	{r4, r5, r6, pc}
 8011ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ffc:	4798      	blx	r3
 8011ffe:	3601      	adds	r6, #1
 8012000:	e7ee      	b.n	8011fe0 <__libc_init_array+0xc>
 8012002:	f855 3b04 	ldr.w	r3, [r5], #4
 8012006:	4798      	blx	r3
 8012008:	3601      	adds	r6, #1
 801200a:	e7f2      	b.n	8011ff2 <__libc_init_array+0x1e>
 801200c:	08016da8 	.word	0x08016da8
 8012010:	08016da8 	.word	0x08016da8
 8012014:	08016da8 	.word	0x08016da8
 8012018:	08016dac 	.word	0x08016dac

0801201c <__retarget_lock_init_recursive>:
 801201c:	4770      	bx	lr

0801201e <__retarget_lock_acquire_recursive>:
 801201e:	4770      	bx	lr

08012020 <__retarget_lock_release_recursive>:
 8012020:	4770      	bx	lr

08012022 <strcpy>:
 8012022:	4603      	mov	r3, r0
 8012024:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012028:	f803 2b01 	strb.w	r2, [r3], #1
 801202c:	2a00      	cmp	r2, #0
 801202e:	d1f9      	bne.n	8012024 <strcpy+0x2>
 8012030:	4770      	bx	lr
	...

08012034 <_free_r>:
 8012034:	b538      	push	{r3, r4, r5, lr}
 8012036:	4605      	mov	r5, r0
 8012038:	2900      	cmp	r1, #0
 801203a:	d041      	beq.n	80120c0 <_free_r+0x8c>
 801203c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012040:	1f0c      	subs	r4, r1, #4
 8012042:	2b00      	cmp	r3, #0
 8012044:	bfb8      	it	lt
 8012046:	18e4      	addlt	r4, r4, r3
 8012048:	f7ff fd22 	bl	8011a90 <__malloc_lock>
 801204c:	4a1d      	ldr	r2, [pc, #116]	@ (80120c4 <_free_r+0x90>)
 801204e:	6813      	ldr	r3, [r2, #0]
 8012050:	b933      	cbnz	r3, 8012060 <_free_r+0x2c>
 8012052:	6063      	str	r3, [r4, #4]
 8012054:	6014      	str	r4, [r2, #0]
 8012056:	4628      	mov	r0, r5
 8012058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801205c:	f7ff bd1e 	b.w	8011a9c <__malloc_unlock>
 8012060:	42a3      	cmp	r3, r4
 8012062:	d908      	bls.n	8012076 <_free_r+0x42>
 8012064:	6820      	ldr	r0, [r4, #0]
 8012066:	1821      	adds	r1, r4, r0
 8012068:	428b      	cmp	r3, r1
 801206a:	bf01      	itttt	eq
 801206c:	6819      	ldreq	r1, [r3, #0]
 801206e:	685b      	ldreq	r3, [r3, #4]
 8012070:	1809      	addeq	r1, r1, r0
 8012072:	6021      	streq	r1, [r4, #0]
 8012074:	e7ed      	b.n	8012052 <_free_r+0x1e>
 8012076:	461a      	mov	r2, r3
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	b10b      	cbz	r3, 8012080 <_free_r+0x4c>
 801207c:	42a3      	cmp	r3, r4
 801207e:	d9fa      	bls.n	8012076 <_free_r+0x42>
 8012080:	6811      	ldr	r1, [r2, #0]
 8012082:	1850      	adds	r0, r2, r1
 8012084:	42a0      	cmp	r0, r4
 8012086:	d10b      	bne.n	80120a0 <_free_r+0x6c>
 8012088:	6820      	ldr	r0, [r4, #0]
 801208a:	4401      	add	r1, r0
 801208c:	1850      	adds	r0, r2, r1
 801208e:	4283      	cmp	r3, r0
 8012090:	6011      	str	r1, [r2, #0]
 8012092:	d1e0      	bne.n	8012056 <_free_r+0x22>
 8012094:	6818      	ldr	r0, [r3, #0]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	6053      	str	r3, [r2, #4]
 801209a:	4408      	add	r0, r1
 801209c:	6010      	str	r0, [r2, #0]
 801209e:	e7da      	b.n	8012056 <_free_r+0x22>
 80120a0:	d902      	bls.n	80120a8 <_free_r+0x74>
 80120a2:	230c      	movs	r3, #12
 80120a4:	602b      	str	r3, [r5, #0]
 80120a6:	e7d6      	b.n	8012056 <_free_r+0x22>
 80120a8:	6820      	ldr	r0, [r4, #0]
 80120aa:	1821      	adds	r1, r4, r0
 80120ac:	428b      	cmp	r3, r1
 80120ae:	bf04      	itt	eq
 80120b0:	6819      	ldreq	r1, [r3, #0]
 80120b2:	685b      	ldreq	r3, [r3, #4]
 80120b4:	6063      	str	r3, [r4, #4]
 80120b6:	bf04      	itt	eq
 80120b8:	1809      	addeq	r1, r1, r0
 80120ba:	6021      	streq	r1, [r4, #0]
 80120bc:	6054      	str	r4, [r2, #4]
 80120be:	e7ca      	b.n	8012056 <_free_r+0x22>
 80120c0:	bd38      	pop	{r3, r4, r5, pc}
 80120c2:	bf00      	nop
 80120c4:	2000a47c 	.word	0x2000a47c

080120c8 <__ssputs_r>:
 80120c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120cc:	688e      	ldr	r6, [r1, #8]
 80120ce:	461f      	mov	r7, r3
 80120d0:	42be      	cmp	r6, r7
 80120d2:	680b      	ldr	r3, [r1, #0]
 80120d4:	4682      	mov	sl, r0
 80120d6:	460c      	mov	r4, r1
 80120d8:	4690      	mov	r8, r2
 80120da:	d82d      	bhi.n	8012138 <__ssputs_r+0x70>
 80120dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80120e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80120e4:	d026      	beq.n	8012134 <__ssputs_r+0x6c>
 80120e6:	6965      	ldr	r5, [r4, #20]
 80120e8:	6909      	ldr	r1, [r1, #16]
 80120ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80120ee:	eba3 0901 	sub.w	r9, r3, r1
 80120f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80120f6:	1c7b      	adds	r3, r7, #1
 80120f8:	444b      	add	r3, r9
 80120fa:	106d      	asrs	r5, r5, #1
 80120fc:	429d      	cmp	r5, r3
 80120fe:	bf38      	it	cc
 8012100:	461d      	movcc	r5, r3
 8012102:	0553      	lsls	r3, r2, #21
 8012104:	d527      	bpl.n	8012156 <__ssputs_r+0x8e>
 8012106:	4629      	mov	r1, r5
 8012108:	f7ff fc42 	bl	8011990 <_malloc_r>
 801210c:	4606      	mov	r6, r0
 801210e:	b360      	cbz	r0, 801216a <__ssputs_r+0xa2>
 8012110:	6921      	ldr	r1, [r4, #16]
 8012112:	464a      	mov	r2, r9
 8012114:	f000 fd7e 	bl	8012c14 <memcpy>
 8012118:	89a3      	ldrh	r3, [r4, #12]
 801211a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801211e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012122:	81a3      	strh	r3, [r4, #12]
 8012124:	6126      	str	r6, [r4, #16]
 8012126:	6165      	str	r5, [r4, #20]
 8012128:	444e      	add	r6, r9
 801212a:	eba5 0509 	sub.w	r5, r5, r9
 801212e:	6026      	str	r6, [r4, #0]
 8012130:	60a5      	str	r5, [r4, #8]
 8012132:	463e      	mov	r6, r7
 8012134:	42be      	cmp	r6, r7
 8012136:	d900      	bls.n	801213a <__ssputs_r+0x72>
 8012138:	463e      	mov	r6, r7
 801213a:	6820      	ldr	r0, [r4, #0]
 801213c:	4632      	mov	r2, r6
 801213e:	4641      	mov	r1, r8
 8012140:	f000 fd2c 	bl	8012b9c <memmove>
 8012144:	68a3      	ldr	r3, [r4, #8]
 8012146:	1b9b      	subs	r3, r3, r6
 8012148:	60a3      	str	r3, [r4, #8]
 801214a:	6823      	ldr	r3, [r4, #0]
 801214c:	4433      	add	r3, r6
 801214e:	6023      	str	r3, [r4, #0]
 8012150:	2000      	movs	r0, #0
 8012152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012156:	462a      	mov	r2, r5
 8012158:	f000 fd6a 	bl	8012c30 <_realloc_r>
 801215c:	4606      	mov	r6, r0
 801215e:	2800      	cmp	r0, #0
 8012160:	d1e0      	bne.n	8012124 <__ssputs_r+0x5c>
 8012162:	6921      	ldr	r1, [r4, #16]
 8012164:	4650      	mov	r0, sl
 8012166:	f7ff ff65 	bl	8012034 <_free_r>
 801216a:	230c      	movs	r3, #12
 801216c:	f8ca 3000 	str.w	r3, [sl]
 8012170:	89a3      	ldrh	r3, [r4, #12]
 8012172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012176:	81a3      	strh	r3, [r4, #12]
 8012178:	f04f 30ff 	mov.w	r0, #4294967295
 801217c:	e7e9      	b.n	8012152 <__ssputs_r+0x8a>
	...

08012180 <_svfiprintf_r>:
 8012180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012184:	4698      	mov	r8, r3
 8012186:	898b      	ldrh	r3, [r1, #12]
 8012188:	061b      	lsls	r3, r3, #24
 801218a:	b09d      	sub	sp, #116	@ 0x74
 801218c:	4607      	mov	r7, r0
 801218e:	460d      	mov	r5, r1
 8012190:	4614      	mov	r4, r2
 8012192:	d510      	bpl.n	80121b6 <_svfiprintf_r+0x36>
 8012194:	690b      	ldr	r3, [r1, #16]
 8012196:	b973      	cbnz	r3, 80121b6 <_svfiprintf_r+0x36>
 8012198:	2140      	movs	r1, #64	@ 0x40
 801219a:	f7ff fbf9 	bl	8011990 <_malloc_r>
 801219e:	6028      	str	r0, [r5, #0]
 80121a0:	6128      	str	r0, [r5, #16]
 80121a2:	b930      	cbnz	r0, 80121b2 <_svfiprintf_r+0x32>
 80121a4:	230c      	movs	r3, #12
 80121a6:	603b      	str	r3, [r7, #0]
 80121a8:	f04f 30ff 	mov.w	r0, #4294967295
 80121ac:	b01d      	add	sp, #116	@ 0x74
 80121ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b2:	2340      	movs	r3, #64	@ 0x40
 80121b4:	616b      	str	r3, [r5, #20]
 80121b6:	2300      	movs	r3, #0
 80121b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80121ba:	2320      	movs	r3, #32
 80121bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80121c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80121c4:	2330      	movs	r3, #48	@ 0x30
 80121c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012364 <_svfiprintf_r+0x1e4>
 80121ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80121ce:	f04f 0901 	mov.w	r9, #1
 80121d2:	4623      	mov	r3, r4
 80121d4:	469a      	mov	sl, r3
 80121d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121da:	b10a      	cbz	r2, 80121e0 <_svfiprintf_r+0x60>
 80121dc:	2a25      	cmp	r2, #37	@ 0x25
 80121de:	d1f9      	bne.n	80121d4 <_svfiprintf_r+0x54>
 80121e0:	ebba 0b04 	subs.w	fp, sl, r4
 80121e4:	d00b      	beq.n	80121fe <_svfiprintf_r+0x7e>
 80121e6:	465b      	mov	r3, fp
 80121e8:	4622      	mov	r2, r4
 80121ea:	4629      	mov	r1, r5
 80121ec:	4638      	mov	r0, r7
 80121ee:	f7ff ff6b 	bl	80120c8 <__ssputs_r>
 80121f2:	3001      	adds	r0, #1
 80121f4:	f000 80a7 	beq.w	8012346 <_svfiprintf_r+0x1c6>
 80121f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121fa:	445a      	add	r2, fp
 80121fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80121fe:	f89a 3000 	ldrb.w	r3, [sl]
 8012202:	2b00      	cmp	r3, #0
 8012204:	f000 809f 	beq.w	8012346 <_svfiprintf_r+0x1c6>
 8012208:	2300      	movs	r3, #0
 801220a:	f04f 32ff 	mov.w	r2, #4294967295
 801220e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012212:	f10a 0a01 	add.w	sl, sl, #1
 8012216:	9304      	str	r3, [sp, #16]
 8012218:	9307      	str	r3, [sp, #28]
 801221a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801221e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012220:	4654      	mov	r4, sl
 8012222:	2205      	movs	r2, #5
 8012224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012228:	484e      	ldr	r0, [pc, #312]	@ (8012364 <_svfiprintf_r+0x1e4>)
 801222a:	f7ed ffe9 	bl	8000200 <memchr>
 801222e:	9a04      	ldr	r2, [sp, #16]
 8012230:	b9d8      	cbnz	r0, 801226a <_svfiprintf_r+0xea>
 8012232:	06d0      	lsls	r0, r2, #27
 8012234:	bf44      	itt	mi
 8012236:	2320      	movmi	r3, #32
 8012238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801223c:	0711      	lsls	r1, r2, #28
 801223e:	bf44      	itt	mi
 8012240:	232b      	movmi	r3, #43	@ 0x2b
 8012242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012246:	f89a 3000 	ldrb.w	r3, [sl]
 801224a:	2b2a      	cmp	r3, #42	@ 0x2a
 801224c:	d015      	beq.n	801227a <_svfiprintf_r+0xfa>
 801224e:	9a07      	ldr	r2, [sp, #28]
 8012250:	4654      	mov	r4, sl
 8012252:	2000      	movs	r0, #0
 8012254:	f04f 0c0a 	mov.w	ip, #10
 8012258:	4621      	mov	r1, r4
 801225a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801225e:	3b30      	subs	r3, #48	@ 0x30
 8012260:	2b09      	cmp	r3, #9
 8012262:	d94b      	bls.n	80122fc <_svfiprintf_r+0x17c>
 8012264:	b1b0      	cbz	r0, 8012294 <_svfiprintf_r+0x114>
 8012266:	9207      	str	r2, [sp, #28]
 8012268:	e014      	b.n	8012294 <_svfiprintf_r+0x114>
 801226a:	eba0 0308 	sub.w	r3, r0, r8
 801226e:	fa09 f303 	lsl.w	r3, r9, r3
 8012272:	4313      	orrs	r3, r2
 8012274:	9304      	str	r3, [sp, #16]
 8012276:	46a2      	mov	sl, r4
 8012278:	e7d2      	b.n	8012220 <_svfiprintf_r+0xa0>
 801227a:	9b03      	ldr	r3, [sp, #12]
 801227c:	1d19      	adds	r1, r3, #4
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	9103      	str	r1, [sp, #12]
 8012282:	2b00      	cmp	r3, #0
 8012284:	bfbb      	ittet	lt
 8012286:	425b      	neglt	r3, r3
 8012288:	f042 0202 	orrlt.w	r2, r2, #2
 801228c:	9307      	strge	r3, [sp, #28]
 801228e:	9307      	strlt	r3, [sp, #28]
 8012290:	bfb8      	it	lt
 8012292:	9204      	strlt	r2, [sp, #16]
 8012294:	7823      	ldrb	r3, [r4, #0]
 8012296:	2b2e      	cmp	r3, #46	@ 0x2e
 8012298:	d10a      	bne.n	80122b0 <_svfiprintf_r+0x130>
 801229a:	7863      	ldrb	r3, [r4, #1]
 801229c:	2b2a      	cmp	r3, #42	@ 0x2a
 801229e:	d132      	bne.n	8012306 <_svfiprintf_r+0x186>
 80122a0:	9b03      	ldr	r3, [sp, #12]
 80122a2:	1d1a      	adds	r2, r3, #4
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	9203      	str	r2, [sp, #12]
 80122a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80122ac:	3402      	adds	r4, #2
 80122ae:	9305      	str	r3, [sp, #20]
 80122b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012374 <_svfiprintf_r+0x1f4>
 80122b4:	7821      	ldrb	r1, [r4, #0]
 80122b6:	2203      	movs	r2, #3
 80122b8:	4650      	mov	r0, sl
 80122ba:	f7ed ffa1 	bl	8000200 <memchr>
 80122be:	b138      	cbz	r0, 80122d0 <_svfiprintf_r+0x150>
 80122c0:	9b04      	ldr	r3, [sp, #16]
 80122c2:	eba0 000a 	sub.w	r0, r0, sl
 80122c6:	2240      	movs	r2, #64	@ 0x40
 80122c8:	4082      	lsls	r2, r0
 80122ca:	4313      	orrs	r3, r2
 80122cc:	3401      	adds	r4, #1
 80122ce:	9304      	str	r3, [sp, #16]
 80122d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122d4:	4824      	ldr	r0, [pc, #144]	@ (8012368 <_svfiprintf_r+0x1e8>)
 80122d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80122da:	2206      	movs	r2, #6
 80122dc:	f7ed ff90 	bl	8000200 <memchr>
 80122e0:	2800      	cmp	r0, #0
 80122e2:	d036      	beq.n	8012352 <_svfiprintf_r+0x1d2>
 80122e4:	4b21      	ldr	r3, [pc, #132]	@ (801236c <_svfiprintf_r+0x1ec>)
 80122e6:	bb1b      	cbnz	r3, 8012330 <_svfiprintf_r+0x1b0>
 80122e8:	9b03      	ldr	r3, [sp, #12]
 80122ea:	3307      	adds	r3, #7
 80122ec:	f023 0307 	bic.w	r3, r3, #7
 80122f0:	3308      	adds	r3, #8
 80122f2:	9303      	str	r3, [sp, #12]
 80122f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122f6:	4433      	add	r3, r6
 80122f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80122fa:	e76a      	b.n	80121d2 <_svfiprintf_r+0x52>
 80122fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012300:	460c      	mov	r4, r1
 8012302:	2001      	movs	r0, #1
 8012304:	e7a8      	b.n	8012258 <_svfiprintf_r+0xd8>
 8012306:	2300      	movs	r3, #0
 8012308:	3401      	adds	r4, #1
 801230a:	9305      	str	r3, [sp, #20]
 801230c:	4619      	mov	r1, r3
 801230e:	f04f 0c0a 	mov.w	ip, #10
 8012312:	4620      	mov	r0, r4
 8012314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012318:	3a30      	subs	r2, #48	@ 0x30
 801231a:	2a09      	cmp	r2, #9
 801231c:	d903      	bls.n	8012326 <_svfiprintf_r+0x1a6>
 801231e:	2b00      	cmp	r3, #0
 8012320:	d0c6      	beq.n	80122b0 <_svfiprintf_r+0x130>
 8012322:	9105      	str	r1, [sp, #20]
 8012324:	e7c4      	b.n	80122b0 <_svfiprintf_r+0x130>
 8012326:	fb0c 2101 	mla	r1, ip, r1, r2
 801232a:	4604      	mov	r4, r0
 801232c:	2301      	movs	r3, #1
 801232e:	e7f0      	b.n	8012312 <_svfiprintf_r+0x192>
 8012330:	ab03      	add	r3, sp, #12
 8012332:	9300      	str	r3, [sp, #0]
 8012334:	462a      	mov	r2, r5
 8012336:	4b0e      	ldr	r3, [pc, #56]	@ (8012370 <_svfiprintf_r+0x1f0>)
 8012338:	a904      	add	r1, sp, #16
 801233a:	4638      	mov	r0, r7
 801233c:	f3af 8000 	nop.w
 8012340:	1c42      	adds	r2, r0, #1
 8012342:	4606      	mov	r6, r0
 8012344:	d1d6      	bne.n	80122f4 <_svfiprintf_r+0x174>
 8012346:	89ab      	ldrh	r3, [r5, #12]
 8012348:	065b      	lsls	r3, r3, #25
 801234a:	f53f af2d 	bmi.w	80121a8 <_svfiprintf_r+0x28>
 801234e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012350:	e72c      	b.n	80121ac <_svfiprintf_r+0x2c>
 8012352:	ab03      	add	r3, sp, #12
 8012354:	9300      	str	r3, [sp, #0]
 8012356:	462a      	mov	r2, r5
 8012358:	4b05      	ldr	r3, [pc, #20]	@ (8012370 <_svfiprintf_r+0x1f0>)
 801235a:	a904      	add	r1, sp, #16
 801235c:	4638      	mov	r0, r7
 801235e:	f000 f9bb 	bl	80126d8 <_printf_i>
 8012362:	e7ed      	b.n	8012340 <_svfiprintf_r+0x1c0>
 8012364:	08016d6c 	.word	0x08016d6c
 8012368:	08016d76 	.word	0x08016d76
 801236c:	00000000 	.word	0x00000000
 8012370:	080120c9 	.word	0x080120c9
 8012374:	08016d72 	.word	0x08016d72

08012378 <__sfputc_r>:
 8012378:	6893      	ldr	r3, [r2, #8]
 801237a:	3b01      	subs	r3, #1
 801237c:	2b00      	cmp	r3, #0
 801237e:	b410      	push	{r4}
 8012380:	6093      	str	r3, [r2, #8]
 8012382:	da08      	bge.n	8012396 <__sfputc_r+0x1e>
 8012384:	6994      	ldr	r4, [r2, #24]
 8012386:	42a3      	cmp	r3, r4
 8012388:	db01      	blt.n	801238e <__sfputc_r+0x16>
 801238a:	290a      	cmp	r1, #10
 801238c:	d103      	bne.n	8012396 <__sfputc_r+0x1e>
 801238e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012392:	f7ff bd26 	b.w	8011de2 <__swbuf_r>
 8012396:	6813      	ldr	r3, [r2, #0]
 8012398:	1c58      	adds	r0, r3, #1
 801239a:	6010      	str	r0, [r2, #0]
 801239c:	7019      	strb	r1, [r3, #0]
 801239e:	4608      	mov	r0, r1
 80123a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123a4:	4770      	bx	lr

080123a6 <__sfputs_r>:
 80123a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123a8:	4606      	mov	r6, r0
 80123aa:	460f      	mov	r7, r1
 80123ac:	4614      	mov	r4, r2
 80123ae:	18d5      	adds	r5, r2, r3
 80123b0:	42ac      	cmp	r4, r5
 80123b2:	d101      	bne.n	80123b8 <__sfputs_r+0x12>
 80123b4:	2000      	movs	r0, #0
 80123b6:	e007      	b.n	80123c8 <__sfputs_r+0x22>
 80123b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123bc:	463a      	mov	r2, r7
 80123be:	4630      	mov	r0, r6
 80123c0:	f7ff ffda 	bl	8012378 <__sfputc_r>
 80123c4:	1c43      	adds	r3, r0, #1
 80123c6:	d1f3      	bne.n	80123b0 <__sfputs_r+0xa>
 80123c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080123cc <_vfiprintf_r>:
 80123cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d0:	460d      	mov	r5, r1
 80123d2:	b09d      	sub	sp, #116	@ 0x74
 80123d4:	4614      	mov	r4, r2
 80123d6:	4698      	mov	r8, r3
 80123d8:	4606      	mov	r6, r0
 80123da:	b118      	cbz	r0, 80123e4 <_vfiprintf_r+0x18>
 80123dc:	6a03      	ldr	r3, [r0, #32]
 80123de:	b90b      	cbnz	r3, 80123e4 <_vfiprintf_r+0x18>
 80123e0:	f7ff fbee 	bl	8011bc0 <__sinit>
 80123e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80123e6:	07d9      	lsls	r1, r3, #31
 80123e8:	d405      	bmi.n	80123f6 <_vfiprintf_r+0x2a>
 80123ea:	89ab      	ldrh	r3, [r5, #12]
 80123ec:	059a      	lsls	r2, r3, #22
 80123ee:	d402      	bmi.n	80123f6 <_vfiprintf_r+0x2a>
 80123f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80123f2:	f7ff fe14 	bl	801201e <__retarget_lock_acquire_recursive>
 80123f6:	89ab      	ldrh	r3, [r5, #12]
 80123f8:	071b      	lsls	r3, r3, #28
 80123fa:	d501      	bpl.n	8012400 <_vfiprintf_r+0x34>
 80123fc:	692b      	ldr	r3, [r5, #16]
 80123fe:	b99b      	cbnz	r3, 8012428 <_vfiprintf_r+0x5c>
 8012400:	4629      	mov	r1, r5
 8012402:	4630      	mov	r0, r6
 8012404:	f7ff fd2c 	bl	8011e60 <__swsetup_r>
 8012408:	b170      	cbz	r0, 8012428 <_vfiprintf_r+0x5c>
 801240a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801240c:	07dc      	lsls	r4, r3, #31
 801240e:	d504      	bpl.n	801241a <_vfiprintf_r+0x4e>
 8012410:	f04f 30ff 	mov.w	r0, #4294967295
 8012414:	b01d      	add	sp, #116	@ 0x74
 8012416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801241a:	89ab      	ldrh	r3, [r5, #12]
 801241c:	0598      	lsls	r0, r3, #22
 801241e:	d4f7      	bmi.n	8012410 <_vfiprintf_r+0x44>
 8012420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012422:	f7ff fdfd 	bl	8012020 <__retarget_lock_release_recursive>
 8012426:	e7f3      	b.n	8012410 <_vfiprintf_r+0x44>
 8012428:	2300      	movs	r3, #0
 801242a:	9309      	str	r3, [sp, #36]	@ 0x24
 801242c:	2320      	movs	r3, #32
 801242e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012432:	f8cd 800c 	str.w	r8, [sp, #12]
 8012436:	2330      	movs	r3, #48	@ 0x30
 8012438:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80125e8 <_vfiprintf_r+0x21c>
 801243c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012440:	f04f 0901 	mov.w	r9, #1
 8012444:	4623      	mov	r3, r4
 8012446:	469a      	mov	sl, r3
 8012448:	f813 2b01 	ldrb.w	r2, [r3], #1
 801244c:	b10a      	cbz	r2, 8012452 <_vfiprintf_r+0x86>
 801244e:	2a25      	cmp	r2, #37	@ 0x25
 8012450:	d1f9      	bne.n	8012446 <_vfiprintf_r+0x7a>
 8012452:	ebba 0b04 	subs.w	fp, sl, r4
 8012456:	d00b      	beq.n	8012470 <_vfiprintf_r+0xa4>
 8012458:	465b      	mov	r3, fp
 801245a:	4622      	mov	r2, r4
 801245c:	4629      	mov	r1, r5
 801245e:	4630      	mov	r0, r6
 8012460:	f7ff ffa1 	bl	80123a6 <__sfputs_r>
 8012464:	3001      	adds	r0, #1
 8012466:	f000 80a7 	beq.w	80125b8 <_vfiprintf_r+0x1ec>
 801246a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801246c:	445a      	add	r2, fp
 801246e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012470:	f89a 3000 	ldrb.w	r3, [sl]
 8012474:	2b00      	cmp	r3, #0
 8012476:	f000 809f 	beq.w	80125b8 <_vfiprintf_r+0x1ec>
 801247a:	2300      	movs	r3, #0
 801247c:	f04f 32ff 	mov.w	r2, #4294967295
 8012480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012484:	f10a 0a01 	add.w	sl, sl, #1
 8012488:	9304      	str	r3, [sp, #16]
 801248a:	9307      	str	r3, [sp, #28]
 801248c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012490:	931a      	str	r3, [sp, #104]	@ 0x68
 8012492:	4654      	mov	r4, sl
 8012494:	2205      	movs	r2, #5
 8012496:	f814 1b01 	ldrb.w	r1, [r4], #1
 801249a:	4853      	ldr	r0, [pc, #332]	@ (80125e8 <_vfiprintf_r+0x21c>)
 801249c:	f7ed feb0 	bl	8000200 <memchr>
 80124a0:	9a04      	ldr	r2, [sp, #16]
 80124a2:	b9d8      	cbnz	r0, 80124dc <_vfiprintf_r+0x110>
 80124a4:	06d1      	lsls	r1, r2, #27
 80124a6:	bf44      	itt	mi
 80124a8:	2320      	movmi	r3, #32
 80124aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124ae:	0713      	lsls	r3, r2, #28
 80124b0:	bf44      	itt	mi
 80124b2:	232b      	movmi	r3, #43	@ 0x2b
 80124b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124b8:	f89a 3000 	ldrb.w	r3, [sl]
 80124bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80124be:	d015      	beq.n	80124ec <_vfiprintf_r+0x120>
 80124c0:	9a07      	ldr	r2, [sp, #28]
 80124c2:	4654      	mov	r4, sl
 80124c4:	2000      	movs	r0, #0
 80124c6:	f04f 0c0a 	mov.w	ip, #10
 80124ca:	4621      	mov	r1, r4
 80124cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124d0:	3b30      	subs	r3, #48	@ 0x30
 80124d2:	2b09      	cmp	r3, #9
 80124d4:	d94b      	bls.n	801256e <_vfiprintf_r+0x1a2>
 80124d6:	b1b0      	cbz	r0, 8012506 <_vfiprintf_r+0x13a>
 80124d8:	9207      	str	r2, [sp, #28]
 80124da:	e014      	b.n	8012506 <_vfiprintf_r+0x13a>
 80124dc:	eba0 0308 	sub.w	r3, r0, r8
 80124e0:	fa09 f303 	lsl.w	r3, r9, r3
 80124e4:	4313      	orrs	r3, r2
 80124e6:	9304      	str	r3, [sp, #16]
 80124e8:	46a2      	mov	sl, r4
 80124ea:	e7d2      	b.n	8012492 <_vfiprintf_r+0xc6>
 80124ec:	9b03      	ldr	r3, [sp, #12]
 80124ee:	1d19      	adds	r1, r3, #4
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	9103      	str	r1, [sp, #12]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	bfbb      	ittet	lt
 80124f8:	425b      	neglt	r3, r3
 80124fa:	f042 0202 	orrlt.w	r2, r2, #2
 80124fe:	9307      	strge	r3, [sp, #28]
 8012500:	9307      	strlt	r3, [sp, #28]
 8012502:	bfb8      	it	lt
 8012504:	9204      	strlt	r2, [sp, #16]
 8012506:	7823      	ldrb	r3, [r4, #0]
 8012508:	2b2e      	cmp	r3, #46	@ 0x2e
 801250a:	d10a      	bne.n	8012522 <_vfiprintf_r+0x156>
 801250c:	7863      	ldrb	r3, [r4, #1]
 801250e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012510:	d132      	bne.n	8012578 <_vfiprintf_r+0x1ac>
 8012512:	9b03      	ldr	r3, [sp, #12]
 8012514:	1d1a      	adds	r2, r3, #4
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	9203      	str	r2, [sp, #12]
 801251a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801251e:	3402      	adds	r4, #2
 8012520:	9305      	str	r3, [sp, #20]
 8012522:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80125f8 <_vfiprintf_r+0x22c>
 8012526:	7821      	ldrb	r1, [r4, #0]
 8012528:	2203      	movs	r2, #3
 801252a:	4650      	mov	r0, sl
 801252c:	f7ed fe68 	bl	8000200 <memchr>
 8012530:	b138      	cbz	r0, 8012542 <_vfiprintf_r+0x176>
 8012532:	9b04      	ldr	r3, [sp, #16]
 8012534:	eba0 000a 	sub.w	r0, r0, sl
 8012538:	2240      	movs	r2, #64	@ 0x40
 801253a:	4082      	lsls	r2, r0
 801253c:	4313      	orrs	r3, r2
 801253e:	3401      	adds	r4, #1
 8012540:	9304      	str	r3, [sp, #16]
 8012542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012546:	4829      	ldr	r0, [pc, #164]	@ (80125ec <_vfiprintf_r+0x220>)
 8012548:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801254c:	2206      	movs	r2, #6
 801254e:	f7ed fe57 	bl	8000200 <memchr>
 8012552:	2800      	cmp	r0, #0
 8012554:	d03f      	beq.n	80125d6 <_vfiprintf_r+0x20a>
 8012556:	4b26      	ldr	r3, [pc, #152]	@ (80125f0 <_vfiprintf_r+0x224>)
 8012558:	bb1b      	cbnz	r3, 80125a2 <_vfiprintf_r+0x1d6>
 801255a:	9b03      	ldr	r3, [sp, #12]
 801255c:	3307      	adds	r3, #7
 801255e:	f023 0307 	bic.w	r3, r3, #7
 8012562:	3308      	adds	r3, #8
 8012564:	9303      	str	r3, [sp, #12]
 8012566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012568:	443b      	add	r3, r7
 801256a:	9309      	str	r3, [sp, #36]	@ 0x24
 801256c:	e76a      	b.n	8012444 <_vfiprintf_r+0x78>
 801256e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012572:	460c      	mov	r4, r1
 8012574:	2001      	movs	r0, #1
 8012576:	e7a8      	b.n	80124ca <_vfiprintf_r+0xfe>
 8012578:	2300      	movs	r3, #0
 801257a:	3401      	adds	r4, #1
 801257c:	9305      	str	r3, [sp, #20]
 801257e:	4619      	mov	r1, r3
 8012580:	f04f 0c0a 	mov.w	ip, #10
 8012584:	4620      	mov	r0, r4
 8012586:	f810 2b01 	ldrb.w	r2, [r0], #1
 801258a:	3a30      	subs	r2, #48	@ 0x30
 801258c:	2a09      	cmp	r2, #9
 801258e:	d903      	bls.n	8012598 <_vfiprintf_r+0x1cc>
 8012590:	2b00      	cmp	r3, #0
 8012592:	d0c6      	beq.n	8012522 <_vfiprintf_r+0x156>
 8012594:	9105      	str	r1, [sp, #20]
 8012596:	e7c4      	b.n	8012522 <_vfiprintf_r+0x156>
 8012598:	fb0c 2101 	mla	r1, ip, r1, r2
 801259c:	4604      	mov	r4, r0
 801259e:	2301      	movs	r3, #1
 80125a0:	e7f0      	b.n	8012584 <_vfiprintf_r+0x1b8>
 80125a2:	ab03      	add	r3, sp, #12
 80125a4:	9300      	str	r3, [sp, #0]
 80125a6:	462a      	mov	r2, r5
 80125a8:	4b12      	ldr	r3, [pc, #72]	@ (80125f4 <_vfiprintf_r+0x228>)
 80125aa:	a904      	add	r1, sp, #16
 80125ac:	4630      	mov	r0, r6
 80125ae:	f3af 8000 	nop.w
 80125b2:	4607      	mov	r7, r0
 80125b4:	1c78      	adds	r0, r7, #1
 80125b6:	d1d6      	bne.n	8012566 <_vfiprintf_r+0x19a>
 80125b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80125ba:	07d9      	lsls	r1, r3, #31
 80125bc:	d405      	bmi.n	80125ca <_vfiprintf_r+0x1fe>
 80125be:	89ab      	ldrh	r3, [r5, #12]
 80125c0:	059a      	lsls	r2, r3, #22
 80125c2:	d402      	bmi.n	80125ca <_vfiprintf_r+0x1fe>
 80125c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80125c6:	f7ff fd2b 	bl	8012020 <__retarget_lock_release_recursive>
 80125ca:	89ab      	ldrh	r3, [r5, #12]
 80125cc:	065b      	lsls	r3, r3, #25
 80125ce:	f53f af1f 	bmi.w	8012410 <_vfiprintf_r+0x44>
 80125d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80125d4:	e71e      	b.n	8012414 <_vfiprintf_r+0x48>
 80125d6:	ab03      	add	r3, sp, #12
 80125d8:	9300      	str	r3, [sp, #0]
 80125da:	462a      	mov	r2, r5
 80125dc:	4b05      	ldr	r3, [pc, #20]	@ (80125f4 <_vfiprintf_r+0x228>)
 80125de:	a904      	add	r1, sp, #16
 80125e0:	4630      	mov	r0, r6
 80125e2:	f000 f879 	bl	80126d8 <_printf_i>
 80125e6:	e7e4      	b.n	80125b2 <_vfiprintf_r+0x1e6>
 80125e8:	08016d6c 	.word	0x08016d6c
 80125ec:	08016d76 	.word	0x08016d76
 80125f0:	00000000 	.word	0x00000000
 80125f4:	080123a7 	.word	0x080123a7
 80125f8:	08016d72 	.word	0x08016d72

080125fc <_printf_common>:
 80125fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012600:	4616      	mov	r6, r2
 8012602:	4698      	mov	r8, r3
 8012604:	688a      	ldr	r2, [r1, #8]
 8012606:	690b      	ldr	r3, [r1, #16]
 8012608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801260c:	4293      	cmp	r3, r2
 801260e:	bfb8      	it	lt
 8012610:	4613      	movlt	r3, r2
 8012612:	6033      	str	r3, [r6, #0]
 8012614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012618:	4607      	mov	r7, r0
 801261a:	460c      	mov	r4, r1
 801261c:	b10a      	cbz	r2, 8012622 <_printf_common+0x26>
 801261e:	3301      	adds	r3, #1
 8012620:	6033      	str	r3, [r6, #0]
 8012622:	6823      	ldr	r3, [r4, #0]
 8012624:	0699      	lsls	r1, r3, #26
 8012626:	bf42      	ittt	mi
 8012628:	6833      	ldrmi	r3, [r6, #0]
 801262a:	3302      	addmi	r3, #2
 801262c:	6033      	strmi	r3, [r6, #0]
 801262e:	6825      	ldr	r5, [r4, #0]
 8012630:	f015 0506 	ands.w	r5, r5, #6
 8012634:	d106      	bne.n	8012644 <_printf_common+0x48>
 8012636:	f104 0a19 	add.w	sl, r4, #25
 801263a:	68e3      	ldr	r3, [r4, #12]
 801263c:	6832      	ldr	r2, [r6, #0]
 801263e:	1a9b      	subs	r3, r3, r2
 8012640:	42ab      	cmp	r3, r5
 8012642:	dc26      	bgt.n	8012692 <_printf_common+0x96>
 8012644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012648:	6822      	ldr	r2, [r4, #0]
 801264a:	3b00      	subs	r3, #0
 801264c:	bf18      	it	ne
 801264e:	2301      	movne	r3, #1
 8012650:	0692      	lsls	r2, r2, #26
 8012652:	d42b      	bmi.n	80126ac <_printf_common+0xb0>
 8012654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012658:	4641      	mov	r1, r8
 801265a:	4638      	mov	r0, r7
 801265c:	47c8      	blx	r9
 801265e:	3001      	adds	r0, #1
 8012660:	d01e      	beq.n	80126a0 <_printf_common+0xa4>
 8012662:	6823      	ldr	r3, [r4, #0]
 8012664:	6922      	ldr	r2, [r4, #16]
 8012666:	f003 0306 	and.w	r3, r3, #6
 801266a:	2b04      	cmp	r3, #4
 801266c:	bf02      	ittt	eq
 801266e:	68e5      	ldreq	r5, [r4, #12]
 8012670:	6833      	ldreq	r3, [r6, #0]
 8012672:	1aed      	subeq	r5, r5, r3
 8012674:	68a3      	ldr	r3, [r4, #8]
 8012676:	bf0c      	ite	eq
 8012678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801267c:	2500      	movne	r5, #0
 801267e:	4293      	cmp	r3, r2
 8012680:	bfc4      	itt	gt
 8012682:	1a9b      	subgt	r3, r3, r2
 8012684:	18ed      	addgt	r5, r5, r3
 8012686:	2600      	movs	r6, #0
 8012688:	341a      	adds	r4, #26
 801268a:	42b5      	cmp	r5, r6
 801268c:	d11a      	bne.n	80126c4 <_printf_common+0xc8>
 801268e:	2000      	movs	r0, #0
 8012690:	e008      	b.n	80126a4 <_printf_common+0xa8>
 8012692:	2301      	movs	r3, #1
 8012694:	4652      	mov	r2, sl
 8012696:	4641      	mov	r1, r8
 8012698:	4638      	mov	r0, r7
 801269a:	47c8      	blx	r9
 801269c:	3001      	adds	r0, #1
 801269e:	d103      	bne.n	80126a8 <_printf_common+0xac>
 80126a0:	f04f 30ff 	mov.w	r0, #4294967295
 80126a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126a8:	3501      	adds	r5, #1
 80126aa:	e7c6      	b.n	801263a <_printf_common+0x3e>
 80126ac:	18e1      	adds	r1, r4, r3
 80126ae:	1c5a      	adds	r2, r3, #1
 80126b0:	2030      	movs	r0, #48	@ 0x30
 80126b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80126b6:	4422      	add	r2, r4
 80126b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80126bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80126c0:	3302      	adds	r3, #2
 80126c2:	e7c7      	b.n	8012654 <_printf_common+0x58>
 80126c4:	2301      	movs	r3, #1
 80126c6:	4622      	mov	r2, r4
 80126c8:	4641      	mov	r1, r8
 80126ca:	4638      	mov	r0, r7
 80126cc:	47c8      	blx	r9
 80126ce:	3001      	adds	r0, #1
 80126d0:	d0e6      	beq.n	80126a0 <_printf_common+0xa4>
 80126d2:	3601      	adds	r6, #1
 80126d4:	e7d9      	b.n	801268a <_printf_common+0x8e>
	...

080126d8 <_printf_i>:
 80126d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80126dc:	7e0f      	ldrb	r7, [r1, #24]
 80126de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80126e0:	2f78      	cmp	r7, #120	@ 0x78
 80126e2:	4691      	mov	r9, r2
 80126e4:	4680      	mov	r8, r0
 80126e6:	460c      	mov	r4, r1
 80126e8:	469a      	mov	sl, r3
 80126ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80126ee:	d807      	bhi.n	8012700 <_printf_i+0x28>
 80126f0:	2f62      	cmp	r7, #98	@ 0x62
 80126f2:	d80a      	bhi.n	801270a <_printf_i+0x32>
 80126f4:	2f00      	cmp	r7, #0
 80126f6:	f000 80d2 	beq.w	801289e <_printf_i+0x1c6>
 80126fa:	2f58      	cmp	r7, #88	@ 0x58
 80126fc:	f000 80b9 	beq.w	8012872 <_printf_i+0x19a>
 8012700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012708:	e03a      	b.n	8012780 <_printf_i+0xa8>
 801270a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801270e:	2b15      	cmp	r3, #21
 8012710:	d8f6      	bhi.n	8012700 <_printf_i+0x28>
 8012712:	a101      	add	r1, pc, #4	@ (adr r1, 8012718 <_printf_i+0x40>)
 8012714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012718:	08012771 	.word	0x08012771
 801271c:	08012785 	.word	0x08012785
 8012720:	08012701 	.word	0x08012701
 8012724:	08012701 	.word	0x08012701
 8012728:	08012701 	.word	0x08012701
 801272c:	08012701 	.word	0x08012701
 8012730:	08012785 	.word	0x08012785
 8012734:	08012701 	.word	0x08012701
 8012738:	08012701 	.word	0x08012701
 801273c:	08012701 	.word	0x08012701
 8012740:	08012701 	.word	0x08012701
 8012744:	08012885 	.word	0x08012885
 8012748:	080127af 	.word	0x080127af
 801274c:	0801283f 	.word	0x0801283f
 8012750:	08012701 	.word	0x08012701
 8012754:	08012701 	.word	0x08012701
 8012758:	080128a7 	.word	0x080128a7
 801275c:	08012701 	.word	0x08012701
 8012760:	080127af 	.word	0x080127af
 8012764:	08012701 	.word	0x08012701
 8012768:	08012701 	.word	0x08012701
 801276c:	08012847 	.word	0x08012847
 8012770:	6833      	ldr	r3, [r6, #0]
 8012772:	1d1a      	adds	r2, r3, #4
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	6032      	str	r2, [r6, #0]
 8012778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801277c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012780:	2301      	movs	r3, #1
 8012782:	e09d      	b.n	80128c0 <_printf_i+0x1e8>
 8012784:	6833      	ldr	r3, [r6, #0]
 8012786:	6820      	ldr	r0, [r4, #0]
 8012788:	1d19      	adds	r1, r3, #4
 801278a:	6031      	str	r1, [r6, #0]
 801278c:	0606      	lsls	r6, r0, #24
 801278e:	d501      	bpl.n	8012794 <_printf_i+0xbc>
 8012790:	681d      	ldr	r5, [r3, #0]
 8012792:	e003      	b.n	801279c <_printf_i+0xc4>
 8012794:	0645      	lsls	r5, r0, #25
 8012796:	d5fb      	bpl.n	8012790 <_printf_i+0xb8>
 8012798:	f9b3 5000 	ldrsh.w	r5, [r3]
 801279c:	2d00      	cmp	r5, #0
 801279e:	da03      	bge.n	80127a8 <_printf_i+0xd0>
 80127a0:	232d      	movs	r3, #45	@ 0x2d
 80127a2:	426d      	negs	r5, r5
 80127a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80127a8:	4859      	ldr	r0, [pc, #356]	@ (8012910 <_printf_i+0x238>)
 80127aa:	230a      	movs	r3, #10
 80127ac:	e011      	b.n	80127d2 <_printf_i+0xfa>
 80127ae:	6821      	ldr	r1, [r4, #0]
 80127b0:	6833      	ldr	r3, [r6, #0]
 80127b2:	0608      	lsls	r0, r1, #24
 80127b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80127b8:	d402      	bmi.n	80127c0 <_printf_i+0xe8>
 80127ba:	0649      	lsls	r1, r1, #25
 80127bc:	bf48      	it	mi
 80127be:	b2ad      	uxthmi	r5, r5
 80127c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80127c2:	4853      	ldr	r0, [pc, #332]	@ (8012910 <_printf_i+0x238>)
 80127c4:	6033      	str	r3, [r6, #0]
 80127c6:	bf14      	ite	ne
 80127c8:	230a      	movne	r3, #10
 80127ca:	2308      	moveq	r3, #8
 80127cc:	2100      	movs	r1, #0
 80127ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80127d2:	6866      	ldr	r6, [r4, #4]
 80127d4:	60a6      	str	r6, [r4, #8]
 80127d6:	2e00      	cmp	r6, #0
 80127d8:	bfa2      	ittt	ge
 80127da:	6821      	ldrge	r1, [r4, #0]
 80127dc:	f021 0104 	bicge.w	r1, r1, #4
 80127e0:	6021      	strge	r1, [r4, #0]
 80127e2:	b90d      	cbnz	r5, 80127e8 <_printf_i+0x110>
 80127e4:	2e00      	cmp	r6, #0
 80127e6:	d04b      	beq.n	8012880 <_printf_i+0x1a8>
 80127e8:	4616      	mov	r6, r2
 80127ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80127ee:	fb03 5711 	mls	r7, r3, r1, r5
 80127f2:	5dc7      	ldrb	r7, [r0, r7]
 80127f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80127f8:	462f      	mov	r7, r5
 80127fa:	42bb      	cmp	r3, r7
 80127fc:	460d      	mov	r5, r1
 80127fe:	d9f4      	bls.n	80127ea <_printf_i+0x112>
 8012800:	2b08      	cmp	r3, #8
 8012802:	d10b      	bne.n	801281c <_printf_i+0x144>
 8012804:	6823      	ldr	r3, [r4, #0]
 8012806:	07df      	lsls	r7, r3, #31
 8012808:	d508      	bpl.n	801281c <_printf_i+0x144>
 801280a:	6923      	ldr	r3, [r4, #16]
 801280c:	6861      	ldr	r1, [r4, #4]
 801280e:	4299      	cmp	r1, r3
 8012810:	bfde      	ittt	le
 8012812:	2330      	movle	r3, #48	@ 0x30
 8012814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012818:	f106 36ff 	addle.w	r6, r6, #4294967295
 801281c:	1b92      	subs	r2, r2, r6
 801281e:	6122      	str	r2, [r4, #16]
 8012820:	f8cd a000 	str.w	sl, [sp]
 8012824:	464b      	mov	r3, r9
 8012826:	aa03      	add	r2, sp, #12
 8012828:	4621      	mov	r1, r4
 801282a:	4640      	mov	r0, r8
 801282c:	f7ff fee6 	bl	80125fc <_printf_common>
 8012830:	3001      	adds	r0, #1
 8012832:	d14a      	bne.n	80128ca <_printf_i+0x1f2>
 8012834:	f04f 30ff 	mov.w	r0, #4294967295
 8012838:	b004      	add	sp, #16
 801283a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801283e:	6823      	ldr	r3, [r4, #0]
 8012840:	f043 0320 	orr.w	r3, r3, #32
 8012844:	6023      	str	r3, [r4, #0]
 8012846:	4833      	ldr	r0, [pc, #204]	@ (8012914 <_printf_i+0x23c>)
 8012848:	2778      	movs	r7, #120	@ 0x78
 801284a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801284e:	6823      	ldr	r3, [r4, #0]
 8012850:	6831      	ldr	r1, [r6, #0]
 8012852:	061f      	lsls	r7, r3, #24
 8012854:	f851 5b04 	ldr.w	r5, [r1], #4
 8012858:	d402      	bmi.n	8012860 <_printf_i+0x188>
 801285a:	065f      	lsls	r7, r3, #25
 801285c:	bf48      	it	mi
 801285e:	b2ad      	uxthmi	r5, r5
 8012860:	6031      	str	r1, [r6, #0]
 8012862:	07d9      	lsls	r1, r3, #31
 8012864:	bf44      	itt	mi
 8012866:	f043 0320 	orrmi.w	r3, r3, #32
 801286a:	6023      	strmi	r3, [r4, #0]
 801286c:	b11d      	cbz	r5, 8012876 <_printf_i+0x19e>
 801286e:	2310      	movs	r3, #16
 8012870:	e7ac      	b.n	80127cc <_printf_i+0xf4>
 8012872:	4827      	ldr	r0, [pc, #156]	@ (8012910 <_printf_i+0x238>)
 8012874:	e7e9      	b.n	801284a <_printf_i+0x172>
 8012876:	6823      	ldr	r3, [r4, #0]
 8012878:	f023 0320 	bic.w	r3, r3, #32
 801287c:	6023      	str	r3, [r4, #0]
 801287e:	e7f6      	b.n	801286e <_printf_i+0x196>
 8012880:	4616      	mov	r6, r2
 8012882:	e7bd      	b.n	8012800 <_printf_i+0x128>
 8012884:	6833      	ldr	r3, [r6, #0]
 8012886:	6825      	ldr	r5, [r4, #0]
 8012888:	6961      	ldr	r1, [r4, #20]
 801288a:	1d18      	adds	r0, r3, #4
 801288c:	6030      	str	r0, [r6, #0]
 801288e:	062e      	lsls	r6, r5, #24
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	d501      	bpl.n	8012898 <_printf_i+0x1c0>
 8012894:	6019      	str	r1, [r3, #0]
 8012896:	e002      	b.n	801289e <_printf_i+0x1c6>
 8012898:	0668      	lsls	r0, r5, #25
 801289a:	d5fb      	bpl.n	8012894 <_printf_i+0x1bc>
 801289c:	8019      	strh	r1, [r3, #0]
 801289e:	2300      	movs	r3, #0
 80128a0:	6123      	str	r3, [r4, #16]
 80128a2:	4616      	mov	r6, r2
 80128a4:	e7bc      	b.n	8012820 <_printf_i+0x148>
 80128a6:	6833      	ldr	r3, [r6, #0]
 80128a8:	1d1a      	adds	r2, r3, #4
 80128aa:	6032      	str	r2, [r6, #0]
 80128ac:	681e      	ldr	r6, [r3, #0]
 80128ae:	6862      	ldr	r2, [r4, #4]
 80128b0:	2100      	movs	r1, #0
 80128b2:	4630      	mov	r0, r6
 80128b4:	f7ed fca4 	bl	8000200 <memchr>
 80128b8:	b108      	cbz	r0, 80128be <_printf_i+0x1e6>
 80128ba:	1b80      	subs	r0, r0, r6
 80128bc:	6060      	str	r0, [r4, #4]
 80128be:	6863      	ldr	r3, [r4, #4]
 80128c0:	6123      	str	r3, [r4, #16]
 80128c2:	2300      	movs	r3, #0
 80128c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80128c8:	e7aa      	b.n	8012820 <_printf_i+0x148>
 80128ca:	6923      	ldr	r3, [r4, #16]
 80128cc:	4632      	mov	r2, r6
 80128ce:	4649      	mov	r1, r9
 80128d0:	4640      	mov	r0, r8
 80128d2:	47d0      	blx	sl
 80128d4:	3001      	adds	r0, #1
 80128d6:	d0ad      	beq.n	8012834 <_printf_i+0x15c>
 80128d8:	6823      	ldr	r3, [r4, #0]
 80128da:	079b      	lsls	r3, r3, #30
 80128dc:	d413      	bmi.n	8012906 <_printf_i+0x22e>
 80128de:	68e0      	ldr	r0, [r4, #12]
 80128e0:	9b03      	ldr	r3, [sp, #12]
 80128e2:	4298      	cmp	r0, r3
 80128e4:	bfb8      	it	lt
 80128e6:	4618      	movlt	r0, r3
 80128e8:	e7a6      	b.n	8012838 <_printf_i+0x160>
 80128ea:	2301      	movs	r3, #1
 80128ec:	4632      	mov	r2, r6
 80128ee:	4649      	mov	r1, r9
 80128f0:	4640      	mov	r0, r8
 80128f2:	47d0      	blx	sl
 80128f4:	3001      	adds	r0, #1
 80128f6:	d09d      	beq.n	8012834 <_printf_i+0x15c>
 80128f8:	3501      	adds	r5, #1
 80128fa:	68e3      	ldr	r3, [r4, #12]
 80128fc:	9903      	ldr	r1, [sp, #12]
 80128fe:	1a5b      	subs	r3, r3, r1
 8012900:	42ab      	cmp	r3, r5
 8012902:	dcf2      	bgt.n	80128ea <_printf_i+0x212>
 8012904:	e7eb      	b.n	80128de <_printf_i+0x206>
 8012906:	2500      	movs	r5, #0
 8012908:	f104 0619 	add.w	r6, r4, #25
 801290c:	e7f5      	b.n	80128fa <_printf_i+0x222>
 801290e:	bf00      	nop
 8012910:	08016d7d 	.word	0x08016d7d
 8012914:	08016d8e 	.word	0x08016d8e

08012918 <__sflush_r>:
 8012918:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801291c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012920:	0716      	lsls	r6, r2, #28
 8012922:	4605      	mov	r5, r0
 8012924:	460c      	mov	r4, r1
 8012926:	d454      	bmi.n	80129d2 <__sflush_r+0xba>
 8012928:	684b      	ldr	r3, [r1, #4]
 801292a:	2b00      	cmp	r3, #0
 801292c:	dc02      	bgt.n	8012934 <__sflush_r+0x1c>
 801292e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012930:	2b00      	cmp	r3, #0
 8012932:	dd48      	ble.n	80129c6 <__sflush_r+0xae>
 8012934:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012936:	2e00      	cmp	r6, #0
 8012938:	d045      	beq.n	80129c6 <__sflush_r+0xae>
 801293a:	2300      	movs	r3, #0
 801293c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012940:	682f      	ldr	r7, [r5, #0]
 8012942:	6a21      	ldr	r1, [r4, #32]
 8012944:	602b      	str	r3, [r5, #0]
 8012946:	d030      	beq.n	80129aa <__sflush_r+0x92>
 8012948:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801294a:	89a3      	ldrh	r3, [r4, #12]
 801294c:	0759      	lsls	r1, r3, #29
 801294e:	d505      	bpl.n	801295c <__sflush_r+0x44>
 8012950:	6863      	ldr	r3, [r4, #4]
 8012952:	1ad2      	subs	r2, r2, r3
 8012954:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012956:	b10b      	cbz	r3, 801295c <__sflush_r+0x44>
 8012958:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801295a:	1ad2      	subs	r2, r2, r3
 801295c:	2300      	movs	r3, #0
 801295e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012960:	6a21      	ldr	r1, [r4, #32]
 8012962:	4628      	mov	r0, r5
 8012964:	47b0      	blx	r6
 8012966:	1c43      	adds	r3, r0, #1
 8012968:	89a3      	ldrh	r3, [r4, #12]
 801296a:	d106      	bne.n	801297a <__sflush_r+0x62>
 801296c:	6829      	ldr	r1, [r5, #0]
 801296e:	291d      	cmp	r1, #29
 8012970:	d82b      	bhi.n	80129ca <__sflush_r+0xb2>
 8012972:	4a2a      	ldr	r2, [pc, #168]	@ (8012a1c <__sflush_r+0x104>)
 8012974:	410a      	asrs	r2, r1
 8012976:	07d6      	lsls	r6, r2, #31
 8012978:	d427      	bmi.n	80129ca <__sflush_r+0xb2>
 801297a:	2200      	movs	r2, #0
 801297c:	6062      	str	r2, [r4, #4]
 801297e:	04d9      	lsls	r1, r3, #19
 8012980:	6922      	ldr	r2, [r4, #16]
 8012982:	6022      	str	r2, [r4, #0]
 8012984:	d504      	bpl.n	8012990 <__sflush_r+0x78>
 8012986:	1c42      	adds	r2, r0, #1
 8012988:	d101      	bne.n	801298e <__sflush_r+0x76>
 801298a:	682b      	ldr	r3, [r5, #0]
 801298c:	b903      	cbnz	r3, 8012990 <__sflush_r+0x78>
 801298e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012990:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012992:	602f      	str	r7, [r5, #0]
 8012994:	b1b9      	cbz	r1, 80129c6 <__sflush_r+0xae>
 8012996:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801299a:	4299      	cmp	r1, r3
 801299c:	d002      	beq.n	80129a4 <__sflush_r+0x8c>
 801299e:	4628      	mov	r0, r5
 80129a0:	f7ff fb48 	bl	8012034 <_free_r>
 80129a4:	2300      	movs	r3, #0
 80129a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80129a8:	e00d      	b.n	80129c6 <__sflush_r+0xae>
 80129aa:	2301      	movs	r3, #1
 80129ac:	4628      	mov	r0, r5
 80129ae:	47b0      	blx	r6
 80129b0:	4602      	mov	r2, r0
 80129b2:	1c50      	adds	r0, r2, #1
 80129b4:	d1c9      	bne.n	801294a <__sflush_r+0x32>
 80129b6:	682b      	ldr	r3, [r5, #0]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d0c6      	beq.n	801294a <__sflush_r+0x32>
 80129bc:	2b1d      	cmp	r3, #29
 80129be:	d001      	beq.n	80129c4 <__sflush_r+0xac>
 80129c0:	2b16      	cmp	r3, #22
 80129c2:	d11e      	bne.n	8012a02 <__sflush_r+0xea>
 80129c4:	602f      	str	r7, [r5, #0]
 80129c6:	2000      	movs	r0, #0
 80129c8:	e022      	b.n	8012a10 <__sflush_r+0xf8>
 80129ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129ce:	b21b      	sxth	r3, r3
 80129d0:	e01b      	b.n	8012a0a <__sflush_r+0xf2>
 80129d2:	690f      	ldr	r7, [r1, #16]
 80129d4:	2f00      	cmp	r7, #0
 80129d6:	d0f6      	beq.n	80129c6 <__sflush_r+0xae>
 80129d8:	0793      	lsls	r3, r2, #30
 80129da:	680e      	ldr	r6, [r1, #0]
 80129dc:	bf08      	it	eq
 80129de:	694b      	ldreq	r3, [r1, #20]
 80129e0:	600f      	str	r7, [r1, #0]
 80129e2:	bf18      	it	ne
 80129e4:	2300      	movne	r3, #0
 80129e6:	eba6 0807 	sub.w	r8, r6, r7
 80129ea:	608b      	str	r3, [r1, #8]
 80129ec:	f1b8 0f00 	cmp.w	r8, #0
 80129f0:	dde9      	ble.n	80129c6 <__sflush_r+0xae>
 80129f2:	6a21      	ldr	r1, [r4, #32]
 80129f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80129f6:	4643      	mov	r3, r8
 80129f8:	463a      	mov	r2, r7
 80129fa:	4628      	mov	r0, r5
 80129fc:	47b0      	blx	r6
 80129fe:	2800      	cmp	r0, #0
 8012a00:	dc08      	bgt.n	8012a14 <__sflush_r+0xfc>
 8012a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a0a:	81a3      	strh	r3, [r4, #12]
 8012a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8012a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a14:	4407      	add	r7, r0
 8012a16:	eba8 0800 	sub.w	r8, r8, r0
 8012a1a:	e7e7      	b.n	80129ec <__sflush_r+0xd4>
 8012a1c:	dfbffffe 	.word	0xdfbffffe

08012a20 <_fflush_r>:
 8012a20:	b538      	push	{r3, r4, r5, lr}
 8012a22:	690b      	ldr	r3, [r1, #16]
 8012a24:	4605      	mov	r5, r0
 8012a26:	460c      	mov	r4, r1
 8012a28:	b913      	cbnz	r3, 8012a30 <_fflush_r+0x10>
 8012a2a:	2500      	movs	r5, #0
 8012a2c:	4628      	mov	r0, r5
 8012a2e:	bd38      	pop	{r3, r4, r5, pc}
 8012a30:	b118      	cbz	r0, 8012a3a <_fflush_r+0x1a>
 8012a32:	6a03      	ldr	r3, [r0, #32]
 8012a34:	b90b      	cbnz	r3, 8012a3a <_fflush_r+0x1a>
 8012a36:	f7ff f8c3 	bl	8011bc0 <__sinit>
 8012a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d0f3      	beq.n	8012a2a <_fflush_r+0xa>
 8012a42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012a44:	07d0      	lsls	r0, r2, #31
 8012a46:	d404      	bmi.n	8012a52 <_fflush_r+0x32>
 8012a48:	0599      	lsls	r1, r3, #22
 8012a4a:	d402      	bmi.n	8012a52 <_fflush_r+0x32>
 8012a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a4e:	f7ff fae6 	bl	801201e <__retarget_lock_acquire_recursive>
 8012a52:	4628      	mov	r0, r5
 8012a54:	4621      	mov	r1, r4
 8012a56:	f7ff ff5f 	bl	8012918 <__sflush_r>
 8012a5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012a5c:	07da      	lsls	r2, r3, #31
 8012a5e:	4605      	mov	r5, r0
 8012a60:	d4e4      	bmi.n	8012a2c <_fflush_r+0xc>
 8012a62:	89a3      	ldrh	r3, [r4, #12]
 8012a64:	059b      	lsls	r3, r3, #22
 8012a66:	d4e1      	bmi.n	8012a2c <_fflush_r+0xc>
 8012a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012a6a:	f7ff fad9 	bl	8012020 <__retarget_lock_release_recursive>
 8012a6e:	e7dd      	b.n	8012a2c <_fflush_r+0xc>

08012a70 <__swhatbuf_r>:
 8012a70:	b570      	push	{r4, r5, r6, lr}
 8012a72:	460c      	mov	r4, r1
 8012a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a78:	2900      	cmp	r1, #0
 8012a7a:	b096      	sub	sp, #88	@ 0x58
 8012a7c:	4615      	mov	r5, r2
 8012a7e:	461e      	mov	r6, r3
 8012a80:	da0d      	bge.n	8012a9e <__swhatbuf_r+0x2e>
 8012a82:	89a3      	ldrh	r3, [r4, #12]
 8012a84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012a88:	f04f 0100 	mov.w	r1, #0
 8012a8c:	bf14      	ite	ne
 8012a8e:	2340      	movne	r3, #64	@ 0x40
 8012a90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012a94:	2000      	movs	r0, #0
 8012a96:	6031      	str	r1, [r6, #0]
 8012a98:	602b      	str	r3, [r5, #0]
 8012a9a:	b016      	add	sp, #88	@ 0x58
 8012a9c:	bd70      	pop	{r4, r5, r6, pc}
 8012a9e:	466a      	mov	r2, sp
 8012aa0:	f000 f896 	bl	8012bd0 <_fstat_r>
 8012aa4:	2800      	cmp	r0, #0
 8012aa6:	dbec      	blt.n	8012a82 <__swhatbuf_r+0x12>
 8012aa8:	9901      	ldr	r1, [sp, #4]
 8012aaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012aae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012ab2:	4259      	negs	r1, r3
 8012ab4:	4159      	adcs	r1, r3
 8012ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012aba:	e7eb      	b.n	8012a94 <__swhatbuf_r+0x24>

08012abc <__smakebuf_r>:
 8012abc:	898b      	ldrh	r3, [r1, #12]
 8012abe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ac0:	079d      	lsls	r5, r3, #30
 8012ac2:	4606      	mov	r6, r0
 8012ac4:	460c      	mov	r4, r1
 8012ac6:	d507      	bpl.n	8012ad8 <__smakebuf_r+0x1c>
 8012ac8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012acc:	6023      	str	r3, [r4, #0]
 8012ace:	6123      	str	r3, [r4, #16]
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	6163      	str	r3, [r4, #20]
 8012ad4:	b003      	add	sp, #12
 8012ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ad8:	ab01      	add	r3, sp, #4
 8012ada:	466a      	mov	r2, sp
 8012adc:	f7ff ffc8 	bl	8012a70 <__swhatbuf_r>
 8012ae0:	9f00      	ldr	r7, [sp, #0]
 8012ae2:	4605      	mov	r5, r0
 8012ae4:	4639      	mov	r1, r7
 8012ae6:	4630      	mov	r0, r6
 8012ae8:	f7fe ff52 	bl	8011990 <_malloc_r>
 8012aec:	b948      	cbnz	r0, 8012b02 <__smakebuf_r+0x46>
 8012aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012af2:	059a      	lsls	r2, r3, #22
 8012af4:	d4ee      	bmi.n	8012ad4 <__smakebuf_r+0x18>
 8012af6:	f023 0303 	bic.w	r3, r3, #3
 8012afa:	f043 0302 	orr.w	r3, r3, #2
 8012afe:	81a3      	strh	r3, [r4, #12]
 8012b00:	e7e2      	b.n	8012ac8 <__smakebuf_r+0xc>
 8012b02:	89a3      	ldrh	r3, [r4, #12]
 8012b04:	6020      	str	r0, [r4, #0]
 8012b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b0a:	81a3      	strh	r3, [r4, #12]
 8012b0c:	9b01      	ldr	r3, [sp, #4]
 8012b0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012b12:	b15b      	cbz	r3, 8012b2c <__smakebuf_r+0x70>
 8012b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b18:	4630      	mov	r0, r6
 8012b1a:	f000 f86b 	bl	8012bf4 <_isatty_r>
 8012b1e:	b128      	cbz	r0, 8012b2c <__smakebuf_r+0x70>
 8012b20:	89a3      	ldrh	r3, [r4, #12]
 8012b22:	f023 0303 	bic.w	r3, r3, #3
 8012b26:	f043 0301 	orr.w	r3, r3, #1
 8012b2a:	81a3      	strh	r3, [r4, #12]
 8012b2c:	89a3      	ldrh	r3, [r4, #12]
 8012b2e:	431d      	orrs	r5, r3
 8012b30:	81a5      	strh	r5, [r4, #12]
 8012b32:	e7cf      	b.n	8012ad4 <__smakebuf_r+0x18>

08012b34 <_putc_r>:
 8012b34:	b570      	push	{r4, r5, r6, lr}
 8012b36:	460d      	mov	r5, r1
 8012b38:	4614      	mov	r4, r2
 8012b3a:	4606      	mov	r6, r0
 8012b3c:	b118      	cbz	r0, 8012b46 <_putc_r+0x12>
 8012b3e:	6a03      	ldr	r3, [r0, #32]
 8012b40:	b90b      	cbnz	r3, 8012b46 <_putc_r+0x12>
 8012b42:	f7ff f83d 	bl	8011bc0 <__sinit>
 8012b46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012b48:	07d8      	lsls	r0, r3, #31
 8012b4a:	d405      	bmi.n	8012b58 <_putc_r+0x24>
 8012b4c:	89a3      	ldrh	r3, [r4, #12]
 8012b4e:	0599      	lsls	r1, r3, #22
 8012b50:	d402      	bmi.n	8012b58 <_putc_r+0x24>
 8012b52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b54:	f7ff fa63 	bl	801201e <__retarget_lock_acquire_recursive>
 8012b58:	68a3      	ldr	r3, [r4, #8]
 8012b5a:	3b01      	subs	r3, #1
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	60a3      	str	r3, [r4, #8]
 8012b60:	da05      	bge.n	8012b6e <_putc_r+0x3a>
 8012b62:	69a2      	ldr	r2, [r4, #24]
 8012b64:	4293      	cmp	r3, r2
 8012b66:	db12      	blt.n	8012b8e <_putc_r+0x5a>
 8012b68:	b2eb      	uxtb	r3, r5
 8012b6a:	2b0a      	cmp	r3, #10
 8012b6c:	d00f      	beq.n	8012b8e <_putc_r+0x5a>
 8012b6e:	6823      	ldr	r3, [r4, #0]
 8012b70:	1c5a      	adds	r2, r3, #1
 8012b72:	6022      	str	r2, [r4, #0]
 8012b74:	701d      	strb	r5, [r3, #0]
 8012b76:	b2ed      	uxtb	r5, r5
 8012b78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012b7a:	07da      	lsls	r2, r3, #31
 8012b7c:	d405      	bmi.n	8012b8a <_putc_r+0x56>
 8012b7e:	89a3      	ldrh	r3, [r4, #12]
 8012b80:	059b      	lsls	r3, r3, #22
 8012b82:	d402      	bmi.n	8012b8a <_putc_r+0x56>
 8012b84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b86:	f7ff fa4b 	bl	8012020 <__retarget_lock_release_recursive>
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	bd70      	pop	{r4, r5, r6, pc}
 8012b8e:	4629      	mov	r1, r5
 8012b90:	4622      	mov	r2, r4
 8012b92:	4630      	mov	r0, r6
 8012b94:	f7ff f925 	bl	8011de2 <__swbuf_r>
 8012b98:	4605      	mov	r5, r0
 8012b9a:	e7ed      	b.n	8012b78 <_putc_r+0x44>

08012b9c <memmove>:
 8012b9c:	4288      	cmp	r0, r1
 8012b9e:	b510      	push	{r4, lr}
 8012ba0:	eb01 0402 	add.w	r4, r1, r2
 8012ba4:	d902      	bls.n	8012bac <memmove+0x10>
 8012ba6:	4284      	cmp	r4, r0
 8012ba8:	4623      	mov	r3, r4
 8012baa:	d807      	bhi.n	8012bbc <memmove+0x20>
 8012bac:	1e43      	subs	r3, r0, #1
 8012bae:	42a1      	cmp	r1, r4
 8012bb0:	d008      	beq.n	8012bc4 <memmove+0x28>
 8012bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012bba:	e7f8      	b.n	8012bae <memmove+0x12>
 8012bbc:	4402      	add	r2, r0
 8012bbe:	4601      	mov	r1, r0
 8012bc0:	428a      	cmp	r2, r1
 8012bc2:	d100      	bne.n	8012bc6 <memmove+0x2a>
 8012bc4:	bd10      	pop	{r4, pc}
 8012bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012bce:	e7f7      	b.n	8012bc0 <memmove+0x24>

08012bd0 <_fstat_r>:
 8012bd0:	b538      	push	{r3, r4, r5, lr}
 8012bd2:	4d07      	ldr	r5, [pc, #28]	@ (8012bf0 <_fstat_r+0x20>)
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	4604      	mov	r4, r0
 8012bd8:	4608      	mov	r0, r1
 8012bda:	4611      	mov	r1, r2
 8012bdc:	602b      	str	r3, [r5, #0]
 8012bde:	f7f0 fcae 	bl	800353e <_fstat>
 8012be2:	1c43      	adds	r3, r0, #1
 8012be4:	d102      	bne.n	8012bec <_fstat_r+0x1c>
 8012be6:	682b      	ldr	r3, [r5, #0]
 8012be8:	b103      	cbz	r3, 8012bec <_fstat_r+0x1c>
 8012bea:	6023      	str	r3, [r4, #0]
 8012bec:	bd38      	pop	{r3, r4, r5, pc}
 8012bee:	bf00      	nop
 8012bf0:	2000a5bc 	.word	0x2000a5bc

08012bf4 <_isatty_r>:
 8012bf4:	b538      	push	{r3, r4, r5, lr}
 8012bf6:	4d06      	ldr	r5, [pc, #24]	@ (8012c10 <_isatty_r+0x1c>)
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	4604      	mov	r4, r0
 8012bfc:	4608      	mov	r0, r1
 8012bfe:	602b      	str	r3, [r5, #0]
 8012c00:	f7f0 fcad 	bl	800355e <_isatty>
 8012c04:	1c43      	adds	r3, r0, #1
 8012c06:	d102      	bne.n	8012c0e <_isatty_r+0x1a>
 8012c08:	682b      	ldr	r3, [r5, #0]
 8012c0a:	b103      	cbz	r3, 8012c0e <_isatty_r+0x1a>
 8012c0c:	6023      	str	r3, [r4, #0]
 8012c0e:	bd38      	pop	{r3, r4, r5, pc}
 8012c10:	2000a5bc 	.word	0x2000a5bc

08012c14 <memcpy>:
 8012c14:	440a      	add	r2, r1
 8012c16:	4291      	cmp	r1, r2
 8012c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c1c:	d100      	bne.n	8012c20 <memcpy+0xc>
 8012c1e:	4770      	bx	lr
 8012c20:	b510      	push	{r4, lr}
 8012c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c2a:	4291      	cmp	r1, r2
 8012c2c:	d1f9      	bne.n	8012c22 <memcpy+0xe>
 8012c2e:	bd10      	pop	{r4, pc}

08012c30 <_realloc_r>:
 8012c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c34:	4680      	mov	r8, r0
 8012c36:	4615      	mov	r5, r2
 8012c38:	460c      	mov	r4, r1
 8012c3a:	b921      	cbnz	r1, 8012c46 <_realloc_r+0x16>
 8012c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c40:	4611      	mov	r1, r2
 8012c42:	f7fe bea5 	b.w	8011990 <_malloc_r>
 8012c46:	b92a      	cbnz	r2, 8012c54 <_realloc_r+0x24>
 8012c48:	f7ff f9f4 	bl	8012034 <_free_r>
 8012c4c:	2400      	movs	r4, #0
 8012c4e:	4620      	mov	r0, r4
 8012c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c54:	f000 f81a 	bl	8012c8c <_malloc_usable_size_r>
 8012c58:	4285      	cmp	r5, r0
 8012c5a:	4606      	mov	r6, r0
 8012c5c:	d802      	bhi.n	8012c64 <_realloc_r+0x34>
 8012c5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012c62:	d8f4      	bhi.n	8012c4e <_realloc_r+0x1e>
 8012c64:	4629      	mov	r1, r5
 8012c66:	4640      	mov	r0, r8
 8012c68:	f7fe fe92 	bl	8011990 <_malloc_r>
 8012c6c:	4607      	mov	r7, r0
 8012c6e:	2800      	cmp	r0, #0
 8012c70:	d0ec      	beq.n	8012c4c <_realloc_r+0x1c>
 8012c72:	42b5      	cmp	r5, r6
 8012c74:	462a      	mov	r2, r5
 8012c76:	4621      	mov	r1, r4
 8012c78:	bf28      	it	cs
 8012c7a:	4632      	movcs	r2, r6
 8012c7c:	f7ff ffca 	bl	8012c14 <memcpy>
 8012c80:	4621      	mov	r1, r4
 8012c82:	4640      	mov	r0, r8
 8012c84:	f7ff f9d6 	bl	8012034 <_free_r>
 8012c88:	463c      	mov	r4, r7
 8012c8a:	e7e0      	b.n	8012c4e <_realloc_r+0x1e>

08012c8c <_malloc_usable_size_r>:
 8012c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c90:	1f18      	subs	r0, r3, #4
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	bfbc      	itt	lt
 8012c96:	580b      	ldrlt	r3, [r1, r0]
 8012c98:	18c0      	addlt	r0, r0, r3
 8012c9a:	4770      	bx	lr

08012c9c <_init>:
 8012c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c9e:	bf00      	nop
 8012ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ca2:	bc08      	pop	{r3}
 8012ca4:	469e      	mov	lr, r3
 8012ca6:	4770      	bx	lr

08012ca8 <_fini>:
 8012ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012caa:	bf00      	nop
 8012cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cae:	bc08      	pop	{r3}
 8012cb0:	469e      	mov	lr, r3
 8012cb2:	4770      	bx	lr
