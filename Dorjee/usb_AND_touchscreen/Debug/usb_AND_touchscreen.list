
usb_AND_touchscreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ea4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034e0  08012054  08012054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015534  08015534  000171f0  2**0
                  CONTENTS
  4 .ARM          00000008  08015534  08015534  00016534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801553c  0801553c  000171f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801553c  0801553c  0001653c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015540  08015540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08015544  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000171f0  2**0
                  CONTENTS
 10 .bss          00002464  200001f0  200001f0  000171f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002654  20002654  000171f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000171f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d5ba  00000000  00000000  00017220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a19  00000000  00000000  000447da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025a8  00000000  00000000  0004b1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d1d  00000000  00000000  0004d7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d8b7  00000000  00000000  0004f4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030496  00000000  00000000  0007cd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4bb2  00000000  00000000  000ad20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a1dbc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a89c  00000000  00000000  001a1e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  001ac69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801203c 	.word	0x0801203c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	0801203c 	.word	0x0801203c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <USBH_HID_EventCallback>:
static uint8_t USB_BUSY = 0;
char qr_code_data[MAX_LINES][MAX_LINE_LENGTH] = {{'\0'}};  //static initializes strings with all null characters
HID_KEYBD_Info_TypeDef *Keyboard_Info;

/***DORJEE YOU HAVE TO CHANGE USBH_HID.H WHEN YOU GENERATE CODE****/
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) { //2.6s for 54 lines
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	Keyboard_Info = USBH_HID_GetKeybdInfo(phost);
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f00e f807 	bl	800e5ac <USBH_HID_GetKeybdInfo>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a41      	ldr	r2, [pc, #260]	@ (80006a8 <USBH_HID_EventCallback+0x118>)
 80005a2:	6013      	str	r3, [r2, #0]
	char key = USBH_HID_GetASCIICode(Keyboard_Info);
 80005a4:	4b40      	ldr	r3, [pc, #256]	@ (80006a8 <USBH_HID_EventCallback+0x118>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f00e f8a7 	bl	800e6fc <USBH_HID_GetASCIICode>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]
	//disable the touchscreen interrupt functionality when usb transmission starts
	//after tab it calls itself one more time, so disable after i=0
	if (i == 1) {
 80005b2:	4b3e      	ldr	r3, [pc, #248]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d102      	bne.n	80005c0 <USBH_HID_EventCallback+0x30>
		USB_BUSY = 1;
 80005ba:	4b3d      	ldr	r3, [pc, #244]	@ (80006b0 <USBH_HID_EventCallback+0x120>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
	}

	//store incoming chars. ignore null characters that come in for some reason
	if ((key != NULL_CHAR) && (key != SOH)) {
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d015      	beq.n	80005f2 <USBH_HID_EventCallback+0x62>
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d012      	beq.n	80005f2 <USBH_HID_EventCallback+0x62>
		qr_code_data[i][j] = key;
 80005cc:	4b37      	ldr	r3, [pc, #220]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b38      	ldr	r3, [pc, #224]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	4838      	ldr	r0, [pc, #224]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 80005d6:	4613      	mov	r3, r2
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	4403      	add	r3, r0
 80005e2:	440b      	add	r3, r1
 80005e4:	7bfa      	ldrb	r2, [r7, #15]
 80005e6:	701a      	strb	r2, [r3, #0]
		j++;
 80005e8:	4b32      	ldr	r3, [pc, #200]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a31      	ldr	r2, [pc, #196]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005f0:	6013      	str	r3, [r2, #0]
	}
	//handle new line
	if (key == NEWLINE_CHAR) {
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b0a      	cmp	r3, #10
 80005f6:	d107      	bne.n	8000608 <USBH_HID_EventCallback+0x78>
		j = 0;
 80005f8:	4b2e      	ldr	r3, [pc, #184]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
		i++;
 80005fe:	4b2b      	ldr	r3, [pc, #172]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	4a29      	ldr	r2, [pc, #164]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 8000606:	6013      	str	r3, [r2, #0]
	}
	//tab is the end of the qr code
	if (key == TAB) {
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	2b09      	cmp	r3, #9
 800060c:	d147      	bne.n	800069e <USBH_HID_EventCallback+0x10e>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060e:	b672      	cpsid	i
}
 8000610:	bf00      	nop
		__disable_irq();
		//output_protocol(qr_code_data, i + 1);
		//check if the title is (10 chars + newline char) or less
		if (strlen(qr_code_data[0]) < (MAX_TITLE_SIZE + 1)) {
 8000612:	4829      	ldr	r0, [pc, #164]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 8000614:	f7ff fdec 	bl	80001f0 <strlen>
 8000618:	4603      	mov	r3, r0
 800061a:	2b0a      	cmp	r3, #10
 800061c:	d839      	bhi.n	8000692 <USBH_HID_EventCallback+0x102>
//			printf("%s", qr_code_data[3]);
//			printf("%s", qr_code_data[4]);
//			printf("%s", qr_code_data[5]);


			uint8_t freeSectorNumber = getFreeSector();
 800061e:	f000 febc 	bl	800139a <getFreeSector>
 8000622:	4603      	mov	r3, r0
 8000624:	73bb      	strb	r3, [r7, #14]
			//printf("free sector is %d\n", freeSectorNumber);
			//only store the protocol if all memory isnt full
			if (freeSectorNumber <= 10) { //i only got 10 pages rn
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	2b0a      	cmp	r3, #10
 800062a:	d82d      	bhi.n	8000688 <USBH_HID_EventCallback+0xf8>
				//printf("why\n");
				storeProtocol(qr_code_data, freeSectorNumber);
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	4619      	mov	r1, r3
 8000630:	4821      	ldr	r0, [pc, #132]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 8000632:	f000 fcc5 	bl	8000fc0 <storeProtocol>
				//go to the page num the new protocol is on
				pageNum = freeSectorNumber;
 8000636:	4a21      	ldr	r2, [pc, #132]	@ (80006bc <USBH_HID_EventCallback+0x12c>)
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	7013      	strb	r3, [r2, #0]
				DrawMainPage(pageNum);
 800063c:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <USBH_HID_EventCallback+0x12c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f000 ff5d 	bl	8001500 <DrawMainPage>
				currentPage = PAGE_MAIN;
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <USBH_HID_EventCallback+0x130>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
				for (int a=0; a<MAX_LINES; a++) {
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
 8000650:	e017      	b.n	8000682 <USBH_HID_EventCallback+0xf2>
					for(int b=0; b<MAX_LINE_LENGTH; b++) {
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
 8000656:	e00e      	b.n	8000676 <USBH_HID_EventCallback+0xe6>
						qr_code_data[a][b] = '\0';
 8000658:	4917      	ldr	r1, [pc, #92]	@ (80006b8 <USBH_HID_EventCallback+0x128>)
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	4613      	mov	r3, r2
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	1a9b      	subs	r3, r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	18ca      	adds	r2, r1, r3
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	4413      	add	r3, r2
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
					for(int b=0; b<MAX_LINE_LENGTH; b++) {
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	3301      	adds	r3, #1
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	2b1c      	cmp	r3, #28
 800067a:	dded      	ble.n	8000658 <USBH_HID_EventCallback+0xc8>
				for (int a=0; a<MAX_LINES; a++) {
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3301      	adds	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2b63      	cmp	r3, #99	@ 0x63
 8000686:	dde4      	ble.n	8000652 <USBH_HID_EventCallback+0xc2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000688:	b662      	cpsie	i
}
 800068a:	bf00      	nop
					}
				}

			}
			__enable_irq();
			USB_BUSY = 0;
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <USBH_HID_EventCallback+0x120>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
		}
		i = 0;
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <USBH_HID_EventCallback+0x11c>)
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
		j = 0;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <USBH_HID_EventCallback+0x124>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
	}

}
 800069e:	bf00      	nop
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20001024 	.word	0x20001024
 80006ac:	200004c4 	.word	0x200004c4
 80006b0:	200004cc 	.word	0x200004cc
 80006b4:	200004c8 	.word	0x200004c8
 80006b8:	200004d0 	.word	0x200004d0
 80006bc:	200000ea 	.word	0x200000ea
 80006c0:	200004c1 	.word	0x200004c1

080006c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006ca:	f004 f893 	bl	80047f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006ce:	f000 f84b 	bl	8000768 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006d2:	f000 fadd 	bl	8000c90 <MX_GPIO_Init>
	MX_CRC_Init();
 80006d6:	f000 f8b1 	bl	800083c <MX_CRC_Init>
	MX_DMA2D_Init();
 80006da:	f000 f8c3 	bl	8000864 <MX_DMA2D_Init>
	MX_FMC_Init();
 80006de:	f000 fa87 	bl	8000bf0 <MX_FMC_Init>
	MX_I2C3_Init();
 80006e2:	f000 f8f1 	bl	80008c8 <MX_I2C3_Init>
	MX_LTDC_Init();
 80006e6:	f000 f92f 	bl	8000948 <MX_LTDC_Init>
	MX_SPI5_Init();
 80006ea:	f000 f9ad 	bl	8000a48 <MX_SPI5_Init>
	MX_TIM1_Init();
 80006ee:	f000 f9e1 	bl	8000ab4 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80006f2:	f000 fa53 	bl	8000b9c <MX_USART1_UART_Init>
	MX_USB_HOST_Init();
 80006f6:	f00f ffd9 	bl	80106ac <MX_USB_HOST_Init>
	MX_TIM10_Init();
 80006fa:	f000 fa2b 	bl	8000b54 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	printf("USB and Touchscreen Test\n");
 80006fe:	4816      	ldr	r0, [pc, #88]	@ (8000758 <main+0x94>)
 8000700:	f010 fcd4 	bl	80110ac <puts>
//	erase_sector(6);
//	erase_sector(7);
//	erase_sector(8);
//	erase_sector(9);
//	erase_sector(10);
	printf("Flash memory storage done\n");
 8000704:	4815      	ldr	r0, [pc, #84]	@ (800075c <main+0x98>)
 8000706:	f010 fcd1 	bl	80110ac <puts>
	char title[10] = "";
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	809a      	strh	r2, [r3, #4]
//	strcpy(buttons[1].label, title);
//	read_from_flash(title, get_sector_address(3));
//	strcpy(buttons[2].label, title);

	/******* TOUCHSCREEN **********/
	BSP_LCD_Init();
 8000718:	f003 f912 	bl	8003940 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER);
 800071c:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000720:	2000      	movs	r0, #0
 8000722:	f003 f98f 	bl	8003a44 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	f003 fa3b 	bl	8003ba4 <BSP_LCD_Clear>
	Touch_Init();
 800072e:	f000 febf 	bl	80014b0 <Touch_Init>

	/******** START PROGRAM ************/
	DrawMainPage(1);
 8000732:	2001      	movs	r0, #1
 8000734:	f000 fee4 	bl	8001500 <DrawMainPage>
	HAL_TIM_Base_Start_IT(&htim10);   //start Interrupt Timer
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <main+0x9c>)
 800073a:	f00a ff15 	bl	800b568 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 800073e:	f00f ffdb 	bl	80106f8 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */

		if (checkTouchFlag) {
 8000742:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <main+0xa0>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d0f9      	beq.n	800073e <main+0x7a>
			HandleTouch();
 800074a:	f001 f935 	bl	80019b8 <HandleTouch>
			checkTouchFlag = 0;
 800074e:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <main+0xa0>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
		MX_USB_HOST_Process();
 8000754:	e7f3      	b.n	800073e <main+0x7a>
 8000756:	bf00      	nop
 8000758:	08012054 	.word	0x08012054
 800075c:	08012070 	.word	0x08012070
 8000760:	200003f0 	.word	0x200003f0
 8000764:	200004c0 	.word	0x200004c0

08000768 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	@ 0x50
 800076c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2230      	movs	r2, #48	@ 0x30
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f010 fd98 	bl	80112ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <SystemClock_Config+0xcc>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	4a27      	ldr	r2, [pc, #156]	@ (8000834 <SystemClock_Config+0xcc>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	@ 0x40
 800079c:	4b25      	ldr	r3, [pc, #148]	@ (8000834 <SystemClock_Config+0xcc>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <SystemClock_Config+0xd0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a21      	ldr	r2, [pc, #132]	@ (8000838 <SystemClock_Config+0xd0>)
 80007b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <SystemClock_Config+0xd0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c4:	2301      	movs	r3, #1
 80007c6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80007d8:	2308      	movs	r3, #8
 80007da:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80007dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007e0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e6:	2307      	movs	r3, #7
 80007e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	4618      	mov	r0, r3
 80007f0:	f009 f948 	bl	8009a84 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x96>
		Error_Handler();
 80007fa:	f001 fb9b 	bl	8001f34 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800080e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2105      	movs	r1, #5
 800081c:	4618      	mov	r0, r3
 800081e:	f009 fba9 	bl	8009f74 <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xc4>
		Error_Handler();
 8000828:	f001 fb84 	bl	8001f34 <Error_Handler>
	}
}
 800082c:	bf00      	nop
 800082e:	3750      	adds	r7, #80	@ 0x50
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_CRC_Init+0x20>)
 8000842:	4a07      	ldr	r2, [pc, #28]	@ (8000860 <MX_CRC_Init+0x24>)
 8000844:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_CRC_Init+0x20>)
 8000848:	f004 f91c 	bl	8004a84 <HAL_CRC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_CRC_Init+0x1a>
		Error_Handler();
 8000852:	f001 fb6f 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000020c 	.word	0x2000020c
 8000860:	40023000 	.word	0x40023000

08000864 <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_DMA2D_Init+0x5c>)
 800086a:	4a16      	ldr	r2, [pc, #88]	@ (80008c4 <MX_DMA2D_Init+0x60>)
 800086c:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_DMA2D_Init+0x5c>)
 8000870:	2200      	movs	r2, #0
 8000872:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_DMA2D_Init+0x5c>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_DMA2D_Init+0x5c>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_DMA2D_Init+0x5c>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_DMA2D_Init+0x5c>)
 8000888:	2200      	movs	r2, #0
 800088a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_DMA2D_Init+0x5c>)
 800088e:	2200      	movs	r2, #0
 8000890:	631a      	str	r2, [r3, #48]	@ 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <MX_DMA2D_Init+0x5c>)
 8000894:	2200      	movs	r2, #0
 8000896:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8000898:	4809      	ldr	r0, [pc, #36]	@ (80008c0 <MX_DMA2D_Init+0x5c>)
 800089a:	f004 facd 	bl	8004e38 <HAL_DMA2D_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_DMA2D_Init+0x44>
		Error_Handler();
 80008a4:	f001 fb46 	bl	8001f34 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 80008a8:	2101      	movs	r1, #1
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_DMA2D_Init+0x5c>)
 80008ac:	f004 fd32 	bl	8005314 <HAL_DMA2D_ConfigLayer>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_DMA2D_Init+0x56>
		Error_Handler();
 80008b6:	f001 fb3d 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000214 	.word	0x20000214
 80008c4:	4002b000 	.word	0x4002b000

080008c8 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_I2C3_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000940 <MX_I2C3_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <MX_I2C3_Init+0x74>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000944 <MX_I2C3_Init+0x7c>)
 80008d6:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008d8:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_I2C3_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 80008de:	4b17      	ldr	r3, [pc, #92]	@ (800093c <MX_I2C3_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e4:	4b15      	ldr	r3, [pc, #84]	@ (800093c <MX_I2C3_Init+0x74>)
 80008e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ea:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b13      	ldr	r3, [pc, #76]	@ (800093c <MX_I2C3_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 80008f2:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_I2C3_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f8:	4b10      	ldr	r3, [pc, #64]	@ (800093c <MX_I2C3_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_I2C3_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000904:	480d      	ldr	r0, [pc, #52]	@ (800093c <MX_I2C3_Init+0x74>)
 8000906:	f007 fc4d 	bl	80081a4 <HAL_I2C_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_I2C3_Init+0x4c>
		Error_Handler();
 8000910:	f001 fb10 	bl	8001f34 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 8000914:	2100      	movs	r1, #0
 8000916:	4809      	ldr	r0, [pc, #36]	@ (800093c <MX_I2C3_Init+0x74>)
 8000918:	f008 fca6 	bl	8009268 <HAL_I2CEx_ConfigAnalogFilter>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_I2C3_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000922:	f001 fb07 	bl	8001f34 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8000926:	2100      	movs	r1, #0
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_I2C3_Init+0x74>)
 800092a:	f008 fcd9 	bl	80092e0 <HAL_I2CEx_ConfigDigitalFilter>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_I2C3_Init+0x70>
		Error_Handler();
 8000934:	f001 fafe 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000254 	.word	0x20000254
 8000940:	40005c00 	.word	0x40005c00
 8000944:	000186a0 	.word	0x000186a0

08000948 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	@ 0x38
 800094c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2234      	movs	r2, #52	@ 0x34
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f010 fca9 	bl	80112ac <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 800095a:	4b39      	ldr	r3, [pc, #228]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 800095c:	4a39      	ldr	r2, [pc, #228]	@ (8000a44 <MX_LTDC_Init+0xfc>)
 800095e:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000960:	4b37      	ldr	r3, [pc, #220]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000966:	4b36      	ldr	r3, [pc, #216]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800096c:	4b34      	ldr	r3, [pc, #208]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000972:	4b33      	ldr	r3, [pc, #204]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 9;
 8000978:	4b31      	ldr	r3, [pc, #196]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 800097a:	2209      	movs	r2, #9
 800097c:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 1;
 800097e:	4b30      	ldr	r3, [pc, #192]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 8000980:	2201      	movs	r2, #1
 8000982:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 29;
 8000984:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 8000986:	221d      	movs	r2, #29
 8000988:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 3;
 800098a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 800098c:	2203      	movs	r2, #3
 800098e:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 269;
 8000990:	4b2b      	ldr	r3, [pc, #172]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 8000992:	f240 120d 	movw	r2, #269	@ 0x10d
 8000996:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 323;
 8000998:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 800099a:	f240 1243 	movw	r2, #323	@ 0x143
 800099e:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 279;
 80009a0:	4b27      	ldr	r3, [pc, #156]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 80009a2:	f240 1217 	movw	r2, #279	@ 0x117
 80009a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 327;
 80009a8:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 80009aa:	f240 1247 	movw	r2, #327	@ 0x147
 80009ae:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80009b0:	4b23      	ldr	r3, [pc, #140]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80009b8:	4b21      	ldr	r3, [pc, #132]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 80009c8:	481d      	ldr	r0, [pc, #116]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 80009ca:	f008 fcc9 	bl	8009360 <HAL_LTDC_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_LTDC_Init+0x90>
		Error_Handler();
 80009d4:	f001 faae 	bl	8001f34 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 240;
 80009dc:	23f0      	movs	r3, #240	@ 0xf0
 80009de:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 320;
 80009e4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009e8:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009ea:	2302      	movs	r3, #2
 80009ec:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 80009ee:	23ff      	movs	r3, #255	@ 0xff
 80009f0:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009fa:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009fc:	2307      	movs	r3, #7
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.FBStartAdress = 0xD0000000;
 8000a00:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.ImageWidth = 240;
 8000a06:	23f0      	movs	r3, #240	@ 0xf0
 8000a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg.ImageHeight = 320;
 8000a0a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a0e:	633b      	str	r3, [r7, #48]	@ 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	pLayerCfg.Backcolor.Green = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	pLayerCfg.Backcolor.Red = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2200      	movs	r2, #0
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_LTDC_Init+0xf8>)
 8000a2a:	f008 fe2b 	bl	8009684 <HAL_LTDC_ConfigLayer>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_LTDC_Init+0xf0>
		Error_Handler();
 8000a34:	f001 fa7e 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3738      	adds	r7, #56	@ 0x38
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200002a8 	.word	0x200002a8
 8000a44:	40016800 	.word	0x40016800

08000a48 <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <MX_SPI5_Init+0x64>)
 8000a4e:	4a18      	ldr	r2, [pc, #96]	@ (8000ab0 <MX_SPI5_Init+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a52:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <MX_SPI5_Init+0x64>)
 8000a54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a58:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_SPI5_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_SPI5_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_SPI5_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_SPI5_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_SPI5_Init+0x64>)
 8000a74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a78:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_SPI5_Init+0x64>)
 8000a7c:	2218      	movs	r2, #24
 8000a7e:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <MX_SPI5_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a86:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_SPI5_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	@ (8000aac <MX_SPI5_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_SPI5_Init+0x64>)
 8000a94:	220a      	movs	r2, #10
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8000a98:	4804      	ldr	r0, [pc, #16]	@ (8000aac <MX_SPI5_Init+0x64>)
 8000a9a:	f009 ff0e 	bl	800a8ba <HAL_SPI_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_SPI5_Init+0x60>
		Error_Handler();
 8000aa4:	f001 fa46 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000350 	.word	0x20000350
 8000ab0:	40015000 	.word	0x40015000

08000ab4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_TIM1_Init+0x98>)
 8000ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b50 <MX_TIM1_Init+0x9c>)
 8000ad4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 167;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <MX_TIM1_Init+0x98>)
 8000ad8:	22a7      	movs	r2, #167	@ 0xa7
 8000ada:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <MX_TIM1_Init+0x98>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_TIM1_Init+0x98>)
 8000ae4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ae8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_TIM1_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_TIM1_Init+0x98>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_TIM1_Init+0x98>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000afc:	4813      	ldr	r0, [pc, #76]	@ (8000b4c <MX_TIM1_Init+0x98>)
 8000afe:	f00a fce3 	bl	800b4c8 <HAL_TIM_Base_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM1_Init+0x58>
		Error_Handler();
 8000b08:	f001 fa14 	bl	8001f34 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b10:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	4619      	mov	r1, r3
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <MX_TIM1_Init+0x98>)
 8000b1a:	f00a fe85 	bl	800b828 <HAL_TIM_ConfigClockSource>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0x74>
		Error_Handler();
 8000b24:	f001 fa06 	bl	8001f34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b30:	463b      	mov	r3, r7
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_TIM1_Init+0x98>)
 8000b36:	f00b f8ad 	bl	800bc94 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000b40:	f001 f9f8 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200003a8 	.word	0x200003a8
 8000b50:	40010000 	.word	0x40010000

08000b54 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_TIM10_Init+0x40>)
 8000b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b98 <MX_TIM10_Init+0x44>)
 8000b5c:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 1680 - 1;
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <MX_TIM10_Init+0x40>)
 8000b60:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000b64:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <MX_TIM10_Init+0x40>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 10000;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_TIM10_Init+0x40>)
 8000b6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000b72:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <MX_TIM10_Init+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_TIM10_Init+0x40>)
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <MX_TIM10_Init+0x40>)
 8000b82:	f00a fca1 	bl	800b4c8 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM10_Init+0x3c>
		Error_Handler();
 8000b8c:	f001 f9d2 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200003f0 	.word	0x200003f0
 8000b98:	40014400 	.word	0x40014400

08000b9c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	@ (8000bec <MX_USART1_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_USART1_UART_Init+0x4c>)
 8000bd4:	f00b f8ee 	bl	800bdb4 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000bde:	f001 f9a9 	bl	8001f34 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000438 	.word	0x20000438
 8000bec:	40011000 	.word	0x40011000

08000bf0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	615a      	str	r2, [r3, #20]
 8000c06:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <MX_FMC_Init+0x98>)
 8000c0a:	4a20      	ldr	r2, [pc, #128]	@ (8000c8c <MX_FMC_Init+0x9c>)
 8000c0c:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c88 <MX_FMC_Init+0x98>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c14:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <MX_FMC_Init+0x98>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <MX_FMC_Init+0x98>)
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c20:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <MX_FMC_Init+0x98>)
 8000c22:	2210      	movs	r2, #16
 8000c24:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c26:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <MX_FMC_Init+0x98>)
 8000c28:	2240      	movs	r2, #64	@ 0x40
 8000c2a:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <MX_FMC_Init+0x98>)
 8000c2e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000c32:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_FMC_Init+0x98>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <MX_FMC_Init+0x98>)
 8000c3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c40:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_FMC_Init+0x98>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_FMC_Init+0x98>)
 8000c4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8000c54:	2307      	movs	r3, #7
 8000c56:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8000c60:	2303      	movs	r3, #3
 8000c62:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_FMC_Init+0x98>)
 8000c72:	f009 fd91 	bl	800a798 <HAL_SDRAM_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_FMC_Init+0x90>
		Error_Handler();
 8000c7c:	f001 f95a 	bl	8001f34 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000480 	.word	0x20000480
 8000c8c:	a0000140 	.word	0xa0000140

08000c90 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	@ 0x38
 8000c94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
 8000caa:	4b7b      	ldr	r3, [pc, #492]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a7a      	ldr	r2, [pc, #488]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b78      	ldr	r3, [pc, #480]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	623b      	str	r3, [r7, #32]
 8000cc0:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	4b74      	ldr	r3, [pc, #464]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a73      	ldr	r2, [pc, #460]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000ccc:	f043 0320 	orr.w	r3, r3, #32
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b71      	ldr	r3, [pc, #452]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0320 	and.w	r3, r3, #32
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	4b6d      	ldr	r3, [pc, #436]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a6c      	ldr	r2, [pc, #432]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b6a      	ldr	r3, [pc, #424]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	4b66      	ldr	r3, [pc, #408]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a65      	ldr	r2, [pc, #404]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b63      	ldr	r3, [pc, #396]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b5c      	ldr	r3, [pc, #368]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b58      	ldr	r3, [pc, #352]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a57      	ldr	r2, [pc, #348]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b55      	ldr	r3, [pc, #340]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	4b51      	ldr	r3, [pc, #324]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a50      	ldr	r2, [pc, #320]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a49      	ldr	r2, [pc, #292]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b47      	ldr	r3, [pc, #284]	@ (8000e98 <MX_GPIO_Init+0x208>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin,
 8000d86:	2200      	movs	r2, #0
 8000d88:	2116      	movs	r1, #22
 8000d8a:	4844      	ldr	r0, [pc, #272]	@ (8000e9c <MX_GPIO_Init+0x20c>)
 8000d8c:	f005 f8bc 	bl	8005f08 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2180      	movs	r1, #128	@ 0x80
 8000d94:	4842      	ldr	r0, [pc, #264]	@ (8000ea0 <MX_GPIO_Init+0x210>)
 8000d96:	f005 f8b7 	bl	8005f08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin | WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000da0:	4840      	ldr	r0, [pc, #256]	@ (8000ea4 <MX_GPIO_Init+0x214>)
 8000da2:	f005 f8b1 	bl	8005f08 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin | LD4_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000dac:	483e      	ldr	r0, [pc, #248]	@ (8000ea8 <MX_GPIO_Init+0x218>)
 8000dae:	f005 f8ab 	bl	8005f08 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 8000db2:	2316      	movs	r3, #22
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4834      	ldr	r0, [pc, #208]	@ (8000e9c <MX_GPIO_Init+0x20c>)
 8000dca:	f004 fde5 	bl	8005998 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 8000dce:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dd4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	482e      	ldr	r0, [pc, #184]	@ (8000ea0 <MX_GPIO_Init+0x210>)
 8000de6:	f004 fdd7 	bl	8005998 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000dea:	2380      	movs	r3, #128	@ 0x80
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4827      	ldr	r0, [pc, #156]	@ (8000ea0 <MX_GPIO_Init+0x210>)
 8000e02:	f004 fdc9 	bl	8005998 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e06:	2320      	movs	r3, #32
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e0a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4820      	ldr	r0, [pc, #128]	@ (8000e9c <MX_GPIO_Init+0x20c>)
 8000e1c:	f004 fdbc 	bl	8005998 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e20:	2304      	movs	r3, #4
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e30:	4619      	mov	r1, r3
 8000e32:	481e      	ldr	r0, [pc, #120]	@ (8000eac <MX_GPIO_Init+0x21c>)
 8000e34:	f004 fdb0 	bl	8005998 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8000e38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4815      	ldr	r0, [pc, #84]	@ (8000ea4 <MX_GPIO_Init+0x214>)
 8000e4e:	f004 fda3 	bl	8005998 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin | WRX_DCX_Pin;
 8000e52:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480e      	ldr	r0, [pc, #56]	@ (8000ea4 <MX_GPIO_Init+0x214>)
 8000e6c:	f004 fd94 	bl	8005998 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin;
 8000e70:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	4807      	ldr	r0, [pc, #28]	@ (8000ea8 <MX_GPIO_Init+0x218>)
 8000e8a:	f004 fd85 	bl	8005998 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e8e:	bf00      	nop
 8000e90:	3738      	adds	r7, #56	@ 0x38
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	40021800 	.word	0x40021800
 8000eac:	40020400 	.word	0x40020400

08000eb0 <_write>:
void output_protocol(char line[MAX_LINES][MAX_LINE_LENGTH], int lines) {
	for (int i = 0; i < lines; i++) {
		printf("%s\n", line[i]);
	}
}
int _write(int file, char *ptr, int len) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <_write+0x28>)
 8000ec8:	f00a ffc4 	bl	800be54 <HAL_UART_Transmit>
	return len;
 8000ecc:	687b      	ldr	r3, [r7, #4]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000438 	.word	0x20000438

08000edc <erase_sector>:
/**
 * @brief: Erase the memory from an entire sector
 * @param Sector: The sector number
 * @retval: none
 */
void erase_sector(uint32_t Sector) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();  // Unlock flash to enable erasing
 8000ee4:	f004 fb98 	bl	8005618 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(sector_mapping(Sector), VOLTAGE_RANGE_3);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 ffa9 	bl	8001e40 <sector_mapping>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f004 fd02 	bl	80058fc <FLASH_Erase_Sector>
	HAL_FLASH_Lock();  // Lock flash after erasing
 8000ef8:	f004 fbb0 	bl	800565c <HAL_FLASH_Lock>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <write_to_flash>:
 * @param flash_address: address of string in flash memory that will be stored
 * @retval: none
 * Note: PLEASE UNLOCK AND LOCK FLASH BEFORE AND AFTER USING THIS FUNCTION
 * IT DOES NOT DO IT ITSELF
 */
void write_to_flash(const char *data, uint32_t flash_address) {
 8000f04:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8000f08:	b085      	sub	sp, #20
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();  // Unlock flash for writing

	for (uint8_t i = 0; i < strlen(data); i++) {
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e012      	b.n	8000f3c <write_to_flash+0x38>
		//printf("%c", data[i]);
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flash_address + i, data[i]); // Write to flash
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	18d1      	adds	r1, r2, r3
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2200      	movs	r2, #0
 8000f28:	4698      	mov	r8, r3
 8000f2a:	4691      	mov	r9, r2
 8000f2c:	4642      	mov	r2, r8
 8000f2e:	464b      	mov	r3, r9
 8000f30:	2000      	movs	r0, #0
 8000f32:	f004 fb1d 	bl	8005570 <HAL_FLASH_Program>
	for (uint8_t i = 0; i < strlen(data); i++) {
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	7bfc      	ldrb	r4, [r7, #15]
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff f956 	bl	80001f0 <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	429c      	cmp	r4, r3
 8000f48:	d3e5      	bcc.n	8000f16 <write_to_flash+0x12>
	}

	//HAL_FLASH_Lock();  // Lock flash after writing
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08000f56 <read_from_flash>:
 * @param flash_address: address of string in flash memory that will be read
 * @retval: failure if its reading trash from flash memory.
 * it literally does not read from flash btw if it detects 0xFF at the start
 * that means your output buffer will not be updated
 */
uint8_t read_from_flash(char *output, uint32_t flash_address) {
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
	// Read byte by byte from flash memory, get a whole string in output variable
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	e014      	b.n	8000f90 <read_from_flash+0x3a>
		char key = *(char*) (flash_address + i);
 8000f66:	7bfa      	ldrb	r2, [r7, #15]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	73bb      	strb	r3, [r7, #14]
		//if the first character in string is 0xFF, return a failure
		if (key == 0xFF) {
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	2bff      	cmp	r3, #255	@ 0xff
 8000f74:	d104      	bne.n	8000f80 <read_from_flash+0x2a>
			if (i == 0) {
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d106      	bne.n	8000f8a <read_from_flash+0x34>
				return 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e01b      	b.n	8000fb8 <read_from_flash+0x62>
			}
		} else {
//			if (key != TAB) {
//				output[i] = key; //flash address gets type casted and then dereferenced
//			}
			output[i] = key; //flash address gets type casted and then dereferenced
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	7bba      	ldrb	r2, [r7, #14]
 8000f88:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MAX_LINE_LENGTH; i++) {
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b1c      	cmp	r3, #28
 8000f94:	d9e7      	bls.n	8000f66 <read_from_flash+0x10>
		}
	}
	output[strlen(output)] = '\0'; //add null to the end of string for printing
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff f92a 	bl	80001f0 <strlen>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
	//printf("output is %s and strlen: %d\n", output, strlen(output));

	//error handling. G-codes are less than 32 chars, anything more is trash
	if (strlen(output) < MAX_LINE_LENGTH) {
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff f922 	bl	80001f0 <strlen>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b1c      	cmp	r3, #28
 8000fb0:	d801      	bhi.n	8000fb6 <read_from_flash+0x60>
		return 1;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <read_from_flash+0x62>
	} else {
		return 0;
 8000fb6:	2300      	movs	r3, #0
	}

}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <storeProtocol>:
 * @param gcode_file: array of G-code commands
 * @param sector: which sector to store protocol in
 * @retval: failure if sector is "full"
 */
uint8_t storeProtocol(char new_protocol[MAX_LINES][MAX_LINE_LENGTH],
		uint32_t sector) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	f5ad 5d08 	sub.w	sp, sp, #8704	@ 0x2200
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000fce:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8000fd2:	6018      	str	r0, [r3, #0]
 8000fd4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000fd8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000fdc:	6019      	str	r1, [r3, #0]

	int i = 0;  //protocol in the sector index
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000fe4:	f102 021c 	add.w	r2, r2, #28
 8000fe8:	6013      	str	r3, [r2, #0]
	int j = 0;  //line in the protocol index
 8000fea:	2300      	movs	r3, #0
 8000fec:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8000ff0:	f102 0218 	add.w	r2, r2, #24
 8000ff4:	6013      	str	r3, [r2, #0]
	char protocolStorage[MAX_PROTOCOLS_IN_SECTOR][MAX_LINES][MAX_LINE_LENGTH] = {{{'\0'}}};
 8000ff6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000ffa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000ffe:	4618      	mov	r0, r3
 8001000:	f242 13fc 	movw	r3, #8700	@ 0x21fc
 8001004:	461a      	mov	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	f010 f950 	bl	80112ac <memset>
	//initBuffer(protocolStorage); //init this with 0xFF
	uint32_t flash_address = get_sector_address(sector);
 800100c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001010:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	f000 feab 	bl	8001d70 <get_sector_address>
 800101a:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800101e:	f103 0314 	add.w	r3, r3, #20
 8001022:	6018      	str	r0, [r3, #0]

	//check if sector is full
	uint8_t num_protocols = get_num_protocols_in_sector(sector);
 8001024:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001028:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	f000 f98d 	bl	800134c <get_num_protocols_in_sector>
 8001032:	4603      	mov	r3, r0
 8001034:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001038:	f102 0213 	add.w	r2, r2, #19
 800103c:	7013      	strb	r3, [r2, #0]
	if (num_protocols == MAX_PROTOCOLS_IN_SECTOR) {
 800103e:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001042:	f103 0313 	add.w	r3, r3, #19
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d101      	bne.n	8001050 <storeProtocol+0x90>
		return 0;
 800104c:	2300      	movs	r3, #0
 800104e:	e177      	b.n	8001340 <storeProtocol+0x380>
	}

	//read existing protocols in sector and put into the temp protocol storage
	for (i = 0; i < num_protocols; i++) { //read below. do that for each protocol
 8001050:	2300      	movs	r3, #0
 8001052:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001056:	f102 021c 	add.w	r2, r2, #28
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e063      	b.n	8001126 <storeProtocol+0x166>
		for (j = 0; j < MAX_LINES; j++) {
 800105e:	2300      	movs	r3, #0
 8001060:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001064:	f102 0218 	add.w	r2, r2, #24
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e04a      	b.n	8001102 <storeProtocol+0x142>
			//get the address for the current line in the current protocol
			uint32_t temp_address = flash_address + i * PROTOCOL_SIZE + j * MAX_LINE_LENGTH;
 800106c:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001070:	f103 031c 	add.w	r3, r3, #28
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	4619      	mov	r1, r3
 8001080:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001084:	f103 0318 	add.w	r3, r3, #24
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	440b      	add	r3, r1
 8001096:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 800109a:	f102 0214 	add.w	r2, r2, #20
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80010a6:	f102 0208 	add.w	r2, r2, #8
 80010aa:	6013      	str	r3, [r2, #0]
			//read lines from memory into buffer until you reach garbage
			read_from_flash(protocolStorage[i][j], temp_address); //only updates protocolStorage if its a valid line from memory
 80010ac:	f107 0220 	add.w	r2, r7, #32
 80010b0:	3a14      	subs	r2, #20
 80010b2:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80010b6:	f103 0318 	add.w	r3, r3, #24
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	460b      	mov	r3, r1
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	1a5b      	subs	r3, r3, r1
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	f507 5108 	add.w	r1, r7, #8704	@ 0x2200
 80010ca:	f101 011c 	add.w	r1, r1, #28
 80010ce:	6809      	ldr	r1, [r1, #0]
 80010d0:	f640 3054 	movw	r0, #2900	@ 0xb54
 80010d4:	fb00 f101 	mul.w	r1, r0, r1
 80010d8:	440b      	add	r3, r1
 80010da:	4413      	add	r3, r2
 80010dc:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80010e0:	f102 0208 	add.w	r2, r2, #8
 80010e4:	6811      	ldr	r1, [r2, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff35 	bl	8000f56 <read_from_flash>
		for (j = 0; j < MAX_LINES; j++) {
 80010ec:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80010f0:	f103 0318 	add.w	r3, r3, #24
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80010fc:	f102 0218 	add.w	r2, r2, #24
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001106:	f103 0318 	add.w	r3, r3, #24
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b63      	cmp	r3, #99	@ 0x63
 800110e:	ddad      	ble.n	800106c <storeProtocol+0xac>
	for (i = 0; i < num_protocols; i++) { //read below. do that for each protocol
 8001110:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001114:	f103 031c 	add.w	r3, r3, #28
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001120:	f102 021c 	add.w	r2, r2, #28
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800112a:	f103 0313 	add.w	r3, r3, #19
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001134:	f102 021c 	add.w	r2, r2, #28
 8001138:	6812      	ldr	r2, [r2, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	db8f      	blt.n	800105e <storeProtocol+0x9e>
	}
	//output: we now have the existing protocols in the buffer.
	//they only have their first number of lines in. the rest of lines are null

	//put the new protocol into the temp protocol storage
	for (j = 0; j < MAX_LINES; j++) {
 800113e:	2300      	movs	r3, #0
 8001140:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001144:	f102 0218 	add.w	r2, r2, #24
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e048      	b.n	80011de <storeProtocol+0x21e>
		//copy each line into the buffer from new protocol, should be null terminated from qr scanner
		if (new_protocol[j][0] != '\0') {
 800114c:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001150:	f103 0318 	add.w	r3, r3, #24
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001164:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d02a      	beq.n	80011c8 <storeProtocol+0x208>
			strcpy(protocolStorage[i][j], new_protocol[j]);
 8001172:	f107 0220 	add.w	r2, r7, #32
 8001176:	3a14      	subs	r2, #20
 8001178:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800117c:	f103 0318 	add.w	r3, r3, #24
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	460b      	mov	r3, r1
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	1a5b      	subs	r3, r3, r1
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	f507 5108 	add.w	r1, r7, #8704	@ 0x2200
 8001190:	f101 011c 	add.w	r1, r1, #28
 8001194:	6809      	ldr	r1, [r1, #0]
 8001196:	f640 3054 	movw	r0, #2900	@ 0xb54
 800119a:	fb00 f101 	mul.w	r1, r0, r1
 800119e:	440b      	add	r3, r1
 80011a0:	18d0      	adds	r0, r2, r3
 80011a2:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80011a6:	f103 0318 	add.w	r3, r3, #24
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80011ba:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f010 f8fd 	bl	80113c2 <strcpy>
	for (j = 0; j < MAX_LINES; j++) {
 80011c8:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80011cc:	f103 0318 	add.w	r3, r3, #24
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80011d8:	f102 0218 	add.w	r2, r2, #24
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80011e2:	f103 0318 	add.w	r3, r3, #24
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b63      	cmp	r3, #99	@ 0x63
 80011ea:	ddaf      	ble.n	800114c <storeProtocol+0x18c>




	//write existing protocols and new protocol to flash memory, string-by-string
	erase_sector(sector); //erase sector before writing
 80011ec:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80011f0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80011f4:	6818      	ldr	r0, [r3, #0]
 80011f6:	f7ff fe71 	bl	8000edc <erase_sector>
	HAL_FLASH_Unlock();  // Unlock flash for writing. note: the erase_sector() unlocks and locks itself
 80011fa:	f004 fa0d 	bl	8005618 <HAL_FLASH_Unlock>
	for (i = 0; i < (num_protocols + 1); i++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001204:	f102 021c 	add.w	r2, r2, #28
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e089      	b.n	8001320 <storeProtocol+0x360>
		for (j = 0; j < MAX_LINES; j++) {
 800120c:	2300      	movs	r3, #0
 800120e:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001212:	f102 0218 	add.w	r2, r2, #24
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e070      	b.n	80012fc <storeProtocol+0x33c>
			//if first character of a line is null from qr scanner or trash from flash, ignore it
			if ((new_protocol[j][0] != '\0') && (new_protocol[j][0] != 0xFF)) {
 800121a:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800121e:	f103 0318 	add.w	r3, r3, #24
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001232:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d052      	beq.n	80012e6 <storeProtocol+0x326>
 8001240:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001244:	f103 0318 	add.w	r3, r3, #24
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4613      	mov	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	1a9b      	subs	r3, r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001258:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	4413      	add	r3, r2
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2bff      	cmp	r3, #255	@ 0xff
 8001264:	d03f      	beq.n	80012e6 <storeProtocol+0x326>
				uint32_t temp_address = flash_address + i * PROTOCOL_SIZE + j * MAX_LINE_LENGTH;
 8001266:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800126a:	f103 031c 	add.w	r3, r3, #28
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001274:	fb02 f303 	mul.w	r3, r2, r3
 8001278:	4619      	mov	r1, r3
 800127a:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800127e:	f103 0318 	add.w	r3, r3, #24
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	440b      	add	r3, r1
 8001290:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 8001294:	f102 0214 	add.w	r2, r2, #20
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	4413      	add	r3, r2
 800129c:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80012a0:	f102 020c 	add.w	r2, r2, #12
 80012a4:	6013      	str	r3, [r2, #0]
				//printf("len: %d and data: %s", strlen(protocolStorage[i][j]), protocolStorage[i][j]);
				write_to_flash(protocolStorage[i][j], temp_address);
 80012a6:	f107 0220 	add.w	r2, r7, #32
 80012aa:	3a14      	subs	r2, #20
 80012ac:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80012b0:	f103 0318 	add.w	r3, r3, #24
 80012b4:	6819      	ldr	r1, [r3, #0]
 80012b6:	460b      	mov	r3, r1
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	1a5b      	subs	r3, r3, r1
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	f507 5108 	add.w	r1, r7, #8704	@ 0x2200
 80012c4:	f101 011c 	add.w	r1, r1, #28
 80012c8:	6809      	ldr	r1, [r1, #0]
 80012ca:	f640 3054 	movw	r0, #2900	@ 0xb54
 80012ce:	fb00 f101 	mul.w	r1, r0, r1
 80012d2:	440b      	add	r3, r1
 80012d4:	4413      	add	r3, r2
 80012d6:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80012da:	f102 020c 	add.w	r2, r2, #12
 80012de:	6811      	ldr	r1, [r2, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fe0f 	bl	8000f04 <write_to_flash>
		for (j = 0; j < MAX_LINES; j++) {
 80012e6:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 80012ea:	f103 0318 	add.w	r3, r3, #24
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 80012f6:	f102 0218 	add.w	r2, r2, #24
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001300:	f103 0318 	add.w	r3, r3, #24
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b63      	cmp	r3, #99	@ 0x63
 8001308:	dd87      	ble.n	800121a <storeProtocol+0x25a>
	for (i = 0; i < (num_protocols + 1); i++) {
 800130a:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 800130e:	f103 031c 	add.w	r3, r3, #28
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 800131a:	f102 021c 	add.w	r2, r2, #28
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	f507 5308 	add.w	r3, r7, #8704	@ 0x2200
 8001324:	f103 0313 	add.w	r3, r3, #19
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	f507 5208 	add.w	r2, r7, #8704	@ 0x2200
 800132e:	f102 021c 	add.w	r2, r2, #28
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	f77f af69 	ble.w	800120c <storeProtocol+0x24c>
			}
		}
	}
	HAL_FLASH_Lock();  // Unlock flash for writing
 800133a:	f004 f98f 	bl	800565c <HAL_FLASH_Lock>

	//output:flash memory now has the lines of protocol storage in there
	//the remaining space is still 0xFF in flash
	return 1;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	f507 5708 	add.w	r7, r7, #8704	@ 0x2200
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <get_num_protocols_in_sector>:

//return number of protocols in the sector lol
uint8_t get_num_protocols_in_sector(uint32_t sector) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	uint32_t flash_address = get_sector_address(sector);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 fd0b 	bl	8001d70 <get_sector_address>
 800135a:	6138      	str	r0, [r7, #16]

	uint8_t i = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8001360:	2300      	movs	r3, #0
 8001362:	75fb      	strb	r3, [r7, #23]
 8001364:	e011      	b.n	800138a <get_num_protocols_in_sector+0x3e>
		uint8_t first_char = *(uint8_t*) (flash_address + i * PROTOCOL_SIZE);
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800136c:	fb02 f303 	mul.w	r3, r2, r3
 8001370:	461a      	mov	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	73fb      	strb	r3, [r7, #15]
		//memory in flash is default 0xFF
		if (first_char == 0xFF) {
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	2bff      	cmp	r3, #255	@ 0xff
 800137e:	d101      	bne.n	8001384 <get_num_protocols_in_sector+0x38>
			return i;
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	e006      	b.n	8001392 <get_num_protocols_in_sector+0x46>
	for (i = 0; i < MAX_PROTOCOLS_IN_SECTOR; i++) {
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	3301      	adds	r3, #1
 8001388:	75fb      	strb	r3, [r7, #23]
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d9ea      	bls.n	8001366 <get_num_protocols_in_sector+0x1a>
		}
	}
	return i;
 8001390:	7dfb      	ldrb	r3, [r7, #23]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <getFreeSector>:
	}
}

//check each sector sequentially for any space.
//return the first sector number you find that has space
uint8_t getFreeSector(void) {
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
	uint8_t i = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
	//check every sector starting at 1
	for (i = 1; i < (NUMBER_OF_SECTORS+1); i++) {
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e01f      	b.n	80013ea <getFreeSector+0x50>
		//check each potential protocol slot in the current sector
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	73bb      	strb	r3, [r7, #14]
 80013ae:	e016      	b.n	80013de <getFreeSector+0x44>
			//check first char of the given protocol in the current sector
			uint32_t flash_address = get_sector_address(i) + j * PROTOCOL_SIZE;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fcdc 	bl	8001d70 <get_sector_address>
 80013b8:	4602      	mov	r2, r0
 80013ba:	7bbb      	ldrb	r3, [r7, #14]
 80013bc:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80013c0:	fb01 f303 	mul.w	r3, r1, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
			char first_char = *(char*) (flash_address);
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	71fb      	strb	r3, [r7, #7]
			//if memory address is empty, this sector is free
			if (first_char == 0xFF) {
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2bff      	cmp	r3, #255	@ 0xff
 80013d2:	d101      	bne.n	80013d8 <getFreeSector+0x3e>
				return i;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	e00e      	b.n	80013f6 <getFreeSector+0x5c>
		for (uint8_t j = 0; j < MAX_PROTOCOLS_IN_SECTOR; j++) {
 80013d8:	7bbb      	ldrb	r3, [r7, #14]
 80013da:	3301      	adds	r3, #1
 80013dc:	73bb      	strb	r3, [r7, #14]
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d9e5      	bls.n	80013b0 <getFreeSector+0x16>
	for (i = 1; i < (NUMBER_OF_SECTORS+1); i++) {
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	3301      	adds	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b0e      	cmp	r3, #14
 80013ee:	d9dc      	bls.n	80013aa <getFreeSector+0x10>
			}
		}
	}
	//if somehow all sectors are full, return 15 or higher (16 in this case)
	return i + 1;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b2db      	uxtb	r3, r3
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <transmitProtocol>:

/**
 * @brief: Transmit protocol from flash memory to ESP32 via UART string-by-string
 * @param sector: which sector the protocol is stored in
 */
void transmitProtocol(uint32_t sector, uint32_t offset) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	@ 0x30
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	char output[MAX_LINE_LENGTH] = {'\0'};
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
 800141e:	615a      	str	r2, [r3, #20]
 8001420:	761a      	strb	r2, [r3, #24]
	uint32_t flash_address = get_sector_address(sector) + offset*PROTOCOL_SIZE;
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 fca4 	bl	8001d70 <get_sector_address>
 8001428:	4602      	mov	r2, r0
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001430:	fb01 f303 	mul.w	r3, r1, r3
 8001434:	4413      	add	r3, r2
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28

	//printf("\nNew Protocol\n"); //just for debugging

	//we need to process up to 1028 G-code commands
	//but if we run into an invalid string, gcode file is over
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8001438:	2300      	movs	r3, #0
 800143a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800143e:	e02c      	b.n	800149a <transmitProtocol+0x9a>
		//an alternative to resetting the temp buffer is to only read up to newline
		 memset(output, 0, MAX_LINE_LENGTH); // Sets all elements of buffer to 0
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	221d      	movs	r2, #29
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f00f ff2f 	bl	80112ac <memset>
		if (read_from_flash(output, flash_address + i * MAX_LINE_LENGTH)) {
 800144e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001452:	4613      	mov	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	1a9b      	subs	r3, r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	461a      	mov	r2, r3
 800145e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001460:	441a      	add	r2, r3
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fd74 	bl	8000f56 <read_from_flash>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00d      	beq.n	8001490 <transmitProtocol+0x90>
			//printf("%s", output);
			HAL_UART_Transmit(&huart1, (uint8_t*) output, strlen(output), HAL_MAX_DELAY);
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe feb9 	bl	80001f0 <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	b29a      	uxth	r2, r3
 8001482:	f107 0108 	add.w	r1, r7, #8
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	4808      	ldr	r0, [pc, #32]	@ (80014ac <transmitProtocol+0xac>)
 800148c:	f00a fce2 	bl	800be54 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < MAX_LINES; i++) {
 8001490:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001494:	3301      	adds	r3, #1
 8001496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800149a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800149e:	2b63      	cmp	r3, #99	@ 0x63
 80014a0:	d9ce      	bls.n	8001440 <transmitProtocol+0x40>
		}
	}
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3730      	adds	r7, #48	@ 0x30
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000438 	.word	0x20000438

080014b0 <Touch_Init>:
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, number);
}

/******************** Touchscreen *********************/

void Touch_Init(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	if (BSP_TS_Init(240, 320) != TS_OK) {
 80014b4:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80014b8:	20f0      	movs	r0, #240	@ 0xf0
 80014ba:	f003 f8af 	bl	800461c <BSP_TS_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d009      	beq.n	80014d8 <Touch_Init+0x28>
		BSP_LCD_DisplayStringAt(0, 10, (uint8_t*) "Failure", CENTER_MODE);
 80014c4:	2301      	movs	r3, #1
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <Touch_Init+0x40>)
 80014c8:	210a      	movs	r1, #10
 80014ca:	2000      	movs	r0, #0
 80014cc:	f002 fbd6 	bl	8003c7c <BSP_LCD_DisplayStringAt>
		printf("Touchscreen Initialization failure\n");
 80014d0:	4808      	ldr	r0, [pc, #32]	@ (80014f4 <Touch_Init+0x44>)
 80014d2:	f00f fdeb 	bl	80110ac <puts>
	} else {
		BSP_LCD_DisplayStringAt(0, 300, (uint8_t*) "Success", CENTER_MODE);
		printf("Touchscreen Initialization success\n");
	}
}
 80014d6:	e009      	b.n	80014ec <Touch_Init+0x3c>
		BSP_LCD_DisplayStringAt(0, 300, (uint8_t*) "Success", CENTER_MODE);
 80014d8:	2301      	movs	r3, #1
 80014da:	4a07      	ldr	r2, [pc, #28]	@ (80014f8 <Touch_Init+0x48>)
 80014dc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80014e0:	2000      	movs	r0, #0
 80014e2:	f002 fbcb 	bl	8003c7c <BSP_LCD_DisplayStringAt>
		printf("Touchscreen Initialization success\n");
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <Touch_Init+0x4c>)
 80014e8:	f00f fde0 	bl	80110ac <puts>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	0801208c 	.word	0x0801208c
 80014f4:	08012094 	.word	0x08012094
 80014f8:	080120b8 	.word	0x080120b8
 80014fc:	080120c0 	.word	0x080120c0

08001500 <DrawMainPage>:
/**
 * @brief: Draw main page and handle button label and status updates
 * @param page_num: determines which page should be drawn from 1-10
 *
 */
void DrawMainPage(uint8_t page_num) {
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b0a6      	sub	sp, #152	@ 0x98
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	//Draw "Protocol Title" box
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800150a:	f04f 30ff 	mov.w	r0, #4294967295
 800150e:	f002 fb49 	bl	8003ba4 <BSP_LCD_Clear>
	char empty[20] = "Empty\n"; //strings from flash memory come with newline at end
 8001512:	4a66      	ldr	r2, [pc, #408]	@ (80016ac <DrawMainPage+0x1ac>)
 8001514:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800151c:	6018      	str	r0, [r3, #0]
 800151e:	3304      	adds	r3, #4
 8001520:	8019      	strh	r1, [r3, #0]
 8001522:	3302      	adds	r3, #2
 8001524:	0c0a      	lsrs	r2, r1, #16
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	f107 0387 	add.w	r3, r7, #135	@ 0x87
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	731a      	strb	r2, [r3, #12]
	char pageTitle[20] = "";
 8001536:	2300      	movs	r3, #0
 8001538:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800153a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
	sprintf(pageTitle, "Page %d", page_num);
 8001548:	79fa      	ldrb	r2, [r7, #7]
 800154a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800154e:	4958      	ldr	r1, [pc, #352]	@ (80016b0 <DrawMainPage+0x1b0>)
 8001550:	4618      	mov	r0, r3
 8001552:	f00f fdb3 	bl	80110bc <siprintf>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001556:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800155a:	f002 fad7 	bl	8003b0c <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 800155e:	4855      	ldr	r0, [pc, #340]	@ (80016b4 <DrawMainPage+0x1b4>)
 8001560:	f002 fb06 	bl	8003b70 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001564:	4854      	ldr	r0, [pc, #336]	@ (80016b8 <DrawMainPage+0x1b8>)
 8001566:	f002 fae9 	bl	8003b3c <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) pageTitle, CENTER_MODE);
 800156a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800156e:	2301      	movs	r3, #1
 8001570:	210a      	movs	r1, #10
 8001572:	200a      	movs	r0, #10
 8001574:	f002 fb82 	bl	8003c7c <BSP_LCD_DisplayStringAt>

	//get button label info from flash memory
	char readBuffer1[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001578:	2300      	movs	r3, #0
 800157a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800157c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	615a      	str	r2, [r3, #20]
 800158e:	761a      	strb	r2, [r3, #24]
	char readBuffer2[MAX_LINE_LENGTH] = ""; //initialize with nulls
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001594:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	615a      	str	r2, [r3, #20]
 80015a6:	761a      	strb	r2, [r3, #24]
	char readBuffer3[MAX_LINE_LENGTH] = ""; //initialize with nulls
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
 80015bc:	615a      	str	r2, [r3, #20]
 80015be:	761a      	strb	r2, [r3, #24]
	//if the protocol exists, read from it. else, name it empty
	if (read_from_flash(readBuffer1, get_sector_address(page_num))) {
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fbd4 	bl	8001d70 <get_sector_address>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fcc0 	bl	8000f56 <read_from_flash>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00a      	beq.n	80015f2 <DrawMainPage+0xf2>
		strcpy(buttons[0].label, readBuffer1);
 80015dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015e0:	4619      	mov	r1, r3
 80015e2:	4836      	ldr	r0, [pc, #216]	@ (80016bc <DrawMainPage+0x1bc>)
 80015e4:	f00f feed 	bl	80113c2 <strcpy>
		buttons[0].status = NOT_EMPTY;
 80015e8:	4b35      	ldr	r3, [pc, #212]	@ (80016c0 <DrawMainPage+0x1c0>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80015f0:	e009      	b.n	8001606 <DrawMainPage+0x106>
	} else {
		strcpy(buttons[0].label, empty);
 80015f2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80015f6:	4619      	mov	r1, r3
 80015f8:	4830      	ldr	r0, [pc, #192]	@ (80016bc <DrawMainPage+0x1bc>)
 80015fa:	f00f fee2 	bl	80113c2 <strcpy>
		buttons[0].status = EMPTY;
 80015fe:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <DrawMainPage+0x1c0>)
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	}
	if (read_from_flash(readBuffer2, get_sector_address(page_num) + PROTOCOL_SIZE)) {
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fbb1 	bl	8001d70 <get_sector_address>
 800160e:	4603      	mov	r3, r0
 8001610:	f603 32b8 	addw	r2, r3, #3000	@ 0xbb8
 8001614:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fc9b 	bl	8000f56 <read_from_flash>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00a      	beq.n	800163c <DrawMainPage+0x13c>
		strcpy(buttons[1].label, readBuffer2);
 8001626:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800162a:	4619      	mov	r1, r3
 800162c:	4825      	ldr	r0, [pc, #148]	@ (80016c4 <DrawMainPage+0x1c4>)
 800162e:	f00f fec8 	bl	80113c2 <strcpy>
		buttons[1].status = NOT_EMPTY;
 8001632:	4b23      	ldr	r3, [pc, #140]	@ (80016c0 <DrawMainPage+0x1c0>)
 8001634:	2201      	movs	r2, #1
 8001636:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 800163a:	e009      	b.n	8001650 <DrawMainPage+0x150>
	} else {
		strcpy(buttons[1].label, empty);
 800163c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001640:	4619      	mov	r1, r3
 8001642:	4820      	ldr	r0, [pc, #128]	@ (80016c4 <DrawMainPage+0x1c4>)
 8001644:	f00f febd 	bl	80113c2 <strcpy>
		buttons[1].status = EMPTY;
 8001648:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <DrawMainPage+0x1c0>)
 800164a:	2200      	movs	r2, #0
 800164c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}
	if (read_from_flash(readBuffer3, get_sector_address(page_num) + 2 * PROTOCOL_SIZE)) {
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fb8c 	bl	8001d70 <get_sector_address>
 8001658:	4603      	mov	r3, r0
 800165a:	f503 53bb 	add.w	r3, r3, #5984	@ 0x1760
 800165e:	3310      	adds	r3, #16
 8001660:	f107 020c 	add.w	r2, r7, #12
 8001664:	4619      	mov	r1, r3
 8001666:	4610      	mov	r0, r2
 8001668:	f7ff fc75 	bl	8000f56 <read_from_flash>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00a      	beq.n	8001688 <DrawMainPage+0x188>
		strcpy(buttons[2].label, readBuffer3);
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	4619      	mov	r1, r3
 8001678:	4813      	ldr	r0, [pc, #76]	@ (80016c8 <DrawMainPage+0x1c8>)
 800167a:	f00f fea2 	bl	80113c2 <strcpy>
		buttons[2].status = NOT_EMPTY;
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <DrawMainPage+0x1c0>)
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001686:	e009      	b.n	800169c <DrawMainPage+0x19c>
	} else {
		strcpy(buttons[2].label, empty);
 8001688:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800168c:	4619      	mov	r1, r3
 800168e:	480e      	ldr	r0, [pc, #56]	@ (80016c8 <DrawMainPage+0x1c8>)
 8001690:	f00f fe97 	bl	80113c2 <strcpy>
		buttons[2].status = EMPTY;
 8001694:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <DrawMainPage+0x1c0>)
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
	}

	// Draw buttons
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800169c:	480b      	ldr	r0, [pc, #44]	@ (80016cc <DrawMainPage+0x1cc>)
 800169e:	f002 fa35 	bl	8003b0c <BSP_LCD_SetTextColor>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80016a8:	e07e      	b.n	80017a8 <DrawMainPage+0x2a8>
 80016aa:	bf00      	nop
 80016ac:	080120ec 	.word	0x080120ec
 80016b0:	080120e4 	.word	0x080120e4
 80016b4:	20000160 	.word	0x20000160
 80016b8:	ffff0000 	.word	0xffff0000
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000000 	.word	0x20000000
 80016c4:	2000002e 	.word	0x2000002e
 80016c8:	20000054 	.word	0x20000054
 80016cc:	ff0000ff 	.word	0xff0000ff
		BSP_LCD_FillRect(buttons[i].x, buttons[i].y, buttons[i].w,
 80016d0:	4a5c      	ldr	r2, [pc, #368]	@ (8001844 <DrawMainPage+0x344>)
 80016d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016d6:	2126      	movs	r1, #38	@ 0x26
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	4413      	add	r3, r2
 80016de:	8818      	ldrh	r0, [r3, #0]
 80016e0:	4a58      	ldr	r2, [pc, #352]	@ (8001844 <DrawMainPage+0x344>)
 80016e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016e6:	2126      	movs	r1, #38	@ 0x26
 80016e8:	fb01 f303 	mul.w	r3, r1, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	3302      	adds	r3, #2
 80016f0:	8819      	ldrh	r1, [r3, #0]
 80016f2:	4a54      	ldr	r2, [pc, #336]	@ (8001844 <DrawMainPage+0x344>)
 80016f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80016f8:	2426      	movs	r4, #38	@ 0x26
 80016fa:	fb04 f303 	mul.w	r3, r4, r3
 80016fe:	4413      	add	r3, r2
 8001700:	3304      	adds	r3, #4
 8001702:	881a      	ldrh	r2, [r3, #0]
 8001704:	4c4f      	ldr	r4, [pc, #316]	@ (8001844 <DrawMainPage+0x344>)
 8001706:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800170a:	2526      	movs	r5, #38	@ 0x26
 800170c:	fb05 f303 	mul.w	r3, r5, r3
 8001710:	4423      	add	r3, r4
 8001712:	3306      	adds	r3, #6
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f002 fb6f 	bl	8003df8 <BSP_LCD_FillRect>
				buttons[i].h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800171a:	f04f 30ff 	mov.w	r0, #4294967295
 800171e:	f002 f9f5 	bl	8003b0c <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001722:	4849      	ldr	r0, [pc, #292]	@ (8001848 <DrawMainPage+0x348>)
 8001724:	f002 fa0a 	bl	8003b3c <BSP_LCD_SetBackColor>
		//printf("button %d len is %d\n", i, strlen(buttons[i].label));
		//printf("%s", buttons[i].label);
		if (buttons[i].label[10] == NEWLINE_CHAR) {
		}
		buttons[i].label[strlen(buttons[i].label) - 1] = ' '; //dont display null terminator
 8001728:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800172c:	2226      	movs	r2, #38	@ 0x26
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	3308      	adds	r3, #8
 8001734:	4a43      	ldr	r2, [pc, #268]	@ (8001844 <DrawMainPage+0x344>)
 8001736:	4413      	add	r3, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fd59 	bl	80001f0 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	3b01      	subs	r3, #1
 8001742:	4940      	ldr	r1, [pc, #256]	@ (8001844 <DrawMainPage+0x344>)
 8001744:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001748:	2026      	movs	r0, #38	@ 0x26
 800174a:	fb00 f202 	mul.w	r2, r0, r2
 800174e:	440a      	add	r2, r1
 8001750:	4413      	add	r3, r2
 8001752:	3308      	adds	r3, #8
 8001754:	2220      	movs	r2, #32
 8001756:	701a      	strb	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(buttons[i].x + 10, buttons[i].y + 10,
 8001758:	4a3a      	ldr	r2, [pc, #232]	@ (8001844 <DrawMainPage+0x344>)
 800175a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800175e:	2126      	movs	r1, #38	@ 0x26
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	330a      	adds	r3, #10
 800176a:	b298      	uxth	r0, r3
 800176c:	4a35      	ldr	r2, [pc, #212]	@ (8001844 <DrawMainPage+0x344>)
 800176e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001772:	2126      	movs	r1, #38	@ 0x26
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	3302      	adds	r3, #2
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	330a      	adds	r3, #10
 8001780:	b299      	uxth	r1, r3
				(uint8_t*) buttons[i].label, LEFT_MODE);
 8001782:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001786:	2226      	movs	r2, #38	@ 0x26
 8001788:	fb02 f303 	mul.w	r3, r2, r3
 800178c:	3308      	adds	r3, #8
 800178e:	4a2d      	ldr	r2, [pc, #180]	@ (8001844 <DrawMainPage+0x344>)
 8001790:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(buttons[i].x + 10, buttons[i].y + 10,
 8001792:	2303      	movs	r3, #3
 8001794:	f002 fa72 	bl	8003c7c <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001798:	482b      	ldr	r0, [pc, #172]	@ (8001848 <DrawMainPage+0x348>)
 800179a:	f002 f9b7 	bl	8003b0c <BSP_LCD_SetTextColor>
	for (int i = 0; i < NUM_BUTTONS; i++) {
 800179e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017a2:	3301      	adds	r3, #1
 80017a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	dd8f      	ble.n	80016d0 <DrawMainPage+0x1d0>
	}

	// Draw "Next" button
	if (page_num != 10) {
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2b0a      	cmp	r3, #10
 80017b4:	d01f      	beq.n	80017f6 <DrawMainPage+0x2f6>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80017b6:	4825      	ldr	r0, [pc, #148]	@ (800184c <DrawMainPage+0x34c>)
 80017b8:	f002 f9a8 	bl	8003b0c <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(nextButton.x, nextButton.y, nextButton.w,
 80017bc:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <DrawMainPage+0x350>)
 80017be:	8818      	ldrh	r0, [r3, #0]
 80017c0:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <DrawMainPage+0x350>)
 80017c2:	8859      	ldrh	r1, [r3, #2]
 80017c4:	4b22      	ldr	r3, [pc, #136]	@ (8001850 <DrawMainPage+0x350>)
 80017c6:	889a      	ldrh	r2, [r3, #4]
 80017c8:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <DrawMainPage+0x350>)
 80017ca:	88db      	ldrh	r3, [r3, #6]
 80017cc:	f002 fb14 	bl	8003df8 <BSP_LCD_FillRect>
				nextButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f002 f99a 	bl	8003b0c <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80017d8:	481c      	ldr	r0, [pc, #112]	@ (800184c <DrawMainPage+0x34c>)
 80017da:	f002 f9af 	bl	8003b3c <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(nextButton.x + 10, nextButton.y + 10,
 80017de:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <DrawMainPage+0x350>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	330a      	adds	r3, #10
 80017e4:	b298      	uxth	r0, r3
 80017e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <DrawMainPage+0x350>)
 80017e8:	885b      	ldrh	r3, [r3, #2]
 80017ea:	330a      	adds	r3, #10
 80017ec:	b299      	uxth	r1, r3
 80017ee:	2303      	movs	r3, #3
 80017f0:	4a18      	ldr	r2, [pc, #96]	@ (8001854 <DrawMainPage+0x354>)
 80017f2:	f002 fa43 	bl	8003c7c <BSP_LCD_DisplayStringAt>
				(uint8_t*) nextButton.label, LEFT_MODE);
	}

	// Draw "Back" button
	if (page_num != 1) {
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d01f      	beq.n	800183c <DrawMainPage+0x33c>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80017fc:	4813      	ldr	r0, [pc, #76]	@ (800184c <DrawMainPage+0x34c>)
 80017fe:	f002 f985 	bl	8003b0c <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w,
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <DrawMainPage+0x358>)
 8001804:	8818      	ldrh	r0, [r3, #0]
 8001806:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <DrawMainPage+0x358>)
 8001808:	8859      	ldrh	r1, [r3, #2]
 800180a:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <DrawMainPage+0x358>)
 800180c:	889a      	ldrh	r2, [r3, #4]
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <DrawMainPage+0x358>)
 8001810:	88db      	ldrh	r3, [r3, #6]
 8001812:	f002 faf1 	bl	8003df8 <BSP_LCD_FillRect>
				backButton.h);
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001816:	f04f 30ff 	mov.w	r0, #4294967295
 800181a:	f002 f977 	bl	8003b0c <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800181e:	480b      	ldr	r0, [pc, #44]	@ (800184c <DrawMainPage+0x34c>)
 8001820:	f002 f98c 	bl	8003b3c <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <DrawMainPage+0x358>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	330a      	adds	r3, #10
 800182a:	b298      	uxth	r0, r3
 800182c:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <DrawMainPage+0x358>)
 800182e:	885b      	ldrh	r3, [r3, #2]
 8001830:	330a      	adds	r3, #10
 8001832:	b299      	uxth	r1, r3
 8001834:	2303      	movs	r3, #3
 8001836:	4a09      	ldr	r2, [pc, #36]	@ (800185c <DrawMainPage+0x35c>)
 8001838:	f002 fa20 	bl	8003c7c <BSP_LCD_DisplayStringAt>
				(uint8_t*) backButton.label, LEFT_MODE);
	}
}
 800183c:	bf00      	nop
 800183e:	3798      	adds	r7, #152	@ 0x98
 8001840:	46bd      	mov	sp, r7
 8001842:	bdb0      	pop	{r4, r5, r7, pc}
 8001844:	20000000 	.word	0x20000000
 8001848:	ff0000ff 	.word	0xff0000ff
 800184c:	ffff0000 	.word	0xffff0000
 8001850:	2000009c 	.word	0x2000009c
 8001854:	200000a4 	.word	0x200000a4
 8001858:	20000074 	.word	0x20000074
 800185c:	2000007c 	.word	0x2000007c

08001860 <DrawInfoPage>:

void DrawInfoPage(char protocolTitle[MAX_LINE_LENGTH]) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f002 f99a 	bl	8003ba4 <BSP_LCD_Clear>
	//Display protocol name at top of screen
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001870:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001874:	f002 f94a 	bl	8003b0c <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001878:	4826      	ldr	r0, [pc, #152]	@ (8001914 <DrawInfoPage+0xb4>)
 800187a:	f002 f95f 	bl	8003b3c <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t*) protocolTitle, CENTER_MODE);
 800187e:	2301      	movs	r3, #1
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	210a      	movs	r1, #10
 8001884:	200a      	movs	r0, #10
 8001886:	f002 f9f9 	bl	8003c7c <BSP_LCD_DisplayStringAt>

	//Draw "Select" button
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800188a:	4823      	ldr	r0, [pc, #140]	@ (8001918 <DrawInfoPage+0xb8>)
 800188c:	f002 f93e 	bl	8003b0c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(selectButton.x, selectButton.y, selectButton.w,
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <DrawInfoPage+0xbc>)
 8001892:	8818      	ldrh	r0, [r3, #0]
 8001894:	4b21      	ldr	r3, [pc, #132]	@ (800191c <DrawInfoPage+0xbc>)
 8001896:	8859      	ldrh	r1, [r3, #2]
 8001898:	4b20      	ldr	r3, [pc, #128]	@ (800191c <DrawInfoPage+0xbc>)
 800189a:	889a      	ldrh	r2, [r3, #4]
 800189c:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <DrawInfoPage+0xbc>)
 800189e:	88db      	ldrh	r3, [r3, #6]
 80018a0:	f002 faaa 	bl	8003df8 <BSP_LCD_FillRect>
			selectButton.h);
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80018a4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80018a8:	f002 f930 	bl	8003b0c <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80018ac:	481a      	ldr	r0, [pc, #104]	@ (8001918 <DrawInfoPage+0xb8>)
 80018ae:	f002 f945 	bl	8003b3c <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(selectButton.x + 10, selectButton.y + 10,
 80018b2:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <DrawInfoPage+0xbc>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	330a      	adds	r3, #10
 80018b8:	b298      	uxth	r0, r3
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <DrawInfoPage+0xbc>)
 80018bc:	885b      	ldrh	r3, [r3, #2]
 80018be:	330a      	adds	r3, #10
 80018c0:	b299      	uxth	r1, r3
 80018c2:	2303      	movs	r3, #3
 80018c4:	4a16      	ldr	r2, [pc, #88]	@ (8001920 <DrawInfoPage+0xc0>)
 80018c6:	f002 f9d9 	bl	8003c7c <BSP_LCD_DisplayStringAt>
			(uint8_t*) selectButton.label, LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80018ca:	4812      	ldr	r0, [pc, #72]	@ (8001914 <DrawInfoPage+0xb4>)
 80018cc:	f002 f91e 	bl	8003b0c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 80018d0:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <DrawInfoPage+0xc4>)
 80018d2:	8818      	ldrh	r0, [r3, #0]
 80018d4:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <DrawInfoPage+0xc4>)
 80018d6:	8859      	ldrh	r1, [r3, #2]
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <DrawInfoPage+0xc4>)
 80018da:	889a      	ldrh	r2, [r3, #4]
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <DrawInfoPage+0xc4>)
 80018de:	88db      	ldrh	r3, [r3, #6]
 80018e0:	f002 fa8a 	bl	8003df8 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f002 f910 	bl	8003b0c <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80018ec:	4809      	ldr	r0, [pc, #36]	@ (8001914 <DrawInfoPage+0xb4>)
 80018ee:	f002 f925 	bl	8003b3c <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <DrawInfoPage+0xc4>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	330a      	adds	r3, #10
 80018f8:	b298      	uxth	r0, r3
 80018fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <DrawInfoPage+0xc4>)
 80018fc:	885b      	ldrh	r3, [r3, #2]
 80018fe:	330a      	adds	r3, #10
 8001900:	b299      	uxth	r1, r3
 8001902:	2303      	movs	r3, #3
 8001904:	4a08      	ldr	r2, [pc, #32]	@ (8001928 <DrawInfoPage+0xc8>)
 8001906:	f002 f9b9 	bl	8003c7c <BSP_LCD_DisplayStringAt>
			(uint8_t*) backButton.label, LEFT_MODE);
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	ffff0000 	.word	0xffff0000
 8001918:	ff0000ff 	.word	0xff0000ff
 800191c:	200000c4 	.word	0x200000c4
 8001920:	200000cc 	.word	0x200000cc
 8001924:	20000074 	.word	0x20000074
 8001928:	2000007c 	.word	0x2000007c

0800192c <DrawPageFinish>:

void DrawPageFinish() {
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f002 f936 	bl	8003ba4 <BSP_LCD_Clear>

	//Draw "Success!" box
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001938:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800193c:	f002 f8e6 	bl	8003b0c <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001940:	4818      	ldr	r0, [pc, #96]	@ (80019a4 <DrawPageFinish+0x78>)
 8001942:	f002 f8fb 	bl	8003b3c <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(selectButton.x + 10, selectButton.y + 10,
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <DrawPageFinish+0x7c>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	330a      	adds	r3, #10
 800194c:	b298      	uxth	r0, r3
 800194e:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <DrawPageFinish+0x7c>)
 8001950:	885b      	ldrh	r3, [r3, #2]
 8001952:	330a      	adds	r3, #10
 8001954:	b299      	uxth	r1, r3
 8001956:	2303      	movs	r3, #3
 8001958:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <DrawPageFinish+0x80>)
 800195a:	f002 f98f 	bl	8003c7c <BSP_LCD_DisplayStringAt>
			(uint8_t*) "Success!", LEFT_MODE);

	// Draw "Back" button
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800195e:	4811      	ldr	r0, [pc, #68]	@ (80019a4 <DrawPageFinish+0x78>)
 8001960:	f002 f8d4 	bl	8003b0c <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(backButton.x, backButton.y, backButton.w, backButton.h);
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <DrawPageFinish+0x84>)
 8001966:	8818      	ldrh	r0, [r3, #0]
 8001968:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <DrawPageFinish+0x84>)
 800196a:	8859      	ldrh	r1, [r3, #2]
 800196c:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <DrawPageFinish+0x84>)
 800196e:	889a      	ldrh	r2, [r3, #4]
 8001970:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <DrawPageFinish+0x84>)
 8001972:	88db      	ldrh	r3, [r3, #6]
 8001974:	f002 fa40 	bl	8003df8 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f002 f8c6 	bl	8003b0c <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001980:	4808      	ldr	r0, [pc, #32]	@ (80019a4 <DrawPageFinish+0x78>)
 8001982:	f002 f8db 	bl	8003b3c <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(backButton.x + 10, backButton.y + 10,
 8001986:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <DrawPageFinish+0x84>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	330a      	adds	r3, #10
 800198c:	b298      	uxth	r0, r3
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <DrawPageFinish+0x84>)
 8001990:	885b      	ldrh	r3, [r3, #2]
 8001992:	330a      	adds	r3, #10
 8001994:	b299      	uxth	r1, r3
 8001996:	2303      	movs	r3, #3
 8001998:	4a06      	ldr	r2, [pc, #24]	@ (80019b4 <DrawPageFinish+0x88>)
 800199a:	f002 f96f 	bl	8003c7c <BSP_LCD_DisplayStringAt>
			(uint8_t*) "Done", LEFT_MODE);
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	ffff0000 	.word	0xffff0000
 80019a8:	200000c4 	.word	0x200000c4
 80019ac:	08012100 	.word	0x08012100
 80019b0:	20000074 	.word	0x20000074
 80019b4:	0801210c 	.word	0x0801210c

080019b8 <HandleTouch>:

//fix this function and give it a description
uint8_t HandleTouch(void) {
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
	//store the coordinates of the user touch in "TS_State"
	BSP_TS_GetState(&TS_State);
 80019be:	4895      	ldr	r0, [pc, #596]	@ (8001c14 <HandleTouch+0x25c>)
 80019c0:	f002 fe66 	bl	8004690 <BSP_TS_GetState>
	//do nothing if no touch detect
	if (!TS_State.TouchDetected) {
 80019c4:	4b93      	ldr	r3, [pc, #588]	@ (8001c14 <HandleTouch+0x25c>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HandleTouch+0x18>
		return 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e1bf      	b.n	8001d50 <HandleTouch+0x398>
	}

	//init variables if a touch is detected
	char Empty_str[20] = "Empty\n"; //strings from flash memory come with newline at end
 80019d0:	4a91      	ldr	r2, [pc, #580]	@ (8001c18 <HandleTouch+0x260>)
 80019d2:	463b      	mov	r3, r7
 80019d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019d8:	6018      	str	r0, [r3, #0]
 80019da:	3304      	adds	r3, #4
 80019dc:	8019      	strh	r1, [r3, #0]
 80019de:	3302      	adds	r3, #2
 80019e0:	0c0a      	lsrs	r2, r1, #16
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	1dfb      	adds	r3, r7, #7
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	731a      	strb	r2, [r3, #12]
	static uint8_t protocol_num;
	static uint8_t protocol_offset = 0;
	//the y value has issues of being flipped and also needing to click below button
	TS_State.Y = (BSP_LCD_GetYSize() - TS_State.Y) - Y_OFFSET;
 80019f0:	f002 f81c 	bl	8003a2c <BSP_LCD_GetYSize>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b86      	ldr	r3, [pc, #536]	@ (8001c14 <HandleTouch+0x25c>)
 80019fa:	889b      	ldrh	r3, [r3, #4]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b14      	subs	r3, #20
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b83      	ldr	r3, [pc, #524]	@ (8001c14 <HandleTouch+0x25c>)
 8001a06:	809a      	strh	r2, [r3, #4]

	//start state machine for touch handling
	switch (currentPage) {
 8001a08:	4b84      	ldr	r3, [pc, #528]	@ (8001c1c <HandleTouch+0x264>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b0b      	cmp	r3, #11
 8001a0e:	f000 8171 	beq.w	8001cf4 <HandleTouch+0x33c>
 8001a12:	2b0b      	cmp	r3, #11
 8001a14:	f300 819c 	bgt.w	8001d50 <HandleTouch+0x398>
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HandleTouch+0x6c>
 8001a1c:	2b0a      	cmp	r3, #10
 8001a1e:	f000 810b 	beq.w	8001c38 <HandleTouch+0x280>
 8001a22:	e195      	b.n	8001d50 <HandleTouch+0x398>
	case PAGE_MAIN:
		//back button
		if (TS_State.X >= backButton.x
 8001a24:	4b7b      	ldr	r3, [pc, #492]	@ (8001c14 <HandleTouch+0x25c>)
 8001a26:	885a      	ldrh	r2, [r3, #2]
 8001a28:	4b7d      	ldr	r3, [pc, #500]	@ (8001c20 <HandleTouch+0x268>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d32d      	bcc.n	8001a8c <HandleTouch+0xd4>
				&& TS_State.X <= (backButton.x + backButton.w)
 8001a30:	4b78      	ldr	r3, [pc, #480]	@ (8001c14 <HandleTouch+0x25c>)
 8001a32:	885b      	ldrh	r3, [r3, #2]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b7a      	ldr	r3, [pc, #488]	@ (8001c20 <HandleTouch+0x268>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4b78      	ldr	r3, [pc, #480]	@ (8001c20 <HandleTouch+0x268>)
 8001a3e:	889b      	ldrh	r3, [r3, #4]
 8001a40:	440b      	add	r3, r1
 8001a42:	429a      	cmp	r2, r3
 8001a44:	dc22      	bgt.n	8001a8c <HandleTouch+0xd4>
				&& TS_State.Y >= backButton.y
 8001a46:	4b73      	ldr	r3, [pc, #460]	@ (8001c14 <HandleTouch+0x25c>)
 8001a48:	889a      	ldrh	r2, [r3, #4]
 8001a4a:	4b75      	ldr	r3, [pc, #468]	@ (8001c20 <HandleTouch+0x268>)
 8001a4c:	885b      	ldrh	r3, [r3, #2]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d31c      	bcc.n	8001a8c <HandleTouch+0xd4>
				&& TS_State.Y <= (backButton.y + backButton.h)
 8001a52:	4b70      	ldr	r3, [pc, #448]	@ (8001c14 <HandleTouch+0x25c>)
 8001a54:	889b      	ldrh	r3, [r3, #4]
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b71      	ldr	r3, [pc, #452]	@ (8001c20 <HandleTouch+0x268>)
 8001a5a:	885b      	ldrh	r3, [r3, #2]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4b70      	ldr	r3, [pc, #448]	@ (8001c20 <HandleTouch+0x268>)
 8001a60:	88db      	ldrh	r3, [r3, #6]
 8001a62:	440b      	add	r3, r1
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dc11      	bgt.n	8001a8c <HandleTouch+0xd4>
				&& (pageNum != 1)) {
 8001a68:	4b6e      	ldr	r3, [pc, #440]	@ (8001c24 <HandleTouch+0x26c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d00d      	beq.n	8001a8c <HandleTouch+0xd4>
			pageNum--;
 8001a70:	4b6c      	ldr	r3, [pc, #432]	@ (8001c24 <HandleTouch+0x26c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b6a      	ldr	r3, [pc, #424]	@ (8001c24 <HandleTouch+0x26c>)
 8001a7a:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8001a7c:	4b69      	ldr	r3, [pc, #420]	@ (8001c24 <HandleTouch+0x26c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fd3d 	bl	8001500 <DrawMainPage>
			HAL_Delay(20);
 8001a86:	2014      	movs	r0, #20
 8001a88:	f002 fef6 	bl	8004878 <HAL_Delay>
		}
		//next button
		if (TS_State.X >= nextButton.x
 8001a8c:	4b61      	ldr	r3, [pc, #388]	@ (8001c14 <HandleTouch+0x25c>)
 8001a8e:	885a      	ldrh	r2, [r3, #2]
 8001a90:	4b65      	ldr	r3, [pc, #404]	@ (8001c28 <HandleTouch+0x270>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d32d      	bcc.n	8001af4 <HandleTouch+0x13c>
				&& TS_State.X <= (nextButton.x + nextButton.w)
 8001a98:	4b5e      	ldr	r3, [pc, #376]	@ (8001c14 <HandleTouch+0x25c>)
 8001a9a:	885b      	ldrh	r3, [r3, #2]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b62      	ldr	r3, [pc, #392]	@ (8001c28 <HandleTouch+0x270>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4b60      	ldr	r3, [pc, #384]	@ (8001c28 <HandleTouch+0x270>)
 8001aa6:	889b      	ldrh	r3, [r3, #4]
 8001aa8:	440b      	add	r3, r1
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	dc22      	bgt.n	8001af4 <HandleTouch+0x13c>
				&& TS_State.Y >= nextButton.y
 8001aae:	4b59      	ldr	r3, [pc, #356]	@ (8001c14 <HandleTouch+0x25c>)
 8001ab0:	889a      	ldrh	r2, [r3, #4]
 8001ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c28 <HandleTouch+0x270>)
 8001ab4:	885b      	ldrh	r3, [r3, #2]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d31c      	bcc.n	8001af4 <HandleTouch+0x13c>
				&& TS_State.Y <= (nextButton.y + nextButton.h)
 8001aba:	4b56      	ldr	r3, [pc, #344]	@ (8001c14 <HandleTouch+0x25c>)
 8001abc:	889b      	ldrh	r3, [r3, #4]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b59      	ldr	r3, [pc, #356]	@ (8001c28 <HandleTouch+0x270>)
 8001ac2:	885b      	ldrh	r3, [r3, #2]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4b58      	ldr	r3, [pc, #352]	@ (8001c28 <HandleTouch+0x270>)
 8001ac8:	88db      	ldrh	r3, [r3, #6]
 8001aca:	440b      	add	r3, r1
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dc11      	bgt.n	8001af4 <HandleTouch+0x13c>
				&& (pageNum != 10)) {
 8001ad0:	4b54      	ldr	r3, [pc, #336]	@ (8001c24 <HandleTouch+0x26c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b0a      	cmp	r3, #10
 8001ad6:	d00d      	beq.n	8001af4 <HandleTouch+0x13c>
			pageNum++;
 8001ad8:	4b52      	ldr	r3, [pc, #328]	@ (8001c24 <HandleTouch+0x26c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b50      	ldr	r3, [pc, #320]	@ (8001c24 <HandleTouch+0x26c>)
 8001ae2:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8001ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8001c24 <HandleTouch+0x26c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fd09 	bl	8001500 <DrawMainPage>
			HAL_Delay(20);
 8001aee:	2014      	movs	r0, #20
 8001af0:	f002 fec2 	bl	8004878 <HAL_Delay>
		}
		//3 protocol buttons
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e086      	b.n	8001c08 <HandleTouch+0x250>
			if (TS_State.X >= buttons[i].x
 8001afa:	4b46      	ldr	r3, [pc, #280]	@ (8001c14 <HandleTouch+0x25c>)
 8001afc:	885a      	ldrh	r2, [r3, #2]
 8001afe:	494b      	ldr	r1, [pc, #300]	@ (8001c2c <HandleTouch+0x274>)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2026      	movs	r0, #38	@ 0x26
 8001b04:	fb00 f303 	mul.w	r3, r0, r3
 8001b08:	440b      	add	r3, r1
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d378      	bcc.n	8001c02 <HandleTouch+0x24a>
					&& TS_State.X <= (buttons[i].x + buttons[i].w)
 8001b10:	4b40      	ldr	r3, [pc, #256]	@ (8001c14 <HandleTouch+0x25c>)
 8001b12:	885b      	ldrh	r3, [r3, #2]
 8001b14:	4618      	mov	r0, r3
 8001b16:	4a45      	ldr	r2, [pc, #276]	@ (8001c2c <HandleTouch+0x274>)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2126      	movs	r1, #38	@ 0x26
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	461c      	mov	r4, r3
 8001b26:	4a41      	ldr	r2, [pc, #260]	@ (8001c2c <HandleTouch+0x274>)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2126      	movs	r1, #38	@ 0x26
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	4423      	add	r3, r4
 8001b38:	4298      	cmp	r0, r3
 8001b3a:	dc62      	bgt.n	8001c02 <HandleTouch+0x24a>
					&& TS_State.Y >= buttons[i].y
 8001b3c:	4b35      	ldr	r3, [pc, #212]	@ (8001c14 <HandleTouch+0x25c>)
 8001b3e:	889a      	ldrh	r2, [r3, #4]
 8001b40:	493a      	ldr	r1, [pc, #232]	@ (8001c2c <HandleTouch+0x274>)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2026      	movs	r0, #38	@ 0x26
 8001b46:	fb00 f303 	mul.w	r3, r0, r3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d356      	bcc.n	8001c02 <HandleTouch+0x24a>
					&& TS_State.Y <= (buttons[i].y + buttons[i].h)) {
 8001b54:	4b2f      	ldr	r3, [pc, #188]	@ (8001c14 <HandleTouch+0x25c>)
 8001b56:	889b      	ldrh	r3, [r3, #4]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	4a34      	ldr	r2, [pc, #208]	@ (8001c2c <HandleTouch+0x274>)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2126      	movs	r1, #38	@ 0x26
 8001b60:	fb01 f303 	mul.w	r3, r1, r3
 8001b64:	4413      	add	r3, r2
 8001b66:	3302      	adds	r3, #2
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	461c      	mov	r4, r3
 8001b6c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c2c <HandleTouch+0x274>)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2126      	movs	r1, #38	@ 0x26
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	3306      	adds	r3, #6
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	4423      	add	r3, r4
 8001b7e:	4298      	cmp	r0, r3
 8001b80:	dc3f      	bgt.n	8001c02 <HandleTouch+0x24a>
				//check which button has been pressed
				if (i == 0) {
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d106      	bne.n	8001b96 <HandleTouch+0x1de>
					protocol_num = 1;
 8001b88:	4b29      	ldr	r3, [pc, #164]	@ (8001c30 <HandleTouch+0x278>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
					protocol_offset = 0;
 8001b8e:	4b29      	ldr	r3, [pc, #164]	@ (8001c34 <HandleTouch+0x27c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	e012      	b.n	8001bbc <HandleTouch+0x204>
				} else if (i == 1) {
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d106      	bne.n	8001baa <HandleTouch+0x1f2>
					protocol_num = 1;
 8001b9c:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <HandleTouch+0x278>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
					protocol_offset = 1;
 8001ba2:	4b24      	ldr	r3, [pc, #144]	@ (8001c34 <HandleTouch+0x27c>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	e008      	b.n	8001bbc <HandleTouch+0x204>
				} else if (i == 2) {
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d105      	bne.n	8001bbc <HandleTouch+0x204>
					protocol_num = 1;
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c30 <HandleTouch+0x278>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
					protocol_offset = 2;
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c34 <HandleTouch+0x27c>)
 8001bb8:	2202      	movs	r2, #2
 8001bba:	701a      	strb	r2, [r3, #0]
				}
				//dont draw next page if the button says "Empty"
				if (buttons[i].status == NOT_EMPTY) {
 8001bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001c2c <HandleTouch+0x274>)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2126      	movs	r1, #38	@ 0x26
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3325      	adds	r3, #37	@ 0x25
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d113      	bne.n	8001bf8 <HandleTouch+0x240>
					currentPage = PAGE_SELECT;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HandleTouch+0x264>)
 8001bd2:	220a      	movs	r2, #10
 8001bd4:	701a      	strb	r2, [r3, #0]
					DrawInfoPage(buttons[i].label);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2226      	movs	r2, #38	@ 0x26
 8001bda:	fb02 f303 	mul.w	r3, r2, r3
 8001bde:	3308      	adds	r3, #8
 8001be0:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <HandleTouch+0x274>)
 8001be2:	4413      	add	r3, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fe3b 	bl	8001860 <DrawInfoPage>
				}
				while (TS_State.TouchDetected) {
 8001bea:	e005      	b.n	8001bf8 <HandleTouch+0x240>
					BSP_TS_GetState(&TS_State);
 8001bec:	4809      	ldr	r0, [pc, #36]	@ (8001c14 <HandleTouch+0x25c>)
 8001bee:	f002 fd4f 	bl	8004690 <BSP_TS_GetState>
					if (!TS_State.TouchDetected) {
					}
					HAL_Delay(20); //WOOOO CANT TOUCH UNLESS YOU RELASE. the clk speed is super fast, need delay. ok if you slide the pen it breaks, but that dont count
 8001bf2:	2014      	movs	r0, #20
 8001bf4:	f002 fe40 	bl	8004878 <HAL_Delay>
				while (TS_State.TouchDetected) {
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HandleTouch+0x25c>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f5      	bne.n	8001bec <HandleTouch+0x234>
				}
				return;
 8001c00:	e0a6      	b.n	8001d50 <HandleTouch+0x398>
		for (int i = 0; i < NUM_BUTTONS; i++) {
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	f77f af75 	ble.w	8001afa <HandleTouch+0x142>
			}
		}
		break;
 8001c10:	e09e      	b.n	8001d50 <HandleTouch+0x398>
 8001c12:	bf00      	nop
 8001c14:	200004b4 	.word	0x200004b4
 8001c18:	080120ec 	.word	0x080120ec
 8001c1c:	200004c1 	.word	0x200004c1
 8001c20:	20000074 	.word	0x20000074
 8001c24:	200000ea 	.word	0x200000ea
 8001c28:	2000009c 	.word	0x2000009c
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20001028 	.word	0x20001028
 8001c34:	20001029 	.word	0x20001029
	case PAGE_SELECT:
		//back button
		if (TS_State.X >= backButton.x
 8001c38:	4b47      	ldr	r3, [pc, #284]	@ (8001d58 <HandleTouch+0x3a0>)
 8001c3a:	885a      	ldrh	r2, [r3, #2]
 8001c3c:	4b47      	ldr	r3, [pc, #284]	@ (8001d5c <HandleTouch+0x3a4>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d323      	bcc.n	8001c8c <HandleTouch+0x2d4>
				&& TS_State.X <= (backButton.x + backButton.w)
 8001c44:	4b44      	ldr	r3, [pc, #272]	@ (8001d58 <HandleTouch+0x3a0>)
 8001c46:	885b      	ldrh	r3, [r3, #2]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b44      	ldr	r3, [pc, #272]	@ (8001d5c <HandleTouch+0x3a4>)
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4b42      	ldr	r3, [pc, #264]	@ (8001d5c <HandleTouch+0x3a4>)
 8001c52:	889b      	ldrh	r3, [r3, #4]
 8001c54:	440b      	add	r3, r1
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dc18      	bgt.n	8001c8c <HandleTouch+0x2d4>
				&& TS_State.Y >= backButton.y
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d58 <HandleTouch+0x3a0>)
 8001c5c:	889a      	ldrh	r2, [r3, #4]
 8001c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d5c <HandleTouch+0x3a4>)
 8001c60:	885b      	ldrh	r3, [r3, #2]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d312      	bcc.n	8001c8c <HandleTouch+0x2d4>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 8001c66:	4b3c      	ldr	r3, [pc, #240]	@ (8001d58 <HandleTouch+0x3a0>)
 8001c68:	889b      	ldrh	r3, [r3, #4]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d5c <HandleTouch+0x3a4>)
 8001c6e:	885b      	ldrh	r3, [r3, #2]
 8001c70:	4619      	mov	r1, r3
 8001c72:	4b3a      	ldr	r3, [pc, #232]	@ (8001d5c <HandleTouch+0x3a4>)
 8001c74:	88db      	ldrh	r3, [r3, #6]
 8001c76:	440b      	add	r3, r1
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dc07      	bgt.n	8001c8c <HandleTouch+0x2d4>
			currentPage = PAGE_MAIN;
 8001c7c:	4b38      	ldr	r3, [pc, #224]	@ (8001d60 <HandleTouch+0x3a8>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8001c82:	4b38      	ldr	r3, [pc, #224]	@ (8001d64 <HandleTouch+0x3ac>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fc3a 	bl	8001500 <DrawMainPage>
		}
		//select button
		if (TS_State.X >= selectButton.x
 8001c8c:	4b32      	ldr	r3, [pc, #200]	@ (8001d58 <HandleTouch+0x3a0>)
 8001c8e:	885a      	ldrh	r2, [r3, #2]
 8001c90:	4b35      	ldr	r3, [pc, #212]	@ (8001d68 <HandleTouch+0x3b0>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d358      	bcc.n	8001d4a <HandleTouch+0x392>
				&& TS_State.X <= (selectButton.x + selectButton.w)
 8001c98:	4b2f      	ldr	r3, [pc, #188]	@ (8001d58 <HandleTouch+0x3a0>)
 8001c9a:	885b      	ldrh	r3, [r3, #2]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b32      	ldr	r3, [pc, #200]	@ (8001d68 <HandleTouch+0x3b0>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4b30      	ldr	r3, [pc, #192]	@ (8001d68 <HandleTouch+0x3b0>)
 8001ca6:	889b      	ldrh	r3, [r3, #4]
 8001ca8:	440b      	add	r3, r1
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dc4d      	bgt.n	8001d4a <HandleTouch+0x392>
				&& TS_State.Y >= selectButton.y
 8001cae:	4b2a      	ldr	r3, [pc, #168]	@ (8001d58 <HandleTouch+0x3a0>)
 8001cb0:	889a      	ldrh	r2, [r3, #4]
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d68 <HandleTouch+0x3b0>)
 8001cb4:	885b      	ldrh	r3, [r3, #2]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d347      	bcc.n	8001d4a <HandleTouch+0x392>
				&& TS_State.Y <= (selectButton.y + selectButton.h)) {
 8001cba:	4b27      	ldr	r3, [pc, #156]	@ (8001d58 <HandleTouch+0x3a0>)
 8001cbc:	889b      	ldrh	r3, [r3, #4]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b29      	ldr	r3, [pc, #164]	@ (8001d68 <HandleTouch+0x3b0>)
 8001cc2:	885b      	ldrh	r3, [r3, #2]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4b28      	ldr	r3, [pc, #160]	@ (8001d68 <HandleTouch+0x3b0>)
 8001cc8:	88db      	ldrh	r3, [r3, #6]
 8001cca:	440b      	add	r3, r1
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	dc3c      	bgt.n	8001d4a <HandleTouch+0x392>
			HAL_Delay(20);
 8001cd0:	2014      	movs	r0, #20
 8001cd2:	f002 fdd1 	bl	8004878 <HAL_Delay>
			transmitProtocol(pageNum, protocol_offset);
 8001cd6:	4b23      	ldr	r3, [pc, #140]	@ (8001d64 <HandleTouch+0x3ac>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b23      	ldr	r3, [pc, #140]	@ (8001d6c <HandleTouch+0x3b4>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f7ff fb8c 	bl	8001400 <transmitProtocol>
			currentPage = PAGE_FINISH;
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <HandleTouch+0x3a8>)
 8001cea:	220b      	movs	r2, #11
 8001cec:	701a      	strb	r2, [r3, #0]
			DrawPageFinish();
 8001cee:	f7ff fe1d 	bl	800192c <DrawPageFinish>
		}
		break;
 8001cf2:	e02a      	b.n	8001d4a <HandleTouch+0x392>
	case PAGE_FINISH:
		if (TS_State.X >= backButton.x
 8001cf4:	4b18      	ldr	r3, [pc, #96]	@ (8001d58 <HandleTouch+0x3a0>)
 8001cf6:	885a      	ldrh	r2, [r3, #2]
 8001cf8:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <HandleTouch+0x3a4>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d326      	bcc.n	8001d4e <HandleTouch+0x396>
				&& TS_State.X <= (backButton.x + backButton.w)
 8001d00:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <HandleTouch+0x3a0>)
 8001d02:	885b      	ldrh	r3, [r3, #2]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <HandleTouch+0x3a4>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <HandleTouch+0x3a4>)
 8001d0e:	889b      	ldrh	r3, [r3, #4]
 8001d10:	440b      	add	r3, r1
 8001d12:	429a      	cmp	r2, r3
 8001d14:	dc1b      	bgt.n	8001d4e <HandleTouch+0x396>
				&& TS_State.Y >= backButton.y
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <HandleTouch+0x3a0>)
 8001d18:	889a      	ldrh	r2, [r3, #4]
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <HandleTouch+0x3a4>)
 8001d1c:	885b      	ldrh	r3, [r3, #2]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d315      	bcc.n	8001d4e <HandleTouch+0x396>
				&& TS_State.Y <= (backButton.y + backButton.h)) {
 8001d22:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <HandleTouch+0x3a0>)
 8001d24:	889b      	ldrh	r3, [r3, #4]
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <HandleTouch+0x3a4>)
 8001d2a:	885b      	ldrh	r3, [r3, #2]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HandleTouch+0x3a4>)
 8001d30:	88db      	ldrh	r3, [r3, #6]
 8001d32:	440b      	add	r3, r1
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dc0a      	bgt.n	8001d4e <HandleTouch+0x396>
			currentPage = PAGE_MAIN;
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HandleTouch+0x3a8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
			DrawMainPage(pageNum);
 8001d3e:	4b09      	ldr	r3, [pc, #36]	@ (8001d64 <HandleTouch+0x3ac>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fbdc 	bl	8001500 <DrawMainPage>
		}
		break;
 8001d48:	e001      	b.n	8001d4e <HandleTouch+0x396>
		break;
 8001d4a:	bf00      	nop
 8001d4c:	e000      	b.n	8001d50 <HandleTouch+0x398>
		break;
 8001d4e:	bf00      	nop
	}
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd90      	pop	{r4, r7, pc}
 8001d58:	200004b4 	.word	0x200004b4
 8001d5c:	20000074 	.word	0x20000074
 8001d60:	200004c1 	.word	0x200004c1
 8001d64:	200000ea 	.word	0x200000ea
 8001d68:	200000c4 	.word	0x200000c4
 8001d6c:	20001029 	.word	0x20001029

08001d70 <get_sector_address>:

//I name sectors from 1-14. the actual sectors are from 5-23. this functions maps them
uint32_t get_sector_address(uint32_t sector) {
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	2b0d      	cmp	r3, #13
 8001d7e:	d83b      	bhi.n	8001df8 <get_sector_address+0x88>
 8001d80:	a201      	add	r2, pc, #4	@ (adr r2, 8001d88 <get_sector_address+0x18>)
 8001d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d86:	bf00      	nop
 8001d88:	08001dc1 	.word	0x08001dc1
 8001d8c:	08001dc5 	.word	0x08001dc5
 8001d90:	08001dc9 	.word	0x08001dc9
 8001d94:	08001dcd 	.word	0x08001dcd
 8001d98:	08001dd1 	.word	0x08001dd1
 8001d9c:	08001dd5 	.word	0x08001dd5
 8001da0:	08001dd9 	.word	0x08001dd9
 8001da4:	08001ddd 	.word	0x08001ddd
 8001da8:	08001de1 	.word	0x08001de1
 8001dac:	08001de5 	.word	0x08001de5
 8001db0:	08001de9 	.word	0x08001de9
 8001db4:	08001ded 	.word	0x08001ded
 8001db8:	08001df1 	.word	0x08001df1
 8001dbc:	08001df5 	.word	0x08001df5
	case 1:
		return SECTOR_5;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <get_sector_address+0x98>)
 8001dc2:	e01a      	b.n	8001dfa <get_sector_address+0x8a>
	case 2:
		return SECTOR_6;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <get_sector_address+0x9c>)
 8001dc6:	e018      	b.n	8001dfa <get_sector_address+0x8a>
	case 3:
		return SECTOR_7;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <get_sector_address+0xa0>)
 8001dca:	e016      	b.n	8001dfa <get_sector_address+0x8a>
	case 4:
		return SECTOR_8;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <get_sector_address+0xa4>)
 8001dce:	e014      	b.n	8001dfa <get_sector_address+0x8a>
	case 5:
		return SECTOR_9;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <get_sector_address+0xa8>)
 8001dd2:	e012      	b.n	8001dfa <get_sector_address+0x8a>
	case 6:
		return SECTOR_10;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <get_sector_address+0xac>)
 8001dd6:	e010      	b.n	8001dfa <get_sector_address+0x8a>
	case 7:
		return SECTOR_11;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <get_sector_address+0xb0>)
 8001dda:	e00e      	b.n	8001dfa <get_sector_address+0x8a>
	case 8:
		return SECTOR_17;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <get_sector_address+0xb4>)
 8001dde:	e00c      	b.n	8001dfa <get_sector_address+0x8a>
	case 9:
		return SECTOR_18;
 8001de0:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <get_sector_address+0xb8>)
 8001de2:	e00a      	b.n	8001dfa <get_sector_address+0x8a>
	case 10:
		return SECTOR_19;
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <get_sector_address+0xbc>)
 8001de6:	e008      	b.n	8001dfa <get_sector_address+0x8a>
	case 11:
		return SECTOR_20;
 8001de8:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <get_sector_address+0xc0>)
 8001dea:	e006      	b.n	8001dfa <get_sector_address+0x8a>
	case 12:
		return SECTOR_21;
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <get_sector_address+0xc4>)
 8001dee:	e004      	b.n	8001dfa <get_sector_address+0x8a>
	case 13:
		return SECTOR_22;
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <get_sector_address+0xc8>)
 8001df2:	e002      	b.n	8001dfa <get_sector_address+0x8a>
	case 14:
		return SECTOR_23;
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <get_sector_address+0xcc>)
 8001df6:	e000      	b.n	8001dfa <get_sector_address+0x8a>
	default:
		break;
 8001df8:	bf00      	nop
	}
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	08020000 	.word	0x08020000
 8001e0c:	08040000 	.word	0x08040000
 8001e10:	08060000 	.word	0x08060000
 8001e14:	08080000 	.word	0x08080000
 8001e18:	080a0000 	.word	0x080a0000
 8001e1c:	080c0000 	.word	0x080c0000
 8001e20:	080e0000 	.word	0x080e0000
 8001e24:	08120000 	.word	0x08120000
 8001e28:	08140000 	.word	0x08140000
 8001e2c:	08160000 	.word	0x08160000
 8001e30:	08180000 	.word	0x08180000
 8001e34:	081a0000 	.word	0x081a0000
 8001e38:	081c0000 	.word	0x081c0000
 8001e3c:	081e0000 	.word	0x081e0000

08001e40 <sector_mapping>:

uint32_t sector_mapping(uint32_t sector) {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	switch (sector) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	2b0d      	cmp	r3, #13
 8001e4e:	d83b      	bhi.n	8001ec8 <sector_mapping+0x88>
 8001e50:	a201      	add	r2, pc, #4	@ (adr r2, 8001e58 <sector_mapping+0x18>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e91 	.word	0x08001e91
 8001e5c:	08001e95 	.word	0x08001e95
 8001e60:	08001e99 	.word	0x08001e99
 8001e64:	08001e9d 	.word	0x08001e9d
 8001e68:	08001ea1 	.word	0x08001ea1
 8001e6c:	08001ea5 	.word	0x08001ea5
 8001e70:	08001ea9 	.word	0x08001ea9
 8001e74:	08001ead 	.word	0x08001ead
 8001e78:	08001eb1 	.word	0x08001eb1
 8001e7c:	08001eb5 	.word	0x08001eb5
 8001e80:	08001eb9 	.word	0x08001eb9
 8001e84:	08001ebd 	.word	0x08001ebd
 8001e88:	08001ec1 	.word	0x08001ec1
 8001e8c:	08001ec5 	.word	0x08001ec5
		case 1:
			return 5;
 8001e90:	2305      	movs	r3, #5
 8001e92:	e019      	b.n	8001ec8 <sector_mapping+0x88>
		case 2:
			return 6;
 8001e94:	2306      	movs	r3, #6
 8001e96:	e017      	b.n	8001ec8 <sector_mapping+0x88>
		case 3:
			return 7;
 8001e98:	2307      	movs	r3, #7
 8001e9a:	e015      	b.n	8001ec8 <sector_mapping+0x88>
		case 4:
			return 8;
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	e013      	b.n	8001ec8 <sector_mapping+0x88>
		case 5:
			return 9;
 8001ea0:	2309      	movs	r3, #9
 8001ea2:	e011      	b.n	8001ec8 <sector_mapping+0x88>
		case 6:
			return 10;
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	e00f      	b.n	8001ec8 <sector_mapping+0x88>
		case 7:
			return 11;
 8001ea8:	230b      	movs	r3, #11
 8001eaa:	e00d      	b.n	8001ec8 <sector_mapping+0x88>
		case 8:
			return 17;
 8001eac:	2311      	movs	r3, #17
 8001eae:	e00b      	b.n	8001ec8 <sector_mapping+0x88>
		case 9:
			return 18;
 8001eb0:	2312      	movs	r3, #18
 8001eb2:	e009      	b.n	8001ec8 <sector_mapping+0x88>
		case 10:
			return 19;
 8001eb4:	2313      	movs	r3, #19
 8001eb6:	e007      	b.n	8001ec8 <sector_mapping+0x88>
		case 11:
			return 20;
 8001eb8:	2314      	movs	r3, #20
 8001eba:	e005      	b.n	8001ec8 <sector_mapping+0x88>
		case 12:
			return 21;
 8001ebc:	2315      	movs	r3, #21
 8001ebe:	e003      	b.n	8001ec8 <sector_mapping+0x88>
		case 13:
			return 22;
 8001ec0:	2316      	movs	r3, #22
 8001ec2:	e001      	b.n	8001ec8 <sector_mapping+0x88>
		case 14:
			return 23;
 8001ec4:	2317      	movs	r3, #23
 8001ec6:	e7ff      	b.n	8001ec8 <sector_mapping+0x88>
		}
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f20 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d101      	bne.n	8001eea <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001ee6:	f002 fca7 	bl	8004838 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	//10 hz interrupt
	if (htim == &htim10) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d10b      	bne.n	8001f0a <HAL_TIM_PeriodElapsedCallback+0x36>
		if (!USB_BUSY) {
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <HAL_TIM_PeriodElapsedCallback+0x2c>
			checkTouchFlag = 1;
 8001efa:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
		}
		count++;
 8001f00:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001f08:	6013      	str	r3, [r2, #0]
	}

	//use this for a slower frequency application
	if (count == 5) {
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b05      	cmp	r3, #5
 8001f10:	d102      	bne.n	8001f18 <HAL_TIM_PeriodElapsedCallback+0x44>
		//checkTouchFlag = 1;
		count = 0;
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
	}
	/* USER CODE END Callback 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40001000 	.word	0x40001000
 8001f24:	200003f0 	.word	0x200003f0
 8001f28:	200004cc 	.word	0x200004cc
 8001f2c:	200004c0 	.word	0x200004c0
 8001f30:	200004bc 	.word	0x200004bc

08001f34 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <Error_Handler+0x8>

08001f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <HAL_MspInit+0x4c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f8c <HAL_MspInit+0x4c>)
 8001f50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <HAL_MspInit+0x4c>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <HAL_MspInit+0x4c>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	4a08      	ldr	r2, [pc, #32]	@ (8001f8c <HAL_MspInit+0x4c>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_MspInit+0x4c>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001fcc <HAL_CRC_MspInit+0x3c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10d      	bne.n	8001fbe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <HAL_CRC_MspInit+0x40>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	4a09      	ldr	r2, [pc, #36]	@ (8001fd0 <HAL_CRC_MspInit+0x40>)
 8001fac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb2:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <HAL_CRC_MspInit+0x40>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023000 	.word	0x40023000
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800201c <HAL_DMA2D_MspInit+0x48>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d115      	bne.n	8002012 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_DMA2D_MspInit+0x4c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a0c      	ldr	r2, [pc, #48]	@ (8002020 <HAL_DMA2D_MspInit+0x4c>)
 8001ff0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <HAL_DMA2D_MspInit+0x4c>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2105      	movs	r1, #5
 8002006:	205a      	movs	r0, #90	@ 0x5a
 8002008:	f002 fd12 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800200c:	205a      	movs	r0, #90	@ 0x5a
 800200e:	f002 fd2b 	bl	8004a68 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	4002b000 	.word	0x4002b000
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	@ 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a29      	ldr	r2, [pc, #164]	@ (80020e8 <HAL_I2C_MspInit+0xc4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d14b      	bne.n	80020de <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b28      	ldr	r3, [pc, #160]	@ (80020ec <HAL_I2C_MspInit+0xc8>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	4a27      	ldr	r2, [pc, #156]	@ (80020ec <HAL_I2C_MspInit+0xc8>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6313      	str	r3, [r2, #48]	@ 0x30
 8002056:	4b25      	ldr	r3, [pc, #148]	@ (80020ec <HAL_I2C_MspInit+0xc8>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b21      	ldr	r3, [pc, #132]	@ (80020ec <HAL_I2C_MspInit+0xc8>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	4a20      	ldr	r2, [pc, #128]	@ (80020ec <HAL_I2C_MspInit+0xc8>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6313      	str	r3, [r2, #48]	@ 0x30
 8002072:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <HAL_I2C_MspInit+0xc8>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800207e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002084:	2312      	movs	r3, #18
 8002086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002088:	2301      	movs	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002090:	2304      	movs	r3, #4
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	4815      	ldr	r0, [pc, #84]	@ (80020f0 <HAL_I2C_MspInit+0xcc>)
 800209c:	f003 fc7c 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80020a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a6:	2312      	movs	r3, #18
 80020a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020aa:	2301      	movs	r3, #1
 80020ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020b2:	2304      	movs	r3, #4
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	4619      	mov	r1, r3
 80020bc:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <HAL_I2C_MspInit+0xd0>)
 80020be:	f003 fc6b 	bl	8005998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <HAL_I2C_MspInit+0xc8>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	4a08      	ldr	r2, [pc, #32]	@ (80020ec <HAL_I2C_MspInit+0xc8>)
 80020cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_I2C_MspInit+0xc8>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80020de:	bf00      	nop
 80020e0:	3728      	adds	r7, #40	@ 0x28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40005c00 	.word	0x40005c00
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020800 	.word	0x40020800
 80020f4:	40020000 	.word	0x40020000

080020f8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <HAL_I2C_MspDeInit+0x3c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10f      	bne.n	800212a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800210a:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_I2C_MspDeInit+0x40>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <HAL_I2C_MspDeInit+0x40>)
 8002110:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002114:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8002116:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800211a:	4808      	ldr	r0, [pc, #32]	@ (800213c <HAL_I2C_MspDeInit+0x44>)
 800211c:	f003 fde8 	bl	8005cf0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8002120:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002124:	4806      	ldr	r0, [pc, #24]	@ (8002140 <HAL_I2C_MspDeInit+0x48>)
 8002126:	f003 fde3 	bl	8005cf0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40005c00 	.word	0x40005c00
 8002138:	40023800 	.word	0x40023800
 800213c:	40020800 	.word	0x40020800
 8002140:	40020000 	.word	0x40020000

08002144 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b09a      	sub	sp, #104	@ 0x68
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800215c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002160:	2230      	movs	r2, #48	@ 0x30
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f00f f8a1 	bl	80112ac <memset>
  if(hltdc->Instance==LTDC)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a85      	ldr	r2, [pc, #532]	@ (8002384 <HAL_LTDC_MspInit+0x240>)
 8002170:	4293      	cmp	r3, r2
 8002172:	f040 8103 	bne.w	800237c <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002176:	2308      	movs	r3, #8
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800217a:	23c0      	movs	r3, #192	@ 0xc0
 800217c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800217e:	2304      	movs	r3, #4
 8002180:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002182:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002186:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800218c:	4618      	mov	r0, r3
 800218e:	f008 f943 	bl	800a418 <HAL_RCCEx_PeriphCLKConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002198:	f7ff fecc 	bl	8001f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
 80021a0:	4b79      	ldr	r3, [pc, #484]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 80021a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a4:	4a78      	ldr	r2, [pc, #480]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 80021a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80021aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ac:	4b76      	ldr	r3, [pc, #472]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 80021ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021b4:	623b      	str	r3, [r7, #32]
 80021b6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	4b72      	ldr	r3, [pc, #456]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c0:	4a71      	ldr	r2, [pc, #452]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 80021c2:	f043 0320 	orr.w	r3, r3, #32
 80021c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e4:	4b68      	ldr	r3, [pc, #416]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	4b64      	ldr	r3, [pc, #400]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f8:	4a63      	ldr	r2, [pc, #396]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002200:	4b61      	ldr	r3, [pc, #388]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	4b5d      	ldr	r3, [pc, #372]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	4a5c      	ldr	r2, [pc, #368]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 8002216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800221a:	6313      	str	r3, [r2, #48]	@ 0x30
 800221c:	4b5a      	ldr	r3, [pc, #360]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 800221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	4b56      	ldr	r3, [pc, #344]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002230:	4a55      	ldr	r2, [pc, #340]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 8002232:	f043 0304 	orr.w	r3, r3, #4
 8002236:	6313      	str	r3, [r2, #48]	@ 0x30
 8002238:	4b53      	ldr	r3, [pc, #332]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	4b4f      	ldr	r3, [pc, #316]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	4a4e      	ldr	r2, [pc, #312]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 800224e:	f043 0308 	orr.w	r3, r3, #8
 8002252:	6313      	str	r3, [r2, #48]	@ 0x30
 8002254:	4b4c      	ldr	r3, [pc, #304]	@ (8002388 <HAL_LTDC_MspInit+0x244>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002260:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002264:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002272:	230e      	movs	r3, #14
 8002274:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002276:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800227a:	4619      	mov	r1, r3
 800227c:	4843      	ldr	r0, [pc, #268]	@ (800238c <HAL_LTDC_MspInit+0x248>)
 800227e:	f003 fb8b 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002282:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002286:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002294:	230e      	movs	r3, #14
 8002296:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800229c:	4619      	mov	r1, r3
 800229e:	483c      	ldr	r0, [pc, #240]	@ (8002390 <HAL_LTDC_MspInit+0x24c>)
 80022a0:	f003 fb7a 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80022a4:	2303      	movs	r3, #3
 80022a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022b4:	2309      	movs	r3, #9
 80022b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022bc:	4619      	mov	r1, r3
 80022be:	4835      	ldr	r0, [pc, #212]	@ (8002394 <HAL_LTDC_MspInit+0x250>)
 80022c0:	f003 fb6a 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80022c4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80022c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022d6:	230e      	movs	r3, #14
 80022d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022de:	4619      	mov	r1, r3
 80022e0:	482c      	ldr	r0, [pc, #176]	@ (8002394 <HAL_LTDC_MspInit+0x250>)
 80022e2:	f003 fb59 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80022e6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80022ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022f8:	230e      	movs	r3, #14
 80022fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002300:	4619      	mov	r1, r3
 8002302:	4825      	ldr	r0, [pc, #148]	@ (8002398 <HAL_LTDC_MspInit+0x254>)
 8002304:	f003 fb48 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002308:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800230c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800231a:	230e      	movs	r3, #14
 800231c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002322:	4619      	mov	r1, r3
 8002324:	481d      	ldr	r0, [pc, #116]	@ (800239c <HAL_LTDC_MspInit+0x258>)
 8002326:	f003 fb37 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800232a:	2348      	movs	r3, #72	@ 0x48
 800232c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800233a:	230e      	movs	r3, #14
 800233c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800233e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002342:	4619      	mov	r1, r3
 8002344:	4816      	ldr	r0, [pc, #88]	@ (80023a0 <HAL_LTDC_MspInit+0x25c>)
 8002346:	f003 fb27 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800234a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800234e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800235c:	2309      	movs	r3, #9
 800235e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002360:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002364:	4619      	mov	r1, r3
 8002366:	480c      	ldr	r0, [pc, #48]	@ (8002398 <HAL_LTDC_MspInit+0x254>)
 8002368:	f003 fb16 	bl	8005998 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2105      	movs	r1, #5
 8002370:	2058      	movs	r0, #88	@ 0x58
 8002372:	f002 fb5d 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002376:	2058      	movs	r0, #88	@ 0x58
 8002378:	f002 fb76 	bl	8004a68 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800237c:	bf00      	nop
 800237e:	3768      	adds	r7, #104	@ 0x68
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40016800 	.word	0x40016800
 8002388:	40023800 	.word	0x40023800
 800238c:	40021400 	.word	0x40021400
 8002390:	40020000 	.word	0x40020000
 8002394:	40020400 	.word	0x40020400
 8002398:	40021800 	.word	0x40021800
 800239c:	40020800 	.word	0x40020800
 80023a0:	40020c00 	.word	0x40020c00

080023a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	@ 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	@ (8002428 <HAL_SPI_MspInit+0x84>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12c      	bne.n	8002420 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	4b18      	ldr	r3, [pc, #96]	@ (800242c <HAL_SPI_MspInit+0x88>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ce:	4a17      	ldr	r2, [pc, #92]	@ (800242c <HAL_SPI_MspInit+0x88>)
 80023d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023d6:	4b15      	ldr	r3, [pc, #84]	@ (800242c <HAL_SPI_MspInit+0x88>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_SPI_MspInit+0x88>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	4a10      	ldr	r2, [pc, #64]	@ (800242c <HAL_SPI_MspInit+0x88>)
 80023ec:	f043 0320 	orr.w	r3, r3, #32
 80023f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <HAL_SPI_MspInit+0x88>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80023fe:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002410:	2305      	movs	r3, #5
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4619      	mov	r1, r3
 800241a:	4805      	ldr	r0, [pc, #20]	@ (8002430 <HAL_SPI_MspInit+0x8c>)
 800241c:	f003 fabc 	bl	8005998 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002420:	bf00      	nop
 8002422:	3728      	adds	r7, #40	@ 0x28
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40015000 	.word	0x40015000
 800242c:	40023800 	.word	0x40023800
 8002430:	40021400 	.word	0x40021400

08002434 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a08      	ldr	r2, [pc, #32]	@ (8002464 <HAL_SPI_MspDeInit+0x30>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d10a      	bne.n	800245c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002446:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <HAL_SPI_MspDeInit+0x34>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	4a07      	ldr	r2, [pc, #28]	@ (8002468 <HAL_SPI_MspDeInit+0x34>)
 800244c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002450:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002452:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002456:	4805      	ldr	r0, [pc, #20]	@ (800246c <HAL_SPI_MspDeInit+0x38>)
 8002458:	f003 fc4a 	bl	8005cf0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40015000 	.word	0x40015000
 8002468:	40023800 	.word	0x40023800
 800246c:	40021400 	.word	0x40021400

08002470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1c      	ldr	r2, [pc, #112]	@ (80024f0 <HAL_TIM_Base_MspInit+0x80>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d116      	bne.n	80024b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b1b      	ldr	r3, [pc, #108]	@ (80024f4 <HAL_TIM_Base_MspInit+0x84>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	4a1a      	ldr	r2, [pc, #104]	@ (80024f4 <HAL_TIM_Base_MspInit+0x84>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6453      	str	r3, [r2, #68]	@ 0x44
 8002492:	4b18      	ldr	r3, [pc, #96]	@ (80024f4 <HAL_TIM_Base_MspInit+0x84>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	2019      	movs	r0, #25
 80024a4:	f002 fac4 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024a8:	2019      	movs	r0, #25
 80024aa:	f002 fadd 	bl	8004a68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80024ae:	e01a      	b.n	80024e6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a10      	ldr	r2, [pc, #64]	@ (80024f8 <HAL_TIM_Base_MspInit+0x88>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d115      	bne.n	80024e6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <HAL_TIM_Base_MspInit+0x84>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c2:	4a0c      	ldr	r2, [pc, #48]	@ (80024f4 <HAL_TIM_Base_MspInit+0x84>)
 80024c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <HAL_TIM_Base_MspInit+0x84>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	2019      	movs	r0, #25
 80024dc:	f002 faa8 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024e0:	2019      	movs	r0, #25
 80024e2:	f002 fac1 	bl	8004a68 <HAL_NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40010000 	.word	0x40010000
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40014400 	.word	0x40014400

080024fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	@ 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a19      	ldr	r2, [pc, #100]	@ (8002580 <HAL_UART_MspInit+0x84>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12c      	bne.n	8002578 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	4b18      	ldr	r3, [pc, #96]	@ (8002584 <HAL_UART_MspInit+0x88>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002526:	4a17      	ldr	r2, [pc, #92]	@ (8002584 <HAL_UART_MspInit+0x88>)
 8002528:	f043 0310 	orr.w	r3, r3, #16
 800252c:	6453      	str	r3, [r2, #68]	@ 0x44
 800252e:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <HAL_UART_MspInit+0x88>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <HAL_UART_MspInit+0x88>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a10      	ldr	r2, [pc, #64]	@ (8002584 <HAL_UART_MspInit+0x88>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <HAL_UART_MspInit+0x88>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002556:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800255a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002564:	2303      	movs	r3, #3
 8002566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002568:	2307      	movs	r3, #7
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	4805      	ldr	r0, [pc, #20]	@ (8002588 <HAL_UART_MspInit+0x8c>)
 8002574:	f003 fa10 	bl	8005998 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002578:	bf00      	nop
 800257a:	3728      	adds	r7, #40	@ 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40011000 	.word	0x40011000
 8002584:	40023800 	.word	0x40023800
 8002588:	40020000 	.word	0x40020000

0800258c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80025a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <HAL_FMC_MspInit+0x104>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d16f      	bne.n	8002688 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80025a8:	4b39      	ldr	r3, [pc, #228]	@ (8002690 <HAL_FMC_MspInit+0x104>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	4b38      	ldr	r3, [pc, #224]	@ (8002694 <HAL_FMC_MspInit+0x108>)
 80025b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b6:	4a37      	ldr	r2, [pc, #220]	@ (8002694 <HAL_FMC_MspInit+0x108>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6393      	str	r3, [r2, #56]	@ 0x38
 80025be:	4b35      	ldr	r3, [pc, #212]	@ (8002694 <HAL_FMC_MspInit+0x108>)
 80025c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80025ca:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80025ce:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d8:	2303      	movs	r3, #3
 80025da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025dc:	230c      	movs	r3, #12
 80025de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	4619      	mov	r1, r3
 80025e4:	482c      	ldr	r0, [pc, #176]	@ (8002698 <HAL_FMC_MspInit+0x10c>)
 80025e6:	f003 f9d7 	bl	8005998 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80025ea:	2301      	movs	r3, #1
 80025ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025fa:	230c      	movs	r3, #12
 80025fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4826      	ldr	r0, [pc, #152]	@ (800269c <HAL_FMC_MspInit+0x110>)
 8002604:	f003 f9c8 	bl	8005998 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002608:	f248 1333 	movw	r3, #33075	@ 0x8133
 800260c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002616:	2303      	movs	r3, #3
 8002618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800261a:	230c      	movs	r3, #12
 800261c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	4619      	mov	r1, r3
 8002622:	481f      	ldr	r0, [pc, #124]	@ (80026a0 <HAL_FMC_MspInit+0x114>)
 8002624:	f003 f9b8 	bl	8005998 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002628:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800262c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002636:	2303      	movs	r3, #3
 8002638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800263a:	230c      	movs	r3, #12
 800263c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4818      	ldr	r0, [pc, #96]	@ (80026a4 <HAL_FMC_MspInit+0x118>)
 8002644:	f003 f9a8 	bl	8005998 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002648:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800264c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800265a:	230c      	movs	r3, #12
 800265c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4811      	ldr	r0, [pc, #68]	@ (80026a8 <HAL_FMC_MspInit+0x11c>)
 8002664:	f003 f998 	bl	8005998 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002668:	2360      	movs	r3, #96	@ 0x60
 800266a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002674:	2303      	movs	r3, #3
 8002676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002678:	230c      	movs	r3, #12
 800267a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	4619      	mov	r1, r3
 8002680:	480a      	ldr	r0, [pc, #40]	@ (80026ac <HAL_FMC_MspInit+0x120>)
 8002682:	f003 f989 	bl	8005998 <HAL_GPIO_Init>
 8002686:	e000      	b.n	800268a <HAL_FMC_MspInit+0xfe>
    return;
 8002688:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	2000102c 	.word	0x2000102c
 8002694:	40023800 	.word	0x40023800
 8002698:	40021400 	.word	0x40021400
 800269c:	40020800 	.word	0x40020800
 80026a0:	40021800 	.word	0x40021800
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40020c00 	.word	0x40020c00
 80026ac:	40020400 	.word	0x40020400

080026b0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80026b8:	f7ff ff68 	bl	800258c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08e      	sub	sp, #56	@ 0x38
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	4b33      	ldr	r3, [pc, #204]	@ (80027a8 <HAL_InitTick+0xe4>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	4a32      	ldr	r2, [pc, #200]	@ (80027a8 <HAL_InitTick+0xe4>)
 80026de:	f043 0310 	orr.w	r3, r3, #16
 80026e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e4:	4b30      	ldr	r3, [pc, #192]	@ (80027a8 <HAL_InitTick+0xe4>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026f0:	f107 0210 	add.w	r2, r7, #16
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f007 fe5a 	bl	800a3b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800270a:	f007 fe2b 	bl	800a364 <HAL_RCC_GetPCLK1Freq>
 800270e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002710:	e004      	b.n	800271c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002712:	f007 fe27 	bl	800a364 <HAL_RCC_GetPCLK1Freq>
 8002716:	4603      	mov	r3, r0
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800271c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271e:	4a23      	ldr	r2, [pc, #140]	@ (80027ac <HAL_InitTick+0xe8>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	0c9b      	lsrs	r3, r3, #18
 8002726:	3b01      	subs	r3, #1
 8002728:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800272a:	4b21      	ldr	r3, [pc, #132]	@ (80027b0 <HAL_InitTick+0xec>)
 800272c:	4a21      	ldr	r2, [pc, #132]	@ (80027b4 <HAL_InitTick+0xf0>)
 800272e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002730:	4b1f      	ldr	r3, [pc, #124]	@ (80027b0 <HAL_InitTick+0xec>)
 8002732:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002736:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002738:	4a1d      	ldr	r2, [pc, #116]	@ (80027b0 <HAL_InitTick+0xec>)
 800273a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800273e:	4b1c      	ldr	r3, [pc, #112]	@ (80027b0 <HAL_InitTick+0xec>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002744:	4b1a      	ldr	r3, [pc, #104]	@ (80027b0 <HAL_InitTick+0xec>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274a:	4b19      	ldr	r3, [pc, #100]	@ (80027b0 <HAL_InitTick+0xec>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002750:	4817      	ldr	r0, [pc, #92]	@ (80027b0 <HAL_InitTick+0xec>)
 8002752:	f008 feb9 	bl	800b4c8 <HAL_TIM_Base_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800275c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002760:	2b00      	cmp	r3, #0
 8002762:	d11b      	bne.n	800279c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002764:	4812      	ldr	r0, [pc, #72]	@ (80027b0 <HAL_InitTick+0xec>)
 8002766:	f008 feff 	bl	800b568 <HAL_TIM_Base_Start_IT>
 800276a:	4603      	mov	r3, r0
 800276c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002770:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002774:	2b00      	cmp	r3, #0
 8002776:	d111      	bne.n	800279c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002778:	2036      	movs	r0, #54	@ 0x36
 800277a:	f002 f975 	bl	8004a68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b0f      	cmp	r3, #15
 8002782:	d808      	bhi.n	8002796 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002784:	2200      	movs	r2, #0
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	2036      	movs	r0, #54	@ 0x36
 800278a:	f002 f951 	bl	8004a30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800278e:	4a0a      	ldr	r2, [pc, #40]	@ (80027b8 <HAL_InitTick+0xf4>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	e002      	b.n	800279c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800279c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3738      	adds	r7, #56	@ 0x38
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	431bde83 	.word	0x431bde83
 80027b0:	20001030 	.word	0x20001030
 80027b4:	40001000 	.word	0x40001000
 80027b8:	2000016c 	.word	0x2000016c

080027bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027c0:	bf00      	nop
 80027c2:	e7fd      	b.n	80027c0 <NMI_Handler+0x4>

080027c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c8:	bf00      	nop
 80027ca:	e7fd      	b.n	80027c8 <HardFault_Handler+0x4>

080027cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <MemManage_Handler+0x4>

080027d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <BusFault_Handler+0x4>

080027dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <UsageFault_Handler+0x4>

080027e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002820:	4803      	ldr	r0, [pc, #12]	@ (8002830 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002822:	f008 ff11 	bl	800b648 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002826:	4803      	ldr	r0, [pc, #12]	@ (8002834 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002828:	f008 ff0e 	bl	800b648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200003a8 	.word	0x200003a8
 8002834:	200003f0 	.word	0x200003f0

08002838 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800283c:	4802      	ldr	r0, [pc, #8]	@ (8002848 <TIM6_DAC_IRQHandler+0x10>)
 800283e:	f008 ff03 	bl	800b648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20001030 	.word	0x20001030

0800284c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <OTG_HS_IRQHandler+0x10>)
 8002852:	f003 fe53 	bl	80064fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20002128 	.word	0x20002128

08002860 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002864:	4802      	ldr	r0, [pc, #8]	@ (8002870 <LTDC_IRQHandler+0x10>)
 8002866:	f006 fe4b 	bl	8009500 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200002a8 	.word	0x200002a8

08002874 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002878:	4802      	ldr	r0, [pc, #8]	@ (8002884 <DMA2D_IRQHandler+0x10>)
 800287a:	f002 fc3a 	bl	80050f2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000214 	.word	0x20000214

08002888 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	e00a      	b.n	80028b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800289a:	f3af 8000 	nop.w
 800289e:	4601      	mov	r1, r0
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	60ba      	str	r2, [r7, #8]
 80028a6:	b2ca      	uxtb	r2, r1
 80028a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3301      	adds	r3, #1
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	dbf0      	blt.n	800289a <_read+0x12>
  }

  return len;
 80028b8:	687b      	ldr	r3, [r7, #4]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028ea:	605a      	str	r2, [r3, #4]
  return 0;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <_isatty>:

int _isatty(int file)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002902:	2301      	movs	r3, #1
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002934:	4a14      	ldr	r2, [pc, #80]	@ (8002988 <_sbrk+0x5c>)
 8002936:	4b15      	ldr	r3, [pc, #84]	@ (800298c <_sbrk+0x60>)
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002940:	4b13      	ldr	r3, [pc, #76]	@ (8002990 <_sbrk+0x64>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002948:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <_sbrk+0x64>)
 800294a:	4a12      	ldr	r2, [pc, #72]	@ (8002994 <_sbrk+0x68>)
 800294c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <_sbrk+0x64>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	429a      	cmp	r2, r3
 800295a:	d207      	bcs.n	800296c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800295c:	f00e fd04 	bl	8011368 <__errno>
 8002960:	4603      	mov	r3, r0
 8002962:	220c      	movs	r2, #12
 8002964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	e009      	b.n	8002980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800296c:	4b08      	ldr	r3, [pc, #32]	@ (8002990 <_sbrk+0x64>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002972:	4b07      	ldr	r3, [pc, #28]	@ (8002990 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	4a05      	ldr	r2, [pc, #20]	@ (8002990 <_sbrk+0x64>)
 800297c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20030000 	.word	0x20030000
 800298c:	00000400 	.word	0x00000400
 8002990:	20001078 	.word	0x20001078
 8002994:	20002658 	.word	0x20002658

08002998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800299c:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <SystemInit+0x20>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a2:	4a05      	ldr	r2, [pc, #20]	@ (80029b8 <SystemInit+0x20>)
 80029a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80029bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029c0:	f7ff ffea 	bl	8002998 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029c4:	480c      	ldr	r0, [pc, #48]	@ (80029f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029c6:	490d      	ldr	r1, [pc, #52]	@ (80029fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029cc:	e002      	b.n	80029d4 <LoopCopyDataInit>

080029ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d2:	3304      	adds	r3, #4

080029d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d8:	d3f9      	bcc.n	80029ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029da:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e0:	e001      	b.n	80029e6 <LoopFillZerobss>

080029e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e4:	3204      	adds	r2, #4

080029e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e8:	d3fb      	bcc.n	80029e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80029ea:	f00e fcc3 	bl	8011374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ee:	f7fd fe69 	bl	80006c4 <main>
  bx  lr    
 80029f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80029f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80029f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029fc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002a00:	08015544 	.word	0x08015544
  ldr r2, =_sbss
 8002a04:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002a08:	20002654 	.word	0x20002654

08002a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <ADC_IRQHandler>

08002a0e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002a12:	f000 fe49 	bl	80036a8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002a16:	20ca      	movs	r0, #202	@ 0xca
 8002a18:	f000 f95d 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002a1c:	20c3      	movs	r0, #195	@ 0xc3
 8002a1e:	f000 f967 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002a22:	2008      	movs	r0, #8
 8002a24:	f000 f964 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002a28:	2050      	movs	r0, #80	@ 0x50
 8002a2a:	f000 f961 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002a2e:	20cf      	movs	r0, #207	@ 0xcf
 8002a30:	f000 f951 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f000 f95b 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002a3a:	20c1      	movs	r0, #193	@ 0xc1
 8002a3c:	f000 f958 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002a40:	2030      	movs	r0, #48	@ 0x30
 8002a42:	f000 f955 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002a46:	20ed      	movs	r0, #237	@ 0xed
 8002a48:	f000 f945 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002a4c:	2064      	movs	r0, #100	@ 0x64
 8002a4e:	f000 f94f 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002a52:	2003      	movs	r0, #3
 8002a54:	f000 f94c 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002a58:	2012      	movs	r0, #18
 8002a5a:	f000 f949 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002a5e:	2081      	movs	r0, #129	@ 0x81
 8002a60:	f000 f946 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002a64:	20e8      	movs	r0, #232	@ 0xe8
 8002a66:	f000 f936 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002a6a:	2085      	movs	r0, #133	@ 0x85
 8002a6c:	f000 f940 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f000 f93d 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002a76:	2078      	movs	r0, #120	@ 0x78
 8002a78:	f000 f93a 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002a7c:	20cb      	movs	r0, #203	@ 0xcb
 8002a7e:	f000 f92a 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002a82:	2039      	movs	r0, #57	@ 0x39
 8002a84:	f000 f934 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002a88:	202c      	movs	r0, #44	@ 0x2c
 8002a8a:	f000 f931 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f000 f92e 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002a94:	2034      	movs	r0, #52	@ 0x34
 8002a96:	f000 f92b 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002a9a:	2002      	movs	r0, #2
 8002a9c:	f000 f928 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002aa0:	20f7      	movs	r0, #247	@ 0xf7
 8002aa2:	f000 f918 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002aa6:	2020      	movs	r0, #32
 8002aa8:	f000 f922 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002aac:	20ea      	movs	r0, #234	@ 0xea
 8002aae:	f000 f912 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f000 f91c 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f000 f919 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002abe:	20b1      	movs	r0, #177	@ 0xb1
 8002ac0:	f000 f909 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f000 f913 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002aca:	201b      	movs	r0, #27
 8002acc:	f000 f910 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002ad0:	20b6      	movs	r0, #182	@ 0xb6
 8002ad2:	f000 f900 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002ad6:	200a      	movs	r0, #10
 8002ad8:	f000 f90a 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002adc:	20a2      	movs	r0, #162	@ 0xa2
 8002ade:	f000 f907 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002ae2:	20c0      	movs	r0, #192	@ 0xc0
 8002ae4:	f000 f8f7 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002ae8:	2010      	movs	r0, #16
 8002aea:	f000 f901 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002aee:	20c1      	movs	r0, #193	@ 0xc1
 8002af0:	f000 f8f1 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002af4:	2010      	movs	r0, #16
 8002af6:	f000 f8fb 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002afa:	20c5      	movs	r0, #197	@ 0xc5
 8002afc:	f000 f8eb 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002b00:	2045      	movs	r0, #69	@ 0x45
 8002b02:	f000 f8f5 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002b06:	2015      	movs	r0, #21
 8002b08:	f000 f8f2 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002b0c:	20c7      	movs	r0, #199	@ 0xc7
 8002b0e:	f000 f8e2 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002b12:	2090      	movs	r0, #144	@ 0x90
 8002b14:	f000 f8ec 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002b18:	2036      	movs	r0, #54	@ 0x36
 8002b1a:	f000 f8dc 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002b1e:	20c8      	movs	r0, #200	@ 0xc8
 8002b20:	f000 f8e6 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002b24:	20f2      	movs	r0, #242	@ 0xf2
 8002b26:	f000 f8d6 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f000 f8e0 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002b30:	20b0      	movs	r0, #176	@ 0xb0
 8002b32:	f000 f8d0 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002b36:	20c2      	movs	r0, #194	@ 0xc2
 8002b38:	f000 f8da 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002b3c:	20b6      	movs	r0, #182	@ 0xb6
 8002b3e:	f000 f8ca 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002b42:	200a      	movs	r0, #10
 8002b44:	f000 f8d4 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002b48:	20a7      	movs	r0, #167	@ 0xa7
 8002b4a:	f000 f8d1 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002b4e:	2027      	movs	r0, #39	@ 0x27
 8002b50:	f000 f8ce 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002b54:	2004      	movs	r0, #4
 8002b56:	f000 f8cb 	bl	8002cf0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002b5a:	202a      	movs	r0, #42	@ 0x2a
 8002b5c:	f000 f8bb 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b60:	2000      	movs	r0, #0
 8002b62:	f000 f8c5 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f000 f8c2 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f000 f8bf 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002b72:	20ef      	movs	r0, #239	@ 0xef
 8002b74:	f000 f8bc 	bl	8002cf0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002b78:	202b      	movs	r0, #43	@ 0x2b
 8002b7a:	f000 f8ac 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f000 f8b6 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f000 f8b3 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f000 f8b0 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002b90:	203f      	movs	r0, #63	@ 0x3f
 8002b92:	f000 f8ad 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002b96:	20f6      	movs	r0, #246	@ 0xf6
 8002b98:	f000 f89d 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f000 f8a7 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f000 f8a4 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002ba8:	2006      	movs	r0, #6
 8002baa:	f000 f8a1 	bl	8002cf0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002bae:	202c      	movs	r0, #44	@ 0x2c
 8002bb0:	f000 f891 	bl	8002cd6 <ili9341_WriteReg>
  LCD_Delay(200);
 8002bb4:	20c8      	movs	r0, #200	@ 0xc8
 8002bb6:	f000 fe65 	bl	8003884 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002bba:	2026      	movs	r0, #38	@ 0x26
 8002bbc:	f000 f88b 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	f000 f895 	bl	8002cf0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002bc6:	20e0      	movs	r0, #224	@ 0xe0
 8002bc8:	f000 f885 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002bcc:	200f      	movs	r0, #15
 8002bce:	f000 f88f 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002bd2:	2029      	movs	r0, #41	@ 0x29
 8002bd4:	f000 f88c 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002bd8:	2024      	movs	r0, #36	@ 0x24
 8002bda:	f000 f889 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002bde:	200c      	movs	r0, #12
 8002be0:	f000 f886 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002be4:	200e      	movs	r0, #14
 8002be6:	f000 f883 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002bea:	2009      	movs	r0, #9
 8002bec:	f000 f880 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002bf0:	204e      	movs	r0, #78	@ 0x4e
 8002bf2:	f000 f87d 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002bf6:	2078      	movs	r0, #120	@ 0x78
 8002bf8:	f000 f87a 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002bfc:	203c      	movs	r0, #60	@ 0x3c
 8002bfe:	f000 f877 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002c02:	2009      	movs	r0, #9
 8002c04:	f000 f874 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002c08:	2013      	movs	r0, #19
 8002c0a:	f000 f871 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002c0e:	2005      	movs	r0, #5
 8002c10:	f000 f86e 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002c14:	2017      	movs	r0, #23
 8002c16:	f000 f86b 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002c1a:	2011      	movs	r0, #17
 8002c1c:	f000 f868 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f000 f865 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002c26:	20e1      	movs	r0, #225	@ 0xe1
 8002c28:	f000 f855 	bl	8002cd6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f000 f85f 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002c32:	2016      	movs	r0, #22
 8002c34:	f000 f85c 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002c38:	201b      	movs	r0, #27
 8002c3a:	f000 f859 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002c3e:	2004      	movs	r0, #4
 8002c40:	f000 f856 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002c44:	2011      	movs	r0, #17
 8002c46:	f000 f853 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002c4a:	2007      	movs	r0, #7
 8002c4c:	f000 f850 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002c50:	2031      	movs	r0, #49	@ 0x31
 8002c52:	f000 f84d 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002c56:	2033      	movs	r0, #51	@ 0x33
 8002c58:	f000 f84a 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002c5c:	2042      	movs	r0, #66	@ 0x42
 8002c5e:	f000 f847 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002c62:	2005      	movs	r0, #5
 8002c64:	f000 f844 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002c68:	200c      	movs	r0, #12
 8002c6a:	f000 f841 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002c6e:	200a      	movs	r0, #10
 8002c70:	f000 f83e 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002c74:	2028      	movs	r0, #40	@ 0x28
 8002c76:	f000 f83b 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002c7a:	202f      	movs	r0, #47	@ 0x2f
 8002c7c:	f000 f838 	bl	8002cf0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002c80:	200f      	movs	r0, #15
 8002c82:	f000 f835 	bl	8002cf0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002c86:	2011      	movs	r0, #17
 8002c88:	f000 f825 	bl	8002cd6 <ili9341_WriteReg>
  LCD_Delay(200);
 8002c8c:	20c8      	movs	r0, #200	@ 0xc8
 8002c8e:	f000 fdf9 	bl	8003884 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002c92:	2029      	movs	r0, #41	@ 0x29
 8002c94:	f000 f81f 	bl	8002cd6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002c98:	202c      	movs	r0, #44	@ 0x2c
 8002c9a:	f000 f81c 	bl	8002cd6 <ili9341_WriteReg>
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002ca6:	f000 fcff 	bl	80036a8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002caa:	2103      	movs	r1, #3
 8002cac:	20d3      	movs	r0, #211	@ 0xd3
 8002cae:	f000 f82c 	bl	8002d0a <ili9341_ReadData>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	b29b      	uxth	r3, r3
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002cbe:	2029      	movs	r0, #41	@ 0x29
 8002cc0:	f000 f809 	bl	8002cd6 <ili9341_WriteReg>
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002ccc:	2028      	movs	r0, #40	@ 0x28
 8002cce:	f000 f802 	bl	8002cd6 <ili9341_WriteReg>
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fd7a 	bl	80037dc <LCD_IO_WriteReg>
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fd4b 	bl	8003798 <LCD_IO_WriteData>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	4603      	mov	r3, r0
 8002d12:	460a      	mov	r2, r1
 8002d14:	80fb      	strh	r3, [r7, #6]
 8002d16:	4613      	mov	r3, r2
 8002d18:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002d1a:	797a      	ldrb	r2, [r7, #5]
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fd7d 	bl	8003820 <LCD_IO_ReadData>
 8002d26:	4603      	mov	r3, r0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002d34:	23f0      	movs	r3, #240	@ 0xf0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002d44:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fa59 	bl	8003218 <stmpe811_GetInstance>
 8002d66:	4603      	mov	r3, r0
 8002d68:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	2bff      	cmp	r3, #255	@ 0xff
 8002d6e:	d112      	bne.n	8002d96 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f000 fa51 	bl	8003218 <stmpe811_GetInstance>
 8002d76:	4603      	mov	r3, r0
 8002d78:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002d7a:	7bbb      	ldrb	r3, [r7, #14]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d80a      	bhi.n	8002d96 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002d80:	7bbb      	ldrb	r3, [r7, #14]
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	b2d1      	uxtb	r1, r2
 8002d86:	4a06      	ldr	r2, [pc, #24]	@ (8002da0 <stmpe811_Init+0x4c>)
 8002d88:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002d8a:	f000 fd86 	bl	800389a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f807 	bl	8002da4 <stmpe811_Reset>
    }
  }
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	2000107c 	.word	0x2000107c

08002da4 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2202      	movs	r2, #2
 8002db4:	2103      	movs	r1, #3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fd7b 	bl	80038b2 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002dbc:	200a      	movs	r0, #10
 8002dbe:	f000 fdb4 	bl	800392a <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2103      	movs	r1, #3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fd71 	bl	80038b2 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002dd0:	2002      	movs	r0, #2
 8002dd2:	f000 fdaa 	bl	800392a <IOE_Delay>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002dde:	b590      	push	{r4, r7, lr}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002de8:	f000 fd57 	bl	800389a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fd70 	bl	80038d8 <IOE_Read>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fd67 	bl	80038d8 <IOE_Read>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002e0e:	4323      	orrs	r3, r4
 8002e10:	b21b      	sxth	r3, r3
 8002e12:	b29b      	uxth	r3, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd90      	pop	{r4, r7, pc}

08002e1c <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2109      	movs	r1, #9
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fd51 	bl	80038d8 <IOE_Read>
 8002e36:	4603      	mov	r3, r0
 8002e38:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	2109      	movs	r1, #9
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fd31 	bl	80038b2 <IOE_Write>
}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2109      	movs	r1, #9
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fd33 	bl	80038d8 <IOE_Read>
 8002e72:	4603      	mov	r3, r0
 8002e74:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	7bfa      	ldrb	r2, [r7, #15]
 8002e84:	2109      	movs	r1, #9
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fd13 	bl	80038b2 <IOE_Write>
    
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	460a      	mov	r2, r1
 8002e9e:	80fb      	strh	r3, [r7, #6]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002ea8:	88fb      	ldrh	r3, [r7, #6]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	210a      	movs	r1, #10
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fd12 	bl	80038d8 <IOE_Read>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	797b      	ldrb	r3, [r7, #5]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	210a      	movs	r1, #10
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fcf2 	bl	80038b2 <IOE_Write>
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	460a      	mov	r2, r1
 8002ee0:	80fb      	strh	r3, [r7, #6]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	210a      	movs	r1, #10
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fcf1 	bl	80038d8 <IOE_Read>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002efa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	b25a      	sxtb	r2, r3
 8002f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f06:	4013      	ands	r3, r2
 8002f08:	b25b      	sxtb	r3, r3
 8002f0a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	210a      	movs	r1, #10
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fccc 	bl	80038b2 <IOE_Write>
}
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	460a      	mov	r2, r1
 8002f2c:	80fb      	strh	r3, [r7, #6]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	210b      	movs	r1, #11
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fccd 	bl	80038d8 <IOE_Read>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	461a      	mov	r2, r3
 8002f42:	797b      	ldrb	r3, [r7, #5]
 8002f44:	4013      	ands	r3, r2
 8002f46:	b2db      	uxtb	r3, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	460a      	mov	r2, r1
 8002f5a:	80fb      	strh	r3, [r7, #6]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	797a      	ldrb	r2, [r7, #5]
 8002f66:	210b      	movs	r1, #11
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fca2 	bl	80038b2 <IOE_Write>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	6039      	str	r1, [r7, #0]
 8002f80:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2117      	movs	r1, #23
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fca3 	bl	80038d8 <IOE_Read>
 8002f92:	4603      	mov	r3, r0
 8002f94:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	b25a      	sxtb	r2, r3
 8002f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	b25b      	sxtb	r3, r3
 8002fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	2117      	movs	r1, #23
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fc7e 	bl	80038b2 <IOE_Write>
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2104      	movs	r1, #4
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fc82 	bl	80038d8 <IOE_Read>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	f023 0304 	bic.w	r3, r3, #4
 8002fde:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	2104      	movs	r1, #4
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fc62 	bl	80038b2 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	21f0      	movs	r1, #240	@ 0xf0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ffbf 	bl	8002f76 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	7bfa      	ldrb	r2, [r7, #15]
 8003006:	2104      	movs	r1, #4
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fc52 	bl	80038b2 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2249      	movs	r2, #73	@ 0x49
 8003014:	2120      	movs	r1, #32
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fc4b 	bl	80038b2 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 800301c:	2002      	movs	r0, #2
 800301e:	f000 fc84 	bl	800392a <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2201      	movs	r2, #1
 8003028:	2121      	movs	r1, #33	@ 0x21
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fc41 	bl	80038b2 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	229a      	movs	r2, #154	@ 0x9a
 8003036:	2141      	movs	r1, #65	@ 0x41
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fc3a 	bl	80038b2 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2201      	movs	r2, #1
 8003044:	214a      	movs	r1, #74	@ 0x4a
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fc33 	bl	80038b2 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2201      	movs	r2, #1
 8003052:	214b      	movs	r1, #75	@ 0x4b
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fc2c 	bl	80038b2 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2200      	movs	r2, #0
 8003060:	214b      	movs	r1, #75	@ 0x4b
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fc25 	bl	80038b2 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2201      	movs	r2, #1
 800306e:	2156      	movs	r1, #86	@ 0x56
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fc1e 	bl	80038b2 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2201      	movs	r2, #1
 800307c:	2158      	movs	r1, #88	@ 0x58
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fc17 	bl	80038b2 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2201      	movs	r2, #1
 800308a:	2140      	movs	r1, #64	@ 0x40
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fc10 	bl	80038b2 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	22ff      	movs	r2, #255	@ 0xff
 8003098:	210b      	movs	r1, #11
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fc09 	bl	80038b2 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 80030a0:	2002      	movs	r0, #2
 80030a2:	f000 fc42 	bl	800392a <IOE_Delay>
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2140      	movs	r1, #64	@ 0x40
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fc08 	bl	80038d8 <IOE_Read>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ce:	2b80      	cmp	r3, #128	@ 0x80
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80030da:	7bbb      	ldrb	r3, [r7, #14]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00b      	beq.n	80030f8 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	214c      	movs	r1, #76	@ 0x4c
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fbf6 	bl	80038d8 <IOE_Read>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d010      	beq.n	8003114 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	e00d      	b.n	8003114 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2201      	movs	r2, #1
 80030fe:	214b      	movs	r1, #75	@ 0x4b
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fbd6 	bl	80038b2 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2200      	movs	r2, #0
 800310c:	214b      	movs	r1, #75	@ 0x4b
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fbcf 	bl	80038b2 <IOE_Write>
  }
  
  return ret;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	4603      	mov	r3, r0
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800312c:	89fb      	ldrh	r3, [r7, #14]
 800312e:	b2d8      	uxtb	r0, r3
 8003130:	f107 0210 	add.w	r2, r7, #16
 8003134:	2304      	movs	r3, #4
 8003136:	21d7      	movs	r1, #215	@ 0xd7
 8003138:	f000 fbe1 	bl	80038fe <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800313c:	7c3b      	ldrb	r3, [r7, #16]
 800313e:	061a      	lsls	r2, r3, #24
 8003140:	7c7b      	ldrb	r3, [r7, #17]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	431a      	orrs	r2, r3
 8003146:	7cbb      	ldrb	r3, [r7, #18]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	4313      	orrs	r3, r2
 800314c:	7cfa      	ldrb	r2, [r7, #19]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	0d1b      	lsrs	r3, r3, #20
 8003156:	b29a      	uxth	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	b29b      	uxth	r3, r3
 8003162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800316c:	89fb      	ldrh	r3, [r7, #14]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2201      	movs	r2, #1
 8003172:	214b      	movs	r1, #75	@ 0x4b
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fb9c 	bl	80038b2 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800317a:	89fb      	ldrh	r3, [r7, #14]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2200      	movs	r2, #0
 8003180:	214b      	movs	r1, #75	@ 0x4b
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fb95 	bl	80038b2 <IOE_Write>
}
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800319a:	f000 fb84 	bl	80038a6 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	211f      	movs	r1, #31
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fe76 	bl	8002e94 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fe36 	bl	8002e1c <stmpe811_EnableGlobalIT>
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fe47 	bl	8002e58 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	211f      	movs	r1, #31
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fe81 	bl	8002ed6 <stmpe811_DisableITSource>
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	211f      	movs	r1, #31
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fe99 	bl	8002f22 <stmpe811_ReadGITStatus>
 80031f0:	4603      	mov	r3, r0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	4603      	mov	r3, r0
 8003202:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	211f      	movs	r1, #31
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fea1 	bl	8002f50 <stmpe811_ClearGlobalIT>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	e00b      	b.n	8003244 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <stmpe811_GetInstance+0x40>)
 8003230:	5cd3      	ldrb	r3, [r2, r3]
 8003232:	461a      	mov	r2, r3
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	e006      	b.n	800324c <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	3301      	adds	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d9f0      	bls.n	800322c <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800324a:	23ff      	movs	r3, #255	@ 0xff
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	2000107c 	.word	0x2000107c

0800325c <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	@ 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a33      	ldr	r2, [pc, #204]	@ (8003338 <I2Cx_MspInit+0xdc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d15f      	bne.n	800332e <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	4b32      	ldr	r3, [pc, #200]	@ (800333c <I2Cx_MspInit+0xe0>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003276:	4a31      	ldr	r2, [pc, #196]	@ (800333c <I2Cx_MspInit+0xe0>)
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	6313      	str	r3, [r2, #48]	@ 0x30
 800327e:	4b2f      	ldr	r3, [pc, #188]	@ (800333c <I2Cx_MspInit+0xe0>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	4b2b      	ldr	r3, [pc, #172]	@ (800333c <I2Cx_MspInit+0xe0>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003292:	4a2a      	ldr	r2, [pc, #168]	@ (800333c <I2Cx_MspInit+0xe0>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6313      	str	r3, [r2, #48]	@ 0x30
 800329a:	4b28      	ldr	r3, [pc, #160]	@ (800333c <I2Cx_MspInit+0xe0>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80032a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80032ac:	2312      	movs	r3, #18
 80032ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80032b4:	2302      	movs	r3, #2
 80032b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80032b8:	2304      	movs	r3, #4
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	4619      	mov	r1, r3
 80032c2:	481f      	ldr	r0, [pc, #124]	@ (8003340 <I2Cx_MspInit+0xe4>)
 80032c4:	f002 fb68 	bl	8005998 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80032c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032cc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80032ce:	f107 0314 	add.w	r3, r7, #20
 80032d2:	4619      	mov	r1, r3
 80032d4:	481b      	ldr	r0, [pc, #108]	@ (8003344 <I2Cx_MspInit+0xe8>)
 80032d6:	f002 fb5f 	bl	8005998 <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	4b17      	ldr	r3, [pc, #92]	@ (800333c <I2Cx_MspInit+0xe0>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	4a16      	ldr	r2, [pc, #88]	@ (800333c <I2Cx_MspInit+0xe0>)
 80032e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ea:	4b14      	ldr	r3, [pc, #80]	@ (800333c <I2Cx_MspInit+0xe0>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 80032f6:	4b11      	ldr	r3, [pc, #68]	@ (800333c <I2Cx_MspInit+0xe0>)
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4a10      	ldr	r2, [pc, #64]	@ (800333c <I2Cx_MspInit+0xe0>)
 80032fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003300:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 8003302:	4b0e      	ldr	r3, [pc, #56]	@ (800333c <I2Cx_MspInit+0xe0>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4a0d      	ldr	r2, [pc, #52]	@ (800333c <I2Cx_MspInit+0xe0>)
 8003308:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800330c:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	210f      	movs	r1, #15
 8003312:	2048      	movs	r0, #72	@ 0x48
 8003314:	f001 fb8c 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003318:	2048      	movs	r0, #72	@ 0x48
 800331a:	f001 fba5 	bl	8004a68 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800331e:	2200      	movs	r2, #0
 8003320:	210f      	movs	r1, #15
 8003322:	2049      	movs	r0, #73	@ 0x49
 8003324:	f001 fb84 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003328:	2049      	movs	r0, #73	@ 0x49
 800332a:	f001 fb9d 	bl	8004a68 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800332e:	bf00      	nop
 8003330:	3728      	adds	r7, #40	@ 0x28
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40005c00 	.word	0x40005c00
 800333c:	40023800 	.word	0x40023800
 8003340:	40020000 	.word	0x40020000
 8003344:	40020800 	.word	0x40020800

08003348 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800334c:	4814      	ldr	r0, [pc, #80]	@ (80033a0 <I2Cx_Init+0x58>)
 800334e:	f005 fbc9 	bl	8008ae4 <HAL_I2C_GetState>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d121      	bne.n	800339c <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8003358:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <I2Cx_Init+0x58>)
 800335a:	4a12      	ldr	r2, [pc, #72]	@ (80033a4 <I2Cx_Init+0x5c>)
 800335c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800335e:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <I2Cx_Init+0x58>)
 8003360:	4a11      	ldr	r2, [pc, #68]	@ (80033a8 <I2Cx_Init+0x60>)
 8003362:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003364:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <I2Cx_Init+0x58>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800336a:	4b0d      	ldr	r3, [pc, #52]	@ (80033a0 <I2Cx_Init+0x58>)
 800336c:	2200      	movs	r2, #0
 800336e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <I2Cx_Init+0x58>)
 8003372:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003376:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003378:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <I2Cx_Init+0x58>)
 800337a:	2200      	movs	r2, #0
 800337c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800337e:	4b08      	ldr	r3, [pc, #32]	@ (80033a0 <I2Cx_Init+0x58>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003384:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <I2Cx_Init+0x58>)
 8003386:	2200      	movs	r2, #0
 8003388:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 800338a:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <I2Cx_Init+0x58>)
 800338c:	2200      	movs	r2, #0
 800338e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8003390:	4803      	ldr	r0, [pc, #12]	@ (80033a0 <I2Cx_Init+0x58>)
 8003392:	f7ff ff63 	bl	800325c <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8003396:	4802      	ldr	r0, [pc, #8]	@ (80033a0 <I2Cx_Init+0x58>)
 8003398:	f004 ff04 	bl	80081a4 <HAL_I2C_Init>
  }
}
 800339c:	bf00      	nop
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20001080 	.word	0x20001080
 80033a4:	40005c00 	.word	0x40005c00
 80033a8:	000186a0 	.word	0x000186a0

080033ac <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	603b      	str	r3, [r7, #0]
 80033b6:	4b13      	ldr	r3, [pc, #76]	@ (8003404 <I2Cx_ITConfig+0x58>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	4a12      	ldr	r2, [pc, #72]	@ (8003404 <I2Cx_ITConfig+0x58>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033c2:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <I2Cx_ITConfig+0x58>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80033ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80033d4:	2301      	movs	r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80033dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80033e0:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	4619      	mov	r1, r3
 80033e6:	4808      	ldr	r0, [pc, #32]	@ (8003408 <I2Cx_ITConfig+0x5c>)
 80033e8:	f002 fad6 	bl	8005998 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80033ec:	2200      	movs	r2, #0
 80033ee:	210f      	movs	r1, #15
 80033f0:	2028      	movs	r0, #40	@ 0x28
 80033f2:	f001 fb1d 	bl	8004a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80033f6:	2028      	movs	r0, #40	@ 0x28
 80033f8:	f001 fb36 	bl	8004a68 <HAL_NVIC_EnableIRQ>
}
 80033fc:	bf00      	nop
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40023800 	.word	0x40023800
 8003408:	40020000 	.word	0x40020000

0800340c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af04      	add	r7, sp, #16
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
 8003416:	460b      	mov	r3, r1
 8003418:	71bb      	strb	r3, [r7, #6]
 800341a:	4613      	mov	r3, r2
 800341c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	b299      	uxth	r1, r3
 8003426:	79bb      	ldrb	r3, [r7, #6]
 8003428:	b29a      	uxth	r2, r3
 800342a:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <I2Cx_WriteData+0x4c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	9302      	str	r3, [sp, #8]
 8003430:	2301      	movs	r3, #1
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	1d7b      	adds	r3, r7, #5
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	2301      	movs	r3, #1
 800343a:	4808      	ldr	r0, [pc, #32]	@ (800345c <I2Cx_WriteData+0x50>)
 800343c:	f005 f826 	bl	800848c <HAL_I2C_Mem_Write>
 8003440:	4603      	mov	r3, r0
 8003442:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800344a:	f000 f863 	bl	8003514 <I2Cx_Error>
  }
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000150 	.word	0x20000150
 800345c:	20001080 	.word	0x20001080

08003460 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af04      	add	r7, sp, #16
 8003466:	4603      	mov	r3, r0
 8003468:	460a      	mov	r2, r1
 800346a:	71fb      	strb	r3, [r7, #7]
 800346c:	4613      	mov	r3, r2
 800346e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	b299      	uxth	r1, r3
 800347c:	79bb      	ldrb	r3, [r7, #6]
 800347e:	b29a      	uxth	r2, r3
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <I2Cx_ReadData+0x50>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	9302      	str	r3, [sp, #8]
 8003486:	2301      	movs	r3, #1
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	f107 030e 	add.w	r3, r7, #14
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2301      	movs	r3, #1
 8003492:	4808      	ldr	r0, [pc, #32]	@ (80034b4 <I2Cx_ReadData+0x54>)
 8003494:	f005 f8f4 	bl	8008680 <HAL_I2C_Mem_Read>
 8003498:	4603      	mov	r3, r0
 800349a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80034a2:	f000 f837 	bl	8003514 <I2Cx_Error>

  }
  return value;
 80034a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000150 	.word	0x20000150
 80034b4:	20001080 	.word	0x20001080

080034b8 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af04      	add	r7, sp, #16
 80034be:	603a      	str	r2, [r7, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
 80034c6:	460b      	mov	r3, r1
 80034c8:	71bb      	strb	r3, [r7, #6]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	b299      	uxth	r1, r3
 80034d6:	79bb      	ldrb	r3, [r7, #6]
 80034d8:	b29a      	uxth	r2, r3
 80034da:	4b0c      	ldr	r3, [pc, #48]	@ (800350c <I2Cx_ReadBuffer+0x54>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	9302      	str	r3, [sp, #8]
 80034e0:	88bb      	ldrh	r3, [r7, #4]
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2301      	movs	r3, #1
 80034ea:	4809      	ldr	r0, [pc, #36]	@ (8003510 <I2Cx_ReadBuffer+0x58>)
 80034ec:	f005 f8c8 	bl	8008680 <HAL_I2C_Mem_Read>
 80034f0:	4603      	mov	r3, r0
 80034f2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e002      	b.n	8003504 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80034fe:	f000 f809 	bl	8003514 <I2Cx_Error>

    return 1;
 8003502:	2301      	movs	r3, #1
  }
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000150 	.word	0x20000150
 8003510:	20001080 	.word	0x20001080

08003514 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003518:	4803      	ldr	r0, [pc, #12]	@ (8003528 <I2Cx_Error+0x14>)
 800351a:	f004 ff87 	bl	800842c <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800351e:	f7ff ff13 	bl	8003348 <I2Cx_Init>
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20001080 	.word	0x20001080

0800352c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003530:	4819      	ldr	r0, [pc, #100]	@ (8003598 <SPIx_Init+0x6c>)
 8003532:	f007 fe79 	bl	800b228 <HAL_SPI_GetState>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d12b      	bne.n	8003594 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800353c:	4b16      	ldr	r3, [pc, #88]	@ (8003598 <SPIx_Init+0x6c>)
 800353e:	4a17      	ldr	r2, [pc, #92]	@ (800359c <SPIx_Init+0x70>)
 8003540:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003542:	4b15      	ldr	r3, [pc, #84]	@ (8003598 <SPIx_Init+0x6c>)
 8003544:	2218      	movs	r2, #24
 8003546:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003548:	4b13      	ldr	r3, [pc, #76]	@ (8003598 <SPIx_Init+0x6c>)
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800354e:	4b12      	ldr	r3, [pc, #72]	@ (8003598 <SPIx_Init+0x6c>)
 8003550:	2200      	movs	r2, #0
 8003552:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003554:	4b10      	ldr	r3, [pc, #64]	@ (8003598 <SPIx_Init+0x6c>)
 8003556:	2200      	movs	r2, #0
 8003558:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800355a:	4b0f      	ldr	r3, [pc, #60]	@ (8003598 <SPIx_Init+0x6c>)
 800355c:	2200      	movs	r2, #0
 800355e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003560:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <SPIx_Init+0x6c>)
 8003562:	2207      	movs	r2, #7
 8003564:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003566:	4b0c      	ldr	r3, [pc, #48]	@ (8003598 <SPIx_Init+0x6c>)
 8003568:	2200      	movs	r2, #0
 800356a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800356c:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <SPIx_Init+0x6c>)
 800356e:	2200      	movs	r2, #0
 8003570:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003572:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <SPIx_Init+0x6c>)
 8003574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003578:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800357a:	4b07      	ldr	r3, [pc, #28]	@ (8003598 <SPIx_Init+0x6c>)
 800357c:	2200      	movs	r2, #0
 800357e:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003580:	4b05      	ldr	r3, [pc, #20]	@ (8003598 <SPIx_Init+0x6c>)
 8003582:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003586:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8003588:	4803      	ldr	r0, [pc, #12]	@ (8003598 <SPIx_Init+0x6c>)
 800358a:	f000 f853 	bl	8003634 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800358e:	4802      	ldr	r0, [pc, #8]	@ (8003598 <SPIx_Init+0x6c>)
 8003590:	f007 f993 	bl	800a8ba <HAL_SPI_Init>
  }
}
 8003594:	bf00      	nop
 8003596:	bd80      	pop	{r7, pc}
 8003598:	200010d4 	.word	0x200010d4
 800359c:	40015000 	.word	0x40015000

080035a0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <SPIx_Read+0x38>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f107 0108 	add.w	r1, r7, #8
 80035ba:	4808      	ldr	r0, [pc, #32]	@ (80035dc <SPIx_Read+0x3c>)
 80035bc:	f007 fb72 	bl	800aca4 <HAL_SPI_Receive>
 80035c0:	4603      	mov	r3, r0
 80035c2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80035ca:	f000 f827 	bl	800361c <SPIx_Error>
  }

  return readvalue;
 80035ce:	68bb      	ldr	r3, [r7, #8]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000154 	.word	0x20000154
 80035dc:	200010d4 	.word	0x200010d4

080035e0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 80035ee:	4b09      	ldr	r3, [pc, #36]	@ (8003614 <SPIx_Write+0x34>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	1db9      	adds	r1, r7, #6
 80035f4:	2201      	movs	r2, #1
 80035f6:	4808      	ldr	r0, [pc, #32]	@ (8003618 <SPIx_Write+0x38>)
 80035f8:	f007 fa10 	bl	800aa1c <HAL_SPI_Transmit>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003606:	f000 f809 	bl	800361c <SPIx_Error>
  }
}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000154 	.word	0x20000154
 8003618:	200010d4 	.word	0x200010d4

0800361c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003620:	4803      	ldr	r0, [pc, #12]	@ (8003630 <SPIx_Error+0x14>)
 8003622:	f007 f9d3 	bl	800a9cc <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003626:	f7ff ff81 	bl	800352c <SPIx_Init>
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	200010d4 	.word	0x200010d4

08003634 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	@ 0x28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800363c:	2300      	movs	r3, #0
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	4b17      	ldr	r3, [pc, #92]	@ (80036a0 <SPIx_MspInit+0x6c>)
 8003642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003644:	4a16      	ldr	r2, [pc, #88]	@ (80036a0 <SPIx_MspInit+0x6c>)
 8003646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800364a:	6453      	str	r3, [r2, #68]	@ 0x44
 800364c:	4b14      	ldr	r3, [pc, #80]	@ (80036a0 <SPIx_MspInit+0x6c>)
 800364e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003650:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	4b10      	ldr	r3, [pc, #64]	@ (80036a0 <SPIx_MspInit+0x6c>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003660:	4a0f      	ldr	r2, [pc, #60]	@ (80036a0 <SPIx_MspInit+0x6c>)
 8003662:	f043 0320 	orr.w	r3, r3, #32
 8003666:	6313      	str	r3, [r2, #48]	@ 0x30
 8003668:	4b0d      	ldr	r3, [pc, #52]	@ (80036a0 <SPIx_MspInit+0x6c>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003674:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003678:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800367e:	2302      	movs	r3, #2
 8003680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003682:	2301      	movs	r3, #1
 8003684:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003686:	2305      	movs	r3, #5
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800368a:	f107 0314 	add.w	r3, r7, #20
 800368e:	4619      	mov	r1, r3
 8003690:	4804      	ldr	r0, [pc, #16]	@ (80036a4 <SPIx_MspInit+0x70>)
 8003692:	f002 f981 	bl	8005998 <HAL_GPIO_Init>
}
 8003696:	bf00      	nop
 8003698:	3728      	adds	r7, #40	@ 0x28
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40021400 	.word	0x40021400

080036a8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 80036ae:	4b36      	ldr	r3, [pc, #216]	@ (8003788 <LCD_IO_Init+0xe0>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d164      	bne.n	8003780 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80036b6:	4b34      	ldr	r3, [pc, #208]	@ (8003788 <LCD_IO_Init+0xe0>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80036bc:	2300      	movs	r3, #0
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	4b32      	ldr	r3, [pc, #200]	@ (800378c <LCD_IO_Init+0xe4>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c4:	4a31      	ldr	r2, [pc, #196]	@ (800378c <LCD_IO_Init+0xe4>)
 80036c6:	f043 0308 	orr.w	r3, r3, #8
 80036ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80036cc:	4b2f      	ldr	r3, [pc, #188]	@ (800378c <LCD_IO_Init+0xe4>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80036d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80036de:	2301      	movs	r3, #1
 80036e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80036e6:	2302      	movs	r3, #2
 80036e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80036ea:	f107 030c 	add.w	r3, r7, #12
 80036ee:	4619      	mov	r1, r3
 80036f0:	4827      	ldr	r0, [pc, #156]	@ (8003790 <LCD_IO_Init+0xe8>)
 80036f2:	f002 f951 	bl	8005998 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	607b      	str	r3, [r7, #4]
 80036fa:	4b24      	ldr	r3, [pc, #144]	@ (800378c <LCD_IO_Init+0xe4>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	4a23      	ldr	r2, [pc, #140]	@ (800378c <LCD_IO_Init+0xe4>)
 8003700:	f043 0308 	orr.w	r3, r3, #8
 8003704:	6313      	str	r3, [r2, #48]	@ 0x30
 8003706:	4b21      	ldr	r3, [pc, #132]	@ (800378c <LCD_IO_Init+0xe4>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003716:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003718:	2301      	movs	r3, #1
 800371a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003720:	2302      	movs	r3, #2
 8003722:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003724:	f107 030c 	add.w	r3, r7, #12
 8003728:	4619      	mov	r1, r3
 800372a:	4819      	ldr	r0, [pc, #100]	@ (8003790 <LCD_IO_Init+0xe8>)
 800372c:	f002 f934 	bl	8005998 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003730:	2300      	movs	r3, #0
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4b15      	ldr	r3, [pc, #84]	@ (800378c <LCD_IO_Init+0xe4>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	4a14      	ldr	r2, [pc, #80]	@ (800378c <LCD_IO_Init+0xe4>)
 800373a:	f043 0304 	orr.w	r3, r3, #4
 800373e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003740:	4b12      	ldr	r3, [pc, #72]	@ (800378c <LCD_IO_Init+0xe4>)
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800374c:	2304      	movs	r3, #4
 800374e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003750:	2301      	movs	r3, #1
 8003752:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003758:	2302      	movs	r3, #2
 800375a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800375c:	f107 030c 	add.w	r3, r7, #12
 8003760:	4619      	mov	r1, r3
 8003762:	480c      	ldr	r0, [pc, #48]	@ (8003794 <LCD_IO_Init+0xec>)
 8003764:	f002 f918 	bl	8005998 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003768:	2200      	movs	r2, #0
 800376a:	2104      	movs	r1, #4
 800376c:	4809      	ldr	r0, [pc, #36]	@ (8003794 <LCD_IO_Init+0xec>)
 800376e:	f002 fbcb 	bl	8005f08 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003772:	2201      	movs	r2, #1
 8003774:	2104      	movs	r1, #4
 8003776:	4807      	ldr	r0, [pc, #28]	@ (8003794 <LCD_IO_Init+0xec>)
 8003778:	f002 fbc6 	bl	8005f08 <HAL_GPIO_WritePin>

    SPIx_Init();
 800377c:	f7ff fed6 	bl	800352c <SPIx_Init>
  }
}
 8003780:	bf00      	nop
 8003782:	3720      	adds	r7, #32
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	2000112c 	.word	0x2000112c
 800378c:	40023800 	.word	0x40023800
 8003790:	40020c00 	.word	0x40020c00
 8003794:	40020800 	.word	0x40020800

08003798 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80037a2:	2201      	movs	r2, #1
 80037a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037a8:	480a      	ldr	r0, [pc, #40]	@ (80037d4 <LCD_IO_WriteData+0x3c>)
 80037aa:	f002 fbad 	bl	8005f08 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80037ae:	2200      	movs	r2, #0
 80037b0:	2104      	movs	r1, #4
 80037b2:	4809      	ldr	r0, [pc, #36]	@ (80037d8 <LCD_IO_WriteData+0x40>)
 80037b4:	f002 fba8 	bl	8005f08 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff ff10 	bl	80035e0 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80037c0:	2201      	movs	r2, #1
 80037c2:	2104      	movs	r1, #4
 80037c4:	4804      	ldr	r0, [pc, #16]	@ (80037d8 <LCD_IO_WriteData+0x40>)
 80037c6:	f002 fb9f 	bl	8005f08 <HAL_GPIO_WritePin>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40020c00 	.word	0x40020c00
 80037d8:	40020800 	.word	0x40020800

080037dc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80037e6:	2200      	movs	r2, #0
 80037e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037ec:	480a      	ldr	r0, [pc, #40]	@ (8003818 <LCD_IO_WriteReg+0x3c>)
 80037ee:	f002 fb8b 	bl	8005f08 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80037f2:	2200      	movs	r2, #0
 80037f4:	2104      	movs	r1, #4
 80037f6:	4809      	ldr	r0, [pc, #36]	@ (800381c <LCD_IO_WriteReg+0x40>)
 80037f8:	f002 fb86 	bl	8005f08 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff feed 	bl	80035e0 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003806:	2201      	movs	r2, #1
 8003808:	2104      	movs	r1, #4
 800380a:	4804      	ldr	r0, [pc, #16]	@ (800381c <LCD_IO_WriteReg+0x40>)
 800380c:	f002 fb7c 	bl	8005f08 <HAL_GPIO_WritePin>
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40020c00 	.word	0x40020c00
 800381c:	40020800 	.word	0x40020800

08003820 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	460a      	mov	r2, r1
 800382a:	80fb      	strh	r3, [r7, #6]
 800382c:	4613      	mov	r3, r2
 800382e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003834:	2200      	movs	r2, #0
 8003836:	2104      	movs	r1, #4
 8003838:	4810      	ldr	r0, [pc, #64]	@ (800387c <LCD_IO_ReadData+0x5c>)
 800383a:	f002 fb65 	bl	8005f08 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800383e:	2200      	movs	r2, #0
 8003840:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003844:	480e      	ldr	r0, [pc, #56]	@ (8003880 <LCD_IO_ReadData+0x60>)
 8003846:	f002 fb5f 	bl	8005f08 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fec7 	bl	80035e0 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8003852:	797b      	ldrb	r3, [r7, #5]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fea3 	bl	80035a0 <SPIx_Read>
 800385a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800385c:	2201      	movs	r2, #1
 800385e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003862:	4807      	ldr	r0, [pc, #28]	@ (8003880 <LCD_IO_ReadData+0x60>)
 8003864:	f002 fb50 	bl	8005f08 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003868:	2201      	movs	r2, #1
 800386a:	2104      	movs	r1, #4
 800386c:	4803      	ldr	r0, [pc, #12]	@ (800387c <LCD_IO_ReadData+0x5c>)
 800386e:	f002 fb4b 	bl	8005f08 <HAL_GPIO_WritePin>

  return readvalue;
 8003872:	68fb      	ldr	r3, [r7, #12]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40020800 	.word	0x40020800
 8003880:	40020c00 	.word	0x40020c00

08003884 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fff3 	bl	8004878 <HAL_Delay>
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800389e:	f7ff fd53 	bl	8003348 <I2Cx_Init>
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80038aa:	f7ff fd7f 	bl	80033ac <I2Cx_ITConfig>
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	4603      	mov	r3, r0
 80038ba:	71fb      	strb	r3, [r7, #7]
 80038bc:	460b      	mov	r3, r1
 80038be:	71bb      	strb	r3, [r7, #6]
 80038c0:	4613      	mov	r3, r2
 80038c2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80038c4:	797a      	ldrb	r2, [r7, #5]
 80038c6:	79b9      	ldrb	r1, [r7, #6]
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fd9e 	bl	800340c <I2Cx_WriteData>
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	460a      	mov	r2, r1
 80038e2:	71fb      	strb	r3, [r7, #7]
 80038e4:	4613      	mov	r3, r2
 80038e6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80038e8:	79ba      	ldrb	r2, [r7, #6]
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fdb6 	bl	8003460 <I2Cx_ReadData>
 80038f4:	4603      	mov	r3, r0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	603a      	str	r2, [r7, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	4603      	mov	r3, r0
 800390a:	71fb      	strb	r3, [r7, #7]
 800390c:	460b      	mov	r3, r1
 800390e:	71bb      	strb	r3, [r7, #6]
 8003910:	4613      	mov	r3, r2
 8003912:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003914:	88bb      	ldrh	r3, [r7, #4]
 8003916:	79b9      	ldrb	r1, [r7, #6]
 8003918:	79f8      	ldrb	r0, [r7, #7]
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	f7ff fdcc 	bl	80034b8 <I2Cx_ReadBuffer>
 8003920:	4603      	mov	r3, r0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 ffa0 	bl	8004878 <HAL_Delay>
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8003944:	4b2d      	ldr	r3, [pc, #180]	@ (80039fc <BSP_LCD_Init+0xbc>)
 8003946:	4a2e      	ldr	r2, [pc, #184]	@ (8003a00 <BSP_LCD_Init+0xc0>)
 8003948:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800394a:	4b2c      	ldr	r3, [pc, #176]	@ (80039fc <BSP_LCD_Init+0xbc>)
 800394c:	2209      	movs	r2, #9
 800394e:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003950:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <BSP_LCD_Init+0xbc>)
 8003952:	2201      	movs	r2, #1
 8003954:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003956:	4b29      	ldr	r3, [pc, #164]	@ (80039fc <BSP_LCD_Init+0xbc>)
 8003958:	221d      	movs	r2, #29
 800395a:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800395c:	4b27      	ldr	r3, [pc, #156]	@ (80039fc <BSP_LCD_Init+0xbc>)
 800395e:	2203      	movs	r2, #3
 8003960:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8003962:	4b26      	ldr	r3, [pc, #152]	@ (80039fc <BSP_LCD_Init+0xbc>)
 8003964:	f240 120d 	movw	r2, #269	@ 0x10d
 8003968:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 800396a:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <BSP_LCD_Init+0xbc>)
 800396c:	f240 1243 	movw	r2, #323	@ 0x143
 8003970:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8003972:	4b22      	ldr	r3, [pc, #136]	@ (80039fc <BSP_LCD_Init+0xbc>)
 8003974:	f240 1217 	movw	r2, #279	@ 0x117
 8003978:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 800397a:	4b20      	ldr	r3, [pc, #128]	@ (80039fc <BSP_LCD_Init+0xbc>)
 800397c:	f240 1247 	movw	r2, #327	@ 0x147
 8003980:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8003982:	4b1e      	ldr	r3, [pc, #120]	@ (80039fc <BSP_LCD_Init+0xbc>)
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 800398a:	4b1c      	ldr	r3, [pc, #112]	@ (80039fc <BSP_LCD_Init+0xbc>)
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8003992:	4b1a      	ldr	r3, [pc, #104]	@ (80039fc <BSP_LCD_Init+0xbc>)
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800399a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <BSP_LCD_Init+0xc4>)
 800399c:	2208      	movs	r2, #8
 800399e:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80039a0:	4b18      	ldr	r3, [pc, #96]	@ (8003a04 <BSP_LCD_Init+0xc4>)
 80039a2:	22c0      	movs	r2, #192	@ 0xc0
 80039a4:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80039a6:	4b17      	ldr	r3, [pc, #92]	@ (8003a04 <BSP_LCD_Init+0xc4>)
 80039a8:	2204      	movs	r2, #4
 80039aa:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80039ac:	4b15      	ldr	r3, [pc, #84]	@ (8003a04 <BSP_LCD_Init+0xc4>)
 80039ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039b2:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80039b4:	4813      	ldr	r0, [pc, #76]	@ (8003a04 <BSP_LCD_Init+0xc4>)
 80039b6:	f006 fd2f 	bl	800a418 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80039ba:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <BSP_LCD_Init+0xbc>)
 80039bc:	2200      	movs	r2, #0
 80039be:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80039c0:	4b0e      	ldr	r3, [pc, #56]	@ (80039fc <BSP_LCD_Init+0xbc>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80039c6:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <BSP_LCD_Init+0xbc>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <BSP_LCD_Init+0xbc>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 80039d2:	f000 fa6b 	bl	8003eac <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 80039d6:	4809      	ldr	r0, [pc, #36]	@ (80039fc <BSP_LCD_Init+0xbc>)
 80039d8:	f005 fcc2 	bl	8009360 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 80039dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003a08 <BSP_LCD_Init+0xc8>)
 80039de:	4a0b      	ldr	r2, [pc, #44]	@ (8003a0c <BSP_LCD_Init+0xcc>)
 80039e0:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 80039e2:	4b09      	ldr	r3, [pc, #36]	@ (8003a08 <BSP_LCD_Init+0xc8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80039ea:	f000 fc4d 	bl	8004288 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80039ee:	4808      	ldr	r0, [pc, #32]	@ (8003a10 <BSP_LCD_Init+0xd0>)
 80039f0:	f000 f8be 	bl	8003b70 <BSP_LCD_SetFont>

  return LCD_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20001130 	.word	0x20001130
 8003a00:	40016800 	.word	0x40016800
 8003a04:	20001218 	.word	0x20001218
 8003a08:	20001264 	.word	0x20001264
 8003a0c:	200000f0 	.word	0x200000f0
 8003a10:	20000158 	.word	0x20000158

08003a14 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003a18:	4b03      	ldr	r3, [pc, #12]	@ (8003a28 <BSP_LCD_GetXSize+0x14>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1e:	4798      	blx	r3
 8003a20:	4603      	mov	r3, r0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20001264 	.word	0x20001264

08003a2c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003a30:	4b03      	ldr	r3, [pc, #12]	@ (8003a40 <BSP_LCD_GetYSize+0x14>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a36:	4798      	blx	r3
 8003a38:	4603      	mov	r3, r0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20001264 	.word	0x20001264

08003a44 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b090      	sub	sp, #64	@ 0x40
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	6039      	str	r1, [r7, #0]
 8003a4e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003a54:	f7ff ffde 	bl	8003a14 <BSP_LCD_GetXSize>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8003a60:	f7ff ffe4 	bl	8003a2c <BSP_LCD_GetYSize>
 8003a64:	4603      	mov	r3, r0
 8003a66:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8003a70:	23ff      	movs	r3, #255	@ 0xff
 8003a72:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003a8a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003a90:	2307      	movs	r3, #7
 8003a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003a94:	f7ff ffbe 	bl	8003a14 <BSP_LCD_GetXSize>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003a9c:	f7ff ffc6 	bl	8003a2c <BSP_LCD_GetYSize>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8003aa4:	88fa      	ldrh	r2, [r7, #6]
 8003aa6:	f107 030c 	add.w	r3, r7, #12
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4814      	ldr	r0, [pc, #80]	@ (8003b00 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003aae:	f005 fde9 	bl	8009684 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003ab2:	88fa      	ldrh	r2, [r7, #6]
 8003ab4:	4913      	ldr	r1, [pc, #76]	@ (8003b04 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003ac8:	88fa      	ldrh	r2, [r7, #6]
 8003aca:	490e      	ldr	r1, [pc, #56]	@ (8003b04 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003acc:	4613      	mov	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8003b08 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003ada:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8003adc:	88fa      	ldrh	r2, [r7, #6]
 8003ade:	4909      	ldr	r1, [pc, #36]	@ (8003b04 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003aee:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003af0:	4803      	ldr	r0, [pc, #12]	@ (8003b00 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003af2:	f005 fe05 	bl	8009700 <HAL_LTDC_EnableDither>
}
 8003af6:	bf00      	nop
 8003af8:	3740      	adds	r7, #64	@ 0x40
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20001130 	.word	0x20001130
 8003b04:	2000124c 	.word	0x2000124c
 8003b08:	20000158 	.word	0x20000158

08003b0c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003b14:	4b07      	ldr	r3, [pc, #28]	@ (8003b34 <BSP_LCD_SetTextColor+0x28>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4907      	ldr	r1, [pc, #28]	@ (8003b38 <BSP_LCD_SetTextColor+0x2c>)
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	601a      	str	r2, [r3, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	20001248 	.word	0x20001248
 8003b38:	2000124c 	.word	0x2000124c

08003b3c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003b44:	4b08      	ldr	r3, [pc, #32]	@ (8003b68 <BSP_LCD_SetBackColor+0x2c>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4908      	ldr	r1, [pc, #32]	@ (8003b6c <BSP_LCD_SetBackColor+0x30>)
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	3304      	adds	r3, #4
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20001248 	.word	0x20001248
 8003b6c:	2000124c 	.word	0x2000124c

08003b70 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003b78:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <BSP_LCD_SetFont+0x2c>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4908      	ldr	r1, [pc, #32]	@ (8003ba0 <BSP_LCD_SetFont+0x30>)
 8003b7e:	4613      	mov	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	3308      	adds	r3, #8
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	601a      	str	r2, [r3, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20001248 	.word	0x20001248
 8003ba0:	2000124c 	.word	0x2000124c

08003ba4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8003ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8003bac:	4b0f      	ldr	r3, [pc, #60]	@ (8003bec <BSP_LCD_Clear+0x48>)
 8003bae:	681c      	ldr	r4, [r3, #0]
 8003bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <BSP_LCD_Clear+0x48>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8003bf0 <BSP_LCD_Clear+0x4c>)
 8003bb6:	2134      	movs	r1, #52	@ 0x34
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	335c      	adds	r3, #92	@ 0x5c
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	461e      	mov	r6, r3
 8003bc4:	f7ff ff26 	bl	8003a14 <BSP_LCD_GetXSize>
 8003bc8:	4605      	mov	r5, r0
 8003bca:	f7ff ff2f 	bl	8003a2c <BSP_LCD_GetYSize>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	462a      	mov	r2, r5
 8003bdc:	4631      	mov	r1, r6
 8003bde:	4620      	mov	r0, r4
 8003be0:	f000 fb1a 	bl	8004218 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bec:	20001248 	.word	0x20001248
 8003bf0:	20001130 	.word	0x20001130

08003bf4 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	80fb      	strh	r3, [r7, #6]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	80bb      	strh	r3, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8003c06:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <BSP_LCD_DisplayChar+0x80>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	491b      	ldr	r1, [pc, #108]	@ (8003c78 <BSP_LCD_DisplayChar+0x84>)
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	3308      	adds	r3, #8
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6819      	ldr	r1, [r3, #0]
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003c22:	4b14      	ldr	r3, [pc, #80]	@ (8003c74 <BSP_LCD_DisplayChar+0x80>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4c14      	ldr	r4, [pc, #80]	@ (8003c78 <BSP_LCD_DisplayChar+0x84>)
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4423      	add	r3, r4
 8003c32:	3308      	adds	r3, #8
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8003c38:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c74 <BSP_LCD_DisplayChar+0x80>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4c0d      	ldr	r4, [pc, #52]	@ (8003c78 <BSP_LCD_DisplayChar+0x84>)
 8003c42:	4613      	mov	r3, r2
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4423      	add	r3, r4
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	889b      	ldrh	r3, [r3, #4]
 8003c52:	3307      	adds	r3, #7
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	da00      	bge.n	8003c5a <BSP_LCD_DisplayChar+0x66>
 8003c58:	3307      	adds	r3, #7
 8003c5a:	10db      	asrs	r3, r3, #3
 8003c5c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8003c60:	18ca      	adds	r2, r1, r3
 8003c62:	88b9      	ldrh	r1, [r7, #4]
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fa1c 	bl	80040a4 <DrawChar>
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd90      	pop	{r4, r7, pc}
 8003c74:	20001248 	.word	0x20001248
 8003c78:	2000124c 	.word	0x2000124c

08003c7c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003c7c:	b5b0      	push	{r4, r5, r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60ba      	str	r2, [r7, #8]
 8003c84:	461a      	mov	r2, r3
 8003c86:	4603      	mov	r3, r0
 8003c88:	81fb      	strh	r3, [r7, #14]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	81bb      	strh	r3, [r7, #12]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003c92:	2301      	movs	r3, #1
 8003c94:	83fb      	strh	r3, [r7, #30]
 8003c96:	2300      	movs	r3, #0
 8003c98:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8003ca6:	e002      	b.n	8003cae <BSP_LCD_DisplayStringAt+0x32>
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	3301      	adds	r3, #1
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	617a      	str	r2, [r7, #20]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f6      	bne.n	8003ca8 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8003cba:	f7ff feab 	bl	8003a14 <BSP_LCD_GetXSize>
 8003cbe:	4601      	mov	r1, r0
 8003cc0:	4b4b      	ldr	r3, [pc, #300]	@ (8003df0 <BSP_LCD_DisplayStringAt+0x174>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	484b      	ldr	r0, [pc, #300]	@ (8003df4 <BSP_LCD_DisplayStringAt+0x178>)
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4403      	add	r3, r0
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	889b      	ldrh	r3, [r3, #4]
 8003cd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cda:	613b      	str	r3, [r7, #16]

  switch (mode)
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d01c      	beq.n	8003d1c <BSP_LCD_DisplayStringAt+0xa0>
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	dc33      	bgt.n	8003d4e <BSP_LCD_DisplayStringAt+0xd2>
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d002      	beq.n	8003cf0 <BSP_LCD_DisplayStringAt+0x74>
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d019      	beq.n	8003d22 <BSP_LCD_DisplayStringAt+0xa6>
 8003cee:	e02e      	b.n	8003d4e <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	1ad1      	subs	r1, r2, r3
 8003cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8003df0 <BSP_LCD_DisplayStringAt+0x174>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	483e      	ldr	r0, [pc, #248]	@ (8003df4 <BSP_LCD_DisplayStringAt+0x178>)
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4403      	add	r3, r0
 8003d06:	3308      	adds	r3, #8
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	889b      	ldrh	r3, [r3, #4]
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	89fb      	ldrh	r3, [r7, #14]
 8003d16:	4413      	add	r3, r2
 8003d18:	83fb      	strh	r3, [r7, #30]
      break;
 8003d1a:	e01b      	b.n	8003d54 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8003d1c:	89fb      	ldrh	r3, [r7, #14]
 8003d1e:	83fb      	strh	r3, [r7, #30]
      break;
 8003d20:	e018      	b.n	8003d54 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	b299      	uxth	r1, r3
 8003d2a:	4b31      	ldr	r3, [pc, #196]	@ (8003df0 <BSP_LCD_DisplayStringAt+0x174>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4831      	ldr	r0, [pc, #196]	@ (8003df4 <BSP_LCD_DisplayStringAt+0x178>)
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4403      	add	r3, r0
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	889b      	ldrh	r3, [r3, #4]
 8003d40:	fb11 f303 	smulbb	r3, r1, r3
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	89fb      	ldrh	r3, [r7, #14]
 8003d48:	4413      	add	r3, r2
 8003d4a:	83fb      	strh	r3, [r7, #30]
      break;
 8003d4c:	e002      	b.n	8003d54 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 8003d4e:	89fb      	ldrh	r3, [r7, #14]
 8003d50:	83fb      	strh	r3, [r7, #30]
      break;
 8003d52:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8003d54:	e01a      	b.n	8003d8c <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	89b9      	ldrh	r1, [r7, #12]
 8003d5c:	8bfb      	ldrh	r3, [r7, #30]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff ff48 	bl	8003bf4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003d64:	4b22      	ldr	r3, [pc, #136]	@ (8003df0 <BSP_LCD_DisplayStringAt+0x174>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4922      	ldr	r1, [pc, #136]	@ (8003df4 <BSP_LCD_DisplayStringAt+0x178>)
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3308      	adds	r3, #8
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	889a      	ldrh	r2, [r3, #4]
 8003d7a:	8bfb      	ldrh	r3, [r7, #30]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	3301      	adds	r3, #1
 8003d84:	60bb      	str	r3, [r7, #8]
    i++;
 8003d86:	8bbb      	ldrh	r3, [r7, #28]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2dc      	uxtb	r4, r3
 8003d9a:	f7ff fe3b 	bl	8003a14 <BSP_LCD_GetXSize>
 8003d9e:	8bb9      	ldrh	r1, [r7, #28]
 8003da0:	4b13      	ldr	r3, [pc, #76]	@ (8003df0 <BSP_LCD_DisplayStringAt+0x174>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4d13      	ldr	r5, [pc, #76]	@ (8003df4 <BSP_LCD_DisplayStringAt+0x178>)
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	442b      	add	r3, r5
 8003db0:	3308      	adds	r3, #8
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	889b      	ldrh	r3, [r3, #4]
 8003db6:	fb01 f303 	mul.w	r3, r1, r3
 8003dba:	1ac3      	subs	r3, r0, r3
 8003dbc:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003df0 <BSP_LCD_DisplayStringAt+0x174>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	480c      	ldr	r0, [pc, #48]	@ (8003df4 <BSP_LCD_DisplayStringAt+0x178>)
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4403      	add	r3, r0
 8003dce:	3308      	adds	r3, #8
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8003dd4:	4299      	cmp	r1, r3
 8003dd6:	bf2c      	ite	cs
 8003dd8:	2301      	movcs	r3, #1
 8003dda:	2300      	movcc	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	4023      	ands	r3, r4
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1b7      	bne.n	8003d56 <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8003de6:	bf00      	nop
 8003de8:	bf00      	nop
 8003dea:	3720      	adds	r7, #32
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bdb0      	pop	{r4, r5, r7, pc}
 8003df0:	20001248 	.word	0x20001248
 8003df4:	2000124c 	.word	0x2000124c

08003df8 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dfc:	b086      	sub	sp, #24
 8003dfe:	af02      	add	r7, sp, #8
 8003e00:	4604      	mov	r4, r0
 8003e02:	4608      	mov	r0, r1
 8003e04:	4611      	mov	r1, r2
 8003e06:	461a      	mov	r2, r3
 8003e08:	4623      	mov	r3, r4
 8003e0a:	80fb      	strh	r3, [r7, #6]
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	80bb      	strh	r3, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
 8003e14:	4613      	mov	r3, r2
 8003e16:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003e1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ea0 <BSP_LCD_FillRect+0xa8>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4920      	ldr	r1, [pc, #128]	@ (8003ea4 <BSP_LCD_FillRect+0xac>)
 8003e22:	4613      	mov	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fe6c 	bl	8003b0c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8003e34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <BSP_LCD_FillRect+0xa8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea8 <BSP_LCD_FillRect+0xb0>)
 8003e3a:	2134      	movs	r1, #52	@ 0x34
 8003e3c:	fb01 f303 	mul.w	r3, r1, r3
 8003e40:	4413      	add	r3, r2
 8003e42:	335c      	adds	r3, #92	@ 0x5c
 8003e44:	681c      	ldr	r4, [r3, #0]
 8003e46:	f7ff fde5 	bl	8003a14 <BSP_LCD_GetXSize>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	88bb      	ldrh	r3, [r7, #4]
 8003e4e:	fb03 f202 	mul.w	r2, r3, r2
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4423      	add	r3, r4
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 8003e5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ea0 <BSP_LCD_FillRect+0xa8>)
 8003e5e:	681c      	ldr	r4, [r3, #0]
 8003e60:	68fd      	ldr	r5, [r7, #12]
 8003e62:	887e      	ldrh	r6, [r7, #2]
 8003e64:	f8b7 8000 	ldrh.w	r8, [r7]
 8003e68:	f7ff fdd4 	bl	8003a14 <BSP_LCD_GetXSize>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	887b      	ldrh	r3, [r7, #2]
 8003e70:	1ad1      	subs	r1, r2, r3
 8003e72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <BSP_LCD_FillRect+0xa8>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	480b      	ldr	r0, [pc, #44]	@ (8003ea4 <BSP_LCD_FillRect+0xac>)
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4403      	add	r3, r0
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	9100      	str	r1, [sp, #0]
 8003e88:	4643      	mov	r3, r8
 8003e8a:	4632      	mov	r2, r6
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f000 f9c2 	bl	8004218 <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20001248 	.word	0x20001248
 8003ea4:	2000124c 	.word	0x2000124c
 8003ea8:	20001130 	.word	0x20001130

08003eac <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08e      	sub	sp, #56	@ 0x38
 8003eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	623b      	str	r3, [r7, #32]
 8003eb6:	4b61      	ldr	r3, [pc, #388]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eba:	4a60      	ldr	r2, [pc, #384]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003ebc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ec2:	4b5e      	ldr	r3, [pc, #376]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003eca:	623b      	str	r3, [r7, #32]
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed6:	4a59      	ldr	r2, [pc, #356]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003ed8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ede:	4b57      	ldr	r3, [pc, #348]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	4b53      	ldr	r3, [pc, #332]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef2:	4a52      	ldr	r2, [pc, #328]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003efa:	4b50      	ldr	r3, [pc, #320]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	61bb      	str	r3, [r7, #24]
 8003f04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0e:	4a4b      	ldr	r2, [pc, #300]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f10:	f043 0302 	orr.w	r3, r3, #2
 8003f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f16:	4b49      	ldr	r3, [pc, #292]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	4b45      	ldr	r3, [pc, #276]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	4a44      	ldr	r2, [pc, #272]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f2c:	f043 0304 	orr.w	r3, r3, #4
 8003f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f32:	4b42      	ldr	r3, [pc, #264]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	4b3e      	ldr	r3, [pc, #248]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	4a3d      	ldr	r2, [pc, #244]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f48:	f043 0308 	orr.w	r3, r3, #8
 8003f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	4b37      	ldr	r3, [pc, #220]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	4a36      	ldr	r2, [pc, #216]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f64:	f043 0320 	orr.w	r3, r3, #32
 8003f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f6a:	4b34      	ldr	r3, [pc, #208]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	607b      	str	r3, [r7, #4]
 8003f7a:	4b30      	ldr	r3, [pc, #192]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	4a2f      	ldr	r2, [pc, #188]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f86:	4b2d      	ldr	r3, [pc, #180]	@ (800403c <BSP_LCD_MspInit+0x190>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003f92:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003f96:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8003fa4:	230e      	movs	r3, #14
 8003fa6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fac:	4619      	mov	r1, r3
 8003fae:	4824      	ldr	r0, [pc, #144]	@ (8004040 <BSP_LCD_MspInit+0x194>)
 8003fb0:	f001 fcf2 	bl	8005998 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003fb4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003fb8:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4820      	ldr	r0, [pc, #128]	@ (8004044 <BSP_LCD_MspInit+0x198>)
 8003fc2:	f001 fce9 	bl	8005998 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003fc6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	481d      	ldr	r0, [pc, #116]	@ (8004048 <BSP_LCD_MspInit+0x19c>)
 8003fd4:	f001 fce0 	bl	8005998 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003fd8:	2348      	movs	r3, #72	@ 0x48
 8003fda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	481a      	ldr	r0, [pc, #104]	@ (800404c <BSP_LCD_MspInit+0x1a0>)
 8003fe4:	f001 fcd8 	bl	8005998 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003fe8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4816      	ldr	r0, [pc, #88]	@ (8004050 <BSP_LCD_MspInit+0x1a4>)
 8003ff6:	f001 fccf 	bl	8005998 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003ffa:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004004:	4619      	mov	r1, r3
 8004006:	4813      	ldr	r0, [pc, #76]	@ (8004054 <BSP_LCD_MspInit+0x1a8>)
 8004008:	f001 fcc6 	bl	8005998 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800400c:	2303      	movs	r3, #3
 800400e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8004010:	2309      	movs	r3, #9
 8004012:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004018:	4619      	mov	r1, r3
 800401a:	480a      	ldr	r0, [pc, #40]	@ (8004044 <BSP_LCD_MspInit+0x198>)
 800401c:	f001 fcbc 	bl	8005998 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8004020:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800402a:	4619      	mov	r1, r3
 800402c:	4809      	ldr	r0, [pc, #36]	@ (8004054 <BSP_LCD_MspInit+0x1a8>)
 800402e:	f001 fcb3 	bl	8005998 <HAL_GPIO_Init>
}
 8004032:	bf00      	nop
 8004034:	3738      	adds	r7, #56	@ 0x38
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800
 8004040:	40020000 	.word	0x40020000
 8004044:	40020400 	.word	0x40020400
 8004048:	40020800 	.word	0x40020800
 800404c:	40020c00 	.word	0x40020c00
 8004050:	40021400 	.word	0x40021400
 8004054:	40021800 	.word	0x40021800

08004058 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004058:	b5b0      	push	{r4, r5, r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	603a      	str	r2, [r7, #0]
 8004062:	80fb      	strh	r3, [r7, #6]
 8004064:	460b      	mov	r3, r1
 8004066:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004068:	4b0c      	ldr	r3, [pc, #48]	@ (800409c <BSP_LCD_DrawPixel+0x44>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0c      	ldr	r2, [pc, #48]	@ (80040a0 <BSP_LCD_DrawPixel+0x48>)
 800406e:	2134      	movs	r1, #52	@ 0x34
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	4413      	add	r3, r2
 8004076:	335c      	adds	r3, #92	@ 0x5c
 8004078:	681c      	ldr	r4, [r3, #0]
 800407a:	88bd      	ldrh	r5, [r7, #4]
 800407c:	f7ff fcca 	bl	8003a14 <BSP_LCD_GetXSize>
 8004080:	4603      	mov	r3, r0
 8004082:	fb03 f205 	mul.w	r2, r3, r5
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4423      	add	r3, r4
 800408e:	461a      	mov	r2, r3
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	6013      	str	r3, [r2, #0]
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bdb0      	pop	{r4, r5, r7, pc}
 800409c:	20001248 	.word	0x20001248
 80040a0:	20001130 	.word	0x20001130

080040a4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	603a      	str	r2, [r7, #0]
 80040ae:	80fb      	strh	r3, [r7, #6]
 80040b0:	460b      	mov	r3, r1
 80040b2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	2300      	movs	r3, #0
 80040ba:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80040c0:	4b53      	ldr	r3, [pc, #332]	@ (8004210 <DrawChar+0x16c>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4953      	ldr	r1, [pc, #332]	@ (8004214 <DrawChar+0x170>)
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	3308      	adds	r3, #8
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	88db      	ldrh	r3, [r3, #6]
 80040d6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80040d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004210 <DrawChar+0x16c>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	494d      	ldr	r1, [pc, #308]	@ (8004214 <DrawChar+0x170>)
 80040de:	4613      	mov	r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	3308      	adds	r3, #8
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	889b      	ldrh	r3, [r3, #4]
 80040ee:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 80040f0:	8a3b      	ldrh	r3, [r7, #16]
 80040f2:	3307      	adds	r3, #7
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	da00      	bge.n	80040fa <DrawChar+0x56>
 80040f8:	3307      	adds	r3, #7
 80040fa:	10db      	asrs	r3, r3, #3
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	b2da      	uxtb	r2, r3
 8004102:	8a3b      	ldrh	r3, [r7, #16]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
 800410e:	e076      	b.n	80041fe <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8004110:	8a3b      	ldrh	r3, [r7, #16]
 8004112:	3307      	adds	r3, #7
 8004114:	2b00      	cmp	r3, #0
 8004116:	da00      	bge.n	800411a <DrawChar+0x76>
 8004118:	3307      	adds	r3, #7
 800411a:	10db      	asrs	r3, r3, #3
 800411c:	461a      	mov	r2, r3
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	4413      	add	r3, r2
 8004128:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800412a:	8a3b      	ldrh	r3, [r7, #16]
 800412c:	3307      	adds	r3, #7
 800412e:	2b00      	cmp	r3, #0
 8004130:	da00      	bge.n	8004134 <DrawChar+0x90>
 8004132:	3307      	adds	r3, #7
 8004134:	10db      	asrs	r3, r3, #3
 8004136:	2b01      	cmp	r3, #1
 8004138:	d002      	beq.n	8004140 <DrawChar+0x9c>
 800413a:	2b02      	cmp	r3, #2
 800413c:	d004      	beq.n	8004148 <DrawChar+0xa4>
 800413e:	e00c      	b.n	800415a <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	617b      	str	r3, [r7, #20]
        break;
 8004146:	e016      	b.n	8004176 <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	3201      	adds	r2, #1
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
        break;
 8004158:	e00d      	b.n	8004176 <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	041a      	lsls	r2, r3, #16
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	3301      	adds	r3, #1
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	4313      	orrs	r3, r2
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	3202      	adds	r2, #2
 800416e:	7812      	ldrb	r2, [r2, #0]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
        break;
 8004174:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	e036      	b.n	80041ea <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 800417c:	8a3a      	ldrh	r2, [r7, #16]
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	1ad2      	subs	r2, r2, r3
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	4413      	add	r3, r2
 8004186:	3b01      	subs	r3, #1
 8004188:	2201      	movs	r2, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	461a      	mov	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d012      	beq.n	80041be <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	b29a      	uxth	r2, r3
 800419c:	88fb      	ldrh	r3, [r7, #6]
 800419e:	4413      	add	r3, r2
 80041a0:	b298      	uxth	r0, r3
 80041a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004210 <DrawChar+0x16c>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	491b      	ldr	r1, [pc, #108]	@ (8004214 <DrawChar+0x170>)
 80041a8:	4613      	mov	r3, r2
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	88bb      	ldrh	r3, [r7, #4]
 80041b6:	4619      	mov	r1, r3
 80041b8:	f7ff ff4e 	bl	8004058 <BSP_LCD_DrawPixel>
 80041bc:	e012      	b.n	80041e4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	4413      	add	r3, r2
 80041c6:	b298      	uxth	r0, r3
 80041c8:	4b11      	ldr	r3, [pc, #68]	@ (8004210 <DrawChar+0x16c>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4911      	ldr	r1, [pc, #68]	@ (8004214 <DrawChar+0x170>)
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	3304      	adds	r3, #4
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	88bb      	ldrh	r3, [r7, #4]
 80041de:	4619      	mov	r1, r3
 80041e0:	f7ff ff3a 	bl	8004058 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	3301      	adds	r3, #1
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	8a3b      	ldrh	r3, [r7, #16]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d3c4      	bcc.n	800417c <DrawChar+0xd8>
      }
    }
    Ypos++;
 80041f2:	88bb      	ldrh	r3, [r7, #4]
 80041f4:	3301      	adds	r3, #1
 80041f6:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	3301      	adds	r3, #1
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	8a7b      	ldrh	r3, [r7, #18]
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	429a      	cmp	r2, r3
 8004204:	d384      	bcc.n	8004110 <DrawChar+0x6c>
  }
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	3720      	adds	r7, #32
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20001248 	.word	0x20001248
 8004214:	2000124c 	.word	0x2000124c

08004218 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004226:	4b16      	ldr	r3, [pc, #88]	@ (8004280 <FillBuffer+0x68>)
 8004228:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800422c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800422e:	4b14      	ldr	r3, [pc, #80]	@ (8004280 <FillBuffer+0x68>)
 8004230:	2200      	movs	r2, #0
 8004232:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8004234:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <FillBuffer+0x68>)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 800423a:	4b11      	ldr	r3, [pc, #68]	@ (8004280 <FillBuffer+0x68>)
 800423c:	4a11      	ldr	r2, [pc, #68]	@ (8004284 <FillBuffer+0x6c>)
 800423e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8004240:	480f      	ldr	r0, [pc, #60]	@ (8004280 <FillBuffer+0x68>)
 8004242:	f000 fdf9 	bl	8004e38 <HAL_DMA2D_Init>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d115      	bne.n	8004278 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 800424c:	68f9      	ldr	r1, [r7, #12]
 800424e:	480c      	ldr	r0, [pc, #48]	@ (8004280 <FillBuffer+0x68>)
 8004250:	f001 f860 	bl	8005314 <HAL_DMA2D_ConfigLayer>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10e      	bne.n	8004278 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69f9      	ldr	r1, [r7, #28]
 8004264:	4806      	ldr	r0, [pc, #24]	@ (8004280 <FillBuffer+0x68>)
 8004266:	f000 fe30 	bl	8004eca <HAL_DMA2D_Start>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d103      	bne.n	8004278 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004270:	210a      	movs	r1, #10
 8004272:	4803      	ldr	r0, [pc, #12]	@ (8004280 <FillBuffer+0x68>)
 8004274:	f000 fe54 	bl	8004f20 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	200011d8 	.word	0x200011d8
 8004284:	4002b000 	.word	0x4002b000

08004288 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800428c:	4b29      	ldr	r3, [pc, #164]	@ (8004334 <BSP_SDRAM_Init+0xac>)
 800428e:	4a2a      	ldr	r2, [pc, #168]	@ (8004338 <BSP_SDRAM_Init+0xb0>)
 8004290:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004292:	4b2a      	ldr	r3, [pc, #168]	@ (800433c <BSP_SDRAM_Init+0xb4>)
 8004294:	2202      	movs	r2, #2
 8004296:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004298:	4b28      	ldr	r3, [pc, #160]	@ (800433c <BSP_SDRAM_Init+0xb4>)
 800429a:	2207      	movs	r2, #7
 800429c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800429e:	4b27      	ldr	r3, [pc, #156]	@ (800433c <BSP_SDRAM_Init+0xb4>)
 80042a0:	2204      	movs	r2, #4
 80042a2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80042a4:	4b25      	ldr	r3, [pc, #148]	@ (800433c <BSP_SDRAM_Init+0xb4>)
 80042a6:	2207      	movs	r2, #7
 80042a8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80042aa:	4b24      	ldr	r3, [pc, #144]	@ (800433c <BSP_SDRAM_Init+0xb4>)
 80042ac:	2202      	movs	r2, #2
 80042ae:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80042b0:	4b22      	ldr	r3, [pc, #136]	@ (800433c <BSP_SDRAM_Init+0xb4>)
 80042b2:	2202      	movs	r2, #2
 80042b4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80042b6:	4b21      	ldr	r3, [pc, #132]	@ (800433c <BSP_SDRAM_Init+0xb4>)
 80042b8:	2202      	movs	r2, #2
 80042ba:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80042bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004334 <BSP_SDRAM_Init+0xac>)
 80042be:	2201      	movs	r2, #1
 80042c0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80042c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004334 <BSP_SDRAM_Init+0xac>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80042c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004334 <BSP_SDRAM_Init+0xac>)
 80042ca:	2204      	movs	r2, #4
 80042cc:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80042ce:	4b19      	ldr	r3, [pc, #100]	@ (8004334 <BSP_SDRAM_Init+0xac>)
 80042d0:	2210      	movs	r2, #16
 80042d2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80042d4:	4b17      	ldr	r3, [pc, #92]	@ (8004334 <BSP_SDRAM_Init+0xac>)
 80042d6:	2240      	movs	r2, #64	@ 0x40
 80042d8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80042da:	4b16      	ldr	r3, [pc, #88]	@ (8004334 <BSP_SDRAM_Init+0xac>)
 80042dc:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80042e0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80042e2:	4b14      	ldr	r3, [pc, #80]	@ (8004334 <BSP_SDRAM_Init+0xac>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80042e8:	4b12      	ldr	r3, [pc, #72]	@ (8004334 <BSP_SDRAM_Init+0xac>)
 80042ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042ee:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80042f0:	4b10      	ldr	r3, [pc, #64]	@ (8004334 <BSP_SDRAM_Init+0xac>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80042f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004334 <BSP_SDRAM_Init+0xac>)
 80042f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80042fe:	2100      	movs	r1, #0
 8004300:	480c      	ldr	r0, [pc, #48]	@ (8004334 <BSP_SDRAM_Init+0xac>)
 8004302:	f000 f87f 	bl	8004404 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8004306:	490d      	ldr	r1, [pc, #52]	@ (800433c <BSP_SDRAM_Init+0xb4>)
 8004308:	480a      	ldr	r0, [pc, #40]	@ (8004334 <BSP_SDRAM_Init+0xac>)
 800430a:	f006 fa45 	bl	800a798 <HAL_SDRAM_Init>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004314:	4b0a      	ldr	r3, [pc, #40]	@ (8004340 <BSP_SDRAM_Init+0xb8>)
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e002      	b.n	8004322 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800431c:	4b08      	ldr	r3, [pc, #32]	@ (8004340 <BSP_SDRAM_Init+0xb8>)
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004322:	f240 506a 	movw	r0, #1386	@ 0x56a
 8004326:	f000 f80d 	bl	8004344 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 800432a:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <BSP_SDRAM_Init+0xb8>)
 800432c:	781b      	ldrb	r3, [r3, #0]
}
 800432e:	4618      	mov	r0, r3
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20001268 	.word	0x20001268
 8004338:	a0000140 	.word	0xa0000140
 800433c:	2000129c 	.word	0x2000129c
 8004340:	20000168 	.word	0x20000168

08004344 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004350:	4b2a      	ldr	r3, [pc, #168]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004352:	2201      	movs	r2, #1
 8004354:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004356:	4b29      	ldr	r3, [pc, #164]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004358:	2208      	movs	r2, #8
 800435a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800435c:	4b27      	ldr	r3, [pc, #156]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800435e:	2201      	movs	r2, #1
 8004360:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004362:	4b26      	ldr	r3, [pc, #152]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004364:	2200      	movs	r2, #0
 8004366:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004368:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800436c:	4923      	ldr	r1, [pc, #140]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800436e:	4824      	ldr	r0, [pc, #144]	@ (8004400 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004370:	f006 fa46 	bl	800a800 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004374:	2001      	movs	r0, #1
 8004376:	f000 fa7f 	bl	8004878 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800437a:	4b20      	ldr	r3, [pc, #128]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800437c:	2202      	movs	r2, #2
 800437e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004380:	4b1e      	ldr	r3, [pc, #120]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004382:	2208      	movs	r2, #8
 8004384:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004386:	4b1d      	ldr	r3, [pc, #116]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004388:	2201      	movs	r2, #1
 800438a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800438c:	4b1b      	ldr	r3, [pc, #108]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800438e:	2200      	movs	r2, #0
 8004390:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004392:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004396:	4919      	ldr	r1, [pc, #100]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004398:	4819      	ldr	r0, [pc, #100]	@ (8004400 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800439a:	f006 fa31 	bl	800a800 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800439e:	4b17      	ldr	r3, [pc, #92]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043a0:	2203      	movs	r2, #3
 80043a2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80043a4:	4b15      	ldr	r3, [pc, #84]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043a6:	2208      	movs	r2, #8
 80043a8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80043aa:	4b14      	ldr	r3, [pc, #80]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043ac:	2204      	movs	r2, #4
 80043ae:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80043b0:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80043b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043ba:	4910      	ldr	r1, [pc, #64]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043bc:	4810      	ldr	r0, [pc, #64]	@ (8004400 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043be:	f006 fa1f 	bl	800a800 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80043c2:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80043c6:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80043c8:	4b0c      	ldr	r3, [pc, #48]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043ca:	2204      	movs	r2, #4
 80043cc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80043ce:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043d0:	2208      	movs	r2, #8
 80043d2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80043d4:	4b09      	ldr	r3, [pc, #36]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a07      	ldr	r2, [pc, #28]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043de:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80043e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043e4:	4905      	ldr	r1, [pc, #20]	@ (80043fc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043e6:	4806      	ldr	r0, [pc, #24]	@ (8004400 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043e8:	f006 fa0a 	bl	800a800 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4804      	ldr	r0, [pc, #16]	@ (8004400 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043f0:	f006 fa3b 	bl	800a86a <HAL_SDRAM_ProgramRefreshRate>
}
 80043f4:	bf00      	nop
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	200012b8 	.word	0x200012b8
 8004400:	20001268 	.word	0x20001268

08004404 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b090      	sub	sp, #64	@ 0x40
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80ec 	beq.w	80045ee <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800441a:	4b77      	ldr	r3, [pc, #476]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 800441c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441e:	4a76      	ldr	r2, [pc, #472]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6393      	str	r3, [r2, #56]	@ 0x38
 8004426:	4b74      	ldr	r3, [pc, #464]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 8004428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004430:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	627b      	str	r3, [r7, #36]	@ 0x24
 8004436:	4b70      	ldr	r3, [pc, #448]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	4a6f      	ldr	r2, [pc, #444]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 800443c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004440:	6313      	str	r3, [r2, #48]	@ 0x30
 8004442:	4b6d      	ldr	r3, [pc, #436]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800444a:	627b      	str	r3, [r7, #36]	@ 0x24
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	623b      	str	r3, [r7, #32]
 8004452:	4b69      	ldr	r3, [pc, #420]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004456:	4a68      	ldr	r2, [pc, #416]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 8004458:	f043 0302 	orr.w	r3, r3, #2
 800445c:	6313      	str	r3, [r2, #48]	@ 0x30
 800445e:	4b66      	ldr	r3, [pc, #408]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	623b      	str	r3, [r7, #32]
 8004468:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	4b62      	ldr	r3, [pc, #392]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	4a61      	ldr	r2, [pc, #388]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 8004474:	f043 0304 	orr.w	r3, r3, #4
 8004478:	6313      	str	r3, [r2, #48]	@ 0x30
 800447a:	4b5f      	ldr	r3, [pc, #380]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	61fb      	str	r3, [r7, #28]
 8004484:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	4b5b      	ldr	r3, [pc, #364]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	4a5a      	ldr	r2, [pc, #360]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 8004490:	f043 0308 	orr.w	r3, r3, #8
 8004494:	6313      	str	r3, [r2, #48]	@ 0x30
 8004496:	4b58      	ldr	r3, [pc, #352]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	4b54      	ldr	r3, [pc, #336]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	4a53      	ldr	r2, [pc, #332]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 80044ac:	f043 0310 	orr.w	r3, r3, #16
 80044b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044b2:	4b51      	ldr	r3, [pc, #324]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	4b4d      	ldr	r3, [pc, #308]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	4a4c      	ldr	r2, [pc, #304]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 80044c8:	f043 0320 	orr.w	r3, r3, #32
 80044cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ce:	4b4a      	ldr	r3, [pc, #296]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	4b46      	ldr	r3, [pc, #280]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e2:	4a45      	ldr	r2, [pc, #276]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 80044e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ea:	4b43      	ldr	r3, [pc, #268]	@ (80045f8 <BSP_SDRAM_MspInit+0x1f4>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80044f6:	2302      	movs	r3, #2
 80044f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80044fa:	2302      	movs	r3, #2
 80044fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004502:	230c      	movs	r3, #12
 8004504:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004506:	2360      	movs	r3, #96	@ 0x60
 8004508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800450a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800450e:	4619      	mov	r1, r3
 8004510:	483a      	ldr	r0, [pc, #232]	@ (80045fc <BSP_SDRAM_MspInit+0x1f8>)
 8004512:	f001 fa41 	bl	8005998 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8004516:	2301      	movs	r3, #1
 8004518:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800451a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800451e:	4619      	mov	r1, r3
 8004520:	4837      	ldr	r0, [pc, #220]	@ (8004600 <BSP_SDRAM_MspInit+0x1fc>)
 8004522:	f001 fa39 	bl	8005998 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8004526:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800452a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800452c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004530:	4619      	mov	r1, r3
 8004532:	4834      	ldr	r0, [pc, #208]	@ (8004604 <BSP_SDRAM_MspInit+0x200>)
 8004534:	f001 fa30 	bl	8005998 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8004538:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800453e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004542:	4619      	mov	r1, r3
 8004544:	4830      	ldr	r0, [pc, #192]	@ (8004608 <BSP_SDRAM_MspInit+0x204>)
 8004546:	f001 fa27 	bl	8005998 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 800454a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800454e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004550:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004554:	4619      	mov	r1, r3
 8004556:	482d      	ldr	r0, [pc, #180]	@ (800460c <BSP_SDRAM_MspInit+0x208>)
 8004558:	f001 fa1e 	bl	8005998 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800455c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004560:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004562:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004566:	4619      	mov	r1, r3
 8004568:	4829      	ldr	r0, [pc, #164]	@ (8004610 <BSP_SDRAM_MspInit+0x20c>)
 800456a:	f001 fa15 	bl	8005998 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800456e:	4b29      	ldr	r3, [pc, #164]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 8004570:	2200      	movs	r2, #0
 8004572:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004574:	4b27      	ldr	r3, [pc, #156]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 8004576:	2280      	movs	r2, #128	@ 0x80
 8004578:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800457a:	4b26      	ldr	r3, [pc, #152]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 800457c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004580:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004582:	4b24      	ldr	r3, [pc, #144]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 8004584:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004588:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800458a:	4b22      	ldr	r3, [pc, #136]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 800458c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004590:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004592:	4b20      	ldr	r3, [pc, #128]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 8004594:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004598:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 800459a:	4b1e      	ldr	r3, [pc, #120]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 800459c:	2200      	movs	r2, #0
 800459e:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80045a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 80045a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80045a6:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80045a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80045ae:	4b19      	ldr	r3, [pc, #100]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 80045b0:	2203      	movs	r2, #3
 80045b2:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80045b4:	4b17      	ldr	r3, [pc, #92]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80045ba:	4b16      	ldr	r3, [pc, #88]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80045c0:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 80045c2:	4a15      	ldr	r2, [pc, #84]	@ (8004618 <BSP_SDRAM_MspInit+0x214>)
 80045c4:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a12      	ldr	r2, [pc, #72]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 80045ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80045cc:	4a11      	ldr	r2, [pc, #68]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 80045d2:	4810      	ldr	r0, [pc, #64]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 80045d4:	f000 fb20 	bl	8004c18 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 80045d8:	480e      	ldr	r0, [pc, #56]	@ (8004614 <BSP_SDRAM_MspInit+0x210>)
 80045da:	f000 fa6f 	bl	8004abc <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80045de:	2200      	movs	r2, #0
 80045e0:	210f      	movs	r1, #15
 80045e2:	2038      	movs	r0, #56	@ 0x38
 80045e4:	f000 fa24 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80045e8:	2038      	movs	r0, #56	@ 0x38
 80045ea:	f000 fa3d 	bl	8004a68 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80045ee:	bf00      	nop
 80045f0:	3740      	adds	r7, #64	@ 0x40
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40020400 	.word	0x40020400
 8004600:	40020800 	.word	0x40020800
 8004604:	40020c00 	.word	0x40020c00
 8004608:	40021000 	.word	0x40021000
 800460c:	40021400 	.word	0x40021400
 8004610:	40021800 	.word	0x40021800
 8004614:	200012c8 	.word	0x200012c8
 8004618:	40026410 	.word	0x40026410

0800461c <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	460a      	mov	r2, r1
 8004626:	80fb      	strh	r3, [r7, #6]
 8004628:	4613      	mov	r3, r2
 800462a:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004630:	4a13      	ldr	r2, [pc, #76]	@ (8004680 <BSP_TS_Init+0x64>)
 8004632:	88fb      	ldrh	r3, [r7, #6]
 8004634:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8004636:	4a13      	ldr	r2, [pc, #76]	@ (8004684 <BSP_TS_Init+0x68>)
 8004638:	88bb      	ldrh	r3, [r7, #4]
 800463a:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800463c:	4b12      	ldr	r3, [pc, #72]	@ (8004688 <BSP_TS_Init+0x6c>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2082      	movs	r0, #130	@ 0x82
 8004642:	4798      	blx	r3
 8004644:	4603      	mov	r3, r0
 8004646:	461a      	mov	r2, r3
 8004648:	f640 0311 	movw	r3, #2065	@ 0x811
 800464c:	429a      	cmp	r2, r3
 800464e:	d104      	bne.n	800465a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004650:	4b0e      	ldr	r3, [pc, #56]	@ (800468c <BSP_TS_Init+0x70>)
 8004652:	4a0d      	ldr	r2, [pc, #52]	@ (8004688 <BSP_TS_Init+0x6c>)
 8004654:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004660:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <BSP_TS_Init+0x70>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2082      	movs	r0, #130	@ 0x82
 8004668:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800466a:	4b08      	ldr	r3, [pc, #32]	@ (800468c <BSP_TS_Init+0x70>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2082      	movs	r0, #130	@ 0x82
 8004672:	4798      	blx	r3
  }

  return ret;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	2000132c 	.word	0x2000132c
 8004684:	2000132e 	.word	0x2000132e
 8004688:	20000128 	.word	0x20000128
 800468c:	20001328 	.word	0x20001328

08004690 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef *TsState)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff, x, y, xr, yr;

  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004698:	4b4f      	ldr	r3, [pc, #316]	@ (80047d8 <BSP_TS_GetState+0x148>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2082      	movs	r0, #130	@ 0x82
 80046a0:	4798      	blx	r3
 80046a2:	4603      	mov	r3, r0
 80046a4:	461a      	mov	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	801a      	strh	r2, [r3, #0]

  if (TsState->TouchDetected)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 808d 	beq.w	80047ce <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80046b4:	4b48      	ldr	r3, [pc, #288]	@ (80047d8 <BSP_TS_GetState+0x148>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f107 020c 	add.w	r2, r7, #12
 80046be:	f107 010e 	add.w	r1, r7, #14
 80046c2:	2082      	movs	r0, #130	@ 0x82
 80046c4:	4798      	blx	r3
    /* Y value first correction */
    y = 3700 - y;
#else

    /* Y value first correction */
    y -= 360;
 80046c6:	89bb      	ldrh	r3, [r7, #12]
 80046c8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	81bb      	strh	r3, [r7, #12]

#endif

    /* Y value second correction */
    yr = y / 11;
 80046d0:	89bb      	ldrh	r3, [r7, #12]
 80046d2:	4a42      	ldr	r2, [pc, #264]	@ (80047dc <BSP_TS_GetState+0x14c>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	08db      	lsrs	r3, r3, #3
 80046da:	82bb      	strh	r3, [r7, #20]

    /* Return y position value */
    if (yr <= 0)
 80046dc:	8abb      	ldrh	r3, [r7, #20]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d102      	bne.n	80046e8 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	82bb      	strh	r3, [r7, #20]
 80046e6:	e008      	b.n	80046fa <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80046e8:	4b3d      	ldr	r3, [pc, #244]	@ (80047e0 <BSP_TS_GetState+0x150>)
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	8aba      	ldrh	r2, [r7, #20]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d903      	bls.n	80046fa <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80046f2:	4b3b      	ldr	r3, [pc, #236]	@ (80047e0 <BSP_TS_GetState+0x150>)
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80046fa:	8abb      	ldrh	r3, [r7, #20]
 80046fc:	81bb      	strh	r3, [r7, #12]

    /* X value first correction */
    if (x <= 3000)
 80046fe:	89fb      	ldrh	r3, [r7, #14]
 8004700:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004704:	4293      	cmp	r3, r2
 8004706:	d806      	bhi.n	8004716 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004708:	89fb      	ldrh	r3, [r7, #14]
 800470a:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 800470e:	330e      	adds	r3, #14
 8004710:	b29b      	uxth	r3, r3
 8004712:	81fb      	strh	r3, [r7, #14]
 8004714:	e005      	b.n	8004722 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8004716:	89fb      	ldrh	r3, [r7, #14]
 8004718:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800471c:	3308      	adds	r3, #8
 800471e:	b29b      	uxth	r3, r3
 8004720:	81fb      	strh	r3, [r7, #14]
    }

    /* X value second correction */
    xr = x / 15;
 8004722:	89fb      	ldrh	r3, [r7, #14]
 8004724:	4a2f      	ldr	r2, [pc, #188]	@ (80047e4 <BSP_TS_GetState+0x154>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	08db      	lsrs	r3, r3, #3
 800472c:	82fb      	strh	r3, [r7, #22]

    /* Return X position value */
    if (xr <= 0)
 800472e:	8afb      	ldrh	r3, [r7, #22]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	82fb      	strh	r3, [r7, #22]
 8004738:	e008      	b.n	800474c <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800473a:	4b2b      	ldr	r3, [pc, #172]	@ (80047e8 <BSP_TS_GetState+0x158>)
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	8afa      	ldrh	r2, [r7, #22]
 8004740:	429a      	cmp	r2, r3
 8004742:	d903      	bls.n	800474c <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004744:	4b28      	ldr	r3, [pc, #160]	@ (80047e8 <BSP_TS_GetState+0x158>)
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	3b01      	subs	r3, #1
 800474a:	82fb      	strh	r3, [r7, #22]
    }
    else
    {}

    x = xr;
 800474c:	8afb      	ldrh	r3, [r7, #22]
 800474e:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x ? (x - _x): (_x - x);
 8004750:	89fb      	ldrh	r3, [r7, #14]
 8004752:	461a      	mov	r2, r3
 8004754:	4b25      	ldr	r3, [pc, #148]	@ (80047ec <BSP_TS_GetState+0x15c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d906      	bls.n	800476a <BSP_TS_GetState+0xda>
 800475c:	89fa      	ldrh	r2, [r7, #14]
 800475e:	4b23      	ldr	r3, [pc, #140]	@ (80047ec <BSP_TS_GetState+0x15c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	b29b      	uxth	r3, r3
 8004768:	e005      	b.n	8004776 <BSP_TS_GetState+0xe6>
 800476a:	4b20      	ldr	r3, [pc, #128]	@ (80047ec <BSP_TS_GetState+0x15c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	b29a      	uxth	r2, r3
 8004770:	89fb      	ldrh	r3, [r7, #14]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	b29b      	uxth	r3, r3
 8004776:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y ? (y - _y) : (_y - y);
 8004778:	89bb      	ldrh	r3, [r7, #12]
 800477a:	461a      	mov	r2, r3
 800477c:	4b1c      	ldr	r3, [pc, #112]	@ (80047f0 <BSP_TS_GetState+0x160>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d906      	bls.n	8004792 <BSP_TS_GetState+0x102>
 8004784:	89ba      	ldrh	r2, [r7, #12]
 8004786:	4b1a      	ldr	r3, [pc, #104]	@ (80047f0 <BSP_TS_GetState+0x160>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	b29b      	uxth	r3, r3
 8004790:	e005      	b.n	800479e <BSP_TS_GetState+0x10e>
 8004792:	4b17      	ldr	r3, [pc, #92]	@ (80047f0 <BSP_TS_GetState+0x160>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	b29a      	uxth	r2, r3
 8004798:	89bb      	ldrh	r3, [r7, #12]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	b29b      	uxth	r3, r3
 800479e:	823b      	strh	r3, [r7, #16]

    if (xDiff + yDiff > 5)
 80047a0:	8a7a      	ldrh	r2, [r7, #18]
 80047a2:	8a3b      	ldrh	r3, [r7, #16]
 80047a4:	4413      	add	r3, r2
 80047a6:	2b05      	cmp	r3, #5
 80047a8:	dd07      	ble.n	80047ba <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80047aa:	89fb      	ldrh	r3, [r7, #14]
 80047ac:	461a      	mov	r2, r3
 80047ae:	4b0f      	ldr	r3, [pc, #60]	@ (80047ec <BSP_TS_GetState+0x15c>)
 80047b0:	601a      	str	r2, [r3, #0]
      _y = y;
 80047b2:	89bb      	ldrh	r3, [r7, #12]
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b0e      	ldr	r3, [pc, #56]	@ (80047f0 <BSP_TS_GetState+0x160>)
 80047b8:	601a      	str	r2, [r3, #0]
    }

    /* Update the X position */
    TsState->X = _x;
 80047ba:	4b0c      	ldr	r3, [pc, #48]	@ (80047ec <BSP_TS_GetState+0x15c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	b29a      	uxth	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	805a      	strh	r2, [r3, #2]

    /* Update the Y position */
    TsState->Y = _y;
 80047c4:	4b0a      	ldr	r3, [pc, #40]	@ (80047f0 <BSP_TS_GetState+0x160>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	809a      	strh	r2, [r3, #4]
  }
}
 80047ce:	bf00      	nop
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20001328 	.word	0x20001328
 80047dc:	ba2e8ba3 	.word	0xba2e8ba3
 80047e0:	2000132e 	.word	0x2000132e
 80047e4:	88888889 	.word	0x88888889
 80047e8:	2000132c 	.word	0x2000132c
 80047ec:	20001330 	.word	0x20001330
 80047f0:	20001334 	.word	0x20001334

080047f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004834 <HAL_Init+0x40>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004834 <HAL_Init+0x40>)
 80047fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004804:	4b0b      	ldr	r3, [pc, #44]	@ (8004834 <HAL_Init+0x40>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a0a      	ldr	r2, [pc, #40]	@ (8004834 <HAL_Init+0x40>)
 800480a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800480e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004810:	4b08      	ldr	r3, [pc, #32]	@ (8004834 <HAL_Init+0x40>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a07      	ldr	r2, [pc, #28]	@ (8004834 <HAL_Init+0x40>)
 8004816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800481a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800481c:	2003      	movs	r0, #3
 800481e:	f000 f8fc 	bl	8004a1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004822:	200f      	movs	r0, #15
 8004824:	f7fd ff4e 	bl	80026c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004828:	f7fd fb8a 	bl	8001f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40023c00 	.word	0x40023c00

08004838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800483c:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <HAL_IncTick+0x20>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	4b06      	ldr	r3, [pc, #24]	@ (800485c <HAL_IncTick+0x24>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4413      	add	r3, r2
 8004848:	4a04      	ldr	r2, [pc, #16]	@ (800485c <HAL_IncTick+0x24>)
 800484a:	6013      	str	r3, [r2, #0]
}
 800484c:	bf00      	nop
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000170 	.word	0x20000170
 800485c:	20001338 	.word	0x20001338

08004860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  return uwTick;
 8004864:	4b03      	ldr	r3, [pc, #12]	@ (8004874 <HAL_GetTick+0x14>)
 8004866:	681b      	ldr	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20001338 	.word	0x20001338

08004878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004880:	f7ff ffee 	bl	8004860 <HAL_GetTick>
 8004884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d005      	beq.n	800489e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004892:	4b0a      	ldr	r3, [pc, #40]	@ (80048bc <HAL_Delay+0x44>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800489e:	bf00      	nop
 80048a0:	f7ff ffde 	bl	8004860 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d8f7      	bhi.n	80048a0 <HAL_Delay+0x28>
  {
  }
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000170 	.word	0x20000170

080048c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <__NVIC_SetPriorityGrouping+0x44>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048dc:	4013      	ands	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048f2:	4a04      	ldr	r2, [pc, #16]	@ (8004904 <__NVIC_SetPriorityGrouping+0x44>)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	60d3      	str	r3, [r2, #12]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	e000ed00 	.word	0xe000ed00

08004908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800490c:	4b04      	ldr	r3, [pc, #16]	@ (8004920 <__NVIC_GetPriorityGrouping+0x18>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	0a1b      	lsrs	r3, r3, #8
 8004912:	f003 0307 	and.w	r3, r3, #7
}
 8004916:	4618      	mov	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	e000ed00 	.word	0xe000ed00

08004924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800492e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004932:	2b00      	cmp	r3, #0
 8004934:	db0b      	blt.n	800494e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	f003 021f 	and.w	r2, r3, #31
 800493c:	4907      	ldr	r1, [pc, #28]	@ (800495c <__NVIC_EnableIRQ+0x38>)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	2001      	movs	r0, #1
 8004946:	fa00 f202 	lsl.w	r2, r0, r2
 800494a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	e000e100 	.word	0xe000e100

08004960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	6039      	str	r1, [r7, #0]
 800496a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800496c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004970:	2b00      	cmp	r3, #0
 8004972:	db0a      	blt.n	800498a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	b2da      	uxtb	r2, r3
 8004978:	490c      	ldr	r1, [pc, #48]	@ (80049ac <__NVIC_SetPriority+0x4c>)
 800497a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497e:	0112      	lsls	r2, r2, #4
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	440b      	add	r3, r1
 8004984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004988:	e00a      	b.n	80049a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	b2da      	uxtb	r2, r3
 800498e:	4908      	ldr	r1, [pc, #32]	@ (80049b0 <__NVIC_SetPriority+0x50>)
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	3b04      	subs	r3, #4
 8004998:	0112      	lsls	r2, r2, #4
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	440b      	add	r3, r1
 800499e:	761a      	strb	r2, [r3, #24]
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	e000e100 	.word	0xe000e100
 80049b0:	e000ed00 	.word	0xe000ed00

080049b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	@ 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f1c3 0307 	rsb	r3, r3, #7
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	bf28      	it	cs
 80049d2:	2304      	movcs	r3, #4
 80049d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	3304      	adds	r3, #4
 80049da:	2b06      	cmp	r3, #6
 80049dc:	d902      	bls.n	80049e4 <NVIC_EncodePriority+0x30>
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3b03      	subs	r3, #3
 80049e2:	e000      	b.n	80049e6 <NVIC_EncodePriority+0x32>
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43da      	mvns	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	401a      	ands	r2, r3
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	fa01 f303 	lsl.w	r3, r1, r3
 8004a06:	43d9      	mvns	r1, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a0c:	4313      	orrs	r3, r2
         );
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3724      	adds	r7, #36	@ 0x24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff ff4c 	bl	80048c0 <__NVIC_SetPriorityGrouping>
}
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a42:	f7ff ff61 	bl	8004908 <__NVIC_GetPriorityGrouping>
 8004a46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	6978      	ldr	r0, [r7, #20]
 8004a4e:	f7ff ffb1 	bl	80049b4 <NVIC_EncodePriority>
 8004a52:	4602      	mov	r2, r0
 8004a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a58:	4611      	mov	r1, r2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff ff80 	bl	8004960 <__NVIC_SetPriority>
}
 8004a60:	bf00      	nop
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff ff54 	bl	8004924 <__NVIC_EnableIRQ>
}
 8004a7c:	bf00      	nop
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e00e      	b.n	8004ab4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	795b      	ldrb	r3, [r3, #5]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fd fa72 	bl	8001f90 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ac8:	f7ff feca 	bl	8004860 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e099      	b.n	8004c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004af8:	e00f      	b.n	8004b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004afa:	f7ff feb1 	bl	8004860 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b05      	cmp	r3, #5
 8004b06:	d908      	bls.n	8004b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2203      	movs	r2, #3
 8004b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e078      	b.n	8004c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e8      	bne.n	8004afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4b38      	ldr	r3, [pc, #224]	@ (8004c14 <HAL_DMA_Init+0x158>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d107      	bne.n	8004b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f023 0307 	bic.w	r3, r3, #7
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d117      	bne.n	8004bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00e      	beq.n	8004bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f8bd 	bl	8004d40 <DMA_CheckFifoParam>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d008      	beq.n	8004bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2240      	movs	r2, #64	@ 0x40
 8004bd0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e016      	b.n	8004c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f874 	bl	8004cd4 <DMA_CalcBaseAndBitshift>
 8004bec:	4603      	mov	r3, r0
 8004bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf4:	223f      	movs	r2, #63	@ 0x3f
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	f010803f 	.word	0xf010803f

08004c18 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e050      	b.n	8004ccc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d101      	bne.n	8004c3a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004c36:	2302      	movs	r3, #2
 8004c38:	e048      	b.n	8004ccc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0201 	bic.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2200      	movs	r2, #0
 8004c58:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2200      	movs	r2, #0
 8004c68:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2221      	movs	r2, #33	@ 0x21
 8004c78:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f82a 	bl	8004cd4 <DMA_CalcBaseAndBitshift>
 8004c80:	4603      	mov	r3, r0
 8004c82:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cac:	223f      	movs	r2, #63	@ 0x3f
 8004cae:	409a      	lsls	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	3b10      	subs	r3, #16
 8004ce4:	4a14      	ldr	r2, [pc, #80]	@ (8004d38 <DMA_CalcBaseAndBitshift+0x64>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	091b      	lsrs	r3, r3, #4
 8004cec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cee:	4a13      	ldr	r2, [pc, #76]	@ (8004d3c <DMA_CalcBaseAndBitshift+0x68>)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d909      	bls.n	8004d16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	1d1a      	adds	r2, r3, #4
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d14:	e007      	b.n	8004d26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d1e:	f023 0303 	bic.w	r3, r3, #3
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	aaaaaaab 	.word	0xaaaaaaab
 8004d3c:	080151e8 	.word	0x080151e8

08004d40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d11f      	bne.n	8004d9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d856      	bhi.n	8004e0e <DMA_CheckFifoParam+0xce>
 8004d60:	a201      	add	r2, pc, #4	@ (adr r2, 8004d68 <DMA_CheckFifoParam+0x28>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d79 	.word	0x08004d79
 8004d6c:	08004d8b 	.word	0x08004d8b
 8004d70:	08004d79 	.word	0x08004d79
 8004d74:	08004e0f 	.word	0x08004e0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d046      	beq.n	8004e12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d88:	e043      	b.n	8004e12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d92:	d140      	bne.n	8004e16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d98:	e03d      	b.n	8004e16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004da2:	d121      	bne.n	8004de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d837      	bhi.n	8004e1a <DMA_CheckFifoParam+0xda>
 8004daa:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <DMA_CheckFifoParam+0x70>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004dc7 	.word	0x08004dc7
 8004db8:	08004dc1 	.word	0x08004dc1
 8004dbc:	08004dd9 	.word	0x08004dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc4:	e030      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d025      	beq.n	8004e1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd6:	e022      	b.n	8004e1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004de0:	d11f      	bne.n	8004e22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004de6:	e01c      	b.n	8004e22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d903      	bls.n	8004df6 <DMA_CheckFifoParam+0xb6>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d003      	beq.n	8004dfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004df4:	e018      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
      break;
 8004dfa:	e015      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00e      	beq.n	8004e26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e0c:	e00b      	b.n	8004e26 <DMA_CheckFifoParam+0xe6>
      break;
 8004e0e:	bf00      	nop
 8004e10:	e00a      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      break;
 8004e12:	bf00      	nop
 8004e14:	e008      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      break;
 8004e16:	bf00      	nop
 8004e18:	e006      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      break;
 8004e1a:	bf00      	nop
 8004e1c:	e004      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e002      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e22:	bf00      	nop
 8004e24:	e000      	b.n	8004e28 <DMA_CheckFifoParam+0xe8>
      break;
 8004e26:	bf00      	nop
    }
  } 
  
  return status; 
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop

08004e38 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e03b      	b.n	8004ec2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fd f8b8 	bl	8001fd4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e88:	f023 0107 	bic.w	r1, r3, #7
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004ea2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68d1      	ldr	r1, [r2, #12]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b086      	sub	sp, #24
 8004ece:	af02      	add	r7, sp, #8
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
 8004ed6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_DMA2D_Start+0x1c>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e018      	b.n	8004f18 <HAL_DMA2D_Start+0x4e>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fa99 	bl	8005438 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d056      	beq.n	8004fea <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f3c:	f7ff fc90 	bl	8004860 <HAL_GetTick>
 8004f40:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004f42:	e04b      	b.n	8004fdc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d023      	beq.n	8004f9e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f64:	f043 0202 	orr.w	r2, r3, #2
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7a:	f043 0201 	orr.w	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2221      	movs	r2, #33	@ 0x21
 8004f88:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e0a5      	b.n	80050ea <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d01a      	beq.n	8004fdc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fa6:	f7ff fc5b 	bl	8004860 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d302      	bcc.n	8004fbc <HAL_DMA2D_PollForTransfer+0x9c>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10f      	bne.n	8004fdc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc0:	f043 0220 	orr.w	r2, r3, #32
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2203      	movs	r2, #3
 8004fcc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e086      	b.n	80050ea <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0ac      	beq.n	8004f44 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffc:	f003 0320 	and.w	r3, r3, #32
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d061      	beq.n	80050d0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800500c:	f7ff fc28 	bl	8004860 <HAL_GetTick>
 8005010:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005012:	e056      	b.n	80050c2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005022:	2b00      	cmp	r3, #0
 8005024:	d02e      	beq.n	8005084 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005034:	f043 0204 	orr.w	r2, r3, #4
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504a:	f043 0202 	orr.w	r2, r3, #2
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005060:	f043 0201 	orr.w	r2, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2229      	movs	r2, #41	@ 0x29
 800506e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2204      	movs	r2, #4
 8005074:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e032      	b.n	80050ea <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d01a      	beq.n	80050c2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800508c:	f7ff fbe8 	bl	8004860 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d302      	bcc.n	80050a2 <HAL_DMA2D_PollForTransfer+0x182>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10f      	bne.n	80050c2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a6:	f043 0220 	orr.w	r2, r3, #32
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2203      	movs	r2, #3
 80050b2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e013      	b.n	80050ea <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0a1      	beq.n	8005014 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2212      	movs	r2, #18
 80050d6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d026      	beq.n	8005162 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d021      	beq.n	8005162 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800512c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005132:	f043 0201 	orr.w	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2201      	movs	r2, #1
 8005140:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2204      	movs	r2, #4
 8005146:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d026      	beq.n	80051ba <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d021      	beq.n	80051ba <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005184:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2220      	movs	r2, #32
 800518c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005192:	f043 0202 	orr.w	r2, r3, #2
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2204      	movs	r2, #4
 800519e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d026      	beq.n	8005212 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d021      	beq.n	8005212 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051dc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2208      	movs	r2, #8
 80051e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ea:	f043 0204 	orr.w	r2, r3, #4
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2204      	movs	r2, #4
 80051f6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d013      	beq.n	8005244 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00e      	beq.n	8005244 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005234:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2204      	movs	r2, #4
 800523c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f853 	bl	80052ea <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d024      	beq.n	8005298 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01f      	beq.n	8005298 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005266:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2202      	movs	r2, #2
 800526e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01f      	beq.n	80052e2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01a      	beq.n	80052e2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052ba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2210      	movs	r2, #16
 80052c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f80e 	bl	80052fe <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80052e2:	bf00      	nop
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
	...

08005314 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_DMA2D_ConfigLayer+0x20>
 8005330:	2302      	movs	r3, #2
 8005332:	e079      	b.n	8005428 <HAL_DMA2D_ConfigLayer+0x114>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	3318      	adds	r3, #24
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	4413      	add	r3, r2
 800534e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	041b      	lsls	r3, r3, #16
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800535e:	4b35      	ldr	r3, [pc, #212]	@ (8005434 <HAL_DMA2D_ConfigLayer+0x120>)
 8005360:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b0a      	cmp	r3, #10
 8005368:	d003      	beq.n	8005372 <HAL_DMA2D_ConfigLayer+0x5e>
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b09      	cmp	r3, #9
 8005370:	d107      	bne.n	8005382 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	e005      	b.n	800538e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	061b      	lsls	r3, r3, #24
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d120      	bne.n	80053d6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	43db      	mvns	r3, r3
 800539e:	ea02 0103 	and.w	r1, r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	6812      	ldr	r2, [r2, #0]
 80053b4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b0a      	cmp	r3, #10
 80053bc:	d003      	beq.n	80053c6 <HAL_DMA2D_ConfigLayer+0xb2>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b09      	cmp	r3, #9
 80053c4:	d127      	bne.n	8005416 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80053d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80053d4:	e01f      	b.n	8005416 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69da      	ldr	r2, [r3, #28]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	43db      	mvns	r3, r3
 80053e0:	ea02 0103 	and.w	r1, r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b0a      	cmp	r3, #10
 80053fe:	d003      	beq.n	8005408 <HAL_DMA2D_ConfigLayer+0xf4>
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b09      	cmp	r3, #9
 8005406:	d106      	bne.n	8005416 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005414:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	371c      	adds	r7, #28
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	ff03000f 	.word	0xff03000f

08005438 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005438:	b480      	push	{r7}
 800543a:	b08b      	sub	sp, #44	@ 0x2c
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	041a      	lsls	r2, r3, #16
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	431a      	orrs	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005470:	d174      	bne.n	800555c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005478:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005480:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005488:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d108      	bne.n	80054aa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	431a      	orrs	r2, r3
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a8:	e053      	b.n	8005552 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d106      	bne.n	80054c0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80054be:	e048      	b.n	8005552 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d111      	bne.n	80054ec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	0cdb      	lsrs	r3, r3, #19
 80054cc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	0a9b      	lsrs	r3, r3, #10
 80054d2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	08db      	lsrs	r3, r3, #3
 80054d8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	02db      	lsls	r3, r3, #11
 80054e2:	4313      	orrs	r3, r2
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ea:	e032      	b.n	8005552 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d117      	bne.n	8005524 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	0fdb      	lsrs	r3, r3, #31
 80054f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	0cdb      	lsrs	r3, r3, #19
 80054fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	0adb      	lsrs	r3, r3, #11
 8005504:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	08db      	lsrs	r3, r3, #3
 800550a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	029b      	lsls	r3, r3, #10
 8005514:	431a      	orrs	r2, r3
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	03db      	lsls	r3, r3, #15
 800551a:	4313      	orrs	r3, r2
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
 8005522:	e016      	b.n	8005552 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	0f1b      	lsrs	r3, r3, #28
 8005528:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	0d1b      	lsrs	r3, r3, #20
 800552e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	0b1b      	lsrs	r3, r3, #12
 8005534:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	011a      	lsls	r2, r3, #4
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	431a      	orrs	r2, r3
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	031b      	lsls	r3, r3, #12
 800554a:	4313      	orrs	r3, r2
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005558:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800555a:	e003      	b.n	8005564 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	60da      	str	r2, [r3, #12]
}
 8005564:	bf00      	nop
 8005566:	372c      	adds	r7, #44	@ 0x2c
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005582:	4b23      	ldr	r3, [pc, #140]	@ (8005610 <HAL_FLASH_Program+0xa0>)
 8005584:	7e1b      	ldrb	r3, [r3, #24]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_FLASH_Program+0x1e>
 800558a:	2302      	movs	r3, #2
 800558c:	e03b      	b.n	8005606 <HAL_FLASH_Program+0x96>
 800558e:	4b20      	ldr	r3, [pc, #128]	@ (8005610 <HAL_FLASH_Program+0xa0>)
 8005590:	2201      	movs	r2, #1
 8005592:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005594:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005598:	f000 f870 	bl	800567c <FLASH_WaitForLastOperation>
 800559c:	4603      	mov	r3, r0
 800559e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d12b      	bne.n	80055fe <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d105      	bne.n	80055b8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80055ac:	783b      	ldrb	r3, [r7, #0]
 80055ae:	4619      	mov	r1, r3
 80055b0:	68b8      	ldr	r0, [r7, #8]
 80055b2:	f000 f91b 	bl	80057ec <FLASH_Program_Byte>
 80055b6:	e016      	b.n	80055e6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d105      	bne.n	80055ca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80055be:	883b      	ldrh	r3, [r7, #0]
 80055c0:	4619      	mov	r1, r3
 80055c2:	68b8      	ldr	r0, [r7, #8]
 80055c4:	f000 f8ee 	bl	80057a4 <FLASH_Program_HalfWord>
 80055c8:	e00d      	b.n	80055e6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d105      	bne.n	80055dc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	4619      	mov	r1, r3
 80055d4:	68b8      	ldr	r0, [r7, #8]
 80055d6:	f000 f8c3 	bl	8005760 <FLASH_Program_Word>
 80055da:	e004      	b.n	80055e6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80055dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e0:	68b8      	ldr	r0, [r7, #8]
 80055e2:	f000 f88b 	bl	80056fc <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055e6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80055ea:	f000 f847 	bl	800567c <FLASH_WaitForLastOperation>
 80055ee:	4603      	mov	r3, r0
 80055f0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80055f2:	4b08      	ldr	r3, [pc, #32]	@ (8005614 <HAL_FLASH_Program+0xa4>)
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	4a07      	ldr	r2, [pc, #28]	@ (8005614 <HAL_FLASH_Program+0xa4>)
 80055f8:	f023 0301 	bic.w	r3, r3, #1
 80055fc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80055fe:	4b04      	ldr	r3, [pc, #16]	@ (8005610 <HAL_FLASH_Program+0xa0>)
 8005600:	2200      	movs	r2, #0
 8005602:	761a      	strb	r2, [r3, #24]

  return status;
 8005604:	7dfb      	ldrb	r3, [r7, #23]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	2000133c 	.word	0x2000133c
 8005614:	40023c00 	.word	0x40023c00

08005618 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005622:	4b0b      	ldr	r3, [pc, #44]	@ (8005650 <HAL_FLASH_Unlock+0x38>)
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	da0b      	bge.n	8005642 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800562a:	4b09      	ldr	r3, [pc, #36]	@ (8005650 <HAL_FLASH_Unlock+0x38>)
 800562c:	4a09      	ldr	r2, [pc, #36]	@ (8005654 <HAL_FLASH_Unlock+0x3c>)
 800562e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005630:	4b07      	ldr	r3, [pc, #28]	@ (8005650 <HAL_FLASH_Unlock+0x38>)
 8005632:	4a09      	ldr	r2, [pc, #36]	@ (8005658 <HAL_FLASH_Unlock+0x40>)
 8005634:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005636:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <HAL_FLASH_Unlock+0x38>)
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	da01      	bge.n	8005642 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005642:	79fb      	ldrb	r3, [r7, #7]
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	40023c00 	.word	0x40023c00
 8005654:	45670123 	.word	0x45670123
 8005658:	cdef89ab 	.word	0xcdef89ab

0800565c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005660:	4b05      	ldr	r3, [pc, #20]	@ (8005678 <HAL_FLASH_Lock+0x1c>)
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	4a04      	ldr	r2, [pc, #16]	@ (8005678 <HAL_FLASH_Lock+0x1c>)
 8005666:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800566a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	40023c00 	.word	0x40023c00

0800567c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005688:	4b1a      	ldr	r3, [pc, #104]	@ (80056f4 <FLASH_WaitForLastOperation+0x78>)
 800568a:	2200      	movs	r2, #0
 800568c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800568e:	f7ff f8e7 	bl	8004860 <HAL_GetTick>
 8005692:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8005694:	e010      	b.n	80056b8 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569c:	d00c      	beq.n	80056b8 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <FLASH_WaitForLastOperation+0x38>
 80056a4:	f7ff f8dc 	bl	8004860 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d201      	bcs.n	80056b8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e019      	b.n	80056ec <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80056b8:	4b0f      	ldr	r3, [pc, #60]	@ (80056f8 <FLASH_WaitForLastOperation+0x7c>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e8      	bne.n	8005696 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80056c4:	4b0c      	ldr	r3, [pc, #48]	@ (80056f8 <FLASH_WaitForLastOperation+0x7c>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80056d0:	4b09      	ldr	r3, [pc, #36]	@ (80056f8 <FLASH_WaitForLastOperation+0x7c>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80056d6:	4b08      	ldr	r3, [pc, #32]	@ (80056f8 <FLASH_WaitForLastOperation+0x7c>)
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80056e2:	f000 f8a5 	bl	8005830 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0

}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	2000133c 	.word	0x2000133c
 80056f8:	40023c00 	.word	0x40023c00

080056fc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005708:	4b14      	ldr	r3, [pc, #80]	@ (800575c <FLASH_Program_DoubleWord+0x60>)
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	4a13      	ldr	r2, [pc, #76]	@ (800575c <FLASH_Program_DoubleWord+0x60>)
 800570e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005712:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005714:	4b11      	ldr	r3, [pc, #68]	@ (800575c <FLASH_Program_DoubleWord+0x60>)
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	4a10      	ldr	r2, [pc, #64]	@ (800575c <FLASH_Program_DoubleWord+0x60>)
 800571a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800571e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005720:	4b0e      	ldr	r3, [pc, #56]	@ (800575c <FLASH_Program_DoubleWord+0x60>)
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	4a0d      	ldr	r2, [pc, #52]	@ (800575c <FLASH_Program_DoubleWord+0x60>)
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005732:	f3bf 8f6f 	isb	sy
}
 8005736:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8005738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	000a      	movs	r2, r1
 8005746:	2300      	movs	r3, #0
 8005748:	68f9      	ldr	r1, [r7, #12]
 800574a:	3104      	adds	r1, #4
 800574c:	4613      	mov	r3, r2
 800574e:	600b      	str	r3, [r1, #0]
}
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	40023c00 	.word	0x40023c00

08005760 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800576a:	4b0d      	ldr	r3, [pc, #52]	@ (80057a0 <FLASH_Program_Word+0x40>)
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	4a0c      	ldr	r2, [pc, #48]	@ (80057a0 <FLASH_Program_Word+0x40>)
 8005770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005774:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005776:	4b0a      	ldr	r3, [pc, #40]	@ (80057a0 <FLASH_Program_Word+0x40>)
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	4a09      	ldr	r2, [pc, #36]	@ (80057a0 <FLASH_Program_Word+0x40>)
 800577c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005780:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005782:	4b07      	ldr	r3, [pc, #28]	@ (80057a0 <FLASH_Program_Word+0x40>)
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	4a06      	ldr	r2, [pc, #24]	@ (80057a0 <FLASH_Program_Word+0x40>)
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40023c00 	.word	0x40023c00

080057a4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057b0:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <FLASH_Program_HalfWord+0x44>)
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	4a0c      	ldr	r2, [pc, #48]	@ (80057e8 <FLASH_Program_HalfWord+0x44>)
 80057b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80057bc:	4b0a      	ldr	r3, [pc, #40]	@ (80057e8 <FLASH_Program_HalfWord+0x44>)
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	4a09      	ldr	r2, [pc, #36]	@ (80057e8 <FLASH_Program_HalfWord+0x44>)
 80057c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80057c8:	4b07      	ldr	r3, [pc, #28]	@ (80057e8 <FLASH_Program_HalfWord+0x44>)
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	4a06      	ldr	r2, [pc, #24]	@ (80057e8 <FLASH_Program_HalfWord+0x44>)
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	887a      	ldrh	r2, [r7, #2]
 80057d8:	801a      	strh	r2, [r3, #0]
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40023c00 	.word	0x40023c00

080057ec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057f8:	4b0c      	ldr	r3, [pc, #48]	@ (800582c <FLASH_Program_Byte+0x40>)
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	4a0b      	ldr	r2, [pc, #44]	@ (800582c <FLASH_Program_Byte+0x40>)
 80057fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005802:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005804:	4b09      	ldr	r3, [pc, #36]	@ (800582c <FLASH_Program_Byte+0x40>)
 8005806:	4a09      	ldr	r2, [pc, #36]	@ (800582c <FLASH_Program_Byte+0x40>)
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800580c:	4b07      	ldr	r3, [pc, #28]	@ (800582c <FLASH_Program_Byte+0x40>)
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	4a06      	ldr	r2, [pc, #24]	@ (800582c <FLASH_Program_Byte+0x40>)
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	78fa      	ldrb	r2, [r7, #3]
 800581c:	701a      	strb	r2, [r3, #0]
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	40023c00 	.word	0x40023c00

08005830 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005834:	4b2f      	ldr	r3, [pc, #188]	@ (80058f4 <FLASH_SetErrorCode+0xc4>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b00      	cmp	r3, #0
 800583e:	d008      	beq.n	8005852 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005840:	4b2d      	ldr	r3, [pc, #180]	@ (80058f8 <FLASH_SetErrorCode+0xc8>)
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f043 0310 	orr.w	r3, r3, #16
 8005848:	4a2b      	ldr	r2, [pc, #172]	@ (80058f8 <FLASH_SetErrorCode+0xc8>)
 800584a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800584c:	4b29      	ldr	r3, [pc, #164]	@ (80058f4 <FLASH_SetErrorCode+0xc4>)
 800584e:	2210      	movs	r2, #16
 8005850:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005852:	4b28      	ldr	r3, [pc, #160]	@ (80058f4 <FLASH_SetErrorCode+0xc4>)
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b00      	cmp	r3, #0
 800585c:	d008      	beq.n	8005870 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800585e:	4b26      	ldr	r3, [pc, #152]	@ (80058f8 <FLASH_SetErrorCode+0xc8>)
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f043 0308 	orr.w	r3, r3, #8
 8005866:	4a24      	ldr	r2, [pc, #144]	@ (80058f8 <FLASH_SetErrorCode+0xc8>)
 8005868:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800586a:	4b22      	ldr	r3, [pc, #136]	@ (80058f4 <FLASH_SetErrorCode+0xc4>)
 800586c:	2220      	movs	r2, #32
 800586e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005870:	4b20      	ldr	r3, [pc, #128]	@ (80058f4 <FLASH_SetErrorCode+0xc4>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800587c:	4b1e      	ldr	r3, [pc, #120]	@ (80058f8 <FLASH_SetErrorCode+0xc8>)
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f043 0304 	orr.w	r3, r3, #4
 8005884:	4a1c      	ldr	r2, [pc, #112]	@ (80058f8 <FLASH_SetErrorCode+0xc8>)
 8005886:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005888:	4b1a      	ldr	r3, [pc, #104]	@ (80058f4 <FLASH_SetErrorCode+0xc4>)
 800588a:	2240      	movs	r2, #64	@ 0x40
 800588c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800588e:	4b19      	ldr	r3, [pc, #100]	@ (80058f4 <FLASH_SetErrorCode+0xc4>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800589a:	4b17      	ldr	r3, [pc, #92]	@ (80058f8 <FLASH_SetErrorCode+0xc8>)
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f043 0302 	orr.w	r3, r3, #2
 80058a2:	4a15      	ldr	r2, [pc, #84]	@ (80058f8 <FLASH_SetErrorCode+0xc8>)
 80058a4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80058a6:	4b13      	ldr	r3, [pc, #76]	@ (80058f4 <FLASH_SetErrorCode+0xc4>)
 80058a8:	2280      	movs	r2, #128	@ 0x80
 80058aa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80058ac:	4b11      	ldr	r3, [pc, #68]	@ (80058f4 <FLASH_SetErrorCode+0xc4>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80058b8:	4b0f      	ldr	r3, [pc, #60]	@ (80058f8 <FLASH_SetErrorCode+0xc8>)
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f043 0301 	orr.w	r3, r3, #1
 80058c0:	4a0d      	ldr	r2, [pc, #52]	@ (80058f8 <FLASH_SetErrorCode+0xc8>)
 80058c2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80058c4:	4b0b      	ldr	r3, [pc, #44]	@ (80058f4 <FLASH_SetErrorCode+0xc4>)
 80058c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058ca:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80058cc:	4b09      	ldr	r3, [pc, #36]	@ (80058f4 <FLASH_SetErrorCode+0xc4>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80058d8:	4b07      	ldr	r3, [pc, #28]	@ (80058f8 <FLASH_SetErrorCode+0xc8>)
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	f043 0320 	orr.w	r3, r3, #32
 80058e0:	4a05      	ldr	r2, [pc, #20]	@ (80058f8 <FLASH_SetErrorCode+0xc8>)
 80058e2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80058e4:	4b03      	ldr	r3, [pc, #12]	@ (80058f4 <FLASH_SetErrorCode+0xc4>)
 80058e6:	2202      	movs	r2, #2
 80058e8:	60da      	str	r2, [r3, #12]
  }
}
 80058ea:	bf00      	nop
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	40023c00 	.word	0x40023c00
 80058f8:	2000133c 	.word	0x2000133c

080058fc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e010      	b.n	800593a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d103      	bne.n	8005926 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800591e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	e009      	b.n	800593a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d103      	bne.n	8005934 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800592c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	e002      	b.n	800593a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005934:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005938:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b0b      	cmp	r3, #11
 800593e:	d902      	bls.n	8005946 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3304      	adds	r3, #4
 8005944:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005946:	4b13      	ldr	r3, [pc, #76]	@ (8005994 <FLASH_Erase_Sector+0x98>)
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	4a12      	ldr	r2, [pc, #72]	@ (8005994 <FLASH_Erase_Sector+0x98>)
 800594c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005950:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005952:	4b10      	ldr	r3, [pc, #64]	@ (8005994 <FLASH_Erase_Sector+0x98>)
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	490f      	ldr	r1, [pc, #60]	@ (8005994 <FLASH_Erase_Sector+0x98>)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800595e:	4b0d      	ldr	r3, [pc, #52]	@ (8005994 <FLASH_Erase_Sector+0x98>)
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	4a0c      	ldr	r2, [pc, #48]	@ (8005994 <FLASH_Erase_Sector+0x98>)
 8005964:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005968:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800596a:	4b0a      	ldr	r3, [pc, #40]	@ (8005994 <FLASH_Erase_Sector+0x98>)
 800596c:	691a      	ldr	r2, [r3, #16]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4313      	orrs	r3, r2
 8005974:	4a07      	ldr	r2, [pc, #28]	@ (8005994 <FLASH_Erase_Sector+0x98>)
 8005976:	f043 0302 	orr.w	r3, r3, #2
 800597a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800597c:	4b05      	ldr	r3, [pc, #20]	@ (8005994 <FLASH_Erase_Sector+0x98>)
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	4a04      	ldr	r2, [pc, #16]	@ (8005994 <FLASH_Erase_Sector+0x98>)
 8005982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005986:	6113      	str	r3, [r2, #16]
}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40023c00 	.word	0x40023c00

08005998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005998:	b480      	push	{r7}
 800599a:	b089      	sub	sp, #36	@ 0x24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]
 80059b2:	e177      	b.n	8005ca4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059b4:	2201      	movs	r2, #1
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4013      	ands	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	f040 8166 	bne.w	8005c9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d005      	beq.n	80059ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d130      	bne.n	8005a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	2203      	movs	r2, #3
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	43db      	mvns	r3, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4013      	ands	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a20:	2201      	movs	r2, #1
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	091b      	lsrs	r3, r3, #4
 8005a36:	f003 0201 	and.w	r2, r3, #1
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d017      	beq.n	8005a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	2203      	movs	r2, #3
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f003 0303 	and.w	r3, r3, #3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d123      	bne.n	8005adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	08da      	lsrs	r2, r3, #3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3208      	adds	r2, #8
 8005a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	220f      	movs	r2, #15
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	08da      	lsrs	r2, r3, #3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3208      	adds	r2, #8
 8005ad6:	69b9      	ldr	r1, [r7, #24]
 8005ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	43db      	mvns	r3, r3
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4013      	ands	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f003 0203 	and.w	r2, r3, #3
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80c0 	beq.w	8005c9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	4b66      	ldr	r3, [pc, #408]	@ (8005cbc <HAL_GPIO_Init+0x324>)
 8005b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b26:	4a65      	ldr	r2, [pc, #404]	@ (8005cbc <HAL_GPIO_Init+0x324>)
 8005b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b2e:	4b63      	ldr	r3, [pc, #396]	@ (8005cbc <HAL_GPIO_Init+0x324>)
 8005b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b3a:	4a61      	ldr	r2, [pc, #388]	@ (8005cc0 <HAL_GPIO_Init+0x328>)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	089b      	lsrs	r3, r3, #2
 8005b40:	3302      	adds	r3, #2
 8005b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	220f      	movs	r2, #15
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	43db      	mvns	r3, r3
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a58      	ldr	r2, [pc, #352]	@ (8005cc4 <HAL_GPIO_Init+0x32c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d037      	beq.n	8005bd6 <HAL_GPIO_Init+0x23e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a57      	ldr	r2, [pc, #348]	@ (8005cc8 <HAL_GPIO_Init+0x330>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d031      	beq.n	8005bd2 <HAL_GPIO_Init+0x23a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a56      	ldr	r2, [pc, #344]	@ (8005ccc <HAL_GPIO_Init+0x334>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d02b      	beq.n	8005bce <HAL_GPIO_Init+0x236>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a55      	ldr	r2, [pc, #340]	@ (8005cd0 <HAL_GPIO_Init+0x338>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d025      	beq.n	8005bca <HAL_GPIO_Init+0x232>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a54      	ldr	r2, [pc, #336]	@ (8005cd4 <HAL_GPIO_Init+0x33c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01f      	beq.n	8005bc6 <HAL_GPIO_Init+0x22e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a53      	ldr	r2, [pc, #332]	@ (8005cd8 <HAL_GPIO_Init+0x340>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d019      	beq.n	8005bc2 <HAL_GPIO_Init+0x22a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a52      	ldr	r2, [pc, #328]	@ (8005cdc <HAL_GPIO_Init+0x344>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <HAL_GPIO_Init+0x226>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a51      	ldr	r2, [pc, #324]	@ (8005ce0 <HAL_GPIO_Init+0x348>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00d      	beq.n	8005bba <HAL_GPIO_Init+0x222>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a50      	ldr	r2, [pc, #320]	@ (8005ce4 <HAL_GPIO_Init+0x34c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d007      	beq.n	8005bb6 <HAL_GPIO_Init+0x21e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a4f      	ldr	r2, [pc, #316]	@ (8005ce8 <HAL_GPIO_Init+0x350>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d101      	bne.n	8005bb2 <HAL_GPIO_Init+0x21a>
 8005bae:	2309      	movs	r3, #9
 8005bb0:	e012      	b.n	8005bd8 <HAL_GPIO_Init+0x240>
 8005bb2:	230a      	movs	r3, #10
 8005bb4:	e010      	b.n	8005bd8 <HAL_GPIO_Init+0x240>
 8005bb6:	2308      	movs	r3, #8
 8005bb8:	e00e      	b.n	8005bd8 <HAL_GPIO_Init+0x240>
 8005bba:	2307      	movs	r3, #7
 8005bbc:	e00c      	b.n	8005bd8 <HAL_GPIO_Init+0x240>
 8005bbe:	2306      	movs	r3, #6
 8005bc0:	e00a      	b.n	8005bd8 <HAL_GPIO_Init+0x240>
 8005bc2:	2305      	movs	r3, #5
 8005bc4:	e008      	b.n	8005bd8 <HAL_GPIO_Init+0x240>
 8005bc6:	2304      	movs	r3, #4
 8005bc8:	e006      	b.n	8005bd8 <HAL_GPIO_Init+0x240>
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e004      	b.n	8005bd8 <HAL_GPIO_Init+0x240>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e002      	b.n	8005bd8 <HAL_GPIO_Init+0x240>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <HAL_GPIO_Init+0x240>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	f002 0203 	and.w	r2, r2, #3
 8005bde:	0092      	lsls	r2, r2, #2
 8005be0:	4093      	lsls	r3, r2
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005be8:	4935      	ldr	r1, [pc, #212]	@ (8005cc0 <HAL_GPIO_Init+0x328>)
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	089b      	lsrs	r3, r3, #2
 8005bee:	3302      	adds	r3, #2
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8005cec <HAL_GPIO_Init+0x354>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	43db      	mvns	r3, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4013      	ands	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c1a:	4a34      	ldr	r2, [pc, #208]	@ (8005cec <HAL_GPIO_Init+0x354>)
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c20:	4b32      	ldr	r3, [pc, #200]	@ (8005cec <HAL_GPIO_Init+0x354>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c44:	4a29      	ldr	r2, [pc, #164]	@ (8005cec <HAL_GPIO_Init+0x354>)
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c4a:	4b28      	ldr	r3, [pc, #160]	@ (8005cec <HAL_GPIO_Init+0x354>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	43db      	mvns	r3, r3
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	4013      	ands	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8005cec <HAL_GPIO_Init+0x354>)
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c74:	4b1d      	ldr	r3, [pc, #116]	@ (8005cec <HAL_GPIO_Init+0x354>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	4013      	ands	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c98:	4a14      	ldr	r2, [pc, #80]	@ (8005cec <HAL_GPIO_Init+0x354>)
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	61fb      	str	r3, [r7, #28]
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	2b0f      	cmp	r3, #15
 8005ca8:	f67f ae84 	bls.w	80059b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005cac:	bf00      	nop
 8005cae:	bf00      	nop
 8005cb0:	3724      	adds	r7, #36	@ 0x24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	40013800 	.word	0x40013800
 8005cc4:	40020000 	.word	0x40020000
 8005cc8:	40020400 	.word	0x40020400
 8005ccc:	40020800 	.word	0x40020800
 8005cd0:	40020c00 	.word	0x40020c00
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	40021400 	.word	0x40021400
 8005cdc:	40021800 	.word	0x40021800
 8005ce0:	40021c00 	.word	0x40021c00
 8005ce4:	40022000 	.word	0x40022000
 8005ce8:	40022400 	.word	0x40022400
 8005cec:	40013c00 	.word	0x40013c00

08005cf0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	e0d9      	b.n	8005ec0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	f040 80c9 	bne.w	8005eba <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005d28:	4a6b      	ldr	r2, [pc, #428]	@ (8005ed8 <HAL_GPIO_DeInit+0x1e8>)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	089b      	lsrs	r3, r3, #2
 8005d2e:	3302      	adds	r3, #2
 8005d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d34:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f003 0303 	and.w	r3, r3, #3
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	220f      	movs	r2, #15
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	4013      	ands	r3, r2
 8005d48:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a63      	ldr	r2, [pc, #396]	@ (8005edc <HAL_GPIO_DeInit+0x1ec>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d037      	beq.n	8005dc2 <HAL_GPIO_DeInit+0xd2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a62      	ldr	r2, [pc, #392]	@ (8005ee0 <HAL_GPIO_DeInit+0x1f0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d031      	beq.n	8005dbe <HAL_GPIO_DeInit+0xce>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a61      	ldr	r2, [pc, #388]	@ (8005ee4 <HAL_GPIO_DeInit+0x1f4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d02b      	beq.n	8005dba <HAL_GPIO_DeInit+0xca>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a60      	ldr	r2, [pc, #384]	@ (8005ee8 <HAL_GPIO_DeInit+0x1f8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d025      	beq.n	8005db6 <HAL_GPIO_DeInit+0xc6>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a5f      	ldr	r2, [pc, #380]	@ (8005eec <HAL_GPIO_DeInit+0x1fc>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01f      	beq.n	8005db2 <HAL_GPIO_DeInit+0xc2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a5e      	ldr	r2, [pc, #376]	@ (8005ef0 <HAL_GPIO_DeInit+0x200>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d019      	beq.n	8005dae <HAL_GPIO_DeInit+0xbe>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ef4 <HAL_GPIO_DeInit+0x204>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <HAL_GPIO_DeInit+0xba>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a5c      	ldr	r2, [pc, #368]	@ (8005ef8 <HAL_GPIO_DeInit+0x208>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00d      	beq.n	8005da6 <HAL_GPIO_DeInit+0xb6>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a5b      	ldr	r2, [pc, #364]	@ (8005efc <HAL_GPIO_DeInit+0x20c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d007      	beq.n	8005da2 <HAL_GPIO_DeInit+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a5a      	ldr	r2, [pc, #360]	@ (8005f00 <HAL_GPIO_DeInit+0x210>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d101      	bne.n	8005d9e <HAL_GPIO_DeInit+0xae>
 8005d9a:	2309      	movs	r3, #9
 8005d9c:	e012      	b.n	8005dc4 <HAL_GPIO_DeInit+0xd4>
 8005d9e:	230a      	movs	r3, #10
 8005da0:	e010      	b.n	8005dc4 <HAL_GPIO_DeInit+0xd4>
 8005da2:	2308      	movs	r3, #8
 8005da4:	e00e      	b.n	8005dc4 <HAL_GPIO_DeInit+0xd4>
 8005da6:	2307      	movs	r3, #7
 8005da8:	e00c      	b.n	8005dc4 <HAL_GPIO_DeInit+0xd4>
 8005daa:	2306      	movs	r3, #6
 8005dac:	e00a      	b.n	8005dc4 <HAL_GPIO_DeInit+0xd4>
 8005dae:	2305      	movs	r3, #5
 8005db0:	e008      	b.n	8005dc4 <HAL_GPIO_DeInit+0xd4>
 8005db2:	2304      	movs	r3, #4
 8005db4:	e006      	b.n	8005dc4 <HAL_GPIO_DeInit+0xd4>
 8005db6:	2303      	movs	r3, #3
 8005db8:	e004      	b.n	8005dc4 <HAL_GPIO_DeInit+0xd4>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e002      	b.n	8005dc4 <HAL_GPIO_DeInit+0xd4>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <HAL_GPIO_DeInit+0xd4>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	f002 0203 	and.w	r2, r2, #3
 8005dca:	0092      	lsls	r2, r2, #2
 8005dcc:	4093      	lsls	r3, r2
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d132      	bne.n	8005e3a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8005f04 <HAL_GPIO_DeInit+0x214>)
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	4949      	ldr	r1, [pc, #292]	@ (8005f04 <HAL_GPIO_DeInit+0x214>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005de2:	4b48      	ldr	r3, [pc, #288]	@ (8005f04 <HAL_GPIO_DeInit+0x214>)
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	43db      	mvns	r3, r3
 8005dea:	4946      	ldr	r1, [pc, #280]	@ (8005f04 <HAL_GPIO_DeInit+0x214>)
 8005dec:	4013      	ands	r3, r2
 8005dee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005df0:	4b44      	ldr	r3, [pc, #272]	@ (8005f04 <HAL_GPIO_DeInit+0x214>)
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	43db      	mvns	r3, r3
 8005df8:	4942      	ldr	r1, [pc, #264]	@ (8005f04 <HAL_GPIO_DeInit+0x214>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005dfe:	4b41      	ldr	r3, [pc, #260]	@ (8005f04 <HAL_GPIO_DeInit+0x214>)
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	43db      	mvns	r3, r3
 8005e06:	493f      	ldr	r1, [pc, #252]	@ (8005f04 <HAL_GPIO_DeInit+0x214>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	220f      	movs	r2, #15
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ed8 <HAL_GPIO_DeInit+0x1e8>)
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	089b      	lsrs	r3, r3, #2
 8005e22:	3302      	adds	r3, #2
 8005e24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	43da      	mvns	r2, r3
 8005e2c:	482a      	ldr	r0, [pc, #168]	@ (8005ed8 <HAL_GPIO_DeInit+0x1e8>)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	089b      	lsrs	r3, r3, #2
 8005e32:	400a      	ands	r2, r1
 8005e34:	3302      	adds	r3, #2
 8005e36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	2103      	movs	r1, #3
 8005e44:	fa01 f303 	lsl.w	r3, r1, r3
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	401a      	ands	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	08da      	lsrs	r2, r3, #3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3208      	adds	r2, #8
 8005e58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	220f      	movs	r2, #15
 8005e66:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	08d2      	lsrs	r2, r2, #3
 8005e70:	4019      	ands	r1, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3208      	adds	r2, #8
 8005e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	2103      	movs	r1, #3
 8005e84:	fa01 f303 	lsl.w	r3, r1, r3
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	2101      	movs	r1, #1
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	401a      	ands	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	2103      	movs	r1, #3
 8005eae:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	401a      	ands	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2b0f      	cmp	r3, #15
 8005ec4:	f67f af22 	bls.w	8005d0c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40013800 	.word	0x40013800
 8005edc:	40020000 	.word	0x40020000
 8005ee0:	40020400 	.word	0x40020400
 8005ee4:	40020800 	.word	0x40020800
 8005ee8:	40020c00 	.word	0x40020c00
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	40021400 	.word	0x40021400
 8005ef4:	40021800 	.word	0x40021800
 8005ef8:	40021c00 	.word	0x40021c00
 8005efc:	40022000 	.word	0x40022000
 8005f00:	40022400 	.word	0x40022400
 8005f04:	40013c00 	.word	0x40013c00

08005f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	807b      	strh	r3, [r7, #2]
 8005f14:	4613      	mov	r3, r2
 8005f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f18:	787b      	ldrb	r3, [r7, #1]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f1e:	887a      	ldrh	r2, [r7, #2]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f24:	e003      	b.n	8005f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f26:	887b      	ldrh	r3, [r7, #2]
 8005f28:	041a      	lsls	r2, r3, #16
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	619a      	str	r2, [r3, #24]
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b086      	sub	sp, #24
 8005f3e:	af02      	add	r7, sp, #8
 8005f40:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e059      	b.n	8006000 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f00a fbfe 	bl	8010768 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2203      	movs	r2, #3
 8005f70:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f7a:	d102      	bne.n	8005f82 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f006 fcaf 	bl	800c8ea <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	7c1a      	ldrb	r2, [r3, #16]
 8005f94:	f88d 2000 	strb.w	r2, [sp]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f9c:	f006 fc30 	bl	800c800 <USB_CoreInit>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e026      	b.n	8006000 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f006 fca7 	bl	800c90c <USB_SetCurrentMode>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e017      	b.n	8006000 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	7c1a      	ldrb	r2, [r3, #16]
 8005fd8:	f88d 2000 	strb.w	r2, [sp]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fe0:	f006 fe4a 	bl	800cc78 <USB_HostInit>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e004      	b.n	8006000 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006008:	b590      	push	{r4, r7, lr}
 800600a:	b08b      	sub	sp, #44	@ 0x2c
 800600c:	af04      	add	r7, sp, #16
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	4608      	mov	r0, r1
 8006012:	4611      	mov	r1, r2
 8006014:	461a      	mov	r2, r3
 8006016:	4603      	mov	r3, r0
 8006018:	70fb      	strb	r3, [r7, #3]
 800601a:	460b      	mov	r3, r1
 800601c:	70bb      	strb	r3, [r7, #2]
 800601e:	4613      	mov	r3, r2
 8006020:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8006022:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006024:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_HCD_HC_Init+0x2c>
 8006030:	2302      	movs	r3, #2
 8006032:	e09d      	b.n	8006170 <HAL_HCD_HC_Init+0x168>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	3319      	adds	r3, #25
 800604c:	2200      	movs	r2, #0
 800604e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006050:	78fa      	ldrb	r2, [r7, #3]
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	3314      	adds	r3, #20
 8006060:	787a      	ldrb	r2, [r7, #1]
 8006062:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006064:	78fa      	ldrb	r2, [r7, #3]
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	3315      	adds	r3, #21
 8006074:	78fa      	ldrb	r2, [r7, #3]
 8006076:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006078:	78fa      	ldrb	r2, [r7, #3]
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	1a9b      	subs	r3, r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	3326      	adds	r3, #38	@ 0x26
 8006088:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800608c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800608e:	78fa      	ldrb	r2, [r7, #3]
 8006090:	78bb      	ldrb	r3, [r7, #2]
 8006092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006096:	b2d8      	uxtb	r0, r3
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	4613      	mov	r3, r2
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	1a9b      	subs	r3, r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	3316      	adds	r3, #22
 80060a6:	4602      	mov	r2, r0
 80060a8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fbc8 	bl	8006844 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80060b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	da0a      	bge.n	80060d2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80060bc:	78fa      	ldrb	r2, [r7, #3]
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	1a9b      	subs	r3, r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	3317      	adds	r3, #23
 80060cc:	2201      	movs	r2, #1
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	e009      	b.n	80060e6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80060d2:	78fa      	ldrb	r2, [r7, #3]
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	4613      	mov	r3, r2
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	1a9b      	subs	r3, r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	3317      	adds	r3, #23
 80060e2:	2200      	movs	r2, #0
 80060e4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f006 ff28 	bl	800cf40 <USB_GetHostSpeed>
 80060f0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80060f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d10b      	bne.n	8006112 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80060fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d107      	bne.n	8006112 <HAL_HCD_HC_Init+0x10a>
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d104      	bne.n	8006112 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2bbc      	cmp	r3, #188	@ 0xbc
 800610c:	d901      	bls.n	8006112 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800610e:	23bc      	movs	r3, #188	@ 0xbc
 8006110:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8006112:	78fa      	ldrb	r2, [r7, #3]
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	3318      	adds	r3, #24
 8006122:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006126:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8006128:	78fa      	ldrb	r2, [r7, #3]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	b298      	uxth	r0, r3
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	4613      	mov	r3, r2
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	440b      	add	r3, r1
 800613a:	3328      	adds	r3, #40	@ 0x28
 800613c:	4602      	mov	r2, r0
 800613e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6818      	ldr	r0, [r3, #0]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	b29b      	uxth	r3, r3
 8006148:	787c      	ldrb	r4, [r7, #1]
 800614a:	78ba      	ldrb	r2, [r7, #2]
 800614c:	78f9      	ldrb	r1, [r7, #3]
 800614e:	9302      	str	r3, [sp, #8]
 8006150:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006154:	9301      	str	r3, [sp, #4]
 8006156:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	4623      	mov	r3, r4
 800615e:	f006 ff17 	bl	800cf90 <USB_HC_Init>
 8006162:	4603      	mov	r3, r0
 8006164:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800616e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006170:	4618      	mov	r0, r3
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	bd90      	pop	{r4, r7, pc}

08006178 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800618e:	2b01      	cmp	r3, #1
 8006190:	d101      	bne.n	8006196 <HAL_HCD_HC_Halt+0x1e>
 8006192:	2302      	movs	r3, #2
 8006194:	e00f      	b.n	80061b6 <HAL_HCD_HC_Halt+0x3e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	78fa      	ldrb	r2, [r7, #3]
 80061a4:	4611      	mov	r1, r2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f007 faa9 	bl	800d6fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	4608      	mov	r0, r1
 80061ca:	4611      	mov	r1, r2
 80061cc:	461a      	mov	r2, r3
 80061ce:	4603      	mov	r3, r0
 80061d0:	70fb      	strb	r3, [r7, #3]
 80061d2:	460b      	mov	r3, r1
 80061d4:	70bb      	strb	r3, [r7, #2]
 80061d6:	4613      	mov	r3, r2
 80061d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80061da:	78fa      	ldrb	r2, [r7, #3]
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	1a9b      	subs	r3, r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	3317      	adds	r3, #23
 80061ea:	78ba      	ldrb	r2, [r7, #2]
 80061ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80061ee:	78fa      	ldrb	r2, [r7, #3]
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	4613      	mov	r3, r2
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	1a9b      	subs	r3, r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	3326      	adds	r3, #38	@ 0x26
 80061fe:	787a      	ldrb	r2, [r7, #1]
 8006200:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006202:	7c3b      	ldrb	r3, [r7, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d114      	bne.n	8006232 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	1a9b      	subs	r3, r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	332a      	adds	r3, #42	@ 0x2a
 8006218:	2203      	movs	r2, #3
 800621a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800621c:	78fa      	ldrb	r2, [r7, #3]
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	4613      	mov	r3, r2
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	3319      	adds	r3, #25
 800622c:	7f3a      	ldrb	r2, [r7, #28]
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	e009      	b.n	8006246 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006232:	78fa      	ldrb	r2, [r7, #3]
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	332a      	adds	r3, #42	@ 0x2a
 8006242:	2202      	movs	r2, #2
 8006244:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006246:	787b      	ldrb	r3, [r7, #1]
 8006248:	2b03      	cmp	r3, #3
 800624a:	f200 8102 	bhi.w	8006452 <HAL_HCD_HC_SubmitRequest+0x292>
 800624e:	a201      	add	r2, pc, #4	@ (adr r2, 8006254 <HAL_HCD_HC_SubmitRequest+0x94>)
 8006250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006254:	08006265 	.word	0x08006265
 8006258:	0800643d 	.word	0x0800643d
 800625c:	08006329 	.word	0x08006329
 8006260:	080063b3 	.word	0x080063b3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8006264:	7c3b      	ldrb	r3, [r7, #16]
 8006266:	2b01      	cmp	r3, #1
 8006268:	f040 80f5 	bne.w	8006456 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800626c:	78bb      	ldrb	r3, [r7, #2]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d12d      	bne.n	80062ce <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8006272:	8b3b      	ldrh	r3, [r7, #24]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8006278:	78fa      	ldrb	r2, [r7, #3]
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	4613      	mov	r3, r2
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	1a9b      	subs	r3, r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	440b      	add	r3, r1
 8006286:	333d      	adds	r3, #61	@ 0x3d
 8006288:	2201      	movs	r2, #1
 800628a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	4613      	mov	r3, r2
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	333d      	adds	r3, #61	@ 0x3d
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80062a2:	78fa      	ldrb	r2, [r7, #3]
 80062a4:	6879      	ldr	r1, [r7, #4]
 80062a6:	4613      	mov	r3, r2
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	1a9b      	subs	r3, r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	440b      	add	r3, r1
 80062b0:	332a      	adds	r3, #42	@ 0x2a
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80062b6:	e0ce      	b.n	8006456 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80062b8:	78fa      	ldrb	r2, [r7, #3]
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	4613      	mov	r3, r2
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	332a      	adds	r3, #42	@ 0x2a
 80062c8:	2202      	movs	r2, #2
 80062ca:	701a      	strb	r2, [r3, #0]
      break;
 80062cc:	e0c3      	b.n	8006456 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80062ce:	78fa      	ldrb	r2, [r7, #3]
 80062d0:	6879      	ldr	r1, [r7, #4]
 80062d2:	4613      	mov	r3, r2
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	1a9b      	subs	r3, r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	440b      	add	r3, r1
 80062dc:	331a      	adds	r3, #26
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	f040 80b8 	bne.w	8006456 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80062e6:	78fa      	ldrb	r2, [r7, #3]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	1a9b      	subs	r3, r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	440b      	add	r3, r1
 80062f4:	333c      	adds	r3, #60	@ 0x3c
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80062fc:	78fa      	ldrb	r2, [r7, #3]
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4613      	mov	r3, r2
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	332a      	adds	r3, #42	@ 0x2a
 800630c:	2200      	movs	r2, #0
 800630e:	701a      	strb	r2, [r3, #0]
      break;
 8006310:	e0a1      	b.n	8006456 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006312:	78fa      	ldrb	r2, [r7, #3]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	1a9b      	subs	r3, r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	332a      	adds	r3, #42	@ 0x2a
 8006322:	2202      	movs	r2, #2
 8006324:	701a      	strb	r2, [r3, #0]
      break;
 8006326:	e096      	b.n	8006456 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006328:	78bb      	ldrb	r3, [r7, #2]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d120      	bne.n	8006370 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800632e:	78fa      	ldrb	r2, [r7, #3]
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	4613      	mov	r3, r2
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	440b      	add	r3, r1
 800633c:	333d      	adds	r3, #61	@ 0x3d
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006344:	78fa      	ldrb	r2, [r7, #3]
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	332a      	adds	r3, #42	@ 0x2a
 8006354:	2200      	movs	r2, #0
 8006356:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006358:	e07e      	b.n	8006458 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800635a:	78fa      	ldrb	r2, [r7, #3]
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	4613      	mov	r3, r2
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	440b      	add	r3, r1
 8006368:	332a      	adds	r3, #42	@ 0x2a
 800636a:	2202      	movs	r2, #2
 800636c:	701a      	strb	r2, [r3, #0]
      break;
 800636e:	e073      	b.n	8006458 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006370:	78fa      	ldrb	r2, [r7, #3]
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	4613      	mov	r3, r2
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	1a9b      	subs	r3, r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	440b      	add	r3, r1
 800637e:	333c      	adds	r3, #60	@ 0x3c
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10a      	bne.n	800639c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006386:	78fa      	ldrb	r2, [r7, #3]
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	332a      	adds	r3, #42	@ 0x2a
 8006396:	2200      	movs	r2, #0
 8006398:	701a      	strb	r2, [r3, #0]
      break;
 800639a:	e05d      	b.n	8006458 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800639c:	78fa      	ldrb	r2, [r7, #3]
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	4613      	mov	r3, r2
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	332a      	adds	r3, #42	@ 0x2a
 80063ac:	2202      	movs	r2, #2
 80063ae:	701a      	strb	r2, [r3, #0]
      break;
 80063b0:	e052      	b.n	8006458 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80063b2:	78bb      	ldrb	r3, [r7, #2]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d120      	bne.n	80063fa <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80063b8:	78fa      	ldrb	r2, [r7, #3]
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	4613      	mov	r3, r2
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	1a9b      	subs	r3, r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	440b      	add	r3, r1
 80063c6:	333d      	adds	r3, #61	@ 0x3d
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80063ce:	78fa      	ldrb	r2, [r7, #3]
 80063d0:	6879      	ldr	r1, [r7, #4]
 80063d2:	4613      	mov	r3, r2
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	1a9b      	subs	r3, r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	440b      	add	r3, r1
 80063dc:	332a      	adds	r3, #42	@ 0x2a
 80063de:	2200      	movs	r2, #0
 80063e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80063e2:	e039      	b.n	8006458 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	1a9b      	subs	r3, r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	332a      	adds	r3, #42	@ 0x2a
 80063f4:	2202      	movs	r2, #2
 80063f6:	701a      	strb	r2, [r3, #0]
      break;
 80063f8:	e02e      	b.n	8006458 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80063fa:	78fa      	ldrb	r2, [r7, #3]
 80063fc:	6879      	ldr	r1, [r7, #4]
 80063fe:	4613      	mov	r3, r2
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	1a9b      	subs	r3, r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	440b      	add	r3, r1
 8006408:	333c      	adds	r3, #60	@ 0x3c
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006410:	78fa      	ldrb	r2, [r7, #3]
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	4613      	mov	r3, r2
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	332a      	adds	r3, #42	@ 0x2a
 8006420:	2200      	movs	r2, #0
 8006422:	701a      	strb	r2, [r3, #0]
      break;
 8006424:	e018      	b.n	8006458 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006426:	78fa      	ldrb	r2, [r7, #3]
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	1a9b      	subs	r3, r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	332a      	adds	r3, #42	@ 0x2a
 8006436:	2202      	movs	r2, #2
 8006438:	701a      	strb	r2, [r3, #0]
      break;
 800643a:	e00d      	b.n	8006458 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800643c:	78fa      	ldrb	r2, [r7, #3]
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	4613      	mov	r3, r2
 8006442:	011b      	lsls	r3, r3, #4
 8006444:	1a9b      	subs	r3, r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	440b      	add	r3, r1
 800644a:	332a      	adds	r3, #42	@ 0x2a
 800644c:	2200      	movs	r2, #0
 800644e:	701a      	strb	r2, [r3, #0]
      break;
 8006450:	e002      	b.n	8006458 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8006456:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	1a9b      	subs	r3, r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	440b      	add	r3, r1
 8006466:	332c      	adds	r3, #44	@ 0x2c
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800646c:	78fa      	ldrb	r2, [r7, #3]
 800646e:	8b39      	ldrh	r1, [r7, #24]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	011b      	lsls	r3, r3, #4
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4403      	add	r3, r0
 800647c:	3334      	adds	r3, #52	@ 0x34
 800647e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006480:	78fa      	ldrb	r2, [r7, #3]
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	4613      	mov	r3, r2
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	334c      	adds	r3, #76	@ 0x4c
 8006490:	2200      	movs	r2, #0
 8006492:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006494:	78fa      	ldrb	r2, [r7, #3]
 8006496:	6879      	ldr	r1, [r7, #4]
 8006498:	4613      	mov	r3, r2
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	1a9b      	subs	r3, r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	3338      	adds	r3, #56	@ 0x38
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80064a8:	78fa      	ldrb	r2, [r7, #3]
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	4613      	mov	r3, r2
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	3315      	adds	r3, #21
 80064b8:	78fa      	ldrb	r2, [r7, #3]
 80064ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	334d      	adds	r3, #77	@ 0x4d
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6818      	ldr	r0, [r3, #0]
 80064d4:	78fa      	ldrb	r2, [r7, #3]
 80064d6:	4613      	mov	r3, r2
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	3310      	adds	r3, #16
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	1d19      	adds	r1, r3, #4
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	799b      	ldrb	r3, [r3, #6]
 80064ea:	461a      	mov	r2, r3
 80064ec:	f006 fe7c 	bl	800d1e8 <USB_HC_StartXfer>
 80064f0:	4603      	mov	r3, r0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop

080064fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4618      	mov	r0, r3
 8006514:	f006 fb70 	bl	800cbf8 <USB_GetMode>
 8006518:	4603      	mov	r3, r0
 800651a:	2b01      	cmp	r3, #1
 800651c:	f040 80fb 	bne.w	8006716 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f006 fb33 	bl	800cb90 <USB_ReadInterrupts>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 80f1 	beq.w	8006714 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f006 fb2a 	bl	800cb90 <USB_ReadInterrupts>
 800653c:	4603      	mov	r3, r0
 800653e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006542:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006546:	d104      	bne.n	8006552 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8006550:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f006 fb1a 	bl	800cb90 <USB_ReadInterrupts>
 800655c:	4603      	mov	r3, r0
 800655e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006566:	d104      	bne.n	8006572 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006570:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f006 fb0a 	bl	800cb90 <USB_ReadInterrupts>
 800657c:	4603      	mov	r3, r0
 800657e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006582:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006586:	d104      	bne.n	8006592 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006590:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f006 fafa 	bl	800cb90 <USB_ReadInterrupts>
 800659c:	4603      	mov	r3, r0
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d103      	bne.n	80065ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2202      	movs	r2, #2
 80065ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f006 faec 	bl	800cb90 <USB_ReadInterrupts>
 80065b8:	4603      	mov	r3, r0
 80065ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065c2:	d120      	bne.n	8006606 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80065cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d113      	bne.n	8006606 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80065de:	2110      	movs	r1, #16
 80065e0:	6938      	ldr	r0, [r7, #16]
 80065e2:	f006 f9df 	bl	800c9a4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80065e6:	6938      	ldr	r0, [r7, #16]
 80065e8:	f006 fa0e 	bl	800ca08 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	7a5b      	ldrb	r3, [r3, #9]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d105      	bne.n	8006600 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2101      	movs	r1, #1
 80065fa:	4618      	mov	r0, r3
 80065fc:	f006 fc00 	bl	800ce00 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f00a f92b 	bl	801085c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f006 fac0 	bl	800cb90 <USB_ReadInterrupts>
 8006610:	4603      	mov	r3, r0
 8006612:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800661a:	d102      	bne.n	8006622 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f001 fd4d 	bl	80080bc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4618      	mov	r0, r3
 8006628:	f006 fab2 	bl	800cb90 <USB_ReadInterrupts>
 800662c:	4603      	mov	r3, r0
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b08      	cmp	r3, #8
 8006634:	d106      	bne.n	8006644 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f00a f8f4 	bl	8010824 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2208      	movs	r2, #8
 8006642:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4618      	mov	r0, r3
 800664a:	f006 faa1 	bl	800cb90 <USB_ReadInterrupts>
 800664e:	4603      	mov	r3, r0
 8006650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006654:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006658:	d139      	bne.n	80066ce <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4618      	mov	r0, r3
 8006660:	f007 f83c 	bl	800d6dc <USB_HC_ReadInterrupt>
 8006664:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	e025      	b.n	80066b8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	fa22 f303 	lsr.w	r3, r2, r3
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d018      	beq.n	80066b2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006692:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006696:	d106      	bne.n	80066a6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f905 	bl	80068ae <HCD_HC_IN_IRQHandler>
 80066a4:	e005      	b.n	80066b2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	4619      	mov	r1, r3
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 ff67 	bl	8007580 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	3301      	adds	r3, #1
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	795b      	ldrb	r3, [r3, #5]
 80066bc:	461a      	mov	r2, r3
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d3d3      	bcc.n	800666c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80066cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f006 fa5c 	bl	800cb90 <USB_ReadInterrupts>
 80066d8:	4603      	mov	r3, r0
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	2b10      	cmp	r3, #16
 80066e0:	d101      	bne.n	80066e6 <HAL_HCD_IRQHandler+0x1ea>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <HAL_HCD_IRQHandler+0x1ec>
 80066e6:	2300      	movs	r3, #0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d014      	beq.n	8006716 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699a      	ldr	r2, [r3, #24]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0210 	bic.w	r2, r2, #16
 80066fa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 fbfe 	bl	8007efe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	699a      	ldr	r2, [r3, #24]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 0210 	orr.w	r2, r2, #16
 8006710:	619a      	str	r2, [r3, #24]
 8006712:	e000      	b.n	8006716 <HAL_HCD_IRQHandler+0x21a>
      return;
 8006714:	bf00      	nop
    }
  }
}
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_HCD_Start+0x16>
 800672e:	2302      	movs	r3, #2
 8006730:	e013      	b.n	800675a <HAL_HCD_Start+0x3e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2101      	movs	r1, #1
 8006740:	4618      	mov	r0, r3
 8006742:	f006 fbc4 	bl	800cece <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4618      	mov	r0, r3
 800674c:	f006 f8bc 	bl	800c8c8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_HCD_Stop+0x16>
 8006774:	2302      	movs	r3, #2
 8006776:	e00d      	b.n	8006794 <HAL_HCD_Stop+0x32>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f007 f917 	bl	800d9b8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f006 fb66 	bl	800ce7a <USB_ResetPort>
 80067ae:	4603      	mov	r3, r0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	4613      	mov	r3, r2
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	334c      	adds	r3, #76	@ 0x4c
 80067d4:	781b      	ldrb	r3, [r3, #0]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80067ee:	78fa      	ldrb	r2, [r7, #3]
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	3338      	adds	r3, #56	@ 0x38
 80067fe:	681b      	ldr	r3, [r3, #0]
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f006 fba8 	bl	800cf6e <USB_GetCurrentFrame>
 800681e:	4603      	mov	r3, r0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f006 fb83 	bl	800cf40 <USB_GetHostSpeed>
 800683a:	4603      	mov	r3, r0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8006850:	78fa      	ldrb	r2, [r7, #3]
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	4613      	mov	r3, r2
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	1a9b      	subs	r3, r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	331a      	adds	r3, #26
 8006860:	2200      	movs	r2, #0
 8006862:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8006864:	78fa      	ldrb	r2, [r7, #3]
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	4613      	mov	r3, r2
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	331b      	adds	r3, #27
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8006878:	78fa      	ldrb	r2, [r7, #3]
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4613      	mov	r3, r2
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	1a9b      	subs	r3, r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	3325      	adds	r3, #37	@ 0x25
 8006888:	2200      	movs	r2, #0
 800688a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800688c:	78fa      	ldrb	r2, [r7, #3]
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	4613      	mov	r3, r2
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	3324      	adds	r3, #36	@ 0x24
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b086      	sub	sp, #24
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	460b      	mov	r3, r1
 80068b8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	78fa      	ldrb	r2, [r7, #3]
 80068ca:	4611      	mov	r1, r2
 80068cc:	4618      	mov	r0, r3
 80068ce:	f006 f972 	bl	800cbb6 <USB_ReadChInterrupts>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d11a      	bne.n	8006912 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80068dc:	78fb      	ldrb	r3, [r7, #3]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e8:	461a      	mov	r2, r3
 80068ea:	2304      	movs	r3, #4
 80068ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	334d      	adds	r3, #77	@ 0x4d
 80068fe:	2207      	movs	r2, #7
 8006900:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	78fa      	ldrb	r2, [r7, #3]
 8006908:	4611      	mov	r1, r2
 800690a:	4618      	mov	r0, r3
 800690c:	f006 fef7 	bl	800d6fe <USB_HC_Halt>
 8006910:	e09e      	b.n	8006a50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	78fa      	ldrb	r2, [r7, #3]
 8006918:	4611      	mov	r1, r2
 800691a:	4618      	mov	r0, r3
 800691c:	f006 f94b 	bl	800cbb6 <USB_ReadChInterrupts>
 8006920:	4603      	mov	r3, r0
 8006922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800692a:	d11b      	bne.n	8006964 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	4413      	add	r3, r2
 8006934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006938:	461a      	mov	r2, r3
 800693a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800693e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8006940:	78fa      	ldrb	r2, [r7, #3]
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	4613      	mov	r3, r2
 8006946:	011b      	lsls	r3, r3, #4
 8006948:	1a9b      	subs	r3, r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	440b      	add	r3, r1
 800694e:	334d      	adds	r3, #77	@ 0x4d
 8006950:	2208      	movs	r2, #8
 8006952:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	78fa      	ldrb	r2, [r7, #3]
 800695a:	4611      	mov	r1, r2
 800695c:	4618      	mov	r0, r3
 800695e:	f006 fece 	bl	800d6fe <USB_HC_Halt>
 8006962:	e075      	b.n	8006a50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	78fa      	ldrb	r2, [r7, #3]
 800696a:	4611      	mov	r1, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f006 f922 	bl	800cbb6 <USB_ReadChInterrupts>
 8006972:	4603      	mov	r3, r0
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b08      	cmp	r3, #8
 800697a:	d11a      	bne.n	80069b2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800697c:	78fb      	ldrb	r3, [r7, #3]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	4413      	add	r3, r2
 8006984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006988:	461a      	mov	r2, r3
 800698a:	2308      	movs	r3, #8
 800698c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800698e:	78fa      	ldrb	r2, [r7, #3]
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	4613      	mov	r3, r2
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	1a9b      	subs	r3, r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	440b      	add	r3, r1
 800699c:	334d      	adds	r3, #77	@ 0x4d
 800699e:	2206      	movs	r2, #6
 80069a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	78fa      	ldrb	r2, [r7, #3]
 80069a8:	4611      	mov	r1, r2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f006 fea7 	bl	800d6fe <USB_HC_Halt>
 80069b0:	e04e      	b.n	8006a50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	78fa      	ldrb	r2, [r7, #3]
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f006 f8fb 	bl	800cbb6 <USB_ReadChInterrupts>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ca:	d11b      	bne.n	8006a04 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069d8:	461a      	mov	r2, r3
 80069da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	334d      	adds	r3, #77	@ 0x4d
 80069f0:	2209      	movs	r2, #9
 80069f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	78fa      	ldrb	r2, [r7, #3]
 80069fa:	4611      	mov	r1, r2
 80069fc:	4618      	mov	r0, r3
 80069fe:	f006 fe7e 	bl	800d6fe <USB_HC_Halt>
 8006a02:	e025      	b.n	8006a50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	78fa      	ldrb	r2, [r7, #3]
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f006 f8d2 	bl	800cbb6 <USB_ReadChInterrupts>
 8006a12:	4603      	mov	r3, r0
 8006a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a18:	2b80      	cmp	r3, #128	@ 0x80
 8006a1a:	d119      	bne.n	8006a50 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a28:	461a      	mov	r2, r3
 8006a2a:	2380      	movs	r3, #128	@ 0x80
 8006a2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006a2e:	78fa      	ldrb	r2, [r7, #3]
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	334d      	adds	r3, #77	@ 0x4d
 8006a3e:	2207      	movs	r2, #7
 8006a40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	78fa      	ldrb	r2, [r7, #3]
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f006 fe57 	bl	800d6fe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	78fa      	ldrb	r2, [r7, #3]
 8006a56:	4611      	mov	r1, r2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f006 f8ac 	bl	800cbb6 <USB_ReadChInterrupts>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a68:	d112      	bne.n	8006a90 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	78fa      	ldrb	r2, [r7, #3]
 8006a70:	4611      	mov	r1, r2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f006 fe43 	bl	800d6fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a84:	461a      	mov	r2, r3
 8006a86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a8a:	6093      	str	r3, [r2, #8]
 8006a8c:	f000 bd75 	b.w	800757a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	78fa      	ldrb	r2, [r7, #3]
 8006a96:	4611      	mov	r1, r2
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f006 f88c 	bl	800cbb6 <USB_ReadChInterrupts>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	f040 8128 	bne.w	8006cfa <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	2320      	movs	r3, #32
 8006aba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006abc:	78fa      	ldrb	r2, [r7, #3]
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	440b      	add	r3, r1
 8006aca:	331b      	adds	r3, #27
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d119      	bne.n	8006b06 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006ad2:	78fa      	ldrb	r2, [r7, #3]
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	440b      	add	r3, r1
 8006ae0:	331b      	adds	r3, #27
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006ae6:	78fb      	ldrb	r3, [r7, #3]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	78fa      	ldrb	r2, [r7, #3]
 8006af6:	0151      	lsls	r1, r2, #5
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	440a      	add	r2, r1
 8006afc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b04:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	799b      	ldrb	r3, [r3, #6]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d01b      	beq.n	8006b46 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	4613      	mov	r3, r2
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	1a9b      	subs	r3, r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	3330      	adds	r3, #48	@ 0x30
 8006b1e:	6819      	ldr	r1, [r3, #0]
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b32:	78fa      	ldrb	r2, [r7, #3]
 8006b34:	1ac9      	subs	r1, r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	1a9b      	subs	r3, r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4403      	add	r3, r0
 8006b42:	3338      	adds	r3, #56	@ 0x38
 8006b44:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8006b46:	78fa      	ldrb	r2, [r7, #3]
 8006b48:	6879      	ldr	r1, [r7, #4]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	011b      	lsls	r3, r3, #4
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	440b      	add	r3, r1
 8006b54:	334d      	adds	r3, #77	@ 0x4d
 8006b56:	2201      	movs	r2, #1
 8006b58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8006b5a:	78fa      	ldrb	r2, [r7, #3]
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	1a9b      	subs	r3, r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	3344      	adds	r3, #68	@ 0x44
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006b6e:	78fb      	ldrb	r3, [r7, #3]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006b80:	78fa      	ldrb	r2, [r7, #3]
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	4613      	mov	r3, r2
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	3326      	adds	r3, #38	@ 0x26
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006b96:	78fa      	ldrb	r2, [r7, #3]
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	1a9b      	subs	r3, r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	3326      	adds	r3, #38	@ 0x26
 8006ba6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d110      	bne.n	8006bce <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	78fa      	ldrb	r2, [r7, #3]
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f006 fda2 	bl	800d6fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	2310      	movs	r3, #16
 8006bca:	6093      	str	r3, [r2, #8]
 8006bcc:	e03d      	b.n	8006c4a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006bce:	78fa      	ldrb	r2, [r7, #3]
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	1a9b      	subs	r3, r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	3326      	adds	r3, #38	@ 0x26
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d00a      	beq.n	8006bfa <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8006be4:	78fa      	ldrb	r2, [r7, #3]
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	4613      	mov	r3, r2
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	1a9b      	subs	r3, r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	440b      	add	r3, r1
 8006bf2:	3326      	adds	r3, #38	@ 0x26
 8006bf4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d127      	bne.n	8006c4a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006bfa:	78fb      	ldrb	r3, [r7, #3]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	78fa      	ldrb	r2, [r7, #3]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c18:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006c1a:	78fa      	ldrb	r2, [r7, #3]
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	440b      	add	r3, r1
 8006c28:	334c      	adds	r3, #76	@ 0x4c
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006c2e:	78fa      	ldrb	r2, [r7, #3]
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	011b      	lsls	r3, r3, #4
 8006c36:	1a9b      	subs	r3, r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	334c      	adds	r3, #76	@ 0x4c
 8006c3e:	781a      	ldrb	r2, [r3, #0]
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f009 fe17 	bl	8010878 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	799b      	ldrb	r3, [r3, #6]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d13b      	bne.n	8006cca <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8006c52:	78fa      	ldrb	r2, [r7, #3]
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	4613      	mov	r3, r2
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	1a9b      	subs	r3, r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	3338      	adds	r3, #56	@ 0x38
 8006c62:	6819      	ldr	r1, [r3, #0]
 8006c64:	78fa      	ldrb	r2, [r7, #3]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	1a9b      	subs	r3, r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4403      	add	r3, r0
 8006c72:	3328      	adds	r3, #40	@ 0x28
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	440b      	add	r3, r1
 8006c78:	1e59      	subs	r1, r3, #1
 8006c7a:	78fa      	ldrb	r2, [r7, #3]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4403      	add	r3, r0
 8006c88:	3328      	adds	r3, #40	@ 0x28
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8470 	beq.w	800757a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8006c9a:	78fa      	ldrb	r2, [r7, #3]
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	1a9b      	subs	r3, r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	333c      	adds	r3, #60	@ 0x3c
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	78fa      	ldrb	r2, [r7, #3]
 8006cae:	f083 0301 	eor.w	r3, r3, #1
 8006cb2:	b2d8      	uxtb	r0, r3
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	1a9b      	subs	r3, r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	333c      	adds	r3, #60	@ 0x3c
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	f000 bc58 	b.w	800757a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8006cca:	78fa      	ldrb	r2, [r7, #3]
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	1a9b      	subs	r3, r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	333c      	adds	r3, #60	@ 0x3c
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	78fa      	ldrb	r2, [r7, #3]
 8006cde:	f083 0301 	eor.w	r3, r3, #1
 8006ce2:	b2d8      	uxtb	r0, r3
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	011b      	lsls	r3, r3, #4
 8006cea:	1a9b      	subs	r3, r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	440b      	add	r3, r1
 8006cf0:	333c      	adds	r3, #60	@ 0x3c
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	f000 bc40 	b.w	800757a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	78fa      	ldrb	r2, [r7, #3]
 8006d00:	4611      	mov	r1, r2
 8006d02:	4618      	mov	r0, r3
 8006d04:	f005 ff57 	bl	800cbb6 <USB_ReadChInterrupts>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d131      	bne.n	8006d76 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006d12:	78fb      	ldrb	r3, [r7, #3]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d1e:	461a      	mov	r2, r3
 8006d20:	2320      	movs	r3, #32
 8006d22:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8006d24:	78fa      	ldrb	r2, [r7, #3]
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	331a      	adds	r3, #26
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	f040 841f 	bne.w	800757a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8006d3c:	78fa      	ldrb	r2, [r7, #3]
 8006d3e:	6879      	ldr	r1, [r7, #4]
 8006d40:	4613      	mov	r3, r2
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	440b      	add	r3, r1
 8006d4a:	331b      	adds	r3, #27
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006d50:	78fa      	ldrb	r2, [r7, #3]
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	4613      	mov	r3, r2
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	1a9b      	subs	r3, r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	334d      	adds	r3, #77	@ 0x4d
 8006d60:	2203      	movs	r2, #3
 8006d62:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	78fa      	ldrb	r2, [r7, #3]
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f006 fcc6 	bl	800d6fe <USB_HC_Halt>
 8006d72:	f000 bc02 	b.w	800757a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	78fa      	ldrb	r2, [r7, #3]
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f005 ff19 	bl	800cbb6 <USB_ReadChInterrupts>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	f040 8305 	bne.w	800739a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	2302      	movs	r3, #2
 8006da0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	4613      	mov	r3, r2
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	334d      	adds	r3, #77	@ 0x4d
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d114      	bne.n	8006de2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006db8:	78fa      	ldrb	r2, [r7, #3]
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	1a9b      	subs	r3, r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	440b      	add	r3, r1
 8006dc6:	334d      	adds	r3, #77	@ 0x4d
 8006dc8:	2202      	movs	r2, #2
 8006dca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006dcc:	78fa      	ldrb	r2, [r7, #3]
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	334c      	adds	r3, #76	@ 0x4c
 8006ddc:	2201      	movs	r2, #1
 8006dde:	701a      	strb	r2, [r3, #0]
 8006de0:	e2cc      	b.n	800737c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006de2:	78fa      	ldrb	r2, [r7, #3]
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	011b      	lsls	r3, r3, #4
 8006dea:	1a9b      	subs	r3, r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	334d      	adds	r3, #77	@ 0x4d
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b06      	cmp	r3, #6
 8006df6:	d114      	bne.n	8006e22 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006df8:	78fa      	ldrb	r2, [r7, #3]
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	1a9b      	subs	r3, r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	440b      	add	r3, r1
 8006e06:	334d      	adds	r3, #77	@ 0x4d
 8006e08:	2202      	movs	r2, #2
 8006e0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8006e0c:	78fa      	ldrb	r2, [r7, #3]
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	4613      	mov	r3, r2
 8006e12:	011b      	lsls	r3, r3, #4
 8006e14:	1a9b      	subs	r3, r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	440b      	add	r3, r1
 8006e1a:	334c      	adds	r3, #76	@ 0x4c
 8006e1c:	2205      	movs	r2, #5
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	e2ac      	b.n	800737c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006e22:	78fa      	ldrb	r2, [r7, #3]
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	1a9b      	subs	r3, r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	334d      	adds	r3, #77	@ 0x4d
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b07      	cmp	r3, #7
 8006e36:	d00b      	beq.n	8006e50 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	1a9b      	subs	r3, r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	334d      	adds	r3, #77	@ 0x4d
 8006e48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006e4a:	2b09      	cmp	r3, #9
 8006e4c:	f040 80a6 	bne.w	8006f9c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e50:	78fa      	ldrb	r2, [r7, #3]
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	4613      	mov	r3, r2
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	334d      	adds	r3, #77	@ 0x4d
 8006e60:	2202      	movs	r2, #2
 8006e62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006e64:	78fa      	ldrb	r2, [r7, #3]
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	1a9b      	subs	r3, r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	440b      	add	r3, r1
 8006e72:	3344      	adds	r3, #68	@ 0x44
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	1c59      	adds	r1, r3, #1
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4403      	add	r3, r0
 8006e84:	3344      	adds	r3, #68	@ 0x44
 8006e86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006e88:	78fa      	ldrb	r2, [r7, #3]
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	440b      	add	r3, r1
 8006e96:	3344      	adds	r3, #68	@ 0x44
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d943      	bls.n	8006f26 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006e9e:	78fa      	ldrb	r2, [r7, #3]
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	1a9b      	subs	r3, r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	3344      	adds	r3, #68	@ 0x44
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8006eb2:	78fa      	ldrb	r2, [r7, #3]
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	011b      	lsls	r3, r3, #4
 8006eba:	1a9b      	subs	r3, r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	331a      	adds	r3, #26
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d123      	bne.n	8006f10 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8006ec8:	78fa      	ldrb	r2, [r7, #3]
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	1a9b      	subs	r3, r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	440b      	add	r3, r1
 8006ed6:	331b      	adds	r3, #27
 8006ed8:	2200      	movs	r2, #0
 8006eda:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006edc:	78fa      	ldrb	r2, [r7, #3]
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	440b      	add	r3, r1
 8006eea:	331c      	adds	r3, #28
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	78fa      	ldrb	r2, [r7, #3]
 8006f00:	0151      	lsls	r1, r2, #5
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	440a      	add	r2, r1
 8006f06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f0e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006f10:	78fa      	ldrb	r2, [r7, #3]
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	4613      	mov	r3, r2
 8006f16:	011b      	lsls	r3, r3, #4
 8006f18:	1a9b      	subs	r3, r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	334c      	adds	r3, #76	@ 0x4c
 8006f20:	2204      	movs	r2, #4
 8006f22:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006f24:	e229      	b.n	800737a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	1a9b      	subs	r3, r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	334c      	adds	r3, #76	@ 0x4c
 8006f36:	2202      	movs	r2, #2
 8006f38:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006f3a:	78fa      	ldrb	r2, [r7, #3]
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	011b      	lsls	r3, r3, #4
 8006f42:	1a9b      	subs	r3, r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	3326      	adds	r3, #38	@ 0x26
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006f50:	78fa      	ldrb	r2, [r7, #3]
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	4613      	mov	r3, r2
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	1a9b      	subs	r3, r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	440b      	add	r3, r1
 8006f5e:	3326      	adds	r3, #38	@ 0x26
 8006f60:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	f040 8209 	bne.w	800737a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f7e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f86:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f94:	461a      	mov	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006f9a:	e1ee      	b.n	800737a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	334d      	adds	r3, #77	@ 0x4d
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b05      	cmp	r3, #5
 8006fb0:	f040 80c8 	bne.w	8007144 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006fb4:	78fa      	ldrb	r2, [r7, #3]
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	1a9b      	subs	r3, r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	334d      	adds	r3, #77	@ 0x4d
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006fc8:	78fa      	ldrb	r2, [r7, #3]
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	331b      	adds	r3, #27
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	f040 81ce 	bne.w	800737c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006fe0:	78fa      	ldrb	r2, [r7, #3]
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	440b      	add	r3, r1
 8006fee:	3326      	adds	r3, #38	@ 0x26
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d16b      	bne.n	80070ce <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8006ff6:	78fa      	ldrb	r2, [r7, #3]
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	1a9b      	subs	r3, r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	3348      	adds	r3, #72	@ 0x48
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	1c59      	adds	r1, r3, #1
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	4613      	mov	r3, r2
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	1a9b      	subs	r3, r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4403      	add	r3, r0
 8007016:	3348      	adds	r3, #72	@ 0x48
 8007018:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800701a:	78fa      	ldrb	r2, [r7, #3]
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	440b      	add	r3, r1
 8007028:	3348      	adds	r3, #72	@ 0x48
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b02      	cmp	r3, #2
 800702e:	d943      	bls.n	80070b8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8007030:	78fa      	ldrb	r2, [r7, #3]
 8007032:	6879      	ldr	r1, [r7, #4]
 8007034:	4613      	mov	r3, r2
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	1a9b      	subs	r3, r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	3348      	adds	r3, #72	@ 0x48
 8007040:	2200      	movs	r2, #0
 8007042:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8007044:	78fa      	ldrb	r2, [r7, #3]
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	011b      	lsls	r3, r3, #4
 800704c:	1a9b      	subs	r3, r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	331b      	adds	r3, #27
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8007058:	78fa      	ldrb	r2, [r7, #3]
 800705a:	6879      	ldr	r1, [r7, #4]
 800705c:	4613      	mov	r3, r2
 800705e:	011b      	lsls	r3, r3, #4
 8007060:	1a9b      	subs	r3, r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	440b      	add	r3, r1
 8007066:	3344      	adds	r3, #68	@ 0x44
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d809      	bhi.n	8007082 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800706e:	78fa      	ldrb	r2, [r7, #3]
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	011b      	lsls	r3, r3, #4
 8007076:	1a9b      	subs	r3, r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	440b      	add	r3, r1
 800707c:	331c      	adds	r3, #28
 800707e:	2201      	movs	r2, #1
 8007080:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007082:	78fb      	ldrb	r3, [r7, #3]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	78fa      	ldrb	r2, [r7, #3]
 8007092:	0151      	lsls	r1, r2, #5
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	440a      	add	r2, r1
 8007098:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800709c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070a0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80070a2:	78fa      	ldrb	r2, [r7, #3]
 80070a4:	6879      	ldr	r1, [r7, #4]
 80070a6:	4613      	mov	r3, r2
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	1a9b      	subs	r3, r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	334c      	adds	r3, #76	@ 0x4c
 80070b2:	2204      	movs	r2, #4
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	e014      	b.n	80070e2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	4613      	mov	r3, r2
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	1a9b      	subs	r3, r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	334c      	adds	r3, #76	@ 0x4c
 80070c8:	2202      	movs	r2, #2
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	e009      	b.n	80070e2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80070ce:	78fa      	ldrb	r2, [r7, #3]
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	4613      	mov	r3, r2
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	1a9b      	subs	r3, r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	440b      	add	r3, r1
 80070dc:	334c      	adds	r3, #76	@ 0x4c
 80070de:	2202      	movs	r2, #2
 80070e0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	1a9b      	subs	r3, r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	440b      	add	r3, r1
 80070f0:	3326      	adds	r3, #38	@ 0x26
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00b      	beq.n	8007110 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80070f8:	78fa      	ldrb	r2, [r7, #3]
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	4613      	mov	r3, r2
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	1a9b      	subs	r3, r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	440b      	add	r3, r1
 8007106:	3326      	adds	r3, #38	@ 0x26
 8007108:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800710a:	2b02      	cmp	r3, #2
 800710c:	f040 8136 	bne.w	800737c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007126:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800712e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	4413      	add	r3, r2
 8007138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800713c:	461a      	mov	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e11b      	b.n	800737c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007144:	78fa      	ldrb	r2, [r7, #3]
 8007146:	6879      	ldr	r1, [r7, #4]
 8007148:	4613      	mov	r3, r2
 800714a:	011b      	lsls	r3, r3, #4
 800714c:	1a9b      	subs	r3, r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	440b      	add	r3, r1
 8007152:	334d      	adds	r3, #77	@ 0x4d
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b03      	cmp	r3, #3
 8007158:	f040 8081 	bne.w	800725e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800715c:	78fa      	ldrb	r2, [r7, #3]
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	4613      	mov	r3, r2
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	334d      	adds	r3, #77	@ 0x4d
 800716c:	2202      	movs	r2, #2
 800716e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007170:	78fa      	ldrb	r2, [r7, #3]
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	4613      	mov	r3, r2
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	1a9b      	subs	r3, r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	440b      	add	r3, r1
 800717e:	331b      	adds	r3, #27
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	2b01      	cmp	r3, #1
 8007184:	f040 80fa 	bne.w	800737c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007188:	78fa      	ldrb	r2, [r7, #3]
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	4613      	mov	r3, r2
 800718e:	011b      	lsls	r3, r3, #4
 8007190:	1a9b      	subs	r3, r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	334c      	adds	r3, #76	@ 0x4c
 8007198:	2202      	movs	r2, #2
 800719a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	78fa      	ldrb	r2, [r7, #3]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071ba:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	78fa      	ldrb	r2, [r7, #3]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071da:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	78fa      	ldrb	r2, [r7, #3]
 80071ec:	0151      	lsls	r1, r2, #5
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	440a      	add	r2, r1
 80071f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071f6:	f023 0320 	bic.w	r3, r3, #32
 80071fa:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80071fc:	78fa      	ldrb	r2, [r7, #3]
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	4613      	mov	r3, r2
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	3326      	adds	r3, #38	@ 0x26
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007212:	78fa      	ldrb	r2, [r7, #3]
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	4613      	mov	r3, r2
 8007218:	011b      	lsls	r3, r3, #4
 800721a:	1a9b      	subs	r3, r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	440b      	add	r3, r1
 8007220:	3326      	adds	r3, #38	@ 0x26
 8007222:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007224:	2b02      	cmp	r3, #2
 8007226:	f040 80a9 	bne.w	800737c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800722a:	78fb      	ldrb	r3, [r7, #3]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	4413      	add	r3, r2
 8007232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007240:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007248:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800724a:	78fb      	ldrb	r3, [r7, #3]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	4413      	add	r3, r2
 8007252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007256:	461a      	mov	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	e08e      	b.n	800737c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800725e:	78fa      	ldrb	r2, [r7, #3]
 8007260:	6879      	ldr	r1, [r7, #4]
 8007262:	4613      	mov	r3, r2
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	440b      	add	r3, r1
 800726c:	334d      	adds	r3, #77	@ 0x4d
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	2b04      	cmp	r3, #4
 8007272:	d143      	bne.n	80072fc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007274:	78fa      	ldrb	r2, [r7, #3]
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	4613      	mov	r3, r2
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	440b      	add	r3, r1
 8007282:	334d      	adds	r3, #77	@ 0x4d
 8007284:	2202      	movs	r2, #2
 8007286:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007288:	78fa      	ldrb	r2, [r7, #3]
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	4613      	mov	r3, r2
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	1a9b      	subs	r3, r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	440b      	add	r3, r1
 8007296:	334c      	adds	r3, #76	@ 0x4c
 8007298:	2202      	movs	r2, #2
 800729a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800729c:	78fa      	ldrb	r2, [r7, #3]
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	4613      	mov	r3, r2
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	1a9b      	subs	r3, r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	3326      	adds	r3, #38	@ 0x26
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80072b2:	78fa      	ldrb	r2, [r7, #3]
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	4613      	mov	r3, r2
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	1a9b      	subs	r3, r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	440b      	add	r3, r1
 80072c0:	3326      	adds	r3, #38	@ 0x26
 80072c2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d159      	bne.n	800737c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80072de:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072e6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80072e8:	78fb      	ldrb	r3, [r7, #3]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072f4:	461a      	mov	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6013      	str	r3, [r2, #0]
 80072fa:	e03f      	b.n	800737c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80072fc:	78fa      	ldrb	r2, [r7, #3]
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	4613      	mov	r3, r2
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	334d      	adds	r3, #77	@ 0x4d
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b08      	cmp	r3, #8
 8007310:	d126      	bne.n	8007360 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007312:	78fa      	ldrb	r2, [r7, #3]
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4613      	mov	r3, r2
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	440b      	add	r3, r1
 8007320:	334d      	adds	r3, #77	@ 0x4d
 8007322:	2202      	movs	r2, #2
 8007324:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007326:	78fa      	ldrb	r2, [r7, #3]
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	4613      	mov	r3, r2
 800732c:	011b      	lsls	r3, r3, #4
 800732e:	1a9b      	subs	r3, r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	440b      	add	r3, r1
 8007334:	3344      	adds	r3, #68	@ 0x44
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	1c59      	adds	r1, r3, #1
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4613      	mov	r3, r2
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4403      	add	r3, r0
 8007346:	3344      	adds	r3, #68	@ 0x44
 8007348:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800734a:	78fa      	ldrb	r2, [r7, #3]
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	011b      	lsls	r3, r3, #4
 8007352:	1a9b      	subs	r3, r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	334c      	adds	r3, #76	@ 0x4c
 800735a:	2204      	movs	r2, #4
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	e00d      	b.n	800737c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8007360:	78fa      	ldrb	r2, [r7, #3]
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	4613      	mov	r3, r2
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	1a9b      	subs	r3, r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	334d      	adds	r3, #77	@ 0x4d
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b02      	cmp	r3, #2
 8007374:	f000 8100 	beq.w	8007578 <HCD_HC_IN_IRQHandler+0xcca>
 8007378:	e000      	b.n	800737c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800737a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800737c:	78fa      	ldrb	r2, [r7, #3]
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	4613      	mov	r3, r2
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	1a9b      	subs	r3, r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	334c      	adds	r3, #76	@ 0x4c
 800738c:	781a      	ldrb	r2, [r3, #0]
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f009 fa70 	bl	8010878 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007398:	e0ef      	b.n	800757a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	78fa      	ldrb	r2, [r7, #3]
 80073a0:	4611      	mov	r1, r2
 80073a2:	4618      	mov	r0, r3
 80073a4:	f005 fc07 	bl	800cbb6 <USB_ReadChInterrupts>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ae:	2b40      	cmp	r3, #64	@ 0x40
 80073b0:	d12f      	bne.n	8007412 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073be:	461a      	mov	r2, r3
 80073c0:	2340      	movs	r3, #64	@ 0x40
 80073c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80073c4:	78fa      	ldrb	r2, [r7, #3]
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	011b      	lsls	r3, r3, #4
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	334d      	adds	r3, #77	@ 0x4d
 80073d4:	2205      	movs	r2, #5
 80073d6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80073d8:	78fa      	ldrb	r2, [r7, #3]
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	1a9b      	subs	r3, r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	331a      	adds	r3, #26
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80073ee:	78fa      	ldrb	r2, [r7, #3]
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	1a9b      	subs	r3, r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	440b      	add	r3, r1
 80073fc:	3344      	adds	r3, #68	@ 0x44
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	4611      	mov	r1, r2
 800740a:	4618      	mov	r0, r3
 800740c:	f006 f977 	bl	800d6fe <USB_HC_Halt>
 8007410:	e0b3      	b.n	800757a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	78fa      	ldrb	r2, [r7, #3]
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f005 fbcb 	bl	800cbb6 <USB_ReadChInterrupts>
 8007420:	4603      	mov	r3, r0
 8007422:	f003 0310 	and.w	r3, r3, #16
 8007426:	2b10      	cmp	r3, #16
 8007428:	f040 80a7 	bne.w	800757a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800742c:	78fa      	ldrb	r2, [r7, #3]
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	4613      	mov	r3, r2
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	1a9b      	subs	r3, r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	3326      	adds	r3, #38	@ 0x26
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b03      	cmp	r3, #3
 8007440:	d11b      	bne.n	800747a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	4613      	mov	r3, r2
 8007448:	011b      	lsls	r3, r3, #4
 800744a:	1a9b      	subs	r3, r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	440b      	add	r3, r1
 8007450:	3344      	adds	r3, #68	@ 0x44
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8007456:	78fa      	ldrb	r2, [r7, #3]
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	4613      	mov	r3, r2
 800745c:	011b      	lsls	r3, r3, #4
 800745e:	1a9b      	subs	r3, r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	440b      	add	r3, r1
 8007464:	334d      	adds	r3, #77	@ 0x4d
 8007466:	2204      	movs	r2, #4
 8007468:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	4611      	mov	r1, r2
 8007472:	4618      	mov	r0, r3
 8007474:	f006 f943 	bl	800d6fe <USB_HC_Halt>
 8007478:	e03f      	b.n	80074fa <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800747a:	78fa      	ldrb	r2, [r7, #3]
 800747c:	6879      	ldr	r1, [r7, #4]
 800747e:	4613      	mov	r3, r2
 8007480:	011b      	lsls	r3, r3, #4
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	440b      	add	r3, r1
 8007488:	3326      	adds	r3, #38	@ 0x26
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007490:	78fa      	ldrb	r2, [r7, #3]
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	4613      	mov	r3, r2
 8007496:	011b      	lsls	r3, r3, #4
 8007498:	1a9b      	subs	r3, r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	3326      	adds	r3, #38	@ 0x26
 80074a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d129      	bne.n	80074fa <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80074a6:	78fa      	ldrb	r2, [r7, #3]
 80074a8:	6879      	ldr	r1, [r7, #4]
 80074aa:	4613      	mov	r3, r2
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	1a9b      	subs	r3, r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	3344      	adds	r3, #68	@ 0x44
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	799b      	ldrb	r3, [r3, #6]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <HCD_HC_IN_IRQHandler+0xc2a>
 80074c2:	78fa      	ldrb	r2, [r7, #3]
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	1a9b      	subs	r3, r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	331b      	adds	r3, #27
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d110      	bne.n	80074fa <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80074d8:	78fa      	ldrb	r2, [r7, #3]
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	4613      	mov	r3, r2
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	334d      	adds	r3, #77	@ 0x4d
 80074e8:	2204      	movs	r2, #4
 80074ea:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	78fa      	ldrb	r2, [r7, #3]
 80074f2:	4611      	mov	r1, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f006 f902 	bl	800d6fe <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80074fa:	78fa      	ldrb	r2, [r7, #3]
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	4613      	mov	r3, r2
 8007500:	011b      	lsls	r3, r3, #4
 8007502:	1a9b      	subs	r3, r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	331b      	adds	r3, #27
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d129      	bne.n	8007564 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007510:	78fa      	ldrb	r2, [r7, #3]
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	4613      	mov	r3, r2
 8007516:	011b      	lsls	r3, r3, #4
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	440b      	add	r3, r1
 800751e:	331b      	adds	r3, #27
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	4413      	add	r3, r2
 800752c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	78fa      	ldrb	r2, [r7, #3]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	440a      	add	r2, r1
 800753a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800753e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007542:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	4413      	add	r3, r2
 800754c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	78fa      	ldrb	r2, [r7, #3]
 8007554:	0151      	lsls	r1, r2, #5
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	440a      	add	r2, r1
 800755a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800755e:	f043 0320 	orr.w	r3, r3, #32
 8007562:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	4413      	add	r3, r2
 800756c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007570:	461a      	mov	r2, r3
 8007572:	2310      	movs	r3, #16
 8007574:	6093      	str	r3, [r2, #8]
 8007576:	e000      	b.n	800757a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8007578:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	78fa      	ldrb	r2, [r7, #3]
 800759c:	4611      	mov	r1, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	f005 fb09 	bl	800cbb6 <USB_ReadChInterrupts>
 80075a4:	4603      	mov	r3, r0
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d11b      	bne.n	80075e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ba:	461a      	mov	r2, r3
 80075bc:	2304      	movs	r3, #4
 80075be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80075c0:	78fa      	ldrb	r2, [r7, #3]
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	4613      	mov	r3, r2
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	1a9b      	subs	r3, r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	334d      	adds	r3, #77	@ 0x4d
 80075d0:	2207      	movs	r2, #7
 80075d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	78fa      	ldrb	r2, [r7, #3]
 80075da:	4611      	mov	r1, r2
 80075dc:	4618      	mov	r0, r3
 80075de:	f006 f88e 	bl	800d6fe <USB_HC_Halt>
 80075e2:	f000 bc89 	b.w	8007ef8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	78fa      	ldrb	r2, [r7, #3]
 80075ec:	4611      	mov	r1, r2
 80075ee:	4618      	mov	r0, r3
 80075f0:	f005 fae1 	bl	800cbb6 <USB_ReadChInterrupts>
 80075f4:	4603      	mov	r3, r0
 80075f6:	f003 0320 	and.w	r3, r3, #32
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	f040 8082 	bne.w	8007704 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	4413      	add	r3, r2
 8007608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800760c:	461a      	mov	r2, r3
 800760e:	2320      	movs	r3, #32
 8007610:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8007612:	78fa      	ldrb	r2, [r7, #3]
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	4613      	mov	r3, r2
 8007618:	011b      	lsls	r3, r3, #4
 800761a:	1a9b      	subs	r3, r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	440b      	add	r3, r1
 8007620:	3319      	adds	r3, #25
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d124      	bne.n	8007672 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8007628:	78fa      	ldrb	r2, [r7, #3]
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	4613      	mov	r3, r2
 800762e:	011b      	lsls	r3, r3, #4
 8007630:	1a9b      	subs	r3, r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	440b      	add	r3, r1
 8007636:	3319      	adds	r3, #25
 8007638:	2200      	movs	r2, #0
 800763a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	6879      	ldr	r1, [r7, #4]
 8007640:	4613      	mov	r3, r2
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	440b      	add	r3, r1
 800764a:	334c      	adds	r3, #76	@ 0x4c
 800764c:	2202      	movs	r2, #2
 800764e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007650:	78fa      	ldrb	r2, [r7, #3]
 8007652:	6879      	ldr	r1, [r7, #4]
 8007654:	4613      	mov	r3, r2
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	1a9b      	subs	r3, r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	440b      	add	r3, r1
 800765e:	334d      	adds	r3, #77	@ 0x4d
 8007660:	2203      	movs	r2, #3
 8007662:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	78fa      	ldrb	r2, [r7, #3]
 800766a:	4611      	mov	r1, r2
 800766c:	4618      	mov	r0, r3
 800766e:	f006 f846 	bl	800d6fe <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8007672:	78fa      	ldrb	r2, [r7, #3]
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	1a9b      	subs	r3, r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	331a      	adds	r3, #26
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b01      	cmp	r3, #1
 8007686:	f040 8437 	bne.w	8007ef8 <HCD_HC_OUT_IRQHandler+0x978>
 800768a:	78fa      	ldrb	r2, [r7, #3]
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	4613      	mov	r3, r2
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	1a9b      	subs	r3, r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	440b      	add	r3, r1
 8007698:	331b      	adds	r3, #27
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	f040 842b 	bne.w	8007ef8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80076a2:	78fa      	ldrb	r2, [r7, #3]
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	4613      	mov	r3, r2
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	1a9b      	subs	r3, r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	3326      	adds	r3, #38	@ 0x26
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d009      	beq.n	80076cc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80076b8:	78fa      	ldrb	r2, [r7, #3]
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	4613      	mov	r3, r2
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	1a9b      	subs	r3, r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	331b      	adds	r3, #27
 80076c8:	2201      	movs	r2, #1
 80076ca:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80076cc:	78fa      	ldrb	r2, [r7, #3]
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	4613      	mov	r3, r2
 80076d2:	011b      	lsls	r3, r3, #4
 80076d4:	1a9b      	subs	r3, r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	440b      	add	r3, r1
 80076da:	334d      	adds	r3, #77	@ 0x4d
 80076dc:	2203      	movs	r2, #3
 80076de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	4611      	mov	r1, r2
 80076e8:	4618      	mov	r0, r3
 80076ea:	f006 f808 	bl	800d6fe <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80076ee:	78fa      	ldrb	r2, [r7, #3]
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	4613      	mov	r3, r2
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	1a9b      	subs	r3, r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	440b      	add	r3, r1
 80076fc:	3344      	adds	r3, #68	@ 0x44
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	e3f9      	b.n	8007ef8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	78fa      	ldrb	r2, [r7, #3]
 800770a:	4611      	mov	r1, r2
 800770c:	4618      	mov	r0, r3
 800770e:	f005 fa52 	bl	800cbb6 <USB_ReadChInterrupts>
 8007712:	4603      	mov	r3, r0
 8007714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800771c:	d111      	bne.n	8007742 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	4413      	add	r3, r2
 8007726:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800772a:	461a      	mov	r2, r3
 800772c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007730:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	78fa      	ldrb	r2, [r7, #3]
 8007738:	4611      	mov	r1, r2
 800773a:	4618      	mov	r0, r3
 800773c:	f005 ffdf 	bl	800d6fe <USB_HC_Halt>
 8007740:	e3da      	b.n	8007ef8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	78fa      	ldrb	r2, [r7, #3]
 8007748:	4611      	mov	r1, r2
 800774a:	4618      	mov	r0, r3
 800774c:	f005 fa33 	bl	800cbb6 <USB_ReadChInterrupts>
 8007750:	4603      	mov	r3, r0
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b01      	cmp	r3, #1
 8007758:	d168      	bne.n	800782c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800775a:	78fa      	ldrb	r2, [r7, #3]
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	4613      	mov	r3, r2
 8007760:	011b      	lsls	r3, r3, #4
 8007762:	1a9b      	subs	r3, r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	440b      	add	r3, r1
 8007768:	3344      	adds	r3, #68	@ 0x44
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	78fa      	ldrb	r2, [r7, #3]
 8007774:	4611      	mov	r1, r2
 8007776:	4618      	mov	r0, r3
 8007778:	f005 fa1d 	bl	800cbb6 <USB_ReadChInterrupts>
 800777c:	4603      	mov	r3, r0
 800777e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007782:	2b40      	cmp	r3, #64	@ 0x40
 8007784:	d112      	bne.n	80077ac <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007786:	78fa      	ldrb	r2, [r7, #3]
 8007788:	6879      	ldr	r1, [r7, #4]
 800778a:	4613      	mov	r3, r2
 800778c:	011b      	lsls	r3, r3, #4
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	440b      	add	r3, r1
 8007794:	3319      	adds	r3, #25
 8007796:	2201      	movs	r2, #1
 8007798:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077a6:	461a      	mov	r2, r3
 80077a8:	2340      	movs	r3, #64	@ 0x40
 80077aa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80077ac:	78fa      	ldrb	r2, [r7, #3]
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	4613      	mov	r3, r2
 80077b2:	011b      	lsls	r3, r3, #4
 80077b4:	1a9b      	subs	r3, r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	440b      	add	r3, r1
 80077ba:	331b      	adds	r3, #27
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d019      	beq.n	80077f6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80077c2:	78fa      	ldrb	r2, [r7, #3]
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	4613      	mov	r3, r2
 80077c8:	011b      	lsls	r3, r3, #4
 80077ca:	1a9b      	subs	r3, r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	440b      	add	r3, r1
 80077d0:	331b      	adds	r3, #27
 80077d2:	2200      	movs	r2, #0
 80077d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	78fa      	ldrb	r2, [r7, #3]
 80077e6:	0151      	lsls	r1, r2, #5
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	440a      	add	r2, r1
 80077ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077f4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80077f6:	78fb      	ldrb	r3, [r7, #3]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007802:	461a      	mov	r2, r3
 8007804:	2301      	movs	r3, #1
 8007806:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8007808:	78fa      	ldrb	r2, [r7, #3]
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	4613      	mov	r3, r2
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	1a9b      	subs	r3, r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	440b      	add	r3, r1
 8007816:	334d      	adds	r3, #77	@ 0x4d
 8007818:	2201      	movs	r2, #1
 800781a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	78fa      	ldrb	r2, [r7, #3]
 8007822:	4611      	mov	r1, r2
 8007824:	4618      	mov	r0, r3
 8007826:	f005 ff6a 	bl	800d6fe <USB_HC_Halt>
 800782a:	e365      	b.n	8007ef8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	78fa      	ldrb	r2, [r7, #3]
 8007832:	4611      	mov	r1, r2
 8007834:	4618      	mov	r0, r3
 8007836:	f005 f9be 	bl	800cbb6 <USB_ReadChInterrupts>
 800783a:	4603      	mov	r3, r0
 800783c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007840:	2b40      	cmp	r3, #64	@ 0x40
 8007842:	d139      	bne.n	80078b8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8007844:	78fa      	ldrb	r2, [r7, #3]
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	4613      	mov	r3, r2
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	440b      	add	r3, r1
 8007852:	334d      	adds	r3, #77	@ 0x4d
 8007854:	2205      	movs	r2, #5
 8007856:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007858:	78fa      	ldrb	r2, [r7, #3]
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	4613      	mov	r3, r2
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	440b      	add	r3, r1
 8007866:	331a      	adds	r3, #26
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d109      	bne.n	8007882 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800786e:	78fa      	ldrb	r2, [r7, #3]
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	4613      	mov	r3, r2
 8007874:	011b      	lsls	r3, r3, #4
 8007876:	1a9b      	subs	r3, r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	3319      	adds	r3, #25
 800787e:	2201      	movs	r2, #1
 8007880:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8007882:	78fa      	ldrb	r2, [r7, #3]
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	4613      	mov	r3, r2
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	1a9b      	subs	r3, r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	3344      	adds	r3, #68	@ 0x44
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	78fa      	ldrb	r2, [r7, #3]
 800789c:	4611      	mov	r1, r2
 800789e:	4618      	mov	r0, r3
 80078a0:	f005 ff2d 	bl	800d6fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80078a4:	78fb      	ldrb	r3, [r7, #3]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b0:	461a      	mov	r2, r3
 80078b2:	2340      	movs	r3, #64	@ 0x40
 80078b4:	6093      	str	r3, [r2, #8]
 80078b6:	e31f      	b.n	8007ef8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	78fa      	ldrb	r2, [r7, #3]
 80078be:	4611      	mov	r1, r2
 80078c0:	4618      	mov	r0, r3
 80078c2:	f005 f978 	bl	800cbb6 <USB_ReadChInterrupts>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f003 0308 	and.w	r3, r3, #8
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	d11a      	bne.n	8007906 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078dc:	461a      	mov	r2, r3
 80078de:	2308      	movs	r3, #8
 80078e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80078e2:	78fa      	ldrb	r2, [r7, #3]
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	4613      	mov	r3, r2
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	1a9b      	subs	r3, r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	440b      	add	r3, r1
 80078f0:	334d      	adds	r3, #77	@ 0x4d
 80078f2:	2206      	movs	r2, #6
 80078f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	78fa      	ldrb	r2, [r7, #3]
 80078fc:	4611      	mov	r1, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f005 fefd 	bl	800d6fe <USB_HC_Halt>
 8007904:	e2f8      	b.n	8007ef8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	78fa      	ldrb	r2, [r7, #3]
 800790c:	4611      	mov	r1, r2
 800790e:	4618      	mov	r0, r3
 8007910:	f005 f951 	bl	800cbb6 <USB_ReadChInterrupts>
 8007914:	4603      	mov	r3, r0
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	2b10      	cmp	r3, #16
 800791c:	d144      	bne.n	80079a8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800791e:	78fa      	ldrb	r2, [r7, #3]
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	4613      	mov	r3, r2
 8007924:	011b      	lsls	r3, r3, #4
 8007926:	1a9b      	subs	r3, r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	440b      	add	r3, r1
 800792c:	3344      	adds	r3, #68	@ 0x44
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8007932:	78fa      	ldrb	r2, [r7, #3]
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	4613      	mov	r3, r2
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	440b      	add	r3, r1
 8007940:	334d      	adds	r3, #77	@ 0x4d
 8007942:	2204      	movs	r2, #4
 8007944:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8007946:	78fa      	ldrb	r2, [r7, #3]
 8007948:	6879      	ldr	r1, [r7, #4]
 800794a:	4613      	mov	r3, r2
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	1a9b      	subs	r3, r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	440b      	add	r3, r1
 8007954:	3319      	adds	r3, #25
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d114      	bne.n	8007986 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800795c:	78fa      	ldrb	r2, [r7, #3]
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	4613      	mov	r3, r2
 8007962:	011b      	lsls	r3, r3, #4
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	440b      	add	r3, r1
 800796a:	3318      	adds	r3, #24
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d109      	bne.n	8007986 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8007972:	78fa      	ldrb	r2, [r7, #3]
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	4613      	mov	r3, r2
 8007978:	011b      	lsls	r3, r3, #4
 800797a:	1a9b      	subs	r3, r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	440b      	add	r3, r1
 8007980:	3319      	adds	r3, #25
 8007982:	2201      	movs	r2, #1
 8007984:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	78fa      	ldrb	r2, [r7, #3]
 800798c:	4611      	mov	r1, r2
 800798e:	4618      	mov	r0, r3
 8007990:	f005 feb5 	bl	800d6fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4413      	add	r3, r2
 800799c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079a0:	461a      	mov	r2, r3
 80079a2:	2310      	movs	r3, #16
 80079a4:	6093      	str	r3, [r2, #8]
 80079a6:	e2a7      	b.n	8007ef8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	4611      	mov	r1, r2
 80079b0:	4618      	mov	r0, r3
 80079b2:	f005 f900 	bl	800cbb6 <USB_ReadChInterrupts>
 80079b6:	4603      	mov	r3, r0
 80079b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079bc:	2b80      	cmp	r3, #128	@ 0x80
 80079be:	f040 8083 	bne.w	8007ac8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	799b      	ldrb	r3, [r3, #6]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d111      	bne.n	80079ee <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80079ca:	78fa      	ldrb	r2, [r7, #3]
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	4613      	mov	r3, r2
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	1a9b      	subs	r3, r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	440b      	add	r3, r1
 80079d8:	334d      	adds	r3, #77	@ 0x4d
 80079da:	2207      	movs	r2, #7
 80079dc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	78fa      	ldrb	r2, [r7, #3]
 80079e4:	4611      	mov	r1, r2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f005 fe89 	bl	800d6fe <USB_HC_Halt>
 80079ec:	e062      	b.n	8007ab4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80079ee:	78fa      	ldrb	r2, [r7, #3]
 80079f0:	6879      	ldr	r1, [r7, #4]
 80079f2:	4613      	mov	r3, r2
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	1a9b      	subs	r3, r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	440b      	add	r3, r1
 80079fc:	3344      	adds	r3, #68	@ 0x44
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	1c59      	adds	r1, r3, #1
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4613      	mov	r3, r2
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	1a9b      	subs	r3, r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4403      	add	r3, r0
 8007a0e:	3344      	adds	r3, #68	@ 0x44
 8007a10:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007a12:	78fa      	ldrb	r2, [r7, #3]
 8007a14:	6879      	ldr	r1, [r7, #4]
 8007a16:	4613      	mov	r3, r2
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	1a9b      	subs	r3, r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	440b      	add	r3, r1
 8007a20:	3344      	adds	r3, #68	@ 0x44
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d922      	bls.n	8007a6e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007a28:	78fa      	ldrb	r2, [r7, #3]
 8007a2a:	6879      	ldr	r1, [r7, #4]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	1a9b      	subs	r3, r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	440b      	add	r3, r1
 8007a36:	3344      	adds	r3, #68	@ 0x44
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007a3c:	78fa      	ldrb	r2, [r7, #3]
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	4613      	mov	r3, r2
 8007a42:	011b      	lsls	r3, r3, #4
 8007a44:	1a9b      	subs	r3, r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	440b      	add	r3, r1
 8007a4a:	334c      	adds	r3, #76	@ 0x4c
 8007a4c:	2204      	movs	r2, #4
 8007a4e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007a50:	78fa      	ldrb	r2, [r7, #3]
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	4613      	mov	r3, r2
 8007a56:	011b      	lsls	r3, r3, #4
 8007a58:	1a9b      	subs	r3, r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	440b      	add	r3, r1
 8007a5e:	334c      	adds	r3, #76	@ 0x4c
 8007a60:	781a      	ldrb	r2, [r3, #0]
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f008 ff06 	bl	8010878 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007a6c:	e022      	b.n	8007ab4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007a6e:	78fa      	ldrb	r2, [r7, #3]
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	4613      	mov	r3, r2
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	1a9b      	subs	r3, r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	334c      	adds	r3, #76	@ 0x4c
 8007a7e:	2202      	movs	r2, #2
 8007a80:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007a82:	78fb      	ldrb	r3, [r7, #3]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a98:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007aa0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007aa2:	78fb      	ldrb	r3, [r7, #3]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aae:	461a      	mov	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007ab4:	78fb      	ldrb	r3, [r7, #3]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	2380      	movs	r3, #128	@ 0x80
 8007ac4:	6093      	str	r3, [r2, #8]
 8007ac6:	e217      	b.n	8007ef8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	78fa      	ldrb	r2, [r7, #3]
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f005 f870 	bl	800cbb6 <USB_ReadChInterrupts>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ae0:	d11b      	bne.n	8007b1a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8007ae2:	78fa      	ldrb	r2, [r7, #3]
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	1a9b      	subs	r3, r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	440b      	add	r3, r1
 8007af0:	334d      	adds	r3, #77	@ 0x4d
 8007af2:	2209      	movs	r2, #9
 8007af4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	78fa      	ldrb	r2, [r7, #3]
 8007afc:	4611      	mov	r1, r2
 8007afe:	4618      	mov	r0, r3
 8007b00:	f005 fdfd 	bl	800d6fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007b04:	78fb      	ldrb	r3, [r7, #3]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b10:	461a      	mov	r2, r3
 8007b12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b16:	6093      	str	r3, [r2, #8]
 8007b18:	e1ee      	b.n	8007ef8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	78fa      	ldrb	r2, [r7, #3]
 8007b20:	4611      	mov	r1, r2
 8007b22:	4618      	mov	r0, r3
 8007b24:	f005 f847 	bl	800cbb6 <USB_ReadChInterrupts>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	f040 81df 	bne.w	8007ef2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b40:	461a      	mov	r2, r3
 8007b42:	2302      	movs	r3, #2
 8007b44:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007b46:	78fa      	ldrb	r2, [r7, #3]
 8007b48:	6879      	ldr	r1, [r7, #4]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	1a9b      	subs	r3, r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	440b      	add	r3, r1
 8007b54:	334d      	adds	r3, #77	@ 0x4d
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	f040 8093 	bne.w	8007c84 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	6879      	ldr	r1, [r7, #4]
 8007b62:	4613      	mov	r3, r2
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	1a9b      	subs	r3, r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	440b      	add	r3, r1
 8007b6c:	334d      	adds	r3, #77	@ 0x4d
 8007b6e:	2202      	movs	r2, #2
 8007b70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007b72:	78fa      	ldrb	r2, [r7, #3]
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	4613      	mov	r3, r2
 8007b78:	011b      	lsls	r3, r3, #4
 8007b7a:	1a9b      	subs	r3, r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	440b      	add	r3, r1
 8007b80:	334c      	adds	r3, #76	@ 0x4c
 8007b82:	2201      	movs	r2, #1
 8007b84:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007b86:	78fa      	ldrb	r2, [r7, #3]
 8007b88:	6879      	ldr	r1, [r7, #4]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	011b      	lsls	r3, r3, #4
 8007b8e:	1a9b      	subs	r3, r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	440b      	add	r3, r1
 8007b94:	3326      	adds	r3, #38	@ 0x26
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d00b      	beq.n	8007bb4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8007b9c:	78fa      	ldrb	r2, [r7, #3]
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	1a9b      	subs	r3, r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	440b      	add	r3, r1
 8007baa:	3326      	adds	r3, #38	@ 0x26
 8007bac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	f040 8190 	bne.w	8007ed4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	799b      	ldrb	r3, [r3, #6]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d115      	bne.n	8007be8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8007bbc:	78fa      	ldrb	r2, [r7, #3]
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	011b      	lsls	r3, r3, #4
 8007bc4:	1a9b      	subs	r3, r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	333d      	adds	r3, #61	@ 0x3d
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	78fa      	ldrb	r2, [r7, #3]
 8007bd0:	f083 0301 	eor.w	r3, r3, #1
 8007bd4:	b2d8      	uxtb	r0, r3
 8007bd6:	6879      	ldr	r1, [r7, #4]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	1a9b      	subs	r3, r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	440b      	add	r3, r1
 8007be2:	333d      	adds	r3, #61	@ 0x3d
 8007be4:	4602      	mov	r2, r0
 8007be6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	799b      	ldrb	r3, [r3, #6]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	f040 8171 	bne.w	8007ed4 <HCD_HC_OUT_IRQHandler+0x954>
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	1a9b      	subs	r3, r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	3334      	adds	r3, #52	@ 0x34
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 8165 	beq.w	8007ed4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8007c0a:	78fa      	ldrb	r2, [r7, #3]
 8007c0c:	6879      	ldr	r1, [r7, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	3334      	adds	r3, #52	@ 0x34
 8007c1a:	6819      	ldr	r1, [r3, #0]
 8007c1c:	78fa      	ldrb	r2, [r7, #3]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	4613      	mov	r3, r2
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	1a9b      	subs	r3, r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4403      	add	r3, r0
 8007c2a:	3328      	adds	r3, #40	@ 0x28
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	440b      	add	r3, r1
 8007c30:	1e59      	subs	r1, r3, #1
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	011b      	lsls	r3, r3, #4
 8007c3a:	1a9b      	subs	r3, r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4403      	add	r3, r0
 8007c40:	3328      	adds	r3, #40	@ 0x28
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c48:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 813f 	beq.w	8007ed4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8007c56:	78fa      	ldrb	r2, [r7, #3]
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	011b      	lsls	r3, r3, #4
 8007c5e:	1a9b      	subs	r3, r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	440b      	add	r3, r1
 8007c64:	333d      	adds	r3, #61	@ 0x3d
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	78fa      	ldrb	r2, [r7, #3]
 8007c6a:	f083 0301 	eor.w	r3, r3, #1
 8007c6e:	b2d8      	uxtb	r0, r3
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	1a9b      	subs	r3, r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	333d      	adds	r3, #61	@ 0x3d
 8007c7e:	4602      	mov	r2, r0
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	e127      	b.n	8007ed4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007c84:	78fa      	ldrb	r2, [r7, #3]
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	1a9b      	subs	r3, r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	334d      	adds	r3, #77	@ 0x4d
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d120      	bne.n	8007cdc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007c9a:	78fa      	ldrb	r2, [r7, #3]
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	011b      	lsls	r3, r3, #4
 8007ca2:	1a9b      	subs	r3, r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	334d      	adds	r3, #77	@ 0x4d
 8007caa:	2202      	movs	r2, #2
 8007cac:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007cae:	78fa      	ldrb	r2, [r7, #3]
 8007cb0:	6879      	ldr	r1, [r7, #4]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	011b      	lsls	r3, r3, #4
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	440b      	add	r3, r1
 8007cbc:	331b      	adds	r3, #27
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	f040 8107 	bne.w	8007ed4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	1a9b      	subs	r3, r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	334c      	adds	r3, #76	@ 0x4c
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	e0fb      	b.n	8007ed4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007cdc:	78fa      	ldrb	r2, [r7, #3]
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	334d      	adds	r3, #77	@ 0x4d
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	d13a      	bne.n	8007d68 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	011b      	lsls	r3, r3, #4
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	334d      	adds	r3, #77	@ 0x4d
 8007d02:	2202      	movs	r2, #2
 8007d04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	440b      	add	r3, r1
 8007d14:	334c      	adds	r3, #76	@ 0x4c
 8007d16:	2202      	movs	r2, #2
 8007d18:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007d1a:	78fa      	ldrb	r2, [r7, #3]
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	011b      	lsls	r3, r3, #4
 8007d22:	1a9b      	subs	r3, r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	440b      	add	r3, r1
 8007d28:	331b      	adds	r3, #27
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	f040 80d1 	bne.w	8007ed4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8007d32:	78fa      	ldrb	r2, [r7, #3]
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	4613      	mov	r3, r2
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	1a9b      	subs	r3, r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	440b      	add	r3, r1
 8007d40:	331b      	adds	r3, #27
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	78fa      	ldrb	r2, [r7, #3]
 8007d56:	0151      	lsls	r1, r2, #5
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	440a      	add	r2, r1
 8007d5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d64:	6053      	str	r3, [r2, #4]
 8007d66:	e0b5      	b.n	8007ed4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	334d      	adds	r3, #77	@ 0x4d
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d114      	bne.n	8007da8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007d7e:	78fa      	ldrb	r2, [r7, #3]
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	334d      	adds	r3, #77	@ 0x4d
 8007d8e:	2202      	movs	r2, #2
 8007d90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8007d92:	78fa      	ldrb	r2, [r7, #3]
 8007d94:	6879      	ldr	r1, [r7, #4]
 8007d96:	4613      	mov	r3, r2
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	1a9b      	subs	r3, r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	440b      	add	r3, r1
 8007da0:	334c      	adds	r3, #76	@ 0x4c
 8007da2:	2202      	movs	r2, #2
 8007da4:	701a      	strb	r2, [r3, #0]
 8007da6:	e095      	b.n	8007ed4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8007da8:	78fa      	ldrb	r2, [r7, #3]
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	4613      	mov	r3, r2
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	334d      	adds	r3, #77	@ 0x4d
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b06      	cmp	r3, #6
 8007dbc:	d114      	bne.n	8007de8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007dbe:	78fa      	ldrb	r2, [r7, #3]
 8007dc0:	6879      	ldr	r1, [r7, #4]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	011b      	lsls	r3, r3, #4
 8007dc6:	1a9b      	subs	r3, r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	440b      	add	r3, r1
 8007dcc:	334d      	adds	r3, #77	@ 0x4d
 8007dce:	2202      	movs	r2, #2
 8007dd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8007dd2:	78fa      	ldrb	r2, [r7, #3]
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	011b      	lsls	r3, r3, #4
 8007dda:	1a9b      	subs	r3, r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	440b      	add	r3, r1
 8007de0:	334c      	adds	r3, #76	@ 0x4c
 8007de2:	2205      	movs	r2, #5
 8007de4:	701a      	strb	r2, [r3, #0]
 8007de6:	e075      	b.n	8007ed4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007de8:	78fa      	ldrb	r2, [r7, #3]
 8007dea:	6879      	ldr	r1, [r7, #4]
 8007dec:	4613      	mov	r3, r2
 8007dee:	011b      	lsls	r3, r3, #4
 8007df0:	1a9b      	subs	r3, r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	440b      	add	r3, r1
 8007df6:	334d      	adds	r3, #77	@ 0x4d
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b07      	cmp	r3, #7
 8007dfc:	d00a      	beq.n	8007e14 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8007dfe:	78fa      	ldrb	r2, [r7, #3]
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	4613      	mov	r3, r2
 8007e04:	011b      	lsls	r3, r3, #4
 8007e06:	1a9b      	subs	r3, r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	440b      	add	r3, r1
 8007e0c:	334d      	adds	r3, #77	@ 0x4d
 8007e0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007e10:	2b09      	cmp	r3, #9
 8007e12:	d170      	bne.n	8007ef6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007e14:	78fa      	ldrb	r2, [r7, #3]
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	1a9b      	subs	r3, r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	440b      	add	r3, r1
 8007e22:	334d      	adds	r3, #77	@ 0x4d
 8007e24:	2202      	movs	r2, #2
 8007e26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007e28:	78fa      	ldrb	r2, [r7, #3]
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	440b      	add	r3, r1
 8007e36:	3344      	adds	r3, #68	@ 0x44
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	1c59      	adds	r1, r3, #1
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	011b      	lsls	r3, r3, #4
 8007e42:	1a9b      	subs	r3, r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4403      	add	r3, r0
 8007e48:	3344      	adds	r3, #68	@ 0x44
 8007e4a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007e4c:	78fa      	ldrb	r2, [r7, #3]
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	4613      	mov	r3, r2
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	1a9b      	subs	r3, r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	440b      	add	r3, r1
 8007e5a:	3344      	adds	r3, #68	@ 0x44
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d914      	bls.n	8007e8c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	6879      	ldr	r1, [r7, #4]
 8007e66:	4613      	mov	r3, r2
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	440b      	add	r3, r1
 8007e70:	3344      	adds	r3, #68	@ 0x44
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	011b      	lsls	r3, r3, #4
 8007e7e:	1a9b      	subs	r3, r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	440b      	add	r3, r1
 8007e84:	334c      	adds	r3, #76	@ 0x4c
 8007e86:	2204      	movs	r2, #4
 8007e88:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007e8a:	e022      	b.n	8007ed2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007e8c:	78fa      	ldrb	r2, [r7, #3]
 8007e8e:	6879      	ldr	r1, [r7, #4]
 8007e90:	4613      	mov	r3, r2
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	334c      	adds	r3, #76	@ 0x4c
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007eb6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ebe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ecc:	461a      	mov	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007ed2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007ed4:	78fa      	ldrb	r2, [r7, #3]
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	011b      	lsls	r3, r3, #4
 8007edc:	1a9b      	subs	r3, r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	334c      	adds	r3, #76	@ 0x4c
 8007ee4:	781a      	ldrb	r2, [r3, #0]
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f008 fcc4 	bl	8010878 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007ef0:	e002      	b.n	8007ef8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8007ef2:	bf00      	nop
 8007ef4:	e000      	b.n	8007ef8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8007ef6:	bf00      	nop
  }
}
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b08a      	sub	sp, #40	@ 0x28
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	0c5b      	lsrs	r3, r3, #17
 8007f24:	f003 030f 	and.w	r3, r3, #15
 8007f28:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	091b      	lsrs	r3, r3, #4
 8007f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f32:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d004      	beq.n	8007f44 <HCD_RXQLVL_IRQHandler+0x46>
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b05      	cmp	r3, #5
 8007f3e:	f000 80b6 	beq.w	80080ae <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007f42:	e0b7      	b.n	80080b4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 80b3 	beq.w	80080b2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8007f4c:	6879      	ldr	r1, [r7, #4]
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	4613      	mov	r3, r2
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	1a9b      	subs	r3, r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	332c      	adds	r3, #44	@ 0x2c
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 80a7 	beq.w	80080b2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	1a9b      	subs	r3, r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	440b      	add	r3, r1
 8007f72:	3338      	adds	r3, #56	@ 0x38
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	18d1      	adds	r1, r2, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	1a9b      	subs	r3, r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4403      	add	r3, r0
 8007f88:	3334      	adds	r3, #52	@ 0x34
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4299      	cmp	r1, r3
 8007f8e:	f200 8083 	bhi.w	8008098 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	011b      	lsls	r3, r3, #4
 8007f9e:	1a9b      	subs	r3, r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	440b      	add	r3, r1
 8007fa4:	332c      	adds	r3, #44	@ 0x2c
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	b292      	uxth	r2, r2
 8007fac:	4619      	mov	r1, r3
 8007fae:	f004 fd97 	bl	800cae0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	1a9b      	subs	r3, r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	332c      	adds	r3, #44	@ 0x2c
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	18d1      	adds	r1, r2, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	011b      	lsls	r3, r3, #4
 8007fd0:	1a9b      	subs	r3, r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4403      	add	r3, r0
 8007fd6:	332c      	adds	r3, #44	@ 0x2c
 8007fd8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	011b      	lsls	r3, r3, #4
 8007fe2:	1a9b      	subs	r3, r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	3338      	adds	r3, #56	@ 0x38
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	18d1      	adds	r1, r2, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	011b      	lsls	r3, r3, #4
 8007ff8:	1a9b      	subs	r3, r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4403      	add	r3, r0
 8007ffe:	3338      	adds	r3, #56	@ 0x38
 8008000:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	4413      	add	r3, r2
 800800a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	0cdb      	lsrs	r3, r3, #19
 8008012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008016:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	4613      	mov	r3, r2
 800801e:	011b      	lsls	r3, r3, #4
 8008020:	1a9b      	subs	r3, r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	440b      	add	r3, r1
 8008026:	3328      	adds	r3, #40	@ 0x28
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	4293      	cmp	r3, r2
 8008030:	d13f      	bne.n	80080b2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d03c      	beq.n	80080b2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	6a3b      	ldr	r3, [r7, #32]
 800803e:	4413      	add	r3, r2
 8008040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800804e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008056:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	4413      	add	r3, r2
 8008060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008064:	461a      	mov	r2, r3
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800806a:	6879      	ldr	r1, [r7, #4]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	4613      	mov	r3, r2
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	1a9b      	subs	r3, r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	440b      	add	r3, r1
 8008078:	333c      	adds	r3, #60	@ 0x3c
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	f083 0301 	eor.w	r3, r3, #1
 8008080:	b2d8      	uxtb	r0, r3
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	4613      	mov	r3, r2
 8008088:	011b      	lsls	r3, r3, #4
 800808a:	1a9b      	subs	r3, r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	440b      	add	r3, r1
 8008090:	333c      	adds	r3, #60	@ 0x3c
 8008092:	4602      	mov	r2, r0
 8008094:	701a      	strb	r2, [r3, #0]
      break;
 8008096:	e00c      	b.n	80080b2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	4613      	mov	r3, r2
 800809e:	011b      	lsls	r3, r3, #4
 80080a0:	1a9b      	subs	r3, r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	440b      	add	r3, r1
 80080a6:	334c      	adds	r3, #76	@ 0x4c
 80080a8:	2204      	movs	r2, #4
 80080aa:	701a      	strb	r2, [r3, #0]
      break;
 80080ac:	e001      	b.n	80080b2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80080ae:	bf00      	nop
 80080b0:	e000      	b.n	80080b4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80080b2:	bf00      	nop
  }
}
 80080b4:	bf00      	nop
 80080b6:	3728      	adds	r7, #40	@ 0x28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80080e8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d10b      	bne.n	800810c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d102      	bne.n	8008104 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f008 fb9e 	bl	8010840 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f043 0302 	orr.w	r3, r3, #2
 800810a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f003 0308 	and.w	r3, r3, #8
 8008112:	2b08      	cmp	r3, #8
 8008114:	d132      	bne.n	800817c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	f043 0308 	orr.w	r3, r3, #8
 800811c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b04      	cmp	r3, #4
 8008126:	d126      	bne.n	8008176 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	7a5b      	ldrb	r3, [r3, #9]
 800812c:	2b02      	cmp	r3, #2
 800812e:	d113      	bne.n	8008158 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008136:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800813a:	d106      	bne.n	800814a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2102      	movs	r1, #2
 8008142:	4618      	mov	r0, r3
 8008144:	f004 fe5c 	bl	800ce00 <USB_InitFSLSPClkSel>
 8008148:	e011      	b.n	800816e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2101      	movs	r1, #1
 8008150:	4618      	mov	r0, r3
 8008152:	f004 fe55 	bl	800ce00 <USB_InitFSLSPClkSel>
 8008156:	e00a      	b.n	800816e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	79db      	ldrb	r3, [r3, #7]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d106      	bne.n	800816e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008166:	461a      	mov	r2, r3
 8008168:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800816c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f008 fb90 	bl	8010894 <HAL_HCD_PortEnabled_Callback>
 8008174:	e002      	b.n	800817c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f008 fb9a 	bl	80108b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f003 0320 	and.w	r3, r3, #32
 8008182:	2b20      	cmp	r3, #32
 8008184:	d103      	bne.n	800818e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f043 0320 	orr.w	r3, r3, #32
 800818c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008194:	461a      	mov	r2, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6013      	str	r3, [r2, #0]
}
 800819a:	bf00      	nop
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
	...

080081a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e12b      	b.n	800840e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d106      	bne.n	80081d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7f9 ff2a 	bl	8002024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2224      	movs	r2, #36	@ 0x24
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 0201 	bic.w	r2, r2, #1
 80081e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008206:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008208:	f002 f8ac 	bl	800a364 <HAL_RCC_GetPCLK1Freq>
 800820c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	4a81      	ldr	r2, [pc, #516]	@ (8008418 <HAL_I2C_Init+0x274>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d807      	bhi.n	8008228 <HAL_I2C_Init+0x84>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4a80      	ldr	r2, [pc, #512]	@ (800841c <HAL_I2C_Init+0x278>)
 800821c:	4293      	cmp	r3, r2
 800821e:	bf94      	ite	ls
 8008220:	2301      	movls	r3, #1
 8008222:	2300      	movhi	r3, #0
 8008224:	b2db      	uxtb	r3, r3
 8008226:	e006      	b.n	8008236 <HAL_I2C_Init+0x92>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4a7d      	ldr	r2, [pc, #500]	@ (8008420 <HAL_I2C_Init+0x27c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	bf94      	ite	ls
 8008230:	2301      	movls	r3, #1
 8008232:	2300      	movhi	r3, #0
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e0e7      	b.n	800840e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4a78      	ldr	r2, [pc, #480]	@ (8008424 <HAL_I2C_Init+0x280>)
 8008242:	fba2 2303 	umull	r2, r3, r2, r3
 8008246:	0c9b      	lsrs	r3, r3, #18
 8008248:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	430a      	orrs	r2, r1
 800825c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	4a6a      	ldr	r2, [pc, #424]	@ (8008418 <HAL_I2C_Init+0x274>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d802      	bhi.n	8008278 <HAL_I2C_Init+0xd4>
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	3301      	adds	r3, #1
 8008276:	e009      	b.n	800828c <HAL_I2C_Init+0xe8>
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800827e:	fb02 f303 	mul.w	r3, r2, r3
 8008282:	4a69      	ldr	r2, [pc, #420]	@ (8008428 <HAL_I2C_Init+0x284>)
 8008284:	fba2 2303 	umull	r2, r3, r2, r3
 8008288:	099b      	lsrs	r3, r3, #6
 800828a:	3301      	adds	r3, #1
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	6812      	ldr	r2, [r2, #0]
 8008290:	430b      	orrs	r3, r1
 8008292:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800829e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	495c      	ldr	r1, [pc, #368]	@ (8008418 <HAL_I2C_Init+0x274>)
 80082a8:	428b      	cmp	r3, r1
 80082aa:	d819      	bhi.n	80082e0 <HAL_I2C_Init+0x13c>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	1e59      	subs	r1, r3, #1
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80082ba:	1c59      	adds	r1, r3, #1
 80082bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80082c0:	400b      	ands	r3, r1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00a      	beq.n	80082dc <HAL_I2C_Init+0x138>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	1e59      	subs	r1, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	005b      	lsls	r3, r3, #1
 80082d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80082d4:	3301      	adds	r3, #1
 80082d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082da:	e051      	b.n	8008380 <HAL_I2C_Init+0x1dc>
 80082dc:	2304      	movs	r3, #4
 80082de:	e04f      	b.n	8008380 <HAL_I2C_Init+0x1dc>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d111      	bne.n	800830c <HAL_I2C_Init+0x168>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	1e58      	subs	r0, r3, #1
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6859      	ldr	r1, [r3, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	440b      	add	r3, r1
 80082f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80082fa:	3301      	adds	r3, #1
 80082fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008300:	2b00      	cmp	r3, #0
 8008302:	bf0c      	ite	eq
 8008304:	2301      	moveq	r3, #1
 8008306:	2300      	movne	r3, #0
 8008308:	b2db      	uxtb	r3, r3
 800830a:	e012      	b.n	8008332 <HAL_I2C_Init+0x18e>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	1e58      	subs	r0, r3, #1
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6859      	ldr	r1, [r3, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	440b      	add	r3, r1
 800831a:	0099      	lsls	r1, r3, #2
 800831c:	440b      	add	r3, r1
 800831e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008322:	3301      	adds	r3, #1
 8008324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008328:	2b00      	cmp	r3, #0
 800832a:	bf0c      	ite	eq
 800832c:	2301      	moveq	r3, #1
 800832e:	2300      	movne	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <HAL_I2C_Init+0x196>
 8008336:	2301      	movs	r3, #1
 8008338:	e022      	b.n	8008380 <HAL_I2C_Init+0x1dc>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10e      	bne.n	8008360 <HAL_I2C_Init+0x1bc>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	1e58      	subs	r0, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6859      	ldr	r1, [r3, #4]
 800834a:	460b      	mov	r3, r1
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	440b      	add	r3, r1
 8008350:	fbb0 f3f3 	udiv	r3, r0, r3
 8008354:	3301      	adds	r3, #1
 8008356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800835a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800835e:	e00f      	b.n	8008380 <HAL_I2C_Init+0x1dc>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	1e58      	subs	r0, r3, #1
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6859      	ldr	r1, [r3, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	0099      	lsls	r1, r3, #2
 8008370:	440b      	add	r3, r1
 8008372:	fbb0 f3f3 	udiv	r3, r0, r3
 8008376:	3301      	adds	r3, #1
 8008378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800837c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	6809      	ldr	r1, [r1, #0]
 8008384:	4313      	orrs	r3, r2
 8008386:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	69da      	ldr	r2, [r3, #28]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	431a      	orrs	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80083ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	6911      	ldr	r1, [r2, #16]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	68d2      	ldr	r2, [r2, #12]
 80083ba:	4311      	orrs	r1, r2
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	6812      	ldr	r2, [r2, #0]
 80083c0:	430b      	orrs	r3, r1
 80083c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	695a      	ldr	r2, [r3, #20]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0201 	orr.w	r2, r2, #1
 80083ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	000186a0 	.word	0x000186a0
 800841c:	001e847f 	.word	0x001e847f
 8008420:	003d08ff 	.word	0x003d08ff
 8008424:	431bde83 	.word	0x431bde83
 8008428:	10624dd3 	.word	0x10624dd3

0800842c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e021      	b.n	8008482 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2224      	movs	r2, #36	@ 0x24
 8008442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 0201 	bic.w	r2, r2, #1
 8008454:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7f9 fe4e 	bl	80020f8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af02      	add	r7, sp, #8
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	4608      	mov	r0, r1
 8008496:	4611      	mov	r1, r2
 8008498:	461a      	mov	r2, r3
 800849a:	4603      	mov	r3, r0
 800849c:	817b      	strh	r3, [r7, #10]
 800849e:	460b      	mov	r3, r1
 80084a0:	813b      	strh	r3, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80084a6:	f7fc f9db 	bl	8004860 <HAL_GetTick>
 80084aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b20      	cmp	r3, #32
 80084b6:	f040 80d9 	bne.w	800866c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	2319      	movs	r3, #25
 80084c0:	2201      	movs	r2, #1
 80084c2:	496d      	ldr	r1, [pc, #436]	@ (8008678 <HAL_I2C_Mem_Write+0x1ec>)
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 fc99 	bl	8008dfc <I2C_WaitOnFlagUntilTimeout>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80084d0:	2302      	movs	r3, #2
 80084d2:	e0cc      	b.n	800866e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d101      	bne.n	80084e2 <HAL_I2C_Mem_Write+0x56>
 80084de:	2302      	movs	r3, #2
 80084e0:	e0c5      	b.n	800866e <HAL_I2C_Mem_Write+0x1e2>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d007      	beq.n	8008508 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f042 0201 	orr.w	r2, r2, #1
 8008506:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008516:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2221      	movs	r2, #33	@ 0x21
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2240      	movs	r2, #64	@ 0x40
 8008524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6a3a      	ldr	r2, [r7, #32]
 8008532:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008538:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800853e:	b29a      	uxth	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4a4d      	ldr	r2, [pc, #308]	@ (800867c <HAL_I2C_Mem_Write+0x1f0>)
 8008548:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800854a:	88f8      	ldrh	r0, [r7, #6]
 800854c:	893a      	ldrh	r2, [r7, #8]
 800854e:	8979      	ldrh	r1, [r7, #10]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	9301      	str	r3, [sp, #4]
 8008554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	4603      	mov	r3, r0
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 fad0 	bl	8008b00 <I2C_RequestMemoryWrite>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d052      	beq.n	800860c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e081      	b.n	800866e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 fd5e 	bl	8009030 <I2C_WaitOnTXEFlagUntilTimeout>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00d      	beq.n	8008596 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857e:	2b04      	cmp	r3, #4
 8008580:	d107      	bne.n	8008592 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008590:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e06b      	b.n	800866e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800859a:	781a      	ldrb	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085bc:	b29b      	uxth	r3, r3
 80085be:	3b01      	subs	r3, #1
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	d11b      	bne.n	800860c <HAL_I2C_Mem_Write+0x180>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d017      	beq.n	800860c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e0:	781a      	ldrb	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085f6:	3b01      	subs	r3, #1
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008602:	b29b      	uxth	r3, r3
 8008604:	3b01      	subs	r3, #1
 8008606:	b29a      	uxth	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1aa      	bne.n	800856a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 fd51 	bl	80090c0 <I2C_WaitOnBTFFlagUntilTimeout>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00d      	beq.n	8008640 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008628:	2b04      	cmp	r3, #4
 800862a:	d107      	bne.n	800863c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800863a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e016      	b.n	800866e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800864e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2220      	movs	r2, #32
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	e000      	b.n	800866e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800866c:	2302      	movs	r3, #2
  }
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	00100002 	.word	0x00100002
 800867c:	ffff0000 	.word	0xffff0000

08008680 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08c      	sub	sp, #48	@ 0x30
 8008684:	af02      	add	r7, sp, #8
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	4608      	mov	r0, r1
 800868a:	4611      	mov	r1, r2
 800868c:	461a      	mov	r2, r3
 800868e:	4603      	mov	r3, r0
 8008690:	817b      	strh	r3, [r7, #10]
 8008692:	460b      	mov	r3, r1
 8008694:	813b      	strh	r3, [r7, #8]
 8008696:	4613      	mov	r3, r2
 8008698:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800869a:	f7fc f8e1 	bl	8004860 <HAL_GetTick>
 800869e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b20      	cmp	r3, #32
 80086aa:	f040 8214 	bne.w	8008ad6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80086ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b0:	9300      	str	r3, [sp, #0]
 80086b2:	2319      	movs	r3, #25
 80086b4:	2201      	movs	r2, #1
 80086b6:	497b      	ldr	r1, [pc, #492]	@ (80088a4 <HAL_I2C_Mem_Read+0x224>)
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 fb9f 	bl	8008dfc <I2C_WaitOnFlagUntilTimeout>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80086c4:	2302      	movs	r3, #2
 80086c6:	e207      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d101      	bne.n	80086d6 <HAL_I2C_Mem_Read+0x56>
 80086d2:	2302      	movs	r3, #2
 80086d4:	e200      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x458>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d007      	beq.n	80086fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0201 	orr.w	r2, r2, #1
 80086fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800870a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2222      	movs	r2, #34	@ 0x22
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2240      	movs	r2, #64	@ 0x40
 8008718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008726:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800872c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008732:	b29a      	uxth	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	4a5b      	ldr	r2, [pc, #364]	@ (80088a8 <HAL_I2C_Mem_Read+0x228>)
 800873c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800873e:	88f8      	ldrh	r0, [r7, #6]
 8008740:	893a      	ldrh	r2, [r7, #8]
 8008742:	8979      	ldrh	r1, [r7, #10]
 8008744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	4603      	mov	r3, r0
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 fa6c 	bl	8008c2c <I2C_RequestMemoryRead>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e1bc      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008762:	2b00      	cmp	r3, #0
 8008764:	d113      	bne.n	800878e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008766:	2300      	movs	r3, #0
 8008768:	623b      	str	r3, [r7, #32]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	623b      	str	r3, [r7, #32]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	623b      	str	r3, [r7, #32]
 800877a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	e190      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008792:	2b01      	cmp	r3, #1
 8008794:	d11b      	bne.n	80087ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087a6:	2300      	movs	r3, #0
 80087a8:	61fb      	str	r3, [r7, #28]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	61fb      	str	r3, [r7, #28]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	61fb      	str	r3, [r7, #28]
 80087ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	e170      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d11b      	bne.n	800880e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087f6:	2300      	movs	r3, #0
 80087f8:	61bb      	str	r3, [r7, #24]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	61bb      	str	r3, [r7, #24]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	61bb      	str	r3, [r7, #24]
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	e150      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800880e:	2300      	movs	r3, #0
 8008810:	617b      	str	r3, [r7, #20]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	617b      	str	r3, [r7, #20]
 8008822:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008824:	e144      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800882a:	2b03      	cmp	r3, #3
 800882c:	f200 80f1 	bhi.w	8008a12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008834:	2b01      	cmp	r3, #1
 8008836:	d123      	bne.n	8008880 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800883a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 fc87 	bl	8009150 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e145      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	691a      	ldr	r2, [r3, #16]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008856:	b2d2      	uxtb	r2, r2
 8008858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008868:	3b01      	subs	r3, #1
 800886a:	b29a      	uxth	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008874:	b29b      	uxth	r3, r3
 8008876:	3b01      	subs	r3, #1
 8008878:	b29a      	uxth	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800887e:	e117      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008884:	2b02      	cmp	r3, #2
 8008886:	d14e      	bne.n	8008926 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888e:	2200      	movs	r2, #0
 8008890:	4906      	ldr	r1, [pc, #24]	@ (80088ac <HAL_I2C_Mem_Read+0x22c>)
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 fab2 	bl	8008dfc <I2C_WaitOnFlagUntilTimeout>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d008      	beq.n	80088b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e11a      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x458>
 80088a2:	bf00      	nop
 80088a4:	00100002 	.word	0x00100002
 80088a8:	ffff0000 	.word	0xffff0000
 80088ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	691a      	ldr	r2, [r3, #16]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088dc:	3b01      	subs	r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	3b01      	subs	r3, #1
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	691a      	ldr	r2, [r3, #16]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088fc:	b2d2      	uxtb	r2, r2
 80088fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008904:	1c5a      	adds	r2, r3, #1
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800890e:	3b01      	subs	r3, #1
 8008910:	b29a      	uxth	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800891a:	b29b      	uxth	r3, r3
 800891c:	3b01      	subs	r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008924:	e0c4      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892c:	2200      	movs	r2, #0
 800892e:	496c      	ldr	r1, [pc, #432]	@ (8008ae0 <HAL_I2C_Mem_Read+0x460>)
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 fa63 	bl	8008dfc <I2C_WaitOnFlagUntilTimeout>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e0cb      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800894e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	691a      	ldr	r2, [r3, #16]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895a:	b2d2      	uxtb	r2, r2
 800895c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008962:	1c5a      	adds	r2, r3, #1
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800896c:	3b01      	subs	r3, #1
 800896e:	b29a      	uxth	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008978:	b29b      	uxth	r3, r3
 800897a:	3b01      	subs	r3, #1
 800897c:	b29a      	uxth	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008988:	2200      	movs	r2, #0
 800898a:	4955      	ldr	r1, [pc, #340]	@ (8008ae0 <HAL_I2C_Mem_Read+0x460>)
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f000 fa35 	bl	8008dfc <I2C_WaitOnFlagUntilTimeout>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e09d      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	691a      	ldr	r2, [r3, #16]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b6:	b2d2      	uxtb	r2, r2
 80089b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089be:	1c5a      	adds	r2, r3, #1
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089c8:	3b01      	subs	r3, #1
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	3b01      	subs	r3, #1
 80089d8:	b29a      	uxth	r2, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	691a      	ldr	r2, [r3, #16]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e8:	b2d2      	uxtb	r2, r2
 80089ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089fa:	3b01      	subs	r3, #1
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008a10:	e04e      	b.n	8008ab0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 fb9a 	bl	8009150 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e058      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	691a      	ldr	r2, [r3, #16]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a42:	3b01      	subs	r3, #1
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	3b01      	subs	r3, #1
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d124      	bne.n	8008ab0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d107      	bne.n	8008a7e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a7c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	691a      	ldr	r2, [r3, #16]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a88:	b2d2      	uxtb	r2, r2
 8008a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f47f aeb6 	bne.w	8008826 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2220      	movs	r2, #32
 8008abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e000      	b.n	8008ad8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008ad6:	2302      	movs	r3, #2
  }
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3728      	adds	r7, #40	@ 0x28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	00010004 	.word	0x00010004

08008ae4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008af2:	b2db      	uxtb	r3, r3
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b088      	sub	sp, #32
 8008b04:	af02      	add	r7, sp, #8
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	4608      	mov	r0, r1
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	4603      	mov	r3, r0
 8008b10:	817b      	strh	r3, [r7, #10]
 8008b12:	460b      	mov	r3, r1
 8008b14:	813b      	strh	r3, [r7, #8]
 8008b16:	4613      	mov	r3, r2
 8008b18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 f960 	bl	8008dfc <I2C_WaitOnFlagUntilTimeout>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00d      	beq.n	8008b5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b50:	d103      	bne.n	8008b5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e05f      	b.n	8008c1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b5e:	897b      	ldrh	r3, [r7, #10]
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	461a      	mov	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008b6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b70:	6a3a      	ldr	r2, [r7, #32]
 8008b72:	492d      	ldr	r1, [pc, #180]	@ (8008c28 <I2C_RequestMemoryWrite+0x128>)
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 f9bb 	bl	8008ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e04c      	b.n	8008c1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	617b      	str	r3, [r7, #20]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	617b      	str	r3, [r7, #20]
 8008b98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b9c:	6a39      	ldr	r1, [r7, #32]
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 fa46 	bl	8009030 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00d      	beq.n	8008bc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	d107      	bne.n	8008bc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e02b      	b.n	8008c1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bc6:	88fb      	ldrh	r3, [r7, #6]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d105      	bne.n	8008bd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bcc:	893b      	ldrh	r3, [r7, #8]
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	611a      	str	r2, [r3, #16]
 8008bd6:	e021      	b.n	8008c1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008bd8:	893b      	ldrh	r3, [r7, #8]
 8008bda:	0a1b      	lsrs	r3, r3, #8
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008be8:	6a39      	ldr	r1, [r7, #32]
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 fa20 	bl	8009030 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00d      	beq.n	8008c12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfa:	2b04      	cmp	r3, #4
 8008bfc:	d107      	bne.n	8008c0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e005      	b.n	8008c1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c12:	893b      	ldrh	r3, [r7, #8]
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	00010002 	.word	0x00010002

08008c2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af02      	add	r7, sp, #8
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	4608      	mov	r0, r1
 8008c36:	4611      	mov	r1, r2
 8008c38:	461a      	mov	r2, r3
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	817b      	strh	r3, [r7, #10]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	813b      	strh	r3, [r7, #8]
 8008c42:	4613      	mov	r3, r2
 8008c44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008c54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 f8c2 	bl	8008dfc <I2C_WaitOnFlagUntilTimeout>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00d      	beq.n	8008c9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c8c:	d103      	bne.n	8008c96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e0aa      	b.n	8008df0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c9a:	897b      	ldrh	r3, [r7, #10]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008ca8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cac:	6a3a      	ldr	r2, [r7, #32]
 8008cae:	4952      	ldr	r1, [pc, #328]	@ (8008df8 <I2C_RequestMemoryRead+0x1cc>)
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 f91d 	bl	8008ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e097      	b.n	8008df0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	617b      	str	r3, [r7, #20]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	617b      	str	r3, [r7, #20]
 8008cd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cd8:	6a39      	ldr	r1, [r7, #32]
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 f9a8 	bl	8009030 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00d      	beq.n	8008d02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d107      	bne.n	8008cfe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e076      	b.n	8008df0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d02:	88fb      	ldrh	r3, [r7, #6]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d105      	bne.n	8008d14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d08:	893b      	ldrh	r3, [r7, #8]
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	611a      	str	r2, [r3, #16]
 8008d12:	e021      	b.n	8008d58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008d14:	893b      	ldrh	r3, [r7, #8]
 8008d16:	0a1b      	lsrs	r3, r3, #8
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d24:	6a39      	ldr	r1, [r7, #32]
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f000 f982 	bl	8009030 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00d      	beq.n	8008d4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d36:	2b04      	cmp	r3, #4
 8008d38:	d107      	bne.n	8008d4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e050      	b.n	8008df0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008d4e:	893b      	ldrh	r3, [r7, #8]
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d5a:	6a39      	ldr	r1, [r7, #32]
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 f967 	bl	8009030 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00d      	beq.n	8008d84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d107      	bne.n	8008d80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e035      	b.n	8008df0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 f82b 	bl	8008dfc <I2C_WaitOnFlagUntilTimeout>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00d      	beq.n	8008dc8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dba:	d103      	bne.n	8008dc4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008dc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e013      	b.n	8008df0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008dc8:	897b      	ldrh	r3, [r7, #10]
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	f043 0301 	orr.w	r3, r3, #1
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dda:	6a3a      	ldr	r2, [r7, #32]
 8008ddc:	4906      	ldr	r1, [pc, #24]	@ (8008df8 <I2C_RequestMemoryRead+0x1cc>)
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 f886 	bl	8008ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e000      	b.n	8008df0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	00010002 	.word	0x00010002

08008dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	603b      	str	r3, [r7, #0]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e0c:	e048      	b.n	8008ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e14:	d044      	beq.n	8008ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e16:	f7fb fd23 	bl	8004860 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d302      	bcc.n	8008e2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d139      	bne.n	8008ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	0c1b      	lsrs	r3, r3, #16
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d10d      	bne.n	8008e52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	43da      	mvns	r2, r3
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	4013      	ands	r3, r2
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	bf0c      	ite	eq
 8008e48:	2301      	moveq	r3, #1
 8008e4a:	2300      	movne	r3, #0
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	461a      	mov	r2, r3
 8008e50:	e00c      	b.n	8008e6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	43da      	mvns	r2, r3
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	bf0c      	ite	eq
 8008e64:	2301      	moveq	r3, #1
 8008e66:	2300      	movne	r3, #0
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d116      	bne.n	8008ea0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e8c:	f043 0220 	orr.w	r2, r3, #32
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e023      	b.n	8008ee8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	0c1b      	lsrs	r3, r3, #16
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d10d      	bne.n	8008ec6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	43da      	mvns	r2, r3
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	bf0c      	ite	eq
 8008ebc:	2301      	moveq	r3, #1
 8008ebe:	2300      	movne	r3, #0
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	e00c      	b.n	8008ee0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	43da      	mvns	r2, r3
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bf0c      	ite	eq
 8008ed8:	2301      	moveq	r3, #1
 8008eda:	2300      	movne	r3, #0
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	461a      	mov	r2, r3
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d093      	beq.n	8008e0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008efe:	e071      	b.n	8008fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f0e:	d123      	bne.n	8008f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008f28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2220      	movs	r2, #32
 8008f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f44:	f043 0204 	orr.w	r2, r3, #4
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e067      	b.n	8009028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5e:	d041      	beq.n	8008fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f60:	f7fb fc7e 	bl	8004860 <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d302      	bcc.n	8008f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d136      	bne.n	8008fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	0c1b      	lsrs	r3, r3, #16
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d10c      	bne.n	8008f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	43da      	mvns	r2, r3
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	bf14      	ite	ne
 8008f92:	2301      	movne	r3, #1
 8008f94:	2300      	moveq	r3, #0
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	e00b      	b.n	8008fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	43da      	mvns	r2, r3
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bf14      	ite	ne
 8008fac:	2301      	movne	r3, #1
 8008fae:	2300      	moveq	r3, #0
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d016      	beq.n	8008fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd0:	f043 0220 	orr.w	r2, r3, #32
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e021      	b.n	8009028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	0c1b      	lsrs	r3, r3, #16
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d10c      	bne.n	8009008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	43da      	mvns	r2, r3
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bf14      	ite	ne
 8009000:	2301      	movne	r3, #1
 8009002:	2300      	moveq	r3, #0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	e00b      	b.n	8009020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	43da      	mvns	r2, r3
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	4013      	ands	r3, r2
 8009014:	b29b      	uxth	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	bf14      	ite	ne
 800901a:	2301      	movne	r3, #1
 800901c:	2300      	moveq	r3, #0
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	f47f af6d 	bne.w	8008f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800903c:	e034      	b.n	80090a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 f8e3 	bl	800920a <I2C_IsAcknowledgeFailed>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e034      	b.n	80090b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009054:	d028      	beq.n	80090a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009056:	f7fb fc03 	bl	8004860 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	429a      	cmp	r2, r3
 8009064:	d302      	bcc.n	800906c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d11d      	bne.n	80090a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009076:	2b80      	cmp	r3, #128	@ 0x80
 8009078:	d016      	beq.n	80090a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2220      	movs	r2, #32
 8009084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009094:	f043 0220 	orr.w	r2, r3, #32
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e007      	b.n	80090b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090b2:	2b80      	cmp	r3, #128	@ 0x80
 80090b4:	d1c3      	bne.n	800903e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80090cc:	e034      	b.n	8009138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 f89b 	bl	800920a <I2C_IsAcknowledgeFailed>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e034      	b.n	8009148 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e4:	d028      	beq.n	8009138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090e6:	f7fb fbbb 	bl	8004860 <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d302      	bcc.n	80090fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d11d      	bne.n	8009138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	f003 0304 	and.w	r3, r3, #4
 8009106:	2b04      	cmp	r3, #4
 8009108:	d016      	beq.n	8009138 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2220      	movs	r2, #32
 8009114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009124:	f043 0220 	orr.w	r2, r3, #32
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e007      	b.n	8009148 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b04      	cmp	r3, #4
 8009144:	d1c3      	bne.n	80090ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800915c:	e049      	b.n	80091f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	2b10      	cmp	r3, #16
 800916a:	d119      	bne.n	80091a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f06f 0210 	mvn.w	r2, #16
 8009174:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2220      	movs	r2, #32
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e030      	b.n	8009202 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a0:	f7fb fb5e 	bl	8004860 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d302      	bcc.n	80091b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d11d      	bne.n	80091f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c0:	2b40      	cmp	r3, #64	@ 0x40
 80091c2:	d016      	beq.n	80091f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2220      	movs	r2, #32
 80091ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091de:	f043 0220 	orr.w	r2, r3, #32
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e007      	b.n	8009202 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091fc:	2b40      	cmp	r3, #64	@ 0x40
 80091fe:	d1ae      	bne.n	800915e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800921c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009220:	d11b      	bne.n	800925a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800922a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2220      	movs	r2, #32
 8009236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009246:	f043 0204 	orr.w	r2, r3, #4
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e000      	b.n	800925c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b20      	cmp	r3, #32
 800927c:	d129      	bne.n	80092d2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2224      	movs	r2, #36	@ 0x24
 8009282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0201 	bic.w	r2, r2, #1
 8009294:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0210 	bic.w	r2, r2, #16
 80092a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	430a      	orrs	r2, r1
 80092b4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f042 0201 	orr.w	r2, r2, #1
 80092c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	e000      	b.n	80092d4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80092d2:	2302      	movs	r3, #2
  }
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80092ea:	2300      	movs	r3, #0
 80092ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b20      	cmp	r3, #32
 80092f8:	d12a      	bne.n	8009350 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2224      	movs	r2, #36	@ 0x24
 80092fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f022 0201 	bic.w	r2, r2, #1
 8009310:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009318:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800931a:	89fb      	ldrh	r3, [r7, #14]
 800931c:	f023 030f 	bic.w	r3, r3, #15
 8009320:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	b29a      	uxth	r2, r3
 8009326:	89fb      	ldrh	r3, [r7, #14]
 8009328:	4313      	orrs	r3, r2
 800932a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	89fa      	ldrh	r2, [r7, #14]
 8009332:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f042 0201 	orr.w	r2, r2, #1
 8009342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2220      	movs	r2, #32
 8009348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	e000      	b.n	8009352 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009350:	2302      	movs	r3, #2
  }
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
	...

08009360 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e0bf      	b.n	80094f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d106      	bne.n	800938c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7f8 fedc 	bl	8002144 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80093a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6999      	ldr	r1, [r3, #24]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80093b8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	430a      	orrs	r2, r1
 80093c6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6899      	ldr	r1, [r3, #8]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	4b4a      	ldr	r3, [pc, #296]	@ (80094fc <HAL_LTDC_Init+0x19c>)
 80093d4:	400b      	ands	r3, r1
 80093d6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	041b      	lsls	r3, r3, #16
 80093de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6899      	ldr	r1, [r3, #8]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	699a      	ldr	r2, [r3, #24]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	431a      	orrs	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	430a      	orrs	r2, r1
 80093f4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68d9      	ldr	r1, [r3, #12]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	4b3e      	ldr	r3, [pc, #248]	@ (80094fc <HAL_LTDC_Init+0x19c>)
 8009402:	400b      	ands	r3, r1
 8009404:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	041b      	lsls	r3, r3, #16
 800940c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68d9      	ldr	r1, [r3, #12]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a1a      	ldr	r2, [r3, #32]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	431a      	orrs	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	430a      	orrs	r2, r1
 8009422:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6919      	ldr	r1, [r3, #16]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	4b33      	ldr	r3, [pc, #204]	@ (80094fc <HAL_LTDC_Init+0x19c>)
 8009430:	400b      	ands	r3, r1
 8009432:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009438:	041b      	lsls	r3, r3, #16
 800943a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6919      	ldr	r1, [r3, #16]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	431a      	orrs	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	430a      	orrs	r2, r1
 8009450:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	6959      	ldr	r1, [r3, #20]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	4b27      	ldr	r3, [pc, #156]	@ (80094fc <HAL_LTDC_Init+0x19c>)
 800945e:	400b      	ands	r3, r1
 8009460:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009466:	041b      	lsls	r3, r3, #16
 8009468:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6959      	ldr	r1, [r3, #20]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	431a      	orrs	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	430a      	orrs	r2, r1
 800947e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009486:	021b      	lsls	r3, r3, #8
 8009488:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009490:	041b      	lsls	r3, r3, #16
 8009492:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80094a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80094b6:	431a      	orrs	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0206 	orr.w	r2, r2, #6
 80094ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	699a      	ldr	r2, [r3, #24]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f042 0201 	orr.w	r2, r2, #1
 80094de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	f000f800 	.word	0xf000f800

08009500 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800950e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009516:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f003 0304 	and.w	r3, r3, #4
 800951e:	2b00      	cmp	r3, #0
 8009520:	d023      	beq.n	800956a <HAL_LTDC_IRQHandler+0x6a>
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	f003 0304 	and.w	r3, r3, #4
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01e      	beq.n	800956a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 0204 	bic.w	r2, r2, #4
 800953a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2204      	movs	r2, #4
 8009542:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800954a:	f043 0201 	orr.w	r2, r3, #1
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2204      	movs	r2, #4
 8009558:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f86f 	bl	8009648 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f003 0302 	and.w	r3, r3, #2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d023      	beq.n	80095bc <HAL_LTDC_IRQHandler+0xbc>
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d01e      	beq.n	80095bc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f022 0202 	bic.w	r2, r2, #2
 800958c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2202      	movs	r2, #2
 8009594:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800959c:	f043 0202 	orr.w	r2, r3, #2
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2204      	movs	r2, #4
 80095aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f846 	bl	8009648 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d01b      	beq.n	80095fe <HAL_LTDC_IRQHandler+0xfe>
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d016      	beq.n	80095fe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f022 0201 	bic.w	r2, r2, #1
 80095de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2201      	movs	r2, #1
 80095e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f82f 	bl	800965c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f003 0308 	and.w	r3, r3, #8
 8009604:	2b00      	cmp	r3, #0
 8009606:	d01b      	beq.n	8009640 <HAL_LTDC_IRQHandler+0x140>
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f003 0308 	and.w	r3, r3, #8
 800960e:	2b00      	cmp	r3, #0
 8009610:	d016      	beq.n	8009640 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f022 0208 	bic.w	r2, r2, #8
 8009620:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2208      	movs	r2, #8
 8009628:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f818 	bl	8009670 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009640:	bf00      	nop
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009684:	b5b0      	push	{r4, r5, r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009696:	2b01      	cmp	r3, #1
 8009698:	d101      	bne.n	800969e <HAL_LTDC_ConfigLayer+0x1a>
 800969a:	2302      	movs	r3, #2
 800969c:	e02c      	b.n	80096f8 <HAL_LTDC_ConfigLayer+0x74>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2202      	movs	r2, #2
 80096aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2134      	movs	r1, #52	@ 0x34
 80096b4:	fb01 f303 	mul.w	r3, r1, r3
 80096b8:	4413      	add	r3, r2
 80096ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	4614      	mov	r4, r2
 80096c2:	461d      	mov	r5, r3
 80096c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80096c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80096cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	68b9      	ldr	r1, [r7, #8]
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 f83b 	bl	8009754 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2201      	movs	r2, #1
 80096e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bdb0      	pop	{r4, r5, r7, pc}

08009700 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800970e:	2b01      	cmp	r3, #1
 8009710:	d101      	bne.n	8009716 <HAL_LTDC_EnableDither+0x16>
 8009712:	2302      	movs	r3, #2
 8009714:	e016      	b.n	8009744 <HAL_LTDC_EnableDither+0x44>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2202      	movs	r2, #2
 8009722:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8009726:	4b0a      	ldr	r3, [pc, #40]	@ (8009750 <HAL_LTDC_EnableDither+0x50>)
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	4a09      	ldr	r2, [pc, #36]	@ (8009750 <HAL_LTDC_EnableDither+0x50>)
 800972c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009730:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	40016800 	.word	0x40016800

08009754 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009754:	b480      	push	{r7}
 8009756:	b089      	sub	sp, #36	@ 0x24
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	0c1b      	lsrs	r3, r3, #16
 800976c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009770:	4413      	add	r3, r2
 8009772:	041b      	lsls	r3, r3, #16
 8009774:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	01db      	lsls	r3, r3, #7
 8009780:	4413      	add	r3, r2
 8009782:	3384      	adds	r3, #132	@ 0x84
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	6812      	ldr	r2, [r2, #0]
 800978a:	4611      	mov	r1, r2
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	01d2      	lsls	r2, r2, #7
 8009790:	440a      	add	r2, r1
 8009792:	3284      	adds	r2, #132	@ 0x84
 8009794:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009798:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	0c1b      	lsrs	r3, r3, #16
 80097a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80097aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80097ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4619      	mov	r1, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	01db      	lsls	r3, r3, #7
 80097b8:	440b      	add	r3, r1
 80097ba:	3384      	adds	r3, #132	@ 0x84
 80097bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80097c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	68da      	ldr	r2, [r3, #12]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097d2:	4413      	add	r3, r2
 80097d4:	041b      	lsls	r3, r3, #16
 80097d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	01db      	lsls	r3, r3, #7
 80097e2:	4413      	add	r3, r2
 80097e4:	3384      	adds	r3, #132	@ 0x84
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	6812      	ldr	r2, [r2, #0]
 80097ec:	4611      	mov	r1, r2
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	01d2      	lsls	r2, r2, #7
 80097f2:	440a      	add	r2, r1
 80097f4:	3284      	adds	r2, #132	@ 0x84
 80097f6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80097fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	689a      	ldr	r2, [r3, #8]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800980a:	4413      	add	r3, r2
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4619      	mov	r1, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	01db      	lsls	r3, r3, #7
 8009818:	440b      	add	r3, r1
 800981a:	3384      	adds	r3, #132	@ 0x84
 800981c:	4619      	mov	r1, r3
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	4313      	orrs	r3, r2
 8009822:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	461a      	mov	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	01db      	lsls	r3, r3, #7
 800982e:	4413      	add	r3, r2
 8009830:	3384      	adds	r3, #132	@ 0x84
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	6812      	ldr	r2, [r2, #0]
 8009838:	4611      	mov	r1, r2
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	01d2      	lsls	r2, r2, #7
 800983e:	440a      	add	r2, r1
 8009840:	3284      	adds	r2, #132	@ 0x84
 8009842:	f023 0307 	bic.w	r3, r3, #7
 8009846:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	461a      	mov	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	01db      	lsls	r3, r3, #7
 8009852:	4413      	add	r3, r2
 8009854:	3384      	adds	r3, #132	@ 0x84
 8009856:	461a      	mov	r2, r3
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009864:	021b      	lsls	r3, r3, #8
 8009866:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800986e:	041b      	lsls	r3, r3, #16
 8009870:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	061b      	lsls	r3, r3, #24
 8009878:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	01db      	lsls	r3, r3, #7
 8009884:	4413      	add	r3, r2
 8009886:	3384      	adds	r3, #132	@ 0x84
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	01db      	lsls	r3, r3, #7
 8009894:	4413      	add	r3, r2
 8009896:	3384      	adds	r3, #132	@ 0x84
 8009898:	461a      	mov	r2, r3
 800989a:	2300      	movs	r3, #0
 800989c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80098a4:	461a      	mov	r2, r3
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	431a      	orrs	r2, r3
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	431a      	orrs	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4619      	mov	r1, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	01db      	lsls	r3, r3, #7
 80098b8:	440b      	add	r3, r1
 80098ba:	3384      	adds	r3, #132	@ 0x84
 80098bc:	4619      	mov	r1, r3
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	01db      	lsls	r3, r3, #7
 80098ce:	4413      	add	r3, r2
 80098d0:	3384      	adds	r3, #132	@ 0x84
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	6812      	ldr	r2, [r2, #0]
 80098d8:	4611      	mov	r1, r2
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	01d2      	lsls	r2, r2, #7
 80098de:	440a      	add	r2, r1
 80098e0:	3284      	adds	r2, #132	@ 0x84
 80098e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80098e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	461a      	mov	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	01db      	lsls	r3, r3, #7
 80098f2:	4413      	add	r3, r2
 80098f4:	3384      	adds	r3, #132	@ 0x84
 80098f6:	461a      	mov	r2, r3
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	01db      	lsls	r3, r3, #7
 8009908:	4413      	add	r3, r2
 800990a:	3384      	adds	r3, #132	@ 0x84
 800990c:	69db      	ldr	r3, [r3, #28]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	6812      	ldr	r2, [r2, #0]
 8009912:	4611      	mov	r1, r2
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	01d2      	lsls	r2, r2, #7
 8009918:	440a      	add	r2, r1
 800991a:	3284      	adds	r2, #132	@ 0x84
 800991c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8009920:	f023 0307 	bic.w	r3, r3, #7
 8009924:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	69da      	ldr	r2, [r3, #28]
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	68f9      	ldr	r1, [r7, #12]
 8009930:	6809      	ldr	r1, [r1, #0]
 8009932:	4608      	mov	r0, r1
 8009934:	6879      	ldr	r1, [r7, #4]
 8009936:	01c9      	lsls	r1, r1, #7
 8009938:	4401      	add	r1, r0
 800993a:	3184      	adds	r1, #132	@ 0x84
 800993c:	4313      	orrs	r3, r2
 800993e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	461a      	mov	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	01db      	lsls	r3, r3, #7
 800994a:	4413      	add	r3, r2
 800994c:	3384      	adds	r3, #132	@ 0x84
 800994e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	461a      	mov	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	01db      	lsls	r3, r3, #7
 800995a:	4413      	add	r3, r2
 800995c:	3384      	adds	r3, #132	@ 0x84
 800995e:	461a      	mov	r2, r3
 8009960:	2300      	movs	r3, #0
 8009962:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	461a      	mov	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	01db      	lsls	r3, r3, #7
 800996e:	4413      	add	r3, r2
 8009970:	3384      	adds	r3, #132	@ 0x84
 8009972:	461a      	mov	r2, r3
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009978:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d102      	bne.n	8009988 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8009982:	2304      	movs	r3, #4
 8009984:	61fb      	str	r3, [r7, #28]
 8009986:	e01b      	b.n	80099c0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d102      	bne.n	8009996 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8009990:	2303      	movs	r3, #3
 8009992:	61fb      	str	r3, [r7, #28]
 8009994:	e014      	b.n	80099c0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	2b04      	cmp	r3, #4
 800999c:	d00b      	beq.n	80099b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d007      	beq.n	80099b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d003      	beq.n	80099b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80099b2:	2b07      	cmp	r3, #7
 80099b4:	d102      	bne.n	80099bc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80099b6:	2302      	movs	r3, #2
 80099b8:	61fb      	str	r3, [r7, #28]
 80099ba:	e001      	b.n	80099c0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80099bc:	2301      	movs	r3, #1
 80099be:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	461a      	mov	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	01db      	lsls	r3, r3, #7
 80099ca:	4413      	add	r3, r2
 80099cc:	3384      	adds	r3, #132	@ 0x84
 80099ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	6812      	ldr	r2, [r2, #0]
 80099d4:	4611      	mov	r1, r2
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	01d2      	lsls	r2, r2, #7
 80099da:	440a      	add	r2, r1
 80099dc:	3284      	adds	r2, #132	@ 0x84
 80099de:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80099e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e8:	69fa      	ldr	r2, [r7, #28]
 80099ea:	fb02 f303 	mul.w	r3, r2, r3
 80099ee:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	6859      	ldr	r1, [r3, #4]
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	1acb      	subs	r3, r1, r3
 80099fa:	69f9      	ldr	r1, [r7, #28]
 80099fc:	fb01 f303 	mul.w	r3, r1, r3
 8009a00:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009a02:	68f9      	ldr	r1, [r7, #12]
 8009a04:	6809      	ldr	r1, [r1, #0]
 8009a06:	4608      	mov	r0, r1
 8009a08:	6879      	ldr	r1, [r7, #4]
 8009a0a:	01c9      	lsls	r1, r1, #7
 8009a0c:	4401      	add	r1, r0
 8009a0e:	3184      	adds	r1, #132	@ 0x84
 8009a10:	4313      	orrs	r3, r2
 8009a12:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	01db      	lsls	r3, r3, #7
 8009a1e:	4413      	add	r3, r2
 8009a20:	3384      	adds	r3, #132	@ 0x84
 8009a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	6812      	ldr	r2, [r2, #0]
 8009a28:	4611      	mov	r1, r2
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	01d2      	lsls	r2, r2, #7
 8009a2e:	440a      	add	r2, r1
 8009a30:	3284      	adds	r2, #132	@ 0x84
 8009a32:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009a36:	f023 0307 	bic.w	r3, r3, #7
 8009a3a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	01db      	lsls	r3, r3, #7
 8009a46:	4413      	add	r3, r2
 8009a48:	3384      	adds	r3, #132	@ 0x84
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a50:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	461a      	mov	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	01db      	lsls	r3, r3, #7
 8009a5c:	4413      	add	r3, r2
 8009a5e:	3384      	adds	r3, #132	@ 0x84
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	6812      	ldr	r2, [r2, #0]
 8009a66:	4611      	mov	r1, r2
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	01d2      	lsls	r2, r2, #7
 8009a6c:	440a      	add	r2, r1
 8009a6e:	3284      	adds	r2, #132	@ 0x84
 8009a70:	f043 0301 	orr.w	r3, r3, #1
 8009a74:	6013      	str	r3, [r2, #0]
}
 8009a76:	bf00      	nop
 8009a78:	3724      	adds	r7, #36	@ 0x24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
	...

08009a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e267      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d075      	beq.n	8009b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009aa2:	4b88      	ldr	r3, [pc, #544]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	f003 030c 	and.w	r3, r3, #12
 8009aaa:	2b04      	cmp	r3, #4
 8009aac:	d00c      	beq.n	8009ac8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009aae:	4b85      	ldr	r3, [pc, #532]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009ab6:	2b08      	cmp	r3, #8
 8009ab8:	d112      	bne.n	8009ae0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009aba:	4b82      	ldr	r3, [pc, #520]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ac2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ac6:	d10b      	bne.n	8009ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ac8:	4b7e      	ldr	r3, [pc, #504]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d05b      	beq.n	8009b8c <HAL_RCC_OscConfig+0x108>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d157      	bne.n	8009b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e242      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ae8:	d106      	bne.n	8009af8 <HAL_RCC_OscConfig+0x74>
 8009aea:	4b76      	ldr	r3, [pc, #472]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a75      	ldr	r2, [pc, #468]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009af4:	6013      	str	r3, [r2, #0]
 8009af6:	e01d      	b.n	8009b34 <HAL_RCC_OscConfig+0xb0>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009b00:	d10c      	bne.n	8009b1c <HAL_RCC_OscConfig+0x98>
 8009b02:	4b70      	ldr	r3, [pc, #448]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a6f      	ldr	r2, [pc, #444]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a6c      	ldr	r2, [pc, #432]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b18:	6013      	str	r3, [r2, #0]
 8009b1a:	e00b      	b.n	8009b34 <HAL_RCC_OscConfig+0xb0>
 8009b1c:	4b69      	ldr	r3, [pc, #420]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a68      	ldr	r2, [pc, #416]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b26:	6013      	str	r3, [r2, #0]
 8009b28:	4b66      	ldr	r3, [pc, #408]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a65      	ldr	r2, [pc, #404]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d013      	beq.n	8009b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b3c:	f7fa fe90 	bl	8004860 <HAL_GetTick>
 8009b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b42:	e008      	b.n	8009b56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b44:	f7fa fe8c 	bl	8004860 <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2b64      	cmp	r3, #100	@ 0x64
 8009b50:	d901      	bls.n	8009b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e207      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b56:	4b5b      	ldr	r3, [pc, #364]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d0f0      	beq.n	8009b44 <HAL_RCC_OscConfig+0xc0>
 8009b62:	e014      	b.n	8009b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b64:	f7fa fe7c 	bl	8004860 <HAL_GetTick>
 8009b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b6a:	e008      	b.n	8009b7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b6c:	f7fa fe78 	bl	8004860 <HAL_GetTick>
 8009b70:	4602      	mov	r2, r0
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	2b64      	cmp	r3, #100	@ 0x64
 8009b78:	d901      	bls.n	8009b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e1f3      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b7e:	4b51      	ldr	r3, [pc, #324]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1f0      	bne.n	8009b6c <HAL_RCC_OscConfig+0xe8>
 8009b8a:	e000      	b.n	8009b8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 0302 	and.w	r3, r3, #2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d063      	beq.n	8009c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f003 030c 	and.w	r3, r3, #12
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00b      	beq.n	8009bbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ba6:	4b47      	ldr	r3, [pc, #284]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009bae:	2b08      	cmp	r3, #8
 8009bb0:	d11c      	bne.n	8009bec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bb2:	4b44      	ldr	r3, [pc, #272]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d116      	bne.n	8009bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bbe:	4b41      	ldr	r3, [pc, #260]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d005      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x152>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d001      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e1c7      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	00db      	lsls	r3, r3, #3
 8009be4:	4937      	ldr	r1, [pc, #220]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bea:	e03a      	b.n	8009c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d020      	beq.n	8009c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009bf4:	4b34      	ldr	r3, [pc, #208]	@ (8009cc8 <HAL_RCC_OscConfig+0x244>)
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bfa:	f7fa fe31 	bl	8004860 <HAL_GetTick>
 8009bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c00:	e008      	b.n	8009c14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c02:	f7fa fe2d 	bl	8004860 <HAL_GetTick>
 8009c06:	4602      	mov	r2, r0
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d901      	bls.n	8009c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009c10:	2303      	movs	r3, #3
 8009c12:	e1a8      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c14:	4b2b      	ldr	r3, [pc, #172]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0302 	and.w	r3, r3, #2
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d0f0      	beq.n	8009c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c20:	4b28      	ldr	r3, [pc, #160]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	00db      	lsls	r3, r3, #3
 8009c2e:	4925      	ldr	r1, [pc, #148]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009c30:	4313      	orrs	r3, r2
 8009c32:	600b      	str	r3, [r1, #0]
 8009c34:	e015      	b.n	8009c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c36:	4b24      	ldr	r3, [pc, #144]	@ (8009cc8 <HAL_RCC_OscConfig+0x244>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c3c:	f7fa fe10 	bl	8004860 <HAL_GetTick>
 8009c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c42:	e008      	b.n	8009c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c44:	f7fa fe0c 	bl	8004860 <HAL_GetTick>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d901      	bls.n	8009c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e187      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c56:	4b1b      	ldr	r3, [pc, #108]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 0302 	and.w	r3, r3, #2
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1f0      	bne.n	8009c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0308 	and.w	r3, r3, #8
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d036      	beq.n	8009cdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d016      	beq.n	8009ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c76:	4b15      	ldr	r3, [pc, #84]	@ (8009ccc <HAL_RCC_OscConfig+0x248>)
 8009c78:	2201      	movs	r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c7c:	f7fa fdf0 	bl	8004860 <HAL_GetTick>
 8009c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c82:	e008      	b.n	8009c96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c84:	f7fa fdec 	bl	8004860 <HAL_GetTick>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d901      	bls.n	8009c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	e167      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c96:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc4 <HAL_RCC_OscConfig+0x240>)
 8009c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c9a:	f003 0302 	and.w	r3, r3, #2
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d0f0      	beq.n	8009c84 <HAL_RCC_OscConfig+0x200>
 8009ca2:	e01b      	b.n	8009cdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ca4:	4b09      	ldr	r3, [pc, #36]	@ (8009ccc <HAL_RCC_OscConfig+0x248>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009caa:	f7fa fdd9 	bl	8004860 <HAL_GetTick>
 8009cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cb0:	e00e      	b.n	8009cd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cb2:	f7fa fdd5 	bl	8004860 <HAL_GetTick>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d907      	bls.n	8009cd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e150      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
 8009cc4:	40023800 	.word	0x40023800
 8009cc8:	42470000 	.word	0x42470000
 8009ccc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cd0:	4b88      	ldr	r3, [pc, #544]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cd4:	f003 0302 	and.w	r3, r3, #2
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1ea      	bne.n	8009cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0304 	and.w	r3, r3, #4
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 8097 	beq.w	8009e18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cea:	2300      	movs	r3, #0
 8009cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cee:	4b81      	ldr	r3, [pc, #516]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10f      	bne.n	8009d1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60bb      	str	r3, [r7, #8]
 8009cfe:	4b7d      	ldr	r3, [pc, #500]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d02:	4a7c      	ldr	r2, [pc, #496]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8009d0a:	4b7a      	ldr	r3, [pc, #488]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d12:	60bb      	str	r3, [r7, #8]
 8009d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d16:	2301      	movs	r3, #1
 8009d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d1a:	4b77      	ldr	r3, [pc, #476]	@ (8009ef8 <HAL_RCC_OscConfig+0x474>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d118      	bne.n	8009d58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d26:	4b74      	ldr	r3, [pc, #464]	@ (8009ef8 <HAL_RCC_OscConfig+0x474>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a73      	ldr	r2, [pc, #460]	@ (8009ef8 <HAL_RCC_OscConfig+0x474>)
 8009d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d32:	f7fa fd95 	bl	8004860 <HAL_GetTick>
 8009d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d38:	e008      	b.n	8009d4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d3a:	f7fa fd91 	bl	8004860 <HAL_GetTick>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d901      	bls.n	8009d4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e10c      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8009ef8 <HAL_RCC_OscConfig+0x474>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d0f0      	beq.n	8009d3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d106      	bne.n	8009d6e <HAL_RCC_OscConfig+0x2ea>
 8009d60:	4b64      	ldr	r3, [pc, #400]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d64:	4a63      	ldr	r2, [pc, #396]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009d66:	f043 0301 	orr.w	r3, r3, #1
 8009d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d6c:	e01c      	b.n	8009da8 <HAL_RCC_OscConfig+0x324>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	2b05      	cmp	r3, #5
 8009d74:	d10c      	bne.n	8009d90 <HAL_RCC_OscConfig+0x30c>
 8009d76:	4b5f      	ldr	r3, [pc, #380]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d7a:	4a5e      	ldr	r2, [pc, #376]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009d7c:	f043 0304 	orr.w	r3, r3, #4
 8009d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d82:	4b5c      	ldr	r3, [pc, #368]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d86:	4a5b      	ldr	r2, [pc, #364]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009d88:	f043 0301 	orr.w	r3, r3, #1
 8009d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d8e:	e00b      	b.n	8009da8 <HAL_RCC_OscConfig+0x324>
 8009d90:	4b58      	ldr	r3, [pc, #352]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d94:	4a57      	ldr	r2, [pc, #348]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009d96:	f023 0301 	bic.w	r3, r3, #1
 8009d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009d9c:	4b55      	ldr	r3, [pc, #340]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009da0:	4a54      	ldr	r2, [pc, #336]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009da2:	f023 0304 	bic.w	r3, r3, #4
 8009da6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d015      	beq.n	8009ddc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009db0:	f7fa fd56 	bl	8004860 <HAL_GetTick>
 8009db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009db6:	e00a      	b.n	8009dce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009db8:	f7fa fd52 	bl	8004860 <HAL_GetTick>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d901      	bls.n	8009dce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e0cb      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dce:	4b49      	ldr	r3, [pc, #292]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d0ee      	beq.n	8009db8 <HAL_RCC_OscConfig+0x334>
 8009dda:	e014      	b.n	8009e06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ddc:	f7fa fd40 	bl	8004860 <HAL_GetTick>
 8009de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009de2:	e00a      	b.n	8009dfa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009de4:	f7fa fd3c 	bl	8004860 <HAL_GetTick>
 8009de8:	4602      	mov	r2, r0
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d901      	bls.n	8009dfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e0b5      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1ee      	bne.n	8009de4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009e06:	7dfb      	ldrb	r3, [r7, #23]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d105      	bne.n	8009e18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e0c:	4b39      	ldr	r3, [pc, #228]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e10:	4a38      	ldr	r2, [pc, #224]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 80a1 	beq.w	8009f64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e22:	4b34      	ldr	r3, [pc, #208]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	f003 030c 	and.w	r3, r3, #12
 8009e2a:	2b08      	cmp	r3, #8
 8009e2c:	d05c      	beq.n	8009ee8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d141      	bne.n	8009eba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e36:	4b31      	ldr	r3, [pc, #196]	@ (8009efc <HAL_RCC_OscConfig+0x478>)
 8009e38:	2200      	movs	r2, #0
 8009e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e3c:	f7fa fd10 	bl	8004860 <HAL_GetTick>
 8009e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e42:	e008      	b.n	8009e56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e44:	f7fa fd0c 	bl	8004860 <HAL_GetTick>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d901      	bls.n	8009e56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009e52:	2303      	movs	r3, #3
 8009e54:	e087      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e56:	4b27      	ldr	r3, [pc, #156]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1f0      	bne.n	8009e44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	69da      	ldr	r2, [r3, #28]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	431a      	orrs	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e70:	019b      	lsls	r3, r3, #6
 8009e72:	431a      	orrs	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e78:	085b      	lsrs	r3, r3, #1
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	041b      	lsls	r3, r3, #16
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e84:	061b      	lsls	r3, r3, #24
 8009e86:	491b      	ldr	r1, [pc, #108]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8009efc <HAL_RCC_OscConfig+0x478>)
 8009e8e:	2201      	movs	r2, #1
 8009e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e92:	f7fa fce5 	bl	8004860 <HAL_GetTick>
 8009e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e98:	e008      	b.n	8009eac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e9a:	f7fa fce1 	bl	8004860 <HAL_GetTick>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d901      	bls.n	8009eac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e05c      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009eac:	4b11      	ldr	r3, [pc, #68]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d0f0      	beq.n	8009e9a <HAL_RCC_OscConfig+0x416>
 8009eb8:	e054      	b.n	8009f64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009eba:	4b10      	ldr	r3, [pc, #64]	@ (8009efc <HAL_RCC_OscConfig+0x478>)
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ec0:	f7fa fcce 	bl	8004860 <HAL_GetTick>
 8009ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ec6:	e008      	b.n	8009eda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ec8:	f7fa fcca 	bl	8004860 <HAL_GetTick>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d901      	bls.n	8009eda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e045      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009eda:	4b06      	ldr	r3, [pc, #24]	@ (8009ef4 <HAL_RCC_OscConfig+0x470>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1f0      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x444>
 8009ee6:	e03d      	b.n	8009f64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	699b      	ldr	r3, [r3, #24]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d107      	bne.n	8009f00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e038      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
 8009ef4:	40023800 	.word	0x40023800
 8009ef8:	40007000 	.word	0x40007000
 8009efc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009f00:	4b1b      	ldr	r3, [pc, #108]	@ (8009f70 <HAL_RCC_OscConfig+0x4ec>)
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d028      	beq.n	8009f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d121      	bne.n	8009f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d11a      	bne.n	8009f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009f30:	4013      	ands	r3, r2
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009f36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d111      	bne.n	8009f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f46:	085b      	lsrs	r3, r3, #1
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d107      	bne.n	8009f60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d001      	beq.n	8009f64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e000      	b.n	8009f66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	40023800 	.word	0x40023800

08009f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e0cc      	b.n	800a122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f88:	4b68      	ldr	r3, [pc, #416]	@ (800a12c <HAL_RCC_ClockConfig+0x1b8>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 030f 	and.w	r3, r3, #15
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d90c      	bls.n	8009fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f96:	4b65      	ldr	r3, [pc, #404]	@ (800a12c <HAL_RCC_ClockConfig+0x1b8>)
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	b2d2      	uxtb	r2, r2
 8009f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f9e:	4b63      	ldr	r3, [pc, #396]	@ (800a12c <HAL_RCC_ClockConfig+0x1b8>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 030f 	and.w	r3, r3, #15
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d001      	beq.n	8009fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e0b8      	b.n	800a122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 0302 	and.w	r3, r3, #2
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d020      	beq.n	8009ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0304 	and.w	r3, r3, #4
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d005      	beq.n	8009fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009fc8:	4b59      	ldr	r3, [pc, #356]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	4a58      	ldr	r2, [pc, #352]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 8009fce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009fd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 0308 	and.w	r3, r3, #8
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d005      	beq.n	8009fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009fe0:	4b53      	ldr	r3, [pc, #332]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	4a52      	ldr	r2, [pc, #328]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 8009fe6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fec:	4b50      	ldr	r3, [pc, #320]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	494d      	ldr	r1, [pc, #308]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	d044      	beq.n	800a094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d107      	bne.n	800a022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a012:	4b47      	ldr	r3, [pc, #284]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d119      	bne.n	800a052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e07f      	b.n	800a122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	2b02      	cmp	r3, #2
 800a028:	d003      	beq.n	800a032 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a02e:	2b03      	cmp	r3, #3
 800a030:	d107      	bne.n	800a042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a032:	4b3f      	ldr	r3, [pc, #252]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d109      	bne.n	800a052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e06f      	b.n	800a122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a042:	4b3b      	ldr	r3, [pc, #236]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0302 	and.w	r3, r3, #2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e067      	b.n	800a122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a052:	4b37      	ldr	r3, [pc, #220]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f023 0203 	bic.w	r2, r3, #3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	4934      	ldr	r1, [pc, #208]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 800a060:	4313      	orrs	r3, r2
 800a062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a064:	f7fa fbfc 	bl	8004860 <HAL_GetTick>
 800a068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a06a:	e00a      	b.n	800a082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a06c:	f7fa fbf8 	bl	8004860 <HAL_GetTick>
 800a070:	4602      	mov	r2, r0
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d901      	bls.n	800a082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e04f      	b.n	800a122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a082:	4b2b      	ldr	r3, [pc, #172]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f003 020c 	and.w	r2, r3, #12
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	429a      	cmp	r2, r3
 800a092:	d1eb      	bne.n	800a06c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a094:	4b25      	ldr	r3, [pc, #148]	@ (800a12c <HAL_RCC_ClockConfig+0x1b8>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 030f 	and.w	r3, r3, #15
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d20c      	bcs.n	800a0bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0a2:	4b22      	ldr	r3, [pc, #136]	@ (800a12c <HAL_RCC_ClockConfig+0x1b8>)
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	b2d2      	uxtb	r2, r2
 800a0a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0aa:	4b20      	ldr	r3, [pc, #128]	@ (800a12c <HAL_RCC_ClockConfig+0x1b8>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 030f 	and.w	r3, r3, #15
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d001      	beq.n	800a0bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e032      	b.n	800a122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0304 	and.w	r3, r3, #4
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d008      	beq.n	800a0da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a0c8:	4b19      	ldr	r3, [pc, #100]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	4916      	ldr	r1, [pc, #88]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0308 	and.w	r3, r3, #8
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d009      	beq.n	800a0fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a0e6:	4b12      	ldr	r3, [pc, #72]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	490e      	ldr	r1, [pc, #56]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a0fa:	f000 f821 	bl	800a140 <HAL_RCC_GetSysClockFreq>
 800a0fe:	4602      	mov	r2, r0
 800a100:	4b0b      	ldr	r3, [pc, #44]	@ (800a130 <HAL_RCC_ClockConfig+0x1bc>)
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	091b      	lsrs	r3, r3, #4
 800a106:	f003 030f 	and.w	r3, r3, #15
 800a10a:	490a      	ldr	r1, [pc, #40]	@ (800a134 <HAL_RCC_ClockConfig+0x1c0>)
 800a10c:	5ccb      	ldrb	r3, [r1, r3]
 800a10e:	fa22 f303 	lsr.w	r3, r2, r3
 800a112:	4a09      	ldr	r2, [pc, #36]	@ (800a138 <HAL_RCC_ClockConfig+0x1c4>)
 800a114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a116:	4b09      	ldr	r3, [pc, #36]	@ (800a13c <HAL_RCC_ClockConfig+0x1c8>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7f8 fad2 	bl	80026c4 <HAL_InitTick>

  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	40023c00 	.word	0x40023c00
 800a130:	40023800 	.word	0x40023800
 800a134:	08012840 	.word	0x08012840
 800a138:	200000ec 	.word	0x200000ec
 800a13c:	2000016c 	.word	0x2000016c

0800a140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a144:	b094      	sub	sp, #80	@ 0x50
 800a146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a148:	2300      	movs	r3, #0
 800a14a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800a14c:	2300      	movs	r3, #0
 800a14e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800a150:	2300      	movs	r3, #0
 800a152:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800a154:	2300      	movs	r3, #0
 800a156:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a158:	4b79      	ldr	r3, [pc, #484]	@ (800a340 <HAL_RCC_GetSysClockFreq+0x200>)
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f003 030c 	and.w	r3, r3, #12
 800a160:	2b08      	cmp	r3, #8
 800a162:	d00d      	beq.n	800a180 <HAL_RCC_GetSysClockFreq+0x40>
 800a164:	2b08      	cmp	r3, #8
 800a166:	f200 80e1 	bhi.w	800a32c <HAL_RCC_GetSysClockFreq+0x1ec>
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d002      	beq.n	800a174 <HAL_RCC_GetSysClockFreq+0x34>
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d003      	beq.n	800a17a <HAL_RCC_GetSysClockFreq+0x3a>
 800a172:	e0db      	b.n	800a32c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a174:	4b73      	ldr	r3, [pc, #460]	@ (800a344 <HAL_RCC_GetSysClockFreq+0x204>)
 800a176:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a178:	e0db      	b.n	800a332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a17a:	4b73      	ldr	r3, [pc, #460]	@ (800a348 <HAL_RCC_GetSysClockFreq+0x208>)
 800a17c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a17e:	e0d8      	b.n	800a332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a180:	4b6f      	ldr	r3, [pc, #444]	@ (800a340 <HAL_RCC_GetSysClockFreq+0x200>)
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a188:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a18a:	4b6d      	ldr	r3, [pc, #436]	@ (800a340 <HAL_RCC_GetSysClockFreq+0x200>)
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d063      	beq.n	800a25e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a196:	4b6a      	ldr	r3, [pc, #424]	@ (800a340 <HAL_RCC_GetSysClockFreq+0x200>)
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	099b      	lsrs	r3, r3, #6
 800a19c:	2200      	movs	r2, #0
 800a19e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a1a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a1b2:	4622      	mov	r2, r4
 800a1b4:	462b      	mov	r3, r5
 800a1b6:	f04f 0000 	mov.w	r0, #0
 800a1ba:	f04f 0100 	mov.w	r1, #0
 800a1be:	0159      	lsls	r1, r3, #5
 800a1c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a1c4:	0150      	lsls	r0, r2, #5
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	1a51      	subs	r1, r2, r1
 800a1ce:	6139      	str	r1, [r7, #16]
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	eb63 0301 	sbc.w	r3, r3, r1
 800a1d6:	617b      	str	r3, [r7, #20]
 800a1d8:	f04f 0200 	mov.w	r2, #0
 800a1dc:	f04f 0300 	mov.w	r3, #0
 800a1e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a1e4:	4659      	mov	r1, fp
 800a1e6:	018b      	lsls	r3, r1, #6
 800a1e8:	4651      	mov	r1, sl
 800a1ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a1ee:	4651      	mov	r1, sl
 800a1f0:	018a      	lsls	r2, r1, #6
 800a1f2:	4651      	mov	r1, sl
 800a1f4:	ebb2 0801 	subs.w	r8, r2, r1
 800a1f8:	4659      	mov	r1, fp
 800a1fa:	eb63 0901 	sbc.w	r9, r3, r1
 800a1fe:	f04f 0200 	mov.w	r2, #0
 800a202:	f04f 0300 	mov.w	r3, #0
 800a206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a20a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a20e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a212:	4690      	mov	r8, r2
 800a214:	4699      	mov	r9, r3
 800a216:	4623      	mov	r3, r4
 800a218:	eb18 0303 	adds.w	r3, r8, r3
 800a21c:	60bb      	str	r3, [r7, #8]
 800a21e:	462b      	mov	r3, r5
 800a220:	eb49 0303 	adc.w	r3, r9, r3
 800a224:	60fb      	str	r3, [r7, #12]
 800a226:	f04f 0200 	mov.w	r2, #0
 800a22a:	f04f 0300 	mov.w	r3, #0
 800a22e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a232:	4629      	mov	r1, r5
 800a234:	024b      	lsls	r3, r1, #9
 800a236:	4621      	mov	r1, r4
 800a238:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a23c:	4621      	mov	r1, r4
 800a23e:	024a      	lsls	r2, r1, #9
 800a240:	4610      	mov	r0, r2
 800a242:	4619      	mov	r1, r3
 800a244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a246:	2200      	movs	r2, #0
 800a248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a24a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a24c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a250:	f7f6 f826 	bl	80002a0 <__aeabi_uldivmod>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4613      	mov	r3, r2
 800a25a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a25c:	e058      	b.n	800a310 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a25e:	4b38      	ldr	r3, [pc, #224]	@ (800a340 <HAL_RCC_GetSysClockFreq+0x200>)
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	099b      	lsrs	r3, r3, #6
 800a264:	2200      	movs	r2, #0
 800a266:	4618      	mov	r0, r3
 800a268:	4611      	mov	r1, r2
 800a26a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a26e:	623b      	str	r3, [r7, #32]
 800a270:	2300      	movs	r3, #0
 800a272:	627b      	str	r3, [r7, #36]	@ 0x24
 800a274:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a278:	4642      	mov	r2, r8
 800a27a:	464b      	mov	r3, r9
 800a27c:	f04f 0000 	mov.w	r0, #0
 800a280:	f04f 0100 	mov.w	r1, #0
 800a284:	0159      	lsls	r1, r3, #5
 800a286:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a28a:	0150      	lsls	r0, r2, #5
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4641      	mov	r1, r8
 800a292:	ebb2 0a01 	subs.w	sl, r2, r1
 800a296:	4649      	mov	r1, r9
 800a298:	eb63 0b01 	sbc.w	fp, r3, r1
 800a29c:	f04f 0200 	mov.w	r2, #0
 800a2a0:	f04f 0300 	mov.w	r3, #0
 800a2a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a2a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a2ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a2b0:	ebb2 040a 	subs.w	r4, r2, sl
 800a2b4:	eb63 050b 	sbc.w	r5, r3, fp
 800a2b8:	f04f 0200 	mov.w	r2, #0
 800a2bc:	f04f 0300 	mov.w	r3, #0
 800a2c0:	00eb      	lsls	r3, r5, #3
 800a2c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2c6:	00e2      	lsls	r2, r4, #3
 800a2c8:	4614      	mov	r4, r2
 800a2ca:	461d      	mov	r5, r3
 800a2cc:	4643      	mov	r3, r8
 800a2ce:	18e3      	adds	r3, r4, r3
 800a2d0:	603b      	str	r3, [r7, #0]
 800a2d2:	464b      	mov	r3, r9
 800a2d4:	eb45 0303 	adc.w	r3, r5, r3
 800a2d8:	607b      	str	r3, [r7, #4]
 800a2da:	f04f 0200 	mov.w	r2, #0
 800a2de:	f04f 0300 	mov.w	r3, #0
 800a2e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	028b      	lsls	r3, r1, #10
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	028a      	lsls	r2, r1, #10
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	61bb      	str	r3, [r7, #24]
 800a2fe:	61fa      	str	r2, [r7, #28]
 800a300:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a304:	f7f5 ffcc 	bl	80002a0 <__aeabi_uldivmod>
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4613      	mov	r3, r2
 800a30e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a310:	4b0b      	ldr	r3, [pc, #44]	@ (800a340 <HAL_RCC_GetSysClockFreq+0x200>)
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	0c1b      	lsrs	r3, r3, #16
 800a316:	f003 0303 	and.w	r3, r3, #3
 800a31a:	3301      	adds	r3, #1
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800a320:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a324:	fbb2 f3f3 	udiv	r3, r2, r3
 800a328:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a32a:	e002      	b.n	800a332 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a32c:	4b05      	ldr	r3, [pc, #20]	@ (800a344 <HAL_RCC_GetSysClockFreq+0x204>)
 800a32e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a330:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a334:	4618      	mov	r0, r3
 800a336:	3750      	adds	r7, #80	@ 0x50
 800a338:	46bd      	mov	sp, r7
 800a33a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a33e:	bf00      	nop
 800a340:	40023800 	.word	0x40023800
 800a344:	00f42400 	.word	0x00f42400
 800a348:	007a1200 	.word	0x007a1200

0800a34c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a350:	4b03      	ldr	r3, [pc, #12]	@ (800a360 <HAL_RCC_GetHCLKFreq+0x14>)
 800a352:	681b      	ldr	r3, [r3, #0]
}
 800a354:	4618      	mov	r0, r3
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	200000ec 	.word	0x200000ec

0800a364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a368:	f7ff fff0 	bl	800a34c <HAL_RCC_GetHCLKFreq>
 800a36c:	4602      	mov	r2, r0
 800a36e:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	0a9b      	lsrs	r3, r3, #10
 800a374:	f003 0307 	and.w	r3, r3, #7
 800a378:	4903      	ldr	r1, [pc, #12]	@ (800a388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a37a:	5ccb      	ldrb	r3, [r1, r3]
 800a37c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a380:	4618      	mov	r0, r3
 800a382:	bd80      	pop	{r7, pc}
 800a384:	40023800 	.word	0x40023800
 800a388:	08012850 	.word	0x08012850

0800a38c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a390:	f7ff ffdc 	bl	800a34c <HAL_RCC_GetHCLKFreq>
 800a394:	4602      	mov	r2, r0
 800a396:	4b05      	ldr	r3, [pc, #20]	@ (800a3ac <HAL_RCC_GetPCLK2Freq+0x20>)
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	0b5b      	lsrs	r3, r3, #13
 800a39c:	f003 0307 	and.w	r3, r3, #7
 800a3a0:	4903      	ldr	r1, [pc, #12]	@ (800a3b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a3a2:	5ccb      	ldrb	r3, [r1, r3]
 800a3a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	40023800 	.word	0x40023800
 800a3b0:	08012850 	.word	0x08012850

0800a3b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	220f      	movs	r2, #15
 800a3c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a3c4:	4b12      	ldr	r3, [pc, #72]	@ (800a410 <HAL_RCC_GetClockConfig+0x5c>)
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	f003 0203 	and.w	r2, r3, #3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a3d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a410 <HAL_RCC_GetClockConfig+0x5c>)
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a3dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a410 <HAL_RCC_GetClockConfig+0x5c>)
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a3e8:	4b09      	ldr	r3, [pc, #36]	@ (800a410 <HAL_RCC_GetClockConfig+0x5c>)
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	08db      	lsrs	r3, r3, #3
 800a3ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a3f6:	4b07      	ldr	r3, [pc, #28]	@ (800a414 <HAL_RCC_GetClockConfig+0x60>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 020f 	and.w	r2, r3, #15
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	601a      	str	r2, [r3, #0]
}
 800a402:	bf00      	nop
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	40023800 	.word	0x40023800
 800a414:	40023c00 	.word	0x40023c00

0800a418 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a420:	2300      	movs	r3, #0
 800a422:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10b      	bne.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d105      	bne.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d075      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a44c:	4b91      	ldr	r3, [pc, #580]	@ (800a694 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a44e:	2200      	movs	r2, #0
 800a450:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a452:	f7fa fa05 	bl	8004860 <HAL_GetTick>
 800a456:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a458:	e008      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a45a:	f7fa fa01 	bl	8004860 <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	2b02      	cmp	r3, #2
 800a466:	d901      	bls.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a468:	2303      	movs	r3, #3
 800a46a:	e189      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a46c:	4b8a      	ldr	r3, [pc, #552]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1f0      	bne.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	2b00      	cmp	r3, #0
 800a482:	d009      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	019a      	lsls	r2, r3, #6
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	071b      	lsls	r3, r3, #28
 800a490:	4981      	ldr	r1, [pc, #516]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a492:	4313      	orrs	r3, r2
 800a494:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0302 	and.w	r3, r3, #2
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01f      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a4a4:	4b7c      	ldr	r3, [pc, #496]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4aa:	0f1b      	lsrs	r3, r3, #28
 800a4ac:	f003 0307 	and.w	r3, r3, #7
 800a4b0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	019a      	lsls	r2, r3, #6
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	061b      	lsls	r3, r3, #24
 800a4be:	431a      	orrs	r2, r3
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	071b      	lsls	r3, r3, #28
 800a4c4:	4974      	ldr	r1, [pc, #464]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a4cc:	4b72      	ldr	r3, [pc, #456]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4d2:	f023 021f 	bic.w	r2, r3, #31
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	496e      	ldr	r1, [pc, #440]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00d      	beq.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	019a      	lsls	r2, r3, #6
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	061b      	lsls	r3, r3, #24
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	071b      	lsls	r3, r3, #28
 800a504:	4964      	ldr	r1, [pc, #400]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a506:	4313      	orrs	r3, r2
 800a508:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a50c:	4b61      	ldr	r3, [pc, #388]	@ (800a694 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800a50e:	2201      	movs	r2, #1
 800a510:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a512:	f7fa f9a5 	bl	8004860 <HAL_GetTick>
 800a516:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a518:	e008      	b.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a51a:	f7fa f9a1 	bl	8004860 <HAL_GetTick>
 800a51e:	4602      	mov	r2, r0
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	2b02      	cmp	r3, #2
 800a526:	d901      	bls.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a528:	2303      	movs	r3, #3
 800a52a:	e129      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a52c:	4b5a      	ldr	r3, [pc, #360]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a534:	2b00      	cmp	r3, #0
 800a536:	d0f0      	beq.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0304 	and.w	r3, r3, #4
 800a540:	2b00      	cmp	r3, #0
 800a542:	d105      	bne.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d079      	beq.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a550:	4b52      	ldr	r3, [pc, #328]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a556:	f7fa f983 	bl	8004860 <HAL_GetTick>
 800a55a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a55c:	e008      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a55e:	f7fa f97f 	bl	8004860 <HAL_GetTick>
 800a562:	4602      	mov	r2, r0
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d901      	bls.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e107      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a570:	4b49      	ldr	r3, [pc, #292]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a57c:	d0ef      	beq.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0304 	and.w	r3, r3, #4
 800a586:	2b00      	cmp	r3, #0
 800a588:	d020      	beq.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a58a:	4b43      	ldr	r3, [pc, #268]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a58c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a590:	0f1b      	lsrs	r3, r3, #28
 800a592:	f003 0307 	and.w	r3, r3, #7
 800a596:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	019a      	lsls	r2, r3, #6
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	061b      	lsls	r3, r3, #24
 800a5a4:	431a      	orrs	r2, r3
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	071b      	lsls	r3, r3, #28
 800a5aa:	493b      	ldr	r1, [pc, #236]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a5b2:	4b39      	ldr	r3, [pc, #228]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a1b      	ldr	r3, [r3, #32]
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	021b      	lsls	r3, r3, #8
 800a5c4:	4934      	ldr	r1, [pc, #208]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 0308 	and.w	r3, r3, #8
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01e      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a5d8:	4b2f      	ldr	r3, [pc, #188]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5de:	0e1b      	lsrs	r3, r3, #24
 800a5e0:	f003 030f 	and.w	r3, r3, #15
 800a5e4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	019a      	lsls	r2, r3, #6
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	061b      	lsls	r3, r3, #24
 800a5f0:	431a      	orrs	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	071b      	lsls	r3, r3, #28
 800a5f8:	4927      	ldr	r1, [pc, #156]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a600:	4b25      	ldr	r3, [pc, #148]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a606:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a60e:	4922      	ldr	r1, [pc, #136]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a610:	4313      	orrs	r3, r2
 800a612:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a616:	4b21      	ldr	r3, [pc, #132]	@ (800a69c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800a618:	2201      	movs	r2, #1
 800a61a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a61c:	f7fa f920 	bl	8004860 <HAL_GetTick>
 800a620:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a622:	e008      	b.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a624:	f7fa f91c 	bl	8004860 <HAL_GetTick>
 800a628:	4602      	mov	r2, r0
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d901      	bls.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e0a4      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a636:	4b18      	ldr	r3, [pc, #96]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a63e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a642:	d1ef      	bne.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0320 	and.w	r3, r3, #32
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 808b 	beq.w	800a768 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a652:	2300      	movs	r3, #0
 800a654:	60fb      	str	r3, [r7, #12]
 800a656:	4b10      	ldr	r3, [pc, #64]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a65a:	4a0f      	ldr	r2, [pc, #60]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a65c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a660:	6413      	str	r3, [r2, #64]	@ 0x40
 800a662:	4b0d      	ldr	r3, [pc, #52]	@ (800a698 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800a664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a66a:	60fb      	str	r3, [r7, #12]
 800a66c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a66e:	4b0c      	ldr	r3, [pc, #48]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a0b      	ldr	r2, [pc, #44]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800a674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a678:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a67a:	f7fa f8f1 	bl	8004860 <HAL_GetTick>
 800a67e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800a680:	e010      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a682:	f7fa f8ed 	bl	8004860 <HAL_GetTick>
 800a686:	4602      	mov	r2, r0
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d909      	bls.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e075      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800a694:	42470068 	.word	0x42470068
 800a698:	40023800 	.word	0x40023800
 800a69c:	42470070 	.word	0x42470070
 800a6a0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800a6a4:	4b38      	ldr	r3, [pc, #224]	@ (800a788 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d0e8      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a6b0:	4b36      	ldr	r3, [pc, #216]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6b8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d02f      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d028      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a6ce:	4b2f      	ldr	r3, [pc, #188]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a6d8:	4b2d      	ldr	r3, [pc, #180]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a6da:	2201      	movs	r2, #1
 800a6dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a6de:	4b2c      	ldr	r3, [pc, #176]	@ (800a790 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a6e4:	4a29      	ldr	r2, [pc, #164]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a6ea:	4b28      	ldr	r3, [pc, #160]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a6ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d114      	bne.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a6f6:	f7fa f8b3 	bl	8004860 <HAL_GetTick>
 800a6fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6fc:	e00a      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6fe:	f7fa f8af 	bl	8004860 <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d901      	bls.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e035      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a714:	4b1d      	ldr	r3, [pc, #116]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a718:	f003 0302 	and.w	r3, r3, #2
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d0ee      	beq.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a728:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a72c:	d10d      	bne.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a72e:	4b17      	ldr	r3, [pc, #92]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a73a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a73e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a742:	4912      	ldr	r1, [pc, #72]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a744:	4313      	orrs	r3, r2
 800a746:	608b      	str	r3, [r1, #8]
 800a748:	e005      	b.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800a74a:	4b10      	ldr	r3, [pc, #64]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	4a0f      	ldr	r2, [pc, #60]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a750:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a754:	6093      	str	r3, [r2, #8]
 800a756:	4b0d      	ldr	r3, [pc, #52]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a758:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a75e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a762:	490a      	ldr	r1, [pc, #40]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a764:	4313      	orrs	r3, r2
 800a766:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 0310 	and.w	r3, r3, #16
 800a770:	2b00      	cmp	r3, #0
 800a772:	d004      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800a77a:	4b06      	ldr	r3, [pc, #24]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800a77c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3718      	adds	r7, #24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	40007000 	.word	0x40007000
 800a78c:	40023800 	.word	0x40023800
 800a790:	42470e40 	.word	0x42470e40
 800a794:	424711e0 	.word	0x424711e0

0800a798 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d101      	bne.n	800a7ac <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e025      	b.n	800a7f8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d106      	bne.n	800a7c6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7f7 ff75 	bl	80026b0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2202      	movs	r2, #2
 800a7ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	4610      	mov	r0, r2
 800a7da:	f001 fef7 	bl	800c5cc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6818      	ldr	r0, [r3, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	f001 ff4c 	bl	800c686 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a812:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a814:	7dfb      	ldrb	r3, [r7, #23]
 800a816:	2b02      	cmp	r3, #2
 800a818:	d101      	bne.n	800a81e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a81a:	2302      	movs	r3, #2
 800a81c:	e021      	b.n	800a862 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d002      	beq.n	800a82a <HAL_SDRAM_SendCommand+0x2a>
 800a824:	7dfb      	ldrb	r3, [r7, #23]
 800a826:	2b05      	cmp	r3, #5
 800a828:	d118      	bne.n	800a85c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2202      	movs	r2, #2
 800a82e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	68b9      	ldr	r1, [r7, #8]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f001 ff8c 	bl	800c758 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b02      	cmp	r3, #2
 800a846:	d104      	bne.n	800a852 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2205      	movs	r2, #5
 800a84c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a850:	e006      	b.n	800a860 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a85a:	e001      	b.n	800a860 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e000      	b.n	800a862 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b082      	sub	sp, #8
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d101      	bne.n	800a884 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a880:	2302      	movs	r3, #2
 800a882:	e016      	b.n	800a8b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d10f      	bne.n	800a8b0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2202      	movs	r2, #2
 800a894:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	6839      	ldr	r1, [r7, #0]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f001 ff97 	bl	800c7d2 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	e000      	b.n	800a8b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b082      	sub	sp, #8
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d101      	bne.n	800a8cc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e07b      	b.n	800a9c4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d108      	bne.n	800a8e6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a8dc:	d009      	beq.n	800a8f2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	61da      	str	r2, [r3, #28]
 800a8e4:	e005      	b.n	800a8f2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d106      	bne.n	800a912 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7f7 fd49 	bl	80023a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2202      	movs	r2, #2
 800a916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a928:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a93a:	431a      	orrs	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a944:	431a      	orrs	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	f003 0302 	and.w	r3, r3, #2
 800a94e:	431a      	orrs	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	695b      	ldr	r3, [r3, #20]
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	431a      	orrs	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a962:	431a      	orrs	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a96c:	431a      	orrs	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a976:	ea42 0103 	orr.w	r1, r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a97e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	430a      	orrs	r2, r1
 800a988:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	0c1b      	lsrs	r3, r3, #16
 800a990:	f003 0104 	and.w	r1, r3, #4
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a998:	f003 0210 	and.w	r2, r3, #16
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	69da      	ldr	r2, [r3, #28]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a9b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e01a      	b.n	800aa14 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2202      	movs	r2, #2
 800a9e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a9f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7f7 fd1c 	bl	8002434 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b088      	sub	sp, #32
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	603b      	str	r3, [r7, #0]
 800aa28:	4613      	mov	r3, r2
 800aa2a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa2c:	f7f9 ff18 	bl	8004860 <HAL_GetTick>
 800aa30:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800aa32:	88fb      	ldrh	r3, [r7, #6]
 800aa34:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d001      	beq.n	800aa46 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800aa42:	2302      	movs	r3, #2
 800aa44:	e12a      	b.n	800ac9c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d002      	beq.n	800aa52 <HAL_SPI_Transmit+0x36>
 800aa4c:	88fb      	ldrh	r3, [r7, #6]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	e122      	b.n	800ac9c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d101      	bne.n	800aa64 <HAL_SPI_Transmit+0x48>
 800aa60:	2302      	movs	r3, #2
 800aa62:	e11b      	b.n	800ac9c <HAL_SPI_Transmit+0x280>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2203      	movs	r2, #3
 800aa70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	88fa      	ldrh	r2, [r7, #6]
 800aa84:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	88fa      	ldrh	r2, [r7, #6]
 800aa8a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aab2:	d10f      	bne.n	800aad4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aac2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aad2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aade:	2b40      	cmp	r3, #64	@ 0x40
 800aae0:	d007      	beq.n	800aaf2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aaf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aafa:	d152      	bne.n	800aba2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <HAL_SPI_Transmit+0xee>
 800ab04:	8b7b      	ldrh	r3, [r7, #26]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d145      	bne.n	800ab96 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab0e:	881a      	ldrh	r2, [r3, #0]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab1a:	1c9a      	adds	r2, r3, #2
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	3b01      	subs	r3, #1
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ab2e:	e032      	b.n	800ab96 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	f003 0302 	and.w	r3, r3, #2
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	d112      	bne.n	800ab64 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab42:	881a      	ldrh	r2, [r3, #0]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab4e:	1c9a      	adds	r2, r3, #2
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ab62:	e018      	b.n	800ab96 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab64:	f7f9 fe7c 	bl	8004860 <HAL_GetTick>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d803      	bhi.n	800ab7c <HAL_SPI_Transmit+0x160>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7a:	d102      	bne.n	800ab82 <HAL_SPI_Transmit+0x166>
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d109      	bne.n	800ab96 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2201      	movs	r2, #1
 800ab86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e082      	b.n	800ac9c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1c7      	bne.n	800ab30 <HAL_SPI_Transmit+0x114>
 800aba0:	e053      	b.n	800ac4a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d002      	beq.n	800abb0 <HAL_SPI_Transmit+0x194>
 800abaa:	8b7b      	ldrh	r3, [r7, #26]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d147      	bne.n	800ac40 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	330c      	adds	r3, #12
 800abba:	7812      	ldrb	r2, [r2, #0]
 800abbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc2:	1c5a      	adds	r2, r3, #1
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800abcc:	b29b      	uxth	r3, r3
 800abce:	3b01      	subs	r3, #1
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800abd6:	e033      	b.n	800ac40 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f003 0302 	and.w	r3, r3, #2
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	d113      	bne.n	800ac0e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	330c      	adds	r3, #12
 800abf0:	7812      	ldrb	r2, [r2, #0]
 800abf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abf8:	1c5a      	adds	r2, r3, #1
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	3b01      	subs	r3, #1
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ac0c:	e018      	b.n	800ac40 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac0e:	f7f9 fe27 	bl	8004860 <HAL_GetTick>
 800ac12:	4602      	mov	r2, r0
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d803      	bhi.n	800ac26 <HAL_SPI_Transmit+0x20a>
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac24:	d102      	bne.n	800ac2c <HAL_SPI_Transmit+0x210>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d109      	bne.n	800ac40 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	e02d      	b.n	800ac9c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1c6      	bne.n	800abd8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac4a:	69fa      	ldr	r2, [r7, #28]
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f000 fbe6 	bl	800b420 <SPI_EndRxTxTransaction>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2220      	movs	r2, #32
 800ac5e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10a      	bne.n	800ac7e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac68:	2300      	movs	r3, #0
 800ac6a:	617b      	str	r3, [r7, #20]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	617b      	str	r3, [r7, #20]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	617b      	str	r3, [r7, #20]
 800ac7c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2201      	movs	r2, #1
 800ac82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d001      	beq.n	800ac9a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e000      	b.n	800ac9c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
  }
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3720      	adds	r7, #32
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b088      	sub	sp, #32
 800aca8:	af02      	add	r7, sp, #8
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	603b      	str	r3, [r7, #0]
 800acb0:	4613      	mov	r3, r2
 800acb2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d001      	beq.n	800acc4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800acc0:	2302      	movs	r3, #2
 800acc2:	e104      	b.n	800aece <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800accc:	d112      	bne.n	800acf4 <HAL_SPI_Receive+0x50>
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d10e      	bne.n	800acf4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2204      	movs	r2, #4
 800acda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800acde:	88fa      	ldrh	r2, [r7, #6]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	4613      	mov	r3, r2
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	68b9      	ldr	r1, [r7, #8]
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f000 f8f3 	bl	800aed6 <HAL_SPI_TransmitReceive>
 800acf0:	4603      	mov	r3, r0
 800acf2:	e0ec      	b.n	800aece <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800acf4:	f7f9 fdb4 	bl	8004860 <HAL_GetTick>
 800acf8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d002      	beq.n	800ad06 <HAL_SPI_Receive+0x62>
 800ad00:	88fb      	ldrh	r3, [r7, #6]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	e0e1      	b.n	800aece <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d101      	bne.n	800ad18 <HAL_SPI_Receive+0x74>
 800ad14:	2302      	movs	r3, #2
 800ad16:	e0da      	b.n	800aece <HAL_SPI_Receive+0x22a>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2204      	movs	r2, #4
 800ad24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	88fa      	ldrh	r2, [r7, #6]
 800ad38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	88fa      	ldrh	r2, [r7, #6]
 800ad3e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2200      	movs	r2, #0
 800ad56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad66:	d10f      	bne.n	800ad88 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ad86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad92:	2b40      	cmp	r3, #64	@ 0x40
 800ad94:	d007      	beq.n	800ada6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ada4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d170      	bne.n	800ae90 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800adae:	e035      	b.n	800ae1c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	f003 0301 	and.w	r3, r3, #1
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d115      	bne.n	800adea <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f103 020c 	add.w	r2, r3, #12
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adca:	7812      	ldrb	r2, [r2, #0]
 800adcc:	b2d2      	uxtb	r2, r2
 800adce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800adde:	b29b      	uxth	r3, r3
 800ade0:	3b01      	subs	r3, #1
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ade8:	e018      	b.n	800ae1c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adea:	f7f9 fd39 	bl	8004860 <HAL_GetTick>
 800adee:	4602      	mov	r2, r0
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	1ad3      	subs	r3, r2, r3
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d803      	bhi.n	800ae02 <HAL_SPI_Receive+0x15e>
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae00:	d102      	bne.n	800ae08 <HAL_SPI_Receive+0x164>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d109      	bne.n	800ae1c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	e058      	b.n	800aece <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1c4      	bne.n	800adb0 <HAL_SPI_Receive+0x10c>
 800ae26:	e038      	b.n	800ae9a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	f003 0301 	and.w	r3, r3, #1
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d113      	bne.n	800ae5e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	68da      	ldr	r2, [r3, #12]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae40:	b292      	uxth	r2, r2
 800ae42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae48:	1c9a      	adds	r2, r3, #2
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	3b01      	subs	r3, #1
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ae5c:	e018      	b.n	800ae90 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae5e:	f7f9 fcff 	bl	8004860 <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	683a      	ldr	r2, [r7, #0]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d803      	bhi.n	800ae76 <HAL_SPI_Receive+0x1d2>
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae74:	d102      	bne.n	800ae7c <HAL_SPI_Receive+0x1d8>
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d109      	bne.n	800ae90 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e01e      	b.n	800aece <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1c6      	bne.n	800ae28 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f000 fa58 	bl	800b354 <SPI_EndRxTransaction>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d002      	beq.n	800aeb0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2220      	movs	r2, #32
 800aeae:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d001      	beq.n	800aecc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e000      	b.n	800aece <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800aecc:	2300      	movs	r3, #0
  }
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3718      	adds	r7, #24
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b08a      	sub	sp, #40	@ 0x28
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	60f8      	str	r0, [r7, #12]
 800aede:	60b9      	str	r1, [r7, #8]
 800aee0:	607a      	str	r2, [r7, #4]
 800aee2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800aee4:	2301      	movs	r3, #1
 800aee6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aee8:	f7f9 fcba 	bl	8004860 <HAL_GetTick>
 800aeec:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aef4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800aefc:	887b      	ldrh	r3, [r7, #2]
 800aefe:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800af00:	7ffb      	ldrb	r3, [r7, #31]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d00c      	beq.n	800af20 <HAL_SPI_TransmitReceive+0x4a>
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800af0c:	d106      	bne.n	800af1c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	689b      	ldr	r3, [r3, #8]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d102      	bne.n	800af1c <HAL_SPI_TransmitReceive+0x46>
 800af16:	7ffb      	ldrb	r3, [r7, #31]
 800af18:	2b04      	cmp	r3, #4
 800af1a:	d001      	beq.n	800af20 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800af1c:	2302      	movs	r3, #2
 800af1e:	e17f      	b.n	800b220 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d005      	beq.n	800af32 <HAL_SPI_TransmitReceive+0x5c>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d002      	beq.n	800af32 <HAL_SPI_TransmitReceive+0x5c>
 800af2c:	887b      	ldrh	r3, [r7, #2]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d101      	bne.n	800af36 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e174      	b.n	800b220 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d101      	bne.n	800af44 <HAL_SPI_TransmitReceive+0x6e>
 800af40:	2302      	movs	r3, #2
 800af42:	e16d      	b.n	800b220 <HAL_SPI_TransmitReceive+0x34a>
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800af52:	b2db      	uxtb	r3, r3
 800af54:	2b04      	cmp	r3, #4
 800af56:	d003      	beq.n	800af60 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2205      	movs	r2, #5
 800af5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	887a      	ldrh	r2, [r7, #2]
 800af70:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	887a      	ldrh	r2, [r7, #2]
 800af76:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	887a      	ldrh	r2, [r7, #2]
 800af82:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	887a      	ldrh	r2, [r7, #2]
 800af88:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2200      	movs	r2, #0
 800af94:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afa0:	2b40      	cmp	r3, #64	@ 0x40
 800afa2:	d007      	beq.n	800afb4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800afbc:	d17e      	bne.n	800b0bc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d002      	beq.n	800afcc <HAL_SPI_TransmitReceive+0xf6>
 800afc6:	8afb      	ldrh	r3, [r7, #22]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d16c      	bne.n	800b0a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd0:	881a      	ldrh	r2, [r3, #0]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afdc:	1c9a      	adds	r2, r3, #2
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	3b01      	subs	r3, #1
 800afea:	b29a      	uxth	r2, r3
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aff0:	e059      	b.n	800b0a6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	f003 0302 	and.w	r3, r3, #2
 800affc:	2b02      	cmp	r3, #2
 800affe:	d11b      	bne.n	800b038 <HAL_SPI_TransmitReceive+0x162>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b004:	b29b      	uxth	r3, r3
 800b006:	2b00      	cmp	r3, #0
 800b008:	d016      	beq.n	800b038 <HAL_SPI_TransmitReceive+0x162>
 800b00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d113      	bne.n	800b038 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b014:	881a      	ldrh	r2, [r3, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b020:	1c9a      	adds	r2, r3, #2
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	3b01      	subs	r3, #1
 800b02e:	b29a      	uxth	r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b034:	2300      	movs	r3, #0
 800b036:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	2b01      	cmp	r3, #1
 800b044:	d119      	bne.n	800b07a <HAL_SPI_TransmitReceive+0x1a4>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d014      	beq.n	800b07a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	68da      	ldr	r2, [r3, #12]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b05a:	b292      	uxth	r2, r2
 800b05c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b062:	1c9a      	adds	r2, r3, #2
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	3b01      	subs	r3, #1
 800b070:	b29a      	uxth	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b076:	2301      	movs	r3, #1
 800b078:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b07a:	f7f9 fbf1 	bl	8004860 <HAL_GetTick>
 800b07e:	4602      	mov	r2, r0
 800b080:	6a3b      	ldr	r3, [r7, #32]
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b086:	429a      	cmp	r2, r3
 800b088:	d80d      	bhi.n	800b0a6 <HAL_SPI_TransmitReceive+0x1d0>
 800b08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b090:	d009      	beq.n	800b0a6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	e0bc      	b.n	800b220 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d1a0      	bne.n	800aff2 <HAL_SPI_TransmitReceive+0x11c>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d19b      	bne.n	800aff2 <HAL_SPI_TransmitReceive+0x11c>
 800b0ba:	e082      	b.n	800b1c2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <HAL_SPI_TransmitReceive+0x1f4>
 800b0c4:	8afb      	ldrh	r3, [r7, #22]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d171      	bne.n	800b1ae <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	330c      	adds	r3, #12
 800b0d4:	7812      	ldrb	r2, [r2, #0]
 800b0d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0dc:	1c5a      	adds	r2, r3, #1
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0f0:	e05d      	b.n	800b1ae <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f003 0302 	and.w	r3, r3, #2
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d11c      	bne.n	800b13a <HAL_SPI_TransmitReceive+0x264>
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b104:	b29b      	uxth	r3, r3
 800b106:	2b00      	cmp	r3, #0
 800b108:	d017      	beq.n	800b13a <HAL_SPI_TransmitReceive+0x264>
 800b10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d114      	bne.n	800b13a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	330c      	adds	r3, #12
 800b11a:	7812      	ldrb	r2, [r2, #0]
 800b11c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	3b01      	subs	r3, #1
 800b130:	b29a      	uxth	r2, r3
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b136:	2300      	movs	r3, #0
 800b138:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	f003 0301 	and.w	r3, r3, #1
 800b144:	2b01      	cmp	r3, #1
 800b146:	d119      	bne.n	800b17c <HAL_SPI_TransmitReceive+0x2a6>
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d014      	beq.n	800b17c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68da      	ldr	r2, [r3, #12]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b15c:	b2d2      	uxtb	r2, r2
 800b15e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b164:	1c5a      	adds	r2, r3, #1
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b16e:	b29b      	uxth	r3, r3
 800b170:	3b01      	subs	r3, #1
 800b172:	b29a      	uxth	r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b178:	2301      	movs	r3, #1
 800b17a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b17c:	f7f9 fb70 	bl	8004860 <HAL_GetTick>
 800b180:	4602      	mov	r2, r0
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b188:	429a      	cmp	r2, r3
 800b18a:	d803      	bhi.n	800b194 <HAL_SPI_TransmitReceive+0x2be>
 800b18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b192:	d102      	bne.n	800b19a <HAL_SPI_TransmitReceive+0x2c4>
 800b194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b196:	2b00      	cmp	r3, #0
 800b198:	d109      	bne.n	800b1ae <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800b1aa:	2303      	movs	r3, #3
 800b1ac:	e038      	b.n	800b220 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d19c      	bne.n	800b0f2 <HAL_SPI_TransmitReceive+0x21c>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d197      	bne.n	800b0f2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b1c2:	6a3a      	ldr	r2, [r7, #32]
 800b1c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f000 f92a 	bl	800b420 <SPI_EndRxTxTransaction>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d008      	beq.n	800b1e4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e01d      	b.n	800b220 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d10a      	bne.n	800b202 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	613b      	str	r3, [r7, #16]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	613b      	str	r3, [r7, #16]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	613b      	str	r3, [r7, #16]
 800b200:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2201      	movs	r2, #1
 800b206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b216:	2b00      	cmp	r3, #0
 800b218:	d001      	beq.n	800b21e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800b21a:	2301      	movs	r3, #1
 800b21c:	e000      	b.n	800b220 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800b21e:	2300      	movs	r3, #0
  }
}
 800b220:	4618      	mov	r0, r3
 800b222:	3728      	adds	r7, #40	@ 0x28
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b236:	b2db      	uxtb	r3, r3
}
 800b238:	4618      	mov	r0, r3
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b088      	sub	sp, #32
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	603b      	str	r3, [r7, #0]
 800b250:	4613      	mov	r3, r2
 800b252:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b254:	f7f9 fb04 	bl	8004860 <HAL_GetTick>
 800b258:	4602      	mov	r2, r0
 800b25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25c:	1a9b      	subs	r3, r3, r2
 800b25e:	683a      	ldr	r2, [r7, #0]
 800b260:	4413      	add	r3, r2
 800b262:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b264:	f7f9 fafc 	bl	8004860 <HAL_GetTick>
 800b268:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b26a:	4b39      	ldr	r3, [pc, #228]	@ (800b350 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	015b      	lsls	r3, r3, #5
 800b270:	0d1b      	lsrs	r3, r3, #20
 800b272:	69fa      	ldr	r2, [r7, #28]
 800b274:	fb02 f303 	mul.w	r3, r2, r3
 800b278:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b27a:	e054      	b.n	800b326 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b282:	d050      	beq.n	800b326 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b284:	f7f9 faec 	bl	8004860 <HAL_GetTick>
 800b288:	4602      	mov	r2, r0
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	69fa      	ldr	r2, [r7, #28]
 800b290:	429a      	cmp	r2, r3
 800b292:	d902      	bls.n	800b29a <SPI_WaitFlagStateUntilTimeout+0x56>
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d13d      	bne.n	800b316 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b2a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b2b2:	d111      	bne.n	800b2d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2bc:	d004      	beq.n	800b2c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2c6:	d107      	bne.n	800b2d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b2d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2e0:	d10f      	bne.n	800b302 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b2f0:	601a      	str	r2, [r3, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b300:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b312:	2303      	movs	r3, #3
 800b314:	e017      	b.n	800b346 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d101      	bne.n	800b320 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b31c:	2300      	movs	r3, #0
 800b31e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	3b01      	subs	r3, #1
 800b324:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	689a      	ldr	r2, [r3, #8]
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	4013      	ands	r3, r2
 800b330:	68ba      	ldr	r2, [r7, #8]
 800b332:	429a      	cmp	r2, r3
 800b334:	bf0c      	ite	eq
 800b336:	2301      	moveq	r3, #1
 800b338:	2300      	movne	r3, #0
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	461a      	mov	r2, r3
 800b33e:	79fb      	ldrb	r3, [r7, #7]
 800b340:	429a      	cmp	r2, r3
 800b342:	d19b      	bne.n	800b27c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3720      	adds	r7, #32
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	200000ec 	.word	0x200000ec

0800b354 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af02      	add	r7, sp, #8
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b368:	d111      	bne.n	800b38e <SPI_EndRxTransaction+0x3a>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b372:	d004      	beq.n	800b37e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b37c:	d107      	bne.n	800b38e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b38c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b396:	d12a      	bne.n	800b3ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3a0:	d012      	beq.n	800b3c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	9300      	str	r3, [sp, #0]
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2180      	movs	r1, #128	@ 0x80
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f7ff ff49 	bl	800b244 <SPI_WaitFlagStateUntilTimeout>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d02d      	beq.n	800b414 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3bc:	f043 0220 	orr.w	r2, r3, #32
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	e026      	b.n	800b416 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f7ff ff36 	bl	800b244 <SPI_WaitFlagStateUntilTimeout>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d01a      	beq.n	800b414 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3e2:	f043 0220 	orr.w	r2, r3, #32
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	e013      	b.n	800b416 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	9300      	str	r3, [sp, #0]
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	2101      	movs	r1, #1
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f7ff ff23 	bl	800b244 <SPI_WaitFlagStateUntilTimeout>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d007      	beq.n	800b414 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b408:	f043 0220 	orr.w	r2, r3, #32
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b410:	2303      	movs	r3, #3
 800b412:	e000      	b.n	800b416 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
	...

0800b420 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	af02      	add	r7, sp, #8
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	2201      	movs	r2, #1
 800b434:	2102      	movs	r1, #2
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f7ff ff04 	bl	800b244 <SPI_WaitFlagStateUntilTimeout>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d007      	beq.n	800b452 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b446:	f043 0220 	orr.w	r2, r3, #32
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	e032      	b.n	800b4b8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b452:	4b1b      	ldr	r3, [pc, #108]	@ (800b4c0 <SPI_EndRxTxTransaction+0xa0>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a1b      	ldr	r2, [pc, #108]	@ (800b4c4 <SPI_EndRxTxTransaction+0xa4>)
 800b458:	fba2 2303 	umull	r2, r3, r2, r3
 800b45c:	0d5b      	lsrs	r3, r3, #21
 800b45e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b462:	fb02 f303 	mul.w	r3, r2, r3
 800b466:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b470:	d112      	bne.n	800b498 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	2200      	movs	r2, #0
 800b47a:	2180      	movs	r1, #128	@ 0x80
 800b47c:	68f8      	ldr	r0, [r7, #12]
 800b47e:	f7ff fee1 	bl	800b244 <SPI_WaitFlagStateUntilTimeout>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d016      	beq.n	800b4b6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b48c:	f043 0220 	orr.w	r2, r3, #32
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b494:	2303      	movs	r3, #3
 800b496:	e00f      	b.n	800b4b8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00a      	beq.n	800b4b4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4ae:	2b80      	cmp	r3, #128	@ 0x80
 800b4b0:	d0f2      	beq.n	800b498 <SPI_EndRxTxTransaction+0x78>
 800b4b2:	e000      	b.n	800b4b6 <SPI_EndRxTxTransaction+0x96>
        break;
 800b4b4:	bf00      	nop
  }

  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	200000ec 	.word	0x200000ec
 800b4c4:	165e9f81 	.word	0x165e9f81

0800b4c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e041      	b.n	800b55e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d106      	bne.n	800b4f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7f6 ffbe 	bl	8002470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	3304      	adds	r3, #4
 800b504:	4619      	mov	r1, r3
 800b506:	4610      	mov	r0, r2
 800b508:	f000 fa7e 	bl	800ba08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2201      	movs	r2, #1
 800b548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2201      	movs	r2, #1
 800b558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
	...

0800b568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d001      	beq.n	800b580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e04e      	b.n	800b61e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2202      	movs	r2, #2
 800b584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68da      	ldr	r2, [r3, #12]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f042 0201 	orr.w	r2, r2, #1
 800b596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a23      	ldr	r2, [pc, #140]	@ (800b62c <HAL_TIM_Base_Start_IT+0xc4>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d022      	beq.n	800b5e8 <HAL_TIM_Base_Start_IT+0x80>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5aa:	d01d      	beq.n	800b5e8 <HAL_TIM_Base_Start_IT+0x80>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a1f      	ldr	r2, [pc, #124]	@ (800b630 <HAL_TIM_Base_Start_IT+0xc8>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d018      	beq.n	800b5e8 <HAL_TIM_Base_Start_IT+0x80>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b634 <HAL_TIM_Base_Start_IT+0xcc>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d013      	beq.n	800b5e8 <HAL_TIM_Base_Start_IT+0x80>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a1c      	ldr	r2, [pc, #112]	@ (800b638 <HAL_TIM_Base_Start_IT+0xd0>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d00e      	beq.n	800b5e8 <HAL_TIM_Base_Start_IT+0x80>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a1b      	ldr	r2, [pc, #108]	@ (800b63c <HAL_TIM_Base_Start_IT+0xd4>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d009      	beq.n	800b5e8 <HAL_TIM_Base_Start_IT+0x80>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4a19      	ldr	r2, [pc, #100]	@ (800b640 <HAL_TIM_Base_Start_IT+0xd8>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d004      	beq.n	800b5e8 <HAL_TIM_Base_Start_IT+0x80>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a18      	ldr	r2, [pc, #96]	@ (800b644 <HAL_TIM_Base_Start_IT+0xdc>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d111      	bne.n	800b60c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	f003 0307 	and.w	r3, r3, #7
 800b5f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2b06      	cmp	r3, #6
 800b5f8:	d010      	beq.n	800b61c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f042 0201 	orr.w	r2, r2, #1
 800b608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b60a:	e007      	b.n	800b61c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f042 0201 	orr.w	r2, r2, #1
 800b61a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3714      	adds	r7, #20
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	40010000 	.word	0x40010000
 800b630:	40000400 	.word	0x40000400
 800b634:	40000800 	.word	0x40000800
 800b638:	40000c00 	.word	0x40000c00
 800b63c:	40010400 	.word	0x40010400
 800b640:	40014000 	.word	0x40014000
 800b644:	40001800 	.word	0x40001800

0800b648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	f003 0302 	and.w	r3, r3, #2
 800b666:	2b00      	cmp	r3, #0
 800b668:	d020      	beq.n	800b6ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f003 0302 	and.w	r3, r3, #2
 800b670:	2b00      	cmp	r3, #0
 800b672:	d01b      	beq.n	800b6ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f06f 0202 	mvn.w	r2, #2
 800b67c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2201      	movs	r2, #1
 800b682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	f003 0303 	and.w	r3, r3, #3
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d003      	beq.n	800b69a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f999 	bl	800b9ca <HAL_TIM_IC_CaptureCallback>
 800b698:	e005      	b.n	800b6a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f98b 	bl	800b9b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f99c 	bl	800b9de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	f003 0304 	and.w	r3, r3, #4
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d020      	beq.n	800b6f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f003 0304 	and.w	r3, r3, #4
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d01b      	beq.n	800b6f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f06f 0204 	mvn.w	r2, #4
 800b6c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2202      	movs	r2, #2
 800b6ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	699b      	ldr	r3, [r3, #24]
 800b6d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d003      	beq.n	800b6e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f973 	bl	800b9ca <HAL_TIM_IC_CaptureCallback>
 800b6e4:	e005      	b.n	800b6f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f965 	bl	800b9b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f976 	bl	800b9de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	f003 0308 	and.w	r3, r3, #8
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d020      	beq.n	800b744 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f003 0308 	and.w	r3, r3, #8
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d01b      	beq.n	800b744 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f06f 0208 	mvn.w	r2, #8
 800b714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2204      	movs	r2, #4
 800b71a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	69db      	ldr	r3, [r3, #28]
 800b722:	f003 0303 	and.w	r3, r3, #3
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f94d 	bl	800b9ca <HAL_TIM_IC_CaptureCallback>
 800b730:	e005      	b.n	800b73e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f93f 	bl	800b9b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f950 	bl	800b9de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f003 0310 	and.w	r3, r3, #16
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d020      	beq.n	800b790 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f003 0310 	and.w	r3, r3, #16
 800b754:	2b00      	cmp	r3, #0
 800b756:	d01b      	beq.n	800b790 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f06f 0210 	mvn.w	r2, #16
 800b760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2208      	movs	r2, #8
 800b766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	69db      	ldr	r3, [r3, #28]
 800b76e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b772:	2b00      	cmp	r3, #0
 800b774:	d003      	beq.n	800b77e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f927 	bl	800b9ca <HAL_TIM_IC_CaptureCallback>
 800b77c:	e005      	b.n	800b78a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f919 	bl	800b9b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f92a 	bl	800b9de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	f003 0301 	and.w	r3, r3, #1
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00c      	beq.n	800b7b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f003 0301 	and.w	r3, r3, #1
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d007      	beq.n	800b7b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f06f 0201 	mvn.w	r2, #1
 800b7ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7f6 fb90 	bl	8001ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00c      	beq.n	800b7d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d007      	beq.n	800b7d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b7d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fae4 	bl	800bda0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00c      	beq.n	800b7fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d007      	beq.n	800b7fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b7f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 f8fb 	bl	800b9f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	f003 0320 	and.w	r3, r3, #32
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00c      	beq.n	800b820 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f003 0320 	and.w	r3, r3, #32
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d007      	beq.n	800b820 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f06f 0220 	mvn.w	r2, #32
 800b818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 fab6 	bl	800bd8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b820:	bf00      	nop
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d101      	bne.n	800b844 <HAL_TIM_ConfigClockSource+0x1c>
 800b840:	2302      	movs	r3, #2
 800b842:	e0b4      	b.n	800b9ae <HAL_TIM_ConfigClockSource+0x186>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2202      	movs	r2, #2
 800b850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b86a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b87c:	d03e      	beq.n	800b8fc <HAL_TIM_ConfigClockSource+0xd4>
 800b87e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b882:	f200 8087 	bhi.w	800b994 <HAL_TIM_ConfigClockSource+0x16c>
 800b886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b88a:	f000 8086 	beq.w	800b99a <HAL_TIM_ConfigClockSource+0x172>
 800b88e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b892:	d87f      	bhi.n	800b994 <HAL_TIM_ConfigClockSource+0x16c>
 800b894:	2b70      	cmp	r3, #112	@ 0x70
 800b896:	d01a      	beq.n	800b8ce <HAL_TIM_ConfigClockSource+0xa6>
 800b898:	2b70      	cmp	r3, #112	@ 0x70
 800b89a:	d87b      	bhi.n	800b994 <HAL_TIM_ConfigClockSource+0x16c>
 800b89c:	2b60      	cmp	r3, #96	@ 0x60
 800b89e:	d050      	beq.n	800b942 <HAL_TIM_ConfigClockSource+0x11a>
 800b8a0:	2b60      	cmp	r3, #96	@ 0x60
 800b8a2:	d877      	bhi.n	800b994 <HAL_TIM_ConfigClockSource+0x16c>
 800b8a4:	2b50      	cmp	r3, #80	@ 0x50
 800b8a6:	d03c      	beq.n	800b922 <HAL_TIM_ConfigClockSource+0xfa>
 800b8a8:	2b50      	cmp	r3, #80	@ 0x50
 800b8aa:	d873      	bhi.n	800b994 <HAL_TIM_ConfigClockSource+0x16c>
 800b8ac:	2b40      	cmp	r3, #64	@ 0x40
 800b8ae:	d058      	beq.n	800b962 <HAL_TIM_ConfigClockSource+0x13a>
 800b8b0:	2b40      	cmp	r3, #64	@ 0x40
 800b8b2:	d86f      	bhi.n	800b994 <HAL_TIM_ConfigClockSource+0x16c>
 800b8b4:	2b30      	cmp	r3, #48	@ 0x30
 800b8b6:	d064      	beq.n	800b982 <HAL_TIM_ConfigClockSource+0x15a>
 800b8b8:	2b30      	cmp	r3, #48	@ 0x30
 800b8ba:	d86b      	bhi.n	800b994 <HAL_TIM_ConfigClockSource+0x16c>
 800b8bc:	2b20      	cmp	r3, #32
 800b8be:	d060      	beq.n	800b982 <HAL_TIM_ConfigClockSource+0x15a>
 800b8c0:	2b20      	cmp	r3, #32
 800b8c2:	d867      	bhi.n	800b994 <HAL_TIM_ConfigClockSource+0x16c>
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d05c      	beq.n	800b982 <HAL_TIM_ConfigClockSource+0x15a>
 800b8c8:	2b10      	cmp	r3, #16
 800b8ca:	d05a      	beq.n	800b982 <HAL_TIM_ConfigClockSource+0x15a>
 800b8cc:	e062      	b.n	800b994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b8de:	f000 f9b9 	bl	800bc54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b8f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	609a      	str	r2, [r3, #8]
      break;
 800b8fa:	e04f      	b.n	800b99c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b90c:	f000 f9a2 	bl	800bc54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	689a      	ldr	r2, [r3, #8]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b91e:	609a      	str	r2, [r3, #8]
      break;
 800b920:	e03c      	b.n	800b99c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b92e:	461a      	mov	r2, r3
 800b930:	f000 f916 	bl	800bb60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2150      	movs	r1, #80	@ 0x50
 800b93a:	4618      	mov	r0, r3
 800b93c:	f000 f96f 	bl	800bc1e <TIM_ITRx_SetConfig>
      break;
 800b940:	e02c      	b.n	800b99c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b94e:	461a      	mov	r2, r3
 800b950:	f000 f935 	bl	800bbbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2160      	movs	r1, #96	@ 0x60
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 f95f 	bl	800bc1e <TIM_ITRx_SetConfig>
      break;
 800b960:	e01c      	b.n	800b99c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b96e:	461a      	mov	r2, r3
 800b970:	f000 f8f6 	bl	800bb60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2140      	movs	r1, #64	@ 0x40
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 f94f 	bl	800bc1e <TIM_ITRx_SetConfig>
      break;
 800b980:	e00c      	b.n	800b99c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4619      	mov	r1, r3
 800b98c:	4610      	mov	r0, r2
 800b98e:	f000 f946 	bl	800bc1e <TIM_ITRx_SetConfig>
      break;
 800b992:	e003      	b.n	800b99c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	73fb      	strb	r3, [r7, #15]
      break;
 800b998:	e000      	b.n	800b99c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b99a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	b083      	sub	sp, #12
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b9be:	bf00      	nop
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b083      	sub	sp, #12
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b9d2:	bf00      	nop
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b083      	sub	sp, #12
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b9e6:	bf00      	nop
 800b9e8:	370c      	adds	r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b083      	sub	sp, #12
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b9fa:	bf00      	nop
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
	...

0800ba08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a46      	ldr	r2, [pc, #280]	@ (800bb34 <TIM_Base_SetConfig+0x12c>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d013      	beq.n	800ba48 <TIM_Base_SetConfig+0x40>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba26:	d00f      	beq.n	800ba48 <TIM_Base_SetConfig+0x40>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a43      	ldr	r2, [pc, #268]	@ (800bb38 <TIM_Base_SetConfig+0x130>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d00b      	beq.n	800ba48 <TIM_Base_SetConfig+0x40>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4a42      	ldr	r2, [pc, #264]	@ (800bb3c <TIM_Base_SetConfig+0x134>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d007      	beq.n	800ba48 <TIM_Base_SetConfig+0x40>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a41      	ldr	r2, [pc, #260]	@ (800bb40 <TIM_Base_SetConfig+0x138>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d003      	beq.n	800ba48 <TIM_Base_SetConfig+0x40>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a40      	ldr	r2, [pc, #256]	@ (800bb44 <TIM_Base_SetConfig+0x13c>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d108      	bne.n	800ba5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a35      	ldr	r2, [pc, #212]	@ (800bb34 <TIM_Base_SetConfig+0x12c>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d02b      	beq.n	800baba <TIM_Base_SetConfig+0xb2>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba68:	d027      	beq.n	800baba <TIM_Base_SetConfig+0xb2>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a32      	ldr	r2, [pc, #200]	@ (800bb38 <TIM_Base_SetConfig+0x130>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d023      	beq.n	800baba <TIM_Base_SetConfig+0xb2>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4a31      	ldr	r2, [pc, #196]	@ (800bb3c <TIM_Base_SetConfig+0x134>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d01f      	beq.n	800baba <TIM_Base_SetConfig+0xb2>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4a30      	ldr	r2, [pc, #192]	@ (800bb40 <TIM_Base_SetConfig+0x138>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d01b      	beq.n	800baba <TIM_Base_SetConfig+0xb2>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4a2f      	ldr	r2, [pc, #188]	@ (800bb44 <TIM_Base_SetConfig+0x13c>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d017      	beq.n	800baba <TIM_Base_SetConfig+0xb2>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4a2e      	ldr	r2, [pc, #184]	@ (800bb48 <TIM_Base_SetConfig+0x140>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d013      	beq.n	800baba <TIM_Base_SetConfig+0xb2>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a2d      	ldr	r2, [pc, #180]	@ (800bb4c <TIM_Base_SetConfig+0x144>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d00f      	beq.n	800baba <TIM_Base_SetConfig+0xb2>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4a2c      	ldr	r2, [pc, #176]	@ (800bb50 <TIM_Base_SetConfig+0x148>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d00b      	beq.n	800baba <TIM_Base_SetConfig+0xb2>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4a2b      	ldr	r2, [pc, #172]	@ (800bb54 <TIM_Base_SetConfig+0x14c>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d007      	beq.n	800baba <TIM_Base_SetConfig+0xb2>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	4a2a      	ldr	r2, [pc, #168]	@ (800bb58 <TIM_Base_SetConfig+0x150>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d003      	beq.n	800baba <TIM_Base_SetConfig+0xb2>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a29      	ldr	r2, [pc, #164]	@ (800bb5c <TIM_Base_SetConfig+0x154>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d108      	bne.n	800bacc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	4313      	orrs	r3, r2
 800baca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	695b      	ldr	r3, [r3, #20]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	689a      	ldr	r2, [r3, #8]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a10      	ldr	r2, [pc, #64]	@ (800bb34 <TIM_Base_SetConfig+0x12c>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d003      	beq.n	800bb00 <TIM_Base_SetConfig+0xf8>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a12      	ldr	r2, [pc, #72]	@ (800bb44 <TIM_Base_SetConfig+0x13c>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d103      	bne.n	800bb08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	691a      	ldr	r2, [r3, #16]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	f003 0301 	and.w	r3, r3, #1
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d105      	bne.n	800bb26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	f023 0201 	bic.w	r2, r3, #1
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	611a      	str	r2, [r3, #16]
  }
}
 800bb26:	bf00      	nop
 800bb28:	3714      	adds	r7, #20
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	40010000 	.word	0x40010000
 800bb38:	40000400 	.word	0x40000400
 800bb3c:	40000800 	.word	0x40000800
 800bb40:	40000c00 	.word	0x40000c00
 800bb44:	40010400 	.word	0x40010400
 800bb48:	40014000 	.word	0x40014000
 800bb4c:	40014400 	.word	0x40014400
 800bb50:	40014800 	.word	0x40014800
 800bb54:	40001800 	.word	0x40001800
 800bb58:	40001c00 	.word	0x40001c00
 800bb5c:	40002000 	.word	0x40002000

0800bb60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b087      	sub	sp, #28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6a1b      	ldr	r3, [r3, #32]
 800bb70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6a1b      	ldr	r3, [r3, #32]
 800bb76:	f023 0201 	bic.w	r2, r3, #1
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	011b      	lsls	r3, r3, #4
 800bb90:	693a      	ldr	r2, [r7, #16]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	f023 030a 	bic.w	r3, r3, #10
 800bb9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb9e:	697a      	ldr	r2, [r7, #20]
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	4313      	orrs	r3, r2
 800bba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	621a      	str	r2, [r3, #32]
}
 800bbb2:	bf00      	nop
 800bbb4:	371c      	adds	r7, #28
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b087      	sub	sp, #28
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	60f8      	str	r0, [r7, #12]
 800bbc6:	60b9      	str	r1, [r7, #8]
 800bbc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6a1b      	ldr	r3, [r3, #32]
 800bbce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6a1b      	ldr	r3, [r3, #32]
 800bbd4:	f023 0210 	bic.w	r2, r3, #16
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	699b      	ldr	r3, [r3, #24]
 800bbe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bbe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	031b      	lsls	r3, r3, #12
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bbfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	011b      	lsls	r3, r3, #4
 800bc00:	697a      	ldr	r2, [r7, #20]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	693a      	ldr	r2, [r7, #16]
 800bc0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	621a      	str	r2, [r3, #32]
}
 800bc12:	bf00      	nop
 800bc14:	371c      	adds	r7, #28
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr

0800bc1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc1e:	b480      	push	{r7}
 800bc20:	b085      	sub	sp, #20
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
 800bc26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	f043 0307 	orr.w	r3, r3, #7
 800bc40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	609a      	str	r2, [r3, #8]
}
 800bc48:	bf00      	nop
 800bc4a:	3714      	adds	r7, #20
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b087      	sub	sp, #28
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
 800bc60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	021a      	lsls	r2, r3, #8
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	431a      	orrs	r2, r3
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	697a      	ldr	r2, [r7, #20]
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	609a      	str	r2, [r3, #8]
}
 800bc88:	bf00      	nop
 800bc8a:	371c      	adds	r7, #28
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b085      	sub	sp, #20
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d101      	bne.n	800bcac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bca8:	2302      	movs	r3, #2
 800bcaa:	e05a      	b.n	800bd62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2202      	movs	r2, #2
 800bcb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	689b      	ldr	r3, [r3, #8]
 800bcca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a21      	ldr	r2, [pc, #132]	@ (800bd70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d022      	beq.n	800bd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcf8:	d01d      	beq.n	800bd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a1d      	ldr	r2, [pc, #116]	@ (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d018      	beq.n	800bd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a1b      	ldr	r2, [pc, #108]	@ (800bd78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d013      	beq.n	800bd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a1a      	ldr	r2, [pc, #104]	@ (800bd7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d00e      	beq.n	800bd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a18      	ldr	r2, [pc, #96]	@ (800bd80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d009      	beq.n	800bd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a17      	ldr	r2, [pc, #92]	@ (800bd84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d004      	beq.n	800bd36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a15      	ldr	r2, [pc, #84]	@ (800bd88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d10c      	bne.n	800bd50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	68ba      	ldr	r2, [r7, #8]
 800bd44:	4313      	orrs	r3, r2
 800bd46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3714      	adds	r7, #20
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	40010000 	.word	0x40010000
 800bd74:	40000400 	.word	0x40000400
 800bd78:	40000800 	.word	0x40000800
 800bd7c:	40000c00 	.word	0x40000c00
 800bd80:	40010400 	.word	0x40010400
 800bd84:	40014000 	.word	0x40014000
 800bd88:	40001800 	.word	0x40001800

0800bd8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d101      	bne.n	800bdc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e042      	b.n	800be4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d106      	bne.n	800bde0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7f6 fb8e 	bl	80024fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2224      	movs	r2, #36	@ 0x24
 800bde4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	68da      	ldr	r2, [r3, #12]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bdf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f973 	bl	800c0e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	691a      	ldr	r2, [r3, #16]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	695a      	ldr	r2, [r3, #20]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68da      	ldr	r2, [r3, #12]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800be2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2220      	movs	r2, #32
 800be38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2220      	movs	r2, #32
 800be40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2200      	movs	r2, #0
 800be48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08a      	sub	sp, #40	@ 0x28
 800be58:	af02      	add	r7, sp, #8
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	603b      	str	r3, [r7, #0]
 800be60:	4613      	mov	r3, r2
 800be62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800be64:	2300      	movs	r3, #0
 800be66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b20      	cmp	r3, #32
 800be72:	d175      	bne.n	800bf60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d002      	beq.n	800be80 <HAL_UART_Transmit+0x2c>
 800be7a:	88fb      	ldrh	r3, [r7, #6]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e06e      	b.n	800bf62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2221      	movs	r2, #33	@ 0x21
 800be8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be92:	f7f8 fce5 	bl	8004860 <HAL_GetTick>
 800be96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	88fa      	ldrh	r2, [r7, #6]
 800be9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	88fa      	ldrh	r2, [r7, #6]
 800bea2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800beac:	d108      	bne.n	800bec0 <HAL_UART_Transmit+0x6c>
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	691b      	ldr	r3, [r3, #16]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d104      	bne.n	800bec0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800beb6:	2300      	movs	r3, #0
 800beb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	61bb      	str	r3, [r7, #24]
 800bebe:	e003      	b.n	800bec8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bec4:	2300      	movs	r3, #0
 800bec6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bec8:	e02e      	b.n	800bf28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	2200      	movs	r2, #0
 800bed2:	2180      	movs	r1, #128	@ 0x80
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f000 f848 	bl	800bf6a <UART_WaitOnFlagUntilTimeout>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d005      	beq.n	800beec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2220      	movs	r2, #32
 800bee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800bee8:	2303      	movs	r3, #3
 800beea:	e03a      	b.n	800bf62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d10b      	bne.n	800bf0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	881b      	ldrh	r3, [r3, #0]
 800bef6:	461a      	mov	r2, r3
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	3302      	adds	r3, #2
 800bf06:	61bb      	str	r3, [r7, #24]
 800bf08:	e007      	b.n	800bf1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	781a      	ldrb	r2, [r3, #0]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	3301      	adds	r3, #1
 800bf18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	3b01      	subs	r3, #1
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d1cb      	bne.n	800beca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	2140      	movs	r1, #64	@ 0x40
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f000 f814 	bl	800bf6a <UART_WaitOnFlagUntilTimeout>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d005      	beq.n	800bf54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2220      	movs	r2, #32
 800bf4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800bf50:	2303      	movs	r3, #3
 800bf52:	e006      	b.n	800bf62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2220      	movs	r2, #32
 800bf58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	e000      	b.n	800bf62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800bf60:	2302      	movs	r3, #2
  }
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3720      	adds	r7, #32
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b086      	sub	sp, #24
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	60f8      	str	r0, [r7, #12]
 800bf72:	60b9      	str	r1, [r7, #8]
 800bf74:	603b      	str	r3, [r7, #0]
 800bf76:	4613      	mov	r3, r2
 800bf78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf7a:	e03b      	b.n	800bff4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf7c:	6a3b      	ldr	r3, [r7, #32]
 800bf7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf82:	d037      	beq.n	800bff4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf84:	f7f8 fc6c 	bl	8004860 <HAL_GetTick>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	1ad3      	subs	r3, r2, r3
 800bf8e:	6a3a      	ldr	r2, [r7, #32]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d302      	bcc.n	800bf9a <UART_WaitOnFlagUntilTimeout+0x30>
 800bf94:	6a3b      	ldr	r3, [r7, #32]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d101      	bne.n	800bf9e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	e03a      	b.n	800c014 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	f003 0304 	and.w	r3, r3, #4
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d023      	beq.n	800bff4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b80      	cmp	r3, #128	@ 0x80
 800bfb0:	d020      	beq.n	800bff4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	2b40      	cmp	r3, #64	@ 0x40
 800bfb6:	d01d      	beq.n	800bff4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f003 0308 	and.w	r3, r3, #8
 800bfc2:	2b08      	cmp	r3, #8
 800bfc4:	d116      	bne.n	800bff4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	617b      	str	r3, [r7, #20]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	617b      	str	r3, [r7, #20]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	617b      	str	r3, [r7, #20]
 800bfda:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f000 f81d 	bl	800c01c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2208      	movs	r2, #8
 800bfe6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e00f      	b.n	800c014 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	4013      	ands	r3, r2
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	429a      	cmp	r2, r3
 800c002:	bf0c      	ite	eq
 800c004:	2301      	moveq	r3, #1
 800c006:	2300      	movne	r3, #0
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	461a      	mov	r2, r3
 800c00c:	79fb      	ldrb	r3, [r7, #7]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d0b4      	beq.n	800bf7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b095      	sub	sp, #84	@ 0x54
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	330c      	adds	r3, #12
 800c02a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c02e:	e853 3f00 	ldrex	r3, [r3]
 800c032:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c03a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	330c      	adds	r3, #12
 800c042:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c044:	643a      	str	r2, [r7, #64]	@ 0x40
 800c046:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c048:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c04a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c04c:	e841 2300 	strex	r3, r2, [r1]
 800c050:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1e5      	bne.n	800c024 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	3314      	adds	r3, #20
 800c05e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	e853 3f00 	ldrex	r3, [r3]
 800c066:	61fb      	str	r3, [r7, #28]
   return(result);
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	f023 0301 	bic.w	r3, r3, #1
 800c06e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	3314      	adds	r3, #20
 800c076:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c078:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c07a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c07e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c080:	e841 2300 	strex	r3, r2, [r1]
 800c084:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d1e5      	bne.n	800c058 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c090:	2b01      	cmp	r3, #1
 800c092:	d119      	bne.n	800c0c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	330c      	adds	r3, #12
 800c09a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	e853 3f00 	ldrex	r3, [r3]
 800c0a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	f023 0310 	bic.w	r3, r3, #16
 800c0aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	330c      	adds	r3, #12
 800c0b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0b4:	61ba      	str	r2, [r7, #24]
 800c0b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b8:	6979      	ldr	r1, [r7, #20]
 800c0ba:	69ba      	ldr	r2, [r7, #24]
 800c0bc:	e841 2300 	strex	r3, r2, [r1]
 800c0c0:	613b      	str	r3, [r7, #16]
   return(result);
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1e5      	bne.n	800c094 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2220      	movs	r2, #32
 800c0cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c0d6:	bf00      	nop
 800c0d8:	3754      	adds	r7, #84	@ 0x54
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
	...

0800c0e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0e8:	b0c0      	sub	sp, #256	@ 0x100
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c0fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c100:	68d9      	ldr	r1, [r3, #12]
 800c102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	ea40 0301 	orr.w	r3, r0, r1
 800c10c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c10e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c112:	689a      	ldr	r2, [r3, #8]
 800c114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	431a      	orrs	r2, r3
 800c11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c120:	695b      	ldr	r3, [r3, #20]
 800c122:	431a      	orrs	r2, r3
 800c124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c128:	69db      	ldr	r3, [r3, #28]
 800c12a:	4313      	orrs	r3, r2
 800c12c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c13c:	f021 010c 	bic.w	r1, r1, #12
 800c140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c144:	681a      	ldr	r2, [r3, #0]
 800c146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c14a:	430b      	orrs	r3, r1
 800c14c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c15a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c15e:	6999      	ldr	r1, [r3, #24]
 800c160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	ea40 0301 	orr.w	r3, r0, r1
 800c16a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c16c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	4b8f      	ldr	r3, [pc, #572]	@ (800c3b0 <UART_SetConfig+0x2cc>)
 800c174:	429a      	cmp	r2, r3
 800c176:	d005      	beq.n	800c184 <UART_SetConfig+0xa0>
 800c178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	4b8d      	ldr	r3, [pc, #564]	@ (800c3b4 <UART_SetConfig+0x2d0>)
 800c180:	429a      	cmp	r2, r3
 800c182:	d104      	bne.n	800c18e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c184:	f7fe f902 	bl	800a38c <HAL_RCC_GetPCLK2Freq>
 800c188:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c18c:	e003      	b.n	800c196 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c18e:	f7fe f8e9 	bl	800a364 <HAL_RCC_GetPCLK1Freq>
 800c192:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c19a:	69db      	ldr	r3, [r3, #28]
 800c19c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1a0:	f040 810c 	bne.w	800c3bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c1a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c1ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c1b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c1b6:	4622      	mov	r2, r4
 800c1b8:	462b      	mov	r3, r5
 800c1ba:	1891      	adds	r1, r2, r2
 800c1bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c1be:	415b      	adcs	r3, r3
 800c1c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c1c6:	4621      	mov	r1, r4
 800c1c8:	eb12 0801 	adds.w	r8, r2, r1
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	eb43 0901 	adc.w	r9, r3, r1
 800c1d2:	f04f 0200 	mov.w	r2, #0
 800c1d6:	f04f 0300 	mov.w	r3, #0
 800c1da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c1de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c1e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c1e6:	4690      	mov	r8, r2
 800c1e8:	4699      	mov	r9, r3
 800c1ea:	4623      	mov	r3, r4
 800c1ec:	eb18 0303 	adds.w	r3, r8, r3
 800c1f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c1f4:	462b      	mov	r3, r5
 800c1f6:	eb49 0303 	adc.w	r3, r9, r3
 800c1fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c1fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c20a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c20e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c212:	460b      	mov	r3, r1
 800c214:	18db      	adds	r3, r3, r3
 800c216:	653b      	str	r3, [r7, #80]	@ 0x50
 800c218:	4613      	mov	r3, r2
 800c21a:	eb42 0303 	adc.w	r3, r2, r3
 800c21e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c220:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c224:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c228:	f7f4 f83a 	bl	80002a0 <__aeabi_uldivmod>
 800c22c:	4602      	mov	r2, r0
 800c22e:	460b      	mov	r3, r1
 800c230:	4b61      	ldr	r3, [pc, #388]	@ (800c3b8 <UART_SetConfig+0x2d4>)
 800c232:	fba3 2302 	umull	r2, r3, r3, r2
 800c236:	095b      	lsrs	r3, r3, #5
 800c238:	011c      	lsls	r4, r3, #4
 800c23a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c23e:	2200      	movs	r2, #0
 800c240:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c244:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c248:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c24c:	4642      	mov	r2, r8
 800c24e:	464b      	mov	r3, r9
 800c250:	1891      	adds	r1, r2, r2
 800c252:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c254:	415b      	adcs	r3, r3
 800c256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c25c:	4641      	mov	r1, r8
 800c25e:	eb12 0a01 	adds.w	sl, r2, r1
 800c262:	4649      	mov	r1, r9
 800c264:	eb43 0b01 	adc.w	fp, r3, r1
 800c268:	f04f 0200 	mov.w	r2, #0
 800c26c:	f04f 0300 	mov.w	r3, #0
 800c270:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c274:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c27c:	4692      	mov	sl, r2
 800c27e:	469b      	mov	fp, r3
 800c280:	4643      	mov	r3, r8
 800c282:	eb1a 0303 	adds.w	r3, sl, r3
 800c286:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c28a:	464b      	mov	r3, r9
 800c28c:	eb4b 0303 	adc.w	r3, fp, r3
 800c290:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c2a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c2a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	18db      	adds	r3, r3, r3
 800c2ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	eb42 0303 	adc.w	r3, r2, r3
 800c2b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c2ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c2be:	f7f3 ffef 	bl	80002a0 <__aeabi_uldivmod>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	4b3b      	ldr	r3, [pc, #236]	@ (800c3b8 <UART_SetConfig+0x2d4>)
 800c2ca:	fba3 2301 	umull	r2, r3, r3, r1
 800c2ce:	095b      	lsrs	r3, r3, #5
 800c2d0:	2264      	movs	r2, #100	@ 0x64
 800c2d2:	fb02 f303 	mul.w	r3, r2, r3
 800c2d6:	1acb      	subs	r3, r1, r3
 800c2d8:	00db      	lsls	r3, r3, #3
 800c2da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c2de:	4b36      	ldr	r3, [pc, #216]	@ (800c3b8 <UART_SetConfig+0x2d4>)
 800c2e0:	fba3 2302 	umull	r2, r3, r3, r2
 800c2e4:	095b      	lsrs	r3, r3, #5
 800c2e6:	005b      	lsls	r3, r3, #1
 800c2e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c2ec:	441c      	add	r4, r3
 800c2ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c2f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c2fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c300:	4642      	mov	r2, r8
 800c302:	464b      	mov	r3, r9
 800c304:	1891      	adds	r1, r2, r2
 800c306:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c308:	415b      	adcs	r3, r3
 800c30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c30c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c310:	4641      	mov	r1, r8
 800c312:	1851      	adds	r1, r2, r1
 800c314:	6339      	str	r1, [r7, #48]	@ 0x30
 800c316:	4649      	mov	r1, r9
 800c318:	414b      	adcs	r3, r1
 800c31a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c31c:	f04f 0200 	mov.w	r2, #0
 800c320:	f04f 0300 	mov.w	r3, #0
 800c324:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c328:	4659      	mov	r1, fp
 800c32a:	00cb      	lsls	r3, r1, #3
 800c32c:	4651      	mov	r1, sl
 800c32e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c332:	4651      	mov	r1, sl
 800c334:	00ca      	lsls	r2, r1, #3
 800c336:	4610      	mov	r0, r2
 800c338:	4619      	mov	r1, r3
 800c33a:	4603      	mov	r3, r0
 800c33c:	4642      	mov	r2, r8
 800c33e:	189b      	adds	r3, r3, r2
 800c340:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c344:	464b      	mov	r3, r9
 800c346:	460a      	mov	r2, r1
 800c348:	eb42 0303 	adc.w	r3, r2, r3
 800c34c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c35c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c360:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c364:	460b      	mov	r3, r1
 800c366:	18db      	adds	r3, r3, r3
 800c368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c36a:	4613      	mov	r3, r2
 800c36c:	eb42 0303 	adc.w	r3, r2, r3
 800c370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c376:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c37a:	f7f3 ff91 	bl	80002a0 <__aeabi_uldivmod>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	4b0d      	ldr	r3, [pc, #52]	@ (800c3b8 <UART_SetConfig+0x2d4>)
 800c384:	fba3 1302 	umull	r1, r3, r3, r2
 800c388:	095b      	lsrs	r3, r3, #5
 800c38a:	2164      	movs	r1, #100	@ 0x64
 800c38c:	fb01 f303 	mul.w	r3, r1, r3
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	00db      	lsls	r3, r3, #3
 800c394:	3332      	adds	r3, #50	@ 0x32
 800c396:	4a08      	ldr	r2, [pc, #32]	@ (800c3b8 <UART_SetConfig+0x2d4>)
 800c398:	fba2 2303 	umull	r2, r3, r2, r3
 800c39c:	095b      	lsrs	r3, r3, #5
 800c39e:	f003 0207 	and.w	r2, r3, #7
 800c3a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4422      	add	r2, r4
 800c3aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c3ac:	e106      	b.n	800c5bc <UART_SetConfig+0x4d8>
 800c3ae:	bf00      	nop
 800c3b0:	40011000 	.word	0x40011000
 800c3b4:	40011400 	.word	0x40011400
 800c3b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c3bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c3c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c3ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c3ce:	4642      	mov	r2, r8
 800c3d0:	464b      	mov	r3, r9
 800c3d2:	1891      	adds	r1, r2, r2
 800c3d4:	6239      	str	r1, [r7, #32]
 800c3d6:	415b      	adcs	r3, r3
 800c3d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c3de:	4641      	mov	r1, r8
 800c3e0:	1854      	adds	r4, r2, r1
 800c3e2:	4649      	mov	r1, r9
 800c3e4:	eb43 0501 	adc.w	r5, r3, r1
 800c3e8:	f04f 0200 	mov.w	r2, #0
 800c3ec:	f04f 0300 	mov.w	r3, #0
 800c3f0:	00eb      	lsls	r3, r5, #3
 800c3f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c3f6:	00e2      	lsls	r2, r4, #3
 800c3f8:	4614      	mov	r4, r2
 800c3fa:	461d      	mov	r5, r3
 800c3fc:	4643      	mov	r3, r8
 800c3fe:	18e3      	adds	r3, r4, r3
 800c400:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c404:	464b      	mov	r3, r9
 800c406:	eb45 0303 	adc.w	r3, r5, r3
 800c40a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c40e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c41a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c41e:	f04f 0200 	mov.w	r2, #0
 800c422:	f04f 0300 	mov.w	r3, #0
 800c426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c42a:	4629      	mov	r1, r5
 800c42c:	008b      	lsls	r3, r1, #2
 800c42e:	4621      	mov	r1, r4
 800c430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c434:	4621      	mov	r1, r4
 800c436:	008a      	lsls	r2, r1, #2
 800c438:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c43c:	f7f3 ff30 	bl	80002a0 <__aeabi_uldivmod>
 800c440:	4602      	mov	r2, r0
 800c442:	460b      	mov	r3, r1
 800c444:	4b60      	ldr	r3, [pc, #384]	@ (800c5c8 <UART_SetConfig+0x4e4>)
 800c446:	fba3 2302 	umull	r2, r3, r3, r2
 800c44a:	095b      	lsrs	r3, r3, #5
 800c44c:	011c      	lsls	r4, r3, #4
 800c44e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c452:	2200      	movs	r2, #0
 800c454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c458:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c45c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c460:	4642      	mov	r2, r8
 800c462:	464b      	mov	r3, r9
 800c464:	1891      	adds	r1, r2, r2
 800c466:	61b9      	str	r1, [r7, #24]
 800c468:	415b      	adcs	r3, r3
 800c46a:	61fb      	str	r3, [r7, #28]
 800c46c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c470:	4641      	mov	r1, r8
 800c472:	1851      	adds	r1, r2, r1
 800c474:	6139      	str	r1, [r7, #16]
 800c476:	4649      	mov	r1, r9
 800c478:	414b      	adcs	r3, r1
 800c47a:	617b      	str	r3, [r7, #20]
 800c47c:	f04f 0200 	mov.w	r2, #0
 800c480:	f04f 0300 	mov.w	r3, #0
 800c484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c488:	4659      	mov	r1, fp
 800c48a:	00cb      	lsls	r3, r1, #3
 800c48c:	4651      	mov	r1, sl
 800c48e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c492:	4651      	mov	r1, sl
 800c494:	00ca      	lsls	r2, r1, #3
 800c496:	4610      	mov	r0, r2
 800c498:	4619      	mov	r1, r3
 800c49a:	4603      	mov	r3, r0
 800c49c:	4642      	mov	r2, r8
 800c49e:	189b      	adds	r3, r3, r2
 800c4a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c4a4:	464b      	mov	r3, r9
 800c4a6:	460a      	mov	r2, r1
 800c4a8:	eb42 0303 	adc.w	r3, r2, r3
 800c4ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c4b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c4bc:	f04f 0200 	mov.w	r2, #0
 800c4c0:	f04f 0300 	mov.w	r3, #0
 800c4c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c4c8:	4649      	mov	r1, r9
 800c4ca:	008b      	lsls	r3, r1, #2
 800c4cc:	4641      	mov	r1, r8
 800c4ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4d2:	4641      	mov	r1, r8
 800c4d4:	008a      	lsls	r2, r1, #2
 800c4d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c4da:	f7f3 fee1 	bl	80002a0 <__aeabi_uldivmod>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	4611      	mov	r1, r2
 800c4e4:	4b38      	ldr	r3, [pc, #224]	@ (800c5c8 <UART_SetConfig+0x4e4>)
 800c4e6:	fba3 2301 	umull	r2, r3, r3, r1
 800c4ea:	095b      	lsrs	r3, r3, #5
 800c4ec:	2264      	movs	r2, #100	@ 0x64
 800c4ee:	fb02 f303 	mul.w	r3, r2, r3
 800c4f2:	1acb      	subs	r3, r1, r3
 800c4f4:	011b      	lsls	r3, r3, #4
 800c4f6:	3332      	adds	r3, #50	@ 0x32
 800c4f8:	4a33      	ldr	r2, [pc, #204]	@ (800c5c8 <UART_SetConfig+0x4e4>)
 800c4fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c4fe:	095b      	lsrs	r3, r3, #5
 800c500:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c504:	441c      	add	r4, r3
 800c506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c50a:	2200      	movs	r2, #0
 800c50c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c50e:	677a      	str	r2, [r7, #116]	@ 0x74
 800c510:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c514:	4642      	mov	r2, r8
 800c516:	464b      	mov	r3, r9
 800c518:	1891      	adds	r1, r2, r2
 800c51a:	60b9      	str	r1, [r7, #8]
 800c51c:	415b      	adcs	r3, r3
 800c51e:	60fb      	str	r3, [r7, #12]
 800c520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c524:	4641      	mov	r1, r8
 800c526:	1851      	adds	r1, r2, r1
 800c528:	6039      	str	r1, [r7, #0]
 800c52a:	4649      	mov	r1, r9
 800c52c:	414b      	adcs	r3, r1
 800c52e:	607b      	str	r3, [r7, #4]
 800c530:	f04f 0200 	mov.w	r2, #0
 800c534:	f04f 0300 	mov.w	r3, #0
 800c538:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c53c:	4659      	mov	r1, fp
 800c53e:	00cb      	lsls	r3, r1, #3
 800c540:	4651      	mov	r1, sl
 800c542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c546:	4651      	mov	r1, sl
 800c548:	00ca      	lsls	r2, r1, #3
 800c54a:	4610      	mov	r0, r2
 800c54c:	4619      	mov	r1, r3
 800c54e:	4603      	mov	r3, r0
 800c550:	4642      	mov	r2, r8
 800c552:	189b      	adds	r3, r3, r2
 800c554:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c556:	464b      	mov	r3, r9
 800c558:	460a      	mov	r2, r1
 800c55a:	eb42 0303 	adc.w	r3, r2, r3
 800c55e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	663b      	str	r3, [r7, #96]	@ 0x60
 800c56a:	667a      	str	r2, [r7, #100]	@ 0x64
 800c56c:	f04f 0200 	mov.w	r2, #0
 800c570:	f04f 0300 	mov.w	r3, #0
 800c574:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c578:	4649      	mov	r1, r9
 800c57a:	008b      	lsls	r3, r1, #2
 800c57c:	4641      	mov	r1, r8
 800c57e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c582:	4641      	mov	r1, r8
 800c584:	008a      	lsls	r2, r1, #2
 800c586:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c58a:	f7f3 fe89 	bl	80002a0 <__aeabi_uldivmod>
 800c58e:	4602      	mov	r2, r0
 800c590:	460b      	mov	r3, r1
 800c592:	4b0d      	ldr	r3, [pc, #52]	@ (800c5c8 <UART_SetConfig+0x4e4>)
 800c594:	fba3 1302 	umull	r1, r3, r3, r2
 800c598:	095b      	lsrs	r3, r3, #5
 800c59a:	2164      	movs	r1, #100	@ 0x64
 800c59c:	fb01 f303 	mul.w	r3, r1, r3
 800c5a0:	1ad3      	subs	r3, r2, r3
 800c5a2:	011b      	lsls	r3, r3, #4
 800c5a4:	3332      	adds	r3, #50	@ 0x32
 800c5a6:	4a08      	ldr	r2, [pc, #32]	@ (800c5c8 <UART_SetConfig+0x4e4>)
 800c5a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ac:	095b      	lsrs	r3, r3, #5
 800c5ae:	f003 020f 	and.w	r2, r3, #15
 800c5b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4422      	add	r2, r4
 800c5ba:	609a      	str	r2, [r3, #8]
}
 800c5bc:	bf00      	nop
 800c5be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5c8:	51eb851f 	.word	0x51eb851f

0800c5cc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d123      	bne.n	800c626 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c5e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	6851      	ldr	r1, [r2, #4]
 800c5ee:	683a      	ldr	r2, [r7, #0]
 800c5f0:	6892      	ldr	r2, [r2, #8]
 800c5f2:	4311      	orrs	r1, r2
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	68d2      	ldr	r2, [r2, #12]
 800c5f8:	4311      	orrs	r1, r2
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	6912      	ldr	r2, [r2, #16]
 800c5fe:	4311      	orrs	r1, r2
 800c600:	683a      	ldr	r2, [r7, #0]
 800c602:	6952      	ldr	r2, [r2, #20]
 800c604:	4311      	orrs	r1, r2
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	6992      	ldr	r2, [r2, #24]
 800c60a:	4311      	orrs	r1, r2
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	69d2      	ldr	r2, [r2, #28]
 800c610:	4311      	orrs	r1, r2
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	6a12      	ldr	r2, [r2, #32]
 800c616:	4311      	orrs	r1, r2
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c61c:	430a      	orrs	r2, r1
 800c61e:	431a      	orrs	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	e028      	b.n	800c678 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	69d9      	ldr	r1, [r3, #28]
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	4319      	orrs	r1, r3
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c63c:	430b      	orrs	r3, r1
 800c63e:	431a      	orrs	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c64c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c650:	683a      	ldr	r2, [r7, #0]
 800c652:	6851      	ldr	r1, [r2, #4]
 800c654:	683a      	ldr	r2, [r7, #0]
 800c656:	6892      	ldr	r2, [r2, #8]
 800c658:	4311      	orrs	r1, r2
 800c65a:	683a      	ldr	r2, [r7, #0]
 800c65c:	68d2      	ldr	r2, [r2, #12]
 800c65e:	4311      	orrs	r1, r2
 800c660:	683a      	ldr	r2, [r7, #0]
 800c662:	6912      	ldr	r2, [r2, #16]
 800c664:	4311      	orrs	r1, r2
 800c666:	683a      	ldr	r2, [r7, #0]
 800c668:	6952      	ldr	r2, [r2, #20]
 800c66a:	4311      	orrs	r1, r2
 800c66c:	683a      	ldr	r2, [r7, #0]
 800c66e:	6992      	ldr	r2, [r2, #24]
 800c670:	430a      	orrs	r2, r1
 800c672:	431a      	orrs	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	370c      	adds	r7, #12
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr

0800c686 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c686:	b480      	push	{r7}
 800c688:	b085      	sub	sp, #20
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	60f8      	str	r0, [r7, #12]
 800c68e:	60b9      	str	r1, [r7, #8]
 800c690:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d128      	bne.n	800c6ea <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	1e59      	subs	r1, r3, #1
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	3b01      	subs	r3, #1
 800c6ac:	011b      	lsls	r3, r3, #4
 800c6ae:	4319      	orrs	r1, r3
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	021b      	lsls	r3, r3, #8
 800c6b8:	4319      	orrs	r1, r3
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	3b01      	subs	r3, #1
 800c6c0:	031b      	lsls	r3, r3, #12
 800c6c2:	4319      	orrs	r1, r3
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	041b      	lsls	r3, r3, #16
 800c6cc:	4319      	orrs	r1, r3
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	695b      	ldr	r3, [r3, #20]
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	051b      	lsls	r3, r3, #20
 800c6d6:	4319      	orrs	r1, r3
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	699b      	ldr	r3, [r3, #24]
 800c6dc:	3b01      	subs	r3, #1
 800c6de:	061b      	lsls	r3, r3, #24
 800c6e0:	430b      	orrs	r3, r1
 800c6e2:	431a      	orrs	r2, r3
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	609a      	str	r2, [r3, #8]
 800c6e8:	e02f      	b.n	800c74a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c6f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c6f6:	68ba      	ldr	r2, [r7, #8]
 800c6f8:	68d2      	ldr	r2, [r2, #12]
 800c6fa:	3a01      	subs	r2, #1
 800c6fc:	0311      	lsls	r1, r2, #12
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	6952      	ldr	r2, [r2, #20]
 800c702:	3a01      	subs	r2, #1
 800c704:	0512      	lsls	r2, r2, #20
 800c706:	430a      	orrs	r2, r1
 800c708:	431a      	orrs	r2, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	1e59      	subs	r1, r3, #1
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	3b01      	subs	r3, #1
 800c722:	011b      	lsls	r3, r3, #4
 800c724:	4319      	orrs	r1, r3
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	3b01      	subs	r3, #1
 800c72c:	021b      	lsls	r3, r3, #8
 800c72e:	4319      	orrs	r1, r3
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	691b      	ldr	r3, [r3, #16]
 800c734:	3b01      	subs	r3, #1
 800c736:	041b      	lsls	r3, r3, #16
 800c738:	4319      	orrs	r1, r3
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	3b01      	subs	r3, #1
 800c740:	061b      	lsls	r3, r3, #24
 800c742:	430b      	orrs	r3, r1
 800c744:	431a      	orrs	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3714      	adds	r7, #20
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c764:	2300      	movs	r3, #0
 800c766:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	691b      	ldr	r3, [r3, #16]
 800c76c:	0d9b      	lsrs	r3, r3, #22
 800c76e:	059b      	lsls	r3, r3, #22
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	6811      	ldr	r1, [r2, #0]
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	6852      	ldr	r2, [r2, #4]
 800c778:	4311      	orrs	r1, r2
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	6892      	ldr	r2, [r2, #8]
 800c77e:	3a01      	subs	r2, #1
 800c780:	0152      	lsls	r2, r2, #5
 800c782:	4311      	orrs	r1, r2
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	68d2      	ldr	r2, [r2, #12]
 800c788:	0252      	lsls	r2, r2, #9
 800c78a:	430a      	orrs	r2, r1
 800c78c:	431a      	orrs	r2, r3
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800c792:	f7f8 f865 	bl	8004860 <HAL_GetTick>
 800c796:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800c798:	e010      	b.n	800c7bc <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a0:	d00c      	beq.n	800c7bc <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d007      	beq.n	800c7b8 <FMC_SDRAM_SendCommand+0x60>
 800c7a8:	f7f8 f85a 	bl	8004860 <HAL_GetTick>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	1ad3      	subs	r3, r2, r3
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d201      	bcs.n	800c7bc <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800c7b8:	2303      	movs	r3, #3
 800c7ba:	e006      	b.n	800c7ca <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	699b      	ldr	r3, [r3, #24]
 800c7c0:	f003 0320 	and.w	r3, r3, #32
 800c7c4:	2b20      	cmp	r3, #32
 800c7c6:	d0e8      	beq.n	800c79a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3718      	adds	r7, #24
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c7d2:	b480      	push	{r7}
 800c7d4:	b083      	sub	sp, #12
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
 800c7da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	695b      	ldr	r3, [r3, #20]
 800c7e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800c7e4:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800c7e8:	683a      	ldr	r2, [r7, #0]
 800c7ea:	0052      	lsls	r2, r2, #1
 800c7ec:	431a      	orrs	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c7f2:	2300      	movs	r3, #0
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c800:	b084      	sub	sp, #16
 800c802:	b580      	push	{r7, lr}
 800c804:	b084      	sub	sp, #16
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	f107 001c 	add.w	r0, r7, #28
 800c80e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c812:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c816:	2b01      	cmp	r3, #1
 800c818:	d123      	bne.n	800c862 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c81e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800c82e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c842:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c846:	2b01      	cmp	r3, #1
 800c848:	d105      	bne.n	800c856 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 f9dc 	bl	800cc14 <USB_CoreReset>
 800c85c:	4603      	mov	r3, r0
 800c85e:	73fb      	strb	r3, [r7, #15]
 800c860:	e01b      	b.n	800c89a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 f9d0 	bl	800cc14 <USB_CoreReset>
 800c874:	4603      	mov	r3, r0
 800c876:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c878:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d106      	bne.n	800c88e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c884:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	639a      	str	r2, [r3, #56]	@ 0x38
 800c88c:	e005      	b.n	800c89a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c892:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c89a:	7fbb      	ldrb	r3, [r7, #30]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d10b      	bne.n	800c8b8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	f043 0206 	orr.w	r2, r3, #6
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	f043 0220 	orr.w	r2, r3, #32
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c8c4:	b004      	add	sp, #16
 800c8c6:	4770      	bx	lr

0800c8c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	f043 0201 	orr.w	r2, r3, #1
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	370c      	adds	r7, #12
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr

0800c8ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	b083      	sub	sp, #12
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	f023 0201 	bic.w	r2, r3, #1
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	460b      	mov	r3, r1
 800c916:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c918:	2300      	movs	r3, #0
 800c91a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c928:	78fb      	ldrb	r3, [r7, #3]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d115      	bne.n	800c95a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c93a:	200a      	movs	r0, #10
 800c93c:	f7f7 ff9c 	bl	8004878 <HAL_Delay>
      ms += 10U;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	330a      	adds	r3, #10
 800c944:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 f956 	bl	800cbf8 <USB_GetMode>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d01e      	beq.n	800c990 <USB_SetCurrentMode+0x84>
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2bc7      	cmp	r3, #199	@ 0xc7
 800c956:	d9f0      	bls.n	800c93a <USB_SetCurrentMode+0x2e>
 800c958:	e01a      	b.n	800c990 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c95a:	78fb      	ldrb	r3, [r7, #3]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d115      	bne.n	800c98c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c96c:	200a      	movs	r0, #10
 800c96e:	f7f7 ff83 	bl	8004878 <HAL_Delay>
      ms += 10U;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	330a      	adds	r3, #10
 800c976:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 f93d 	bl	800cbf8 <USB_GetMode>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d005      	beq.n	800c990 <USB_SetCurrentMode+0x84>
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2bc7      	cmp	r3, #199	@ 0xc7
 800c988:	d9f0      	bls.n	800c96c <USB_SetCurrentMode+0x60>
 800c98a:	e001      	b.n	800c990 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c98c:	2301      	movs	r3, #1
 800c98e:	e005      	b.n	800c99c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2bc8      	cmp	r3, #200	@ 0xc8
 800c994:	d101      	bne.n	800c99a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c996:	2301      	movs	r3, #1
 800c998:	e000      	b.n	800c99c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c9be:	d901      	bls.n	800c9c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	e01b      	b.n	800c9fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	691b      	ldr	r3, [r3, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	daf2      	bge.n	800c9b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	019b      	lsls	r3, r3, #6
 800c9d4:	f043 0220 	orr.w	r2, r3, #32
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c9e8:	d901      	bls.n	800c9ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	e006      	b.n	800c9fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	f003 0320 	and.w	r3, r3, #32
 800c9f6:	2b20      	cmp	r3, #32
 800c9f8:	d0f0      	beq.n	800c9dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca10:	2300      	movs	r3, #0
 800ca12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	3301      	adds	r3, #1
 800ca18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ca20:	d901      	bls.n	800ca26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ca22:	2303      	movs	r3, #3
 800ca24:	e018      	b.n	800ca58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	daf2      	bge.n	800ca14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2210      	movs	r2, #16
 800ca36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ca44:	d901      	bls.n	800ca4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ca46:	2303      	movs	r3, #3
 800ca48:	e006      	b.n	800ca58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	f003 0310 	and.w	r3, r3, #16
 800ca52:	2b10      	cmp	r3, #16
 800ca54:	d0f0      	beq.n	800ca38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3714      	adds	r7, #20
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b089      	sub	sp, #36	@ 0x24
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	4611      	mov	r1, r2
 800ca70:	461a      	mov	r2, r3
 800ca72:	460b      	mov	r3, r1
 800ca74:	71fb      	strb	r3, [r7, #7]
 800ca76:	4613      	mov	r3, r2
 800ca78:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ca82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d123      	bne.n	800cad2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ca8a:	88bb      	ldrh	r3, [r7, #4]
 800ca8c:	3303      	adds	r3, #3
 800ca8e:	089b      	lsrs	r3, r3, #2
 800ca90:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ca92:	2300      	movs	r3, #0
 800ca94:	61bb      	str	r3, [r7, #24]
 800ca96:	e018      	b.n	800caca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ca98:	79fb      	ldrb	r3, [r7, #7]
 800ca9a:	031a      	lsls	r2, r3, #12
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	4413      	add	r3, r2
 800caa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800caa4:	461a      	mov	r2, r3
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	3301      	adds	r3, #1
 800cab0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	3301      	adds	r3, #1
 800cab6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	3301      	adds	r3, #1
 800cabc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	3301      	adds	r3, #1
 800cac2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	3301      	adds	r3, #1
 800cac8:	61bb      	str	r3, [r7, #24]
 800caca:	69ba      	ldr	r2, [r7, #24]
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d3e2      	bcc.n	800ca98 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3724      	adds	r7, #36	@ 0x24
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b08b      	sub	sp, #44	@ 0x2c
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	4613      	mov	r3, r2
 800caec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800caf6:	88fb      	ldrh	r3, [r7, #6]
 800caf8:	089b      	lsrs	r3, r3, #2
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cafe:	88fb      	ldrh	r3, [r7, #6]
 800cb00:	f003 0303 	and.w	r3, r3, #3
 800cb04:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cb06:	2300      	movs	r3, #0
 800cb08:	623b      	str	r3, [r7, #32]
 800cb0a:	e014      	b.n	800cb36 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb16:	601a      	str	r2, [r3, #0]
    pDest++;
 800cb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb20:	3301      	adds	r3, #1
 800cb22:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb26:	3301      	adds	r3, #1
 800cb28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	3301      	adds	r3, #1
 800cb34:	623b      	str	r3, [r7, #32]
 800cb36:	6a3a      	ldr	r2, [r7, #32]
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d3e6      	bcc.n	800cb0c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cb3e:	8bfb      	ldrh	r3, [r7, #30]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d01e      	beq.n	800cb82 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cb44:	2300      	movs	r3, #0
 800cb46:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800cb4e:	461a      	mov	r2, r3
 800cb50:	f107 0310 	add.w	r3, r7, #16
 800cb54:	6812      	ldr	r2, [r2, #0]
 800cb56:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cb58:	693a      	ldr	r2, [r7, #16]
 800cb5a:	6a3b      	ldr	r3, [r7, #32]
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	fa22 f303 	lsr.w	r3, r2, r3
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb68:	701a      	strb	r2, [r3, #0]
      i++;
 800cb6a:	6a3b      	ldr	r3, [r7, #32]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	623b      	str	r3, [r7, #32]
      pDest++;
 800cb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb72:	3301      	adds	r3, #1
 800cb74:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800cb76:	8bfb      	ldrh	r3, [r7, #30]
 800cb78:	3b01      	subs	r3, #1
 800cb7a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cb7c:	8bfb      	ldrh	r3, [r7, #30]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1ea      	bne.n	800cb58 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	372c      	adds	r7, #44	@ 0x2c
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	695b      	ldr	r3, [r3, #20]
 800cb9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	699b      	ldr	r3, [r3, #24]
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	4013      	ands	r3, r2
 800cba6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cba8:	68fb      	ldr	r3, [r7, #12]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800cbb6:	b480      	push	{r7}
 800cbb8:	b085      	sub	sp, #20
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800cbc6:	78fb      	ldrb	r3, [r7, #3]
 800cbc8:	015a      	lsls	r2, r3, #5
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	4413      	add	r3, r2
 800cbce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800cbd6:	78fb      	ldrb	r3, [r7, #3]
 800cbd8:	015a      	lsls	r2, r3, #5
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	4413      	add	r3, r2
 800cbde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cbea:	68bb      	ldr	r3, [r7, #8]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3714      	adds	r7, #20
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	695b      	ldr	r3, [r3, #20]
 800cc04:	f003 0301 	and.w	r3, r3, #1
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	3301      	adds	r3, #1
 800cc24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cc2c:	d901      	bls.n	800cc32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc2e:	2303      	movs	r3, #3
 800cc30:	e01b      	b.n	800cc6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	daf2      	bge.n	800cc20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	691b      	ldr	r3, [r3, #16]
 800cc42:	f043 0201 	orr.w	r2, r3, #1
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cc56:	d901      	bls.n	800cc5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	e006      	b.n	800cc6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	691b      	ldr	r3, [r3, #16]
 800cc60:	f003 0301 	and.w	r3, r3, #1
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d0f0      	beq.n	800cc4a <USB_CoreReset+0x36>

  return HAL_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3714      	adds	r7, #20
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr
	...

0800cc78 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc78:	b084      	sub	sp, #16
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b086      	sub	sp, #24
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
 800cc82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800cc86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cc98:	461a      	mov	r2, r3
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cca2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	68db      	ldr	r3, [r3, #12]
 800ccc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d119      	bne.n	800cd02 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ccce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d10a      	bne.n	800ccec <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cce4:	f043 0304 	orr.w	r3, r3, #4
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	e014      	b.n	800cd16 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ccfa:	f023 0304 	bic.w	r3, r3, #4
 800ccfe:	6013      	str	r3, [r2, #0]
 800cd00:	e009      	b.n	800cd16 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	68fa      	ldr	r2, [r7, #12]
 800cd0c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cd10:	f023 0304 	bic.w	r3, r3, #4
 800cd14:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cd16:	2110      	movs	r1, #16
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f7ff fe43 	bl	800c9a4 <USB_FlushTxFifo>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800cd24:	2301      	movs	r3, #1
 800cd26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7ff fe6d 	bl	800ca08 <USB_FlushRxFifo>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800cd34:	2301      	movs	r3, #1
 800cd36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cd38:	2300      	movs	r3, #0
 800cd3a:	613b      	str	r3, [r7, #16]
 800cd3c:	e015      	b.n	800cd6a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	015a      	lsls	r2, r3, #5
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	4413      	add	r3, r2
 800cd46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd50:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	015a      	lsls	r2, r3, #5
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	4413      	add	r3, r2
 800cd5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd5e:	461a      	mov	r2, r3
 800cd60:	2300      	movs	r3, #0
 800cd62:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	3301      	adds	r3, #1
 800cd68:	613b      	str	r3, [r7, #16]
 800cd6a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cd6e:	461a      	mov	r2, r3
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d3e3      	bcc.n	800cd3e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd82:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4a18      	ldr	r2, [pc, #96]	@ (800cde8 <USB_HostInit+0x170>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d10b      	bne.n	800cda4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd92:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a15      	ldr	r2, [pc, #84]	@ (800cdec <USB_HostInit+0x174>)
 800cd98:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a14      	ldr	r2, [pc, #80]	@ (800cdf0 <USB_HostInit+0x178>)
 800cd9e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800cda2:	e009      	b.n	800cdb8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2280      	movs	r2, #128	@ 0x80
 800cda8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4a11      	ldr	r2, [pc, #68]	@ (800cdf4 <USB_HostInit+0x17c>)
 800cdae:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	4a11      	ldr	r2, [pc, #68]	@ (800cdf8 <USB_HostInit+0x180>)
 800cdb4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cdb8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d105      	bne.n	800cdcc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	699b      	ldr	r3, [r3, #24]
 800cdc4:	f043 0210 	orr.w	r2, r3, #16
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	699a      	ldr	r2, [r3, #24]
 800cdd0:	4b0a      	ldr	r3, [pc, #40]	@ (800cdfc <USB_HostInit+0x184>)
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3718      	adds	r7, #24
 800cdde:	46bd      	mov	sp, r7
 800cde0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cde4:	b004      	add	sp, #16
 800cde6:	4770      	bx	lr
 800cde8:	40040000 	.word	0x40040000
 800cdec:	01000200 	.word	0x01000200
 800cdf0:	00e00300 	.word	0x00e00300
 800cdf4:	00600080 	.word	0x00600080
 800cdf8:	004000e0 	.word	0x004000e0
 800cdfc:	a3200008 	.word	0xa3200008

0800ce00 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	460b      	mov	r3, r1
 800ce0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ce1e:	f023 0303 	bic.w	r3, r3, #3
 800ce22:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	78fb      	ldrb	r3, [r7, #3]
 800ce2e:	f003 0303 	and.w	r3, r3, #3
 800ce32:	68f9      	ldr	r1, [r7, #12]
 800ce34:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ce3c:	78fb      	ldrb	r3, [r7, #3]
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d107      	bne.n	800ce52 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ce48:	461a      	mov	r2, r3
 800ce4a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ce4e:	6053      	str	r3, [r2, #4]
 800ce50:	e00c      	b.n	800ce6c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800ce52:	78fb      	ldrb	r3, [r7, #3]
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d107      	bne.n	800ce68 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ce5e:	461a      	mov	r2, r3
 800ce60:	f241 7370 	movw	r3, #6000	@ 0x1770
 800ce64:	6053      	str	r3, [r2, #4]
 800ce66:	e001      	b.n	800ce6c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e000      	b.n	800ce6e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800ce6c:	2300      	movs	r3, #0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b084      	sub	sp, #16
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ce86:	2300      	movs	r3, #0
 800ce88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ce9a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800cea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cea8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ceaa:	2064      	movs	r0, #100	@ 0x64
 800ceac:	f7f7 fce4 	bl	8004878 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	68fa      	ldr	r2, [r7, #12]
 800ceb4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ceb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cebc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800cebe:	200a      	movs	r0, #10
 800cec0:	f7f7 fcda 	bl	8004878 <HAL_Delay>

  return HAL_OK;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cece:	b480      	push	{r7}
 800ced0:	b085      	sub	sp, #20
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
 800ced6:	460b      	mov	r3, r1
 800ced8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cede:	2300      	movs	r3, #0
 800cee0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800cef2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d109      	bne.n	800cf12 <USB_DriveVbus+0x44>
 800cefe:	78fb      	ldrb	r3, [r7, #3]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d106      	bne.n	800cf12 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	68fa      	ldr	r2, [r7, #12]
 800cf08:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800cf0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cf10:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cf18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf1c:	d109      	bne.n	800cf32 <USB_DriveVbus+0x64>
 800cf1e:	78fb      	ldrb	r3, [r7, #3]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d106      	bne.n	800cf32 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800cf2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cf30:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800cf32:	2300      	movs	r3, #0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3714      	adds	r7, #20
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	0c5b      	lsrs	r3, r3, #17
 800cf5e:	f003 0303 	and.w	r3, r3, #3
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3714      	adds	r7, #20
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr

0800cf6e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800cf6e:	b480      	push	{r7}
 800cf70:	b085      	sub	sp, #20
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cf80:	689b      	ldr	r3, [r3, #8]
 800cf82:	b29b      	uxth	r3, r3
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b088      	sub	sp, #32
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	4608      	mov	r0, r1
 800cf9a:	4611      	mov	r1, r2
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	70fb      	strb	r3, [r7, #3]
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	70bb      	strb	r3, [r7, #2]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800cfb2:	78fb      	ldrb	r3, [r7, #3]
 800cfb4:	015a      	lsls	r2, r3, #5
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	4413      	add	r3, r2
 800cfba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800cfc6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cfca:	2b03      	cmp	r3, #3
 800cfcc:	d87c      	bhi.n	800d0c8 <USB_HC_Init+0x138>
 800cfce:	a201      	add	r2, pc, #4	@ (adr r2, 800cfd4 <USB_HC_Init+0x44>)
 800cfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd4:	0800cfe5 	.word	0x0800cfe5
 800cfd8:	0800d08b 	.word	0x0800d08b
 800cfdc:	0800cfe5 	.word	0x0800cfe5
 800cfe0:	0800d04d 	.word	0x0800d04d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cfe4:	78fb      	ldrb	r3, [r7, #3]
 800cfe6:	015a      	lsls	r2, r3, #5
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	4413      	add	r3, r2
 800cfec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cff0:	461a      	mov	r2, r3
 800cff2:	f240 439d 	movw	r3, #1181	@ 0x49d
 800cff6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800cff8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	da10      	bge.n	800d022 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d000:	78fb      	ldrb	r3, [r7, #3]
 800d002:	015a      	lsls	r2, r3, #5
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	4413      	add	r3, r2
 800d008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d00c:	68db      	ldr	r3, [r3, #12]
 800d00e:	78fa      	ldrb	r2, [r7, #3]
 800d010:	0151      	lsls	r1, r2, #5
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	440a      	add	r2, r1
 800d016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d01a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d01e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800d020:	e055      	b.n	800d0ce <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	4a6f      	ldr	r2, [pc, #444]	@ (800d1e4 <USB_HC_Init+0x254>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d151      	bne.n	800d0ce <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d02a:	78fb      	ldrb	r3, [r7, #3]
 800d02c:	015a      	lsls	r2, r3, #5
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	4413      	add	r3, r2
 800d032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	78fa      	ldrb	r2, [r7, #3]
 800d03a:	0151      	lsls	r1, r2, #5
 800d03c:	693a      	ldr	r2, [r7, #16]
 800d03e:	440a      	add	r2, r1
 800d040:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d044:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800d048:	60d3      	str	r3, [r2, #12]
      break;
 800d04a:	e040      	b.n	800d0ce <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d04c:	78fb      	ldrb	r3, [r7, #3]
 800d04e:	015a      	lsls	r2, r3, #5
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	4413      	add	r3, r2
 800d054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d058:	461a      	mov	r2, r3
 800d05a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800d05e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d060:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d064:	2b00      	cmp	r3, #0
 800d066:	da34      	bge.n	800d0d2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d068:	78fb      	ldrb	r3, [r7, #3]
 800d06a:	015a      	lsls	r2, r3, #5
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	4413      	add	r3, r2
 800d070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	78fa      	ldrb	r2, [r7, #3]
 800d078:	0151      	lsls	r1, r2, #5
 800d07a:	693a      	ldr	r2, [r7, #16]
 800d07c:	440a      	add	r2, r1
 800d07e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d086:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d088:	e023      	b.n	800d0d2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d08a:	78fb      	ldrb	r3, [r7, #3]
 800d08c:	015a      	lsls	r2, r3, #5
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	4413      	add	r3, r2
 800d092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d096:	461a      	mov	r2, r3
 800d098:	f240 2325 	movw	r3, #549	@ 0x225
 800d09c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d09e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	da17      	bge.n	800d0d6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d0a6:	78fb      	ldrb	r3, [r7, #3]
 800d0a8:	015a      	lsls	r2, r3, #5
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	78fa      	ldrb	r2, [r7, #3]
 800d0b6:	0151      	lsls	r1, r2, #5
 800d0b8:	693a      	ldr	r2, [r7, #16]
 800d0ba:	440a      	add	r2, r1
 800d0bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d0c0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800d0c4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d0c6:	e006      	b.n	800d0d6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	77fb      	strb	r3, [r7, #31]
      break;
 800d0cc:	e004      	b.n	800d0d8 <USB_HC_Init+0x148>
      break;
 800d0ce:	bf00      	nop
 800d0d0:	e002      	b.n	800d0d8 <USB_HC_Init+0x148>
      break;
 800d0d2:	bf00      	nop
 800d0d4:	e000      	b.n	800d0d8 <USB_HC_Init+0x148>
      break;
 800d0d6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800d0d8:	78fb      	ldrb	r3, [r7, #3]
 800d0da:	015a      	lsls	r2, r3, #5
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	4413      	add	r3, r2
 800d0e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800d0ea:	78fb      	ldrb	r3, [r7, #3]
 800d0ec:	015a      	lsls	r2, r3, #5
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	78fa      	ldrb	r2, [r7, #3]
 800d0fa:	0151      	lsls	r1, r2, #5
 800d0fc:	693a      	ldr	r2, [r7, #16]
 800d0fe:	440a      	add	r2, r1
 800d100:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d104:	f043 0302 	orr.w	r3, r3, #2
 800d108:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d110:	699a      	ldr	r2, [r3, #24]
 800d112:	78fb      	ldrb	r3, [r7, #3]
 800d114:	f003 030f 	and.w	r3, r3, #15
 800d118:	2101      	movs	r1, #1
 800d11a:	fa01 f303 	lsl.w	r3, r1, r3
 800d11e:	6939      	ldr	r1, [r7, #16]
 800d120:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d124:	4313      	orrs	r3, r2
 800d126:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d134:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	da03      	bge.n	800d144 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d13c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d140:	61bb      	str	r3, [r7, #24]
 800d142:	e001      	b.n	800d148 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800d144:	2300      	movs	r3, #0
 800d146:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f7ff fef9 	bl	800cf40 <USB_GetHostSpeed>
 800d14e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d150:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d154:	2b02      	cmp	r3, #2
 800d156:	d106      	bne.n	800d166 <USB_HC_Init+0x1d6>
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2b02      	cmp	r3, #2
 800d15c:	d003      	beq.n	800d166 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d15e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d162:	617b      	str	r3, [r7, #20]
 800d164:	e001      	b.n	800d16a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d166:	2300      	movs	r3, #0
 800d168:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d16a:	787b      	ldrb	r3, [r7, #1]
 800d16c:	059b      	lsls	r3, r3, #22
 800d16e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d172:	78bb      	ldrb	r3, [r7, #2]
 800d174:	02db      	lsls	r3, r3, #11
 800d176:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d17a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d17c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d180:	049b      	lsls	r3, r3, #18
 800d182:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d186:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800d188:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d18a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d18e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	431a      	orrs	r2, r3
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d198:	78fa      	ldrb	r2, [r7, #3]
 800d19a:	0151      	lsls	r1, r2, #5
 800d19c:	693a      	ldr	r2, [r7, #16]
 800d19e:	440a      	add	r2, r1
 800d1a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800d1a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d1a8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800d1aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d1ae:	2b03      	cmp	r3, #3
 800d1b0:	d003      	beq.n	800d1ba <USB_HC_Init+0x22a>
 800d1b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d10f      	bne.n	800d1da <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800d1ba:	78fb      	ldrb	r3, [r7, #3]
 800d1bc:	015a      	lsls	r2, r3, #5
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	78fa      	ldrb	r2, [r7, #3]
 800d1ca:	0151      	lsls	r1, r2, #5
 800d1cc:	693a      	ldr	r2, [r7, #16]
 800d1ce:	440a      	add	r2, r1
 800d1d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d1d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d1d8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d1da:	7ffb      	ldrb	r3, [r7, #31]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3720      	adds	r7, #32
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	40040000 	.word	0x40040000

0800d1e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b08c      	sub	sp, #48	@ 0x30
 800d1ec:	af02      	add	r7, sp, #8
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	60b9      	str	r1, [r7, #8]
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	785b      	ldrb	r3, [r3, #1]
 800d1fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800d200:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d204:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	4a5d      	ldr	r2, [pc, #372]	@ (800d380 <USB_HC_StartXfer+0x198>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d12f      	bne.n	800d26e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800d20e:	79fb      	ldrb	r3, [r7, #7]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d11c      	bne.n	800d24e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	7c9b      	ldrb	r3, [r3, #18]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d003      	beq.n	800d224 <USB_HC_StartXfer+0x3c>
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	7c9b      	ldrb	r3, [r3, #18]
 800d220:	2b02      	cmp	r3, #2
 800d222:	d124      	bne.n	800d26e <USB_HC_StartXfer+0x86>
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	799b      	ldrb	r3, [r3, #6]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d120      	bne.n	800d26e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	015a      	lsls	r2, r3, #5
 800d230:	6a3b      	ldr	r3, [r7, #32]
 800d232:	4413      	add	r3, r2
 800d234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	69fa      	ldr	r2, [r7, #28]
 800d23c:	0151      	lsls	r1, r2, #5
 800d23e:	6a3a      	ldr	r2, [r7, #32]
 800d240:	440a      	add	r2, r1
 800d242:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d24a:	60d3      	str	r3, [r2, #12]
 800d24c:	e00f      	b.n	800d26e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	791b      	ldrb	r3, [r3, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10b      	bne.n	800d26e <USB_HC_StartXfer+0x86>
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	795b      	ldrb	r3, [r3, #5]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d107      	bne.n	800d26e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	785b      	ldrb	r3, [r3, #1]
 800d262:	4619      	mov	r1, r3
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f000 fb6b 	bl	800d940 <USB_DoPing>
        return HAL_OK;
 800d26a:	2300      	movs	r3, #0
 800d26c:	e232      	b.n	800d6d4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	799b      	ldrb	r3, [r3, #6]
 800d272:	2b01      	cmp	r3, #1
 800d274:	d158      	bne.n	800d328 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800d276:	2301      	movs	r3, #1
 800d278:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	78db      	ldrb	r3, [r3, #3]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d007      	beq.n	800d292 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d282:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d284:	68ba      	ldr	r2, [r7, #8]
 800d286:	8a92      	ldrh	r2, [r2, #20]
 800d288:	fb03 f202 	mul.w	r2, r3, r2
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	61da      	str	r2, [r3, #28]
 800d290:	e07c      	b.n	800d38c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	7c9b      	ldrb	r3, [r3, #18]
 800d296:	2b01      	cmp	r3, #1
 800d298:	d130      	bne.n	800d2fc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	6a1b      	ldr	r3, [r3, #32]
 800d29e:	2bbc      	cmp	r3, #188	@ 0xbc
 800d2a0:	d918      	bls.n	800d2d4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	8a9b      	ldrh	r3, [r3, #20]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	69da      	ldr	r2, [r3, #28]
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d003      	beq.n	800d2c4 <USB_HC_StartXfer+0xdc>
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	d103      	bne.n	800d2cc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	2202      	movs	r2, #2
 800d2c8:	60da      	str	r2, [r3, #12]
 800d2ca:	e05f      	b.n	800d38c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	60da      	str	r2, [r3, #12]
 800d2d2:	e05b      	b.n	800d38c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	6a1a      	ldr	r2, [r3, #32]
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d007      	beq.n	800d2f4 <USB_HC_StartXfer+0x10c>
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	d003      	beq.n	800d2f4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	2204      	movs	r2, #4
 800d2f0:	60da      	str	r2, [r3, #12]
 800d2f2:	e04b      	b.n	800d38c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	2203      	movs	r2, #3
 800d2f8:	60da      	str	r2, [r3, #12]
 800d2fa:	e047      	b.n	800d38c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800d2fc:	79fb      	ldrb	r3, [r7, #7]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d10d      	bne.n	800d31e <USB_HC_StartXfer+0x136>
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	6a1b      	ldr	r3, [r3, #32]
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	8a92      	ldrh	r2, [r2, #20]
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d907      	bls.n	800d31e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d30e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d310:	68ba      	ldr	r2, [r7, #8]
 800d312:	8a92      	ldrh	r2, [r2, #20]
 800d314:	fb03 f202 	mul.w	r2, r3, r2
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	61da      	str	r2, [r3, #28]
 800d31c:	e036      	b.n	800d38c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	6a1a      	ldr	r2, [r3, #32]
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	61da      	str	r2, [r3, #28]
 800d326:	e031      	b.n	800d38c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	6a1b      	ldr	r3, [r3, #32]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d018      	beq.n	800d362 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	6a1b      	ldr	r3, [r3, #32]
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	8a92      	ldrh	r2, [r2, #20]
 800d338:	4413      	add	r3, r2
 800d33a:	3b01      	subs	r3, #1
 800d33c:	68ba      	ldr	r2, [r7, #8]
 800d33e:	8a92      	ldrh	r2, [r2, #20]
 800d340:	fbb3 f3f2 	udiv	r3, r3, r2
 800d344:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800d346:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d348:	8b7b      	ldrh	r3, [r7, #26]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d90b      	bls.n	800d366 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800d34e:	8b7b      	ldrh	r3, [r7, #26]
 800d350:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d352:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d354:	68ba      	ldr	r2, [r7, #8]
 800d356:	8a92      	ldrh	r2, [r2, #20]
 800d358:	fb03 f202 	mul.w	r2, r3, r2
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	61da      	str	r2, [r3, #28]
 800d360:	e001      	b.n	800d366 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800d362:	2301      	movs	r3, #1
 800d364:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	78db      	ldrb	r3, [r3, #3]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00a      	beq.n	800d384 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d36e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d370:	68ba      	ldr	r2, [r7, #8]
 800d372:	8a92      	ldrh	r2, [r2, #20]
 800d374:	fb03 f202 	mul.w	r2, r3, r2
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	61da      	str	r2, [r3, #28]
 800d37c:	e006      	b.n	800d38c <USB_HC_StartXfer+0x1a4>
 800d37e:	bf00      	nop
 800d380:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	6a1a      	ldr	r2, [r3, #32]
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	69db      	ldr	r3, [r3, #28]
 800d390:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d394:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d396:	04d9      	lsls	r1, r3, #19
 800d398:	4ba3      	ldr	r3, [pc, #652]	@ (800d628 <USB_HC_StartXfer+0x440>)
 800d39a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d39c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	7d9b      	ldrb	r3, [r3, #22]
 800d3a2:	075b      	lsls	r3, r3, #29
 800d3a4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d3a8:	69f9      	ldr	r1, [r7, #28]
 800d3aa:	0148      	lsls	r0, r1, #5
 800d3ac:	6a39      	ldr	r1, [r7, #32]
 800d3ae:	4401      	add	r1, r0
 800d3b0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d3b4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d3b6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d3b8:	79fb      	ldrb	r3, [r7, #7]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d009      	beq.n	800d3d2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	6999      	ldr	r1, [r3, #24]
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	015a      	lsls	r2, r3, #5
 800d3c6:	6a3b      	ldr	r3, [r7, #32]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d3ce:	460a      	mov	r2, r1
 800d3d0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d3d2:	6a3b      	ldr	r3, [r7, #32]
 800d3d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	f003 0301 	and.w	r3, r3, #1
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	bf0c      	ite	eq
 800d3e2:	2301      	moveq	r3, #1
 800d3e4:	2300      	movne	r3, #0
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	015a      	lsls	r2, r3, #5
 800d3ee:	6a3b      	ldr	r3, [r7, #32]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	69fa      	ldr	r2, [r7, #28]
 800d3fa:	0151      	lsls	r1, r2, #5
 800d3fc:	6a3a      	ldr	r2, [r7, #32]
 800d3fe:	440a      	add	r2, r1
 800d400:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d404:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d408:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	015a      	lsls	r2, r3, #5
 800d40e:	6a3b      	ldr	r3, [r7, #32]
 800d410:	4413      	add	r3, r2
 800d412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	7e7b      	ldrb	r3, [r7, #25]
 800d41a:	075b      	lsls	r3, r3, #29
 800d41c:	69f9      	ldr	r1, [r7, #28]
 800d41e:	0148      	lsls	r0, r1, #5
 800d420:	6a39      	ldr	r1, [r7, #32]
 800d422:	4401      	add	r1, r0
 800d424:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800d428:	4313      	orrs	r3, r2
 800d42a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	799b      	ldrb	r3, [r3, #6]
 800d430:	2b01      	cmp	r3, #1
 800d432:	f040 80c3 	bne.w	800d5bc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	7c5b      	ldrb	r3, [r3, #17]
 800d43a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800d440:	4313      	orrs	r3, r2
 800d442:	69fa      	ldr	r2, [r7, #28]
 800d444:	0151      	lsls	r1, r2, #5
 800d446:	6a3a      	ldr	r2, [r7, #32]
 800d448:	440a      	add	r2, r1
 800d44a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800d44e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800d452:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800d454:	69fb      	ldr	r3, [r7, #28]
 800d456:	015a      	lsls	r2, r3, #5
 800d458:	6a3b      	ldr	r3, [r7, #32]
 800d45a:	4413      	add	r3, r2
 800d45c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	69fa      	ldr	r2, [r7, #28]
 800d464:	0151      	lsls	r1, r2, #5
 800d466:	6a3a      	ldr	r2, [r7, #32]
 800d468:	440a      	add	r2, r1
 800d46a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d46e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800d472:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	79db      	ldrb	r3, [r3, #7]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d123      	bne.n	800d4c4 <USB_HC_StartXfer+0x2dc>
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	78db      	ldrb	r3, [r3, #3]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d11f      	bne.n	800d4c4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	015a      	lsls	r2, r3, #5
 800d488:	6a3b      	ldr	r3, [r7, #32]
 800d48a:	4413      	add	r3, r2
 800d48c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	69fa      	ldr	r2, [r7, #28]
 800d494:	0151      	lsls	r1, r2, #5
 800d496:	6a3a      	ldr	r2, [r7, #32]
 800d498:	440a      	add	r2, r1
 800d49a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d49e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d4a2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	015a      	lsls	r2, r3, #5
 800d4a8:	6a3b      	ldr	r3, [r7, #32]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	69fa      	ldr	r2, [r7, #28]
 800d4b4:	0151      	lsls	r1, r2, #5
 800d4b6:	6a3a      	ldr	r2, [r7, #32]
 800d4b8:	440a      	add	r2, r1
 800d4ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d4be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4c2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	7c9b      	ldrb	r3, [r3, #18]
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d003      	beq.n	800d4d4 <USB_HC_StartXfer+0x2ec>
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	7c9b      	ldrb	r3, [r3, #18]
 800d4d0:	2b03      	cmp	r3, #3
 800d4d2:	d117      	bne.n	800d504 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d113      	bne.n	800d504 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	78db      	ldrb	r3, [r3, #3]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d10f      	bne.n	800d504 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	015a      	lsls	r2, r3, #5
 800d4e8:	6a3b      	ldr	r3, [r7, #32]
 800d4ea:	4413      	add	r3, r2
 800d4ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	69fa      	ldr	r2, [r7, #28]
 800d4f4:	0151      	lsls	r1, r2, #5
 800d4f6:	6a3a      	ldr	r2, [r7, #32]
 800d4f8:	440a      	add	r2, r1
 800d4fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d4fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d502:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	7c9b      	ldrb	r3, [r3, #18]
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d162      	bne.n	800d5d2 <USB_HC_StartXfer+0x3ea>
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	78db      	ldrb	r3, [r3, #3]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d15e      	bne.n	800d5d2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	68db      	ldr	r3, [r3, #12]
 800d518:	3b01      	subs	r3, #1
 800d51a:	2b03      	cmp	r3, #3
 800d51c:	d858      	bhi.n	800d5d0 <USB_HC_StartXfer+0x3e8>
 800d51e:	a201      	add	r2, pc, #4	@ (adr r2, 800d524 <USB_HC_StartXfer+0x33c>)
 800d520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d524:	0800d535 	.word	0x0800d535
 800d528:	0800d557 	.word	0x0800d557
 800d52c:	0800d579 	.word	0x0800d579
 800d530:	0800d59b 	.word	0x0800d59b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	015a      	lsls	r2, r3, #5
 800d538:	6a3b      	ldr	r3, [r7, #32]
 800d53a:	4413      	add	r3, r2
 800d53c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	69fa      	ldr	r2, [r7, #28]
 800d544:	0151      	lsls	r1, r2, #5
 800d546:	6a3a      	ldr	r2, [r7, #32]
 800d548:	440a      	add	r2, r1
 800d54a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d54e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d552:	6053      	str	r3, [r2, #4]
          break;
 800d554:	e03d      	b.n	800d5d2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	015a      	lsls	r2, r3, #5
 800d55a:	6a3b      	ldr	r3, [r7, #32]
 800d55c:	4413      	add	r3, r2
 800d55e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	69fa      	ldr	r2, [r7, #28]
 800d566:	0151      	lsls	r1, r2, #5
 800d568:	6a3a      	ldr	r2, [r7, #32]
 800d56a:	440a      	add	r2, r1
 800d56c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d570:	f043 030e 	orr.w	r3, r3, #14
 800d574:	6053      	str	r3, [r2, #4]
          break;
 800d576:	e02c      	b.n	800d5d2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	015a      	lsls	r2, r3, #5
 800d57c:	6a3b      	ldr	r3, [r7, #32]
 800d57e:	4413      	add	r3, r2
 800d580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	69fa      	ldr	r2, [r7, #28]
 800d588:	0151      	lsls	r1, r2, #5
 800d58a:	6a3a      	ldr	r2, [r7, #32]
 800d58c:	440a      	add	r2, r1
 800d58e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d592:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d596:	6053      	str	r3, [r2, #4]
          break;
 800d598:	e01b      	b.n	800d5d2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	015a      	lsls	r2, r3, #5
 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	69fa      	ldr	r2, [r7, #28]
 800d5aa:	0151      	lsls	r1, r2, #5
 800d5ac:	6a3a      	ldr	r2, [r7, #32]
 800d5ae:	440a      	add	r2, r1
 800d5b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d5b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d5b8:	6053      	str	r3, [r2, #4]
          break;
 800d5ba:	e00a      	b.n	800d5d2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800d5bc:	69fb      	ldr	r3, [r7, #28]
 800d5be:	015a      	lsls	r2, r3, #5
 800d5c0:	6a3b      	ldr	r3, [r7, #32]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	6053      	str	r3, [r2, #4]
 800d5ce:	e000      	b.n	800d5d2 <USB_HC_StartXfer+0x3ea>
          break;
 800d5d0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	015a      	lsls	r2, r3, #5
 800d5d6:	6a3b      	ldr	r3, [r7, #32]
 800d5d8:	4413      	add	r3, r2
 800d5da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d5e8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	78db      	ldrb	r3, [r3, #3]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d004      	beq.n	800d5fc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5f8:	613b      	str	r3, [r7, #16]
 800d5fa:	e003      	b.n	800d604 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d602:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d60a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	015a      	lsls	r2, r3, #5
 800d610:	6a3b      	ldr	r3, [r7, #32]
 800d612:	4413      	add	r3, r2
 800d614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d618:	461a      	mov	r2, r3
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d61e:	79fb      	ldrb	r3, [r7, #7]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d003      	beq.n	800d62c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800d624:	2300      	movs	r3, #0
 800d626:	e055      	b.n	800d6d4 <USB_HC_StartXfer+0x4ec>
 800d628:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	78db      	ldrb	r3, [r3, #3]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d14e      	bne.n	800d6d2 <USB_HC_StartXfer+0x4ea>
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	6a1b      	ldr	r3, [r3, #32]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d04a      	beq.n	800d6d2 <USB_HC_StartXfer+0x4ea>
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	79db      	ldrb	r3, [r3, #7]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d146      	bne.n	800d6d2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	7c9b      	ldrb	r3, [r3, #18]
 800d648:	2b03      	cmp	r3, #3
 800d64a:	d831      	bhi.n	800d6b0 <USB_HC_StartXfer+0x4c8>
 800d64c:	a201      	add	r2, pc, #4	@ (adr r2, 800d654 <USB_HC_StartXfer+0x46c>)
 800d64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d652:	bf00      	nop
 800d654:	0800d665 	.word	0x0800d665
 800d658:	0800d689 	.word	0x0800d689
 800d65c:	0800d665 	.word	0x0800d665
 800d660:	0800d689 	.word	0x0800d689
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	6a1b      	ldr	r3, [r3, #32]
 800d668:	3303      	adds	r3, #3
 800d66a:	089b      	lsrs	r3, r3, #2
 800d66c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d66e:	8afa      	ldrh	r2, [r7, #22]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d674:	b29b      	uxth	r3, r3
 800d676:	429a      	cmp	r2, r3
 800d678:	d91c      	bls.n	800d6b4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	699b      	ldr	r3, [r3, #24]
 800d67e:	f043 0220 	orr.w	r2, r3, #32
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	619a      	str	r2, [r3, #24]
        }
        break;
 800d686:	e015      	b.n	800d6b4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	6a1b      	ldr	r3, [r3, #32]
 800d68c:	3303      	adds	r3, #3
 800d68e:	089b      	lsrs	r3, r3, #2
 800d690:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d692:	8afa      	ldrh	r2, [r7, #22]
 800d694:	6a3b      	ldr	r3, [r7, #32]
 800d696:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d69a:	691b      	ldr	r3, [r3, #16]
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d90a      	bls.n	800d6b8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	699b      	ldr	r3, [r3, #24]
 800d6a6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	619a      	str	r2, [r3, #24]
        }
        break;
 800d6ae:	e003      	b.n	800d6b8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800d6b0:	bf00      	nop
 800d6b2:	e002      	b.n	800d6ba <USB_HC_StartXfer+0x4d2>
        break;
 800d6b4:	bf00      	nop
 800d6b6:	e000      	b.n	800d6ba <USB_HC_StartXfer+0x4d2>
        break;
 800d6b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	6999      	ldr	r1, [r3, #24]
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	785a      	ldrb	r2, [r3, #1]
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	6a1b      	ldr	r3, [r3, #32]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	2000      	movs	r0, #0
 800d6ca:	9000      	str	r0, [sp, #0]
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f7ff f9c9 	bl	800ca64 <USB_WritePacket>
  }

  return HAL_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3728      	adds	r7, #40	@ 0x28
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d6ee:	695b      	ldr	r3, [r3, #20]
 800d6f0:	b29b      	uxth	r3, r3
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3714      	adds	r7, #20
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fc:	4770      	bx	lr

0800d6fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d6fe:	b480      	push	{r7}
 800d700:	b089      	sub	sp, #36	@ 0x24
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
 800d706:	460b      	mov	r3, r1
 800d708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800d70e:	78fb      	ldrb	r3, [r7, #3]
 800d710:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800d712:	2300      	movs	r3, #0
 800d714:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	015a      	lsls	r2, r3, #5
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	4413      	add	r3, r2
 800d71e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	0c9b      	lsrs	r3, r3, #18
 800d726:	f003 0303 	and.w	r3, r3, #3
 800d72a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	4413      	add	r3, r2
 800d734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	0fdb      	lsrs	r3, r3, #31
 800d73c:	f003 0301 	and.w	r3, r3, #1
 800d740:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	015a      	lsls	r2, r3, #5
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	4413      	add	r3, r2
 800d74a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	0fdb      	lsrs	r3, r3, #31
 800d752:	f003 0301 	and.w	r3, r3, #1
 800d756:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	f003 0320 	and.w	r3, r3, #32
 800d760:	2b20      	cmp	r3, #32
 800d762:	d10d      	bne.n	800d780 <USB_HC_Halt+0x82>
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d10a      	bne.n	800d780 <USB_HC_Halt+0x82>
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d005      	beq.n	800d77c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	2b01      	cmp	r3, #1
 800d774:	d002      	beq.n	800d77c <USB_HC_Halt+0x7e>
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	2b03      	cmp	r3, #3
 800d77a:	d101      	bne.n	800d780 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800d77c:	2300      	movs	r3, #0
 800d77e:	e0d8      	b.n	800d932 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d002      	beq.n	800d78c <USB_HC_Halt+0x8e>
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	2b02      	cmp	r3, #2
 800d78a:	d173      	bne.n	800d874 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	015a      	lsls	r2, r3, #5
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	4413      	add	r3, r2
 800d794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	69ba      	ldr	r2, [r7, #24]
 800d79c:	0151      	lsls	r1, r2, #5
 800d79e:	69fa      	ldr	r2, [r7, #28]
 800d7a0:	440a      	add	r2, r1
 800d7a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d7a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d7aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	f003 0320 	and.w	r3, r3, #32
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d14a      	bne.n	800d84e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d133      	bne.n	800d82c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	015a      	lsls	r2, r3, #5
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	4413      	add	r3, r2
 800d7cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	69ba      	ldr	r2, [r7, #24]
 800d7d4:	0151      	lsls	r1, r2, #5
 800d7d6:	69fa      	ldr	r2, [r7, #28]
 800d7d8:	440a      	add	r2, r1
 800d7da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d7de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d7e2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	015a      	lsls	r2, r3, #5
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	69ba      	ldr	r2, [r7, #24]
 800d7f4:	0151      	lsls	r1, r2, #5
 800d7f6:	69fa      	ldr	r2, [r7, #28]
 800d7f8:	440a      	add	r2, r1
 800d7fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d7fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d802:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	3301      	adds	r3, #1
 800d808:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d810:	d82e      	bhi.n	800d870 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	015a      	lsls	r2, r3, #5
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	4413      	add	r3, r2
 800d81a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d828:	d0ec      	beq.n	800d804 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d82a:	e081      	b.n	800d930 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d82c:	69bb      	ldr	r3, [r7, #24]
 800d82e:	015a      	lsls	r2, r3, #5
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	4413      	add	r3, r2
 800d834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	69ba      	ldr	r2, [r7, #24]
 800d83c:	0151      	lsls	r1, r2, #5
 800d83e:	69fa      	ldr	r2, [r7, #28]
 800d840:	440a      	add	r2, r1
 800d842:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d846:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d84a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d84c:	e070      	b.n	800d930 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	015a      	lsls	r2, r3, #5
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	4413      	add	r3, r2
 800d856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	69ba      	ldr	r2, [r7, #24]
 800d85e:	0151      	lsls	r1, r2, #5
 800d860:	69fa      	ldr	r2, [r7, #28]
 800d862:	440a      	add	r2, r1
 800d864:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d868:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d86c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d86e:	e05f      	b.n	800d930 <USB_HC_Halt+0x232>
            break;
 800d870:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d872:	e05d      	b.n	800d930 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	015a      	lsls	r2, r3, #5
 800d878:	69fb      	ldr	r3, [r7, #28]
 800d87a:	4413      	add	r3, r2
 800d87c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	69ba      	ldr	r2, [r7, #24]
 800d884:	0151      	lsls	r1, r2, #5
 800d886:	69fa      	ldr	r2, [r7, #28]
 800d888:	440a      	add	r2, r1
 800d88a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d88e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d892:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d89a:	691b      	ldr	r3, [r3, #16]
 800d89c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d133      	bne.n	800d90c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	015a      	lsls	r2, r3, #5
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	69ba      	ldr	r2, [r7, #24]
 800d8b4:	0151      	lsls	r1, r2, #5
 800d8b6:	69fa      	ldr	r2, [r7, #28]
 800d8b8:	440a      	add	r2, r1
 800d8ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d8be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d8c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	015a      	lsls	r2, r3, #5
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	69ba      	ldr	r2, [r7, #24]
 800d8d4:	0151      	lsls	r1, r2, #5
 800d8d6:	69fa      	ldr	r2, [r7, #28]
 800d8d8:	440a      	add	r2, r1
 800d8da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d8de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d8e2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d8f0:	d81d      	bhi.n	800d92e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	015a      	lsls	r2, r3, #5
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d904:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d908:	d0ec      	beq.n	800d8e4 <USB_HC_Halt+0x1e6>
 800d90a:	e011      	b.n	800d930 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	015a      	lsls	r2, r3, #5
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	4413      	add	r3, r2
 800d914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	69ba      	ldr	r2, [r7, #24]
 800d91c:	0151      	lsls	r1, r2, #5
 800d91e:	69fa      	ldr	r2, [r7, #28]
 800d920:	440a      	add	r2, r1
 800d922:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d92a:	6013      	str	r3, [r2, #0]
 800d92c:	e000      	b.n	800d930 <USB_HC_Halt+0x232>
          break;
 800d92e:	bf00      	nop
    }
  }

  return HAL_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3724      	adds	r7, #36	@ 0x24
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
	...

0800d940 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d940:	b480      	push	{r7}
 800d942:	b087      	sub	sp, #28
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	460b      	mov	r3, r1
 800d94a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d950:	78fb      	ldrb	r3, [r7, #3]
 800d952:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d954:	2301      	movs	r3, #1
 800d956:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	04da      	lsls	r2, r3, #19
 800d95c:	4b15      	ldr	r3, [pc, #84]	@ (800d9b4 <USB_DoPing+0x74>)
 800d95e:	4013      	ands	r3, r2
 800d960:	693a      	ldr	r2, [r7, #16]
 800d962:	0151      	lsls	r1, r2, #5
 800d964:	697a      	ldr	r2, [r7, #20]
 800d966:	440a      	add	r2, r1
 800d968:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d96c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d970:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	015a      	lsls	r2, r3, #5
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	4413      	add	r3, r2
 800d97a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d988:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d990:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	015a      	lsls	r2, r3, #5
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	4413      	add	r3, r2
 800d99a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d99e:	461a      	mov	r2, r3
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	371c      	adds	r7, #28
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	1ff80000 	.word	0x1ff80000

0800d9b8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b088      	sub	sp, #32
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f7fe ff8c 	bl	800c8ea <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d9d2:	2110      	movs	r1, #16
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7fe ffe5 	bl	800c9a4 <USB_FlushTxFifo>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d001      	beq.n	800d9e4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f7ff f80f 	bl	800ca08 <USB_FlushRxFifo>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d001      	beq.n	800d9f4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	61bb      	str	r3, [r7, #24]
 800d9f8:	e01f      	b.n	800da3a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	015a      	lsls	r2, r3, #5
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	4413      	add	r3, r2
 800da02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800da10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da18:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800da20:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	015a      	lsls	r2, r3, #5
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	4413      	add	r3, r2
 800da2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da2e:	461a      	mov	r2, r3
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	3301      	adds	r3, #1
 800da38:	61bb      	str	r3, [r7, #24]
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	2b0f      	cmp	r3, #15
 800da3e:	d9dc      	bls.n	800d9fa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800da40:	2300      	movs	r3, #0
 800da42:	61bb      	str	r3, [r7, #24]
 800da44:	e034      	b.n	800dab0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	015a      	lsls	r2, r3, #5
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	4413      	add	r3, r2
 800da4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800da5c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800da64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800da6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	015a      	lsls	r2, r3, #5
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	4413      	add	r3, r2
 800da76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da7a:	461a      	mov	r2, r3
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	3301      	adds	r3, #1
 800da84:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800da8c:	d80c      	bhi.n	800daa8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	015a      	lsls	r2, r3, #5
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	4413      	add	r3, r2
 800da96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800daa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800daa4:	d0ec      	beq.n	800da80 <USB_StopHost+0xc8>
 800daa6:	e000      	b.n	800daaa <USB_StopHost+0xf2>
        break;
 800daa8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	3301      	adds	r3, #1
 800daae:	61bb      	str	r3, [r7, #24]
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	2b0f      	cmp	r3, #15
 800dab4:	d9c7      	bls.n	800da46 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dabc:	461a      	mov	r2, r3
 800dabe:	f04f 33ff 	mov.w	r3, #4294967295
 800dac2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f04f 32ff 	mov.w	r2, #4294967295
 800daca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7fe fefb 	bl	800c8c8 <USB_EnableGlobalInt>

  return ret;
 800dad2:	7ffb      	ldrb	r3, [r7, #31]
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3720      	adds	r7, #32
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800dadc:	b590      	push	{r4, r7, lr}
 800dade:	b08b      	sub	sp, #44	@ 0x2c
 800dae0:	af04      	add	r7, sp, #16
 800dae2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 800dae4:	2300      	movs	r3, #0
 800dae6:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800daee:	7919      	ldrb	r1, [r3, #4]
 800daf0:	23ff      	movs	r3, #255	@ 0xff
 800daf2:	2201      	movs	r2, #1
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f001 f87b 	bl	800ebf0 <USBH_FindInterface>
 800dafa:	4603      	mov	r3, r0
 800dafc:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dafe:	7dbb      	ldrb	r3, [r7, #22]
 800db00:	2bff      	cmp	r3, #255	@ 0xff
 800db02:	d002      	beq.n	800db0a <USBH_HID_InterfaceInit+0x2e>
 800db04:	7dbb      	ldrb	r3, [r7, #22]
 800db06:	2b01      	cmp	r3, #1
 800db08:	d90f      	bls.n	800db2a <USBH_HID_InterfaceInit+0x4e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800db0a:	48a9      	ldr	r0, [pc, #676]	@ (800ddb0 <USBH_HID_InterfaceInit+0x2d4>)
 800db0c:	f003 fa5e 	bl	8010fcc <iprintf>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4619      	mov	r1, r3
 800db1a:	48a6      	ldr	r0, [pc, #664]	@ (800ddb4 <USBH_HID_InterfaceInit+0x2d8>)
 800db1c:	f003 fa56 	bl	8010fcc <iprintf>
 800db20:	200a      	movs	r0, #10
 800db22:	f003 fa65 	bl	8010ff0 <putchar>
    return USBH_FAIL;
 800db26:	2302      	movs	r3, #2
 800db28:	e13d      	b.n	800dda6 <USBH_HID_InterfaceInit+0x2ca>
  }

  status = USBH_SelectInterface(phost, interface);
 800db2a:	7dbb      	ldrb	r3, [r7, #22]
 800db2c:	4619      	mov	r1, r3
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 fff6 	bl	800eb20 <USBH_SelectInterface>
 800db34:	4603      	mov	r3, r0
 800db36:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 800db38:	7d7b      	ldrb	r3, [r7, #21]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d001      	beq.n	800db42 <USBH_HID_InterfaceInit+0x66>
  {
    return USBH_FAIL;
 800db3e:	2302      	movs	r3, #2
 800db40:	e131      	b.n	800dda6 <USBH_HID_InterfaceInit+0x2ca>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8d3 4d34 	ldr.w	r4, [r3, #3380]	@ 0xd34
 800db48:	2034      	movs	r0, #52	@ 0x34
 800db4a:	f003 f8bf 	bl	8010ccc <malloc>
 800db4e:	4603      	mov	r3, r0
 800db50:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800db58:	69db      	ldr	r3, [r3, #28]
 800db5a:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d10a      	bne.n	800db78 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 800db62:	4893      	ldr	r0, [pc, #588]	@ (800ddb0 <USBH_HID_InterfaceInit+0x2d4>)
 800db64:	f003 fa32 	bl	8010fcc <iprintf>
 800db68:	4893      	ldr	r0, [pc, #588]	@ (800ddb8 <USBH_HID_InterfaceInit+0x2dc>)
 800db6a:	f003 fa2f 	bl	8010fcc <iprintf>
 800db6e:	200a      	movs	r0, #10
 800db70:	f003 fa3e 	bl	8010ff0 <putchar>
    return USBH_FAIL;
 800db74:	2302      	movs	r3, #2
 800db76:	e116      	b.n	800dda6 <USBH_HID_InterfaceInit+0x2ca>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800db78:	2234      	movs	r2, #52	@ 0x34
 800db7a:	2100      	movs	r1, #0
 800db7c:	6938      	ldr	r0, [r7, #16]
 800db7e:	f003 fb95 	bl	80112ac <memset>

  HID_Handle->state = USBH_HID_ERROR;
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	2207      	movs	r2, #7
 800db86:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800db88:	7dbb      	ldrb	r3, [r7, #22]
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	211a      	movs	r1, #26
 800db8e:	fb01 f303 	mul.w	r3, r1, r3
 800db92:	4413      	add	r3, r2
 800db94:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d109      	bne.n	800dbb2 <USBH_HID_InterfaceInit+0xd6>
  {
    USBH_UsrLog("KeyBoard device found!");
 800db9e:	4887      	ldr	r0, [pc, #540]	@ (800ddbc <USBH_HID_InterfaceInit+0x2e0>)
 800dba0:	f003 fa14 	bl	8010fcc <iprintf>
 800dba4:	200a      	movs	r0, #10
 800dba6:	f003 fa23 	bl	8010ff0 <putchar>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	4a84      	ldr	r2, [pc, #528]	@ (800ddc0 <USBH_HID_InterfaceInit+0x2e4>)
 800dbae:	631a      	str	r2, [r3, #48]	@ 0x30
 800dbb0:	e01c      	b.n	800dbec <USBH_HID_InterfaceInit+0x110>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800dbb2:	7dbb      	ldrb	r3, [r7, #22]
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	211a      	movs	r1, #26
 800dbb8:	fb01 f303 	mul.w	r3, r1, r3
 800dbbc:	4413      	add	r3, r2
 800dbbe:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	2b02      	cmp	r3, #2
 800dbc6:	d109      	bne.n	800dbdc <USBH_HID_InterfaceInit+0x100>
  {
    USBH_UsrLog("Mouse device found!");
 800dbc8:	487e      	ldr	r0, [pc, #504]	@ (800ddc4 <USBH_HID_InterfaceInit+0x2e8>)
 800dbca:	f003 f9ff 	bl	8010fcc <iprintf>
 800dbce:	200a      	movs	r0, #10
 800dbd0:	f003 fa0e 	bl	8010ff0 <putchar>
    HID_Handle->Init = USBH_HID_MouseInit;
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	4a7c      	ldr	r2, [pc, #496]	@ (800ddc8 <USBH_HID_InterfaceInit+0x2ec>)
 800dbd8:	631a      	str	r2, [r3, #48]	@ 0x30
 800dbda:	e007      	b.n	800dbec <USBH_HID_InterfaceInit+0x110>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
 800dbdc:	487b      	ldr	r0, [pc, #492]	@ (800ddcc <USBH_HID_InterfaceInit+0x2f0>)
 800dbde:	f003 f9f5 	bl	8010fcc <iprintf>
 800dbe2:	200a      	movs	r0, #10
 800dbe4:	f003 fa04 	bl	8010ff0 <putchar>
    return USBH_FAIL;
 800dbe8:	2302      	movs	r3, #2
 800dbea:	e0dc      	b.n	800dda6 <USBH_HID_InterfaceInit+0x2ca>
  }

  HID_Handle->state     = USBH_HID_INIT;
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dbf8:	7dbb      	ldrb	r3, [r7, #22]
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	211a      	movs	r1, #26
 800dbfe:	fb01 f303 	mul.w	r3, r1, r3
 800dc02:	4413      	add	r3, r2
 800dc04:	f603 5306 	addw	r3, r3, #3334	@ 0xd06
 800dc08:	781a      	ldrb	r2, [r3, #0]
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dc0e:	7dbb      	ldrb	r3, [r7, #22]
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	211a      	movs	r1, #26
 800dc14:	fb01 f303 	mul.w	r3, r1, r3
 800dc18:	4413      	add	r3, r2
 800dc1a:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 800dc1e:	881a      	ldrh	r2, [r3, #0]
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800dc24:	7dbb      	ldrb	r3, [r7, #22]
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	211a      	movs	r1, #26
 800dc2a:	fb01 f303 	mul.w	r3, r1, r3
 800dc2e:	4413      	add	r3, r2
 800dc30:	f603 530a 	addw	r3, r3, #3338	@ 0xd0a
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	461a      	mov	r2, r3
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	8b9b      	ldrh	r3, [r3, #28]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d102      	bne.n	800dc4a <USBH_HID_InterfaceInit+0x16e>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	2201      	movs	r2, #1
 800dc48:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800dc4a:	7dbb      	ldrb	r3, [r7, #22]
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	211a      	movs	r1, #26
 800dc50:	fb01 f303 	mul.w	r3, r1, r3
 800dc54:	4413      	add	r3, r2
 800dc56:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	2b02      	cmp	r3, #2
 800dc5e:	bf28      	it	cs
 800dc60:	2302      	movcs	r3, #2
 800dc62:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 800dc64:	2300      	movs	r3, #0
 800dc66:	75fb      	strb	r3, [r7, #23]
 800dc68:	e097      	b.n	800dd9a <USBH_HID_InterfaceInit+0x2be>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800dc6a:	7dbb      	ldrb	r3, [r7, #22]
 800dc6c:	7df9      	ldrb	r1, [r7, #23]
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	3101      	adds	r1, #1
 800dc72:	00c9      	lsls	r1, r1, #3
 800dc74:	201a      	movs	r0, #26
 800dc76:	fb00 f303 	mul.w	r3, r0, r3
 800dc7a:	440b      	add	r3, r1
 800dc7c:	4413      	add	r3, r2
 800dc7e:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	b25b      	sxtb	r3, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	da42      	bge.n	800dd10 <USBH_HID_InterfaceInit+0x234>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800dc8a:	7dbb      	ldrb	r3, [r7, #22]
 800dc8c:	7df9      	ldrb	r1, [r7, #23]
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	3101      	adds	r1, #1
 800dc92:	00c9      	lsls	r1, r1, #3
 800dc94:	201a      	movs	r0, #26
 800dc96:	fb00 f303 	mul.w	r3, r0, r3
 800dc9a:	440b      	add	r3, r1
 800dc9c:	4413      	add	r3, r2
 800dc9e:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800dca2:	781a      	ldrb	r2, [r3, #0]
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	791b      	ldrb	r3, [r3, #4]
 800dcac:	4619      	mov	r1, r3
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f002 fc95 	bl	80105de <USBH_AllocPipe>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800dcbc:	7dbb      	ldrb	r3, [r7, #22]
 800dcbe:	7df9      	ldrb	r1, [r7, #23]
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	3101      	adds	r1, #1
 800dcc4:	00c9      	lsls	r1, r1, #3
 800dcc6:	201a      	movs	r0, #26
 800dcc8:	fb00 f303 	mul.w	r3, r0, r3
 800dccc:	440b      	add	r3, r1
 800dcce:	4413      	add	r3, r2
 800dcd0:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800dcd4:	881b      	ldrh	r3, [r3, #0]
 800dcd6:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	7859      	ldrb	r1, [r3, #1]
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	7918      	ldrb	r0, [r3, #4]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800dcec:	89ba      	ldrh	r2, [r7, #12]
 800dcee:	9202      	str	r2, [sp, #8]
 800dcf0:	2203      	movs	r2, #3
 800dcf2:	9201      	str	r2, [sp, #4]
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	4623      	mov	r3, r4
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f002 fc40 	bl	8010580 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	785b      	ldrb	r3, [r3, #1]
 800dd04:	2200      	movs	r2, #0
 800dd06:	4619      	mov	r1, r3
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f002 ff59 	bl	8010bc0 <USBH_LL_SetToggle>
 800dd0e:	e041      	b.n	800dd94 <USBH_HID_InterfaceInit+0x2b8>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800dd10:	7dbb      	ldrb	r3, [r7, #22]
 800dd12:	7df9      	ldrb	r1, [r7, #23]
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	3101      	adds	r1, #1
 800dd18:	00c9      	lsls	r1, r1, #3
 800dd1a:	201a      	movs	r0, #26
 800dd1c:	fb00 f303 	mul.w	r3, r0, r3
 800dd20:	440b      	add	r3, r1
 800dd22:	4413      	add	r3, r2
 800dd24:	f603 43fe 	addw	r3, r3, #3326	@ 0xcfe
 800dd28:	781a      	ldrb	r2, [r3, #0]
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	78db      	ldrb	r3, [r3, #3]
 800dd32:	4619      	mov	r1, r3
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f002 fc52 	bl	80105de <USBH_AllocPipe>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 800dd42:	7dbb      	ldrb	r3, [r7, #22]
 800dd44:	7df9      	ldrb	r1, [r7, #23]
 800dd46:	687a      	ldr	r2, [r7, #4]
 800dd48:	3101      	adds	r1, #1
 800dd4a:	00c9      	lsls	r1, r1, #3
 800dd4c:	201a      	movs	r0, #26
 800dd4e:	fb00 f303 	mul.w	r3, r0, r3
 800dd52:	440b      	add	r3, r1
 800dd54:	4413      	add	r3, r2
 800dd56:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800dd5a:	881b      	ldrh	r3, [r3, #0]
 800dd5c:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	7819      	ldrb	r1, [r3, #0]
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	78d8      	ldrb	r0, [r3, #3]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f893 4cd4 	ldrb.w	r4, [r3, #3284]	@ 0xcd4
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800dd72:	89ba      	ldrh	r2, [r7, #12]
 800dd74:	9202      	str	r2, [sp, #8]
 800dd76:	2203      	movs	r2, #3
 800dd78:	9201      	str	r2, [sp, #4]
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	4623      	mov	r3, r4
 800dd7e:	4602      	mov	r2, r0
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f002 fbfd 	bl	8010580 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f002 ff16 	bl	8010bc0 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800dd94:	7dfb      	ldrb	r3, [r7, #23]
 800dd96:	3301      	adds	r3, #1
 800dd98:	75fb      	strb	r3, [r7, #23]
 800dd9a:	7dfa      	ldrb	r2, [r7, #23]
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	f4ff af63 	bcc.w	800dc6a <USBH_HID_InterfaceInit+0x18e>
    }
  }

  return USBH_OK;
 800dda4:	2300      	movs	r3, #0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	371c      	adds	r7, #28
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd90      	pop	{r4, r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	08012118 	.word	0x08012118
 800ddb4:	08012124 	.word	0x08012124
 800ddb8:	0801214c 	.word	0x0801214c
 800ddbc:	08012174 	.word	0x08012174
 800ddc0:	0800e505 	.word	0x0800e505
 800ddc4:	0801218c 	.word	0x0801218c
 800ddc8:	0800e755 	.word	0x0800e755
 800ddcc:	080121a0 	.word	0x080121a0

0800ddd0 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800ddde:	69db      	ldr	r3, [r3, #28]
 800dde0:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	785b      	ldrb	r3, [r3, #1]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d00e      	beq.n	800de08 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	785b      	ldrb	r3, [r3, #1]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f002 fbe4 	bl	80105be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	785b      	ldrb	r3, [r3, #1]
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f002 fc10 	bl	8010622 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2200      	movs	r2, #0
 800de06:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00e      	beq.n	800de2e <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	4619      	mov	r1, r3
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f002 fbd1 	bl	80105be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	4619      	mov	r1, r3
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f002 fbfd 	bl	8010622 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2200      	movs	r2, #0
 800de2c:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800de34:	69db      	ldr	r3, [r3, #28]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00b      	beq.n	800de52 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800de40:	69db      	ldr	r3, [r3, #28]
 800de42:	4618      	mov	r0, r3
 800de44:	f002 ff4a 	bl	8010cdc <free>
    phost->pActiveClass->pData = 0U;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800de4e:	2200      	movs	r2, #0
 800de50:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800de52:	2300      	movs	r3, #0
}
 800de54:	4618      	mov	r0, r3
 800de56:	3710      	adds	r7, #16
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 800de64:	2301      	movs	r3, #1
 800de66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 800de68:	2301      	movs	r3, #1
 800de6a:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800de72:	69db      	ldr	r3, [r3, #28]
 800de74:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	795b      	ldrb	r3, [r3, #5]
 800de7a:	2b05      	cmp	r3, #5
 800de7c:	d872      	bhi.n	800df64 <USBH_HID_ClassRequest+0x108>
 800de7e:	a201      	add	r2, pc, #4	@ (adr r2, 800de84 <USBH_HID_ClassRequest+0x28>)
 800de80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de84:	0800de9d 	.word	0x0800de9d
 800de88:	0800df65 	.word	0x0800df65
 800de8c:	0800deb7 	.word	0x0800deb7
 800de90:	0800de9d 	.word	0x0800de9d
 800de94:	0800def3 	.word	0x0800def3
 800de98:	0800df1d 	.word	0x0800df1d
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	331c      	adds	r3, #28
 800dea6:	4619      	mov	r1, r3
 800dea8:	4610      	mov	r0, r2
 800deaa:	f000 fa17 	bl	800e2dc <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	2202      	movs	r2, #2
 800deb2:	715a      	strb	r2, [r3, #5]

      break;
 800deb4:	e05d      	b.n	800df72 <USBH_HID_ClassRequest+0x116>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800deba:	4619      	mov	r1, r3
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 f965 	bl	800e18c <USBH_HID_GetHIDReportDescriptor>
 800dec2:	4603      	mov	r3, r0
 800dec4:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800dec6:	7bbb      	ldrb	r3, [r7, #14]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d103      	bne.n	800ded4 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	2204      	movs	r2, #4
 800ded0:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800ded2:	e049      	b.n	800df68 <USBH_HID_ClassRequest+0x10c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800ded4:	7bbb      	ldrb	r3, [r7, #14]
 800ded6:	2b03      	cmp	r3, #3
 800ded8:	d146      	bne.n	800df68 <USBH_HID_ClassRequest+0x10c>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 800deda:	4828      	ldr	r0, [pc, #160]	@ (800df7c <USBH_HID_ClassRequest+0x120>)
 800dedc:	f003 f876 	bl	8010fcc <iprintf>
 800dee0:	4827      	ldr	r0, [pc, #156]	@ (800df80 <USBH_HID_ClassRequest+0x124>)
 800dee2:	f003 f873 	bl	8010fcc <iprintf>
 800dee6:	200a      	movs	r0, #10
 800dee8:	f003 f882 	bl	8010ff0 <putchar>
        status = USBH_FAIL;
 800deec:	2302      	movs	r3, #2
 800deee:	73fb      	strb	r3, [r7, #15]
      break;
 800def0:	e03a      	b.n	800df68 <USBH_HID_ClassRequest+0x10c>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800def2:	2200      	movs	r2, #0
 800def4:	2100      	movs	r1, #0
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f000 f976 	bl	800e1e8 <USBH_HID_SetIdle>
 800defc:	4603      	mov	r3, r0
 800defe:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800df00:	7bbb      	ldrb	r3, [r7, #14]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d103      	bne.n	800df0e <USBH_HID_ClassRequest+0xb2>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2205      	movs	r2, #5
 800df0a:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 800df0c:	e02e      	b.n	800df6c <USBH_HID_ClassRequest+0x110>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800df0e:	7bbb      	ldrb	r3, [r7, #14]
 800df10:	2b03      	cmp	r3, #3
 800df12:	d12b      	bne.n	800df6c <USBH_HID_ClassRequest+0x110>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	2205      	movs	r2, #5
 800df18:	715a      	strb	r2, [r3, #5]
      break;
 800df1a:	e027      	b.n	800df6c <USBH_HID_ClassRequest+0x110>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800df1c:	2100      	movs	r1, #0
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 f9b6 	bl	800e290 <USBH_HID_SetProtocol>
 800df24:	4603      	mov	r3, r0
 800df26:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800df28:	7bbb      	ldrb	r3, [r7, #14]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d10b      	bne.n	800df46 <USBH_HID_ClassRequest+0xea>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	2201      	movs	r2, #1
 800df32:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800df3a:	2102      	movs	r1, #2
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	4798      	blx	r3
        status = USBH_OK;
 800df40:	2300      	movs	r3, #0
 800df42:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800df44:	e014      	b.n	800df70 <USBH_HID_ClassRequest+0x114>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800df46:	7bbb      	ldrb	r3, [r7, #14]
 800df48:	2b03      	cmp	r3, #3
 800df4a:	d111      	bne.n	800df70 <USBH_HID_ClassRequest+0x114>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 800df4c:	480b      	ldr	r0, [pc, #44]	@ (800df7c <USBH_HID_ClassRequest+0x120>)
 800df4e:	f003 f83d 	bl	8010fcc <iprintf>
 800df52:	480c      	ldr	r0, [pc, #48]	@ (800df84 <USBH_HID_ClassRequest+0x128>)
 800df54:	f003 f83a 	bl	8010fcc <iprintf>
 800df58:	200a      	movs	r0, #10
 800df5a:	f003 f849 	bl	8010ff0 <putchar>
        status = USBH_FAIL;
 800df5e:	2302      	movs	r3, #2
 800df60:	73fb      	strb	r3, [r7, #15]
      break;
 800df62:	e005      	b.n	800df70 <USBH_HID_ClassRequest+0x114>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 800df64:	bf00      	nop
 800df66:	e004      	b.n	800df72 <USBH_HID_ClassRequest+0x116>
      break;
 800df68:	bf00      	nop
 800df6a:	e002      	b.n	800df72 <USBH_HID_ClassRequest+0x116>
      break;
 800df6c:	bf00      	nop
 800df6e:	e000      	b.n	800df72 <USBH_HID_ClassRequest+0x116>
      break;
 800df70:	bf00      	nop
  }

  return status;
 800df72:	7bfb      	ldrb	r3, [r7, #15]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3710      	adds	r7, #16
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	080121b8 	.word	0x080121b8
 800df80:	080121c0 	.word	0x080121c0
 800df84:	08012200 	.word	0x08012200

0800df88 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b088      	sub	sp, #32
 800df8c:	af02      	add	r7, sp, #8
 800df8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800df90:	2300      	movs	r3, #0
 800df92:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800df9a:	69db      	ldr	r3, [r3, #28]
 800df9c:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	789b      	ldrb	r3, [r3, #2]
 800dfa2:	2b06      	cmp	r3, #6
 800dfa4:	f200 80c1 	bhi.w	800e12a <USBH_HID_Process+0x1a2>
 800dfa8:	a201      	add	r2, pc, #4	@ (adr r2, 800dfb0 <USBH_HID_Process+0x28>)
 800dfaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfae:	bf00      	nop
 800dfb0:	0800dfcd 	.word	0x0800dfcd
 800dfb4:	0800e005 	.word	0x0800e005
 800dfb8:	0800e12b 	.word	0x0800e12b
 800dfbc:	0800e12b 	.word	0x0800e12b
 800dfc0:	0800e075 	.word	0x0800e075
 800dfc4:	0800e05f 	.word	0x0800e05f
 800dfc8:	0800e0a3 	.word	0x0800e0a3
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	4798      	blx	r3
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800dfd8:	7dfb      	ldrb	r3, [r7, #23]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d103      	bne.n	800dfe6 <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800dfe4:	e0a6      	b.n	800e134 <USBH_HID_Process+0x1ac>
        USBH_ErrLog("HID Class Init failed");
 800dfe6:	4856      	ldr	r0, [pc, #344]	@ (800e140 <USBH_HID_Process+0x1b8>)
 800dfe8:	f002 fff0 	bl	8010fcc <iprintf>
 800dfec:	4855      	ldr	r0, [pc, #340]	@ (800e144 <USBH_HID_Process+0x1bc>)
 800dfee:	f002 ffed 	bl	8010fcc <iprintf>
 800dff2:	200a      	movs	r0, #10
 800dff4:	f002 fffc 	bl	8010ff0 <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	2207      	movs	r2, #7
 800dffc:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800dffe:	2302      	movs	r3, #2
 800e000:	75fb      	strb	r3, [r7, #23]
      break;
 800e002:	e097      	b.n	800e134 <USBH_HID_Process+0x1ac>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	695a      	ldr	r2, [r3, #20]
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	8b1b      	ldrh	r3, [r3, #24]
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	4613      	mov	r3, r2
 800e012:	2200      	movs	r2, #0
 800e014:	2101      	movs	r1, #1
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f90e 	bl	800e238 <USBH_HID_GetReport>
 800e01c:	4603      	mov	r3, r0
 800e01e:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800e020:	7dfb      	ldrb	r3, [r7, #23]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d103      	bne.n	800e02e <USBH_HID_Process+0xa6>
      {
        HID_Handle->state = USBH_HID_SYNC;
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	2205      	movs	r2, #5
 800e02a:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e02c:	e082      	b.n	800e134 <USBH_HID_Process+0x1ac>
      else if (status == USBH_BUSY)
 800e02e:	7dfb      	ldrb	r3, [r7, #23]
 800e030:	2b01      	cmp	r3, #1
 800e032:	d105      	bne.n	800e040 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_IDLE;
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	2201      	movs	r2, #1
 800e038:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800e03a:	2300      	movs	r3, #0
 800e03c:	75fb      	strb	r3, [r7, #23]
      break;
 800e03e:	e079      	b.n	800e134 <USBH_HID_Process+0x1ac>
      else if (status == USBH_NOT_SUPPORTED)
 800e040:	7dfb      	ldrb	r3, [r7, #23]
 800e042:	2b03      	cmp	r3, #3
 800e044:	d105      	bne.n	800e052 <USBH_HID_Process+0xca>
        HID_Handle->state = USBH_HID_SYNC;
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	2205      	movs	r2, #5
 800e04a:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800e04c:	2300      	movs	r3, #0
 800e04e:	75fb      	strb	r3, [r7, #23]
      break;
 800e050:	e070      	b.n	800e134 <USBH_HID_Process+0x1ac>
        HID_Handle->state = USBH_HID_ERROR;
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	2207      	movs	r2, #7
 800e056:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800e058:	2302      	movs	r3, #2
 800e05a:	75fb      	strb	r3, [r7, #23]
      break;
 800e05c:	e06a      	b.n	800e134 <USBH_HID_Process+0x1ac>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800e064:	f003 0301 	and.w	r3, r3, #1
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d060      	beq.n	800e12e <USBH_HID_Process+0x1a6>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	2204      	movs	r2, #4
 800e070:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e072:	e05c      	b.n	800e12e <USBH_HID_Process+0x1a6>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800e07c:	b2da      	uxtb	r2, r3
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	785b      	ldrb	r3, [r3, #1]
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f002 fa5d 	bl	8010542 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	2206      	movs	r2, #6
 800e08c:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	2200      	movs	r2, #0
 800e09c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 800e0a0:	e048      	b.n	800e134 <USBH_HID_Process+0x1ac>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	785b      	ldrb	r3, [r3, #1]
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f002 fd5f 	bl	8010b6c <USBH_LL_GetURBState>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d124      	bne.n	800e0fe <USBH_HID_Process+0x176>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	785b      	ldrb	r3, [r3, #1]
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f002 fcc4 	bl	8010a48 <USBH_LL_GetLastXferSize>
 800e0c0:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d132      	bne.n	800e132 <USBH_HID_Process+0x1aa>
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d02f      	beq.n	800e132 <USBH_HID_Process+0x1aa>
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d02b      	beq.n	800e132 <USBH_HID_Process+0x1aa>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	f103 0008 	add.w	r0, r3, #8
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	6959      	ldr	r1, [r3, #20]
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	8b1b      	ldrh	r3, [r3, #24]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	f000 f9b7 	bl	800e45c <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f7f2 fa4a 	bl	8000590 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 800e0fc:	e019      	b.n	800e132 <USBH_HID_Process+0x1aa>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	785b      	ldrb	r3, [r3, #1]
 800e102:	4619      	mov	r1, r3
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f002 fd31 	bl	8010b6c <USBH_LL_GetURBState>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b05      	cmp	r3, #5
 800e10e:	d110      	bne.n	800e132 <USBH_HID_Process+0x1aa>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	7e9b      	ldrb	r3, [r3, #26]
 800e114:	4619      	mov	r1, r3
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f001 fcc0 	bl	800fa9c <USBH_ClrFeature>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d107      	bne.n	800e132 <USBH_HID_Process+0x1aa>
            HID_Handle->state = USBH_HID_GET_DATA;
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	2204      	movs	r2, #4
 800e126:	709a      	strb	r2, [r3, #2]
      break;
 800e128:	e003      	b.n	800e132 <USBH_HID_Process+0x1aa>

    default:
      break;
 800e12a:	bf00      	nop
 800e12c:	e002      	b.n	800e134 <USBH_HID_Process+0x1ac>
      break;
 800e12e:	bf00      	nop
 800e130:	e000      	b.n	800e134 <USBH_HID_Process+0x1ac>
      break;
 800e132:	bf00      	nop
  }

  return status;
 800e134:	7dfb      	ldrb	r3, [r7, #23]
}
 800e136:	4618      	mov	r0, r3
 800e138:	3718      	adds	r7, #24
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	080121b8 	.word	0x080121b8
 800e144:	08012238 	.word	0x08012238

0800e148 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e156:	69db      	ldr	r3, [r3, #28]
 800e158:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	789b      	ldrb	r3, [r3, #2]
 800e15e:	2b06      	cmp	r3, #6
 800e160:	d10c      	bne.n	800e17c <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 2d7c 	ldr.w	r2, [r3, #3452]	@ 0xd7c
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6a1b      	ldr	r3, [r3, #32]
 800e16c:	1ad3      	subs	r3, r2, r3
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	8b92      	ldrh	r2, [r2, #28]
 800e172:	4293      	cmp	r3, r2
 800e174:	d302      	bcc.n	800e17c <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2204      	movs	r2, #4
 800e17a:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800e17c:	2300      	movs	r3, #0
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3714      	adds	r7, #20
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr
	...

0800e18c <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af02      	add	r7, sp, #8
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	460b      	mov	r3, r1
 800e196:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800e198:	887b      	ldrh	r3, [r7, #2]
 800e19a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d90a      	bls.n	800e1b8 <USBH_HID_GetHIDReportDescriptor+0x2c>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 800e1a2:	480f      	ldr	r0, [pc, #60]	@ (800e1e0 <USBH_HID_GetHIDReportDescriptor+0x54>)
 800e1a4:	f002 ff12 	bl	8010fcc <iprintf>
 800e1a8:	480e      	ldr	r0, [pc, #56]	@ (800e1e4 <USBH_HID_GetHIDReportDescriptor+0x58>)
 800e1aa:	f002 ff0f 	bl	8010fcc <iprintf>
 800e1ae:	200a      	movs	r0, #10
 800e1b0:	f002 ff1e 	bl	8010ff0 <putchar>
    return USBH_NOT_SUPPORTED;
 800e1b4:	2303      	movs	r3, #3
 800e1b6:	e00e      	b.n	800e1d6 <USBH_HID_GetHIDReportDescriptor+0x4a>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800e1be:	887b      	ldrh	r3, [r7, #2]
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800e1c8:	2101      	movs	r1, #1
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f001 fbc6 	bl	800f95c <USBH_GetDescriptor>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800e1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3710      	adds	r7, #16
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	080121b8 	.word	0x080121b8
 800e1e4:	08012250 	.word	0x08012250

0800e1e8 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	70fb      	strb	r3, [r7, #3]
 800e1f4:	4613      	mov	r3, r2
 800e1f6:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2221      	movs	r2, #33	@ 0x21
 800e1fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	220a      	movs	r2, #10
 800e202:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800e204:	78fb      	ldrb	r3, [r7, #3]
 800e206:	b29b      	uxth	r3, r3
 800e208:	021b      	lsls	r3, r3, #8
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	78bb      	ldrb	r3, [r7, #2]
 800e20e:	b29b      	uxth	r3, r3
 800e210:	4313      	orrs	r3, r2
 800e212:	b29a      	uxth	r2, r3
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2200      	movs	r2, #0
 800e222:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800e224:	2200      	movs	r2, #0
 800e226:	2100      	movs	r1, #0
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f001 ff6d 	bl	8010108 <USBH_CtlReq>
 800e22e:	4603      	mov	r3, r0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	607b      	str	r3, [r7, #4]
 800e242:	460b      	mov	r3, r1
 800e244:	72fb      	strb	r3, [r7, #11]
 800e246:	4613      	mov	r3, r2
 800e248:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	22a1      	movs	r2, #161	@ 0xa1
 800e24e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2201      	movs	r2, #1
 800e254:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800e256:	7afb      	ldrb	r3, [r7, #11]
 800e258:	b29b      	uxth	r3, r3
 800e25a:	021b      	lsls	r3, r3, #8
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	7abb      	ldrb	r3, [r7, #10]
 800e260:	b29b      	uxth	r3, r3
 800e262:	4313      	orrs	r3, r2
 800e264:	b29a      	uxth	r2, r3
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2200      	movs	r2, #0
 800e26e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800e270:	7e3b      	ldrb	r3, [r7, #24]
 800e272:	b29a      	uxth	r2, r3
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800e278:	7e3b      	ldrb	r3, [r7, #24]
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	461a      	mov	r2, r3
 800e27e:	6879      	ldr	r1, [r7, #4]
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f001 ff41 	bl	8010108 <USBH_CtlReq>
 800e286:	4603      	mov	r3, r0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3710      	adds	r7, #16
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	460b      	mov	r3, r1
 800e29a:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2221      	movs	r2, #33	@ 0x21
 800e2a0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	220b      	movs	r2, #11
 800e2a6:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800e2a8:	78fb      	ldrb	r3, [r7, #3]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d003      	beq.n	800e2b6 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	825a      	strh	r2, [r3, #18]
 800e2b4:	e002      	b.n	800e2bc <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f001 ff1b 	bl	8010108 <USBH_CtlReq>
 800e2d2:	4603      	mov	r3, r0

}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	3302      	adds	r3, #2
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	3303      	adds	r3, #3
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	021b      	lsls	r3, r3, #8
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800e300:	897b      	ldrh	r3, [r7, #10]
 800e302:	2b09      	cmp	r3, #9
 800e304:	d941      	bls.n	800e38a <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 800e306:	2309      	movs	r3, #9
 800e308:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800e30a:	e03a      	b.n	800e382 <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e30c:	f107 0308 	add.w	r3, r7, #8
 800e310:	4619      	mov	r1, r3
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f001 fede 	bl	80100d4 <USBH_GetNextDesc>
 800e318:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	785b      	ldrb	r3, [r3, #1]
 800e31e:	2b21      	cmp	r3, #33	@ 0x21
 800e320:	d12f      	bne.n	800e382 <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	781a      	ldrb	r2, [r3, #0]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	785a      	ldrb	r2, [r3, #1]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	3302      	adds	r3, #2
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	461a      	mov	r2, r3
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	3303      	adds	r3, #3
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	021b      	lsls	r3, r3, #8
 800e342:	b29b      	uxth	r3, r3
 800e344:	4313      	orrs	r3, r2
 800e346:	b29a      	uxth	r2, r3
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	791a      	ldrb	r2, [r3, #4]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	795a      	ldrb	r2, [r3, #5]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	799a      	ldrb	r2, [r3, #6]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	3307      	adds	r3, #7
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	461a      	mov	r2, r3
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	3308      	adds	r3, #8
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	021b      	lsls	r3, r3, #8
 800e374:	b29b      	uxth	r3, r3
 800e376:	4313      	orrs	r3, r2
 800e378:	b29a      	uxth	r2, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	811a      	strh	r2, [r3, #8]
        break;
 800e37e:	bf00      	nop
      }
    }
  }
}
 800e380:	e003      	b.n	800e38a <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800e382:	893b      	ldrh	r3, [r7, #8]
 800e384:	897a      	ldrh	r2, [r7, #10]
 800e386:	429a      	cmp	r2, r3
 800e388:	d8c0      	bhi.n	800e30c <USBH_HID_ParseHIDDesc+0x30>
}
 800e38a:	bf00      	nop
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800e392:	b480      	push	{r7}
 800e394:	b085      	sub	sp, #20
 800e396:	af00      	add	r7, sp, #0
 800e398:	60f8      	str	r0, [r7, #12]
 800e39a:	60b9      	str	r1, [r7, #8]
 800e39c:	4613      	mov	r3, r2
 800e39e:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	88fa      	ldrh	r2, [r7, #6]
 800e3b6:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	601a      	str	r2, [r3, #0]
}
 800e3be:	bf00      	nop
 800e3c0:	3714      	adds	r7, #20
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr

0800e3ca <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800e3ca:	b480      	push	{r7}
 800e3cc:	b087      	sub	sp, #28
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	60f8      	str	r0, [r7, #12]
 800e3d2:	60b9      	str	r1, [r7, #8]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	7a9b      	ldrb	r3, [r3, #10]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d131      	bne.n	800e448 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	82fb      	strh	r3, [r7, #22]
 800e3ee:	e027      	b.n	800e440 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	88da      	ldrh	r2, [r3, #6]
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	889b      	ldrh	r3, [r3, #4]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d019      	beq.n	800e430 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	68fa      	ldr	r2, [r7, #12]
 800e402:	88d2      	ldrh	r2, [r2, #6]
 800e404:	441a      	add	r2, r3
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	1c59      	adds	r1, r3, #1
 800e40a:	6139      	str	r1, [r7, #16]
 800e40c:	7812      	ldrb	r2, [r2, #0]
 800e40e:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	88db      	ldrh	r3, [r3, #6]
 800e414:	3301      	adds	r3, #1
 800e416:	b29a      	uxth	r2, r3
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	88da      	ldrh	r2, [r3, #6]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	891b      	ldrh	r3, [r3, #8]
 800e424:	429a      	cmp	r2, r3
 800e426:	d108      	bne.n	800e43a <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2200      	movs	r2, #0
 800e42c:	80da      	strh	r2, [r3, #6]
 800e42e:	e004      	b.n	800e43a <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2200      	movs	r2, #0
 800e434:	729a      	strb	r2, [r3, #10]
        return i;
 800e436:	8afb      	ldrh	r3, [r7, #22]
 800e438:	e00a      	b.n	800e450 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800e43a:	8afb      	ldrh	r3, [r7, #22]
 800e43c:	3301      	adds	r3, #1
 800e43e:	82fb      	strh	r3, [r7, #22]
 800e440:	8afa      	ldrh	r2, [r7, #22]
 800e442:	88fb      	ldrh	r3, [r7, #6]
 800e444:	429a      	cmp	r2, r3
 800e446:	d3d3      	bcc.n	800e3f0 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800e44e:	88fb      	ldrh	r3, [r7, #6]
}
 800e450:	4618      	mov	r0, r3
 800e452:	371c      	adds	r7, #28
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr

0800e45c <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b087      	sub	sp, #28
 800e460:	af00      	add	r7, sp, #0
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	4613      	mov	r3, r2
 800e468:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	7a9b      	ldrb	r3, [r3, #10]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d13c      	bne.n	800e4f0 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2201      	movs	r2, #1
 800e47a:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800e47c:	2300      	movs	r3, #0
 800e47e:	82fb      	strh	r3, [r7, #22]
 800e480:	e032      	b.n	800e4e8 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	889b      	ldrh	r3, [r3, #4]
 800e486:	3301      	adds	r3, #1
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	88d2      	ldrh	r2, [r2, #6]
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d00a      	beq.n	800e4a6 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	889b      	ldrh	r3, [r3, #4]
 800e494:	3301      	adds	r3, #1
 800e496:	68fa      	ldr	r2, [r7, #12]
 800e498:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d108      	bne.n	800e4b0 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	88db      	ldrh	r3, [r3, #6]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d104      	bne.n	800e4b0 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	729a      	strb	r2, [r3, #10]
        return i;
 800e4ac:	8afb      	ldrh	r3, [r7, #22]
 800e4ae:	e023      	b.n	800e4f8 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	1c5a      	adds	r2, r3, #1
 800e4b4:	613a      	str	r2, [r7, #16]
 800e4b6:	68fa      	ldr	r2, [r7, #12]
 800e4b8:	6812      	ldr	r2, [r2, #0]
 800e4ba:	68f9      	ldr	r1, [r7, #12]
 800e4bc:	8889      	ldrh	r1, [r1, #4]
 800e4be:	440a      	add	r2, r1
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	7013      	strb	r3, [r2, #0]
        f->head++;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	889b      	ldrh	r3, [r3, #4]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	889a      	ldrh	r2, [r3, #4]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	891b      	ldrh	r3, [r3, #8]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d102      	bne.n	800e4e2 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800e4e2:	8afb      	ldrh	r3, [r7, #22]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	82fb      	strh	r3, [r7, #22]
 800e4e8:	8afa      	ldrh	r2, [r7, #22]
 800e4ea:	88fb      	ldrh	r3, [r7, #6]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d3c8      	bcc.n	800e482 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800e4f6:	88fb      	ldrh	r3, [r7, #6]
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	371c      	adds	r7, #28
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e512:	69db      	ldr	r3, [r3, #28]
 800e514:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800e516:	4b22      	ldr	r3, [pc, #136]	@ (800e5a0 <USBH_HID_KeybdInit+0x9c>)
 800e518:	2200      	movs	r2, #0
 800e51a:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800e51c:	4b20      	ldr	r3, [pc, #128]	@ (800e5a0 <USBH_HID_KeybdInit+0x9c>)
 800e51e:	2200      	movs	r2, #0
 800e520:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800e522:	4b1f      	ldr	r3, [pc, #124]	@ (800e5a0 <USBH_HID_KeybdInit+0x9c>)
 800e524:	2200      	movs	r2, #0
 800e526:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800e528:	4b1d      	ldr	r3, [pc, #116]	@ (800e5a0 <USBH_HID_KeybdInit+0x9c>)
 800e52a:	2200      	movs	r2, #0
 800e52c:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800e52e:	4b1c      	ldr	r3, [pc, #112]	@ (800e5a0 <USBH_HID_KeybdInit+0x9c>)
 800e530:	2200      	movs	r2, #0
 800e532:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800e534:	4b1a      	ldr	r3, [pc, #104]	@ (800e5a0 <USBH_HID_KeybdInit+0x9c>)
 800e536:	2200      	movs	r2, #0
 800e538:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800e53a:	4b19      	ldr	r3, [pc, #100]	@ (800e5a0 <USBH_HID_KeybdInit+0x9c>)
 800e53c:	2200      	movs	r2, #0
 800e53e:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800e540:	4b17      	ldr	r3, [pc, #92]	@ (800e5a0 <USBH_HID_KeybdInit+0x9c>)
 800e542:	2200      	movs	r2, #0
 800e544:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800e546:	2300      	movs	r3, #0
 800e548:	60fb      	str	r3, [r7, #12]
 800e54a:	e00c      	b.n	800e566 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800e54c:	4a15      	ldr	r2, [pc, #84]	@ (800e5a4 <USBH_HID_KeybdInit+0xa0>)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	4413      	add	r3, r2
 800e552:	2200      	movs	r2, #0
 800e554:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 800e556:	4a14      	ldr	r2, [pc, #80]	@ (800e5a8 <USBH_HID_KeybdInit+0xa4>)
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	4413      	add	r3, r2
 800e55c:	2200      	movs	r2, #0
 800e55e:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	3301      	adds	r3, #1
 800e564:	60fb      	str	r3, [r7, #12]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2b07      	cmp	r3, #7
 800e56a:	d9ef      	bls.n	800e54c <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	8b1b      	ldrh	r3, [r3, #24]
 800e570:	2b08      	cmp	r3, #8
 800e572:	d902      	bls.n	800e57a <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	2208      	movs	r2, #8
 800e578:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	4a0a      	ldr	r2, [pc, #40]	@ (800e5a8 <USBH_HID_KeybdInit+0xa4>)
 800e57e:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	f103 0008 	add.w	r0, r3, #8
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e58c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e590:	4619      	mov	r1, r3
 800e592:	f7ff fefe 	bl	800e392 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800e596:	2300      	movs	r3, #0
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3710      	adds	r7, #16
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	2000135c 	.word	0x2000135c
 800e5a4:	20001374 	.word	0x20001374
 800e5a8:	2000136c 	.word	0x2000136c

0800e5ac <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f000 f80d 	bl	800e5d4 <USBH_HID_KeybdDecode>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d101      	bne.n	800e5c4 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800e5c0:	4b03      	ldr	r3, [pc, #12]	@ (800e5d0 <USBH_HID_GetKeybdInfo+0x24>)
 800e5c2:	e000      	b.n	800e5c6 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800e5c4:	2300      	movs	r3, #0
  }
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3708      	adds	r7, #8
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	2000135c 	.word	0x2000135c

0800e5d4 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b084      	sub	sp, #16
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e5e2:	69db      	ldr	r3, [r3, #28]
 800e5e4:	60bb      	str	r3, [r7, #8]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	8b1b      	ldrh	r3, [r3, #24]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d003      	beq.n	800e5f6 <USBH_HID_KeybdDecode+0x22>
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	689b      	ldr	r3, [r3, #8]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d101      	bne.n	800e5fa <USBH_HID_KeybdDecode+0x26>
  {
    return USBH_FAIL;
 800e5f6:	2302      	movs	r3, #2
 800e5f8:	e066      	b.n	800e6c8 <USBH_HID_KeybdDecode+0xf4>
  }

  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	f103 0008 	add.w	r0, r3, #8
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	8b1b      	ldrh	r3, [r3, #24]
 800e604:	461a      	mov	r2, r3
 800e606:	4932      	ldr	r1, [pc, #200]	@ (800e6d0 <USBH_HID_KeybdDecode+0xfc>)
 800e608:	f7ff fedf 	bl	800e3ca <USBH_HID_FifoRead>
 800e60c:	4603      	mov	r3, r0
 800e60e:	461a      	mov	r2, r3
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	8b1b      	ldrh	r3, [r3, #24]
 800e614:	429a      	cmp	r2, r3
 800e616:	d156      	bne.n	800e6c6 <USBH_HID_KeybdDecode+0xf2>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800e618:	2100      	movs	r1, #0
 800e61a:	482e      	ldr	r0, [pc, #184]	@ (800e6d4 <USBH_HID_KeybdDecode+0x100>)
 800e61c:	f000 f8e6 	bl	800e7ec <HID_ReadItem>
 800e620:	4603      	mov	r3, r0
 800e622:	b2da      	uxtb	r2, r3
 800e624:	4b2c      	ldr	r3, [pc, #176]	@ (800e6d8 <USBH_HID_KeybdDecode+0x104>)
 800e626:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800e628:	2100      	movs	r1, #0
 800e62a:	482c      	ldr	r0, [pc, #176]	@ (800e6dc <USBH_HID_KeybdDecode+0x108>)
 800e62c:	f000 f8de 	bl	800e7ec <HID_ReadItem>
 800e630:	4603      	mov	r3, r0
 800e632:	b2da      	uxtb	r2, r3
 800e634:	4b28      	ldr	r3, [pc, #160]	@ (800e6d8 <USBH_HID_KeybdDecode+0x104>)
 800e636:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800e638:	2100      	movs	r1, #0
 800e63a:	4829      	ldr	r0, [pc, #164]	@ (800e6e0 <USBH_HID_KeybdDecode+0x10c>)
 800e63c:	f000 f8d6 	bl	800e7ec <HID_ReadItem>
 800e640:	4603      	mov	r3, r0
 800e642:	b2da      	uxtb	r2, r3
 800e644:	4b24      	ldr	r3, [pc, #144]	@ (800e6d8 <USBH_HID_KeybdDecode+0x104>)
 800e646:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800e648:	2100      	movs	r1, #0
 800e64a:	4826      	ldr	r0, [pc, #152]	@ (800e6e4 <USBH_HID_KeybdDecode+0x110>)
 800e64c:	f000 f8ce 	bl	800e7ec <HID_ReadItem>
 800e650:	4603      	mov	r3, r0
 800e652:	b2da      	uxtb	r2, r3
 800e654:	4b20      	ldr	r3, [pc, #128]	@ (800e6d8 <USBH_HID_KeybdDecode+0x104>)
 800e656:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800e658:	2100      	movs	r1, #0
 800e65a:	4823      	ldr	r0, [pc, #140]	@ (800e6e8 <USBH_HID_KeybdDecode+0x114>)
 800e65c:	f000 f8c6 	bl	800e7ec <HID_ReadItem>
 800e660:	4603      	mov	r3, r0
 800e662:	b2da      	uxtb	r2, r3
 800e664:	4b1c      	ldr	r3, [pc, #112]	@ (800e6d8 <USBH_HID_KeybdDecode+0x104>)
 800e666:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800e668:	2100      	movs	r1, #0
 800e66a:	4820      	ldr	r0, [pc, #128]	@ (800e6ec <USBH_HID_KeybdDecode+0x118>)
 800e66c:	f000 f8be 	bl	800e7ec <HID_ReadItem>
 800e670:	4603      	mov	r3, r0
 800e672:	b2da      	uxtb	r2, r3
 800e674:	4b18      	ldr	r3, [pc, #96]	@ (800e6d8 <USBH_HID_KeybdDecode+0x104>)
 800e676:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800e678:	2100      	movs	r1, #0
 800e67a:	481d      	ldr	r0, [pc, #116]	@ (800e6f0 <USBH_HID_KeybdDecode+0x11c>)
 800e67c:	f000 f8b6 	bl	800e7ec <HID_ReadItem>
 800e680:	4603      	mov	r3, r0
 800e682:	b2da      	uxtb	r2, r3
 800e684:	4b14      	ldr	r3, [pc, #80]	@ (800e6d8 <USBH_HID_KeybdDecode+0x104>)
 800e686:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800e688:	2100      	movs	r1, #0
 800e68a:	481a      	ldr	r0, [pc, #104]	@ (800e6f4 <USBH_HID_KeybdDecode+0x120>)
 800e68c:	f000 f8ae 	bl	800e7ec <HID_ReadItem>
 800e690:	4603      	mov	r3, r0
 800e692:	b2da      	uxtb	r2, r3
 800e694:	4b10      	ldr	r3, [pc, #64]	@ (800e6d8 <USBH_HID_KeybdDecode+0x104>)
 800e696:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800e698:	2300      	movs	r3, #0
 800e69a:	73fb      	strb	r3, [r7, #15]
 800e69c:	e00e      	b.n	800e6bc <USBH_HID_KeybdDecode+0xe8>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800e69e:	7bfb      	ldrb	r3, [r7, #15]
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	4815      	ldr	r0, [pc, #84]	@ (800e6f8 <USBH_HID_KeybdDecode+0x124>)
 800e6a4:	f000 f8a2 	bl	800e7ec <HID_ReadItem>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	7bfb      	ldrb	r3, [r7, #15]
 800e6ac:	b2d1      	uxtb	r1, r2
 800e6ae:	4a0a      	ldr	r2, [pc, #40]	@ (800e6d8 <USBH_HID_KeybdDecode+0x104>)
 800e6b0:	4413      	add	r3, r2
 800e6b2:	460a      	mov	r2, r1
 800e6b4:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800e6b6:	7bfb      	ldrb	r3, [r7, #15]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	73fb      	strb	r3, [r7, #15]
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
 800e6be:	2b05      	cmp	r3, #5
 800e6c0:	d9ed      	bls.n	800e69e <USBH_HID_KeybdDecode+0xca>
    }

    return USBH_OK;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	e000      	b.n	800e6c8 <USBH_HID_KeybdDecode+0xf4>
  }
  return   USBH_FAIL;
 800e6c6:	2302      	movs	r3, #2
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3710      	adds	r7, #16
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	20001374 	.word	0x20001374
 800e6d4:	080151f0 	.word	0x080151f0
 800e6d8:	2000135c 	.word	0x2000135c
 800e6dc:	08015210 	.word	0x08015210
 800e6e0:	08015230 	.word	0x08015230
 800e6e4:	08015250 	.word	0x08015250
 800e6e8:	08015270 	.word	0x08015270
 800e6ec:	08015290 	.word	0x08015290
 800e6f0:	080152b0 	.word	0x080152b0
 800e6f4:	080152d0 	.word	0x080152d0
 800e6f8:	080152f0 	.word	0x080152f0

0800e6fc <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	789b      	ldrb	r3, [r3, #2]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d103      	bne.n	800e714 <USBH_HID_GetASCIICode+0x18>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	799b      	ldrb	r3, [r3, #6]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d009      	beq.n	800e728 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	7a5b      	ldrb	r3, [r3, #9]
 800e718:	461a      	mov	r2, r3
 800e71a:	4b0b      	ldr	r3, [pc, #44]	@ (800e748 <USBH_HID_GetASCIICode+0x4c>)
 800e71c:	5c9b      	ldrb	r3, [r3, r2]
 800e71e:	461a      	mov	r2, r3
 800e720:	4b0a      	ldr	r3, [pc, #40]	@ (800e74c <USBH_HID_GetASCIICode+0x50>)
 800e722:	5c9b      	ldrb	r3, [r3, r2]
 800e724:	73fb      	strb	r3, [r7, #15]
 800e726:	e008      	b.n	800e73a <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	7a5b      	ldrb	r3, [r3, #9]
 800e72c:	461a      	mov	r2, r3
 800e72e:	4b06      	ldr	r3, [pc, #24]	@ (800e748 <USBH_HID_GetASCIICode+0x4c>)
 800e730:	5c9b      	ldrb	r3, [r3, r2]
 800e732:	461a      	mov	r2, r3
 800e734:	4b06      	ldr	r3, [pc, #24]	@ (800e750 <USBH_HID_GetASCIICode+0x54>)
 800e736:	5c9b      	ldrb	r3, [r3, r2]
 800e738:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800e73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3714      	adds	r7, #20
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr
 800e748:	08015418 	.word	0x08015418
 800e74c:	08015394 	.word	0x08015394
 800e750:	08015310 	.word	0x08015310

0800e754 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800e762:	69db      	ldr	r3, [r3, #28]
 800e764:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800e766:	4b1e      	ldr	r3, [pc, #120]	@ (800e7e0 <USBH_HID_MouseInit+0x8c>)
 800e768:	2200      	movs	r2, #0
 800e76a:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800e76c:	4b1c      	ldr	r3, [pc, #112]	@ (800e7e0 <USBH_HID_MouseInit+0x8c>)
 800e76e:	2200      	movs	r2, #0
 800e770:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800e772:	4b1b      	ldr	r3, [pc, #108]	@ (800e7e0 <USBH_HID_MouseInit+0x8c>)
 800e774:	2200      	movs	r2, #0
 800e776:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800e778:	4b19      	ldr	r3, [pc, #100]	@ (800e7e0 <USBH_HID_MouseInit+0x8c>)
 800e77a:	2200      	movs	r2, #0
 800e77c:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800e77e:	4b18      	ldr	r3, [pc, #96]	@ (800e7e0 <USBH_HID_MouseInit+0x8c>)
 800e780:	2200      	movs	r2, #0
 800e782:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800e784:	2300      	movs	r3, #0
 800e786:	60fb      	str	r3, [r7, #12]
 800e788:	e00c      	b.n	800e7a4 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800e78a:	4a16      	ldr	r2, [pc, #88]	@ (800e7e4 <USBH_HID_MouseInit+0x90>)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	4413      	add	r3, r2
 800e790:	2200      	movs	r2, #0
 800e792:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800e794:	4a14      	ldr	r2, [pc, #80]	@ (800e7e8 <USBH_HID_MouseInit+0x94>)
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	4413      	add	r3, r2
 800e79a:	2200      	movs	r2, #0
 800e79c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	60fb      	str	r3, [r7, #12]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2b07      	cmp	r3, #7
 800e7a8:	d9ef      	bls.n	800e78a <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	8b1b      	ldrh	r3, [r3, #24]
 800e7ae:	2b08      	cmp	r3, #8
 800e7b0:	d902      	bls.n	800e7b8 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	2208      	movs	r2, #8
 800e7b6:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	4a0b      	ldr	r2, [pc, #44]	@ (800e7e8 <USBH_HID_MouseInit+0x94>)
 800e7bc:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	f103 0008 	add.w	r0, r3, #8
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e7ca:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	f7ff fddf 	bl	800e392 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	2000137c 	.word	0x2000137c
 800e7e4:	20001384 	.word	0x20001384
 800e7e8:	2000138c 	.word	0x2000138c

0800e7ec <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b089      	sub	sp, #36	@ 0x24
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	7a1b      	ldrb	r3, [r3, #8]
 800e80a:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	7a5b      	ldrb	r3, [r3, #9]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d01a      	beq.n	800e84a <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	7a5b      	ldrb	r3, [r3, #9]
 800e818:	78fa      	ldrb	r2, [r7, #3]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d301      	bcc.n	800e822 <HID_ReadItem+0x36>
    {
      return (0U);
 800e81e:	2300      	movs	r3, #0
 800e820:	e078      	b.n	800e914 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800e822:	78fb      	ldrb	r3, [r7, #3]
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	6852      	ldr	r2, [r2, #4]
 800e828:	fb02 f303 	mul.w	r3, r2, r3
 800e82c:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800e82e:	7cfb      	ldrb	r3, [r7, #19]
 800e830:	68fa      	ldr	r2, [r7, #12]
 800e832:	4413      	add	r3, r2
 800e834:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	08db      	lsrs	r3, r3, #3
 800e83a:	697a      	ldr	r2, [r7, #20]
 800e83c:	4413      	add	r3, r2
 800e83e:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	b2db      	uxtb	r3, r3
 800e844:	f003 0307 	and.w	r3, r3, #7
 800e848:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800e84a:	2300      	movs	r3, #0
 800e84c:	61bb      	str	r3, [r7, #24]
 800e84e:	e00a      	b.n	800e866 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	461a      	mov	r2, r3
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	00db      	lsls	r3, r3, #3
 800e85a:	fa02 f303 	lsl.w	r3, r2, r3
 800e85e:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	3301      	adds	r3, #1
 800e864:	61bb      	str	r3, [r7, #24]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	685b      	ldr	r3, [r3, #4]
 800e86a:	f003 0307 	and.w	r3, r3, #7
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d004      	beq.n	800e87c <HID_ReadItem+0x90>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	08db      	lsrs	r3, r3, #3
 800e878:	3301      	adds	r3, #1
 800e87a:	e002      	b.n	800e882 <HID_ReadItem+0x96>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	08db      	lsrs	r3, r3, #3
 800e882:	69ba      	ldr	r2, [r7, #24]
 800e884:	4293      	cmp	r3, r2
 800e886:	d8e3      	bhi.n	800e850 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800e888:	7cfb      	ldrb	r3, [r7, #19]
 800e88a:	69fa      	ldr	r2, [r7, #28]
 800e88c:	40da      	lsrs	r2, r3
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	f04f 31ff 	mov.w	r1, #4294967295
 800e896:	fa01 f303 	lsl.w	r3, r1, r3
 800e89a:	43db      	mvns	r3, r3
 800e89c:	4013      	ands	r3, r2
 800e89e:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	68db      	ldr	r3, [r3, #12]
 800e8a4:	69fa      	ldr	r2, [r7, #28]
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d304      	bcc.n	800e8b4 <HID_ReadItem+0xc8>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	69fa      	ldr	r2, [r7, #28]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d901      	bls.n	800e8b8 <HID_ReadItem+0xcc>
  {
    return (0U);
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	e02d      	b.n	800e914 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	7a9b      	ldrb	r3, [r3, #10]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d01e      	beq.n	800e8fe <HID_ReadItem+0x112>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	69fa      	ldr	r2, [r7, #28]
 800e8c8:	fa22 f303 	lsr.w	r3, r2, r3
 800e8cc:	f003 0301 	and.w	r3, r3, #1
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d014      	beq.n	800e8fe <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	685b      	ldr	r3, [r3, #4]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	fa02 f303 	lsl.w	r3, r2, r3
 800e8de:	425b      	negs	r3, r3
 800e8e0:	69fa      	ldr	r2, [r7, #28]
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	69db      	ldr	r3, [r3, #28]
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d101      	bne.n	800e8f2 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	e010      	b.n	800e914 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	69db      	ldr	r3, [r3, #28]
 800e8f6:	68ba      	ldr	r2, [r7, #8]
 800e8f8:	fb02 f303 	mul.w	r3, r2, r3
 800e8fc:	e00a      	b.n	800e914 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	69db      	ldr	r3, [r3, #28]
 800e902:	2b01      	cmp	r3, #1
 800e904:	d101      	bne.n	800e90a <HID_ReadItem+0x11e>
    {
      return (val);
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	e004      	b.n	800e914 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	69db      	ldr	r3, [r3, #28]
 800e90e:	69fa      	ldr	r2, [r7, #28]
 800e910:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800e914:	4618      	mov	r0, r3
 800e916:	3724      	adds	r7, #36	@ 0x24
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	4613      	mov	r3, r2
 800e92c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d10a      	bne.n	800e94a <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 800e934:	481c      	ldr	r0, [pc, #112]	@ (800e9a8 <USBH_Init+0x88>)
 800e936:	f002 fb49 	bl	8010fcc <iprintf>
 800e93a:	481c      	ldr	r0, [pc, #112]	@ (800e9ac <USBH_Init+0x8c>)
 800e93c:	f002 fb46 	bl	8010fcc <iprintf>
 800e940:	200a      	movs	r0, #10
 800e942:	f002 fb55 	bl	8010ff0 <putchar>
    return USBH_FAIL;
 800e946:	2302      	movs	r3, #2
 800e948:	e029      	b.n	800e99e <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	79fa      	ldrb	r2, [r7, #7]
 800e94e:	f883 2d84 	strb.w	r2, [r3, #3460]	@ 0xd84

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2200      	movs	r2, #0
 800e956:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
  phost->ClassNumber = 0U;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	f000 f824 	bl	800e9b0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2200      	movs	r2, #0
 800e96c:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
  phost->device.is_connected = 0U;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2200      	movs	r2, #0
 800e974:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2200      	movs	r2, #0
 800e97c:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2200      	movs	r2, #0
 800e984:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d003      	beq.n	800e996 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	68ba      	ldr	r2, [r7, #8]
 800e992:	f8c3 2d8c 	str.w	r2, [r3, #3468]	@ 0xd8c

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f001 ff98 	bl	80108cc <USBH_LL_Init>

  return USBH_OK;
 800e99c:	2300      	movs	r3, #0
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	080122dc 	.word	0x080122dc
 800e9ac:	080122e4 	.word	0x080122e4

0800e9b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e9bc:	2300      	movs	r3, #0
 800e9be:	60fb      	str	r3, [r7, #12]
 800e9c0:	e00a      	b.n	800e9d8 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	4413      	add	r3, r2
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	60fb      	str	r3, [r7, #12]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2b0f      	cmp	r3, #15
 800e9dc:	d9f1      	bls.n	800e9c2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e9de:	2300      	movs	r3, #0
 800e9e0:	60fb      	str	r3, [r7, #12]
 800e9e2:	e009      	b.n	800e9f8 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	4413      	add	r3, r2
 800e9ea:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	60fb      	str	r3, [r7, #12]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d9f0      	bls.n	800e9e4 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2201      	movs	r2, #1
 800ea12:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2200      	movs	r2, #0
 800ea18:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c

  phost->Control.state = CTRL_SETUP;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2201      	movs	r2, #1
 800ea20:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2240      	movs	r2, #64	@ 0x40
 800ea26:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2200      	movs	r2, #0
 800ea32:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5
  phost->device.RstCnt = 0U;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2200      	movs	r2, #0
 800ea42:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
  phost->device.EnumCnt = 0U;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2200      	movs	r2, #0
 800ea4a:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	331c      	adds	r3, #28
 800ea52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ea56:	2100      	movs	r1, #0
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f002 fc27 	bl	80112ac <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ea64:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800ea68:	2100      	movs	r1, #0
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f002 fc1e 	bl	80112ac <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 800ea76:	2212      	movs	r2, #18
 800ea78:	2100      	movs	r1, #0
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f002 fc16 	bl	80112ac <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800ea86:	223e      	movs	r2, #62	@ 0x3e
 800ea88:	2100      	movs	r1, #0
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f002 fc0e 	bl	80112ac <memset>

  return USBH_OK;
 800ea90:	2300      	movs	r3, #0
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
	...

0800ea9c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b084      	sub	sp, #16
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d020      	beq.n	800eaf2 <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d10f      	bne.n	800eada <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800eac0:	1c59      	adds	r1, r3, #1
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	f8c2 1d38 	str.w	r1, [r2, #3384]	@ 0xd38
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800eace:	6839      	ldr	r1, [r7, #0]
 800ead0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ead4:	2300      	movs	r3, #0
 800ead6:	73fb      	strb	r3, [r7, #15]
 800ead8:	e016      	b.n	800eb08 <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 800eada:	480e      	ldr	r0, [pc, #56]	@ (800eb14 <USBH_RegisterClass+0x78>)
 800eadc:	f002 fa76 	bl	8010fcc <iprintf>
 800eae0:	480d      	ldr	r0, [pc, #52]	@ (800eb18 <USBH_RegisterClass+0x7c>)
 800eae2:	f002 fa73 	bl	8010fcc <iprintf>
 800eae6:	200a      	movs	r0, #10
 800eae8:	f002 fa82 	bl	8010ff0 <putchar>
      status = USBH_FAIL;
 800eaec:	2302      	movs	r3, #2
 800eaee:	73fb      	strb	r3, [r7, #15]
 800eaf0:	e00a      	b.n	800eb08 <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800eaf2:	4808      	ldr	r0, [pc, #32]	@ (800eb14 <USBH_RegisterClass+0x78>)
 800eaf4:	f002 fa6a 	bl	8010fcc <iprintf>
 800eaf8:	4808      	ldr	r0, [pc, #32]	@ (800eb1c <USBH_RegisterClass+0x80>)
 800eafa:	f002 fa67 	bl	8010fcc <iprintf>
 800eafe:	200a      	movs	r0, #10
 800eb00:	f002 fa76 	bl	8010ff0 <putchar>
    status = USBH_FAIL;
 800eb04:	2302      	movs	r3, #2
 800eb06:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eb08:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	080122dc 	.word	0x080122dc
 800eb18:	080122f8 	.word	0x080122f8
 800eb1c:	08012314 	.word	0x08012314

0800eb20 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	460b      	mov	r3, r1
 800eb2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f893 3cf4 	ldrb.w	r3, [r3, #3316]	@ 0xcf4
 800eb36:	78fa      	ldrb	r2, [r7, #3]
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d23c      	bcs.n	800ebb6 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	78fa      	ldrb	r2, [r7, #3]
 800eb40:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800eb44:	78fb      	ldrb	r3, [r7, #3]
 800eb46:	4619      	mov	r1, r3
 800eb48:	4823      	ldr	r0, [pc, #140]	@ (800ebd8 <USBH_SelectInterface+0xb8>)
 800eb4a:	f002 fa3f 	bl	8010fcc <iprintf>
 800eb4e:	200a      	movs	r0, #10
 800eb50:	f002 fa4e 	bl	8010ff0 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800eb54:	78fb      	ldrb	r3, [r7, #3]
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	211a      	movs	r1, #26
 800eb5a:	fb01 f303 	mul.w	r3, r1, r3
 800eb5e:	4413      	add	r3, r2
 800eb60:	f603 43ff 	addw	r3, r3, #3327	@ 0xcff
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	4619      	mov	r1, r3
 800eb68:	481c      	ldr	r0, [pc, #112]	@ (800ebdc <USBH_SelectInterface+0xbc>)
 800eb6a:	f002 fa2f 	bl	8010fcc <iprintf>
 800eb6e:	200a      	movs	r0, #10
 800eb70:	f002 fa3e 	bl	8010ff0 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800eb74:	78fb      	ldrb	r3, [r7, #3]
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	211a      	movs	r1, #26
 800eb7a:	fb01 f303 	mul.w	r3, r1, r3
 800eb7e:	4413      	add	r3, r2
 800eb80:	f503 6350 	add.w	r3, r3, #3328	@ 0xd00
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	4619      	mov	r1, r3
 800eb88:	4815      	ldr	r0, [pc, #84]	@ (800ebe0 <USBH_SelectInterface+0xc0>)
 800eb8a:	f002 fa1f 	bl	8010fcc <iprintf>
 800eb8e:	200a      	movs	r0, #10
 800eb90:	f002 fa2e 	bl	8010ff0 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800eb94:	78fb      	ldrb	r3, [r7, #3]
 800eb96:	687a      	ldr	r2, [r7, #4]
 800eb98:	211a      	movs	r1, #26
 800eb9a:	fb01 f303 	mul.w	r3, r1, r3
 800eb9e:	4413      	add	r3, r2
 800eba0:	f603 5301 	addw	r3, r3, #3329	@ 0xd01
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	4619      	mov	r1, r3
 800eba8:	480e      	ldr	r0, [pc, #56]	@ (800ebe4 <USBH_SelectInterface+0xc4>)
 800ebaa:	f002 fa0f 	bl	8010fcc <iprintf>
 800ebae:	200a      	movs	r0, #10
 800ebb0:	f002 fa1e 	bl	8010ff0 <putchar>
 800ebb4:	e00a      	b.n	800ebcc <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 800ebb6:	480c      	ldr	r0, [pc, #48]	@ (800ebe8 <USBH_SelectInterface+0xc8>)
 800ebb8:	f002 fa08 	bl	8010fcc <iprintf>
 800ebbc:	480b      	ldr	r0, [pc, #44]	@ (800ebec <USBH_SelectInterface+0xcc>)
 800ebbe:	f002 fa05 	bl	8010fcc <iprintf>
 800ebc2:	200a      	movs	r0, #10
 800ebc4:	f002 fa14 	bl	8010ff0 <putchar>
    status = USBH_FAIL;
 800ebc8:	2302      	movs	r3, #2
 800ebca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ebcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	0801232c 	.word	0x0801232c
 800ebdc:	0801234c 	.word	0x0801234c
 800ebe0:	0801235c 	.word	0x0801235c
 800ebe4:	0801236c 	.word	0x0801236c
 800ebe8:	080122dc 	.word	0x080122dc
 800ebec:	0801237c 	.word	0x0801237c

0800ebf0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b087      	sub	sp, #28
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	4608      	mov	r0, r1
 800ebfa:	4611      	mov	r1, r2
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	4603      	mov	r3, r0
 800ec00:	70fb      	strb	r3, [r7, #3]
 800ec02:	460b      	mov	r3, r1
 800ec04:	70bb      	strb	r3, [r7, #2]
 800ec06:	4613      	mov	r3, r2
 800ec08:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800ec18:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ec1a:	e025      	b.n	800ec68 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ec1c:	7dfb      	ldrb	r3, [r7, #23]
 800ec1e:	221a      	movs	r2, #26
 800ec20:	fb02 f303 	mul.w	r3, r2, r3
 800ec24:	3308      	adds	r3, #8
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	4413      	add	r3, r2
 800ec2a:	3302      	adds	r3, #2
 800ec2c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	795b      	ldrb	r3, [r3, #5]
 800ec32:	78fa      	ldrb	r2, [r7, #3]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d002      	beq.n	800ec3e <USBH_FindInterface+0x4e>
 800ec38:	78fb      	ldrb	r3, [r7, #3]
 800ec3a:	2bff      	cmp	r3, #255	@ 0xff
 800ec3c:	d111      	bne.n	800ec62 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ec42:	78ba      	ldrb	r2, [r7, #2]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d002      	beq.n	800ec4e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ec48:	78bb      	ldrb	r3, [r7, #2]
 800ec4a:	2bff      	cmp	r3, #255	@ 0xff
 800ec4c:	d109      	bne.n	800ec62 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ec52:	787a      	ldrb	r2, [r7, #1]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d002      	beq.n	800ec5e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ec58:	787b      	ldrb	r3, [r7, #1]
 800ec5a:	2bff      	cmp	r3, #255	@ 0xff
 800ec5c:	d101      	bne.n	800ec62 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ec5e:	7dfb      	ldrb	r3, [r7, #23]
 800ec60:	e006      	b.n	800ec70 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ec62:	7dfb      	ldrb	r3, [r7, #23]
 800ec64:	3301      	adds	r3, #1
 800ec66:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ec68:	7dfb      	ldrb	r3, [r7, #23]
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d9d6      	bls.n	800ec1c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ec6e:	23ff      	movs	r3, #255	@ 0xff
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	371c      	adds	r7, #28
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f001 fe67 	bl	8010958 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ec8a:	2101      	movs	r1, #1
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f001 ff80 	bl	8010b92 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ec92:	2300      	movs	r3, #0
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b088      	sub	sp, #32
 800eca0:	af04      	add	r7, sp, #16
 800eca2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800eca4:	2302      	movs	r3, #2
 800eca6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f893 3cd9 	ldrb.w	r3, [r3, #3289]	@ 0xcd9
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d102      	bne.n	800ecbe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2203      	movs	r2, #3
 800ecbc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	2b0b      	cmp	r3, #11
 800ecc6:	f200 8239 	bhi.w	800f13c <USBH_Process+0x4a0>
 800ecca:	a201      	add	r2, pc, #4	@ (adr r2, 800ecd0 <USBH_Process+0x34>)
 800eccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd0:	0800ed01 	.word	0x0800ed01
 800ecd4:	0800ed3f 	.word	0x0800ed3f
 800ecd8:	0800edbf 	.word	0x0800edbf
 800ecdc:	0800f0cb 	.word	0x0800f0cb
 800ece0:	0800f13d 	.word	0x0800f13d
 800ece4:	0800ee5f 	.word	0x0800ee5f
 800ece8:	0800f04d 	.word	0x0800f04d
 800ecec:	0800eead 	.word	0x0800eead
 800ecf0:	0800eecd 	.word	0x0800eecd
 800ecf4:	0800eef7 	.word	0x0800eef7
 800ecf8:	0800ef53 	.word	0x0800ef53
 800ecfc:	0800f0b3 	.word	0x0800f0b3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f893 3cd8 	ldrb.w	r3, [r3, #3288]	@ 0xcd8
 800ed06:	b2db      	uxtb	r3, r3
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	f000 8219 	beq.w	800f140 <USBH_Process+0x4a4>
      {
        USBH_UsrLog("USB Device Connected");
 800ed0e:	48a5      	ldr	r0, [pc, #660]	@ (800efa4 <USBH_Process+0x308>)
 800ed10:	f002 f95c 	bl	8010fcc <iprintf>
 800ed14:	200a      	movs	r0, #10
 800ed16:	f002 f96b 	bl	8010ff0 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ed20:	20c8      	movs	r0, #200	@ 0xc8
 800ed22:	f001 ff80 	bl	8010c26 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f001 fe73 	bl	8010a12 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4
        phost->Timeout = 0U;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2200      	movs	r2, #0
 800ed38:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ed3c:	e200      	b.n	800f140 <USBH_Process+0x4a4>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f893 3cdb 	ldrb.w	r3, [r3, #3291]	@ 0xcdb
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d10d      	bne.n	800ed64 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800ed48:	4897      	ldr	r0, [pc, #604]	@ (800efa8 <USBH_Process+0x30c>)
 800ed4a:	f002 f93f 	bl	8010fcc <iprintf>
 800ed4e:	200a      	movs	r0, #10
 800ed50:	f002 f94e 	bl	8010ff0 <putchar>
        phost->device.RstCnt = 0U;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
        phost->gState = HOST_DEV_ATTACHED;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2202      	movs	r2, #2
 800ed60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ed62:	e1fa      	b.n	800f15a <USBH_Process+0x4be>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800ed6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ed6e:	d91a      	bls.n	800eda6 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800ed76:	3301      	adds	r3, #1
 800ed78:	b2da      	uxtb	r2, r3
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f883 2cd7 	strb.w	r2, [r3, #3287]	@ 0xcd7
          if (phost->device.RstCnt > 3U)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f893 3cd7 	ldrb.w	r3, [r3, #3287]	@ 0xcd7
 800ed86:	2b03      	cmp	r3, #3
 800ed88:	d909      	bls.n	800ed9e <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800ed8a:	4888      	ldr	r0, [pc, #544]	@ (800efac <USBH_Process+0x310>)
 800ed8c:	f002 f91e 	bl	8010fcc <iprintf>
 800ed90:	200a      	movs	r0, #10
 800ed92:	f002 f92d 	bl	8010ff0 <putchar>
            phost->gState = HOST_ABORT_STATE;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	220d      	movs	r2, #13
 800ed9a:	701a      	strb	r2, [r3, #0]
      break;
 800ed9c:	e1dd      	b.n	800f15a <USBH_Process+0x4be>
            phost->gState = HOST_IDLE;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	701a      	strb	r2, [r3, #0]
      break;
 800eda4:	e1d9      	b.n	800f15a <USBH_Process+0x4be>
          phost->Timeout += 10U;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800edac:	f103 020a 	add.w	r2, r3, #10
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
          USBH_Delay(10U);
 800edb6:	200a      	movs	r0, #10
 800edb8:	f001 ff35 	bl	8010c26 <USBH_Delay>
      break;
 800edbc:	e1cd      	b.n	800f15a <USBH_Process+0x4be>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d005      	beq.n	800edd4 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800edce:	2104      	movs	r1, #4
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800edd4:	2064      	movs	r0, #100	@ 0x64
 800edd6:	f001 ff26 	bl	8010c26 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f001 fdf2 	bl	80109c4 <USBH_LL_GetSpeed>
 800ede0:	4603      	mov	r3, r0
 800ede2:	461a      	mov	r2, r3
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f883 2cd5 	strb.w	r2, [r3, #3285]	@ 0xcd5

      phost->gState = HOST_ENUMERATION;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2205      	movs	r2, #5
 800edee:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800edf0:	2100      	movs	r1, #0
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f001 fbf3 	bl	80105de <USBH_AllocPipe>
 800edf8:	4603      	mov	r3, r0
 800edfa:	461a      	mov	r2, r3
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ee00:	2180      	movs	r1, #128	@ 0x80
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f001 fbeb 	bl	80105de <USBH_AllocPipe>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	7919      	ldrb	r1, [r3, #4]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ee24:	9202      	str	r2, [sp, #8]
 800ee26:	2200      	movs	r2, #0
 800ee28:	9201      	str	r2, [sp, #4]
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2280      	movs	r2, #128	@ 0x80
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f001 fba5 	bl	8010580 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	7959      	ldrb	r1, [r3, #5]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ee4a:	9202      	str	r2, [sp, #8]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	9201      	str	r2, [sp, #4]
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	4603      	mov	r3, r0
 800ee54:	2200      	movs	r2, #0
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f001 fb92 	bl	8010580 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ee5c:	e17d      	b.n	800f15a <USBH_Process+0x4be>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 f98e 	bl	800f180 <USBH_HandleEnum>
 800ee64:	4603      	mov	r3, r0
 800ee66:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ee68:	7bbb      	ldrb	r3, [r7, #14]
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	f040 8169 	bne.w	800f144 <USBH_Process+0x4a8>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 800ee72:	484f      	ldr	r0, [pc, #316]	@ (800efb0 <USBH_Process+0x314>)
 800ee74:	f002 f8aa 	bl	8010fcc <iprintf>
 800ee78:	200a      	movs	r0, #10
 800ee7a:	f002 f8b9 	bl	8010ff0 <putchar>

        phost->device.current_interface = 0U;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2200      	movs	r2, #0
 800ee82:	f883 2cdc 	strb.w	r2, [r3, #3292]	@ 0xcdc

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f893 3cef 	ldrb.w	r3, [r3, #3311]	@ 0xcef
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d109      	bne.n	800eea4 <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 800ee90:	4848      	ldr	r0, [pc, #288]	@ (800efb4 <USBH_Process+0x318>)
 800ee92:	f002 f89b 	bl	8010fcc <iprintf>
 800ee96:	200a      	movs	r0, #10
 800ee98:	f002 f8aa 	bl	8010ff0 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2208      	movs	r2, #8
 800eea0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800eea2:	e14f      	b.n	800f144 <USBH_Process+0x4a8>
          phost->gState = HOST_INPUT;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2207      	movs	r2, #7
 800eea8:	701a      	strb	r2, [r3, #0]
      break;
 800eeaa:	e14b      	b.n	800f144 <USBH_Process+0x4a8>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	f000 8148 	beq.w	800f148 <USBH_Process+0x4ac>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800eebe:	2101      	movs	r1, #1
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2208      	movs	r2, #8
 800eec8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800eeca:	e13d      	b.n	800f148 <USBH_Process+0x4ac>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f893 3cf5 	ldrb.w	r3, [r3, #3317]	@ 0xcf5
 800eed2:	4619      	mov	r1, r3
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f000 fd9a 	bl	800fa0e <USBH_SetCfg>
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	f040 8135 	bne.w	800f14c <USBH_Process+0x4b0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2209      	movs	r2, #9
 800eee6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800eee8:	4833      	ldr	r0, [pc, #204]	@ (800efb8 <USBH_Process+0x31c>)
 800eeea:	f002 f86f 	bl	8010fcc <iprintf>
 800eeee:	200a      	movs	r0, #10
 800eef0:	f002 f87e 	bl	8010ff0 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800eef4:	e12a      	b.n	800f14c <USBH_Process+0x4b0>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f893 3cf7 	ldrb.w	r3, [r3, #3319]	@ 0xcf7
 800eefc:	f003 0320 	and.w	r3, r3, #32
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d022      	beq.n	800ef4a <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ef04:	2101      	movs	r1, #1
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 fda4 	bl	800fa54 <USBH_SetFeature>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ef10:	7bbb      	ldrb	r3, [r7, #14]
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d109      	bne.n	800ef2c <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800ef18:	4828      	ldr	r0, [pc, #160]	@ (800efbc <USBH_Process+0x320>)
 800ef1a:	f002 f857 	bl	8010fcc <iprintf>
 800ef1e:	200a      	movs	r0, #10
 800ef20:	f002 f866 	bl	8010ff0 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	220a      	movs	r2, #10
 800ef28:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ef2a:	e111      	b.n	800f150 <USBH_Process+0x4b4>
        else if (status == USBH_NOT_SUPPORTED)
 800ef2c:	7bbb      	ldrb	r3, [r7, #14]
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	2b03      	cmp	r3, #3
 800ef32:	f040 810d 	bne.w	800f150 <USBH_Process+0x4b4>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800ef36:	4822      	ldr	r0, [pc, #136]	@ (800efc0 <USBH_Process+0x324>)
 800ef38:	f002 f848 	bl	8010fcc <iprintf>
 800ef3c:	200a      	movs	r0, #10
 800ef3e:	f002 f857 	bl	8010ff0 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	220a      	movs	r2, #10
 800ef46:	701a      	strb	r2, [r3, #0]
      break;
 800ef48:	e102      	b.n	800f150 <USBH_Process+0x4b4>
        phost->gState = HOST_CHECK_CLASS;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	220a      	movs	r2, #10
 800ef4e:	701a      	strb	r2, [r3, #0]
      break;
 800ef50:	e0fe      	b.n	800f150 <USBH_Process+0x4b4>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d106      	bne.n	800ef6a <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 800ef5c:	4819      	ldr	r0, [pc, #100]	@ (800efc4 <USBH_Process+0x328>)
 800ef5e:	f002 f835 	bl	8010fcc <iprintf>
 800ef62:	200a      	movs	r0, #10
 800ef64:	f002 f844 	bl	8010ff0 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ef68:	e0f7      	b.n	800f15a <USBH_Process+0x4be>
        phost->pActiveClass = NULL;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ef72:	2300      	movs	r3, #0
 800ef74:	73fb      	strb	r3, [r7, #15]
 800ef76:	e02a      	b.n	800efce <USBH_Process+0x332>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ef78:	7bfa      	ldrb	r2, [r7, #15]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800ef80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef84:	791a      	ldrb	r2, [r3, #4]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f893 3cff 	ldrb.w	r3, [r3, #3327]	@ 0xcff
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d11b      	bne.n	800efc8 <USBH_Process+0x32c>
            phost->pActiveClass = phost->pClass[idx];
 800ef90:	7bfa      	ldrb	r2, [r7, #15]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f502 7253 	add.w	r2, r2, #844	@ 0x34c
 800ef98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
            break;
 800efa2:	e017      	b.n	800efd4 <USBH_Process+0x338>
 800efa4:	0801239c 	.word	0x0801239c
 800efa8:	080123b4 	.word	0x080123b4
 800efac:	080123d0 	.word	0x080123d0
 800efb0:	080123fc 	.word	0x080123fc
 800efb4:	08012410 	.word	0x08012410
 800efb8:	08012438 	.word	0x08012438
 800efbc:	08012454 	.word	0x08012454
 800efc0:	08012474 	.word	0x08012474
 800efc4:	080124a0 	.word	0x080124a0
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800efc8:	7bfb      	ldrb	r3, [r7, #15]
 800efca:	3301      	adds	r3, #1
 800efcc:	73fb      	strb	r3, [r7, #15]
 800efce:	7bfb      	ldrb	r3, [r7, #15]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d0d1      	beq.n	800ef78 <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d02c      	beq.n	800f038 <USBH_Process+0x39c>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800efe4:	689b      	ldr	r3, [r3, #8]
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	4798      	blx	r3
 800efea:	4603      	mov	r3, r0
 800efec:	2b00      	cmp	r3, #0
 800efee:	d114      	bne.n	800f01a <USBH_Process+0x37e>
            phost->gState = HOST_CLASS_REQUEST;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2206      	movs	r2, #6
 800eff4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4619      	mov	r1, r3
 800f000:	4858      	ldr	r0, [pc, #352]	@ (800f164 <USBH_Process+0x4c8>)
 800f002:	f001 ffe3 	bl	8010fcc <iprintf>
 800f006:	200a      	movs	r0, #10
 800f008:	f001 fff2 	bl	8010ff0 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f012:	2103      	movs	r1, #3
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	4798      	blx	r3
      break;
 800f018:	e09f      	b.n	800f15a <USBH_Process+0x4be>
            phost->gState = HOST_ABORT_STATE;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	220d      	movs	r2, #13
 800f01e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4619      	mov	r1, r3
 800f02a:	484f      	ldr	r0, [pc, #316]	@ (800f168 <USBH_Process+0x4cc>)
 800f02c:	f001 ffce 	bl	8010fcc <iprintf>
 800f030:	200a      	movs	r0, #10
 800f032:	f001 ffdd 	bl	8010ff0 <putchar>
      break;
 800f036:	e090      	b.n	800f15a <USBH_Process+0x4be>
          phost->gState = HOST_ABORT_STATE;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	220d      	movs	r2, #13
 800f03c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 800f03e:	484b      	ldr	r0, [pc, #300]	@ (800f16c <USBH_Process+0x4d0>)
 800f040:	f001 ffc4 	bl	8010fcc <iprintf>
 800f044:	200a      	movs	r0, #10
 800f046:	f001 ffd3 	bl	8010ff0 <putchar>
      break;
 800f04a:	e086      	b.n	800f15a <USBH_Process+0x4be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f052:	2b00      	cmp	r3, #0
 800f054:	d020      	beq.n	800f098 <USBH_Process+0x3fc>
      {
        status = phost->pActiveClass->Requests(phost);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f05c:	691b      	ldr	r3, [r3, #16]
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	4798      	blx	r3
 800f062:	4603      	mov	r3, r0
 800f064:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f066:	7bbb      	ldrb	r3, [r7, #14]
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d103      	bne.n	800f076 <USBH_Process+0x3da>
        {
          phost->gState = HOST_CLASS;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	220b      	movs	r2, #11
 800f072:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f074:	e06e      	b.n	800f154 <USBH_Process+0x4b8>
        else if (status == USBH_FAIL)
 800f076:	7bbb      	ldrb	r3, [r7, #14]
 800f078:	b2db      	uxtb	r3, r3
 800f07a:	2b02      	cmp	r3, #2
 800f07c:	d16a      	bne.n	800f154 <USBH_Process+0x4b8>
          phost->gState = HOST_ABORT_STATE;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	220d      	movs	r2, #13
 800f082:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800f084:	483a      	ldr	r0, [pc, #232]	@ (800f170 <USBH_Process+0x4d4>)
 800f086:	f001 ffa1 	bl	8010fcc <iprintf>
 800f08a:	483a      	ldr	r0, [pc, #232]	@ (800f174 <USBH_Process+0x4d8>)
 800f08c:	f001 ff9e 	bl	8010fcc <iprintf>
 800f090:	200a      	movs	r0, #10
 800f092:	f001 ffad 	bl	8010ff0 <putchar>
      break;
 800f096:	e05d      	b.n	800f154 <USBH_Process+0x4b8>
        phost->gState = HOST_ABORT_STATE;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	220d      	movs	r2, #13
 800f09c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800f09e:	4834      	ldr	r0, [pc, #208]	@ (800f170 <USBH_Process+0x4d4>)
 800f0a0:	f001 ff94 	bl	8010fcc <iprintf>
 800f0a4:	4834      	ldr	r0, [pc, #208]	@ (800f178 <USBH_Process+0x4dc>)
 800f0a6:	f001 ff91 	bl	8010fcc <iprintf>
 800f0aa:	200a      	movs	r0, #10
 800f0ac:	f001 ffa0 	bl	8010ff0 <putchar>
      break;
 800f0b0:	e050      	b.n	800f154 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d04d      	beq.n	800f158 <USBH_Process+0x4bc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f0c2:	695b      	ldr	r3, [r3, #20]
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	4798      	blx	r3
      }
      break;
 800f0c8:	e046      	b.n	800f158 <USBH_Process+0x4bc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9

      (void)DeInitStateMachine(phost);
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f7ff fc6c 	bl	800e9b0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d009      	beq.n	800f0f6 <USBH_Process+0x45a>
      {
        phost->pActiveClass->DeInit(phost);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
      }

      if (phost->pUser != NULL)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d005      	beq.n	800f10c <USBH_Process+0x470>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 800f106:	2105      	movs	r1, #5
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 800f10c:	481b      	ldr	r0, [pc, #108]	@ (800f17c <USBH_Process+0x4e0>)
 800f10e:	f001 ff5d 	bl	8010fcc <iprintf>
 800f112:	200a      	movs	r0, #10
 800f114:	f001 ff6c 	bl	8010ff0 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f893 3cda 	ldrb.w	r3, [r3, #3290]	@ 0xcda
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	2b01      	cmp	r3, #1
 800f122:	d107      	bne.n	800f134 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2200      	movs	r2, #0
 800f128:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7ff fda5 	bl	800ec7c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f132:	e012      	b.n	800f15a <USBH_Process+0x4be>
        (void)USBH_LL_Start(phost);
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f001 fc0f 	bl	8010958 <USBH_LL_Start>
      break;
 800f13a:	e00e      	b.n	800f15a <USBH_Process+0x4be>

    case HOST_ABORT_STATE:
    default :
      break;
 800f13c:	bf00      	nop
 800f13e:	e00c      	b.n	800f15a <USBH_Process+0x4be>
      break;
 800f140:	bf00      	nop
 800f142:	e00a      	b.n	800f15a <USBH_Process+0x4be>
      break;
 800f144:	bf00      	nop
 800f146:	e008      	b.n	800f15a <USBH_Process+0x4be>
    break;
 800f148:	bf00      	nop
 800f14a:	e006      	b.n	800f15a <USBH_Process+0x4be>
      break;
 800f14c:	bf00      	nop
 800f14e:	e004      	b.n	800f15a <USBH_Process+0x4be>
      break;
 800f150:	bf00      	nop
 800f152:	e002      	b.n	800f15a <USBH_Process+0x4be>
      break;
 800f154:	bf00      	nop
 800f156:	e000      	b.n	800f15a <USBH_Process+0x4be>
      break;
 800f158:	bf00      	nop
  }
  return USBH_OK;
 800f15a:	2300      	movs	r3, #0
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3710      	adds	r7, #16
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	080124c0 	.word	0x080124c0
 800f168:	080124d4 	.word	0x080124d4
 800f16c:	080124f4 	.word	0x080124f4
 800f170:	080122dc 	.word	0x080122dc
 800f174:	0801251c 	.word	0x0801251c
 800f178:	08012544 	.word	0x08012544
 800f17c:	0801255c 	.word	0x0801255c

0800f180 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b088      	sub	sp, #32
 800f184:	af04      	add	r7, sp, #16
 800f186:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f188:	2301      	movs	r3, #1
 800f18a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f18c:	2301      	movs	r3, #1
 800f18e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	785b      	ldrb	r3, [r3, #1]
 800f194:	2b07      	cmp	r3, #7
 800f196:	f200 827b 	bhi.w	800f690 <USBH_HandleEnum+0x510>
 800f19a:	a201      	add	r2, pc, #4	@ (adr r2, 800f1a0 <USBH_HandleEnum+0x20>)
 800f19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a0:	0800f1c1 	.word	0x0800f1c1
 800f1a4:	0800f299 	.word	0x0800f299
 800f1a8:	0800f349 	.word	0x0800f349
 800f1ac:	0800f405 	.word	0x0800f405
 800f1b0:	0800f48d 	.word	0x0800f48d
 800f1b4:	0800f53f 	.word	0x0800f53f
 800f1b8:	0800f5b3 	.word	0x0800f5b3
 800f1bc:	0800f625 	.word	0x0800f625
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f1c0:	2108      	movs	r1, #8
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f000 fb16 	bl	800f7f4 <USBH_Get_DevDesc>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f1cc:	7bbb      	ldrb	r3, [r7, #14]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d12e      	bne.n	800f230 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f893 2ce5 	ldrb.w	r2, [r3, #3301]	@ 0xce5
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	7919      	ldrb	r1, [r3, #4]
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f1f6:	9202      	str	r2, [sp, #8]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	9201      	str	r2, [sp, #4]
 800f1fc:	9300      	str	r3, [sp, #0]
 800f1fe:	4603      	mov	r3, r0
 800f200:	2280      	movs	r2, #128	@ 0x80
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f001 f9bc 	bl	8010580 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	7959      	ldrb	r1, [r3, #5]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f218:	687a      	ldr	r2, [r7, #4]
 800f21a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f21c:	9202      	str	r2, [sp, #8]
 800f21e:	2200      	movs	r2, #0
 800f220:	9201      	str	r2, [sp, #4]
 800f222:	9300      	str	r3, [sp, #0]
 800f224:	4603      	mov	r3, r0
 800f226:	2200      	movs	r2, #0
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f001 f9a9 	bl	8010580 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f22e:	e231      	b.n	800f694 <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f230:	7bbb      	ldrb	r3, [r7, #14]
 800f232:	2b03      	cmp	r3, #3
 800f234:	f040 822e 	bne.w	800f694 <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800f238:	48ae      	ldr	r0, [pc, #696]	@ (800f4f4 <USBH_HandleEnum+0x374>)
 800f23a:	f001 fec7 	bl	8010fcc <iprintf>
 800f23e:	48ae      	ldr	r0, [pc, #696]	@ (800f4f8 <USBH_HandleEnum+0x378>)
 800f240:	f001 fec4 	bl	8010fcc <iprintf>
 800f244:	200a      	movs	r0, #10
 800f246:	f001 fed3 	bl	8010ff0 <putchar>
        phost->device.EnumCnt++;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800f250:	3301      	adds	r3, #1
 800f252:	b2da      	uxtb	r2, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800f260:	2b03      	cmp	r3, #3
 800f262:	d909      	bls.n	800f278 <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800f264:	48a5      	ldr	r0, [pc, #660]	@ (800f4fc <USBH_HandleEnum+0x37c>)
 800f266:	f001 feb1 	bl	8010fcc <iprintf>
 800f26a:	200a      	movs	r0, #10
 800f26c:	f001 fec0 	bl	8010ff0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	220d      	movs	r2, #13
 800f274:	701a      	strb	r2, [r3, #0]
      break;
 800f276:	e20d      	b.n	800f694 <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	795b      	ldrb	r3, [r3, #5]
 800f27c:	4619      	mov	r1, r3
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f001 f9cf 	bl	8010622 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	791b      	ldrb	r3, [r3, #4]
 800f288:	4619      	mov	r1, r3
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f001 f9c9 	bl	8010622 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2200      	movs	r2, #0
 800f294:	701a      	strb	r2, [r3, #0]
      break;
 800f296:	e1fd      	b.n	800f694 <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f298:	2112      	movs	r1, #18
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 faaa 	bl	800f7f4 <USBH_Get_DevDesc>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f2a4:	7bbb      	ldrb	r3, [r7, #14]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d117      	bne.n	800f2da <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8b3 3ce8 	ldrh.w	r3, [r3, #3304]	@ 0xce8
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	4893      	ldr	r0, [pc, #588]	@ (800f500 <USBH_HandleEnum+0x380>)
 800f2b4:	f001 fe8a 	bl	8010fcc <iprintf>
 800f2b8:	200a      	movs	r0, #10
 800f2ba:	f001 fe99 	bl	8010ff0 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f8b3 3ce6 	ldrh.w	r3, [r3, #3302]	@ 0xce6
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	488f      	ldr	r0, [pc, #572]	@ (800f504 <USBH_HandleEnum+0x384>)
 800f2c8:	f001 fe80 	bl	8010fcc <iprintf>
 800f2cc:	200a      	movs	r0, #10
 800f2ce:	f001 fe8f 	bl	8010ff0 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2202      	movs	r2, #2
 800f2d6:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f2d8:	e1de      	b.n	800f698 <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f2da:	7bbb      	ldrb	r3, [r7, #14]
 800f2dc:	2b03      	cmp	r3, #3
 800f2de:	f040 81db 	bne.w	800f698 <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800f2e2:	4884      	ldr	r0, [pc, #528]	@ (800f4f4 <USBH_HandleEnum+0x374>)
 800f2e4:	f001 fe72 	bl	8010fcc <iprintf>
 800f2e8:	4887      	ldr	r0, [pc, #540]	@ (800f508 <USBH_HandleEnum+0x388>)
 800f2ea:	f001 fe6f 	bl	8010fcc <iprintf>
 800f2ee:	200a      	movs	r0, #10
 800f2f0:	f001 fe7e 	bl	8010ff0 <putchar>
        phost->device.EnumCnt++;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	b2da      	uxtb	r2, r3
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800f30a:	2b03      	cmp	r3, #3
 800f30c:	d909      	bls.n	800f322 <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800f30e:	487b      	ldr	r0, [pc, #492]	@ (800f4fc <USBH_HandleEnum+0x37c>)
 800f310:	f001 fe5c 	bl	8010fcc <iprintf>
 800f314:	200a      	movs	r0, #10
 800f316:	f001 fe6b 	bl	8010ff0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	220d      	movs	r2, #13
 800f31e:	701a      	strb	r2, [r3, #0]
      break;
 800f320:	e1ba      	b.n	800f698 <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	795b      	ldrb	r3, [r3, #5]
 800f326:	4619      	mov	r1, r3
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f001 f97a 	bl	8010622 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	791b      	ldrb	r3, [r3, #4]
 800f332:	4619      	mov	r1, r3
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f001 f974 	bl	8010622 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2200      	movs	r2, #0
 800f33e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2200      	movs	r2, #0
 800f344:	701a      	strb	r2, [r3, #0]
      break;
 800f346:	e1a7      	b.n	800f698 <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f348:	2101      	movs	r1, #1
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 fb3b 	bl	800f9c6 <USBH_SetAddress>
 800f350:	4603      	mov	r3, r0
 800f352:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f354:	7bbb      	ldrb	r3, [r7, #14]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d13a      	bne.n	800f3d0 <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 800f35a:	2002      	movs	r0, #2
 800f35c:	f001 fc63 	bl	8010c26 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2201      	movs	r2, #1
 800f364:	f883 2cd4 	strb.w	r2, [r3, #3284]	@ 0xcd4

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f893 3cd4 	ldrb.w	r3, [r3, #3284]	@ 0xcd4
 800f36e:	4619      	mov	r1, r3
 800f370:	4866      	ldr	r0, [pc, #408]	@ (800f50c <USBH_HandleEnum+0x38c>)
 800f372:	f001 fe2b 	bl	8010fcc <iprintf>
 800f376:	200a      	movs	r0, #10
 800f378:	f001 fe3a 	bl	8010ff0 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2203      	movs	r2, #3
 800f380:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	7919      	ldrb	r1, [r3, #4]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f396:	9202      	str	r2, [sp, #8]
 800f398:	2200      	movs	r2, #0
 800f39a:	9201      	str	r2, [sp, #4]
 800f39c:	9300      	str	r3, [sp, #0]
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2280      	movs	r2, #128	@ 0x80
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f001 f8ec 	bl	8010580 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	7959      	ldrb	r1, [r3, #5]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f893 0cd4 	ldrb.w	r0, [r3, #3284]	@ 0xcd4
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f3b8:	687a      	ldr	r2, [r7, #4]
 800f3ba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f3bc:	9202      	str	r2, [sp, #8]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	9201      	str	r2, [sp, #4]
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f001 f8d9 	bl	8010580 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f3ce:	e165      	b.n	800f69c <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f3d0:	7bbb      	ldrb	r3, [r7, #14]
 800f3d2:	2b03      	cmp	r3, #3
 800f3d4:	f040 8162 	bne.w	800f69c <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800f3d8:	4846      	ldr	r0, [pc, #280]	@ (800f4f4 <USBH_HandleEnum+0x374>)
 800f3da:	f001 fdf7 	bl	8010fcc <iprintf>
 800f3de:	484c      	ldr	r0, [pc, #304]	@ (800f510 <USBH_HandleEnum+0x390>)
 800f3e0:	f001 fdf4 	bl	8010fcc <iprintf>
 800f3e4:	200a      	movs	r0, #10
 800f3e6:	f001 fe03 	bl	8010ff0 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800f3ea:	4844      	ldr	r0, [pc, #272]	@ (800f4fc <USBH_HandleEnum+0x37c>)
 800f3ec:	f001 fdee 	bl	8010fcc <iprintf>
 800f3f0:	200a      	movs	r0, #10
 800f3f2:	f001 fdfd 	bl	8010ff0 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	220d      	movs	r2, #13
 800f3fa:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2200      	movs	r2, #0
 800f400:	705a      	strb	r2, [r3, #1]
      break;
 800f402:	e14b      	b.n	800f69c <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f404:	2109      	movs	r1, #9
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f000 fa2e 	bl	800f868 <USBH_Get_CfgDesc>
 800f40c:	4603      	mov	r3, r0
 800f40e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f410:	7bbb      	ldrb	r3, [r7, #14]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d103      	bne.n	800f41e <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2204      	movs	r2, #4
 800f41a:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f41c:	e140      	b.n	800f6a0 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f41e:	7bbb      	ldrb	r3, [r7, #14]
 800f420:	2b03      	cmp	r3, #3
 800f422:	f040 813d 	bne.w	800f6a0 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800f426:	4833      	ldr	r0, [pc, #204]	@ (800f4f4 <USBH_HandleEnum+0x374>)
 800f428:	f001 fdd0 	bl	8010fcc <iprintf>
 800f42c:	4839      	ldr	r0, [pc, #228]	@ (800f514 <USBH_HandleEnum+0x394>)
 800f42e:	f001 fdcd 	bl	8010fcc <iprintf>
 800f432:	200a      	movs	r0, #10
 800f434:	f001 fddc 	bl	8010ff0 <putchar>
        phost->device.EnumCnt++;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800f43e:	3301      	adds	r3, #1
 800f440:	b2da      	uxtb	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800f44e:	2b03      	cmp	r3, #3
 800f450:	d909      	bls.n	800f466 <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800f452:	482a      	ldr	r0, [pc, #168]	@ (800f4fc <USBH_HandleEnum+0x37c>)
 800f454:	f001 fdba 	bl	8010fcc <iprintf>
 800f458:	200a      	movs	r0, #10
 800f45a:	f001 fdc9 	bl	8010ff0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	220d      	movs	r2, #13
 800f462:	701a      	strb	r2, [r3, #0]
      break;
 800f464:	e11c      	b.n	800f6a0 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	795b      	ldrb	r3, [r3, #5]
 800f46a:	4619      	mov	r1, r3
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f001 f8d8 	bl	8010622 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	791b      	ldrb	r3, [r3, #4]
 800f476:	4619      	mov	r1, r3
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f001 f8d2 	bl	8010622 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2200      	movs	r2, #0
 800f482:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	701a      	strb	r2, [r3, #0]
      break;
 800f48a:	e109      	b.n	800f6a0 <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8b3 3cf2 	ldrh.w	r3, [r3, #3314]	@ 0xcf2
 800f492:	4619      	mov	r1, r3
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 f9e7 	bl	800f868 <USBH_Get_CfgDesc>
 800f49a:	4603      	mov	r3, r0
 800f49c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f49e:	7bbb      	ldrb	r3, [r7, #14]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d103      	bne.n	800f4ac <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2205      	movs	r2, #5
 800f4a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f4aa:	e0fb      	b.n	800f6a4 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f4ac:	7bbb      	ldrb	r3, [r7, #14]
 800f4ae:	2b03      	cmp	r3, #3
 800f4b0:	f040 80f8 	bne.w	800f6a4 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800f4b4:	480f      	ldr	r0, [pc, #60]	@ (800f4f4 <USBH_HandleEnum+0x374>)
 800f4b6:	f001 fd89 	bl	8010fcc <iprintf>
 800f4ba:	4816      	ldr	r0, [pc, #88]	@ (800f514 <USBH_HandleEnum+0x394>)
 800f4bc:	f001 fd86 	bl	8010fcc <iprintf>
 800f4c0:	200a      	movs	r0, #10
 800f4c2:	f001 fd95 	bl	8010ff0 <putchar>
        phost->device.EnumCnt++;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	b2da      	uxtb	r2, r3
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f883 2cd6 	strb.w	r2, [r3, #3286]	@ 0xcd6
        if (phost->device.EnumCnt > 3U)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f893 3cd6 	ldrb.w	r3, [r3, #3286]	@ 0xcd6
 800f4dc:	2b03      	cmp	r3, #3
 800f4de:	d91b      	bls.n	800f518 <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800f4e0:	4806      	ldr	r0, [pc, #24]	@ (800f4fc <USBH_HandleEnum+0x37c>)
 800f4e2:	f001 fd73 	bl	8010fcc <iprintf>
 800f4e6:	200a      	movs	r0, #10
 800f4e8:	f001 fd82 	bl	8010ff0 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	220d      	movs	r2, #13
 800f4f0:	701a      	strb	r2, [r3, #0]
      break;
 800f4f2:	e0d7      	b.n	800f6a4 <USBH_HandleEnum+0x524>
 800f4f4:	080122dc 	.word	0x080122dc
 800f4f8:	08012574 	.word	0x08012574
 800f4fc:	080125a8 	.word	0x080125a8
 800f500:	080125e8 	.word	0x080125e8
 800f504:	080125f4 	.word	0x080125f4
 800f508:	08012600 	.word	0x08012600
 800f50c:	0801263c 	.word	0x0801263c
 800f510:	08012654 	.word	0x08012654
 800f514:	08012688 	.word	0x08012688
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	795b      	ldrb	r3, [r3, #5]
 800f51c:	4619      	mov	r1, r3
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f001 f87f 	bl	8010622 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	791b      	ldrb	r3, [r3, #4]
 800f528:	4619      	mov	r1, r3
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f001 f879 	bl	8010622 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2200      	movs	r2, #0
 800f534:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2200      	movs	r2, #0
 800f53a:	701a      	strb	r2, [r3, #0]
      break;
 800f53c:	e0b2      	b.n	800f6a4 <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f893 3cec 	ldrb.w	r3, [r3, #3308]	@ 0xcec
 800f544:	2b00      	cmp	r3, #0
 800f546:	d02a      	beq.n	800f59e <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f893 1cec 	ldrb.w	r1, [r3, #3308]	@ 0xcec
                                        phost->device.Data, 0xFFU);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f554:	23ff      	movs	r3, #255	@ 0xff
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f000 f9be 	bl	800f8d8 <USBH_Get_StringDesc>
 800f55c:	4603      	mov	r3, r0
 800f55e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f560:	7bbb      	ldrb	r3, [r7, #14]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d10d      	bne.n	800f582 <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f56c:	4619      	mov	r1, r3
 800f56e:	4853      	ldr	r0, [pc, #332]	@ (800f6bc <USBH_HandleEnum+0x53c>)
 800f570:	f001 fd2c 	bl	8010fcc <iprintf>
 800f574:	200a      	movs	r0, #10
 800f576:	f001 fd3b 	bl	8010ff0 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2206      	movs	r2, #6
 800f57e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f580:	e092      	b.n	800f6a8 <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f582:	7bbb      	ldrb	r3, [r7, #14]
 800f584:	2b03      	cmp	r3, #3
 800f586:	f040 808f 	bne.w	800f6a8 <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 800f58a:	484d      	ldr	r0, [pc, #308]	@ (800f6c0 <USBH_HandleEnum+0x540>)
 800f58c:	f001 fd1e 	bl	8010fcc <iprintf>
 800f590:	200a      	movs	r0, #10
 800f592:	f001 fd2d 	bl	8010ff0 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2206      	movs	r2, #6
 800f59a:	705a      	strb	r2, [r3, #1]
      break;
 800f59c:	e084      	b.n	800f6a8 <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 800f59e:	4848      	ldr	r0, [pc, #288]	@ (800f6c0 <USBH_HandleEnum+0x540>)
 800f5a0:	f001 fd14 	bl	8010fcc <iprintf>
 800f5a4:	200a      	movs	r0, #10
 800f5a6:	f001 fd23 	bl	8010ff0 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2206      	movs	r2, #6
 800f5ae:	705a      	strb	r2, [r3, #1]
      break;
 800f5b0:	e07a      	b.n	800f6a8 <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f893 3ced 	ldrb.w	r3, [r3, #3309]	@ 0xced
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d029      	beq.n	800f610 <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f893 1ced 	ldrb.w	r1, [r3, #3309]	@ 0xced
                                        phost->device.Data, 0xFFU);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f5c8:	23ff      	movs	r3, #255	@ 0xff
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 f984 	bl	800f8d8 <USBH_Get_StringDesc>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f5d4:	7bbb      	ldrb	r3, [r7, #14]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d10d      	bne.n	800f5f6 <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	4838      	ldr	r0, [pc, #224]	@ (800f6c4 <USBH_HandleEnum+0x544>)
 800f5e4:	f001 fcf2 	bl	8010fcc <iprintf>
 800f5e8:	200a      	movs	r0, #10
 800f5ea:	f001 fd01 	bl	8010ff0 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2207      	movs	r2, #7
 800f5f2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f5f4:	e05a      	b.n	800f6ac <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f5f6:	7bbb      	ldrb	r3, [r7, #14]
 800f5f8:	2b03      	cmp	r3, #3
 800f5fa:	d157      	bne.n	800f6ac <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 800f5fc:	4832      	ldr	r0, [pc, #200]	@ (800f6c8 <USBH_HandleEnum+0x548>)
 800f5fe:	f001 fce5 	bl	8010fcc <iprintf>
 800f602:	200a      	movs	r0, #10
 800f604:	f001 fcf4 	bl	8010ff0 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2207      	movs	r2, #7
 800f60c:	705a      	strb	r2, [r3, #1]
      break;
 800f60e:	e04d      	b.n	800f6ac <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 800f610:	482d      	ldr	r0, [pc, #180]	@ (800f6c8 <USBH_HandleEnum+0x548>)
 800f612:	f001 fcdb 	bl	8010fcc <iprintf>
 800f616:	200a      	movs	r0, #10
 800f618:	f001 fcea 	bl	8010ff0 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2207      	movs	r2, #7
 800f620:	705a      	strb	r2, [r3, #1]
      break;
 800f622:	e043      	b.n	800f6ac <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f893 3cee 	ldrb.w	r3, [r3, #3310]	@ 0xcee
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d027      	beq.n	800f67e <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f893 1cee 	ldrb.w	r1, [r3, #3310]	@ 0xcee
                                        phost->device.Data, 0xFFU);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f63a:	23ff      	movs	r3, #255	@ 0xff
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f000 f94b 	bl	800f8d8 <USBH_Get_StringDesc>
 800f642:	4603      	mov	r3, r0
 800f644:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f646:	7bbb      	ldrb	r3, [r7, #14]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d10c      	bne.n	800f666 <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f652:	4619      	mov	r1, r3
 800f654:	481d      	ldr	r0, [pc, #116]	@ (800f6cc <USBH_HandleEnum+0x54c>)
 800f656:	f001 fcb9 	bl	8010fcc <iprintf>
 800f65a:	200a      	movs	r0, #10
 800f65c:	f001 fcc8 	bl	8010ff0 <putchar>
          Status = USBH_OK;
 800f660:	2300      	movs	r3, #0
 800f662:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f664:	e024      	b.n	800f6b0 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f666:	7bbb      	ldrb	r3, [r7, #14]
 800f668:	2b03      	cmp	r3, #3
 800f66a:	d121      	bne.n	800f6b0 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 800f66c:	4818      	ldr	r0, [pc, #96]	@ (800f6d0 <USBH_HandleEnum+0x550>)
 800f66e:	f001 fcad 	bl	8010fcc <iprintf>
 800f672:	200a      	movs	r0, #10
 800f674:	f001 fcbc 	bl	8010ff0 <putchar>
          Status = USBH_OK;
 800f678:	2300      	movs	r3, #0
 800f67a:	73fb      	strb	r3, [r7, #15]
      break;
 800f67c:	e018      	b.n	800f6b0 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 800f67e:	4814      	ldr	r0, [pc, #80]	@ (800f6d0 <USBH_HandleEnum+0x550>)
 800f680:	f001 fca4 	bl	8010fcc <iprintf>
 800f684:	200a      	movs	r0, #10
 800f686:	f001 fcb3 	bl	8010ff0 <putchar>
        Status = USBH_OK;
 800f68a:	2300      	movs	r3, #0
 800f68c:	73fb      	strb	r3, [r7, #15]
      break;
 800f68e:	e00f      	b.n	800f6b0 <USBH_HandleEnum+0x530>

    default:
      break;
 800f690:	bf00      	nop
 800f692:	e00e      	b.n	800f6b2 <USBH_HandleEnum+0x532>
      break;
 800f694:	bf00      	nop
 800f696:	e00c      	b.n	800f6b2 <USBH_HandleEnum+0x532>
      break;
 800f698:	bf00      	nop
 800f69a:	e00a      	b.n	800f6b2 <USBH_HandleEnum+0x532>
      break;
 800f69c:	bf00      	nop
 800f69e:	e008      	b.n	800f6b2 <USBH_HandleEnum+0x532>
      break;
 800f6a0:	bf00      	nop
 800f6a2:	e006      	b.n	800f6b2 <USBH_HandleEnum+0x532>
      break;
 800f6a4:	bf00      	nop
 800f6a6:	e004      	b.n	800f6b2 <USBH_HandleEnum+0x532>
      break;
 800f6a8:	bf00      	nop
 800f6aa:	e002      	b.n	800f6b2 <USBH_HandleEnum+0x532>
      break;
 800f6ac:	bf00      	nop
 800f6ae:	e000      	b.n	800f6b2 <USBH_HandleEnum+0x532>
      break;
 800f6b0:	bf00      	nop
  }
  return Status;
 800f6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3710      	adds	r7, #16
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	080126cc 	.word	0x080126cc
 800f6c0:	080126e0 	.word	0x080126e0
 800f6c4:	080126f4 	.word	0x080126f4
 800f6c8:	08012704 	.word	0x08012704
 800f6cc:	08012714 	.word	0x08012714
 800f6d0:	08012728 	.word	0x08012728

0800f6d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	683a      	ldr	r2, [r7, #0]
 800f6e2:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
}
 800f6e6:	bf00      	nop
 800f6e8:	370c      	adds	r7, #12
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr

0800f6f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f6f2:	b580      	push	{r7, lr}
 800f6f4:	b082      	sub	sp, #8
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 800f700:	1c5a      	adds	r2, r3, #1
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
  USBH_HandleSof(phost);
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f000 f804 	bl	800f716 <USBH_HandleSof>
}
 800f70e:	bf00      	nop
 800f710:	3708      	adds	r7, #8
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}

0800f716 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f716:	b580      	push	{r7, lr}
 800f718:	b082      	sub	sp, #8
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	b2db      	uxtb	r3, r3
 800f724:	2b0b      	cmp	r3, #11
 800f726:	d10a      	bne.n	800f73e <USBH_HandleSof+0x28>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d005      	beq.n	800f73e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	@ 0xd34
 800f738:	699b      	ldr	r3, [r3, #24]
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	4798      	blx	r3
  }
}
 800f73e:	bf00      	nop
 800f740:	3708      	adds	r7, #8
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}

0800f746 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f746:	b480      	push	{r7}
 800f748:	b083      	sub	sp, #12
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2201      	movs	r2, #1
 800f752:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800f756:	bf00      	nop
}
 800f758:	370c      	adds	r7, #12
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr

0800f762 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f762:	b480      	push	{r7}
 800f764:	b083      	sub	sp, #12
 800f766:	af00      	add	r7, sp, #0
 800f768:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  return;
 800f772:	bf00      	nop
}
 800f774:	370c      	adds	r7, #12
 800f776:	46bd      	mov	sp, r7
 800f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77c:	4770      	bx	lr

0800f77e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f77e:	b480      	push	{r7}
 800f780:	b083      	sub	sp, #12
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2201      	movs	r2, #1
 800f78a:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.is_disconnected = 0U;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2200      	movs	r2, #0
 800f792:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_ReEnumerated = 0U;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2200      	movs	r2, #0
 800f79a:	f883 2cda 	strb.w	r2, [r3, #3290]	@ 0xcda
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f79e:	2300      	movs	r3, #0
}
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	370c      	adds	r7, #12
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	f883 2cd9 	strb.w	r2, [r3, #3289]	@ 0xcd9
  phost->device.is_connected = 0U;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	f883 2cd8 	strb.w	r2, [r3, #3288]	@ 0xcd8
  phost->device.PortEnabled = 0U;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f883 2cdb 	strb.w	r2, [r3, #3291]	@ 0xcdb

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f001 f8de 	bl	801098e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	791b      	ldrb	r3, [r3, #4]
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f000 ff22 	bl	8010622 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	795b      	ldrb	r3, [r3, #5]
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 ff1c 	bl	8010622 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f7ea:	2300      	movs	r3, #0
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b086      	sub	sp, #24
 800f7f8:	af02      	add	r7, sp, #8
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	460b      	mov	r3, r1
 800f7fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800f800:	887b      	ldrh	r3, [r7, #2]
 800f802:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f806:	4293      	cmp	r3, r2
 800f808:	d90a      	bls.n	800f820 <USBH_Get_DevDesc+0x2c>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 800f80a:	4815      	ldr	r0, [pc, #84]	@ (800f860 <USBH_Get_DevDesc+0x6c>)
 800f80c:	f001 fbde 	bl	8010fcc <iprintf>
 800f810:	4814      	ldr	r0, [pc, #80]	@ (800f864 <USBH_Get_DevDesc+0x70>)
 800f812:	f001 fbdb 	bl	8010fcc <iprintf>
 800f816:	200a      	movs	r0, #10
 800f818:	f001 fbea 	bl	8010ff0 <putchar>
    return USBH_NOT_SUPPORTED;
 800f81c:	2303      	movs	r3, #3
 800f81e:	e01b      	b.n	800f858 <USBH_Get_DevDesc+0x64>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800f826:	887b      	ldrh	r3, [r7, #2]
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	4613      	mov	r3, r2
 800f82c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f830:	2100      	movs	r1, #0
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 f892 	bl	800f95c <USBH_GetDescriptor>
 800f838:	4603      	mov	r3, r0
 800f83a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800f83c:	7bfb      	ldrb	r3, [r7, #15]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d109      	bne.n	800f856 <USBH_Get_DevDesc+0x62>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f848:	887a      	ldrh	r2, [r7, #2]
 800f84a:	4619      	mov	r1, r3
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f000 f949 	bl	800fae4 <USBH_ParseDevDesc>
 800f852:	4603      	mov	r3, r0
 800f854:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f856:	7bfb      	ldrb	r3, [r7, #15]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3710      	adds	r7, #16
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	0801273c 	.word	0x0801273c
 800f864:	08012744 	.word	0x08012744

0800f868 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b086      	sub	sp, #24
 800f86c:	af02      	add	r7, sp, #8
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	460b      	mov	r3, r1
 800f872:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	331c      	adds	r3, #28
 800f878:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800f87a:	887b      	ldrh	r3, [r7, #2]
 800f87c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f880:	d90a      	bls.n	800f898 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 800f882:	4813      	ldr	r0, [pc, #76]	@ (800f8d0 <USBH_Get_CfgDesc+0x68>)
 800f884:	f001 fba2 	bl	8010fcc <iprintf>
 800f888:	4812      	ldr	r0, [pc, #72]	@ (800f8d4 <USBH_Get_CfgDesc+0x6c>)
 800f88a:	f001 fb9f 	bl	8010fcc <iprintf>
 800f88e:	200a      	movs	r0, #10
 800f890:	f001 fbae 	bl	8010ff0 <putchar>
    return USBH_NOT_SUPPORTED;
 800f894:	2303      	movs	r3, #3
 800f896:	e016      	b.n	800f8c6 <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f898:	887b      	ldrh	r3, [r7, #2]
 800f89a:	9300      	str	r3, [sp, #0]
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f000 f859 	bl	800f95c <USBH_GetDescriptor>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800f8ae:	7bfb      	ldrb	r3, [r7, #15]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d107      	bne.n	800f8c4 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800f8b4:	887b      	ldrh	r3, [r7, #2]
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	68b9      	ldr	r1, [r7, #8]
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 f9c2 	bl	800fc44 <USBH_ParseCfgDesc>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	0801273c 	.word	0x0801273c
 800f8d4:	08012788 	.word	0x08012788

0800f8d8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b088      	sub	sp, #32
 800f8dc:	af02      	add	r7, sp, #8
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	607a      	str	r2, [r7, #4]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	72fb      	strb	r3, [r7, #11]
 800f8e8:	4613      	mov	r3, r2
 800f8ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800f8ec:	893b      	ldrh	r3, [r7, #8]
 800f8ee:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d802      	bhi.n	800f8fc <USBH_Get_StringDesc+0x24>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d10a      	bne.n	800f912 <USBH_Get_StringDesc+0x3a>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 800f8fc:	4815      	ldr	r0, [pc, #84]	@ (800f954 <USBH_Get_StringDesc+0x7c>)
 800f8fe:	f001 fb65 	bl	8010fcc <iprintf>
 800f902:	4815      	ldr	r0, [pc, #84]	@ (800f958 <USBH_Get_StringDesc+0x80>)
 800f904:	f001 fb62 	bl	8010fcc <iprintf>
 800f908:	200a      	movs	r0, #10
 800f90a:	f001 fb71 	bl	8010ff0 <putchar>
    return USBH_NOT_SUPPORTED;
 800f90e:	2303      	movs	r3, #3
 800f910:	e01c      	b.n	800f94c <USBH_Get_StringDesc+0x74>
  }

  status = USBH_GetDescriptor(phost,
 800f912:	7afb      	ldrb	r3, [r7, #11]
 800f914:	b29b      	uxth	r3, r3
 800f916:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800f91a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800f922:	893b      	ldrh	r3, [r7, #8]
 800f924:	9300      	str	r3, [sp, #0]
 800f926:	460b      	mov	r3, r1
 800f928:	2100      	movs	r1, #0
 800f92a:	68f8      	ldr	r0, [r7, #12]
 800f92c:	f000 f816 	bl	800f95c <USBH_GetDescriptor>
 800f930:	4603      	mov	r3, r0
 800f932:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800f934:	7dfb      	ldrb	r3, [r7, #23]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d107      	bne.n	800f94a <USBH_Get_StringDesc+0x72>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f940:	893a      	ldrh	r2, [r7, #8]
 800f942:	6879      	ldr	r1, [r7, #4]
 800f944:	4618      	mov	r0, r3
 800f946:	f000 fb92 	bl	801006e <USBH_ParseStringDesc>
  }

  return status;
 800f94a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3718      	adds	r7, #24
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	0801273c 	.word	0x0801273c
 800f958:	080127d4 	.word	0x080127d4

0800f95c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	60f8      	str	r0, [r7, #12]
 800f964:	607b      	str	r3, [r7, #4]
 800f966:	460b      	mov	r3, r1
 800f968:	72fb      	strb	r3, [r7, #11]
 800f96a:	4613      	mov	r3, r2
 800f96c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	789b      	ldrb	r3, [r3, #2]
 800f972:	2b01      	cmp	r3, #1
 800f974:	d11c      	bne.n	800f9b0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f976:	7afb      	ldrb	r3, [r7, #11]
 800f978:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f97c:	b2da      	uxtb	r2, r3
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2206      	movs	r2, #6
 800f986:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	893a      	ldrh	r2, [r7, #8]
 800f98c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f98e:	893b      	ldrh	r3, [r7, #8]
 800f990:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f994:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f998:	d104      	bne.n	800f9a4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	f240 4209 	movw	r2, #1033	@ 0x409
 800f9a0:	829a      	strh	r2, [r3, #20]
 800f9a2:	e002      	b.n	800f9aa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	8b3a      	ldrh	r2, [r7, #24]
 800f9ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f9b0:	8b3b      	ldrh	r3, [r7, #24]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	6879      	ldr	r1, [r7, #4]
 800f9b6:	68f8      	ldr	r0, [r7, #12]
 800f9b8:	f000 fba6 	bl	8010108 <USBH_CtlReq>
 800f9bc:	4603      	mov	r3, r0
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	b082      	sub	sp, #8
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	6078      	str	r0, [r7, #4]
 800f9ce:	460b      	mov	r3, r1
 800f9d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	789b      	ldrb	r3, [r3, #2]
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d10f      	bne.n	800f9fa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2205      	movs	r2, #5
 800f9e4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f9e6:	78fb      	ldrb	r3, [r7, #3]
 800f9e8:	b29a      	uxth	r2, r3
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	2100      	movs	r1, #0
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 fb82 	bl	8010108 <USBH_CtlReq>
 800fa04:	4603      	mov	r3, r0
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3708      	adds	r7, #8
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}

0800fa0e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800fa0e:	b580      	push	{r7, lr}
 800fa10:	b082      	sub	sp, #8
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	6078      	str	r0, [r7, #4]
 800fa16:	460b      	mov	r3, r1
 800fa18:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	789b      	ldrb	r3, [r3, #2]
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d10e      	bne.n	800fa40 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2200      	movs	r2, #0
 800fa26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2209      	movs	r2, #9
 800fa2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	887a      	ldrh	r2, [r7, #2]
 800fa32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2200      	movs	r2, #0
 800fa38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fa40:	2200      	movs	r2, #0
 800fa42:	2100      	movs	r1, #0
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 fb5f 	bl	8010108 <USBH_CtlReq>
 800fa4a:	4603      	mov	r3, r0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3708      	adds	r7, #8
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	789b      	ldrb	r3, [r3, #2]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d10f      	bne.n	800fa88 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2203      	movs	r2, #3
 800fa72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800fa74:	78fb      	ldrb	r3, [r7, #3]
 800fa76:	b29a      	uxth	r2, r3
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2200      	movs	r2, #0
 800fa86:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fa88:	2200      	movs	r2, #0
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f000 fb3b 	bl	8010108 <USBH_CtlReq>
 800fa92:	4603      	mov	r3, r0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3708      	adds	r7, #8
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	460b      	mov	r3, r1
 800faa6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	789b      	ldrb	r3, [r3, #2]
 800faac:	2b01      	cmp	r3, #1
 800faae:	d10f      	bne.n	800fad0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2202      	movs	r2, #2
 800fab4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2201      	movs	r2, #1
 800faba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2200      	movs	r2, #0
 800fac0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800fac2:	78fb      	ldrb	r3, [r7, #3]
 800fac4:	b29a      	uxth	r2, r3
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2200      	movs	r2, #0
 800face:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fad0:	2200      	movs	r2, #0
 800fad2:	2100      	movs	r1, #0
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 fb17 	bl	8010108 <USBH_CtlReq>
 800fada:	4603      	mov	r3, r0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b087      	sub	sp, #28
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	4613      	mov	r3, r2
 800faf0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f603 43de 	addw	r3, r3, #3294	@ 0xcde
 800faf8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800fafa:	2300      	movs	r3, #0
 800fafc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d101      	bne.n	800fb08 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800fb04:	2302      	movs	r3, #2
 800fb06:	e094      	b.n	800fc32 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	781a      	ldrb	r2, [r3, #0]
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	785a      	ldrb	r2, [r3, #1]
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	3302      	adds	r3, #2
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	461a      	mov	r2, r3
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	3303      	adds	r3, #3
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	021b      	lsls	r3, r3, #8
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	b29a      	uxth	r2, r3
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	791a      	ldrb	r2, [r3, #4]
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	795a      	ldrb	r2, [r3, #5]
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	799a      	ldrb	r2, [r3, #6]
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	79da      	ldrb	r2, [r3, #7]
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d004      	beq.n	800fb66 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d11b      	bne.n	800fb9e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	79db      	ldrb	r3, [r3, #7]
 800fb6a:	2b20      	cmp	r3, #32
 800fb6c:	dc0f      	bgt.n	800fb8e <USBH_ParseDevDesc+0xaa>
 800fb6e:	2b08      	cmp	r3, #8
 800fb70:	db0f      	blt.n	800fb92 <USBH_ParseDevDesc+0xae>
 800fb72:	3b08      	subs	r3, #8
 800fb74:	4a32      	ldr	r2, [pc, #200]	@ (800fc40 <USBH_ParseDevDesc+0x15c>)
 800fb76:	fa22 f303 	lsr.w	r3, r2, r3
 800fb7a:	f003 0301 	and.w	r3, r3, #1
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	bf14      	ite	ne
 800fb82:	2301      	movne	r3, #1
 800fb84:	2300      	moveq	r3, #0
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d106      	bne.n	800fb9a <USBH_ParseDevDesc+0xb6>
 800fb8c:	e001      	b.n	800fb92 <USBH_ParseDevDesc+0xae>
 800fb8e:	2b40      	cmp	r3, #64	@ 0x40
 800fb90:	d003      	beq.n	800fb9a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	2208      	movs	r2, #8
 800fb96:	71da      	strb	r2, [r3, #7]
        break;
 800fb98:	e000      	b.n	800fb9c <USBH_ParseDevDesc+0xb8>
        break;
 800fb9a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800fb9c:	e00e      	b.n	800fbbc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800fba4:	2b02      	cmp	r3, #2
 800fba6:	d107      	bne.n	800fbb8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	79db      	ldrb	r3, [r3, #7]
 800fbac:	2b08      	cmp	r3, #8
 800fbae:	d005      	beq.n	800fbbc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	2208      	movs	r2, #8
 800fbb4:	71da      	strb	r2, [r3, #7]
 800fbb6:	e001      	b.n	800fbbc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800fbb8:	2303      	movs	r3, #3
 800fbba:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800fbbc:	88fb      	ldrh	r3, [r7, #6]
 800fbbe:	2b08      	cmp	r3, #8
 800fbc0:	d936      	bls.n	800fc30 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	3308      	adds	r3, #8
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	461a      	mov	r2, r3
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	3309      	adds	r3, #9
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	021b      	lsls	r3, r3, #8
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	b29a      	uxth	r2, r3
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	330a      	adds	r3, #10
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	330b      	adds	r3, #11
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	021b      	lsls	r3, r3, #8
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	b29a      	uxth	r2, r3
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	330c      	adds	r3, #12
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	330d      	adds	r3, #13
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	021b      	lsls	r3, r3, #8
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	b29a      	uxth	r2, r3
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	7b9a      	ldrb	r2, [r3, #14]
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	7bda      	ldrb	r2, [r3, #15]
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	7c1a      	ldrb	r2, [r3, #16]
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	7c5a      	ldrb	r2, [r3, #17]
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800fc30:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	371c      	adds	r7, #28
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	01000101 	.word	0x01000101

0800fc44 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b08c      	sub	sp, #48	@ 0x30
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	60f8      	str	r0, [r7, #12]
 800fc4c:	60b9      	str	r1, [r7, #8]
 800fc4e:	4613      	mov	r3, r2
 800fc50:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800fc58:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800fc60:	2300      	movs	r3, #0
 800fc62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800fc66:	2300      	movs	r3, #0
 800fc68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d101      	bne.n	800fc76 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800fc72:	2302      	movs	r3, #2
 800fc74:	e0da      	b.n	800fe2c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800fc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	2b09      	cmp	r3, #9
 800fc80:	d002      	beq.n	800fc88 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800fc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc84:	2209      	movs	r2, #9
 800fc86:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	781a      	ldrb	r2, [r3, #0]
 800fc8c:	6a3b      	ldr	r3, [r7, #32]
 800fc8e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	785a      	ldrb	r2, [r3, #1]
 800fc94:	6a3b      	ldr	r3, [r7, #32]
 800fc96:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	3302      	adds	r3, #2
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	461a      	mov	r2, r3
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	3303      	adds	r3, #3
 800fca4:	781b      	ldrb	r3, [r3, #0]
 800fca6:	021b      	lsls	r3, r3, #8
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	b29b      	uxth	r3, r3
 800fcae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fcb2:	bf28      	it	cs
 800fcb4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800fcb8:	b29a      	uxth	r2, r3
 800fcba:	6a3b      	ldr	r3, [r7, #32]
 800fcbc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	791a      	ldrb	r2, [r3, #4]
 800fcc2:	6a3b      	ldr	r3, [r7, #32]
 800fcc4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	795a      	ldrb	r2, [r3, #5]
 800fcca:	6a3b      	ldr	r3, [r7, #32]
 800fccc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	799a      	ldrb	r2, [r3, #6]
 800fcd2:	6a3b      	ldr	r3, [r7, #32]
 800fcd4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	79da      	ldrb	r2, [r3, #7]
 800fcda:	6a3b      	ldr	r3, [r7, #32]
 800fcdc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	7a1a      	ldrb	r2, [r3, #8]
 800fce2:	6a3b      	ldr	r3, [r7, #32]
 800fce4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fce6:	88fb      	ldrh	r3, [r7, #6]
 800fce8:	2b09      	cmp	r3, #9
 800fcea:	f240 809d 	bls.w	800fe28 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800fcee:	2309      	movs	r3, #9
 800fcf0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fcf6:	e081      	b.n	800fdfc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fcf8:	f107 0316 	add.w	r3, r7, #22
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd00:	f000 f9e8 	bl	80100d4 <USBH_GetNextDesc>
 800fd04:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800fd06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd08:	785b      	ldrb	r3, [r3, #1]
 800fd0a:	2b04      	cmp	r3, #4
 800fd0c:	d176      	bne.n	800fdfc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800fd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	2b09      	cmp	r3, #9
 800fd14:	d002      	beq.n	800fd1c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800fd16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd18:	2209      	movs	r2, #9
 800fd1a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800fd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd20:	221a      	movs	r2, #26
 800fd22:	fb02 f303 	mul.w	r3, r2, r3
 800fd26:	3308      	adds	r3, #8
 800fd28:	6a3a      	ldr	r2, [r7, #32]
 800fd2a:	4413      	add	r3, r2
 800fd2c:	3302      	adds	r3, #2
 800fd2e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800fd30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fd32:	69f8      	ldr	r0, [r7, #28]
 800fd34:	f000 f87e 	bl	800fe34 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fd42:	e043      	b.n	800fdcc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fd44:	f107 0316 	add.w	r3, r7, #22
 800fd48:	4619      	mov	r1, r3
 800fd4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd4c:	f000 f9c2 	bl	80100d4 <USBH_GetNextDesc>
 800fd50:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd54:	785b      	ldrb	r3, [r3, #1]
 800fd56:	2b05      	cmp	r3, #5
 800fd58:	d138      	bne.n	800fdcc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	795b      	ldrb	r3, [r3, #5]
 800fd5e:	2b01      	cmp	r3, #1
 800fd60:	d113      	bne.n	800fd8a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800fd62:	69fb      	ldr	r3, [r7, #28]
 800fd64:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800fd66:	2b02      	cmp	r3, #2
 800fd68:	d003      	beq.n	800fd72 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800fd6a:	69fb      	ldr	r3, [r7, #28]
 800fd6c:	799b      	ldrb	r3, [r3, #6]
 800fd6e:	2b03      	cmp	r3, #3
 800fd70:	d10b      	bne.n	800fd8a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	79db      	ldrb	r3, [r3, #7]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d10b      	bne.n	800fd92 <USBH_ParseCfgDesc+0x14e>
 800fd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	2b09      	cmp	r3, #9
 800fd80:	d007      	beq.n	800fd92 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800fd82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd84:	2209      	movs	r2, #9
 800fd86:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800fd88:	e003      	b.n	800fd92 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800fd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd8c:	2207      	movs	r2, #7
 800fd8e:	701a      	strb	r2, [r3, #0]
 800fd90:	e000      	b.n	800fd94 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800fd92:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800fd94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd98:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800fd9c:	3201      	adds	r2, #1
 800fd9e:	00d2      	lsls	r2, r2, #3
 800fda0:	211a      	movs	r1, #26
 800fda2:	fb01 f303 	mul.w	r3, r1, r3
 800fda6:	4413      	add	r3, r2
 800fda8:	3308      	adds	r3, #8
 800fdaa:	6a3a      	ldr	r2, [r7, #32]
 800fdac:	4413      	add	r3, r2
 800fdae:	3304      	adds	r3, #4
 800fdb0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800fdb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fdb4:	69b9      	ldr	r1, [r7, #24]
 800fdb6:	68f8      	ldr	r0, [r7, #12]
 800fdb8:	f000 f870 	bl	800fe9c <USBH_ParseEPDesc>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800fdc2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	791b      	ldrb	r3, [r3, #4]
 800fdd0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d204      	bcs.n	800fde2 <USBH_ParseCfgDesc+0x19e>
 800fdd8:	6a3b      	ldr	r3, [r7, #32]
 800fdda:	885a      	ldrh	r2, [r3, #2]
 800fddc:	8afb      	ldrh	r3, [r7, #22]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d8b0      	bhi.n	800fd44 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800fde2:	69fb      	ldr	r3, [r7, #28]
 800fde4:	791b      	ldrb	r3, [r3, #4]
 800fde6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d201      	bcs.n	800fdf2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800fdee:	2303      	movs	r3, #3
 800fdf0:	e01c      	b.n	800fe2c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800fdf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fdfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d805      	bhi.n	800fe10 <USBH_ParseCfgDesc+0x1cc>
 800fe04:	6a3b      	ldr	r3, [r7, #32]
 800fe06:	885a      	ldrh	r2, [r3, #2]
 800fe08:	8afb      	ldrh	r3, [r7, #22]
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	f63f af74 	bhi.w	800fcf8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800fe10:	6a3b      	ldr	r3, [r7, #32]
 800fe12:	791b      	ldrb	r3, [r3, #4]
 800fe14:	2b02      	cmp	r3, #2
 800fe16:	bf28      	it	cs
 800fe18:	2302      	movcs	r3, #2
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d201      	bcs.n	800fe28 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800fe24:	2303      	movs	r3, #3
 800fe26:	e001      	b.n	800fe2c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800fe28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3730      	adds	r7, #48	@ 0x30
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b083      	sub	sp, #12
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	781a      	ldrb	r2, [r3, #0]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	785a      	ldrb	r2, [r3, #1]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	789a      	ldrb	r2, [r3, #2]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	78da      	ldrb	r2, [r3, #3]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	3304      	adds	r3, #4
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	2b02      	cmp	r3, #2
 800fe66:	bf28      	it	cs
 800fe68:	2302      	movcs	r3, #2
 800fe6a:	b2da      	uxtb	r2, r3
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	795a      	ldrb	r2, [r3, #5]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	799a      	ldrb	r2, [r3, #6]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	79da      	ldrb	r2, [r3, #7]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	7a1a      	ldrb	r2, [r3, #8]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	721a      	strb	r2, [r3, #8]
}
 800fe90:	bf00      	nop
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b087      	sub	sp, #28
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800fea8:	2300      	movs	r3, #0
 800feaa:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	781a      	ldrb	r2, [r3, #0]
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	785a      	ldrb	r2, [r3, #1]
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	789a      	ldrb	r2, [r3, #2]
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	78da      	ldrb	r2, [r3, #3]
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	3304      	adds	r3, #4
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	461a      	mov	r2, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	3305      	adds	r3, #5
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	021b      	lsls	r3, r3, #8
 800fedc:	b29b      	uxth	r3, r3
 800fede:	4313      	orrs	r3, r2
 800fee0:	b29a      	uxth	r2, r3
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	799a      	ldrb	r2, [r3, #6]
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	889b      	ldrh	r3, [r3, #4]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d00a      	beq.n	800ff0c <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800fefa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fefe:	d805      	bhi.n	800ff0c <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ff04:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	d901      	bls.n	800ff10 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800ff0c:	2303      	movs	r3, #3
 800ff0e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d136      	bne.n	800ff88 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	78db      	ldrb	r3, [r3, #3]
 800ff1e:	f003 0303 	and.w	r3, r3, #3
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	d108      	bne.n	800ff38 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	889b      	ldrh	r3, [r3, #4]
 800ff2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff2e:	f240 8097 	bls.w	8010060 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800ff32:	2303      	movs	r3, #3
 800ff34:	75fb      	strb	r3, [r7, #23]
 800ff36:	e093      	b.n	8010060 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	78db      	ldrb	r3, [r3, #3]
 800ff3c:	f003 0303 	and.w	r3, r3, #3
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d107      	bne.n	800ff54 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	889b      	ldrh	r3, [r3, #4]
 800ff48:	2b40      	cmp	r3, #64	@ 0x40
 800ff4a:	f240 8089 	bls.w	8010060 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800ff4e:	2303      	movs	r3, #3
 800ff50:	75fb      	strb	r3, [r7, #23]
 800ff52:	e085      	b.n	8010060 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	78db      	ldrb	r3, [r3, #3]
 800ff58:	f003 0303 	and.w	r3, r3, #3
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d005      	beq.n	800ff6c <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	78db      	ldrb	r3, [r3, #3]
 800ff64:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ff68:	2b03      	cmp	r3, #3
 800ff6a:	d10a      	bne.n	800ff82 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	799b      	ldrb	r3, [r3, #6]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d003      	beq.n	800ff7c <USBH_ParseEPDesc+0xe0>
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	799b      	ldrb	r3, [r3, #6]
 800ff78:	2b10      	cmp	r3, #16
 800ff7a:	d970      	bls.n	801005e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ff7c:	2303      	movs	r3, #3
 800ff7e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ff80:	e06d      	b.n	801005e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ff82:	2303      	movs	r3, #3
 800ff84:	75fb      	strb	r3, [r7, #23]
 800ff86:	e06b      	b.n	8010060 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d13c      	bne.n	801000c <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	78db      	ldrb	r3, [r3, #3]
 800ff96:	f003 0303 	and.w	r3, r3, #3
 800ff9a:	2b02      	cmp	r3, #2
 800ff9c:	d005      	beq.n	800ffaa <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	78db      	ldrb	r3, [r3, #3]
 800ffa2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d106      	bne.n	800ffb8 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	889b      	ldrh	r3, [r3, #4]
 800ffae:	2b40      	cmp	r3, #64	@ 0x40
 800ffb0:	d956      	bls.n	8010060 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800ffb2:	2303      	movs	r3, #3
 800ffb4:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ffb6:	e053      	b.n	8010060 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	78db      	ldrb	r3, [r3, #3]
 800ffbc:	f003 0303 	and.w	r3, r3, #3
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d10e      	bne.n	800ffe2 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	799b      	ldrb	r3, [r3, #6]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d007      	beq.n	800ffdc <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ffd0:	2b10      	cmp	r3, #16
 800ffd2:	d803      	bhi.n	800ffdc <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ffd8:	2b40      	cmp	r3, #64	@ 0x40
 800ffda:	d941      	bls.n	8010060 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800ffdc:	2303      	movs	r3, #3
 800ffde:	75fb      	strb	r3, [r7, #23]
 800ffe0:	e03e      	b.n	8010060 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	78db      	ldrb	r3, [r3, #3]
 800ffe6:	f003 0303 	and.w	r3, r3, #3
 800ffea:	2b03      	cmp	r3, #3
 800ffec:	d10b      	bne.n	8010006 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	799b      	ldrb	r3, [r3, #6]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d004      	beq.n	8010000 <USBH_ParseEPDesc+0x164>
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	889b      	ldrh	r3, [r3, #4]
 800fffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fffe:	d32f      	bcc.n	8010060 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8010000:	2303      	movs	r3, #3
 8010002:	75fb      	strb	r3, [r7, #23]
 8010004:	e02c      	b.n	8010060 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010006:	2303      	movs	r3, #3
 8010008:	75fb      	strb	r3, [r7, #23]
 801000a:	e029      	b.n	8010060 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 8010012:	2b02      	cmp	r3, #2
 8010014:	d120      	bne.n	8010058 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	78db      	ldrb	r3, [r3, #3]
 801001a:	f003 0303 	and.w	r3, r3, #3
 801001e:	2b00      	cmp	r3, #0
 8010020:	d106      	bne.n	8010030 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	889b      	ldrh	r3, [r3, #4]
 8010026:	2b08      	cmp	r3, #8
 8010028:	d01a      	beq.n	8010060 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 801002a:	2303      	movs	r3, #3
 801002c:	75fb      	strb	r3, [r7, #23]
 801002e:	e017      	b.n	8010060 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	78db      	ldrb	r3, [r3, #3]
 8010034:	f003 0303 	and.w	r3, r3, #3
 8010038:	2b03      	cmp	r3, #3
 801003a:	d10a      	bne.n	8010052 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	799b      	ldrb	r3, [r3, #6]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d003      	beq.n	801004c <USBH_ParseEPDesc+0x1b0>
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	889b      	ldrh	r3, [r3, #4]
 8010048:	2b08      	cmp	r3, #8
 801004a:	d909      	bls.n	8010060 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 801004c:	2303      	movs	r3, #3
 801004e:	75fb      	strb	r3, [r7, #23]
 8010050:	e006      	b.n	8010060 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010052:	2303      	movs	r3, #3
 8010054:	75fb      	strb	r3, [r7, #23]
 8010056:	e003      	b.n	8010060 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010058:	2303      	movs	r3, #3
 801005a:	75fb      	strb	r3, [r7, #23]
 801005c:	e000      	b.n	8010060 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801005e:	bf00      	nop
  }

  return status;
 8010060:	7dfb      	ldrb	r3, [r7, #23]
}
 8010062:	4618      	mov	r0, r3
 8010064:	371c      	adds	r7, #28
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr

0801006e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801006e:	b480      	push	{r7}
 8010070:	b087      	sub	sp, #28
 8010072:	af00      	add	r7, sp, #0
 8010074:	60f8      	str	r0, [r7, #12]
 8010076:	60b9      	str	r1, [r7, #8]
 8010078:	4613      	mov	r3, r2
 801007a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	3301      	adds	r3, #1
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	2b03      	cmp	r3, #3
 8010084:	d120      	bne.n	80100c8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	1e9a      	subs	r2, r3, #2
 801008c:	88fb      	ldrh	r3, [r7, #6]
 801008e:	4293      	cmp	r3, r2
 8010090:	bf28      	it	cs
 8010092:	4613      	movcs	r3, r2
 8010094:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	3302      	adds	r3, #2
 801009a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801009c:	2300      	movs	r3, #0
 801009e:	82fb      	strh	r3, [r7, #22]
 80100a0:	e00b      	b.n	80100ba <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80100a2:	8afb      	ldrh	r3, [r7, #22]
 80100a4:	68fa      	ldr	r2, [r7, #12]
 80100a6:	4413      	add	r3, r2
 80100a8:	781a      	ldrb	r2, [r3, #0]
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	701a      	strb	r2, [r3, #0]
      pdest++;
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	3301      	adds	r3, #1
 80100b2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80100b4:	8afb      	ldrh	r3, [r7, #22]
 80100b6:	3302      	adds	r3, #2
 80100b8:	82fb      	strh	r3, [r7, #22]
 80100ba:	8afa      	ldrh	r2, [r7, #22]
 80100bc:	8abb      	ldrh	r3, [r7, #20]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d3ef      	bcc.n	80100a2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	2200      	movs	r2, #0
 80100c6:	701a      	strb	r2, [r3, #0]
  }
}
 80100c8:	bf00      	nop
 80100ca:	371c      	adds	r7, #28
 80100cc:	46bd      	mov	sp, r7
 80100ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d2:	4770      	bx	lr

080100d4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b085      	sub	sp, #20
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	881b      	ldrh	r3, [r3, #0]
 80100e2:	687a      	ldr	r2, [r7, #4]
 80100e4:	7812      	ldrb	r2, [r2, #0]
 80100e6:	4413      	add	r3, r2
 80100e8:	b29a      	uxth	r2, r3
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	4413      	add	r3, r2
 80100f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80100fa:	68fb      	ldr	r3, [r7, #12]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3714      	adds	r7, #20
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b086      	sub	sp, #24
 801010c:	af00      	add	r7, sp, #0
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	4613      	mov	r3, r2
 8010114:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010116:	2301      	movs	r3, #1
 8010118:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	789b      	ldrb	r3, [r3, #2]
 801011e:	2b01      	cmp	r3, #1
 8010120:	d002      	beq.n	8010128 <USBH_CtlReq+0x20>
 8010122:	2b02      	cmp	r3, #2
 8010124:	d00f      	beq.n	8010146 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8010126:	e027      	b.n	8010178 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	68ba      	ldr	r2, [r7, #8]
 801012c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	88fa      	ldrh	r2, [r7, #6]
 8010132:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2201      	movs	r2, #1
 8010138:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2202      	movs	r2, #2
 801013e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010140:	2301      	movs	r3, #1
 8010142:	75fb      	strb	r3, [r7, #23]
      break;
 8010144:	e018      	b.n	8010178 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8010146:	68f8      	ldr	r0, [r7, #12]
 8010148:	f000 f81c 	bl	8010184 <USBH_HandleControl>
 801014c:	4603      	mov	r3, r0
 801014e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010150:	7dfb      	ldrb	r3, [r7, #23]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d002      	beq.n	801015c <USBH_CtlReq+0x54>
 8010156:	7dfb      	ldrb	r3, [r7, #23]
 8010158:	2b03      	cmp	r3, #3
 801015a:	d106      	bne.n	801016a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	2201      	movs	r2, #1
 8010160:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2200      	movs	r2, #0
 8010166:	761a      	strb	r2, [r3, #24]
      break;
 8010168:	e005      	b.n	8010176 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 801016a:	7dfb      	ldrb	r3, [r7, #23]
 801016c:	2b02      	cmp	r3, #2
 801016e:	d102      	bne.n	8010176 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	2201      	movs	r2, #1
 8010174:	709a      	strb	r2, [r3, #2]
      break;
 8010176:	bf00      	nop
  }
  return status;
 8010178:	7dfb      	ldrb	r3, [r7, #23]
}
 801017a:	4618      	mov	r0, r3
 801017c:	3718      	adds	r7, #24
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
	...

08010184 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b086      	sub	sp, #24
 8010188:	af02      	add	r7, sp, #8
 801018a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 801018c:	2301      	movs	r3, #1
 801018e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010190:	2300      	movs	r3, #0
 8010192:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	7e1b      	ldrb	r3, [r3, #24]
 8010198:	3b01      	subs	r3, #1
 801019a:	2b0a      	cmp	r3, #10
 801019c:	f200 815f 	bhi.w	801045e <USBH_HandleControl+0x2da>
 80101a0:	a201      	add	r2, pc, #4	@ (adr r2, 80101a8 <USBH_HandleControl+0x24>)
 80101a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101a6:	bf00      	nop
 80101a8:	080101d5 	.word	0x080101d5
 80101ac:	080101ef 	.word	0x080101ef
 80101b0:	08010259 	.word	0x08010259
 80101b4:	0801027f 	.word	0x0801027f
 80101b8:	080102b7 	.word	0x080102b7
 80101bc:	080102e1 	.word	0x080102e1
 80101c0:	08010333 	.word	0x08010333
 80101c4:	08010355 	.word	0x08010355
 80101c8:	08010391 	.word	0x08010391
 80101cc:	080103b7 	.word	0x080103b7
 80101d0:	080103f5 	.word	0x080103f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f103 0110 	add.w	r1, r3, #16
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	795b      	ldrb	r3, [r3, #5]
 80101de:	461a      	mov	r2, r3
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f000 f951 	bl	8010488 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2202      	movs	r2, #2
 80101ea:	761a      	strb	r2, [r3, #24]
      break;
 80101ec:	e142      	b.n	8010474 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	795b      	ldrb	r3, [r3, #5]
 80101f2:	4619      	mov	r1, r3
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f000 fcb9 	bl	8010b6c <USBH_LL_GetURBState>
 80101fa:	4603      	mov	r3, r0
 80101fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80101fe:	7bbb      	ldrb	r3, [r7, #14]
 8010200:	2b01      	cmp	r3, #1
 8010202:	d11e      	bne.n	8010242 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	7c1b      	ldrb	r3, [r3, #16]
 8010208:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801020c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	8adb      	ldrh	r3, [r3, #22]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d00a      	beq.n	801022c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010216:	7b7b      	ldrb	r3, [r7, #13]
 8010218:	2b80      	cmp	r3, #128	@ 0x80
 801021a:	d103      	bne.n	8010224 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2203      	movs	r2, #3
 8010220:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010222:	e11e      	b.n	8010462 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2205      	movs	r2, #5
 8010228:	761a      	strb	r2, [r3, #24]
      break;
 801022a:	e11a      	b.n	8010462 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 801022c:	7b7b      	ldrb	r3, [r7, #13]
 801022e:	2b80      	cmp	r3, #128	@ 0x80
 8010230:	d103      	bne.n	801023a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2209      	movs	r2, #9
 8010236:	761a      	strb	r2, [r3, #24]
      break;
 8010238:	e113      	b.n	8010462 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2207      	movs	r2, #7
 801023e:	761a      	strb	r2, [r3, #24]
      break;
 8010240:	e10f      	b.n	8010462 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010242:	7bbb      	ldrb	r3, [r7, #14]
 8010244:	2b04      	cmp	r3, #4
 8010246:	d003      	beq.n	8010250 <USBH_HandleControl+0xcc>
 8010248:	7bbb      	ldrb	r3, [r7, #14]
 801024a:	2b02      	cmp	r3, #2
 801024c:	f040 8109 	bne.w	8010462 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	220b      	movs	r2, #11
 8010254:	761a      	strb	r2, [r3, #24]
      break;
 8010256:	e104      	b.n	8010462 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 801025e:	b29a      	uxth	r2, r3
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6899      	ldr	r1, [r3, #8]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	899a      	ldrh	r2, [r3, #12]
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	791b      	ldrb	r3, [r3, #4]
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f000 f948 	bl	8010506 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2204      	movs	r2, #4
 801027a:	761a      	strb	r2, [r3, #24]
      break;
 801027c:	e0fa      	b.n	8010474 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	791b      	ldrb	r3, [r3, #4]
 8010282:	4619      	mov	r1, r3
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 fc71 	bl	8010b6c <USBH_LL_GetURBState>
 801028a:	4603      	mov	r3, r0
 801028c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801028e:	7bbb      	ldrb	r3, [r7, #14]
 8010290:	2b01      	cmp	r3, #1
 8010292:	d102      	bne.n	801029a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2209      	movs	r2, #9
 8010298:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801029a:	7bbb      	ldrb	r3, [r7, #14]
 801029c:	2b05      	cmp	r3, #5
 801029e:	d102      	bne.n	80102a6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80102a0:	2303      	movs	r3, #3
 80102a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80102a4:	e0df      	b.n	8010466 <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 80102a6:	7bbb      	ldrb	r3, [r7, #14]
 80102a8:	2b04      	cmp	r3, #4
 80102aa:	f040 80dc 	bne.w	8010466 <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	220b      	movs	r2, #11
 80102b2:	761a      	strb	r2, [r3, #24]
      break;
 80102b4:	e0d7      	b.n	8010466 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6899      	ldr	r1, [r3, #8]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	899a      	ldrh	r2, [r3, #12]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	795b      	ldrb	r3, [r3, #5]
 80102c2:	2001      	movs	r0, #1
 80102c4:	9000      	str	r0, [sp, #0]
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f000 f8f8 	bl	80104bc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 80102d2:	b29a      	uxth	r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2206      	movs	r2, #6
 80102dc:	761a      	strb	r2, [r3, #24]
      break;
 80102de:	e0c9      	b.n	8010474 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	795b      	ldrb	r3, [r3, #5]
 80102e4:	4619      	mov	r1, r3
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f000 fc40 	bl	8010b6c <USBH_LL_GetURBState>
 80102ec:	4603      	mov	r3, r0
 80102ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80102f0:	7bbb      	ldrb	r3, [r7, #14]
 80102f2:	2b01      	cmp	r3, #1
 80102f4:	d103      	bne.n	80102fe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2207      	movs	r2, #7
 80102fa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80102fc:	e0b5      	b.n	801046a <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 80102fe:	7bbb      	ldrb	r3, [r7, #14]
 8010300:	2b05      	cmp	r3, #5
 8010302:	d105      	bne.n	8010310 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	220c      	movs	r2, #12
 8010308:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801030a:	2303      	movs	r3, #3
 801030c:	73fb      	strb	r3, [r7, #15]
      break;
 801030e:	e0ac      	b.n	801046a <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010310:	7bbb      	ldrb	r3, [r7, #14]
 8010312:	2b02      	cmp	r3, #2
 8010314:	d103      	bne.n	801031e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2205      	movs	r2, #5
 801031a:	761a      	strb	r2, [r3, #24]
      break;
 801031c:	e0a5      	b.n	801046a <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 801031e:	7bbb      	ldrb	r3, [r7, #14]
 8010320:	2b04      	cmp	r3, #4
 8010322:	f040 80a2 	bne.w	801046a <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	220b      	movs	r2, #11
 801032a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 801032c:	2302      	movs	r3, #2
 801032e:	73fb      	strb	r3, [r7, #15]
      break;
 8010330:	e09b      	b.n	801046a <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	791b      	ldrb	r3, [r3, #4]
 8010336:	2200      	movs	r2, #0
 8010338:	2100      	movs	r1, #0
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f000 f8e3 	bl	8010506 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 8010346:	b29a      	uxth	r2, r3
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2208      	movs	r2, #8
 8010350:	761a      	strb	r2, [r3, #24]

      break;
 8010352:	e08f      	b.n	8010474 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	791b      	ldrb	r3, [r3, #4]
 8010358:	4619      	mov	r1, r3
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f000 fc06 	bl	8010b6c <USBH_LL_GetURBState>
 8010360:	4603      	mov	r3, r0
 8010362:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010364:	7bbb      	ldrb	r3, [r7, #14]
 8010366:	2b01      	cmp	r3, #1
 8010368:	d105      	bne.n	8010376 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	220d      	movs	r2, #13
 801036e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010370:	2300      	movs	r3, #0
 8010372:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010374:	e07b      	b.n	801046e <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 8010376:	7bbb      	ldrb	r3, [r7, #14]
 8010378:	2b04      	cmp	r3, #4
 801037a:	d103      	bne.n	8010384 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	220b      	movs	r2, #11
 8010380:	761a      	strb	r2, [r3, #24]
      break;
 8010382:	e074      	b.n	801046e <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 8010384:	7bbb      	ldrb	r3, [r7, #14]
 8010386:	2b05      	cmp	r3, #5
 8010388:	d171      	bne.n	801046e <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 801038a:	2303      	movs	r3, #3
 801038c:	73fb      	strb	r3, [r7, #15]
      break;
 801038e:	e06e      	b.n	801046e <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	795b      	ldrb	r3, [r3, #5]
 8010394:	2201      	movs	r2, #1
 8010396:	9200      	str	r2, [sp, #0]
 8010398:	2200      	movs	r2, #0
 801039a:	2100      	movs	r1, #0
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f000 f88d 	bl	80104bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f8d3 3d7c 	ldr.w	r3, [r3, #3452]	@ 0xd7c
 80103a8:	b29a      	uxth	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	220a      	movs	r2, #10
 80103b2:	761a      	strb	r2, [r3, #24]
      break;
 80103b4:	e05e      	b.n	8010474 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	795b      	ldrb	r3, [r3, #5]
 80103ba:	4619      	mov	r1, r3
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f000 fbd5 	bl	8010b6c <USBH_LL_GetURBState>
 80103c2:	4603      	mov	r3, r0
 80103c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80103c6:	7bbb      	ldrb	r3, [r7, #14]
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d105      	bne.n	80103d8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80103cc:	2300      	movs	r3, #0
 80103ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	220d      	movs	r2, #13
 80103d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80103d6:	e04c      	b.n	8010472 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 80103d8:	7bbb      	ldrb	r3, [r7, #14]
 80103da:	2b02      	cmp	r3, #2
 80103dc:	d103      	bne.n	80103e6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2209      	movs	r2, #9
 80103e2:	761a      	strb	r2, [r3, #24]
      break;
 80103e4:	e045      	b.n	8010472 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 80103e6:	7bbb      	ldrb	r3, [r7, #14]
 80103e8:	2b04      	cmp	r3, #4
 80103ea:	d142      	bne.n	8010472 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	220b      	movs	r2, #11
 80103f0:	761a      	strb	r2, [r3, #24]
      break;
 80103f2:	e03e      	b.n	8010472 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	7e5b      	ldrb	r3, [r3, #25]
 80103f8:	3301      	adds	r3, #1
 80103fa:	b2da      	uxtb	r2, r3
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	765a      	strb	r2, [r3, #25]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	7e5b      	ldrb	r3, [r3, #25]
 8010404:	2b02      	cmp	r3, #2
 8010406:	d806      	bhi.n	8010416 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2201      	movs	r2, #1
 801040c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2201      	movs	r2, #1
 8010412:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010414:	e02e      	b.n	8010474 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8d3 3d8c 	ldr.w	r3, [r3, #3468]	@ 0xd8c
 801041c:	2106      	movs	r1, #6
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 8010428:	4815      	ldr	r0, [pc, #84]	@ (8010480 <USBH_HandleControl+0x2fc>)
 801042a:	f000 fdcf 	bl	8010fcc <iprintf>
 801042e:	4815      	ldr	r0, [pc, #84]	@ (8010484 <USBH_HandleControl+0x300>)
 8010430:	f000 fdcc 	bl	8010fcc <iprintf>
 8010434:	200a      	movs	r0, #10
 8010436:	f000 fddb 	bl	8010ff0 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	795b      	ldrb	r3, [r3, #5]
 801043e:	4619      	mov	r1, r3
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f000 f8ee 	bl	8010622 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	791b      	ldrb	r3, [r3, #4]
 801044a:	4619      	mov	r1, r3
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f000 f8e8 	bl	8010622 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2200      	movs	r2, #0
 8010456:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010458:	2302      	movs	r3, #2
 801045a:	73fb      	strb	r3, [r7, #15]
      break;
 801045c:	e00a      	b.n	8010474 <USBH_HandleControl+0x2f0>

    default:
      break;
 801045e:	bf00      	nop
 8010460:	e008      	b.n	8010474 <USBH_HandleControl+0x2f0>
      break;
 8010462:	bf00      	nop
 8010464:	e006      	b.n	8010474 <USBH_HandleControl+0x2f0>
      break;
 8010466:	bf00      	nop
 8010468:	e004      	b.n	8010474 <USBH_HandleControl+0x2f0>
      break;
 801046a:	bf00      	nop
 801046c:	e002      	b.n	8010474 <USBH_HandleControl+0x2f0>
      break;
 801046e:	bf00      	nop
 8010470:	e000      	b.n	8010474 <USBH_HandleControl+0x2f0>
      break;
 8010472:	bf00      	nop
  }

  return status;
 8010474:	7bfb      	ldrb	r3, [r7, #15]
}
 8010476:	4618      	mov	r0, r3
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	0801273c 	.word	0x0801273c
 8010484:	08012818 	.word	0x08012818

08010488 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b088      	sub	sp, #32
 801048c:	af04      	add	r7, sp, #16
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	60b9      	str	r1, [r7, #8]
 8010492:	4613      	mov	r3, r2
 8010494:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010496:	79f9      	ldrb	r1, [r7, #7]
 8010498:	2300      	movs	r3, #0
 801049a:	9303      	str	r3, [sp, #12]
 801049c:	2308      	movs	r3, #8
 801049e:	9302      	str	r3, [sp, #8]
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	9301      	str	r3, [sp, #4]
 80104a4:	2300      	movs	r3, #0
 80104a6:	9300      	str	r3, [sp, #0]
 80104a8:	2300      	movs	r3, #0
 80104aa:	2200      	movs	r2, #0
 80104ac:	68f8      	ldr	r0, [r7, #12]
 80104ae:	f000 fb2c 	bl	8010b0a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80104b2:	2300      	movs	r3, #0
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	3710      	adds	r7, #16
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}

080104bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b088      	sub	sp, #32
 80104c0:	af04      	add	r7, sp, #16
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	60b9      	str	r1, [r7, #8]
 80104c6:	4611      	mov	r1, r2
 80104c8:	461a      	mov	r2, r3
 80104ca:	460b      	mov	r3, r1
 80104cc:	80fb      	strh	r3, [r7, #6]
 80104ce:	4613      	mov	r3, r2
 80104d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	f893 3cd5 	ldrb.w	r3, [r3, #3285]	@ 0xcd5
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d001      	beq.n	80104e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80104dc:	2300      	movs	r3, #0
 80104de:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80104e0:	7979      	ldrb	r1, [r7, #5]
 80104e2:	7e3b      	ldrb	r3, [r7, #24]
 80104e4:	9303      	str	r3, [sp, #12]
 80104e6:	88fb      	ldrh	r3, [r7, #6]
 80104e8:	9302      	str	r3, [sp, #8]
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	9301      	str	r3, [sp, #4]
 80104ee:	2301      	movs	r3, #1
 80104f0:	9300      	str	r3, [sp, #0]
 80104f2:	2300      	movs	r3, #0
 80104f4:	2200      	movs	r2, #0
 80104f6:	68f8      	ldr	r0, [r7, #12]
 80104f8:	f000 fb07 	bl	8010b0a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80104fc:	2300      	movs	r3, #0
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3710      	adds	r7, #16
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}

08010506 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010506:	b580      	push	{r7, lr}
 8010508:	b088      	sub	sp, #32
 801050a:	af04      	add	r7, sp, #16
 801050c:	60f8      	str	r0, [r7, #12]
 801050e:	60b9      	str	r1, [r7, #8]
 8010510:	4611      	mov	r1, r2
 8010512:	461a      	mov	r2, r3
 8010514:	460b      	mov	r3, r1
 8010516:	80fb      	strh	r3, [r7, #6]
 8010518:	4613      	mov	r3, r2
 801051a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801051c:	7979      	ldrb	r1, [r7, #5]
 801051e:	2300      	movs	r3, #0
 8010520:	9303      	str	r3, [sp, #12]
 8010522:	88fb      	ldrh	r3, [r7, #6]
 8010524:	9302      	str	r3, [sp, #8]
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	9301      	str	r3, [sp, #4]
 801052a:	2301      	movs	r3, #1
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	2300      	movs	r3, #0
 8010530:	2201      	movs	r2, #1
 8010532:	68f8      	ldr	r0, [r7, #12]
 8010534:	f000 fae9 	bl	8010b0a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010538:	2300      	movs	r3, #0

}
 801053a:	4618      	mov	r0, r3
 801053c:	3710      	adds	r7, #16
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b088      	sub	sp, #32
 8010546:	af04      	add	r7, sp, #16
 8010548:	60f8      	str	r0, [r7, #12]
 801054a:	60b9      	str	r1, [r7, #8]
 801054c:	4611      	mov	r1, r2
 801054e:	461a      	mov	r2, r3
 8010550:	460b      	mov	r3, r1
 8010552:	71fb      	strb	r3, [r7, #7]
 8010554:	4613      	mov	r3, r2
 8010556:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010558:	79fb      	ldrb	r3, [r7, #7]
 801055a:	b29b      	uxth	r3, r3
 801055c:	79b9      	ldrb	r1, [r7, #6]
 801055e:	2200      	movs	r2, #0
 8010560:	9203      	str	r2, [sp, #12]
 8010562:	9302      	str	r3, [sp, #8]
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	9301      	str	r3, [sp, #4]
 8010568:	2301      	movs	r3, #1
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	2303      	movs	r3, #3
 801056e:	2201      	movs	r2, #1
 8010570:	68f8      	ldr	r0, [r7, #12]
 8010572:	f000 faca 	bl	8010b0a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8010576:	2300      	movs	r3, #0
}
 8010578:	4618      	mov	r0, r3
 801057a:	3710      	adds	r7, #16
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b086      	sub	sp, #24
 8010584:	af04      	add	r7, sp, #16
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	4608      	mov	r0, r1
 801058a:	4611      	mov	r1, r2
 801058c:	461a      	mov	r2, r3
 801058e:	4603      	mov	r3, r0
 8010590:	70fb      	strb	r3, [r7, #3]
 8010592:	460b      	mov	r3, r1
 8010594:	70bb      	strb	r3, [r7, #2]
 8010596:	4613      	mov	r3, r2
 8010598:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801059a:	7878      	ldrb	r0, [r7, #1]
 801059c:	78ba      	ldrb	r2, [r7, #2]
 801059e:	78f9      	ldrb	r1, [r7, #3]
 80105a0:	8b3b      	ldrh	r3, [r7, #24]
 80105a2:	9302      	str	r3, [sp, #8]
 80105a4:	7d3b      	ldrb	r3, [r7, #20]
 80105a6:	9301      	str	r3, [sp, #4]
 80105a8:	7c3b      	ldrb	r3, [r7, #16]
 80105aa:	9300      	str	r3, [sp, #0]
 80105ac:	4603      	mov	r3, r0
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 fa5d 	bl	8010a6e <USBH_LL_OpenPipe>

  return USBH_OK;
 80105b4:	2300      	movs	r3, #0
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3708      	adds	r7, #8
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}

080105be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80105be:	b580      	push	{r7, lr}
 80105c0:	b082      	sub	sp, #8
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
 80105c6:	460b      	mov	r3, r1
 80105c8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80105ca:	78fb      	ldrb	r3, [r7, #3]
 80105cc:	4619      	mov	r1, r3
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f000 fa7c 	bl	8010acc <USBH_LL_ClosePipe>

  return USBH_OK;
 80105d4:	2300      	movs	r3, #0
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3708      	adds	r7, #8
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}

080105de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80105de:	b580      	push	{r7, lr}
 80105e0:	b084      	sub	sp, #16
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	6078      	str	r0, [r7, #4]
 80105e6:	460b      	mov	r3, r1
 80105e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f000 f839 	bl	8010662 <USBH_GetFreePipe>
 80105f0:	4603      	mov	r3, r0
 80105f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80105f4:	89fb      	ldrh	r3, [r7, #14]
 80105f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d00b      	beq.n	8010616 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80105fe:	78fa      	ldrb	r2, [r7, #3]
 8010600:	89fb      	ldrh	r3, [r7, #14]
 8010602:	f003 030f 	and.w	r3, r3, #15
 8010606:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801060a:	6879      	ldr	r1, [r7, #4]
 801060c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8010610:	009b      	lsls	r3, r3, #2
 8010612:	440b      	add	r3, r1
 8010614:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010616:	89fb      	ldrh	r3, [r7, #14]
 8010618:	b2db      	uxtb	r3, r3
}
 801061a:	4618      	mov	r0, r3
 801061c:	3710      	adds	r7, #16
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010622:	b480      	push	{r7}
 8010624:	b083      	sub	sp, #12
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
 801062a:	460b      	mov	r3, r1
 801062c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 801062e:	78fb      	ldrb	r3, [r7, #3]
 8010630:	2b0f      	cmp	r3, #15
 8010632:	d80f      	bhi.n	8010654 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010634:	78fb      	ldrb	r3, [r7, #3]
 8010636:	687a      	ldr	r2, [r7, #4]
 8010638:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801063c:	009b      	lsls	r3, r3, #2
 801063e:	4413      	add	r3, r2
 8010640:	685a      	ldr	r2, [r3, #4]
 8010642:	78fb      	ldrb	r3, [r7, #3]
 8010644:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010648:	6879      	ldr	r1, [r7, #4]
 801064a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801064e:	009b      	lsls	r3, r3, #2
 8010650:	440b      	add	r3, r1
 8010652:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010654:	2300      	movs	r3, #0
}
 8010656:	4618      	mov	r0, r3
 8010658:	370c      	adds	r7, #12
 801065a:	46bd      	mov	sp, r7
 801065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010660:	4770      	bx	lr

08010662 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010662:	b480      	push	{r7}
 8010664:	b085      	sub	sp, #20
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801066a:	2300      	movs	r3, #0
 801066c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 801066e:	2300      	movs	r3, #0
 8010670:	73fb      	strb	r3, [r7, #15]
 8010672:	e010      	b.n	8010696 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010674:	7bfb      	ldrb	r3, [r7, #15]
 8010676:	687a      	ldr	r2, [r7, #4]
 8010678:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	4413      	add	r3, r2
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010686:	2b00      	cmp	r3, #0
 8010688:	d102      	bne.n	8010690 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 801068a:	7bfb      	ldrb	r3, [r7, #15]
 801068c:	b29b      	uxth	r3, r3
 801068e:	e007      	b.n	80106a0 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010690:	7bfb      	ldrb	r3, [r7, #15]
 8010692:	3301      	adds	r3, #1
 8010694:	73fb      	strb	r3, [r7, #15]
 8010696:	7bfb      	ldrb	r3, [r7, #15]
 8010698:	2b0f      	cmp	r3, #15
 801069a:	d9eb      	bls.n	8010674 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801069c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3714      	adds	r7, #20
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr

080106ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 80106b0:	2200      	movs	r2, #0
 80106b2:	490e      	ldr	r1, [pc, #56]	@ (80106ec <MX_USB_HOST_Init+0x40>)
 80106b4:	480e      	ldr	r0, [pc, #56]	@ (80106f0 <MX_USB_HOST_Init+0x44>)
 80106b6:	f7fe f933 	bl	800e920 <USBH_Init>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d001      	beq.n	80106c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80106c0:	f7f1 fc38 	bl	8001f34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASS) != USBH_OK)
 80106c4:	490b      	ldr	r1, [pc, #44]	@ (80106f4 <MX_USB_HOST_Init+0x48>)
 80106c6:	480a      	ldr	r0, [pc, #40]	@ (80106f0 <MX_USB_HOST_Init+0x44>)
 80106c8:	f7fe f9e8 	bl	800ea9c <USBH_RegisterClass>
 80106cc:	4603      	mov	r3, r0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d001      	beq.n	80106d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80106d2:	f7f1 fc2f 	bl	8001f34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80106d6:	4806      	ldr	r0, [pc, #24]	@ (80106f0 <MX_USB_HOST_Init+0x44>)
 80106d8:	f7fe fad0 	bl	800ec7c <USBH_Start>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80106e2:	f7f1 fc27 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80106e6:	bf00      	nop
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	0801070d 	.word	0x0801070d
 80106f0:	20001394 	.word	0x20001394
 80106f4:	20000174 	.word	0x20000174

080106f8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 80106fc:	4802      	ldr	r0, [pc, #8]	@ (8010708 <MX_USB_HOST_Process+0x10>)
 80106fe:	f7fe facd 	bl	800ec9c <USBH_Process>
}
 8010702:	bf00      	nop
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	20001394 	.word	0x20001394

0801070c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	460b      	mov	r3, r1
 8010716:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010718:	78fb      	ldrb	r3, [r7, #3]
 801071a:	3b01      	subs	r3, #1
 801071c:	2b04      	cmp	r3, #4
 801071e:	d819      	bhi.n	8010754 <USBH_UserProcess+0x48>
 8010720:	a201      	add	r2, pc, #4	@ (adr r2, 8010728 <USBH_UserProcess+0x1c>)
 8010722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010726:	bf00      	nop
 8010728:	08010755 	.word	0x08010755
 801072c:	08010745 	.word	0x08010745
 8010730:	08010755 	.word	0x08010755
 8010734:	0801074d 	.word	0x0801074d
 8010738:	0801073d 	.word	0x0801073d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801073c:	4b09      	ldr	r3, [pc, #36]	@ (8010764 <USBH_UserProcess+0x58>)
 801073e:	2203      	movs	r2, #3
 8010740:	701a      	strb	r2, [r3, #0]
  break;
 8010742:	e008      	b.n	8010756 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010744:	4b07      	ldr	r3, [pc, #28]	@ (8010764 <USBH_UserProcess+0x58>)
 8010746:	2202      	movs	r2, #2
 8010748:	701a      	strb	r2, [r3, #0]
  break;
 801074a:	e004      	b.n	8010756 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801074c:	4b05      	ldr	r3, [pc, #20]	@ (8010764 <USBH_UserProcess+0x58>)
 801074e:	2201      	movs	r2, #1
 8010750:	701a      	strb	r2, [r3, #0]
  break;
 8010752:	e000      	b.n	8010756 <USBH_UserProcess+0x4a>

  default:
  break;
 8010754:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010756:	bf00      	nop
 8010758:	370c      	adds	r7, #12
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop
 8010764:	20002124 	.word	0x20002124

08010768 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b08a      	sub	sp, #40	@ 0x28
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010770:	f107 0314 	add.w	r3, r7, #20
 8010774:	2200      	movs	r2, #0
 8010776:	601a      	str	r2, [r3, #0]
 8010778:	605a      	str	r2, [r3, #4]
 801077a:	609a      	str	r2, [r3, #8]
 801077c:	60da      	str	r2, [r3, #12]
 801077e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4a24      	ldr	r2, [pc, #144]	@ (8010818 <HAL_HCD_MspInit+0xb0>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d141      	bne.n	801080e <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801078a:	2300      	movs	r3, #0
 801078c:	613b      	str	r3, [r7, #16]
 801078e:	4b23      	ldr	r3, [pc, #140]	@ (801081c <HAL_HCD_MspInit+0xb4>)
 8010790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010792:	4a22      	ldr	r2, [pc, #136]	@ (801081c <HAL_HCD_MspInit+0xb4>)
 8010794:	f043 0302 	orr.w	r3, r3, #2
 8010798:	6313      	str	r3, [r2, #48]	@ 0x30
 801079a:	4b20      	ldr	r3, [pc, #128]	@ (801081c <HAL_HCD_MspInit+0xb4>)
 801079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801079e:	f003 0302 	and.w	r3, r3, #2
 80107a2:	613b      	str	r3, [r7, #16]
 80107a4:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80107a6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80107aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107ac:	2302      	movs	r3, #2
 80107ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107b0:	2300      	movs	r3, #0
 80107b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80107b4:	2300      	movs	r3, #0
 80107b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80107b8:	230c      	movs	r3, #12
 80107ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80107bc:	f107 0314 	add.w	r3, r7, #20
 80107c0:	4619      	mov	r1, r3
 80107c2:	4817      	ldr	r0, [pc, #92]	@ (8010820 <HAL_HCD_MspInit+0xb8>)
 80107c4:	f7f5 f8e8 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80107c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80107cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80107ce:	2300      	movs	r3, #0
 80107d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107d2:	2300      	movs	r3, #0
 80107d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80107d6:	f107 0314 	add.w	r3, r7, #20
 80107da:	4619      	mov	r1, r3
 80107dc:	4810      	ldr	r0, [pc, #64]	@ (8010820 <HAL_HCD_MspInit+0xb8>)
 80107de:	f7f5 f8db 	bl	8005998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80107e2:	2300      	movs	r3, #0
 80107e4:	60fb      	str	r3, [r7, #12]
 80107e6:	4b0d      	ldr	r3, [pc, #52]	@ (801081c <HAL_HCD_MspInit+0xb4>)
 80107e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107ea:	4a0c      	ldr	r2, [pc, #48]	@ (801081c <HAL_HCD_MspInit+0xb4>)
 80107ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80107f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80107f2:	4b0a      	ldr	r3, [pc, #40]	@ (801081c <HAL_HCD_MspInit+0xb4>)
 80107f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80107fa:	60fb      	str	r3, [r7, #12]
 80107fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80107fe:	2200      	movs	r2, #0
 8010800:	2100      	movs	r1, #0
 8010802:	204d      	movs	r0, #77	@ 0x4d
 8010804:	f7f4 f914 	bl	8004a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8010808:	204d      	movs	r0, #77	@ 0x4d
 801080a:	f7f4 f92d 	bl	8004a68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801080e:	bf00      	nop
 8010810:	3728      	adds	r7, #40	@ 0x28
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	40040000 	.word	0x40040000
 801081c:	40023800 	.word	0x40023800
 8010820:	40020400 	.word	0x40020400

08010824 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010832:	4618      	mov	r0, r3
 8010834:	f7fe ff5d 	bl	800f6f2 <USBH_LL_IncTimer>
}
 8010838:	bf00      	nop
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801084e:	4618      	mov	r0, r3
 8010850:	f7fe ff95 	bl	800f77e <USBH_LL_Connect>
}
 8010854:	bf00      	nop
 8010856:	3708      	adds	r7, #8
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801086a:	4618      	mov	r0, r3
 801086c:	f7fe ff9e 	bl	800f7ac <USBH_LL_Disconnect>
}
 8010870:	bf00      	nop
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010878:	b480      	push	{r7}
 801087a:	b083      	sub	sp, #12
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	460b      	mov	r3, r1
 8010882:	70fb      	strb	r3, [r7, #3]
 8010884:	4613      	mov	r3, r2
 8010886:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010888:	bf00      	nop
 801088a:	370c      	adds	r7, #12
 801088c:	46bd      	mov	sp, r7
 801088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010892:	4770      	bx	lr

08010894 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7fe ff4f 	bl	800f746 <USBH_LL_PortEnabled>
}
 80108a8:	bf00      	nop
 80108aa:	3708      	adds	r7, #8
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80108be:	4618      	mov	r0, r3
 80108c0:	f7fe ff4f 	bl	800f762 <USBH_LL_PortDisabled>
}
 80108c4:	bf00      	nop
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d132      	bne.n	8010944 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80108de:	4a1c      	ldr	r2, [pc, #112]	@ (8010950 <USBH_LL_Init+0x84>)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	4a19      	ldr	r2, [pc, #100]	@ (8010950 <USBH_LL_Init+0x84>)
 80108ea:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80108ee:	4b18      	ldr	r3, [pc, #96]	@ (8010950 <USBH_LL_Init+0x84>)
 80108f0:	4a18      	ldr	r2, [pc, #96]	@ (8010954 <USBH_LL_Init+0x88>)
 80108f2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80108f4:	4b16      	ldr	r3, [pc, #88]	@ (8010950 <USBH_LL_Init+0x84>)
 80108f6:	220c      	movs	r2, #12
 80108f8:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80108fa:	4b15      	ldr	r3, [pc, #84]	@ (8010950 <USBH_LL_Init+0x84>)
 80108fc:	2201      	movs	r2, #1
 80108fe:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8010900:	4b13      	ldr	r3, [pc, #76]	@ (8010950 <USBH_LL_Init+0x84>)
 8010902:	2200      	movs	r2, #0
 8010904:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8010906:	4b12      	ldr	r3, [pc, #72]	@ (8010950 <USBH_LL_Init+0x84>)
 8010908:	2202      	movs	r2, #2
 801090a:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801090c:	4b10      	ldr	r3, [pc, #64]	@ (8010950 <USBH_LL_Init+0x84>)
 801090e:	2200      	movs	r2, #0
 8010910:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8010912:	4b0f      	ldr	r3, [pc, #60]	@ (8010950 <USBH_LL_Init+0x84>)
 8010914:	2200      	movs	r2, #0
 8010916:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8010918:	4b0d      	ldr	r3, [pc, #52]	@ (8010950 <USBH_LL_Init+0x84>)
 801091a:	2200      	movs	r2, #0
 801091c:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801091e:	4b0c      	ldr	r3, [pc, #48]	@ (8010950 <USBH_LL_Init+0x84>)
 8010920:	2200      	movs	r2, #0
 8010922:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8010924:	480a      	ldr	r0, [pc, #40]	@ (8010950 <USBH_LL_Init+0x84>)
 8010926:	f7f5 fb08 	bl	8005f3a <HAL_HCD_Init>
 801092a:	4603      	mov	r3, r0
 801092c:	2b00      	cmp	r3, #0
 801092e:	d001      	beq.n	8010934 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8010930:	f7f1 fb00 	bl	8001f34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8010934:	4806      	ldr	r0, [pc, #24]	@ (8010950 <USBH_LL_Init+0x84>)
 8010936:	f7f5 ff69 	bl	800680c <HAL_HCD_GetCurrentFrame>
 801093a:	4603      	mov	r3, r0
 801093c:	4619      	mov	r1, r3
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f7fe fec8 	bl	800f6d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010944:	2300      	movs	r3, #0
}
 8010946:	4618      	mov	r0, r3
 8010948:	3708      	adds	r7, #8
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
 801094e:	bf00      	nop
 8010950:	20002128 	.word	0x20002128
 8010954:	40040000 	.word	0x40040000

08010958 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b084      	sub	sp, #16
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010960:	2300      	movs	r3, #0
 8010962:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010964:	2300      	movs	r3, #0
 8010966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 801096e:	4618      	mov	r0, r3
 8010970:	f7f5 fed4 	bl	800671c <HAL_HCD_Start>
 8010974:	4603      	mov	r3, r0
 8010976:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010978:	7bfb      	ldrb	r3, [r7, #15]
 801097a:	4618      	mov	r0, r3
 801097c:	f000 f95e 	bl	8010c3c <USBH_Get_USB_Status>
 8010980:	4603      	mov	r3, r0
 8010982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010984:	7bbb      	ldrb	r3, [r7, #14]
}
 8010986:	4618      	mov	r0, r3
 8010988:	3710      	adds	r7, #16
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801098e:	b580      	push	{r7, lr}
 8010990:	b084      	sub	sp, #16
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010996:	2300      	movs	r3, #0
 8010998:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801099a:	2300      	movs	r3, #0
 801099c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7f5 fedc 	bl	8006762 <HAL_HCD_Stop>
 80109aa:	4603      	mov	r3, r0
 80109ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80109ae:	7bfb      	ldrb	r3, [r7, #15]
 80109b0:	4618      	mov	r0, r3
 80109b2:	f000 f943 	bl	8010c3c <USBH_Get_USB_Status>
 80109b6:	4603      	mov	r3, r0
 80109b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80109bc:	4618      	mov	r0, r3
 80109be:	3710      	adds	r7, #16
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}

080109c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b084      	sub	sp, #16
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80109cc:	2301      	movs	r3, #1
 80109ce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7f5 ff26 	bl	8006828 <HAL_HCD_GetCurrentSpeed>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b02      	cmp	r3, #2
 80109e0:	d00c      	beq.n	80109fc <USBH_LL_GetSpeed+0x38>
 80109e2:	2b02      	cmp	r3, #2
 80109e4:	d80d      	bhi.n	8010a02 <USBH_LL_GetSpeed+0x3e>
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d002      	beq.n	80109f0 <USBH_LL_GetSpeed+0x2c>
 80109ea:	2b01      	cmp	r3, #1
 80109ec:	d003      	beq.n	80109f6 <USBH_LL_GetSpeed+0x32>
 80109ee:	e008      	b.n	8010a02 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80109f0:	2300      	movs	r3, #0
 80109f2:	73fb      	strb	r3, [r7, #15]
    break;
 80109f4:	e008      	b.n	8010a08 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80109f6:	2301      	movs	r3, #1
 80109f8:	73fb      	strb	r3, [r7, #15]
    break;
 80109fa:	e005      	b.n	8010a08 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80109fc:	2302      	movs	r3, #2
 80109fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010a00:	e002      	b.n	8010a08 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010a02:	2301      	movs	r3, #1
 8010a04:	73fb      	strb	r3, [r7, #15]
    break;
 8010a06:	bf00      	nop
  }
  return  speed;
 8010a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3710      	adds	r7, #16
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}

08010a12 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010a12:	b580      	push	{r7, lr}
 8010a14:	b084      	sub	sp, #16
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7f5 feb7 	bl	800679c <HAL_HCD_ResetPort>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a32:	7bfb      	ldrb	r3, [r7, #15]
 8010a34:	4618      	mov	r0, r3
 8010a36:	f000 f901 	bl	8010c3c <USBH_Get_USB_Status>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3710      	adds	r7, #16
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	460b      	mov	r3, r1
 8010a52:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8010a5a:	78fa      	ldrb	r2, [r7, #3]
 8010a5c:	4611      	mov	r1, r2
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7f5 febf 	bl	80067e2 <HAL_HCD_HC_GetXferCount>
 8010a64:	4603      	mov	r3, r0
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3708      	adds	r7, #8
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}

08010a6e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010a6e:	b590      	push	{r4, r7, lr}
 8010a70:	b089      	sub	sp, #36	@ 0x24
 8010a72:	af04      	add	r7, sp, #16
 8010a74:	6078      	str	r0, [r7, #4]
 8010a76:	4608      	mov	r0, r1
 8010a78:	4611      	mov	r1, r2
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	70fb      	strb	r3, [r7, #3]
 8010a80:	460b      	mov	r3, r1
 8010a82:	70bb      	strb	r3, [r7, #2]
 8010a84:	4613      	mov	r3, r2
 8010a86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 8010a96:	787c      	ldrb	r4, [r7, #1]
 8010a98:	78ba      	ldrb	r2, [r7, #2]
 8010a9a:	78f9      	ldrb	r1, [r7, #3]
 8010a9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010a9e:	9302      	str	r3, [sp, #8]
 8010aa0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010aa4:	9301      	str	r3, [sp, #4]
 8010aa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010aaa:	9300      	str	r3, [sp, #0]
 8010aac:	4623      	mov	r3, r4
 8010aae:	f7f5 faab 	bl	8006008 <HAL_HCD_HC_Init>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010ab6:	7bfb      	ldrb	r3, [r7, #15]
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f000 f8bf 	bl	8010c3c <USBH_Get_USB_Status>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ac2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3714      	adds	r7, #20
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd90      	pop	{r4, r7, pc}

08010acc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b084      	sub	sp, #16
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	460b      	mov	r3, r1
 8010ad6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010adc:	2300      	movs	r3, #0
 8010ade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8010ae6:	78fa      	ldrb	r2, [r7, #3]
 8010ae8:	4611      	mov	r1, r2
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7f5 fb44 	bl	8006178 <HAL_HCD_HC_Halt>
 8010af0:	4603      	mov	r3, r0
 8010af2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010af4:	7bfb      	ldrb	r3, [r7, #15]
 8010af6:	4618      	mov	r0, r3
 8010af8:	f000 f8a0 	bl	8010c3c <USBH_Get_USB_Status>
 8010afc:	4603      	mov	r3, r0
 8010afe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b00:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3710      	adds	r7, #16
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}

08010b0a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010b0a:	b590      	push	{r4, r7, lr}
 8010b0c:	b089      	sub	sp, #36	@ 0x24
 8010b0e:	af04      	add	r7, sp, #16
 8010b10:	6078      	str	r0, [r7, #4]
 8010b12:	4608      	mov	r0, r1
 8010b14:	4611      	mov	r1, r2
 8010b16:	461a      	mov	r2, r3
 8010b18:	4603      	mov	r3, r0
 8010b1a:	70fb      	strb	r3, [r7, #3]
 8010b1c:	460b      	mov	r3, r1
 8010b1e:	70bb      	strb	r3, [r7, #2]
 8010b20:	4613      	mov	r3, r2
 8010b22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b24:	2300      	movs	r3, #0
 8010b26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8d3 0d88 	ldr.w	r0, [r3, #3464]	@ 0xd88
 8010b32:	787c      	ldrb	r4, [r7, #1]
 8010b34:	78ba      	ldrb	r2, [r7, #2]
 8010b36:	78f9      	ldrb	r1, [r7, #3]
 8010b38:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010b3c:	9303      	str	r3, [sp, #12]
 8010b3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010b40:	9302      	str	r3, [sp, #8]
 8010b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b44:	9301      	str	r3, [sp, #4]
 8010b46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010b4a:	9300      	str	r3, [sp, #0]
 8010b4c:	4623      	mov	r3, r4
 8010b4e:	f7f5 fb37 	bl	80061c0 <HAL_HCD_HC_SubmitRequest>
 8010b52:	4603      	mov	r3, r0
 8010b54:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010b56:	7bfb      	ldrb	r3, [r7, #15]
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f000 f86f 	bl	8010c3c <USBH_Get_USB_Status>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b62:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3714      	adds	r7, #20
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd90      	pop	{r4, r7, pc}

08010b6c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	460b      	mov	r3, r1
 8010b76:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8010b7e:	78fa      	ldrb	r2, [r7, #3]
 8010b80:	4611      	mov	r1, r2
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7f5 fe18 	bl	80067b8 <HAL_HCD_HC_GetURBState>
 8010b88:	4603      	mov	r3, r0
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3708      	adds	r7, #8
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}

08010b92 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010b92:	b580      	push	{r7, lr}
 8010b94:	b082      	sub	sp, #8
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
 8010b9a:	460b      	mov	r3, r1
 8010b9c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f893 3d84 	ldrb.w	r3, [r3, #3460]	@ 0xd84
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d103      	bne.n	8010bb0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8010ba8:	78fb      	ldrb	r3, [r7, #3]
 8010baa:	4618      	mov	r0, r3
 8010bac:	f000 f872 	bl	8010c94 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010bb0:	20c8      	movs	r0, #200	@ 0xc8
 8010bb2:	f7f3 fe61 	bl	8004878 <HAL_Delay>
  return USBH_OK;
 8010bb6:	2300      	movs	r3, #0
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3708      	adds	r7, #8
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b085      	sub	sp, #20
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	460b      	mov	r3, r1
 8010bca:	70fb      	strb	r3, [r7, #3]
 8010bcc:	4613      	mov	r3, r2
 8010bce:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	@ 0xd88
 8010bd6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010bd8:	78fa      	ldrb	r2, [r7, #3]
 8010bda:	68f9      	ldr	r1, [r7, #12]
 8010bdc:	4613      	mov	r3, r2
 8010bde:	011b      	lsls	r3, r3, #4
 8010be0:	1a9b      	subs	r3, r3, r2
 8010be2:	009b      	lsls	r3, r3, #2
 8010be4:	440b      	add	r3, r1
 8010be6:	3317      	adds	r3, #23
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d00a      	beq.n	8010c04 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010bee:	78fa      	ldrb	r2, [r7, #3]
 8010bf0:	68f9      	ldr	r1, [r7, #12]
 8010bf2:	4613      	mov	r3, r2
 8010bf4:	011b      	lsls	r3, r3, #4
 8010bf6:	1a9b      	subs	r3, r3, r2
 8010bf8:	009b      	lsls	r3, r3, #2
 8010bfa:	440b      	add	r3, r1
 8010bfc:	333c      	adds	r3, #60	@ 0x3c
 8010bfe:	78ba      	ldrb	r2, [r7, #2]
 8010c00:	701a      	strb	r2, [r3, #0]
 8010c02:	e009      	b.n	8010c18 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010c04:	78fa      	ldrb	r2, [r7, #3]
 8010c06:	68f9      	ldr	r1, [r7, #12]
 8010c08:	4613      	mov	r3, r2
 8010c0a:	011b      	lsls	r3, r3, #4
 8010c0c:	1a9b      	subs	r3, r3, r2
 8010c0e:	009b      	lsls	r3, r3, #2
 8010c10:	440b      	add	r3, r1
 8010c12:	333d      	adds	r3, #61	@ 0x3d
 8010c14:	78ba      	ldrb	r2, [r7, #2]
 8010c16:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010c18:	2300      	movs	r3, #0
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3714      	adds	r7, #20
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c24:	4770      	bx	lr

08010c26 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010c26:	b580      	push	{r7, lr}
 8010c28:	b082      	sub	sp, #8
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f7f3 fe22 	bl	8004878 <HAL_Delay>
}
 8010c34:	bf00      	nop
 8010c36:	3708      	adds	r7, #8
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b085      	sub	sp, #20
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	4603      	mov	r3, r0
 8010c44:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c46:	2300      	movs	r3, #0
 8010c48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010c4a:	79fb      	ldrb	r3, [r7, #7]
 8010c4c:	2b03      	cmp	r3, #3
 8010c4e:	d817      	bhi.n	8010c80 <USBH_Get_USB_Status+0x44>
 8010c50:	a201      	add	r2, pc, #4	@ (adr r2, 8010c58 <USBH_Get_USB_Status+0x1c>)
 8010c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c56:	bf00      	nop
 8010c58:	08010c69 	.word	0x08010c69
 8010c5c:	08010c6f 	.word	0x08010c6f
 8010c60:	08010c75 	.word	0x08010c75
 8010c64:	08010c7b 	.word	0x08010c7b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8010c6c:	e00b      	b.n	8010c86 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010c6e:	2302      	movs	r3, #2
 8010c70:	73fb      	strb	r3, [r7, #15]
    break;
 8010c72:	e008      	b.n	8010c86 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010c74:	2301      	movs	r3, #1
 8010c76:	73fb      	strb	r3, [r7, #15]
    break;
 8010c78:	e005      	b.n	8010c86 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010c7a:	2302      	movs	r3, #2
 8010c7c:	73fb      	strb	r3, [r7, #15]
    break;
 8010c7e:	e002      	b.n	8010c86 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010c80:	2302      	movs	r3, #2
 8010c82:	73fb      	strb	r3, [r7, #15]
    break;
 8010c84:	bf00      	nop
  }
  return usb_status;
 8010c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3714      	adds	r7, #20
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c92:	4770      	bx	lr

08010c94 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b084      	sub	sp, #16
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010c9e:	79fb      	ldrb	r3, [r7, #7]
 8010ca0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8010ca2:	79fb      	ldrb	r3, [r7, #7]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d102      	bne.n	8010cae <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	73fb      	strb	r3, [r7, #15]
 8010cac:	e001      	b.n	8010cb2 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010cae:	2300      	movs	r3, #0
 8010cb0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8010cb2:	7bfb      	ldrb	r3, [r7, #15]
 8010cb4:	461a      	mov	r2, r3
 8010cb6:	2110      	movs	r1, #16
 8010cb8:	4803      	ldr	r0, [pc, #12]	@ (8010cc8 <MX_DriverVbusHS+0x34>)
 8010cba:	f7f5 f925 	bl	8005f08 <HAL_GPIO_WritePin>
}
 8010cbe:	bf00      	nop
 8010cc0:	3710      	adds	r7, #16
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	40020800 	.word	0x40020800

08010ccc <malloc>:
 8010ccc:	4b02      	ldr	r3, [pc, #8]	@ (8010cd8 <malloc+0xc>)
 8010cce:	4601      	mov	r1, r0
 8010cd0:	6818      	ldr	r0, [r3, #0]
 8010cd2:	f000 b82d 	b.w	8010d30 <_malloc_r>
 8010cd6:	bf00      	nop
 8010cd8:	200001a0 	.word	0x200001a0

08010cdc <free>:
 8010cdc:	4b02      	ldr	r3, [pc, #8]	@ (8010ce8 <free+0xc>)
 8010cde:	4601      	mov	r1, r0
 8010ce0:	6818      	ldr	r0, [r3, #0]
 8010ce2:	f000 bb77 	b.w	80113d4 <_free_r>
 8010ce6:	bf00      	nop
 8010ce8:	200001a0 	.word	0x200001a0

08010cec <sbrk_aligned>:
 8010cec:	b570      	push	{r4, r5, r6, lr}
 8010cee:	4e0f      	ldr	r6, [pc, #60]	@ (8010d2c <sbrk_aligned+0x40>)
 8010cf0:	460c      	mov	r4, r1
 8010cf2:	6831      	ldr	r1, [r6, #0]
 8010cf4:	4605      	mov	r5, r0
 8010cf6:	b911      	cbnz	r1, 8010cfe <sbrk_aligned+0x12>
 8010cf8:	f000 fb14 	bl	8011324 <_sbrk_r>
 8010cfc:	6030      	str	r0, [r6, #0]
 8010cfe:	4621      	mov	r1, r4
 8010d00:	4628      	mov	r0, r5
 8010d02:	f000 fb0f 	bl	8011324 <_sbrk_r>
 8010d06:	1c43      	adds	r3, r0, #1
 8010d08:	d103      	bne.n	8010d12 <sbrk_aligned+0x26>
 8010d0a:	f04f 34ff 	mov.w	r4, #4294967295
 8010d0e:	4620      	mov	r0, r4
 8010d10:	bd70      	pop	{r4, r5, r6, pc}
 8010d12:	1cc4      	adds	r4, r0, #3
 8010d14:	f024 0403 	bic.w	r4, r4, #3
 8010d18:	42a0      	cmp	r0, r4
 8010d1a:	d0f8      	beq.n	8010d0e <sbrk_aligned+0x22>
 8010d1c:	1a21      	subs	r1, r4, r0
 8010d1e:	4628      	mov	r0, r5
 8010d20:	f000 fb00 	bl	8011324 <_sbrk_r>
 8010d24:	3001      	adds	r0, #1
 8010d26:	d1f2      	bne.n	8010d0e <sbrk_aligned+0x22>
 8010d28:	e7ef      	b.n	8010d0a <sbrk_aligned+0x1e>
 8010d2a:	bf00      	nop
 8010d2c:	20002508 	.word	0x20002508

08010d30 <_malloc_r>:
 8010d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d34:	1ccd      	adds	r5, r1, #3
 8010d36:	f025 0503 	bic.w	r5, r5, #3
 8010d3a:	3508      	adds	r5, #8
 8010d3c:	2d0c      	cmp	r5, #12
 8010d3e:	bf38      	it	cc
 8010d40:	250c      	movcc	r5, #12
 8010d42:	2d00      	cmp	r5, #0
 8010d44:	4606      	mov	r6, r0
 8010d46:	db01      	blt.n	8010d4c <_malloc_r+0x1c>
 8010d48:	42a9      	cmp	r1, r5
 8010d4a:	d904      	bls.n	8010d56 <_malloc_r+0x26>
 8010d4c:	230c      	movs	r3, #12
 8010d4e:	6033      	str	r3, [r6, #0]
 8010d50:	2000      	movs	r0, #0
 8010d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010e2c <_malloc_r+0xfc>
 8010d5a:	f000 f869 	bl	8010e30 <__malloc_lock>
 8010d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8010d62:	461c      	mov	r4, r3
 8010d64:	bb44      	cbnz	r4, 8010db8 <_malloc_r+0x88>
 8010d66:	4629      	mov	r1, r5
 8010d68:	4630      	mov	r0, r6
 8010d6a:	f7ff ffbf 	bl	8010cec <sbrk_aligned>
 8010d6e:	1c43      	adds	r3, r0, #1
 8010d70:	4604      	mov	r4, r0
 8010d72:	d158      	bne.n	8010e26 <_malloc_r+0xf6>
 8010d74:	f8d8 4000 	ldr.w	r4, [r8]
 8010d78:	4627      	mov	r7, r4
 8010d7a:	2f00      	cmp	r7, #0
 8010d7c:	d143      	bne.n	8010e06 <_malloc_r+0xd6>
 8010d7e:	2c00      	cmp	r4, #0
 8010d80:	d04b      	beq.n	8010e1a <_malloc_r+0xea>
 8010d82:	6823      	ldr	r3, [r4, #0]
 8010d84:	4639      	mov	r1, r7
 8010d86:	4630      	mov	r0, r6
 8010d88:	eb04 0903 	add.w	r9, r4, r3
 8010d8c:	f000 faca 	bl	8011324 <_sbrk_r>
 8010d90:	4581      	cmp	r9, r0
 8010d92:	d142      	bne.n	8010e1a <_malloc_r+0xea>
 8010d94:	6821      	ldr	r1, [r4, #0]
 8010d96:	1a6d      	subs	r5, r5, r1
 8010d98:	4629      	mov	r1, r5
 8010d9a:	4630      	mov	r0, r6
 8010d9c:	f7ff ffa6 	bl	8010cec <sbrk_aligned>
 8010da0:	3001      	adds	r0, #1
 8010da2:	d03a      	beq.n	8010e1a <_malloc_r+0xea>
 8010da4:	6823      	ldr	r3, [r4, #0]
 8010da6:	442b      	add	r3, r5
 8010da8:	6023      	str	r3, [r4, #0]
 8010daa:	f8d8 3000 	ldr.w	r3, [r8]
 8010dae:	685a      	ldr	r2, [r3, #4]
 8010db0:	bb62      	cbnz	r2, 8010e0c <_malloc_r+0xdc>
 8010db2:	f8c8 7000 	str.w	r7, [r8]
 8010db6:	e00f      	b.n	8010dd8 <_malloc_r+0xa8>
 8010db8:	6822      	ldr	r2, [r4, #0]
 8010dba:	1b52      	subs	r2, r2, r5
 8010dbc:	d420      	bmi.n	8010e00 <_malloc_r+0xd0>
 8010dbe:	2a0b      	cmp	r2, #11
 8010dc0:	d917      	bls.n	8010df2 <_malloc_r+0xc2>
 8010dc2:	1961      	adds	r1, r4, r5
 8010dc4:	42a3      	cmp	r3, r4
 8010dc6:	6025      	str	r5, [r4, #0]
 8010dc8:	bf18      	it	ne
 8010dca:	6059      	strne	r1, [r3, #4]
 8010dcc:	6863      	ldr	r3, [r4, #4]
 8010dce:	bf08      	it	eq
 8010dd0:	f8c8 1000 	streq.w	r1, [r8]
 8010dd4:	5162      	str	r2, [r4, r5]
 8010dd6:	604b      	str	r3, [r1, #4]
 8010dd8:	4630      	mov	r0, r6
 8010dda:	f000 f82f 	bl	8010e3c <__malloc_unlock>
 8010dde:	f104 000b 	add.w	r0, r4, #11
 8010de2:	1d23      	adds	r3, r4, #4
 8010de4:	f020 0007 	bic.w	r0, r0, #7
 8010de8:	1ac2      	subs	r2, r0, r3
 8010dea:	bf1c      	itt	ne
 8010dec:	1a1b      	subne	r3, r3, r0
 8010dee:	50a3      	strne	r3, [r4, r2]
 8010df0:	e7af      	b.n	8010d52 <_malloc_r+0x22>
 8010df2:	6862      	ldr	r2, [r4, #4]
 8010df4:	42a3      	cmp	r3, r4
 8010df6:	bf0c      	ite	eq
 8010df8:	f8c8 2000 	streq.w	r2, [r8]
 8010dfc:	605a      	strne	r2, [r3, #4]
 8010dfe:	e7eb      	b.n	8010dd8 <_malloc_r+0xa8>
 8010e00:	4623      	mov	r3, r4
 8010e02:	6864      	ldr	r4, [r4, #4]
 8010e04:	e7ae      	b.n	8010d64 <_malloc_r+0x34>
 8010e06:	463c      	mov	r4, r7
 8010e08:	687f      	ldr	r7, [r7, #4]
 8010e0a:	e7b6      	b.n	8010d7a <_malloc_r+0x4a>
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	42a3      	cmp	r3, r4
 8010e12:	d1fb      	bne.n	8010e0c <_malloc_r+0xdc>
 8010e14:	2300      	movs	r3, #0
 8010e16:	6053      	str	r3, [r2, #4]
 8010e18:	e7de      	b.n	8010dd8 <_malloc_r+0xa8>
 8010e1a:	230c      	movs	r3, #12
 8010e1c:	6033      	str	r3, [r6, #0]
 8010e1e:	4630      	mov	r0, r6
 8010e20:	f000 f80c 	bl	8010e3c <__malloc_unlock>
 8010e24:	e794      	b.n	8010d50 <_malloc_r+0x20>
 8010e26:	6005      	str	r5, [r0, #0]
 8010e28:	e7d6      	b.n	8010dd8 <_malloc_r+0xa8>
 8010e2a:	bf00      	nop
 8010e2c:	2000250c 	.word	0x2000250c

08010e30 <__malloc_lock>:
 8010e30:	4801      	ldr	r0, [pc, #4]	@ (8010e38 <__malloc_lock+0x8>)
 8010e32:	f000 bac4 	b.w	80113be <__retarget_lock_acquire_recursive>
 8010e36:	bf00      	nop
 8010e38:	20002650 	.word	0x20002650

08010e3c <__malloc_unlock>:
 8010e3c:	4801      	ldr	r0, [pc, #4]	@ (8010e44 <__malloc_unlock+0x8>)
 8010e3e:	f000 babf 	b.w	80113c0 <__retarget_lock_release_recursive>
 8010e42:	bf00      	nop
 8010e44:	20002650 	.word	0x20002650

08010e48 <std>:
 8010e48:	2300      	movs	r3, #0
 8010e4a:	b510      	push	{r4, lr}
 8010e4c:	4604      	mov	r4, r0
 8010e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8010e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e56:	6083      	str	r3, [r0, #8]
 8010e58:	8181      	strh	r1, [r0, #12]
 8010e5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8010e5c:	81c2      	strh	r2, [r0, #14]
 8010e5e:	6183      	str	r3, [r0, #24]
 8010e60:	4619      	mov	r1, r3
 8010e62:	2208      	movs	r2, #8
 8010e64:	305c      	adds	r0, #92	@ 0x5c
 8010e66:	f000 fa21 	bl	80112ac <memset>
 8010e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8010ea0 <std+0x58>)
 8010e6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8010e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8010ea4 <std+0x5c>)
 8010e70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010e72:	4b0d      	ldr	r3, [pc, #52]	@ (8010ea8 <std+0x60>)
 8010e74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010e76:	4b0d      	ldr	r3, [pc, #52]	@ (8010eac <std+0x64>)
 8010e78:	6323      	str	r3, [r4, #48]	@ 0x30
 8010e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8010eb0 <std+0x68>)
 8010e7c:	6224      	str	r4, [r4, #32]
 8010e7e:	429c      	cmp	r4, r3
 8010e80:	d006      	beq.n	8010e90 <std+0x48>
 8010e82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010e86:	4294      	cmp	r4, r2
 8010e88:	d002      	beq.n	8010e90 <std+0x48>
 8010e8a:	33d0      	adds	r3, #208	@ 0xd0
 8010e8c:	429c      	cmp	r4, r3
 8010e8e:	d105      	bne.n	8010e9c <std+0x54>
 8010e90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e98:	f000 ba90 	b.w	80113bc <__retarget_lock_init_recursive>
 8010e9c:	bd10      	pop	{r4, pc}
 8010e9e:	bf00      	nop
 8010ea0:	080110fd 	.word	0x080110fd
 8010ea4:	0801111f 	.word	0x0801111f
 8010ea8:	08011157 	.word	0x08011157
 8010eac:	0801117b 	.word	0x0801117b
 8010eb0:	20002510 	.word	0x20002510

08010eb4 <stdio_exit_handler>:
 8010eb4:	4a02      	ldr	r2, [pc, #8]	@ (8010ec0 <stdio_exit_handler+0xc>)
 8010eb6:	4903      	ldr	r1, [pc, #12]	@ (8010ec4 <stdio_exit_handler+0x10>)
 8010eb8:	4803      	ldr	r0, [pc, #12]	@ (8010ec8 <stdio_exit_handler+0x14>)
 8010eba:	f000 b869 	b.w	8010f90 <_fwalk_sglue>
 8010ebe:	bf00      	nop
 8010ec0:	20000194 	.word	0x20000194
 8010ec4:	08011dc1 	.word	0x08011dc1
 8010ec8:	200001a4 	.word	0x200001a4

08010ecc <cleanup_stdio>:
 8010ecc:	6841      	ldr	r1, [r0, #4]
 8010ece:	4b0c      	ldr	r3, [pc, #48]	@ (8010f00 <cleanup_stdio+0x34>)
 8010ed0:	4299      	cmp	r1, r3
 8010ed2:	b510      	push	{r4, lr}
 8010ed4:	4604      	mov	r4, r0
 8010ed6:	d001      	beq.n	8010edc <cleanup_stdio+0x10>
 8010ed8:	f000 ff72 	bl	8011dc0 <_fflush_r>
 8010edc:	68a1      	ldr	r1, [r4, #8]
 8010ede:	4b09      	ldr	r3, [pc, #36]	@ (8010f04 <cleanup_stdio+0x38>)
 8010ee0:	4299      	cmp	r1, r3
 8010ee2:	d002      	beq.n	8010eea <cleanup_stdio+0x1e>
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	f000 ff6b 	bl	8011dc0 <_fflush_r>
 8010eea:	68e1      	ldr	r1, [r4, #12]
 8010eec:	4b06      	ldr	r3, [pc, #24]	@ (8010f08 <cleanup_stdio+0x3c>)
 8010eee:	4299      	cmp	r1, r3
 8010ef0:	d004      	beq.n	8010efc <cleanup_stdio+0x30>
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ef8:	f000 bf62 	b.w	8011dc0 <_fflush_r>
 8010efc:	bd10      	pop	{r4, pc}
 8010efe:	bf00      	nop
 8010f00:	20002510 	.word	0x20002510
 8010f04:	20002578 	.word	0x20002578
 8010f08:	200025e0 	.word	0x200025e0

08010f0c <global_stdio_init.part.0>:
 8010f0c:	b510      	push	{r4, lr}
 8010f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8010f3c <global_stdio_init.part.0+0x30>)
 8010f10:	4c0b      	ldr	r4, [pc, #44]	@ (8010f40 <global_stdio_init.part.0+0x34>)
 8010f12:	4a0c      	ldr	r2, [pc, #48]	@ (8010f44 <global_stdio_init.part.0+0x38>)
 8010f14:	601a      	str	r2, [r3, #0]
 8010f16:	4620      	mov	r0, r4
 8010f18:	2200      	movs	r2, #0
 8010f1a:	2104      	movs	r1, #4
 8010f1c:	f7ff ff94 	bl	8010e48 <std>
 8010f20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010f24:	2201      	movs	r2, #1
 8010f26:	2109      	movs	r1, #9
 8010f28:	f7ff ff8e 	bl	8010e48 <std>
 8010f2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010f30:	2202      	movs	r2, #2
 8010f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f36:	2112      	movs	r1, #18
 8010f38:	f7ff bf86 	b.w	8010e48 <std>
 8010f3c:	20002648 	.word	0x20002648
 8010f40:	20002510 	.word	0x20002510
 8010f44:	08010eb5 	.word	0x08010eb5

08010f48 <__sfp_lock_acquire>:
 8010f48:	4801      	ldr	r0, [pc, #4]	@ (8010f50 <__sfp_lock_acquire+0x8>)
 8010f4a:	f000 ba38 	b.w	80113be <__retarget_lock_acquire_recursive>
 8010f4e:	bf00      	nop
 8010f50:	20002651 	.word	0x20002651

08010f54 <__sfp_lock_release>:
 8010f54:	4801      	ldr	r0, [pc, #4]	@ (8010f5c <__sfp_lock_release+0x8>)
 8010f56:	f000 ba33 	b.w	80113c0 <__retarget_lock_release_recursive>
 8010f5a:	bf00      	nop
 8010f5c:	20002651 	.word	0x20002651

08010f60 <__sinit>:
 8010f60:	b510      	push	{r4, lr}
 8010f62:	4604      	mov	r4, r0
 8010f64:	f7ff fff0 	bl	8010f48 <__sfp_lock_acquire>
 8010f68:	6a23      	ldr	r3, [r4, #32]
 8010f6a:	b11b      	cbz	r3, 8010f74 <__sinit+0x14>
 8010f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f70:	f7ff bff0 	b.w	8010f54 <__sfp_lock_release>
 8010f74:	4b04      	ldr	r3, [pc, #16]	@ (8010f88 <__sinit+0x28>)
 8010f76:	6223      	str	r3, [r4, #32]
 8010f78:	4b04      	ldr	r3, [pc, #16]	@ (8010f8c <__sinit+0x2c>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d1f5      	bne.n	8010f6c <__sinit+0xc>
 8010f80:	f7ff ffc4 	bl	8010f0c <global_stdio_init.part.0>
 8010f84:	e7f2      	b.n	8010f6c <__sinit+0xc>
 8010f86:	bf00      	nop
 8010f88:	08010ecd 	.word	0x08010ecd
 8010f8c:	20002648 	.word	0x20002648

08010f90 <_fwalk_sglue>:
 8010f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f94:	4607      	mov	r7, r0
 8010f96:	4688      	mov	r8, r1
 8010f98:	4614      	mov	r4, r2
 8010f9a:	2600      	movs	r6, #0
 8010f9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010fa0:	f1b9 0901 	subs.w	r9, r9, #1
 8010fa4:	d505      	bpl.n	8010fb2 <_fwalk_sglue+0x22>
 8010fa6:	6824      	ldr	r4, [r4, #0]
 8010fa8:	2c00      	cmp	r4, #0
 8010faa:	d1f7      	bne.n	8010f9c <_fwalk_sglue+0xc>
 8010fac:	4630      	mov	r0, r6
 8010fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fb2:	89ab      	ldrh	r3, [r5, #12]
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d907      	bls.n	8010fc8 <_fwalk_sglue+0x38>
 8010fb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	d003      	beq.n	8010fc8 <_fwalk_sglue+0x38>
 8010fc0:	4629      	mov	r1, r5
 8010fc2:	4638      	mov	r0, r7
 8010fc4:	47c0      	blx	r8
 8010fc6:	4306      	orrs	r6, r0
 8010fc8:	3568      	adds	r5, #104	@ 0x68
 8010fca:	e7e9      	b.n	8010fa0 <_fwalk_sglue+0x10>

08010fcc <iprintf>:
 8010fcc:	b40f      	push	{r0, r1, r2, r3}
 8010fce:	b507      	push	{r0, r1, r2, lr}
 8010fd0:	4906      	ldr	r1, [pc, #24]	@ (8010fec <iprintf+0x20>)
 8010fd2:	ab04      	add	r3, sp, #16
 8010fd4:	6808      	ldr	r0, [r1, #0]
 8010fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fda:	6881      	ldr	r1, [r0, #8]
 8010fdc:	9301      	str	r3, [sp, #4]
 8010fde:	f000 fbc5 	bl	801176c <_vfiprintf_r>
 8010fe2:	b003      	add	sp, #12
 8010fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fe8:	b004      	add	sp, #16
 8010fea:	4770      	bx	lr
 8010fec:	200001a0 	.word	0x200001a0

08010ff0 <putchar>:
 8010ff0:	4b02      	ldr	r3, [pc, #8]	@ (8010ffc <putchar+0xc>)
 8010ff2:	4601      	mov	r1, r0
 8010ff4:	6818      	ldr	r0, [r3, #0]
 8010ff6:	6882      	ldr	r2, [r0, #8]
 8010ff8:	f000 bf6c 	b.w	8011ed4 <_putc_r>
 8010ffc:	200001a0 	.word	0x200001a0

08011000 <_puts_r>:
 8011000:	6a03      	ldr	r3, [r0, #32]
 8011002:	b570      	push	{r4, r5, r6, lr}
 8011004:	6884      	ldr	r4, [r0, #8]
 8011006:	4605      	mov	r5, r0
 8011008:	460e      	mov	r6, r1
 801100a:	b90b      	cbnz	r3, 8011010 <_puts_r+0x10>
 801100c:	f7ff ffa8 	bl	8010f60 <__sinit>
 8011010:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011012:	07db      	lsls	r3, r3, #31
 8011014:	d405      	bmi.n	8011022 <_puts_r+0x22>
 8011016:	89a3      	ldrh	r3, [r4, #12]
 8011018:	0598      	lsls	r0, r3, #22
 801101a:	d402      	bmi.n	8011022 <_puts_r+0x22>
 801101c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801101e:	f000 f9ce 	bl	80113be <__retarget_lock_acquire_recursive>
 8011022:	89a3      	ldrh	r3, [r4, #12]
 8011024:	0719      	lsls	r1, r3, #28
 8011026:	d502      	bpl.n	801102e <_puts_r+0x2e>
 8011028:	6923      	ldr	r3, [r4, #16]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d135      	bne.n	801109a <_puts_r+0x9a>
 801102e:	4621      	mov	r1, r4
 8011030:	4628      	mov	r0, r5
 8011032:	f000 f8e5 	bl	8011200 <__swsetup_r>
 8011036:	b380      	cbz	r0, 801109a <_puts_r+0x9a>
 8011038:	f04f 35ff 	mov.w	r5, #4294967295
 801103c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801103e:	07da      	lsls	r2, r3, #31
 8011040:	d405      	bmi.n	801104e <_puts_r+0x4e>
 8011042:	89a3      	ldrh	r3, [r4, #12]
 8011044:	059b      	lsls	r3, r3, #22
 8011046:	d402      	bmi.n	801104e <_puts_r+0x4e>
 8011048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801104a:	f000 f9b9 	bl	80113c0 <__retarget_lock_release_recursive>
 801104e:	4628      	mov	r0, r5
 8011050:	bd70      	pop	{r4, r5, r6, pc}
 8011052:	2b00      	cmp	r3, #0
 8011054:	da04      	bge.n	8011060 <_puts_r+0x60>
 8011056:	69a2      	ldr	r2, [r4, #24]
 8011058:	429a      	cmp	r2, r3
 801105a:	dc17      	bgt.n	801108c <_puts_r+0x8c>
 801105c:	290a      	cmp	r1, #10
 801105e:	d015      	beq.n	801108c <_puts_r+0x8c>
 8011060:	6823      	ldr	r3, [r4, #0]
 8011062:	1c5a      	adds	r2, r3, #1
 8011064:	6022      	str	r2, [r4, #0]
 8011066:	7019      	strb	r1, [r3, #0]
 8011068:	68a3      	ldr	r3, [r4, #8]
 801106a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801106e:	3b01      	subs	r3, #1
 8011070:	60a3      	str	r3, [r4, #8]
 8011072:	2900      	cmp	r1, #0
 8011074:	d1ed      	bne.n	8011052 <_puts_r+0x52>
 8011076:	2b00      	cmp	r3, #0
 8011078:	da11      	bge.n	801109e <_puts_r+0x9e>
 801107a:	4622      	mov	r2, r4
 801107c:	210a      	movs	r1, #10
 801107e:	4628      	mov	r0, r5
 8011080:	f000 f87f 	bl	8011182 <__swbuf_r>
 8011084:	3001      	adds	r0, #1
 8011086:	d0d7      	beq.n	8011038 <_puts_r+0x38>
 8011088:	250a      	movs	r5, #10
 801108a:	e7d7      	b.n	801103c <_puts_r+0x3c>
 801108c:	4622      	mov	r2, r4
 801108e:	4628      	mov	r0, r5
 8011090:	f000 f877 	bl	8011182 <__swbuf_r>
 8011094:	3001      	adds	r0, #1
 8011096:	d1e7      	bne.n	8011068 <_puts_r+0x68>
 8011098:	e7ce      	b.n	8011038 <_puts_r+0x38>
 801109a:	3e01      	subs	r6, #1
 801109c:	e7e4      	b.n	8011068 <_puts_r+0x68>
 801109e:	6823      	ldr	r3, [r4, #0]
 80110a0:	1c5a      	adds	r2, r3, #1
 80110a2:	6022      	str	r2, [r4, #0]
 80110a4:	220a      	movs	r2, #10
 80110a6:	701a      	strb	r2, [r3, #0]
 80110a8:	e7ee      	b.n	8011088 <_puts_r+0x88>
	...

080110ac <puts>:
 80110ac:	4b02      	ldr	r3, [pc, #8]	@ (80110b8 <puts+0xc>)
 80110ae:	4601      	mov	r1, r0
 80110b0:	6818      	ldr	r0, [r3, #0]
 80110b2:	f7ff bfa5 	b.w	8011000 <_puts_r>
 80110b6:	bf00      	nop
 80110b8:	200001a0 	.word	0x200001a0

080110bc <siprintf>:
 80110bc:	b40e      	push	{r1, r2, r3}
 80110be:	b500      	push	{lr}
 80110c0:	b09c      	sub	sp, #112	@ 0x70
 80110c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80110c4:	9002      	str	r0, [sp, #8]
 80110c6:	9006      	str	r0, [sp, #24]
 80110c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80110cc:	4809      	ldr	r0, [pc, #36]	@ (80110f4 <siprintf+0x38>)
 80110ce:	9107      	str	r1, [sp, #28]
 80110d0:	9104      	str	r1, [sp, #16]
 80110d2:	4909      	ldr	r1, [pc, #36]	@ (80110f8 <siprintf+0x3c>)
 80110d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80110d8:	9105      	str	r1, [sp, #20]
 80110da:	6800      	ldr	r0, [r0, #0]
 80110dc:	9301      	str	r3, [sp, #4]
 80110de:	a902      	add	r1, sp, #8
 80110e0:	f000 fa1e 	bl	8011520 <_svfiprintf_r>
 80110e4:	9b02      	ldr	r3, [sp, #8]
 80110e6:	2200      	movs	r2, #0
 80110e8:	701a      	strb	r2, [r3, #0]
 80110ea:	b01c      	add	sp, #112	@ 0x70
 80110ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80110f0:	b003      	add	sp, #12
 80110f2:	4770      	bx	lr
 80110f4:	200001a0 	.word	0x200001a0
 80110f8:	ffff0208 	.word	0xffff0208

080110fc <__sread>:
 80110fc:	b510      	push	{r4, lr}
 80110fe:	460c      	mov	r4, r1
 8011100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011104:	f000 f8fc 	bl	8011300 <_read_r>
 8011108:	2800      	cmp	r0, #0
 801110a:	bfab      	itete	ge
 801110c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801110e:	89a3      	ldrhlt	r3, [r4, #12]
 8011110:	181b      	addge	r3, r3, r0
 8011112:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011116:	bfac      	ite	ge
 8011118:	6563      	strge	r3, [r4, #84]	@ 0x54
 801111a:	81a3      	strhlt	r3, [r4, #12]
 801111c:	bd10      	pop	{r4, pc}

0801111e <__swrite>:
 801111e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011122:	461f      	mov	r7, r3
 8011124:	898b      	ldrh	r3, [r1, #12]
 8011126:	05db      	lsls	r3, r3, #23
 8011128:	4605      	mov	r5, r0
 801112a:	460c      	mov	r4, r1
 801112c:	4616      	mov	r6, r2
 801112e:	d505      	bpl.n	801113c <__swrite+0x1e>
 8011130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011134:	2302      	movs	r3, #2
 8011136:	2200      	movs	r2, #0
 8011138:	f000 f8d0 	bl	80112dc <_lseek_r>
 801113c:	89a3      	ldrh	r3, [r4, #12]
 801113e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011142:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011146:	81a3      	strh	r3, [r4, #12]
 8011148:	4632      	mov	r2, r6
 801114a:	463b      	mov	r3, r7
 801114c:	4628      	mov	r0, r5
 801114e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011152:	f000 b8f7 	b.w	8011344 <_write_r>

08011156 <__sseek>:
 8011156:	b510      	push	{r4, lr}
 8011158:	460c      	mov	r4, r1
 801115a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801115e:	f000 f8bd 	bl	80112dc <_lseek_r>
 8011162:	1c43      	adds	r3, r0, #1
 8011164:	89a3      	ldrh	r3, [r4, #12]
 8011166:	bf15      	itete	ne
 8011168:	6560      	strne	r0, [r4, #84]	@ 0x54
 801116a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801116e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011172:	81a3      	strheq	r3, [r4, #12]
 8011174:	bf18      	it	ne
 8011176:	81a3      	strhne	r3, [r4, #12]
 8011178:	bd10      	pop	{r4, pc}

0801117a <__sclose>:
 801117a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801117e:	f000 b89d 	b.w	80112bc <_close_r>

08011182 <__swbuf_r>:
 8011182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011184:	460e      	mov	r6, r1
 8011186:	4614      	mov	r4, r2
 8011188:	4605      	mov	r5, r0
 801118a:	b118      	cbz	r0, 8011194 <__swbuf_r+0x12>
 801118c:	6a03      	ldr	r3, [r0, #32]
 801118e:	b90b      	cbnz	r3, 8011194 <__swbuf_r+0x12>
 8011190:	f7ff fee6 	bl	8010f60 <__sinit>
 8011194:	69a3      	ldr	r3, [r4, #24]
 8011196:	60a3      	str	r3, [r4, #8]
 8011198:	89a3      	ldrh	r3, [r4, #12]
 801119a:	071a      	lsls	r2, r3, #28
 801119c:	d501      	bpl.n	80111a2 <__swbuf_r+0x20>
 801119e:	6923      	ldr	r3, [r4, #16]
 80111a0:	b943      	cbnz	r3, 80111b4 <__swbuf_r+0x32>
 80111a2:	4621      	mov	r1, r4
 80111a4:	4628      	mov	r0, r5
 80111a6:	f000 f82b 	bl	8011200 <__swsetup_r>
 80111aa:	b118      	cbz	r0, 80111b4 <__swbuf_r+0x32>
 80111ac:	f04f 37ff 	mov.w	r7, #4294967295
 80111b0:	4638      	mov	r0, r7
 80111b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111b4:	6823      	ldr	r3, [r4, #0]
 80111b6:	6922      	ldr	r2, [r4, #16]
 80111b8:	1a98      	subs	r0, r3, r2
 80111ba:	6963      	ldr	r3, [r4, #20]
 80111bc:	b2f6      	uxtb	r6, r6
 80111be:	4283      	cmp	r3, r0
 80111c0:	4637      	mov	r7, r6
 80111c2:	dc05      	bgt.n	80111d0 <__swbuf_r+0x4e>
 80111c4:	4621      	mov	r1, r4
 80111c6:	4628      	mov	r0, r5
 80111c8:	f000 fdfa 	bl	8011dc0 <_fflush_r>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	d1ed      	bne.n	80111ac <__swbuf_r+0x2a>
 80111d0:	68a3      	ldr	r3, [r4, #8]
 80111d2:	3b01      	subs	r3, #1
 80111d4:	60a3      	str	r3, [r4, #8]
 80111d6:	6823      	ldr	r3, [r4, #0]
 80111d8:	1c5a      	adds	r2, r3, #1
 80111da:	6022      	str	r2, [r4, #0]
 80111dc:	701e      	strb	r6, [r3, #0]
 80111de:	6962      	ldr	r2, [r4, #20]
 80111e0:	1c43      	adds	r3, r0, #1
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d004      	beq.n	80111f0 <__swbuf_r+0x6e>
 80111e6:	89a3      	ldrh	r3, [r4, #12]
 80111e8:	07db      	lsls	r3, r3, #31
 80111ea:	d5e1      	bpl.n	80111b0 <__swbuf_r+0x2e>
 80111ec:	2e0a      	cmp	r6, #10
 80111ee:	d1df      	bne.n	80111b0 <__swbuf_r+0x2e>
 80111f0:	4621      	mov	r1, r4
 80111f2:	4628      	mov	r0, r5
 80111f4:	f000 fde4 	bl	8011dc0 <_fflush_r>
 80111f8:	2800      	cmp	r0, #0
 80111fa:	d0d9      	beq.n	80111b0 <__swbuf_r+0x2e>
 80111fc:	e7d6      	b.n	80111ac <__swbuf_r+0x2a>
	...

08011200 <__swsetup_r>:
 8011200:	b538      	push	{r3, r4, r5, lr}
 8011202:	4b29      	ldr	r3, [pc, #164]	@ (80112a8 <__swsetup_r+0xa8>)
 8011204:	4605      	mov	r5, r0
 8011206:	6818      	ldr	r0, [r3, #0]
 8011208:	460c      	mov	r4, r1
 801120a:	b118      	cbz	r0, 8011214 <__swsetup_r+0x14>
 801120c:	6a03      	ldr	r3, [r0, #32]
 801120e:	b90b      	cbnz	r3, 8011214 <__swsetup_r+0x14>
 8011210:	f7ff fea6 	bl	8010f60 <__sinit>
 8011214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011218:	0719      	lsls	r1, r3, #28
 801121a:	d422      	bmi.n	8011262 <__swsetup_r+0x62>
 801121c:	06da      	lsls	r2, r3, #27
 801121e:	d407      	bmi.n	8011230 <__swsetup_r+0x30>
 8011220:	2209      	movs	r2, #9
 8011222:	602a      	str	r2, [r5, #0]
 8011224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011228:	81a3      	strh	r3, [r4, #12]
 801122a:	f04f 30ff 	mov.w	r0, #4294967295
 801122e:	e033      	b.n	8011298 <__swsetup_r+0x98>
 8011230:	0758      	lsls	r0, r3, #29
 8011232:	d512      	bpl.n	801125a <__swsetup_r+0x5a>
 8011234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011236:	b141      	cbz	r1, 801124a <__swsetup_r+0x4a>
 8011238:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801123c:	4299      	cmp	r1, r3
 801123e:	d002      	beq.n	8011246 <__swsetup_r+0x46>
 8011240:	4628      	mov	r0, r5
 8011242:	f000 f8c7 	bl	80113d4 <_free_r>
 8011246:	2300      	movs	r3, #0
 8011248:	6363      	str	r3, [r4, #52]	@ 0x34
 801124a:	89a3      	ldrh	r3, [r4, #12]
 801124c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011250:	81a3      	strh	r3, [r4, #12]
 8011252:	2300      	movs	r3, #0
 8011254:	6063      	str	r3, [r4, #4]
 8011256:	6923      	ldr	r3, [r4, #16]
 8011258:	6023      	str	r3, [r4, #0]
 801125a:	89a3      	ldrh	r3, [r4, #12]
 801125c:	f043 0308 	orr.w	r3, r3, #8
 8011260:	81a3      	strh	r3, [r4, #12]
 8011262:	6923      	ldr	r3, [r4, #16]
 8011264:	b94b      	cbnz	r3, 801127a <__swsetup_r+0x7a>
 8011266:	89a3      	ldrh	r3, [r4, #12]
 8011268:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801126c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011270:	d003      	beq.n	801127a <__swsetup_r+0x7a>
 8011272:	4621      	mov	r1, r4
 8011274:	4628      	mov	r0, r5
 8011276:	f000 fdf1 	bl	8011e5c <__smakebuf_r>
 801127a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801127e:	f013 0201 	ands.w	r2, r3, #1
 8011282:	d00a      	beq.n	801129a <__swsetup_r+0x9a>
 8011284:	2200      	movs	r2, #0
 8011286:	60a2      	str	r2, [r4, #8]
 8011288:	6962      	ldr	r2, [r4, #20]
 801128a:	4252      	negs	r2, r2
 801128c:	61a2      	str	r2, [r4, #24]
 801128e:	6922      	ldr	r2, [r4, #16]
 8011290:	b942      	cbnz	r2, 80112a4 <__swsetup_r+0xa4>
 8011292:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011296:	d1c5      	bne.n	8011224 <__swsetup_r+0x24>
 8011298:	bd38      	pop	{r3, r4, r5, pc}
 801129a:	0799      	lsls	r1, r3, #30
 801129c:	bf58      	it	pl
 801129e:	6962      	ldrpl	r2, [r4, #20]
 80112a0:	60a2      	str	r2, [r4, #8]
 80112a2:	e7f4      	b.n	801128e <__swsetup_r+0x8e>
 80112a4:	2000      	movs	r0, #0
 80112a6:	e7f7      	b.n	8011298 <__swsetup_r+0x98>
 80112a8:	200001a0 	.word	0x200001a0

080112ac <memset>:
 80112ac:	4402      	add	r2, r0
 80112ae:	4603      	mov	r3, r0
 80112b0:	4293      	cmp	r3, r2
 80112b2:	d100      	bne.n	80112b6 <memset+0xa>
 80112b4:	4770      	bx	lr
 80112b6:	f803 1b01 	strb.w	r1, [r3], #1
 80112ba:	e7f9      	b.n	80112b0 <memset+0x4>

080112bc <_close_r>:
 80112bc:	b538      	push	{r3, r4, r5, lr}
 80112be:	4d06      	ldr	r5, [pc, #24]	@ (80112d8 <_close_r+0x1c>)
 80112c0:	2300      	movs	r3, #0
 80112c2:	4604      	mov	r4, r0
 80112c4:	4608      	mov	r0, r1
 80112c6:	602b      	str	r3, [r5, #0]
 80112c8:	f7f1 fafb 	bl	80028c2 <_close>
 80112cc:	1c43      	adds	r3, r0, #1
 80112ce:	d102      	bne.n	80112d6 <_close_r+0x1a>
 80112d0:	682b      	ldr	r3, [r5, #0]
 80112d2:	b103      	cbz	r3, 80112d6 <_close_r+0x1a>
 80112d4:	6023      	str	r3, [r4, #0]
 80112d6:	bd38      	pop	{r3, r4, r5, pc}
 80112d8:	2000264c 	.word	0x2000264c

080112dc <_lseek_r>:
 80112dc:	b538      	push	{r3, r4, r5, lr}
 80112de:	4d07      	ldr	r5, [pc, #28]	@ (80112fc <_lseek_r+0x20>)
 80112e0:	4604      	mov	r4, r0
 80112e2:	4608      	mov	r0, r1
 80112e4:	4611      	mov	r1, r2
 80112e6:	2200      	movs	r2, #0
 80112e8:	602a      	str	r2, [r5, #0]
 80112ea:	461a      	mov	r2, r3
 80112ec:	f7f1 fb10 	bl	8002910 <_lseek>
 80112f0:	1c43      	adds	r3, r0, #1
 80112f2:	d102      	bne.n	80112fa <_lseek_r+0x1e>
 80112f4:	682b      	ldr	r3, [r5, #0]
 80112f6:	b103      	cbz	r3, 80112fa <_lseek_r+0x1e>
 80112f8:	6023      	str	r3, [r4, #0]
 80112fa:	bd38      	pop	{r3, r4, r5, pc}
 80112fc:	2000264c 	.word	0x2000264c

08011300 <_read_r>:
 8011300:	b538      	push	{r3, r4, r5, lr}
 8011302:	4d07      	ldr	r5, [pc, #28]	@ (8011320 <_read_r+0x20>)
 8011304:	4604      	mov	r4, r0
 8011306:	4608      	mov	r0, r1
 8011308:	4611      	mov	r1, r2
 801130a:	2200      	movs	r2, #0
 801130c:	602a      	str	r2, [r5, #0]
 801130e:	461a      	mov	r2, r3
 8011310:	f7f1 faba 	bl	8002888 <_read>
 8011314:	1c43      	adds	r3, r0, #1
 8011316:	d102      	bne.n	801131e <_read_r+0x1e>
 8011318:	682b      	ldr	r3, [r5, #0]
 801131a:	b103      	cbz	r3, 801131e <_read_r+0x1e>
 801131c:	6023      	str	r3, [r4, #0]
 801131e:	bd38      	pop	{r3, r4, r5, pc}
 8011320:	2000264c 	.word	0x2000264c

08011324 <_sbrk_r>:
 8011324:	b538      	push	{r3, r4, r5, lr}
 8011326:	4d06      	ldr	r5, [pc, #24]	@ (8011340 <_sbrk_r+0x1c>)
 8011328:	2300      	movs	r3, #0
 801132a:	4604      	mov	r4, r0
 801132c:	4608      	mov	r0, r1
 801132e:	602b      	str	r3, [r5, #0]
 8011330:	f7f1 fafc 	bl	800292c <_sbrk>
 8011334:	1c43      	adds	r3, r0, #1
 8011336:	d102      	bne.n	801133e <_sbrk_r+0x1a>
 8011338:	682b      	ldr	r3, [r5, #0]
 801133a:	b103      	cbz	r3, 801133e <_sbrk_r+0x1a>
 801133c:	6023      	str	r3, [r4, #0]
 801133e:	bd38      	pop	{r3, r4, r5, pc}
 8011340:	2000264c 	.word	0x2000264c

08011344 <_write_r>:
 8011344:	b538      	push	{r3, r4, r5, lr}
 8011346:	4d07      	ldr	r5, [pc, #28]	@ (8011364 <_write_r+0x20>)
 8011348:	4604      	mov	r4, r0
 801134a:	4608      	mov	r0, r1
 801134c:	4611      	mov	r1, r2
 801134e:	2200      	movs	r2, #0
 8011350:	602a      	str	r2, [r5, #0]
 8011352:	461a      	mov	r2, r3
 8011354:	f7ef fdac 	bl	8000eb0 <_write>
 8011358:	1c43      	adds	r3, r0, #1
 801135a:	d102      	bne.n	8011362 <_write_r+0x1e>
 801135c:	682b      	ldr	r3, [r5, #0]
 801135e:	b103      	cbz	r3, 8011362 <_write_r+0x1e>
 8011360:	6023      	str	r3, [r4, #0]
 8011362:	bd38      	pop	{r3, r4, r5, pc}
 8011364:	2000264c 	.word	0x2000264c

08011368 <__errno>:
 8011368:	4b01      	ldr	r3, [pc, #4]	@ (8011370 <__errno+0x8>)
 801136a:	6818      	ldr	r0, [r3, #0]
 801136c:	4770      	bx	lr
 801136e:	bf00      	nop
 8011370:	200001a0 	.word	0x200001a0

08011374 <__libc_init_array>:
 8011374:	b570      	push	{r4, r5, r6, lr}
 8011376:	4d0d      	ldr	r5, [pc, #52]	@ (80113ac <__libc_init_array+0x38>)
 8011378:	4c0d      	ldr	r4, [pc, #52]	@ (80113b0 <__libc_init_array+0x3c>)
 801137a:	1b64      	subs	r4, r4, r5
 801137c:	10a4      	asrs	r4, r4, #2
 801137e:	2600      	movs	r6, #0
 8011380:	42a6      	cmp	r6, r4
 8011382:	d109      	bne.n	8011398 <__libc_init_array+0x24>
 8011384:	4d0b      	ldr	r5, [pc, #44]	@ (80113b4 <__libc_init_array+0x40>)
 8011386:	4c0c      	ldr	r4, [pc, #48]	@ (80113b8 <__libc_init_array+0x44>)
 8011388:	f000 fe58 	bl	801203c <_init>
 801138c:	1b64      	subs	r4, r4, r5
 801138e:	10a4      	asrs	r4, r4, #2
 8011390:	2600      	movs	r6, #0
 8011392:	42a6      	cmp	r6, r4
 8011394:	d105      	bne.n	80113a2 <__libc_init_array+0x2e>
 8011396:	bd70      	pop	{r4, r5, r6, pc}
 8011398:	f855 3b04 	ldr.w	r3, [r5], #4
 801139c:	4798      	blx	r3
 801139e:	3601      	adds	r6, #1
 80113a0:	e7ee      	b.n	8011380 <__libc_init_array+0xc>
 80113a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80113a6:	4798      	blx	r3
 80113a8:	3601      	adds	r6, #1
 80113aa:	e7f2      	b.n	8011392 <__libc_init_array+0x1e>
 80113ac:	0801553c 	.word	0x0801553c
 80113b0:	0801553c 	.word	0x0801553c
 80113b4:	0801553c 	.word	0x0801553c
 80113b8:	08015540 	.word	0x08015540

080113bc <__retarget_lock_init_recursive>:
 80113bc:	4770      	bx	lr

080113be <__retarget_lock_acquire_recursive>:
 80113be:	4770      	bx	lr

080113c0 <__retarget_lock_release_recursive>:
 80113c0:	4770      	bx	lr

080113c2 <strcpy>:
 80113c2:	4603      	mov	r3, r0
 80113c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80113c8:	f803 2b01 	strb.w	r2, [r3], #1
 80113cc:	2a00      	cmp	r2, #0
 80113ce:	d1f9      	bne.n	80113c4 <strcpy+0x2>
 80113d0:	4770      	bx	lr
	...

080113d4 <_free_r>:
 80113d4:	b538      	push	{r3, r4, r5, lr}
 80113d6:	4605      	mov	r5, r0
 80113d8:	2900      	cmp	r1, #0
 80113da:	d041      	beq.n	8011460 <_free_r+0x8c>
 80113dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113e0:	1f0c      	subs	r4, r1, #4
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	bfb8      	it	lt
 80113e6:	18e4      	addlt	r4, r4, r3
 80113e8:	f7ff fd22 	bl	8010e30 <__malloc_lock>
 80113ec:	4a1d      	ldr	r2, [pc, #116]	@ (8011464 <_free_r+0x90>)
 80113ee:	6813      	ldr	r3, [r2, #0]
 80113f0:	b933      	cbnz	r3, 8011400 <_free_r+0x2c>
 80113f2:	6063      	str	r3, [r4, #4]
 80113f4:	6014      	str	r4, [r2, #0]
 80113f6:	4628      	mov	r0, r5
 80113f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113fc:	f7ff bd1e 	b.w	8010e3c <__malloc_unlock>
 8011400:	42a3      	cmp	r3, r4
 8011402:	d908      	bls.n	8011416 <_free_r+0x42>
 8011404:	6820      	ldr	r0, [r4, #0]
 8011406:	1821      	adds	r1, r4, r0
 8011408:	428b      	cmp	r3, r1
 801140a:	bf01      	itttt	eq
 801140c:	6819      	ldreq	r1, [r3, #0]
 801140e:	685b      	ldreq	r3, [r3, #4]
 8011410:	1809      	addeq	r1, r1, r0
 8011412:	6021      	streq	r1, [r4, #0]
 8011414:	e7ed      	b.n	80113f2 <_free_r+0x1e>
 8011416:	461a      	mov	r2, r3
 8011418:	685b      	ldr	r3, [r3, #4]
 801141a:	b10b      	cbz	r3, 8011420 <_free_r+0x4c>
 801141c:	42a3      	cmp	r3, r4
 801141e:	d9fa      	bls.n	8011416 <_free_r+0x42>
 8011420:	6811      	ldr	r1, [r2, #0]
 8011422:	1850      	adds	r0, r2, r1
 8011424:	42a0      	cmp	r0, r4
 8011426:	d10b      	bne.n	8011440 <_free_r+0x6c>
 8011428:	6820      	ldr	r0, [r4, #0]
 801142a:	4401      	add	r1, r0
 801142c:	1850      	adds	r0, r2, r1
 801142e:	4283      	cmp	r3, r0
 8011430:	6011      	str	r1, [r2, #0]
 8011432:	d1e0      	bne.n	80113f6 <_free_r+0x22>
 8011434:	6818      	ldr	r0, [r3, #0]
 8011436:	685b      	ldr	r3, [r3, #4]
 8011438:	6053      	str	r3, [r2, #4]
 801143a:	4408      	add	r0, r1
 801143c:	6010      	str	r0, [r2, #0]
 801143e:	e7da      	b.n	80113f6 <_free_r+0x22>
 8011440:	d902      	bls.n	8011448 <_free_r+0x74>
 8011442:	230c      	movs	r3, #12
 8011444:	602b      	str	r3, [r5, #0]
 8011446:	e7d6      	b.n	80113f6 <_free_r+0x22>
 8011448:	6820      	ldr	r0, [r4, #0]
 801144a:	1821      	adds	r1, r4, r0
 801144c:	428b      	cmp	r3, r1
 801144e:	bf04      	itt	eq
 8011450:	6819      	ldreq	r1, [r3, #0]
 8011452:	685b      	ldreq	r3, [r3, #4]
 8011454:	6063      	str	r3, [r4, #4]
 8011456:	bf04      	itt	eq
 8011458:	1809      	addeq	r1, r1, r0
 801145a:	6021      	streq	r1, [r4, #0]
 801145c:	6054      	str	r4, [r2, #4]
 801145e:	e7ca      	b.n	80113f6 <_free_r+0x22>
 8011460:	bd38      	pop	{r3, r4, r5, pc}
 8011462:	bf00      	nop
 8011464:	2000250c 	.word	0x2000250c

08011468 <__ssputs_r>:
 8011468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801146c:	688e      	ldr	r6, [r1, #8]
 801146e:	461f      	mov	r7, r3
 8011470:	42be      	cmp	r6, r7
 8011472:	680b      	ldr	r3, [r1, #0]
 8011474:	4682      	mov	sl, r0
 8011476:	460c      	mov	r4, r1
 8011478:	4690      	mov	r8, r2
 801147a:	d82d      	bhi.n	80114d8 <__ssputs_r+0x70>
 801147c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011480:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011484:	d026      	beq.n	80114d4 <__ssputs_r+0x6c>
 8011486:	6965      	ldr	r5, [r4, #20]
 8011488:	6909      	ldr	r1, [r1, #16]
 801148a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801148e:	eba3 0901 	sub.w	r9, r3, r1
 8011492:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011496:	1c7b      	adds	r3, r7, #1
 8011498:	444b      	add	r3, r9
 801149a:	106d      	asrs	r5, r5, #1
 801149c:	429d      	cmp	r5, r3
 801149e:	bf38      	it	cc
 80114a0:	461d      	movcc	r5, r3
 80114a2:	0553      	lsls	r3, r2, #21
 80114a4:	d527      	bpl.n	80114f6 <__ssputs_r+0x8e>
 80114a6:	4629      	mov	r1, r5
 80114a8:	f7ff fc42 	bl	8010d30 <_malloc_r>
 80114ac:	4606      	mov	r6, r0
 80114ae:	b360      	cbz	r0, 801150a <__ssputs_r+0xa2>
 80114b0:	6921      	ldr	r1, [r4, #16]
 80114b2:	464a      	mov	r2, r9
 80114b4:	f000 fd7e 	bl	8011fb4 <memcpy>
 80114b8:	89a3      	ldrh	r3, [r4, #12]
 80114ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80114be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114c2:	81a3      	strh	r3, [r4, #12]
 80114c4:	6126      	str	r6, [r4, #16]
 80114c6:	6165      	str	r5, [r4, #20]
 80114c8:	444e      	add	r6, r9
 80114ca:	eba5 0509 	sub.w	r5, r5, r9
 80114ce:	6026      	str	r6, [r4, #0]
 80114d0:	60a5      	str	r5, [r4, #8]
 80114d2:	463e      	mov	r6, r7
 80114d4:	42be      	cmp	r6, r7
 80114d6:	d900      	bls.n	80114da <__ssputs_r+0x72>
 80114d8:	463e      	mov	r6, r7
 80114da:	6820      	ldr	r0, [r4, #0]
 80114dc:	4632      	mov	r2, r6
 80114de:	4641      	mov	r1, r8
 80114e0:	f000 fd2c 	bl	8011f3c <memmove>
 80114e4:	68a3      	ldr	r3, [r4, #8]
 80114e6:	1b9b      	subs	r3, r3, r6
 80114e8:	60a3      	str	r3, [r4, #8]
 80114ea:	6823      	ldr	r3, [r4, #0]
 80114ec:	4433      	add	r3, r6
 80114ee:	6023      	str	r3, [r4, #0]
 80114f0:	2000      	movs	r0, #0
 80114f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114f6:	462a      	mov	r2, r5
 80114f8:	f000 fd6a 	bl	8011fd0 <_realloc_r>
 80114fc:	4606      	mov	r6, r0
 80114fe:	2800      	cmp	r0, #0
 8011500:	d1e0      	bne.n	80114c4 <__ssputs_r+0x5c>
 8011502:	6921      	ldr	r1, [r4, #16]
 8011504:	4650      	mov	r0, sl
 8011506:	f7ff ff65 	bl	80113d4 <_free_r>
 801150a:	230c      	movs	r3, #12
 801150c:	f8ca 3000 	str.w	r3, [sl]
 8011510:	89a3      	ldrh	r3, [r4, #12]
 8011512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011516:	81a3      	strh	r3, [r4, #12]
 8011518:	f04f 30ff 	mov.w	r0, #4294967295
 801151c:	e7e9      	b.n	80114f2 <__ssputs_r+0x8a>
	...

08011520 <_svfiprintf_r>:
 8011520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011524:	4698      	mov	r8, r3
 8011526:	898b      	ldrh	r3, [r1, #12]
 8011528:	061b      	lsls	r3, r3, #24
 801152a:	b09d      	sub	sp, #116	@ 0x74
 801152c:	4607      	mov	r7, r0
 801152e:	460d      	mov	r5, r1
 8011530:	4614      	mov	r4, r2
 8011532:	d510      	bpl.n	8011556 <_svfiprintf_r+0x36>
 8011534:	690b      	ldr	r3, [r1, #16]
 8011536:	b973      	cbnz	r3, 8011556 <_svfiprintf_r+0x36>
 8011538:	2140      	movs	r1, #64	@ 0x40
 801153a:	f7ff fbf9 	bl	8010d30 <_malloc_r>
 801153e:	6028      	str	r0, [r5, #0]
 8011540:	6128      	str	r0, [r5, #16]
 8011542:	b930      	cbnz	r0, 8011552 <_svfiprintf_r+0x32>
 8011544:	230c      	movs	r3, #12
 8011546:	603b      	str	r3, [r7, #0]
 8011548:	f04f 30ff 	mov.w	r0, #4294967295
 801154c:	b01d      	add	sp, #116	@ 0x74
 801154e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011552:	2340      	movs	r3, #64	@ 0x40
 8011554:	616b      	str	r3, [r5, #20]
 8011556:	2300      	movs	r3, #0
 8011558:	9309      	str	r3, [sp, #36]	@ 0x24
 801155a:	2320      	movs	r3, #32
 801155c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011560:	f8cd 800c 	str.w	r8, [sp, #12]
 8011564:	2330      	movs	r3, #48	@ 0x30
 8011566:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011704 <_svfiprintf_r+0x1e4>
 801156a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801156e:	f04f 0901 	mov.w	r9, #1
 8011572:	4623      	mov	r3, r4
 8011574:	469a      	mov	sl, r3
 8011576:	f813 2b01 	ldrb.w	r2, [r3], #1
 801157a:	b10a      	cbz	r2, 8011580 <_svfiprintf_r+0x60>
 801157c:	2a25      	cmp	r2, #37	@ 0x25
 801157e:	d1f9      	bne.n	8011574 <_svfiprintf_r+0x54>
 8011580:	ebba 0b04 	subs.w	fp, sl, r4
 8011584:	d00b      	beq.n	801159e <_svfiprintf_r+0x7e>
 8011586:	465b      	mov	r3, fp
 8011588:	4622      	mov	r2, r4
 801158a:	4629      	mov	r1, r5
 801158c:	4638      	mov	r0, r7
 801158e:	f7ff ff6b 	bl	8011468 <__ssputs_r>
 8011592:	3001      	adds	r0, #1
 8011594:	f000 80a7 	beq.w	80116e6 <_svfiprintf_r+0x1c6>
 8011598:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801159a:	445a      	add	r2, fp
 801159c:	9209      	str	r2, [sp, #36]	@ 0x24
 801159e:	f89a 3000 	ldrb.w	r3, [sl]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	f000 809f 	beq.w	80116e6 <_svfiprintf_r+0x1c6>
 80115a8:	2300      	movs	r3, #0
 80115aa:	f04f 32ff 	mov.w	r2, #4294967295
 80115ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115b2:	f10a 0a01 	add.w	sl, sl, #1
 80115b6:	9304      	str	r3, [sp, #16]
 80115b8:	9307      	str	r3, [sp, #28]
 80115ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115be:	931a      	str	r3, [sp, #104]	@ 0x68
 80115c0:	4654      	mov	r4, sl
 80115c2:	2205      	movs	r2, #5
 80115c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115c8:	484e      	ldr	r0, [pc, #312]	@ (8011704 <_svfiprintf_r+0x1e4>)
 80115ca:	f7ee fe19 	bl	8000200 <memchr>
 80115ce:	9a04      	ldr	r2, [sp, #16]
 80115d0:	b9d8      	cbnz	r0, 801160a <_svfiprintf_r+0xea>
 80115d2:	06d0      	lsls	r0, r2, #27
 80115d4:	bf44      	itt	mi
 80115d6:	2320      	movmi	r3, #32
 80115d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115dc:	0711      	lsls	r1, r2, #28
 80115de:	bf44      	itt	mi
 80115e0:	232b      	movmi	r3, #43	@ 0x2b
 80115e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115e6:	f89a 3000 	ldrb.w	r3, [sl]
 80115ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80115ec:	d015      	beq.n	801161a <_svfiprintf_r+0xfa>
 80115ee:	9a07      	ldr	r2, [sp, #28]
 80115f0:	4654      	mov	r4, sl
 80115f2:	2000      	movs	r0, #0
 80115f4:	f04f 0c0a 	mov.w	ip, #10
 80115f8:	4621      	mov	r1, r4
 80115fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115fe:	3b30      	subs	r3, #48	@ 0x30
 8011600:	2b09      	cmp	r3, #9
 8011602:	d94b      	bls.n	801169c <_svfiprintf_r+0x17c>
 8011604:	b1b0      	cbz	r0, 8011634 <_svfiprintf_r+0x114>
 8011606:	9207      	str	r2, [sp, #28]
 8011608:	e014      	b.n	8011634 <_svfiprintf_r+0x114>
 801160a:	eba0 0308 	sub.w	r3, r0, r8
 801160e:	fa09 f303 	lsl.w	r3, r9, r3
 8011612:	4313      	orrs	r3, r2
 8011614:	9304      	str	r3, [sp, #16]
 8011616:	46a2      	mov	sl, r4
 8011618:	e7d2      	b.n	80115c0 <_svfiprintf_r+0xa0>
 801161a:	9b03      	ldr	r3, [sp, #12]
 801161c:	1d19      	adds	r1, r3, #4
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	9103      	str	r1, [sp, #12]
 8011622:	2b00      	cmp	r3, #0
 8011624:	bfbb      	ittet	lt
 8011626:	425b      	neglt	r3, r3
 8011628:	f042 0202 	orrlt.w	r2, r2, #2
 801162c:	9307      	strge	r3, [sp, #28]
 801162e:	9307      	strlt	r3, [sp, #28]
 8011630:	bfb8      	it	lt
 8011632:	9204      	strlt	r2, [sp, #16]
 8011634:	7823      	ldrb	r3, [r4, #0]
 8011636:	2b2e      	cmp	r3, #46	@ 0x2e
 8011638:	d10a      	bne.n	8011650 <_svfiprintf_r+0x130>
 801163a:	7863      	ldrb	r3, [r4, #1]
 801163c:	2b2a      	cmp	r3, #42	@ 0x2a
 801163e:	d132      	bne.n	80116a6 <_svfiprintf_r+0x186>
 8011640:	9b03      	ldr	r3, [sp, #12]
 8011642:	1d1a      	adds	r2, r3, #4
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	9203      	str	r2, [sp, #12]
 8011648:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801164c:	3402      	adds	r4, #2
 801164e:	9305      	str	r3, [sp, #20]
 8011650:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011714 <_svfiprintf_r+0x1f4>
 8011654:	7821      	ldrb	r1, [r4, #0]
 8011656:	2203      	movs	r2, #3
 8011658:	4650      	mov	r0, sl
 801165a:	f7ee fdd1 	bl	8000200 <memchr>
 801165e:	b138      	cbz	r0, 8011670 <_svfiprintf_r+0x150>
 8011660:	9b04      	ldr	r3, [sp, #16]
 8011662:	eba0 000a 	sub.w	r0, r0, sl
 8011666:	2240      	movs	r2, #64	@ 0x40
 8011668:	4082      	lsls	r2, r0
 801166a:	4313      	orrs	r3, r2
 801166c:	3401      	adds	r4, #1
 801166e:	9304      	str	r3, [sp, #16]
 8011670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011674:	4824      	ldr	r0, [pc, #144]	@ (8011708 <_svfiprintf_r+0x1e8>)
 8011676:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801167a:	2206      	movs	r2, #6
 801167c:	f7ee fdc0 	bl	8000200 <memchr>
 8011680:	2800      	cmp	r0, #0
 8011682:	d036      	beq.n	80116f2 <_svfiprintf_r+0x1d2>
 8011684:	4b21      	ldr	r3, [pc, #132]	@ (801170c <_svfiprintf_r+0x1ec>)
 8011686:	bb1b      	cbnz	r3, 80116d0 <_svfiprintf_r+0x1b0>
 8011688:	9b03      	ldr	r3, [sp, #12]
 801168a:	3307      	adds	r3, #7
 801168c:	f023 0307 	bic.w	r3, r3, #7
 8011690:	3308      	adds	r3, #8
 8011692:	9303      	str	r3, [sp, #12]
 8011694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011696:	4433      	add	r3, r6
 8011698:	9309      	str	r3, [sp, #36]	@ 0x24
 801169a:	e76a      	b.n	8011572 <_svfiprintf_r+0x52>
 801169c:	fb0c 3202 	mla	r2, ip, r2, r3
 80116a0:	460c      	mov	r4, r1
 80116a2:	2001      	movs	r0, #1
 80116a4:	e7a8      	b.n	80115f8 <_svfiprintf_r+0xd8>
 80116a6:	2300      	movs	r3, #0
 80116a8:	3401      	adds	r4, #1
 80116aa:	9305      	str	r3, [sp, #20]
 80116ac:	4619      	mov	r1, r3
 80116ae:	f04f 0c0a 	mov.w	ip, #10
 80116b2:	4620      	mov	r0, r4
 80116b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116b8:	3a30      	subs	r2, #48	@ 0x30
 80116ba:	2a09      	cmp	r2, #9
 80116bc:	d903      	bls.n	80116c6 <_svfiprintf_r+0x1a6>
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d0c6      	beq.n	8011650 <_svfiprintf_r+0x130>
 80116c2:	9105      	str	r1, [sp, #20]
 80116c4:	e7c4      	b.n	8011650 <_svfiprintf_r+0x130>
 80116c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80116ca:	4604      	mov	r4, r0
 80116cc:	2301      	movs	r3, #1
 80116ce:	e7f0      	b.n	80116b2 <_svfiprintf_r+0x192>
 80116d0:	ab03      	add	r3, sp, #12
 80116d2:	9300      	str	r3, [sp, #0]
 80116d4:	462a      	mov	r2, r5
 80116d6:	4b0e      	ldr	r3, [pc, #56]	@ (8011710 <_svfiprintf_r+0x1f0>)
 80116d8:	a904      	add	r1, sp, #16
 80116da:	4638      	mov	r0, r7
 80116dc:	f3af 8000 	nop.w
 80116e0:	1c42      	adds	r2, r0, #1
 80116e2:	4606      	mov	r6, r0
 80116e4:	d1d6      	bne.n	8011694 <_svfiprintf_r+0x174>
 80116e6:	89ab      	ldrh	r3, [r5, #12]
 80116e8:	065b      	lsls	r3, r3, #25
 80116ea:	f53f af2d 	bmi.w	8011548 <_svfiprintf_r+0x28>
 80116ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80116f0:	e72c      	b.n	801154c <_svfiprintf_r+0x2c>
 80116f2:	ab03      	add	r3, sp, #12
 80116f4:	9300      	str	r3, [sp, #0]
 80116f6:	462a      	mov	r2, r5
 80116f8:	4b05      	ldr	r3, [pc, #20]	@ (8011710 <_svfiprintf_r+0x1f0>)
 80116fa:	a904      	add	r1, sp, #16
 80116fc:	4638      	mov	r0, r7
 80116fe:	f000 f9bb 	bl	8011a78 <_printf_i>
 8011702:	e7ed      	b.n	80116e0 <_svfiprintf_r+0x1c0>
 8011704:	08015500 	.word	0x08015500
 8011708:	0801550a 	.word	0x0801550a
 801170c:	00000000 	.word	0x00000000
 8011710:	08011469 	.word	0x08011469
 8011714:	08015506 	.word	0x08015506

08011718 <__sfputc_r>:
 8011718:	6893      	ldr	r3, [r2, #8]
 801171a:	3b01      	subs	r3, #1
 801171c:	2b00      	cmp	r3, #0
 801171e:	b410      	push	{r4}
 8011720:	6093      	str	r3, [r2, #8]
 8011722:	da08      	bge.n	8011736 <__sfputc_r+0x1e>
 8011724:	6994      	ldr	r4, [r2, #24]
 8011726:	42a3      	cmp	r3, r4
 8011728:	db01      	blt.n	801172e <__sfputc_r+0x16>
 801172a:	290a      	cmp	r1, #10
 801172c:	d103      	bne.n	8011736 <__sfputc_r+0x1e>
 801172e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011732:	f7ff bd26 	b.w	8011182 <__swbuf_r>
 8011736:	6813      	ldr	r3, [r2, #0]
 8011738:	1c58      	adds	r0, r3, #1
 801173a:	6010      	str	r0, [r2, #0]
 801173c:	7019      	strb	r1, [r3, #0]
 801173e:	4608      	mov	r0, r1
 8011740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011744:	4770      	bx	lr

08011746 <__sfputs_r>:
 8011746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011748:	4606      	mov	r6, r0
 801174a:	460f      	mov	r7, r1
 801174c:	4614      	mov	r4, r2
 801174e:	18d5      	adds	r5, r2, r3
 8011750:	42ac      	cmp	r4, r5
 8011752:	d101      	bne.n	8011758 <__sfputs_r+0x12>
 8011754:	2000      	movs	r0, #0
 8011756:	e007      	b.n	8011768 <__sfputs_r+0x22>
 8011758:	f814 1b01 	ldrb.w	r1, [r4], #1
 801175c:	463a      	mov	r2, r7
 801175e:	4630      	mov	r0, r6
 8011760:	f7ff ffda 	bl	8011718 <__sfputc_r>
 8011764:	1c43      	adds	r3, r0, #1
 8011766:	d1f3      	bne.n	8011750 <__sfputs_r+0xa>
 8011768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801176c <_vfiprintf_r>:
 801176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011770:	460d      	mov	r5, r1
 8011772:	b09d      	sub	sp, #116	@ 0x74
 8011774:	4614      	mov	r4, r2
 8011776:	4698      	mov	r8, r3
 8011778:	4606      	mov	r6, r0
 801177a:	b118      	cbz	r0, 8011784 <_vfiprintf_r+0x18>
 801177c:	6a03      	ldr	r3, [r0, #32]
 801177e:	b90b      	cbnz	r3, 8011784 <_vfiprintf_r+0x18>
 8011780:	f7ff fbee 	bl	8010f60 <__sinit>
 8011784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011786:	07d9      	lsls	r1, r3, #31
 8011788:	d405      	bmi.n	8011796 <_vfiprintf_r+0x2a>
 801178a:	89ab      	ldrh	r3, [r5, #12]
 801178c:	059a      	lsls	r2, r3, #22
 801178e:	d402      	bmi.n	8011796 <_vfiprintf_r+0x2a>
 8011790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011792:	f7ff fe14 	bl	80113be <__retarget_lock_acquire_recursive>
 8011796:	89ab      	ldrh	r3, [r5, #12]
 8011798:	071b      	lsls	r3, r3, #28
 801179a:	d501      	bpl.n	80117a0 <_vfiprintf_r+0x34>
 801179c:	692b      	ldr	r3, [r5, #16]
 801179e:	b99b      	cbnz	r3, 80117c8 <_vfiprintf_r+0x5c>
 80117a0:	4629      	mov	r1, r5
 80117a2:	4630      	mov	r0, r6
 80117a4:	f7ff fd2c 	bl	8011200 <__swsetup_r>
 80117a8:	b170      	cbz	r0, 80117c8 <_vfiprintf_r+0x5c>
 80117aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117ac:	07dc      	lsls	r4, r3, #31
 80117ae:	d504      	bpl.n	80117ba <_vfiprintf_r+0x4e>
 80117b0:	f04f 30ff 	mov.w	r0, #4294967295
 80117b4:	b01d      	add	sp, #116	@ 0x74
 80117b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ba:	89ab      	ldrh	r3, [r5, #12]
 80117bc:	0598      	lsls	r0, r3, #22
 80117be:	d4f7      	bmi.n	80117b0 <_vfiprintf_r+0x44>
 80117c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117c2:	f7ff fdfd 	bl	80113c0 <__retarget_lock_release_recursive>
 80117c6:	e7f3      	b.n	80117b0 <_vfiprintf_r+0x44>
 80117c8:	2300      	movs	r3, #0
 80117ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80117cc:	2320      	movs	r3, #32
 80117ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80117d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80117d6:	2330      	movs	r3, #48	@ 0x30
 80117d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011988 <_vfiprintf_r+0x21c>
 80117dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80117e0:	f04f 0901 	mov.w	r9, #1
 80117e4:	4623      	mov	r3, r4
 80117e6:	469a      	mov	sl, r3
 80117e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117ec:	b10a      	cbz	r2, 80117f2 <_vfiprintf_r+0x86>
 80117ee:	2a25      	cmp	r2, #37	@ 0x25
 80117f0:	d1f9      	bne.n	80117e6 <_vfiprintf_r+0x7a>
 80117f2:	ebba 0b04 	subs.w	fp, sl, r4
 80117f6:	d00b      	beq.n	8011810 <_vfiprintf_r+0xa4>
 80117f8:	465b      	mov	r3, fp
 80117fa:	4622      	mov	r2, r4
 80117fc:	4629      	mov	r1, r5
 80117fe:	4630      	mov	r0, r6
 8011800:	f7ff ffa1 	bl	8011746 <__sfputs_r>
 8011804:	3001      	adds	r0, #1
 8011806:	f000 80a7 	beq.w	8011958 <_vfiprintf_r+0x1ec>
 801180a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801180c:	445a      	add	r2, fp
 801180e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011810:	f89a 3000 	ldrb.w	r3, [sl]
 8011814:	2b00      	cmp	r3, #0
 8011816:	f000 809f 	beq.w	8011958 <_vfiprintf_r+0x1ec>
 801181a:	2300      	movs	r3, #0
 801181c:	f04f 32ff 	mov.w	r2, #4294967295
 8011820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011824:	f10a 0a01 	add.w	sl, sl, #1
 8011828:	9304      	str	r3, [sp, #16]
 801182a:	9307      	str	r3, [sp, #28]
 801182c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011830:	931a      	str	r3, [sp, #104]	@ 0x68
 8011832:	4654      	mov	r4, sl
 8011834:	2205      	movs	r2, #5
 8011836:	f814 1b01 	ldrb.w	r1, [r4], #1
 801183a:	4853      	ldr	r0, [pc, #332]	@ (8011988 <_vfiprintf_r+0x21c>)
 801183c:	f7ee fce0 	bl	8000200 <memchr>
 8011840:	9a04      	ldr	r2, [sp, #16]
 8011842:	b9d8      	cbnz	r0, 801187c <_vfiprintf_r+0x110>
 8011844:	06d1      	lsls	r1, r2, #27
 8011846:	bf44      	itt	mi
 8011848:	2320      	movmi	r3, #32
 801184a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801184e:	0713      	lsls	r3, r2, #28
 8011850:	bf44      	itt	mi
 8011852:	232b      	movmi	r3, #43	@ 0x2b
 8011854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011858:	f89a 3000 	ldrb.w	r3, [sl]
 801185c:	2b2a      	cmp	r3, #42	@ 0x2a
 801185e:	d015      	beq.n	801188c <_vfiprintf_r+0x120>
 8011860:	9a07      	ldr	r2, [sp, #28]
 8011862:	4654      	mov	r4, sl
 8011864:	2000      	movs	r0, #0
 8011866:	f04f 0c0a 	mov.w	ip, #10
 801186a:	4621      	mov	r1, r4
 801186c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011870:	3b30      	subs	r3, #48	@ 0x30
 8011872:	2b09      	cmp	r3, #9
 8011874:	d94b      	bls.n	801190e <_vfiprintf_r+0x1a2>
 8011876:	b1b0      	cbz	r0, 80118a6 <_vfiprintf_r+0x13a>
 8011878:	9207      	str	r2, [sp, #28]
 801187a:	e014      	b.n	80118a6 <_vfiprintf_r+0x13a>
 801187c:	eba0 0308 	sub.w	r3, r0, r8
 8011880:	fa09 f303 	lsl.w	r3, r9, r3
 8011884:	4313      	orrs	r3, r2
 8011886:	9304      	str	r3, [sp, #16]
 8011888:	46a2      	mov	sl, r4
 801188a:	e7d2      	b.n	8011832 <_vfiprintf_r+0xc6>
 801188c:	9b03      	ldr	r3, [sp, #12]
 801188e:	1d19      	adds	r1, r3, #4
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	9103      	str	r1, [sp, #12]
 8011894:	2b00      	cmp	r3, #0
 8011896:	bfbb      	ittet	lt
 8011898:	425b      	neglt	r3, r3
 801189a:	f042 0202 	orrlt.w	r2, r2, #2
 801189e:	9307      	strge	r3, [sp, #28]
 80118a0:	9307      	strlt	r3, [sp, #28]
 80118a2:	bfb8      	it	lt
 80118a4:	9204      	strlt	r2, [sp, #16]
 80118a6:	7823      	ldrb	r3, [r4, #0]
 80118a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80118aa:	d10a      	bne.n	80118c2 <_vfiprintf_r+0x156>
 80118ac:	7863      	ldrb	r3, [r4, #1]
 80118ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80118b0:	d132      	bne.n	8011918 <_vfiprintf_r+0x1ac>
 80118b2:	9b03      	ldr	r3, [sp, #12]
 80118b4:	1d1a      	adds	r2, r3, #4
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	9203      	str	r2, [sp, #12]
 80118ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80118be:	3402      	adds	r4, #2
 80118c0:	9305      	str	r3, [sp, #20]
 80118c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011998 <_vfiprintf_r+0x22c>
 80118c6:	7821      	ldrb	r1, [r4, #0]
 80118c8:	2203      	movs	r2, #3
 80118ca:	4650      	mov	r0, sl
 80118cc:	f7ee fc98 	bl	8000200 <memchr>
 80118d0:	b138      	cbz	r0, 80118e2 <_vfiprintf_r+0x176>
 80118d2:	9b04      	ldr	r3, [sp, #16]
 80118d4:	eba0 000a 	sub.w	r0, r0, sl
 80118d8:	2240      	movs	r2, #64	@ 0x40
 80118da:	4082      	lsls	r2, r0
 80118dc:	4313      	orrs	r3, r2
 80118de:	3401      	adds	r4, #1
 80118e0:	9304      	str	r3, [sp, #16]
 80118e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118e6:	4829      	ldr	r0, [pc, #164]	@ (801198c <_vfiprintf_r+0x220>)
 80118e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80118ec:	2206      	movs	r2, #6
 80118ee:	f7ee fc87 	bl	8000200 <memchr>
 80118f2:	2800      	cmp	r0, #0
 80118f4:	d03f      	beq.n	8011976 <_vfiprintf_r+0x20a>
 80118f6:	4b26      	ldr	r3, [pc, #152]	@ (8011990 <_vfiprintf_r+0x224>)
 80118f8:	bb1b      	cbnz	r3, 8011942 <_vfiprintf_r+0x1d6>
 80118fa:	9b03      	ldr	r3, [sp, #12]
 80118fc:	3307      	adds	r3, #7
 80118fe:	f023 0307 	bic.w	r3, r3, #7
 8011902:	3308      	adds	r3, #8
 8011904:	9303      	str	r3, [sp, #12]
 8011906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011908:	443b      	add	r3, r7
 801190a:	9309      	str	r3, [sp, #36]	@ 0x24
 801190c:	e76a      	b.n	80117e4 <_vfiprintf_r+0x78>
 801190e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011912:	460c      	mov	r4, r1
 8011914:	2001      	movs	r0, #1
 8011916:	e7a8      	b.n	801186a <_vfiprintf_r+0xfe>
 8011918:	2300      	movs	r3, #0
 801191a:	3401      	adds	r4, #1
 801191c:	9305      	str	r3, [sp, #20]
 801191e:	4619      	mov	r1, r3
 8011920:	f04f 0c0a 	mov.w	ip, #10
 8011924:	4620      	mov	r0, r4
 8011926:	f810 2b01 	ldrb.w	r2, [r0], #1
 801192a:	3a30      	subs	r2, #48	@ 0x30
 801192c:	2a09      	cmp	r2, #9
 801192e:	d903      	bls.n	8011938 <_vfiprintf_r+0x1cc>
 8011930:	2b00      	cmp	r3, #0
 8011932:	d0c6      	beq.n	80118c2 <_vfiprintf_r+0x156>
 8011934:	9105      	str	r1, [sp, #20]
 8011936:	e7c4      	b.n	80118c2 <_vfiprintf_r+0x156>
 8011938:	fb0c 2101 	mla	r1, ip, r1, r2
 801193c:	4604      	mov	r4, r0
 801193e:	2301      	movs	r3, #1
 8011940:	e7f0      	b.n	8011924 <_vfiprintf_r+0x1b8>
 8011942:	ab03      	add	r3, sp, #12
 8011944:	9300      	str	r3, [sp, #0]
 8011946:	462a      	mov	r2, r5
 8011948:	4b12      	ldr	r3, [pc, #72]	@ (8011994 <_vfiprintf_r+0x228>)
 801194a:	a904      	add	r1, sp, #16
 801194c:	4630      	mov	r0, r6
 801194e:	f3af 8000 	nop.w
 8011952:	4607      	mov	r7, r0
 8011954:	1c78      	adds	r0, r7, #1
 8011956:	d1d6      	bne.n	8011906 <_vfiprintf_r+0x19a>
 8011958:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801195a:	07d9      	lsls	r1, r3, #31
 801195c:	d405      	bmi.n	801196a <_vfiprintf_r+0x1fe>
 801195e:	89ab      	ldrh	r3, [r5, #12]
 8011960:	059a      	lsls	r2, r3, #22
 8011962:	d402      	bmi.n	801196a <_vfiprintf_r+0x1fe>
 8011964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011966:	f7ff fd2b 	bl	80113c0 <__retarget_lock_release_recursive>
 801196a:	89ab      	ldrh	r3, [r5, #12]
 801196c:	065b      	lsls	r3, r3, #25
 801196e:	f53f af1f 	bmi.w	80117b0 <_vfiprintf_r+0x44>
 8011972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011974:	e71e      	b.n	80117b4 <_vfiprintf_r+0x48>
 8011976:	ab03      	add	r3, sp, #12
 8011978:	9300      	str	r3, [sp, #0]
 801197a:	462a      	mov	r2, r5
 801197c:	4b05      	ldr	r3, [pc, #20]	@ (8011994 <_vfiprintf_r+0x228>)
 801197e:	a904      	add	r1, sp, #16
 8011980:	4630      	mov	r0, r6
 8011982:	f000 f879 	bl	8011a78 <_printf_i>
 8011986:	e7e4      	b.n	8011952 <_vfiprintf_r+0x1e6>
 8011988:	08015500 	.word	0x08015500
 801198c:	0801550a 	.word	0x0801550a
 8011990:	00000000 	.word	0x00000000
 8011994:	08011747 	.word	0x08011747
 8011998:	08015506 	.word	0x08015506

0801199c <_printf_common>:
 801199c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119a0:	4616      	mov	r6, r2
 80119a2:	4698      	mov	r8, r3
 80119a4:	688a      	ldr	r2, [r1, #8]
 80119a6:	690b      	ldr	r3, [r1, #16]
 80119a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80119ac:	4293      	cmp	r3, r2
 80119ae:	bfb8      	it	lt
 80119b0:	4613      	movlt	r3, r2
 80119b2:	6033      	str	r3, [r6, #0]
 80119b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80119b8:	4607      	mov	r7, r0
 80119ba:	460c      	mov	r4, r1
 80119bc:	b10a      	cbz	r2, 80119c2 <_printf_common+0x26>
 80119be:	3301      	adds	r3, #1
 80119c0:	6033      	str	r3, [r6, #0]
 80119c2:	6823      	ldr	r3, [r4, #0]
 80119c4:	0699      	lsls	r1, r3, #26
 80119c6:	bf42      	ittt	mi
 80119c8:	6833      	ldrmi	r3, [r6, #0]
 80119ca:	3302      	addmi	r3, #2
 80119cc:	6033      	strmi	r3, [r6, #0]
 80119ce:	6825      	ldr	r5, [r4, #0]
 80119d0:	f015 0506 	ands.w	r5, r5, #6
 80119d4:	d106      	bne.n	80119e4 <_printf_common+0x48>
 80119d6:	f104 0a19 	add.w	sl, r4, #25
 80119da:	68e3      	ldr	r3, [r4, #12]
 80119dc:	6832      	ldr	r2, [r6, #0]
 80119de:	1a9b      	subs	r3, r3, r2
 80119e0:	42ab      	cmp	r3, r5
 80119e2:	dc26      	bgt.n	8011a32 <_printf_common+0x96>
 80119e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80119e8:	6822      	ldr	r2, [r4, #0]
 80119ea:	3b00      	subs	r3, #0
 80119ec:	bf18      	it	ne
 80119ee:	2301      	movne	r3, #1
 80119f0:	0692      	lsls	r2, r2, #26
 80119f2:	d42b      	bmi.n	8011a4c <_printf_common+0xb0>
 80119f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80119f8:	4641      	mov	r1, r8
 80119fa:	4638      	mov	r0, r7
 80119fc:	47c8      	blx	r9
 80119fe:	3001      	adds	r0, #1
 8011a00:	d01e      	beq.n	8011a40 <_printf_common+0xa4>
 8011a02:	6823      	ldr	r3, [r4, #0]
 8011a04:	6922      	ldr	r2, [r4, #16]
 8011a06:	f003 0306 	and.w	r3, r3, #6
 8011a0a:	2b04      	cmp	r3, #4
 8011a0c:	bf02      	ittt	eq
 8011a0e:	68e5      	ldreq	r5, [r4, #12]
 8011a10:	6833      	ldreq	r3, [r6, #0]
 8011a12:	1aed      	subeq	r5, r5, r3
 8011a14:	68a3      	ldr	r3, [r4, #8]
 8011a16:	bf0c      	ite	eq
 8011a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a1c:	2500      	movne	r5, #0
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	bfc4      	itt	gt
 8011a22:	1a9b      	subgt	r3, r3, r2
 8011a24:	18ed      	addgt	r5, r5, r3
 8011a26:	2600      	movs	r6, #0
 8011a28:	341a      	adds	r4, #26
 8011a2a:	42b5      	cmp	r5, r6
 8011a2c:	d11a      	bne.n	8011a64 <_printf_common+0xc8>
 8011a2e:	2000      	movs	r0, #0
 8011a30:	e008      	b.n	8011a44 <_printf_common+0xa8>
 8011a32:	2301      	movs	r3, #1
 8011a34:	4652      	mov	r2, sl
 8011a36:	4641      	mov	r1, r8
 8011a38:	4638      	mov	r0, r7
 8011a3a:	47c8      	blx	r9
 8011a3c:	3001      	adds	r0, #1
 8011a3e:	d103      	bne.n	8011a48 <_printf_common+0xac>
 8011a40:	f04f 30ff 	mov.w	r0, #4294967295
 8011a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a48:	3501      	adds	r5, #1
 8011a4a:	e7c6      	b.n	80119da <_printf_common+0x3e>
 8011a4c:	18e1      	adds	r1, r4, r3
 8011a4e:	1c5a      	adds	r2, r3, #1
 8011a50:	2030      	movs	r0, #48	@ 0x30
 8011a52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011a56:	4422      	add	r2, r4
 8011a58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011a5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011a60:	3302      	adds	r3, #2
 8011a62:	e7c7      	b.n	80119f4 <_printf_common+0x58>
 8011a64:	2301      	movs	r3, #1
 8011a66:	4622      	mov	r2, r4
 8011a68:	4641      	mov	r1, r8
 8011a6a:	4638      	mov	r0, r7
 8011a6c:	47c8      	blx	r9
 8011a6e:	3001      	adds	r0, #1
 8011a70:	d0e6      	beq.n	8011a40 <_printf_common+0xa4>
 8011a72:	3601      	adds	r6, #1
 8011a74:	e7d9      	b.n	8011a2a <_printf_common+0x8e>
	...

08011a78 <_printf_i>:
 8011a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a7c:	7e0f      	ldrb	r7, [r1, #24]
 8011a7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011a80:	2f78      	cmp	r7, #120	@ 0x78
 8011a82:	4691      	mov	r9, r2
 8011a84:	4680      	mov	r8, r0
 8011a86:	460c      	mov	r4, r1
 8011a88:	469a      	mov	sl, r3
 8011a8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011a8e:	d807      	bhi.n	8011aa0 <_printf_i+0x28>
 8011a90:	2f62      	cmp	r7, #98	@ 0x62
 8011a92:	d80a      	bhi.n	8011aaa <_printf_i+0x32>
 8011a94:	2f00      	cmp	r7, #0
 8011a96:	f000 80d2 	beq.w	8011c3e <_printf_i+0x1c6>
 8011a9a:	2f58      	cmp	r7, #88	@ 0x58
 8011a9c:	f000 80b9 	beq.w	8011c12 <_printf_i+0x19a>
 8011aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011aa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011aa8:	e03a      	b.n	8011b20 <_printf_i+0xa8>
 8011aaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011aae:	2b15      	cmp	r3, #21
 8011ab0:	d8f6      	bhi.n	8011aa0 <_printf_i+0x28>
 8011ab2:	a101      	add	r1, pc, #4	@ (adr r1, 8011ab8 <_printf_i+0x40>)
 8011ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ab8:	08011b11 	.word	0x08011b11
 8011abc:	08011b25 	.word	0x08011b25
 8011ac0:	08011aa1 	.word	0x08011aa1
 8011ac4:	08011aa1 	.word	0x08011aa1
 8011ac8:	08011aa1 	.word	0x08011aa1
 8011acc:	08011aa1 	.word	0x08011aa1
 8011ad0:	08011b25 	.word	0x08011b25
 8011ad4:	08011aa1 	.word	0x08011aa1
 8011ad8:	08011aa1 	.word	0x08011aa1
 8011adc:	08011aa1 	.word	0x08011aa1
 8011ae0:	08011aa1 	.word	0x08011aa1
 8011ae4:	08011c25 	.word	0x08011c25
 8011ae8:	08011b4f 	.word	0x08011b4f
 8011aec:	08011bdf 	.word	0x08011bdf
 8011af0:	08011aa1 	.word	0x08011aa1
 8011af4:	08011aa1 	.word	0x08011aa1
 8011af8:	08011c47 	.word	0x08011c47
 8011afc:	08011aa1 	.word	0x08011aa1
 8011b00:	08011b4f 	.word	0x08011b4f
 8011b04:	08011aa1 	.word	0x08011aa1
 8011b08:	08011aa1 	.word	0x08011aa1
 8011b0c:	08011be7 	.word	0x08011be7
 8011b10:	6833      	ldr	r3, [r6, #0]
 8011b12:	1d1a      	adds	r2, r3, #4
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	6032      	str	r2, [r6, #0]
 8011b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011b1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011b20:	2301      	movs	r3, #1
 8011b22:	e09d      	b.n	8011c60 <_printf_i+0x1e8>
 8011b24:	6833      	ldr	r3, [r6, #0]
 8011b26:	6820      	ldr	r0, [r4, #0]
 8011b28:	1d19      	adds	r1, r3, #4
 8011b2a:	6031      	str	r1, [r6, #0]
 8011b2c:	0606      	lsls	r6, r0, #24
 8011b2e:	d501      	bpl.n	8011b34 <_printf_i+0xbc>
 8011b30:	681d      	ldr	r5, [r3, #0]
 8011b32:	e003      	b.n	8011b3c <_printf_i+0xc4>
 8011b34:	0645      	lsls	r5, r0, #25
 8011b36:	d5fb      	bpl.n	8011b30 <_printf_i+0xb8>
 8011b38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011b3c:	2d00      	cmp	r5, #0
 8011b3e:	da03      	bge.n	8011b48 <_printf_i+0xd0>
 8011b40:	232d      	movs	r3, #45	@ 0x2d
 8011b42:	426d      	negs	r5, r5
 8011b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011b48:	4859      	ldr	r0, [pc, #356]	@ (8011cb0 <_printf_i+0x238>)
 8011b4a:	230a      	movs	r3, #10
 8011b4c:	e011      	b.n	8011b72 <_printf_i+0xfa>
 8011b4e:	6821      	ldr	r1, [r4, #0]
 8011b50:	6833      	ldr	r3, [r6, #0]
 8011b52:	0608      	lsls	r0, r1, #24
 8011b54:	f853 5b04 	ldr.w	r5, [r3], #4
 8011b58:	d402      	bmi.n	8011b60 <_printf_i+0xe8>
 8011b5a:	0649      	lsls	r1, r1, #25
 8011b5c:	bf48      	it	mi
 8011b5e:	b2ad      	uxthmi	r5, r5
 8011b60:	2f6f      	cmp	r7, #111	@ 0x6f
 8011b62:	4853      	ldr	r0, [pc, #332]	@ (8011cb0 <_printf_i+0x238>)
 8011b64:	6033      	str	r3, [r6, #0]
 8011b66:	bf14      	ite	ne
 8011b68:	230a      	movne	r3, #10
 8011b6a:	2308      	moveq	r3, #8
 8011b6c:	2100      	movs	r1, #0
 8011b6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011b72:	6866      	ldr	r6, [r4, #4]
 8011b74:	60a6      	str	r6, [r4, #8]
 8011b76:	2e00      	cmp	r6, #0
 8011b78:	bfa2      	ittt	ge
 8011b7a:	6821      	ldrge	r1, [r4, #0]
 8011b7c:	f021 0104 	bicge.w	r1, r1, #4
 8011b80:	6021      	strge	r1, [r4, #0]
 8011b82:	b90d      	cbnz	r5, 8011b88 <_printf_i+0x110>
 8011b84:	2e00      	cmp	r6, #0
 8011b86:	d04b      	beq.n	8011c20 <_printf_i+0x1a8>
 8011b88:	4616      	mov	r6, r2
 8011b8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8011b8e:	fb03 5711 	mls	r7, r3, r1, r5
 8011b92:	5dc7      	ldrb	r7, [r0, r7]
 8011b94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011b98:	462f      	mov	r7, r5
 8011b9a:	42bb      	cmp	r3, r7
 8011b9c:	460d      	mov	r5, r1
 8011b9e:	d9f4      	bls.n	8011b8a <_printf_i+0x112>
 8011ba0:	2b08      	cmp	r3, #8
 8011ba2:	d10b      	bne.n	8011bbc <_printf_i+0x144>
 8011ba4:	6823      	ldr	r3, [r4, #0]
 8011ba6:	07df      	lsls	r7, r3, #31
 8011ba8:	d508      	bpl.n	8011bbc <_printf_i+0x144>
 8011baa:	6923      	ldr	r3, [r4, #16]
 8011bac:	6861      	ldr	r1, [r4, #4]
 8011bae:	4299      	cmp	r1, r3
 8011bb0:	bfde      	ittt	le
 8011bb2:	2330      	movle	r3, #48	@ 0x30
 8011bb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011bb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011bbc:	1b92      	subs	r2, r2, r6
 8011bbe:	6122      	str	r2, [r4, #16]
 8011bc0:	f8cd a000 	str.w	sl, [sp]
 8011bc4:	464b      	mov	r3, r9
 8011bc6:	aa03      	add	r2, sp, #12
 8011bc8:	4621      	mov	r1, r4
 8011bca:	4640      	mov	r0, r8
 8011bcc:	f7ff fee6 	bl	801199c <_printf_common>
 8011bd0:	3001      	adds	r0, #1
 8011bd2:	d14a      	bne.n	8011c6a <_printf_i+0x1f2>
 8011bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8011bd8:	b004      	add	sp, #16
 8011bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	f043 0320 	orr.w	r3, r3, #32
 8011be4:	6023      	str	r3, [r4, #0]
 8011be6:	4833      	ldr	r0, [pc, #204]	@ (8011cb4 <_printf_i+0x23c>)
 8011be8:	2778      	movs	r7, #120	@ 0x78
 8011bea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011bee:	6823      	ldr	r3, [r4, #0]
 8011bf0:	6831      	ldr	r1, [r6, #0]
 8011bf2:	061f      	lsls	r7, r3, #24
 8011bf4:	f851 5b04 	ldr.w	r5, [r1], #4
 8011bf8:	d402      	bmi.n	8011c00 <_printf_i+0x188>
 8011bfa:	065f      	lsls	r7, r3, #25
 8011bfc:	bf48      	it	mi
 8011bfe:	b2ad      	uxthmi	r5, r5
 8011c00:	6031      	str	r1, [r6, #0]
 8011c02:	07d9      	lsls	r1, r3, #31
 8011c04:	bf44      	itt	mi
 8011c06:	f043 0320 	orrmi.w	r3, r3, #32
 8011c0a:	6023      	strmi	r3, [r4, #0]
 8011c0c:	b11d      	cbz	r5, 8011c16 <_printf_i+0x19e>
 8011c0e:	2310      	movs	r3, #16
 8011c10:	e7ac      	b.n	8011b6c <_printf_i+0xf4>
 8011c12:	4827      	ldr	r0, [pc, #156]	@ (8011cb0 <_printf_i+0x238>)
 8011c14:	e7e9      	b.n	8011bea <_printf_i+0x172>
 8011c16:	6823      	ldr	r3, [r4, #0]
 8011c18:	f023 0320 	bic.w	r3, r3, #32
 8011c1c:	6023      	str	r3, [r4, #0]
 8011c1e:	e7f6      	b.n	8011c0e <_printf_i+0x196>
 8011c20:	4616      	mov	r6, r2
 8011c22:	e7bd      	b.n	8011ba0 <_printf_i+0x128>
 8011c24:	6833      	ldr	r3, [r6, #0]
 8011c26:	6825      	ldr	r5, [r4, #0]
 8011c28:	6961      	ldr	r1, [r4, #20]
 8011c2a:	1d18      	adds	r0, r3, #4
 8011c2c:	6030      	str	r0, [r6, #0]
 8011c2e:	062e      	lsls	r6, r5, #24
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	d501      	bpl.n	8011c38 <_printf_i+0x1c0>
 8011c34:	6019      	str	r1, [r3, #0]
 8011c36:	e002      	b.n	8011c3e <_printf_i+0x1c6>
 8011c38:	0668      	lsls	r0, r5, #25
 8011c3a:	d5fb      	bpl.n	8011c34 <_printf_i+0x1bc>
 8011c3c:	8019      	strh	r1, [r3, #0]
 8011c3e:	2300      	movs	r3, #0
 8011c40:	6123      	str	r3, [r4, #16]
 8011c42:	4616      	mov	r6, r2
 8011c44:	e7bc      	b.n	8011bc0 <_printf_i+0x148>
 8011c46:	6833      	ldr	r3, [r6, #0]
 8011c48:	1d1a      	adds	r2, r3, #4
 8011c4a:	6032      	str	r2, [r6, #0]
 8011c4c:	681e      	ldr	r6, [r3, #0]
 8011c4e:	6862      	ldr	r2, [r4, #4]
 8011c50:	2100      	movs	r1, #0
 8011c52:	4630      	mov	r0, r6
 8011c54:	f7ee fad4 	bl	8000200 <memchr>
 8011c58:	b108      	cbz	r0, 8011c5e <_printf_i+0x1e6>
 8011c5a:	1b80      	subs	r0, r0, r6
 8011c5c:	6060      	str	r0, [r4, #4]
 8011c5e:	6863      	ldr	r3, [r4, #4]
 8011c60:	6123      	str	r3, [r4, #16]
 8011c62:	2300      	movs	r3, #0
 8011c64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c68:	e7aa      	b.n	8011bc0 <_printf_i+0x148>
 8011c6a:	6923      	ldr	r3, [r4, #16]
 8011c6c:	4632      	mov	r2, r6
 8011c6e:	4649      	mov	r1, r9
 8011c70:	4640      	mov	r0, r8
 8011c72:	47d0      	blx	sl
 8011c74:	3001      	adds	r0, #1
 8011c76:	d0ad      	beq.n	8011bd4 <_printf_i+0x15c>
 8011c78:	6823      	ldr	r3, [r4, #0]
 8011c7a:	079b      	lsls	r3, r3, #30
 8011c7c:	d413      	bmi.n	8011ca6 <_printf_i+0x22e>
 8011c7e:	68e0      	ldr	r0, [r4, #12]
 8011c80:	9b03      	ldr	r3, [sp, #12]
 8011c82:	4298      	cmp	r0, r3
 8011c84:	bfb8      	it	lt
 8011c86:	4618      	movlt	r0, r3
 8011c88:	e7a6      	b.n	8011bd8 <_printf_i+0x160>
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	4632      	mov	r2, r6
 8011c8e:	4649      	mov	r1, r9
 8011c90:	4640      	mov	r0, r8
 8011c92:	47d0      	blx	sl
 8011c94:	3001      	adds	r0, #1
 8011c96:	d09d      	beq.n	8011bd4 <_printf_i+0x15c>
 8011c98:	3501      	adds	r5, #1
 8011c9a:	68e3      	ldr	r3, [r4, #12]
 8011c9c:	9903      	ldr	r1, [sp, #12]
 8011c9e:	1a5b      	subs	r3, r3, r1
 8011ca0:	42ab      	cmp	r3, r5
 8011ca2:	dcf2      	bgt.n	8011c8a <_printf_i+0x212>
 8011ca4:	e7eb      	b.n	8011c7e <_printf_i+0x206>
 8011ca6:	2500      	movs	r5, #0
 8011ca8:	f104 0619 	add.w	r6, r4, #25
 8011cac:	e7f5      	b.n	8011c9a <_printf_i+0x222>
 8011cae:	bf00      	nop
 8011cb0:	08015511 	.word	0x08015511
 8011cb4:	08015522 	.word	0x08015522

08011cb8 <__sflush_r>:
 8011cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc0:	0716      	lsls	r6, r2, #28
 8011cc2:	4605      	mov	r5, r0
 8011cc4:	460c      	mov	r4, r1
 8011cc6:	d454      	bmi.n	8011d72 <__sflush_r+0xba>
 8011cc8:	684b      	ldr	r3, [r1, #4]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	dc02      	bgt.n	8011cd4 <__sflush_r+0x1c>
 8011cce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	dd48      	ble.n	8011d66 <__sflush_r+0xae>
 8011cd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011cd6:	2e00      	cmp	r6, #0
 8011cd8:	d045      	beq.n	8011d66 <__sflush_r+0xae>
 8011cda:	2300      	movs	r3, #0
 8011cdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011ce0:	682f      	ldr	r7, [r5, #0]
 8011ce2:	6a21      	ldr	r1, [r4, #32]
 8011ce4:	602b      	str	r3, [r5, #0]
 8011ce6:	d030      	beq.n	8011d4a <__sflush_r+0x92>
 8011ce8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011cea:	89a3      	ldrh	r3, [r4, #12]
 8011cec:	0759      	lsls	r1, r3, #29
 8011cee:	d505      	bpl.n	8011cfc <__sflush_r+0x44>
 8011cf0:	6863      	ldr	r3, [r4, #4]
 8011cf2:	1ad2      	subs	r2, r2, r3
 8011cf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011cf6:	b10b      	cbz	r3, 8011cfc <__sflush_r+0x44>
 8011cf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011cfa:	1ad2      	subs	r2, r2, r3
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011d00:	6a21      	ldr	r1, [r4, #32]
 8011d02:	4628      	mov	r0, r5
 8011d04:	47b0      	blx	r6
 8011d06:	1c43      	adds	r3, r0, #1
 8011d08:	89a3      	ldrh	r3, [r4, #12]
 8011d0a:	d106      	bne.n	8011d1a <__sflush_r+0x62>
 8011d0c:	6829      	ldr	r1, [r5, #0]
 8011d0e:	291d      	cmp	r1, #29
 8011d10:	d82b      	bhi.n	8011d6a <__sflush_r+0xb2>
 8011d12:	4a2a      	ldr	r2, [pc, #168]	@ (8011dbc <__sflush_r+0x104>)
 8011d14:	410a      	asrs	r2, r1
 8011d16:	07d6      	lsls	r6, r2, #31
 8011d18:	d427      	bmi.n	8011d6a <__sflush_r+0xb2>
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	6062      	str	r2, [r4, #4]
 8011d1e:	04d9      	lsls	r1, r3, #19
 8011d20:	6922      	ldr	r2, [r4, #16]
 8011d22:	6022      	str	r2, [r4, #0]
 8011d24:	d504      	bpl.n	8011d30 <__sflush_r+0x78>
 8011d26:	1c42      	adds	r2, r0, #1
 8011d28:	d101      	bne.n	8011d2e <__sflush_r+0x76>
 8011d2a:	682b      	ldr	r3, [r5, #0]
 8011d2c:	b903      	cbnz	r3, 8011d30 <__sflush_r+0x78>
 8011d2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011d30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d32:	602f      	str	r7, [r5, #0]
 8011d34:	b1b9      	cbz	r1, 8011d66 <__sflush_r+0xae>
 8011d36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d3a:	4299      	cmp	r1, r3
 8011d3c:	d002      	beq.n	8011d44 <__sflush_r+0x8c>
 8011d3e:	4628      	mov	r0, r5
 8011d40:	f7ff fb48 	bl	80113d4 <_free_r>
 8011d44:	2300      	movs	r3, #0
 8011d46:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d48:	e00d      	b.n	8011d66 <__sflush_r+0xae>
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	4628      	mov	r0, r5
 8011d4e:	47b0      	blx	r6
 8011d50:	4602      	mov	r2, r0
 8011d52:	1c50      	adds	r0, r2, #1
 8011d54:	d1c9      	bne.n	8011cea <__sflush_r+0x32>
 8011d56:	682b      	ldr	r3, [r5, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d0c6      	beq.n	8011cea <__sflush_r+0x32>
 8011d5c:	2b1d      	cmp	r3, #29
 8011d5e:	d001      	beq.n	8011d64 <__sflush_r+0xac>
 8011d60:	2b16      	cmp	r3, #22
 8011d62:	d11e      	bne.n	8011da2 <__sflush_r+0xea>
 8011d64:	602f      	str	r7, [r5, #0]
 8011d66:	2000      	movs	r0, #0
 8011d68:	e022      	b.n	8011db0 <__sflush_r+0xf8>
 8011d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d6e:	b21b      	sxth	r3, r3
 8011d70:	e01b      	b.n	8011daa <__sflush_r+0xf2>
 8011d72:	690f      	ldr	r7, [r1, #16]
 8011d74:	2f00      	cmp	r7, #0
 8011d76:	d0f6      	beq.n	8011d66 <__sflush_r+0xae>
 8011d78:	0793      	lsls	r3, r2, #30
 8011d7a:	680e      	ldr	r6, [r1, #0]
 8011d7c:	bf08      	it	eq
 8011d7e:	694b      	ldreq	r3, [r1, #20]
 8011d80:	600f      	str	r7, [r1, #0]
 8011d82:	bf18      	it	ne
 8011d84:	2300      	movne	r3, #0
 8011d86:	eba6 0807 	sub.w	r8, r6, r7
 8011d8a:	608b      	str	r3, [r1, #8]
 8011d8c:	f1b8 0f00 	cmp.w	r8, #0
 8011d90:	dde9      	ble.n	8011d66 <__sflush_r+0xae>
 8011d92:	6a21      	ldr	r1, [r4, #32]
 8011d94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011d96:	4643      	mov	r3, r8
 8011d98:	463a      	mov	r2, r7
 8011d9a:	4628      	mov	r0, r5
 8011d9c:	47b0      	blx	r6
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	dc08      	bgt.n	8011db4 <__sflush_r+0xfc>
 8011da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011da6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011daa:	81a3      	strh	r3, [r4, #12]
 8011dac:	f04f 30ff 	mov.w	r0, #4294967295
 8011db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011db4:	4407      	add	r7, r0
 8011db6:	eba8 0800 	sub.w	r8, r8, r0
 8011dba:	e7e7      	b.n	8011d8c <__sflush_r+0xd4>
 8011dbc:	dfbffffe 	.word	0xdfbffffe

08011dc0 <_fflush_r>:
 8011dc0:	b538      	push	{r3, r4, r5, lr}
 8011dc2:	690b      	ldr	r3, [r1, #16]
 8011dc4:	4605      	mov	r5, r0
 8011dc6:	460c      	mov	r4, r1
 8011dc8:	b913      	cbnz	r3, 8011dd0 <_fflush_r+0x10>
 8011dca:	2500      	movs	r5, #0
 8011dcc:	4628      	mov	r0, r5
 8011dce:	bd38      	pop	{r3, r4, r5, pc}
 8011dd0:	b118      	cbz	r0, 8011dda <_fflush_r+0x1a>
 8011dd2:	6a03      	ldr	r3, [r0, #32]
 8011dd4:	b90b      	cbnz	r3, 8011dda <_fflush_r+0x1a>
 8011dd6:	f7ff f8c3 	bl	8010f60 <__sinit>
 8011dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d0f3      	beq.n	8011dca <_fflush_r+0xa>
 8011de2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011de4:	07d0      	lsls	r0, r2, #31
 8011de6:	d404      	bmi.n	8011df2 <_fflush_r+0x32>
 8011de8:	0599      	lsls	r1, r3, #22
 8011dea:	d402      	bmi.n	8011df2 <_fflush_r+0x32>
 8011dec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011dee:	f7ff fae6 	bl	80113be <__retarget_lock_acquire_recursive>
 8011df2:	4628      	mov	r0, r5
 8011df4:	4621      	mov	r1, r4
 8011df6:	f7ff ff5f 	bl	8011cb8 <__sflush_r>
 8011dfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011dfc:	07da      	lsls	r2, r3, #31
 8011dfe:	4605      	mov	r5, r0
 8011e00:	d4e4      	bmi.n	8011dcc <_fflush_r+0xc>
 8011e02:	89a3      	ldrh	r3, [r4, #12]
 8011e04:	059b      	lsls	r3, r3, #22
 8011e06:	d4e1      	bmi.n	8011dcc <_fflush_r+0xc>
 8011e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e0a:	f7ff fad9 	bl	80113c0 <__retarget_lock_release_recursive>
 8011e0e:	e7dd      	b.n	8011dcc <_fflush_r+0xc>

08011e10 <__swhatbuf_r>:
 8011e10:	b570      	push	{r4, r5, r6, lr}
 8011e12:	460c      	mov	r4, r1
 8011e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e18:	2900      	cmp	r1, #0
 8011e1a:	b096      	sub	sp, #88	@ 0x58
 8011e1c:	4615      	mov	r5, r2
 8011e1e:	461e      	mov	r6, r3
 8011e20:	da0d      	bge.n	8011e3e <__swhatbuf_r+0x2e>
 8011e22:	89a3      	ldrh	r3, [r4, #12]
 8011e24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011e28:	f04f 0100 	mov.w	r1, #0
 8011e2c:	bf14      	ite	ne
 8011e2e:	2340      	movne	r3, #64	@ 0x40
 8011e30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011e34:	2000      	movs	r0, #0
 8011e36:	6031      	str	r1, [r6, #0]
 8011e38:	602b      	str	r3, [r5, #0]
 8011e3a:	b016      	add	sp, #88	@ 0x58
 8011e3c:	bd70      	pop	{r4, r5, r6, pc}
 8011e3e:	466a      	mov	r2, sp
 8011e40:	f000 f896 	bl	8011f70 <_fstat_r>
 8011e44:	2800      	cmp	r0, #0
 8011e46:	dbec      	blt.n	8011e22 <__swhatbuf_r+0x12>
 8011e48:	9901      	ldr	r1, [sp, #4]
 8011e4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011e4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011e52:	4259      	negs	r1, r3
 8011e54:	4159      	adcs	r1, r3
 8011e56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e5a:	e7eb      	b.n	8011e34 <__swhatbuf_r+0x24>

08011e5c <__smakebuf_r>:
 8011e5c:	898b      	ldrh	r3, [r1, #12]
 8011e5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e60:	079d      	lsls	r5, r3, #30
 8011e62:	4606      	mov	r6, r0
 8011e64:	460c      	mov	r4, r1
 8011e66:	d507      	bpl.n	8011e78 <__smakebuf_r+0x1c>
 8011e68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011e6c:	6023      	str	r3, [r4, #0]
 8011e6e:	6123      	str	r3, [r4, #16]
 8011e70:	2301      	movs	r3, #1
 8011e72:	6163      	str	r3, [r4, #20]
 8011e74:	b003      	add	sp, #12
 8011e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e78:	ab01      	add	r3, sp, #4
 8011e7a:	466a      	mov	r2, sp
 8011e7c:	f7ff ffc8 	bl	8011e10 <__swhatbuf_r>
 8011e80:	9f00      	ldr	r7, [sp, #0]
 8011e82:	4605      	mov	r5, r0
 8011e84:	4639      	mov	r1, r7
 8011e86:	4630      	mov	r0, r6
 8011e88:	f7fe ff52 	bl	8010d30 <_malloc_r>
 8011e8c:	b948      	cbnz	r0, 8011ea2 <__smakebuf_r+0x46>
 8011e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e92:	059a      	lsls	r2, r3, #22
 8011e94:	d4ee      	bmi.n	8011e74 <__smakebuf_r+0x18>
 8011e96:	f023 0303 	bic.w	r3, r3, #3
 8011e9a:	f043 0302 	orr.w	r3, r3, #2
 8011e9e:	81a3      	strh	r3, [r4, #12]
 8011ea0:	e7e2      	b.n	8011e68 <__smakebuf_r+0xc>
 8011ea2:	89a3      	ldrh	r3, [r4, #12]
 8011ea4:	6020      	str	r0, [r4, #0]
 8011ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011eaa:	81a3      	strh	r3, [r4, #12]
 8011eac:	9b01      	ldr	r3, [sp, #4]
 8011eae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011eb2:	b15b      	cbz	r3, 8011ecc <__smakebuf_r+0x70>
 8011eb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011eb8:	4630      	mov	r0, r6
 8011eba:	f000 f86b 	bl	8011f94 <_isatty_r>
 8011ebe:	b128      	cbz	r0, 8011ecc <__smakebuf_r+0x70>
 8011ec0:	89a3      	ldrh	r3, [r4, #12]
 8011ec2:	f023 0303 	bic.w	r3, r3, #3
 8011ec6:	f043 0301 	orr.w	r3, r3, #1
 8011eca:	81a3      	strh	r3, [r4, #12]
 8011ecc:	89a3      	ldrh	r3, [r4, #12]
 8011ece:	431d      	orrs	r5, r3
 8011ed0:	81a5      	strh	r5, [r4, #12]
 8011ed2:	e7cf      	b.n	8011e74 <__smakebuf_r+0x18>

08011ed4 <_putc_r>:
 8011ed4:	b570      	push	{r4, r5, r6, lr}
 8011ed6:	460d      	mov	r5, r1
 8011ed8:	4614      	mov	r4, r2
 8011eda:	4606      	mov	r6, r0
 8011edc:	b118      	cbz	r0, 8011ee6 <_putc_r+0x12>
 8011ede:	6a03      	ldr	r3, [r0, #32]
 8011ee0:	b90b      	cbnz	r3, 8011ee6 <_putc_r+0x12>
 8011ee2:	f7ff f83d 	bl	8010f60 <__sinit>
 8011ee6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ee8:	07d8      	lsls	r0, r3, #31
 8011eea:	d405      	bmi.n	8011ef8 <_putc_r+0x24>
 8011eec:	89a3      	ldrh	r3, [r4, #12]
 8011eee:	0599      	lsls	r1, r3, #22
 8011ef0:	d402      	bmi.n	8011ef8 <_putc_r+0x24>
 8011ef2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ef4:	f7ff fa63 	bl	80113be <__retarget_lock_acquire_recursive>
 8011ef8:	68a3      	ldr	r3, [r4, #8]
 8011efa:	3b01      	subs	r3, #1
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	60a3      	str	r3, [r4, #8]
 8011f00:	da05      	bge.n	8011f0e <_putc_r+0x3a>
 8011f02:	69a2      	ldr	r2, [r4, #24]
 8011f04:	4293      	cmp	r3, r2
 8011f06:	db12      	blt.n	8011f2e <_putc_r+0x5a>
 8011f08:	b2eb      	uxtb	r3, r5
 8011f0a:	2b0a      	cmp	r3, #10
 8011f0c:	d00f      	beq.n	8011f2e <_putc_r+0x5a>
 8011f0e:	6823      	ldr	r3, [r4, #0]
 8011f10:	1c5a      	adds	r2, r3, #1
 8011f12:	6022      	str	r2, [r4, #0]
 8011f14:	701d      	strb	r5, [r3, #0]
 8011f16:	b2ed      	uxtb	r5, r5
 8011f18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f1a:	07da      	lsls	r2, r3, #31
 8011f1c:	d405      	bmi.n	8011f2a <_putc_r+0x56>
 8011f1e:	89a3      	ldrh	r3, [r4, #12]
 8011f20:	059b      	lsls	r3, r3, #22
 8011f22:	d402      	bmi.n	8011f2a <_putc_r+0x56>
 8011f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f26:	f7ff fa4b 	bl	80113c0 <__retarget_lock_release_recursive>
 8011f2a:	4628      	mov	r0, r5
 8011f2c:	bd70      	pop	{r4, r5, r6, pc}
 8011f2e:	4629      	mov	r1, r5
 8011f30:	4622      	mov	r2, r4
 8011f32:	4630      	mov	r0, r6
 8011f34:	f7ff f925 	bl	8011182 <__swbuf_r>
 8011f38:	4605      	mov	r5, r0
 8011f3a:	e7ed      	b.n	8011f18 <_putc_r+0x44>

08011f3c <memmove>:
 8011f3c:	4288      	cmp	r0, r1
 8011f3e:	b510      	push	{r4, lr}
 8011f40:	eb01 0402 	add.w	r4, r1, r2
 8011f44:	d902      	bls.n	8011f4c <memmove+0x10>
 8011f46:	4284      	cmp	r4, r0
 8011f48:	4623      	mov	r3, r4
 8011f4a:	d807      	bhi.n	8011f5c <memmove+0x20>
 8011f4c:	1e43      	subs	r3, r0, #1
 8011f4e:	42a1      	cmp	r1, r4
 8011f50:	d008      	beq.n	8011f64 <memmove+0x28>
 8011f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f5a:	e7f8      	b.n	8011f4e <memmove+0x12>
 8011f5c:	4402      	add	r2, r0
 8011f5e:	4601      	mov	r1, r0
 8011f60:	428a      	cmp	r2, r1
 8011f62:	d100      	bne.n	8011f66 <memmove+0x2a>
 8011f64:	bd10      	pop	{r4, pc}
 8011f66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011f6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011f6e:	e7f7      	b.n	8011f60 <memmove+0x24>

08011f70 <_fstat_r>:
 8011f70:	b538      	push	{r3, r4, r5, lr}
 8011f72:	4d07      	ldr	r5, [pc, #28]	@ (8011f90 <_fstat_r+0x20>)
 8011f74:	2300      	movs	r3, #0
 8011f76:	4604      	mov	r4, r0
 8011f78:	4608      	mov	r0, r1
 8011f7a:	4611      	mov	r1, r2
 8011f7c:	602b      	str	r3, [r5, #0]
 8011f7e:	f7f0 fcac 	bl	80028da <_fstat>
 8011f82:	1c43      	adds	r3, r0, #1
 8011f84:	d102      	bne.n	8011f8c <_fstat_r+0x1c>
 8011f86:	682b      	ldr	r3, [r5, #0]
 8011f88:	b103      	cbz	r3, 8011f8c <_fstat_r+0x1c>
 8011f8a:	6023      	str	r3, [r4, #0]
 8011f8c:	bd38      	pop	{r3, r4, r5, pc}
 8011f8e:	bf00      	nop
 8011f90:	2000264c 	.word	0x2000264c

08011f94 <_isatty_r>:
 8011f94:	b538      	push	{r3, r4, r5, lr}
 8011f96:	4d06      	ldr	r5, [pc, #24]	@ (8011fb0 <_isatty_r+0x1c>)
 8011f98:	2300      	movs	r3, #0
 8011f9a:	4604      	mov	r4, r0
 8011f9c:	4608      	mov	r0, r1
 8011f9e:	602b      	str	r3, [r5, #0]
 8011fa0:	f7f0 fcab 	bl	80028fa <_isatty>
 8011fa4:	1c43      	adds	r3, r0, #1
 8011fa6:	d102      	bne.n	8011fae <_isatty_r+0x1a>
 8011fa8:	682b      	ldr	r3, [r5, #0]
 8011faa:	b103      	cbz	r3, 8011fae <_isatty_r+0x1a>
 8011fac:	6023      	str	r3, [r4, #0]
 8011fae:	bd38      	pop	{r3, r4, r5, pc}
 8011fb0:	2000264c 	.word	0x2000264c

08011fb4 <memcpy>:
 8011fb4:	440a      	add	r2, r1
 8011fb6:	4291      	cmp	r1, r2
 8011fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8011fbc:	d100      	bne.n	8011fc0 <memcpy+0xc>
 8011fbe:	4770      	bx	lr
 8011fc0:	b510      	push	{r4, lr}
 8011fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011fca:	4291      	cmp	r1, r2
 8011fcc:	d1f9      	bne.n	8011fc2 <memcpy+0xe>
 8011fce:	bd10      	pop	{r4, pc}

08011fd0 <_realloc_r>:
 8011fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fd4:	4680      	mov	r8, r0
 8011fd6:	4615      	mov	r5, r2
 8011fd8:	460c      	mov	r4, r1
 8011fda:	b921      	cbnz	r1, 8011fe6 <_realloc_r+0x16>
 8011fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fe0:	4611      	mov	r1, r2
 8011fe2:	f7fe bea5 	b.w	8010d30 <_malloc_r>
 8011fe6:	b92a      	cbnz	r2, 8011ff4 <_realloc_r+0x24>
 8011fe8:	f7ff f9f4 	bl	80113d4 <_free_r>
 8011fec:	2400      	movs	r4, #0
 8011fee:	4620      	mov	r0, r4
 8011ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ff4:	f000 f81a 	bl	801202c <_malloc_usable_size_r>
 8011ff8:	4285      	cmp	r5, r0
 8011ffa:	4606      	mov	r6, r0
 8011ffc:	d802      	bhi.n	8012004 <_realloc_r+0x34>
 8011ffe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012002:	d8f4      	bhi.n	8011fee <_realloc_r+0x1e>
 8012004:	4629      	mov	r1, r5
 8012006:	4640      	mov	r0, r8
 8012008:	f7fe fe92 	bl	8010d30 <_malloc_r>
 801200c:	4607      	mov	r7, r0
 801200e:	2800      	cmp	r0, #0
 8012010:	d0ec      	beq.n	8011fec <_realloc_r+0x1c>
 8012012:	42b5      	cmp	r5, r6
 8012014:	462a      	mov	r2, r5
 8012016:	4621      	mov	r1, r4
 8012018:	bf28      	it	cs
 801201a:	4632      	movcs	r2, r6
 801201c:	f7ff ffca 	bl	8011fb4 <memcpy>
 8012020:	4621      	mov	r1, r4
 8012022:	4640      	mov	r0, r8
 8012024:	f7ff f9d6 	bl	80113d4 <_free_r>
 8012028:	463c      	mov	r4, r7
 801202a:	e7e0      	b.n	8011fee <_realloc_r+0x1e>

0801202c <_malloc_usable_size_r>:
 801202c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012030:	1f18      	subs	r0, r3, #4
 8012032:	2b00      	cmp	r3, #0
 8012034:	bfbc      	itt	lt
 8012036:	580b      	ldrlt	r3, [r1, r0]
 8012038:	18c0      	addlt	r0, r0, r3
 801203a:	4770      	bx	lr

0801203c <_init>:
 801203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801203e:	bf00      	nop
 8012040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012042:	bc08      	pop	{r3}
 8012044:	469e      	mov	lr, r3
 8012046:	4770      	bx	lr

08012048 <_fini>:
 8012048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801204a:	bf00      	nop
 801204c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801204e:	bc08      	pop	{r3}
 8012050:	469e      	mov	lr, r3
 8012052:	4770      	bx	lr
